###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:17
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\filesystem\bd\SlicingBlockDevice.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\bd\SlicingBlockDevice.d
#        -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\bd\SlicingBlockDevice.s.txt
#        -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\bd\SlicingBlockDevice.o
#        .\mbed-os\features\filesystem\bd\SlicingBlockDevice.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\bd\SlicingBlockDevice.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\bd\SlicingBlockDevice.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\filesystem\bd\SlicingBlockDevice.cpp
      1          /* mbed Microcontroller Library
      2           * Copyright (c) 2017 ARM Limited
      3           *
      4           * Licensed under the Apache License, Version 2.0 (the "License");
      5           * you may not use this file except in compliance with the License.
      6           * You may obtain a copy of the License at
      7           *
      8           *     http://www.apache.org/licenses/LICENSE-2.0
      9           *
     10           * Unless required by applicable law or agreed to in writing, software
     11           * distributed under the License is distributed on an "AS IS" BASIS,
     12           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     13           * See the License for the specific language governing permissions and
     14           * limitations under the License.
     15           */
     16          
     17          #include "SlicingBlockDevice.h"

   \                                 In section .text, align 2
   \   __interwork __softfp int BlockDevice::trim(bd_addr_t, bd_size_t)
   \                     _ZN11BlockDevice4trimEyy: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp bool BlockDevice::is_valid_erase(bd_addr_t, bd_size_t) const
   \                     _ZNK11BlockDevice14is_valid_eraseEyy: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0x0014             MOVS     R4,R2
   \   00000004   0x001D             MOVS     R5,R3
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x6A89             LDR      R1,[R1, #+40]
   \   0000000A   0x4788             BLX      R1
   \   0000000C   0x0002             MOVS     R2,R0
   \   0000000E   0x000B             MOVS     R3,R1
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x0029             MOVS     R1,R5
   \   00000014   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000018   0x2B00             CMP      R3,#+0
   \   0000001A   0xD11E             BNE      ??is_valid_erase_0
   \   0000001C   0x2A00             CMP      R2,#+0
   \   0000001E   0xD11C             BNE      ??is_valid_erase_0
   \   00000020   0xA806             ADD      R0,SP,#+24
   \   00000022   0xC8C0             LDM      R0!,{R6,R7}
   \   00000024   0x9800             LDR      R0,[SP, #+0]
   \   00000026   0x6801             LDR      R1,[R0, #+0]
   \   00000028   0x6A89             LDR      R1,[R1, #+40]
   \   0000002A   0x4788             BLX      R1
   \   0000002C   0x0002             MOVS     R2,R0
   \   0000002E   0x000B             MOVS     R3,R1
   \   00000030   0x0030             MOVS     R0,R6
   \   00000032   0x0039             MOVS     R1,R7
   \   00000034   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000038   0x2B00             CMP      R3,#+0
   \   0000003A   0xD10E             BNE      ??is_valid_erase_0
   \   0000003C   0x2A00             CMP      R2,#+0
   \   0000003E   0xD10C             BNE      ??is_valid_erase_0
   \   00000040   0x9800             LDR      R0,[SP, #+0]
   \   00000042   0x6801             LDR      R1,[R0, #+0]
   \   00000044   0x6AC9             LDR      R1,[R1, #+44]
   \   00000046   0x4788             BLX      R1
   \   00000048   0x1936             ADDS     R6,R6,R4
   \   0000004A   0x416F             ADCS     R7,R7,R5
   \   0000004C   0x42B9             CMP      R1,R7
   \   0000004E   0xD304             BCC      ??is_valid_erase_0
   \   00000050   0xD801             BHI      ??is_valid_erase_1
   \   00000052   0x42B0             CMP      R0,R6
   \   00000054   0xD301             BCC      ??is_valid_erase_0
   \                     ??is_valid_erase_1: (+1)
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0xBDF2             POP      {R1,R4-R7,PC}
   \                     ??is_valid_erase_0: (+1)
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return

   \                                 In section .rodata, align 4
   \   __absolute mbed::Callback<void ()>::ops const mbed::Callback<void ()>::generate<>(mbed::Callback<void ()>::function_context<void (*)(void *), void> const &)::ops
   \                     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops:
   \   00000000   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv
   \   00000004   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv
   \   00000008   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0x6848             LDR      R0,[R1, #+4]
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x4788             BLX      R1
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??function_move_0
   \   00000004   0xC90C             LDM      R1!,{R2,R3}
   \   00000006   0xC00C             STM      R0!,{R2,R3}
   \                     ??function_move_0: (+1)
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
   \                     _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4
   \   __interwork __softfp void mbed::callback<>(void (*)(void *), void *)
   \                     _ZN4mbed8callbackIvvvEENS_8CallbackIFT1_vEEEPFS2_PT_EPT0_: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0xC078             STM      R0!,{R3-R6}
   \   0000000C   0x3810             SUBS     R0,R0,#+16
   \   0000000E   0xD001             BEQ      ??callback_0
   \   00000010   0x6001             STR      R1,[R0, #+0]
   \   00000012   0x6042             STR      R2,[R0, #+4]
   \                     ??callback_0: (+1)
   \   00000014   0x4901             LDR      R1,??callback_1
   \   00000016   0x60C1             STR      R1,[R0, #+12]
   \   00000018   0xBC70             POP      {R4-R6}
   \   0000001A   0x4770             BX       LR               ;; return
   \                     ??callback_1:
   \   0000001C   0x........         DC32     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops

   \                                 In section .text, align 2
   \   __code __interwork __softfp SlicingBlockDevice::~SlicingBlockDevice()
   \                     _ZN18SlicingBlockDeviceD1Ev: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __code __interwork __softfp SlicingBlockDevice::deleter ~SlicingBlockDevice()
   \                     _ZN18SlicingBlockDeviceD0Ev: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZdlPv
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     18          
     19          

   \                                 In section .text, align 2, keep-with-next
     20          SlicingBlockDevice::SlicingBlockDevice(BlockDevice *bd, bd_addr_t start, bd_addr_t stop)
   \                     _ZN18SlicingBlockDeviceC1EP11BlockDeviceyy: (+1)
   \   00000000   0xBF00             Nop      
   \   00000002                      REQUIRE ?Subroutine0
   \   00000002                      ;; // Fall through to label ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0xB4F9             PUSH     {R0,R3-R7}
   \   00000002   0x....             LDR      R0,??DataTable5
   \   00000004   0x9C00             LDR      R4,[SP, #+0]
   \   00000006   0x6020             STR      R0,[R4, #+0]
     21              : _bd(bd)
   \   00000008   0x9800             LDR      R0,[SP, #+0]
   \   0000000A   0x6041             STR      R1,[R0, #+4]
     22              , _start_from_end(false), _start(start)
   \   0000000C   0x2600             MOVS     R6,#+0
     23              , _stop_from_end(false), _stop(stop)
   \   0000000E   0x2700             MOVS     R7,#+0
   \   00000010   0xA806             ADD      R0,SP,#+24
   \   00000012   0xC803             LDM      R0,{R0,R1}
     24          {
     25              if ((int64_t)_start < 0) {
   \   00000014   0x2B00             CMP      R3,#+0
   \   00000016   0xDA05             BGE      ??Subroutine0_0
     26                  _start_from_end = true;
   \   00000018   0x2601             MOVS     R6,#+1
     27                  _start = -_start;
   \   0000001A   0x2500             MOVS     R5,#+0
   \   0000001C   0x1ABC             SUBS     R4,R7,R2
   \   0000001E   0x419D             SBCS     R5,R5,R3
   \   00000020   0x0022             MOVS     R2,R4
   \   00000022   0x002B             MOVS     R3,R5
   \                     ??Subroutine0_0: (+1)
   \   00000024   0x9C00             LDR      R4,[SP, #+0]
   \   00000026   0x3410             ADDS     R4,R4,#+16
   \   00000028   0xC40C             STM      R4!,{R2,R3}
   \   0000002A   0x9A00             LDR      R2,[SP, #+0]
   \   0000002C   0x7216             STRB     R6,[R2, #+8]
     28              }
     29          
     30              if ((int64_t)_stop <= 0) {
   \   0000002E   0x2900             CMP      R1,#+0
   \   00000030   0xDC09             BGT      ??Subroutine0_1
   \   00000032   0xDB01             BLT      ??Subroutine0_2
   \   00000034   0x2801             CMP      R0,#+1
   \   00000036   0xD206             BCS      ??Subroutine0_1
     31                  _stop_from_end = true;
   \                     ??Subroutine0_2: (+1)
   \   00000038   0x2701             MOVS     R7,#+1
     32                  _stop = -_stop;
   \   0000003A   0x2200             MOVS     R2,#+0
   \   0000003C   0x2300             MOVS     R3,#+0
   \   0000003E   0x1A12             SUBS     R2,R2,R0
   \   00000040   0x418B             SBCS     R3,R3,R1
   \   00000042   0x0010             MOVS     R0,R2
   \   00000044   0x0019             MOVS     R1,R3
   \                     ??Subroutine0_1: (+1)
   \   00000046   0x9A00             LDR      R2,[SP, #+0]
   \   00000048   0x3220             ADDS     R2,R2,#+32
   \   0000004A   0xC203             STM      R2!,{R0,R1}
   \   0000004C   0x9800             LDR      R0,[SP, #+0]
   \   0000004E   0x7607             STRB     R7,[R0, #+24]
     33              }
     34          }
   \   00000050   0x9800             LDR      R0,[SP, #+0]
   \   00000052   0xBCF6             POP      {R1,R2,R4-R7}
   \   00000054   0x4770             BX       LR               ;; return
     35          

   \                                 In section .text, align 4, keep-with-next
     36          int SlicingBlockDevice::init()
     37          {
   \                     _ZN18SlicingBlockDevice4initEv: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
     38              int err = _bd->init();
   \   00000006   0x6860             LDR      R0,[R4, #+4]
   \   00000008   0x6801             LDR      R1,[R0, #+0]
   \   0000000A   0x6889             LDR      R1,[R1, #+8]
   \   0000000C   0x4788             BLX      R1
     39              if (err) {
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD134             BNE      ??init_0
     40                  return err;
     41              }
     42          
     43              bd_size_t size = _bd->size();
   \   00000012   0x6860             LDR      R0,[R4, #+4]
   \   00000014   0x6801             LDR      R1,[R0, #+0]
   \   00000016   0x6AC9             LDR      R1,[R1, #+44]
   \   00000018   0x4788             BLX      R1
     44          
     45              // Calculate from_end values
     46              if (_start_from_end) {
   \   0000001A   0x7A22             LDRB     R2,[R4, #+8]
   \   0000001C   0x2A00             CMP      R2,#+0
   \   0000001E   0xD00A             BEQ      ??init_1
     47                  _start_from_end = false;
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0x7222             STRB     R2,[R4, #+8]
     48                  _start = size - _start;
   \   00000024   0x0022             MOVS     R2,R4
   \   00000026   0x3210             ADDS     R2,R2,#+16
   \   00000028   0xCAC0             LDM      R2!,{R6,R7}
   \   0000002A   0x000B             MOVS     R3,R1
   \   0000002C   0x1B82             SUBS     R2,R0,R6
   \   0000002E   0x41BB             SBCS     R3,R3,R7
   \   00000030   0x0025             MOVS     R5,R4
   \   00000032   0x3510             ADDS     R5,R5,#+16
   \   00000034   0xC50C             STM      R5!,{R2,R3}
     49              }
     50          
     51              if (_stop_from_end) {
   \                     ??init_1: (+1)
   \   00000036   0x7E22             LDRB     R2,[R4, #+24]
   \   00000038   0x2A00             CMP      R2,#+0
   \   0000003A   0xD009             BEQ      ??init_2
     52                  _stop_from_end = false;
   \   0000003C   0x2200             MOVS     R2,#+0
   \   0000003E   0x7622             STRB     R2,[R4, #+24]
     53                  _stop = size - _stop;
   \   00000040   0x0022             MOVS     R2,R4
   \   00000042   0x3220             ADDS     R2,R2,#+32
   \   00000044   0xCA0C             LDM      R2,{R2,R3}
   \   00000046   0x1A80             SUBS     R0,R0,R2
   \   00000048   0x4199             SBCS     R1,R1,R3
   \   0000004A   0x0022             MOVS     R2,R4
   \   0000004C   0x3220             ADDS     R2,R2,#+32
   \   0000004E   0xC203             STM      R2!,{R0,R1}
     54              }
     55          
     56              // Check that block addresses are valid
     57              MBED_ASSERT(_bd->is_valid_erase(_start, _stop - _start));
   \                     ??init_2: (+1)
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0x3010             ADDS     R0,R0,#+16
   \   00000054   0xC80C             LDM      R0!,{R2,R3}
   \   00000056   0x0020             MOVS     R0,R4
   \   00000058   0x3020             ADDS     R0,R0,#+32
   \   0000005A   0xC803             LDM      R0,{R0,R1}
   \   0000005C   0x1A80             SUBS     R0,R0,R2
   \   0000005E   0x4199             SBCS     R1,R1,R3
   \   00000060   0x9000             STR      R0,[SP, #+0]
   \   00000062   0x9101             STR      R1,[SP, #+4]
   \   00000064   0x6860             LDR      R0,[R4, #+4]
   \   00000066   0x.... 0x....      BL       _ZNK11BlockDevice14is_valid_eraseEyy
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xD105             BNE      ??init_3
   \   0000006E   0x2239             MOVS     R2,#+57
   \   00000070   0x....             ADR.N    R1,?_1
   \   00000072   0xBF00             Nop      
   \   00000074   0x....             ADR.N    R0,?_0
   \   00000076   0x.... 0x....      BL       mbed_assert_internal
     58          
     59              return 0;
   \                     ??init_3: (+1)
   \   0000007A   0x2000             MOVS     R0,#+0
   \                     ??init_0: (+1)
   \   0000007C   0xB003             ADD      SP,SP,#+12
   \   0000007E   0xBDF0             POP      {R4-R7,PC}       ;; return
     60          }
     61          

   \                                 In section .text, align 2, keep-with-next
     62          int SlicingBlockDevice::deinit()
     63          {
   \                     _ZN18SlicingBlockDevice6deinitEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     64              return _bd->deinit();
   \   00000002   0x6840             LDR      R0,[R0, #+4]
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x68C9             LDR      R1,[R1, #+12]
   \   00000008   0x4788             BLX      R1
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
     65          }
     66          

   \                                 In section .text, align 4, keep-with-next
     67          int SlicingBlockDevice::read(void *b, bd_addr_t addr, bd_size_t size)
     68          {
   \                     _ZN18SlicingBlockDevice4readEPvyy: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0xB40F             PUSH     {R0-R3}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0xA80A             ADD      R0,SP,#+40
   \   0000000A   0xC8C0             LDM      R0!,{R6,R7}
     69              MBED_ASSERT(is_valid_read(addr, size));
   \   0000000C   0xA802             ADD      R0,SP,#+8
   \   0000000E   0xC803             LDM      R0,{R0,R1}
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x9101             STR      R1,[SP, #+4]
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x6821             LDR      R1,[R4, #+0]
   \   00000018   0x6A09             LDR      R1,[R1, #+32]
   \   0000001A   0x4788             BLX      R1
   \   0000001C   0x0002             MOVS     R2,R0
   \   0000001E   0x000B             MOVS     R3,R1
   \   00000020   0x9800             LDR      R0,[SP, #+0]
   \   00000022   0x9901             LDR      R1,[SP, #+4]
   \   00000024   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000028   0x2B00             CMP      R3,#+0
   \   0000002A   0xD11E             BNE      ??read_0
   \   0000002C   0x2A00             CMP      R2,#+0
   \   0000002E   0xD11C             BNE      ??read_0
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0x6821             LDR      R1,[R4, #+0]
   \   00000034   0x6A09             LDR      R1,[R1, #+32]
   \   00000036   0x4788             BLX      R1
   \   00000038   0x0002             MOVS     R2,R0
   \   0000003A   0x000B             MOVS     R3,R1
   \   0000003C   0x0030             MOVS     R0,R6
   \   0000003E   0x0039             MOVS     R1,R7
   \   00000040   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000044   0x2B00             CMP      R3,#+0
   \   00000046   0xD110             BNE      ??read_0
   \   00000048   0x2A00             CMP      R2,#+0
   \   0000004A   0xD10E             BNE      ??read_0
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0x6821             LDR      R1,[R4, #+0]
   \   00000050   0x6AC9             LDR      R1,[R1, #+44]
   \   00000052   0x4788             BLX      R1
   \   00000054   0x0002             MOVS     R2,R0
   \   00000056   0x000B             MOVS     R3,R1
   \   00000058   0xA802             ADD      R0,SP,#+8
   \   0000005A   0xC803             LDM      R0,{R0,R1}
   \   0000005C   0x1980             ADDS     R0,R0,R6
   \   0000005E   0x4179             ADCS     R1,R1,R7
   \   00000060   0x428B             CMP      R3,R1
   \   00000062   0xD808             BHI      ??read_1
   \   00000064   0xD301             BCC      ??read_0
   \   00000066   0x4282             CMP      R2,R0
   \   00000068   0xD205             BCS      ??read_1
   \                     ??read_0: (+1)
   \   0000006A   0x2245             MOVS     R2,#+69
   \   0000006C   0x....             ADR.N    R1,?_1
   \   0000006E   0xBF00             Nop      
   \   00000070   0x....             ADR.N    R0,?_2
   \   00000072   0x.... 0x....      BL       mbed_assert_internal
     70              return _bd->read(b, addr + _start, size);
   \                     ??read_1: (+1)
   \   00000076   0x6860             LDR      R0,[R4, #+4]
   \   00000078   0x9600             STR      R6,[SP, #+0]
   \   0000007A   0x9701             STR      R7,[SP, #+4]
   \   0000007C   0xA902             ADD      R1,SP,#+8
   \   0000007E   0xC90C             LDM      R1!,{R2,R3}
   \   00000080   0x0021             MOVS     R1,R4
   \   00000082   0x3110             ADDS     R1,R1,#+16
   \   00000084   0xC9C0             LDM      R1!,{R6,R7}
   \   00000086   0x18B6             ADDS     R6,R6,R2
   \   00000088   0x415F             ADCS     R7,R7,R3
   \   0000008A   0x0032             MOVS     R2,R6
   \   0000008C   0x003B             MOVS     R3,R7
   \   0000008E   0x0029             MOVS     R1,R5
   \   00000090   0x6804             LDR      R4,[R0, #+0]
   \   00000092   0x6924             LDR      R4,[R4, #+16]
   \   00000094   0x47A0             BLX      R4
   \   00000096   0xB005             ADD      SP,SP,#+20
   \   00000098   0xBDF0             POP      {R4-R7,PC}       ;; return
     71          }
     72          

   \                                 In section .text, align 4, keep-with-next
     73          int SlicingBlockDevice::program(const void *b, bd_addr_t addr, bd_size_t size)
     74          {
   \                     _ZN18SlicingBlockDevice7programEPKvyy: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0xB40F             PUSH     {R0-R3}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0xA80A             ADD      R0,SP,#+40
   \   0000000A   0xC8C0             LDM      R0!,{R6,R7}
     75              MBED_ASSERT(is_valid_program(addr, size));
   \   0000000C   0xA802             ADD      R0,SP,#+8
   \   0000000E   0xC803             LDM      R0,{R0,R1}
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x9101             STR      R1,[SP, #+4]
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x6821             LDR      R1,[R4, #+0]
   \   00000018   0x6A49             LDR      R1,[R1, #+36]
   \   0000001A   0x4788             BLX      R1
   \   0000001C   0x0002             MOVS     R2,R0
   \   0000001E   0x000B             MOVS     R3,R1
   \   00000020   0x9800             LDR      R0,[SP, #+0]
   \   00000022   0x9901             LDR      R1,[SP, #+4]
   \   00000024   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000028   0x2B00             CMP      R3,#+0
   \   0000002A   0xD11E             BNE      ??program_0
   \   0000002C   0x2A00             CMP      R2,#+0
   \   0000002E   0xD11C             BNE      ??program_0
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0x6821             LDR      R1,[R4, #+0]
   \   00000034   0x6A49             LDR      R1,[R1, #+36]
   \   00000036   0x4788             BLX      R1
   \   00000038   0x0002             MOVS     R2,R0
   \   0000003A   0x000B             MOVS     R3,R1
   \   0000003C   0x0030             MOVS     R0,R6
   \   0000003E   0x0039             MOVS     R1,R7
   \   00000040   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000044   0x2B00             CMP      R3,#+0
   \   00000046   0xD110             BNE      ??program_0
   \   00000048   0x2A00             CMP      R2,#+0
   \   0000004A   0xD10E             BNE      ??program_0
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0x6821             LDR      R1,[R4, #+0]
   \   00000050   0x6AC9             LDR      R1,[R1, #+44]
   \   00000052   0x4788             BLX      R1
   \   00000054   0x0002             MOVS     R2,R0
   \   00000056   0x000B             MOVS     R3,R1
   \   00000058   0xA802             ADD      R0,SP,#+8
   \   0000005A   0xC803             LDM      R0,{R0,R1}
   \   0000005C   0x1980             ADDS     R0,R0,R6
   \   0000005E   0x4179             ADCS     R1,R1,R7
   \   00000060   0x428B             CMP      R3,R1
   \   00000062   0xD808             BHI      ??program_1
   \   00000064   0xD301             BCC      ??program_0
   \   00000066   0x4282             CMP      R2,R0
   \   00000068   0xD205             BCS      ??program_1
   \                     ??program_0: (+1)
   \   0000006A   0x224B             MOVS     R2,#+75
   \   0000006C   0x....             ADR.N    R1,?_1
   \   0000006E   0xBF00             Nop      
   \   00000070   0x....             ADR.N    R0,?_3
   \   00000072   0x.... 0x....      BL       mbed_assert_internal
     76              return _bd->program(b, addr + _start, size);
   \                     ??program_1: (+1)
   \   00000076   0x6860             LDR      R0,[R4, #+4]
   \   00000078   0x9600             STR      R6,[SP, #+0]
   \   0000007A   0x9701             STR      R7,[SP, #+4]
   \   0000007C   0xA902             ADD      R1,SP,#+8
   \   0000007E   0xC90C             LDM      R1!,{R2,R3}
   \   00000080   0x0021             MOVS     R1,R4
   \   00000082   0x3110             ADDS     R1,R1,#+16
   \   00000084   0xC9C0             LDM      R1!,{R6,R7}
   \   00000086   0x18B6             ADDS     R6,R6,R2
   \   00000088   0x415F             ADCS     R7,R7,R3
   \   0000008A   0x0032             MOVS     R2,R6
   \   0000008C   0x003B             MOVS     R3,R7
   \   0000008E   0x0029             MOVS     R1,R5
   \   00000090   0x6804             LDR      R4,[R0, #+0]
   \   00000092   0x6964             LDR      R4,[R4, #+20]
   \   00000094   0x47A0             BLX      R4
   \   00000096   0xB005             ADD      SP,SP,#+20
   \   00000098   0xBDF0             POP      {R4-R7,PC}       ;; return
     77          }
     78          

   \                                 In section .text, align 4, keep-with-next
     79          int SlicingBlockDevice::erase(bd_addr_t addr, bd_size_t size)
     80          {
   \                     _ZN18SlicingBlockDevice5eraseEyy: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x0006             MOVS     R6,R0
   \   00000004   0x0014             MOVS     R4,R2
   \   00000006   0x001D             MOVS     R5,R3
     81              MBED_ASSERT(is_valid_erase(addr, size));
   \   00000008   0xA806             ADD      R0,SP,#+24
   \   0000000A   0xC803             LDM      R0,{R0,R1}
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   \   0000000E   0x9101             STR      R1,[SP, #+4]
   \   00000010   0x0030             MOVS     R0,R6
   \   00000012   0x.... 0x....      BL       _ZNK11BlockDevice14is_valid_eraseEyy
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD105             BNE      ??erase_0
   \   0000001A   0x2251             MOVS     R2,#+81
   \   0000001C   0x....             ADR.N    R1,?_1
   \   0000001E   0xBF00             Nop      
   \   00000020   0x....             ADR.N    R0,?_4
   \   00000022   0x.... 0x....      BL       mbed_assert_internal
     82              return _bd->erase(addr + _start, size);
   \                     ??erase_0: (+1)
   \   00000026   0x6870             LDR      R0,[R6, #+4]
   \   00000028   0xA906             ADD      R1,SP,#+24
   \   0000002A   0xC90C             LDM      R1!,{R2,R3}
   \   0000002C   0x9200             STR      R2,[SP, #+0]
   \   0000002E   0x9301             STR      R3,[SP, #+4]
   \   00000030   0x0031             MOVS     R1,R6
   \   00000032   0x3110             ADDS     R1,R1,#+16
   \   00000034   0xC90C             LDM      R1!,{R2,R3}
   \   00000036   0x1912             ADDS     R2,R2,R4
   \   00000038   0x416B             ADCS     R3,R3,R5
   \   0000003A   0x6801             LDR      R1,[R0, #+0]
   \   0000003C   0x6989             LDR      R1,[R1, #+24]
   \   0000003E   0x4788             BLX      R1
   \   00000040   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
     83          }
     84          

   \                                 In section .text, align 2, keep-with-next
     85          bd_size_t SlicingBlockDevice::get_read_size() const
     86          {
   \                     _ZNK18SlicingBlockDevice13get_read_sizeEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     87              return _bd->get_read_size();
   \   00000002   0x6840             LDR      R0,[R0, #+4]
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x6A09             LDR      R1,[R1, #+32]
   \   00000008   0x4788             BLX      R1
   \   0000000A   0xBD04             POP      {R2,PC}          ;; return
     88          }
     89          

   \                                 In section .text, align 2, keep-with-next
     90          bd_size_t SlicingBlockDevice::get_program_size() const
     91          {
   \                     _ZNK18SlicingBlockDevice16get_program_sizeEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     92              return _bd->get_program_size();
   \   00000002   0x6840             LDR      R0,[R0, #+4]
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x6A49             LDR      R1,[R1, #+36]
   \   00000008   0x4788             BLX      R1
   \   0000000A   0xBD04             POP      {R2,PC}          ;; return
     93          }
     94          

   \                                 In section .text, align 2, keep-with-next
     95          bd_size_t SlicingBlockDevice::get_erase_size() const
     96          {
   \                     _ZNK18SlicingBlockDevice14get_erase_sizeEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     97              return _bd->get_erase_size();
   \   00000002   0x6840             LDR      R0,[R0, #+4]
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x6A89             LDR      R1,[R1, #+40]
   \   00000008   0x4788             BLX      R1
   \   0000000A   0xBD04             POP      {R2,PC}          ;; return
     98          }
     99          

   \                                 In section .text, align 2, keep-with-next
    100          bd_size_t SlicingBlockDevice::size() const
    101          {
   \                     _ZNK18SlicingBlockDevice4sizeEv: (+1)
   \   00000000   0x0002             MOVS     R2,R0
    102              return _stop - _start;
   \   00000002   0x3020             ADDS     R0,R0,#+32
   \   00000004   0xC803             LDM      R0,{R0,R1}
   \   00000006   0x3210             ADDS     R2,R2,#+16
   \   00000008   0xCA0C             LDM      R2,{R2,R3}
   \   0000000A   0x1A80             SUBS     R0,R0,R2
   \   0000000C   0x4199             SBCS     R1,R1,R3
   \   0000000E   0x4770             BX       LR               ;; return
    103          }

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp SlicingBlockDevice::subobject SlicingBlockDevice(BlockDevice *, bd_addr_t, bd_addr_t)
   \                     _ZN18SlicingBlockDeviceC2EP11BlockDeviceyy: (+1)
   \   00000000   0x....             B.N      ?Subroutine0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     _ZTV18SlicingBlockDevice+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x5F 0x62          DC8 "_bd->is_valid_erase(_start, _stop - _start)"
   \              0x64 0x2D    
   \              0x3E 0x69    
   \              0x73 0x5F    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x5F    
   \              0x65 0x72    
   \              0x61 0x73    
   \              0x65 0x28    
   \              0x5F 0x73    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x2C 0x20    
   \              0x5F 0x73    
   \              0x74 0x6F    
   \              0x70 0x20    
   \              0x2D 0x20    
   \              0x5F 0x73    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x29 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x2E 0x5C          DC8 2EH, 5CH, 6DH, 62H, 65H, 64H, 2DH, 6FH
   \              0x6D 0x62    
   \              0x65 0x64    
   \              0x2D 0x6F    
   \   00000008   0x73 0x5C          DC8 73H, 5CH, 66H, 65H, 61H, 74H, 75H, 72H
   \              0x66 0x65    
   \              0x61 0x74    
   \              0x75 0x72    
   \   00000010   0x65 0x73          DC8 65H, 73H, 5CH, 66H, 69H, 6CH, 65H, 73H
   \              0x5C 0x66    
   \              0x69 0x6C    
   \              0x65 0x73    
   \   00000018   0x79 0x73          DC8 79H, 73H, 74H, 65H, 6DH, 5CH, 62H, 64H
   \              0x74 0x65    
   \              0x6D 0x5C    
   \              0x62 0x64    
   \   00000020   0x5C 0x53          DC8 5CH, 53H, 6CH, 69H, 63H, 69H, 6EH, 67H
   \              0x6C 0x69    
   \              0x63 0x69    
   \              0x6E 0x67    
   \   00000028   0x42 0x6C          DC8 42H, 6CH, 6FH, 63H, 6BH, 44H, 65H, 76H
   \              0x6F 0x63    
   \              0x6B 0x44    
   \              0x65 0x76    
   \   00000030   0x69 0x63          DC8 69H, 63H, 65H, 2EH, 63H, 70H, 70H, 0
   \              0x65 0x2E    
   \              0x63 0x70    
   \              0x70 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x69 0x73          DC8 "is_valid_read(addr, size)"
   \              0x5F 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x5F 0x72    
   \              0x65 0x61    
   \              0x64 0x28    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x2C 0x20    
   \              0x73 0x69    
   \              0x7A 0x65    
   \              0x29 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x69 0x73          DC8 "is_valid_program(addr, size)"
   \              0x5F 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x5F 0x70    
   \              0x72 0x6F    
   \              0x67 0x72    
   \              0x61 0x6D    
   \              0x28 0x61    
   \              0x64 0x64    
   \              0x72 0x2C    
   \              0x20 0x73    
   \              0x69 0x7A    
   \              0x65 0x29    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x69 0x73          DC8 "is_valid_erase(addr, size)"
   \              0x5F 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x5F 0x65    
   \              0x72 0x61    
   \              0x73 0x65    
   \              0x28 0x61    
   \              0x64 0x64    
   \              0x72 0x2C    
   \              0x20 0x73    
   \              0x69 0x7A    
   \              0x65 0x29    
   \              0x00         
   \   0000001B   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   BlockDevice::is_valid_erase(bd_addr_t, bd_size_t) const
        24   -- Indirect call
        24 __aeabi_uldivmod
       0   BlockDevice::trim(bd_addr_t, bd_size_t)
       0   SlicingBlockDevice::SlicingBlockDevice(BlockDevice *, bd_addr_t, bd_addr_t)
       8   SlicingBlockDevice::deinit()
         8   -- Indirect call
       8   SlicingBlockDevice::deleter ~SlicingBlockDevice()
         8   -> operator delete(void *)
      24   SlicingBlockDevice::erase(bd_addr_t, bd_size_t)
        24   -- Indirect call
        24   -> BlockDevice::is_valid_erase(bd_addr_t, bd_size_t) const
        24   -> mbed_assert_internal
       8   SlicingBlockDevice::get_erase_size() const
         8   -- Indirect call
       8   SlicingBlockDevice::get_program_size() const
         8   -- Indirect call
       8   SlicingBlockDevice::get_read_size() const
         8   -- Indirect call
      32   SlicingBlockDevice::init()
        32   -- Indirect call
        32   -> BlockDevice::is_valid_erase(bd_addr_t, bd_size_t) const
        32   -> mbed_assert_internal
      40   SlicingBlockDevice::program(void const *, bd_addr_t, bd_size_t)
        40   -- Indirect call
        40   -> mbed_assert_internal
        40 __aeabi_uldivmod
      40   SlicingBlockDevice::read(void *, bd_addr_t, bd_size_t)
        40   -- Indirect call
        40   -> mbed_assert_internal
        40 __aeabi_uldivmod
       0   SlicingBlockDevice::size() const
       0   SlicingBlockDevice::subobject SlicingBlockDevice(BlockDevice *, bd_addr_t, bd_addr_t)
       0   SlicingBlockDevice::~SlicingBlockDevice()
       8   mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
         8   -- Indirect call
       0   mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
       0   mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
      12   mbed::callback<>(void (*)(void *), void *)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
      86  ?Subroutine0
      44  ?_0
      56  ?_1
      28  ?_2
      32  ?_3
      28  ?_4
      94  BlockDevice::is_valid_erase(bd_addr_t, bd_size_t) const
       4  BlockDevice::trim(bd_addr_t, bd_size_t)
       2  SlicingBlockDevice::SlicingBlockDevice(BlockDevice *, bd_addr_t, bd_addr_t)
      12  SlicingBlockDevice::deinit()
       8  SlicingBlockDevice::deleter ~SlicingBlockDevice()
      66  SlicingBlockDevice::erase(bd_addr_t, bd_size_t)
      12  SlicingBlockDevice::get_erase_size() const
      12  SlicingBlockDevice::get_program_size() const
      12  SlicingBlockDevice::get_read_size() const
     128  SlicingBlockDevice::init()
     154  SlicingBlockDevice::program(void const *, bd_addr_t, bd_size_t)
     154  SlicingBlockDevice::read(void *, bd_addr_t, bd_size_t)
      16  SlicingBlockDevice::size() const
       2  SlicingBlockDevice::subobject SlicingBlockDevice(BlockDevice *, bd_addr_t, bd_addr_t)
       2  SlicingBlockDevice::~SlicingBlockDevice()
      12  mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
       2  mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
      10  mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
      32  mbed::callback<>(void (*)(void *), void *)
      12  ops
     408  -- Other

 
   420 bytes in section .rodata
 1 012 bytes in section .text
 
 848 bytes of CODE  memory (+ 164 bytes shared)
   0 bytes of CONST memory (+ 420 bytes shared)

Errors: none
Warnings: none
