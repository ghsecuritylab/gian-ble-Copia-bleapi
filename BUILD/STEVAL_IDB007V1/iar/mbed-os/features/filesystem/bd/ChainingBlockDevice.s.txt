###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:13
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\filesystem\bd\ChainingBlockDevice.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\bd\ChainingBlockDevice.d
#        -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\bd\ChainingBlockDevice.s.txt
#        -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\bd\ChainingBlockDevice.o
#        .\mbed-os\features\filesystem\bd\ChainingBlockDevice.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\bd\ChainingBlockDevice.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\bd\ChainingBlockDevice.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\filesystem\bd\ChainingBlockDevice.cpp
      1          /* mbed Microcontroller Library
      2           * Copyright (c) 2017 ARM Limited
      3           *
      4           * Licensed under the Apache License, Version 2.0 (the "License");
      5           * you may not use this file except in compliance with the License.
      6           * You may obtain a copy of the License at
      7           *
      8           *     http://www.apache.org/licenses/LICENSE-2.0
      9           *
     10           * Unless required by applicable law or agreed to in writing, software
     11           * distributed under the License is distributed on an "AS IS" BASIS,
     12           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     13           * See the License for the specific language governing permissions and
     14           * limitations under the License.
     15           */
     16          
     17          #include "ChainingBlockDevice.h"

   \                                 In section .text, align 2
   \   __interwork __softfp int BlockDevice::trim(bd_addr_t, bd_size_t)
   \                     _ZN11BlockDevice4trimEyy: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return

   \                                 In section .rodata, align 4
   \   __absolute mbed::Callback<void ()>::ops const mbed::Callback<void ()>::generate<>(mbed::Callback<void ()>::function_context<void (*)(void *), void> const &)::ops
   \                     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops:
   \   00000000   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv
   \   00000004   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv
   \   00000008   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0x6848             LDR      R0,[R1, #+4]
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x4788             BLX      R1
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??function_move_0
   \   00000004   0xC90C             LDM      R1!,{R2,R3}
   \   00000006   0xC00C             STM      R0!,{R2,R3}
   \                     ??function_move_0: (+1)
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
   \                     _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4
   \   __interwork __softfp void mbed::callback<>(void (*)(void *), void *)
   \                     _ZN4mbed8callbackIvvvEENS_8CallbackIFT1_vEEEPFS2_PT_EPT0_: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0xC078             STM      R0!,{R3-R6}
   \   0000000C   0x3810             SUBS     R0,R0,#+16
   \   0000000E   0xD001             BEQ      ??callback_0
   \   00000010   0x6001             STR      R1,[R0, #+0]
   \   00000012   0x6042             STR      R2,[R0, #+4]
   \                     ??callback_0: (+1)
   \   00000014   0x4901             LDR      R1,??callback_1
   \   00000016   0x60C1             STR      R1,[R0, #+12]
   \   00000018   0xBC70             POP      {R4-R6}
   \   0000001A   0x4770             BX       LR               ;; return
   \                     ??callback_1:
   \   0000001C   0x........         DC32     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops

   \                                 In section .text, align 2
   \   __code __interwork __softfp ChainingBlockDevice::~ChainingBlockDevice()
   \                     _ZN19ChainingBlockDeviceD1Ev: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __code __interwork __softfp ChainingBlockDevice::deleter ~ChainingBlockDevice()
   \                     _ZN19ChainingBlockDeviceD0Ev: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZdlPv
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     18          
     19          

   \                                 In section .text, align 2, keep-with-next
     20          ChainingBlockDevice::ChainingBlockDevice(BlockDevice **bds, size_t bd_count)
   \                     _ZN19ChainingBlockDeviceC1EPP11BlockDevicej: (+1)
   \   00000000   0xBF00             Nop      
   \   00000002                      REQUIRE ?Subroutine0
   \   00000002                      ;; // Fall through to label ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x0003             MOVS     R3,R0
   \   00000002   0x....             LDR      R0,??DataTable8
   \   00000004   0x6018             STR      R0,[R3, #+0]
     21              : _bds(bds), _bd_count(bd_count)
   \   00000006   0x6059             STR      R1,[R3, #+4]
   \   00000008   0x609A             STR      R2,[R3, #+8]
     22              , _read_size(0), _program_size(0), _erase_size(0), _size(0)
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x001A             MOVS     R2,R3
   \   00000010   0x3210             ADDS     R2,R2,#+16
   \   00000012   0xC203             STM      R2!,{R0,R1}
   \   00000014   0x001A             MOVS     R2,R3
   \   00000016   0x3218             ADDS     R2,R2,#+24
   \   00000018   0xC203             STM      R2!,{R0,R1}
   \   0000001A   0x001A             MOVS     R2,R3
   \   0000001C   0x3220             ADDS     R2,R2,#+32
   \   0000001E   0xC203             STM      R2!,{R0,R1}
   \   00000020   0x001A             MOVS     R2,R3
   \   00000022   0x3228             ADDS     R2,R2,#+40
   \   00000024   0xC203             STM      R2!,{R0,R1}
     23          {
     24          }
   \   00000026   0x0018             MOVS     R0,R3
   \   00000028   0x4770             BX       LR               ;; return
     25          
     26          static bool is_aligned(uint64_t x, uint64_t alignment)
     27          {
     28              return (x / alignment) * alignment == x;
     29          }
     30          

   \                                 In section .text, align 4, keep-with-next
     31          int ChainingBlockDevice::init()
     32          {
   \                     _ZN19ChainingBlockDevice4initEv: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
     33              _read_size = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x9A02             LDR      R2,[SP, #+8]
   \   0000000A   0x3210             ADDS     R2,R2,#+16
   \   0000000C   0xC203             STM      R2!,{R0,R1}
     34              _program_size = 0;
   \   0000000E   0x9A02             LDR      R2,[SP, #+8]
   \   00000010   0x3218             ADDS     R2,R2,#+24
   \   00000012   0xC203             STM      R2!,{R0,R1}
     35              _erase_size = 0;
   \   00000014   0x9A02             LDR      R2,[SP, #+8]
   \   00000016   0x3220             ADDS     R2,R2,#+32
   \   00000018   0xC203             STM      R2!,{R0,R1}
     36              _size = 0;
   \   0000001A   0x9A02             LDR      R2,[SP, #+8]
   \   0000001C   0x3228             ADDS     R2,R2,#+40
   \   0000001E   0xC203             STM      R2!,{R0,R1}
     37          
     38              // Initialize children block devices, find all sizes and
     39              // assert that block sizes are similar. We can't do this in
     40              // the constructor since some block devices may need to be
     41              // initialized before they know their block size/count
     42              for (size_t i = 0; i < _bd_count; i++) {
   \   00000020   0x9001             STR      R0,[SP, #+4]
   \   00000022   0xE026             B        ??init_0
     43                  int err = _bds[i]->init();
     44                  if (err) {
     45                      return err;
     46                  }
     47          
     48                  bd_size_t read = _bds[i]->get_read_size();
     49                  if (i == 0 || (read >= _read_size && is_aligned(read, _read_size))) {
     50                      _read_size = read;
     51                  } else {
     52                      MBED_ASSERT(_read_size > read && is_aligned(_read_size, read));
     53                  }
     54          
     55                  bd_size_t program = _bds[i]->get_program_size();
     56                  if (i == 0 || (program >= _program_size && is_aligned(program, _program_size))) {
     57                      _program_size = program;
     58                  } else {
     59                      MBED_ASSERT(_program_size > program && is_aligned(_program_size, program));
     60                  }
     61          
     62                  bd_size_t erase = _bds[i]->get_erase_size();
     63                  if (i == 0 || (erase >= _erase_size && is_aligned(erase, _erase_size))) {
     64                      _erase_size = erase;
     65                  } else {
     66                      MBED_ASSERT(_erase_size > erase && is_aligned(_erase_size, erase));
   \                     ??init_1: (+1)
   \   00000024   0x0030             MOVS     R0,R6
   \   00000026   0x0039             MOVS     R1,R7
   \   00000028   0x0022             MOVS     R2,R4
   \   0000002A   0x002B             MOVS     R3,R5
   \   0000002C   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000030   0x0022             MOVS     R2,R4
   \   00000032   0x002B             MOVS     R3,R5
   \   00000034   0x.... 0x....      BL       __aeabi_lmul
   \   00000038   0x42B9             CMP      R1,R7
   \   0000003A   0xD101             BNE      ??init_2
   \   0000003C   0x42B0             CMP      R0,R6
   \   0000003E   0xD004             BEQ      ??init_3
   \                     ??init_2: (+1)
   \   00000040   0x2242             MOVS     R2,#+66
   \   00000042   0x....             LDR      R1,??DataTable8_1
   \   00000044   0x....             ADR.N    R0,?_3
   \   00000046   0x.... 0x....      BL       mbed_assert_internal
     67                  }
     68          
     69                  _size += _bds[i]->size();
   \                     ??init_3: (+1)
   \   0000004A   0x9802             LDR      R0,[SP, #+8]
   \   0000004C   0x6840             LDR      R0,[R0, #+4]
   \   0000004E   0x9900             LDR      R1,[SP, #+0]
   \   00000050   0x5840             LDR      R0,[R0, R1]
   \   00000052   0x6801             LDR      R1,[R0, #+0]
   \   00000054   0x6AC9             LDR      R1,[R1, #+44]
   \   00000056   0x4788             BLX      R1
   \   00000058   0x9A02             LDR      R2,[SP, #+8]
   \   0000005A   0x3228             ADDS     R2,R2,#+40
   \   0000005C   0xCA0C             LDM      R2,{R2,R3}
   \   0000005E   0x1880             ADDS     R0,R0,R2
   \   00000060   0x4159             ADCS     R1,R1,R3
   \   00000062   0x9A02             LDR      R2,[SP, #+8]
   \   00000064   0x3228             ADDS     R2,R2,#+40
   \   00000066   0xC203             STM      R2!,{R0,R1}
   \   00000068   0x9801             LDR      R0,[SP, #+4]
   \   0000006A   0x1C40             ADDS     R0,R0,#+1
   \   0000006C   0x9001             STR      R0,[SP, #+4]
   \   0000006E   0x9800             LDR      R0,[SP, #+0]
   \   00000070   0x1D00             ADDS     R0,R0,#+4
   \                     ??init_0: (+1)
   \   00000072   0x9000             STR      R0,[SP, #+0]
   \   00000074   0x9801             LDR      R0,[SP, #+4]
   \   00000076   0x9902             LDR      R1,[SP, #+8]
   \   00000078   0x6889             LDR      R1,[R1, #+8]
   \   0000007A   0x4288             CMP      R0,R1
   \   0000007C   0xD300             BCC      .+4
   \   0000007E   0xE0A3             B        ??init_4
   \   00000080   0x9802             LDR      R0,[SP, #+8]
   \   00000082   0x6840             LDR      R0,[R0, #+4]
   \   00000084   0x9900             LDR      R1,[SP, #+0]
   \   00000086   0x5840             LDR      R0,[R0, R1]
   \   00000088   0x6801             LDR      R1,[R0, #+0]
   \   0000008A   0x6889             LDR      R1,[R1, #+8]
   \   0000008C   0x4788             BLX      R1
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD000             BEQ      .+4
   \   00000092   0xE09A             B        ??init_5
   \   00000094   0x9802             LDR      R0,[SP, #+8]
   \   00000096   0x6840             LDR      R0,[R0, #+4]
   \   00000098   0x9900             LDR      R1,[SP, #+0]
   \   0000009A   0x5840             LDR      R0,[R0, R1]
   \   0000009C   0x6801             LDR      R1,[R0, #+0]
   \   0000009E   0x6A09             LDR      R1,[R1, #+32]
   \   000000A0   0x4788             BLX      R1
   \   000000A2   0x0004             MOVS     R4,R0
   \   000000A4   0x000D             MOVS     R5,R1
   \   000000A6   0x9801             LDR      R0,[SP, #+4]
   \   000000A8   0x2800             CMP      R0,#+0
   \   000000AA   0xD014             BEQ      ??init_6
   \   000000AC   0x9802             LDR      R0,[SP, #+8]
   \   000000AE   0x3010             ADDS     R0,R0,#+16
   \   000000B0   0xC8C0             LDM      R0!,{R6,R7}
   \   000000B2   0x42BD             CMP      R5,R7
   \   000000B4   0xD313             BCC      ??init_7
   \   000000B6   0xD801             BHI      ??init_8
   \   000000B8   0x42B4             CMP      R4,R6
   \   000000BA   0xD310             BCC      ??init_7
   \                     ??init_8: (+1)
   \   000000BC   0x0020             MOVS     R0,R4
   \   000000BE   0x0032             MOVS     R2,R6
   \   000000C0   0x003B             MOVS     R3,R7
   \   000000C2   0x.... 0x....      BL       __aeabi_uldivmod
   \   000000C6   0x0032             MOVS     R2,R6
   \   000000C8   0x003B             MOVS     R3,R7
   \   000000CA   0x.... 0x....      BL       __aeabi_lmul
   \   000000CE   0x42A9             CMP      R1,R5
   \   000000D0   0xD113             BNE      ??init_9
   \   000000D2   0x42A0             CMP      R0,R4
   \   000000D4   0xD111             BNE      ??init_9
   \                     ??init_6: (+1)
   \   000000D6   0x9802             LDR      R0,[SP, #+8]
   \   000000D8   0x3010             ADDS     R0,R0,#+16
   \   000000DA   0xC030             STM      R0!,{R4,R5}
   \   000000DC   0xE013             B        ??init_10
   \                     ??init_7: (+1)
   \   000000DE   0x0030             MOVS     R0,R6
   \   000000E0   0x0039             MOVS     R1,R7
   \   000000E2   0x0022             MOVS     R2,R4
   \   000000E4   0x002B             MOVS     R3,R5
   \   000000E6   0x.... 0x....      BL       __aeabi_uldivmod
   \   000000EA   0x0022             MOVS     R2,R4
   \   000000EC   0x002B             MOVS     R3,R5
   \   000000EE   0x.... 0x....      BL       __aeabi_lmul
   \   000000F2   0x42B9             CMP      R1,R7
   \   000000F4   0xD101             BNE      ??init_9
   \   000000F6   0x42B0             CMP      R0,R6
   \   000000F8   0xD005             BEQ      ??init_10
   \                     ??init_9: (+1)
   \   000000FA   0x2234             MOVS     R2,#+52
   \   000000FC   0x....             LDR      R1,??DataTable8_1
   \   000000FE   0xBF00             Nop      
   \   00000100   0x....             ADR.N    R0,?_0
   \   00000102   0x.... 0x....      BL       mbed_assert_internal
   \                     ??init_10: (+1)
   \   00000106   0x9802             LDR      R0,[SP, #+8]
   \   00000108   0x6840             LDR      R0,[R0, #+4]
   \   0000010A   0x9900             LDR      R1,[SP, #+0]
   \   0000010C   0x5840             LDR      R0,[R0, R1]
   \   0000010E   0x6801             LDR      R1,[R0, #+0]
   \   00000110   0x6A49             LDR      R1,[R1, #+36]
   \   00000112   0x4788             BLX      R1
   \   00000114   0x0004             MOVS     R4,R0
   \   00000116   0x000D             MOVS     R5,R1
   \   00000118   0x9801             LDR      R0,[SP, #+4]
   \   0000011A   0x2800             CMP      R0,#+0
   \   0000011C   0xD014             BEQ      ??init_11
   \   0000011E   0x9802             LDR      R0,[SP, #+8]
   \   00000120   0x3018             ADDS     R0,R0,#+24
   \   00000122   0xC8C0             LDM      R0!,{R6,R7}
   \   00000124   0x42BD             CMP      R5,R7
   \   00000126   0xD313             BCC      ??init_12
   \   00000128   0xD801             BHI      ??init_13
   \   0000012A   0x42B4             CMP      R4,R6
   \   0000012C   0xD310             BCC      ??init_12
   \                     ??init_13: (+1)
   \   0000012E   0x0020             MOVS     R0,R4
   \   00000130   0x0032             MOVS     R2,R6
   \   00000132   0x003B             MOVS     R3,R7
   \   00000134   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000138   0x0032             MOVS     R2,R6
   \   0000013A   0x003B             MOVS     R3,R7
   \   0000013C   0x.... 0x....      BL       __aeabi_lmul
   \   00000140   0x42A9             CMP      R1,R5
   \   00000142   0xD113             BNE      ??init_14
   \   00000144   0x42A0             CMP      R0,R4
   \   00000146   0xD111             BNE      ??init_14
   \                     ??init_11: (+1)
   \   00000148   0x9802             LDR      R0,[SP, #+8]
   \   0000014A   0x3018             ADDS     R0,R0,#+24
   \   0000014C   0xC030             STM      R0!,{R4,R5}
   \   0000014E   0xE012             B        ??init_15
   \                     ??init_12: (+1)
   \   00000150   0x0030             MOVS     R0,R6
   \   00000152   0x0039             MOVS     R1,R7
   \   00000154   0x0022             MOVS     R2,R4
   \   00000156   0x002B             MOVS     R3,R5
   \   00000158   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000015C   0x0022             MOVS     R2,R4
   \   0000015E   0x002B             MOVS     R3,R5
   \   00000160   0x.... 0x....      BL       __aeabi_lmul
   \   00000164   0x42B9             CMP      R1,R7
   \   00000166   0xD101             BNE      ??init_14
   \   00000168   0x42B0             CMP      R0,R6
   \   0000016A   0xD004             BEQ      ??init_15
   \                     ??init_14: (+1)
   \   0000016C   0x223B             MOVS     R2,#+59
   \   0000016E   0x....             LDR      R1,??DataTable8_1
   \   00000170   0x....             ADR.N    R0,?_2
   \   00000172   0x.... 0x....      BL       mbed_assert_internal
   \                     ??init_15: (+1)
   \   00000176   0x9802             LDR      R0,[SP, #+8]
   \   00000178   0x6840             LDR      R0,[R0, #+4]
   \   0000017A   0x9900             LDR      R1,[SP, #+0]
   \   0000017C   0x5840             LDR      R0,[R0, R1]
   \   0000017E   0x6801             LDR      R1,[R0, #+0]
   \   00000180   0x6A89             LDR      R1,[R1, #+40]
   \   00000182   0x4788             BLX      R1
   \   00000184   0x0004             MOVS     R4,R0
   \   00000186   0x000D             MOVS     R5,R1
   \   00000188   0x9801             LDR      R0,[SP, #+4]
   \   0000018A   0x2800             CMP      R0,#+0
   \   0000018C   0xD018             BEQ      ??init_16
   \   0000018E   0x9802             LDR      R0,[SP, #+8]
   \   00000190   0x3020             ADDS     R0,R0,#+32
   \   00000192   0xC8C0             LDM      R0!,{R6,R7}
   \   00000194   0x42BD             CMP      R5,R7
   \   00000196   0xD200             BCS      .+4
   \   00000198   0xE744             B        ??init_1
   \   0000019A   0xD802             BHI      ??init_17
   \   0000019C   0x42B4             CMP      R4,R6
   \   0000019E   0xD200             BCS      .+4
   \   000001A0   0xE740             B        ??init_1
   \                     ??init_17: (+1)
   \   000001A2   0x0020             MOVS     R0,R4
   \   000001A4   0x0032             MOVS     R2,R6
   \   000001A6   0x003B             MOVS     R3,R7
   \   000001A8   0x.... 0x....      BL       __aeabi_uldivmod
   \   000001AC   0x0032             MOVS     R2,R6
   \   000001AE   0x003B             MOVS     R3,R7
   \   000001B0   0x.... 0x....      BL       __aeabi_lmul
   \   000001B4   0x42A9             CMP      R1,R5
   \   000001B6   0xD000             BEQ      .+4
   \   000001B8   0xE742             B        ??init_2
   \   000001BA   0x42A0             CMP      R0,R4
   \   000001BC   0xD000             BEQ      .+4
   \   000001BE   0xE73F             B        ??init_2
   \                     ??init_16: (+1)
   \   000001C0   0x9802             LDR      R0,[SP, #+8]
   \   000001C2   0x3020             ADDS     R0,R0,#+32
   \   000001C4   0xC030             STM      R0!,{R4,R5}
   \   000001C6   0xE740             B        ??init_3
     70              }
     71          
     72              return 0;
   \                     ??init_4: (+1)
   \   000001C8   0x2000             MOVS     R0,#+0
   \                     ??init_5: (+1)
   \   000001CA   0xB003             ADD      SP,SP,#+12
   \   000001CC   0xBDF0             POP      {R4-R7,PC}       ;; return
     73          }
     74          

   \                                 In section .text, align 2, keep-with-next
     75          int ChainingBlockDevice::deinit()
     76          {
   \                     _ZN19ChainingBlockDevice6deinitEv: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     77              for (size_t i = 0; i < _bd_count; i++) {
   \   00000004   0x2600             MOVS     R6,#+0
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0xE001             B        ??deinit_0
   \                     ??deinit_1: (+1)
   \   0000000A   0x1C76             ADDS     R6,R6,#+1
   \   0000000C   0x1D2D             ADDS     R5,R5,#+4
   \                     ??deinit_0: (+1)
   \   0000000E   0x68A0             LDR      R0,[R4, #+8]
   \   00000010   0x4286             CMP      R6,R0
   \   00000012   0xD207             BCS      ??deinit_2
     78                  int err = _bds[i]->deinit();
   \   00000014   0x6860             LDR      R0,[R4, #+4]
   \   00000016   0x5940             LDR      R0,[R0, R5]
   \   00000018   0x6801             LDR      R1,[R0, #+0]
   \   0000001A   0x68C9             LDR      R1,[R1, #+12]
   \   0000001C   0x4788             BLX      R1
     79                  if (err) {
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD0F3             BEQ      ??deinit_1
     80                      return err;
   \   00000022   0xBD70             POP      {R4-R6,PC}
     81                  }
     82              }
     83          
     84              return 0;
   \                     ??deinit_2: (+1)
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xBD70             POP      {R4-R6,PC}       ;; return
     85          }
     86          

   \                                 In section .text, align 4, keep-with-next
     87          int ChainingBlockDevice::read(void *b, bd_addr_t addr, bd_size_t size)
     88          {
   \                     _ZN19ChainingBlockDevice4readEPvyy: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x0014             MOVS     R4,R2
   \   00000008   0x001D             MOVS     R5,R3
     89              MBED_ASSERT(is_valid_read(addr, size));
   \   0000000A   0x6801             LDR      R1,[R0, #+0]
   \   0000000C   0x6A09             LDR      R1,[R1, #+32]
   \   0000000E   0x4788             BLX      R1
   \   00000010   0x0002             MOVS     R2,R0
   \   00000012   0x000B             MOVS     R3,R1
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x0029             MOVS     R1,R5
   \   00000018   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000001C   0x2B00             CMP      R3,#+0
   \   0000001E   0xD120             BNE      ??read_0
   \   00000020   0x2A00             CMP      R2,#+0
   \   00000022   0xD11E             BNE      ??read_0
   \   00000024   0xA80E             ADD      R0,SP,#+56
   \   00000026   0xC803             LDM      R0,{R0,R1}
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0x9101             STR      R1,[SP, #+4]
   \   0000002C   0x9808             LDR      R0,[SP, #+32]
   \   0000002E   0x6801             LDR      R1,[R0, #+0]
   \   00000030   0x6A09             LDR      R1,[R1, #+32]
   \   00000032   0x4788             BLX      R1
   \   00000034   0x0002             MOVS     R2,R0
   \   00000036   0x000B             MOVS     R3,R1
   \   00000038   0x9800             LDR      R0,[SP, #+0]
   \   0000003A   0x9901             LDR      R1,[SP, #+4]
   \   0000003C   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000040   0x2B00             CMP      R3,#+0
   \   00000042   0xD10E             BNE      ??read_0
   \   00000044   0x2A00             CMP      R2,#+0
   \   00000046   0xD10C             BNE      ??read_0
   \   00000048   0x9808             LDR      R0,[SP, #+32]
   \   0000004A   0x6801             LDR      R1,[R0, #+0]
   \   0000004C   0x6AC9             LDR      R1,[R1, #+44]
   \   0000004E   0x4788             BLX      R1
   \   00000050   0xAA0E             ADD      R2,SP,#+56
   \   00000052   0xCA0C             LDM      R2,{R2,R3}
   \   00000054   0x1912             ADDS     R2,R2,R4
   \   00000056   0x416B             ADCS     R3,R3,R5
   \   00000058   0x4299             CMP      R1,R3
   \   0000005A   0xD808             BHI      ??read_1
   \   0000005C   0xD301             BCC      ??read_0
   \   0000005E   0x4290             CMP      R0,R2
   \   00000060   0xD205             BCS      ??read_1
   \                     ??read_0: (+1)
   \   00000062   0x2259             MOVS     R2,#+89
   \   00000064   0x....             LDR      R1,??DataTable9
   \   00000066   0xBF00             Nop      
   \   00000068   0x....             ADR.N    R0,?_4
   \   0000006A   0x.... 0x....      BL       mbed_assert_internal
     90              uint8_t *buffer = static_cast<uint8_t*>(b);
   \                     ??read_1: (+1)
   \   0000006E   0x9603             STR      R6,[SP, #+12]
     91          
     92              // Find block devices containing blocks, may span multiple block devices
     93              for (size_t i = 0; i < _bd_count && size > 0; i++) {
   \   00000070   0x2600             MOVS     R6,#+0
   \   00000072   0x9602             STR      R6,[SP, #+8]
   \   00000074   0xE01A             B        ??read_2
     94                  bd_size_t bdsize = _bds[i]->size();
     95          
     96                  if (addr < bdsize) {
     97                      bd_size_t read = size;
     98                      if (addr + read > bdsize) {
     99                          read = bdsize - addr;
    100                      }
    101          
    102                      int err = _bds[i]->read(buffer, addr, read);
    103                      if (err) {
    104                          return err;
    105                      }
    106          
    107                      buffer += read;
   \                     ??read_3: (+1)
   \   00000076   0x9A03             LDR      R2,[SP, #+12]
   \   00000078   0xA804             ADD      R0,SP,#+16
   \   0000007A   0xC803             LDM      R0,{R0,R1}
   \   0000007C   0x1810             ADDS     R0,R2,R0
   \   0000007E   0x9003             STR      R0,[SP, #+12]
    108                      addr += read;
   \   00000080   0x0020             MOVS     R0,R4
   \   00000082   0x0029             MOVS     R1,R5
   \   00000084   0xAA04             ADD      R2,SP,#+16
   \   00000086   0xCA30             LDM      R2!,{R4,R5}
   \   00000088   0x1824             ADDS     R4,R4,R0
   \   0000008A   0x414D             ADCS     R5,R5,R1
    109                      size -= read;
   \   0000008C   0xAF0E             ADD      R7,SP,#+56
   \   0000008E   0xA80E             ADD      R0,SP,#+56
   \   00000090   0xC803             LDM      R0,{R0,R1}
   \   00000092   0xAA04             ADD      R2,SP,#+16
   \   00000094   0xCA0C             LDM      R2,{R2,R3}
   \   00000096   0x1A80             SUBS     R0,R0,R2
   \   00000098   0x4199             SBCS     R1,R1,R3
   \   0000009A   0xC703             STM      R7!,{R0,R1}
    110                  }
    111          
    112                  addr -= bdsize;
   \                     ??read_4: (+1)
   \   0000009C   0xA806             ADD      R0,SP,#+24
   \   0000009E   0xC803             LDM      R0,{R0,R1}
   \   000000A0   0x1A24             SUBS     R4,R4,R0
   \   000000A2   0x418D             SBCS     R5,R5,R1
   \   000000A4   0x9802             LDR      R0,[SP, #+8]
   \   000000A6   0x1C40             ADDS     R0,R0,#+1
   \   000000A8   0x9002             STR      R0,[SP, #+8]
   \   000000AA   0x1D36             ADDS     R6,R6,#+4
   \                     ??read_2: (+1)
   \   000000AC   0x9802             LDR      R0,[SP, #+8]
   \   000000AE   0x9908             LDR      R1,[SP, #+32]
   \   000000B0   0x6889             LDR      R1,[R1, #+8]
   \   000000B2   0x4288             CMP      R0,R1
   \   000000B4   0xD239             BCS      ??read_5
   \   000000B6   0xA80E             ADD      R0,SP,#+56
   \   000000B8   0xC803             LDM      R0,{R0,R1}
   \   000000BA   0x2900             CMP      R1,#+0
   \   000000BC   0xD101             BNE      ??read_6
   \   000000BE   0x2800             CMP      R0,#+0
   \   000000C0   0xD033             BEQ      ??read_5
   \                     ??read_6: (+1)
   \   000000C2   0x9808             LDR      R0,[SP, #+32]
   \   000000C4   0x6840             LDR      R0,[R0, #+4]
   \   000000C6   0x5980             LDR      R0,[R0, R6]
   \   000000C8   0x6801             LDR      R1,[R0, #+0]
   \   000000CA   0x6AC9             LDR      R1,[R1, #+44]
   \   000000CC   0x4788             BLX      R1
   \   000000CE   0xAA06             ADD      R2,SP,#+24
   \   000000D0   0xC203             STM      R2!,{R0,R1}
   \   000000D2   0xA806             ADD      R0,SP,#+24
   \   000000D4   0xC803             LDM      R0,{R0,R1}
   \   000000D6   0x428D             CMP      R5,R1
   \   000000D8   0xD8E0             BHI      ??read_4
   \   000000DA   0xD301             BCC      ??read_7
   \   000000DC   0x4284             CMP      R4,R0
   \   000000DE   0xD2DD             BCS      ??read_4
   \                     ??read_7: (+1)
   \   000000E0   0xA80E             ADD      R0,SP,#+56
   \   000000E2   0xC803             LDM      R0,{R0,R1}
   \   000000E4   0xAA04             ADD      R2,SP,#+16
   \   000000E6   0xC203             STM      R2!,{R0,R1}
   \   000000E8   0xA806             ADD      R0,SP,#+24
   \   000000EA   0xC803             LDM      R0,{R0,R1}
   \   000000EC   0xAA04             ADD      R2,SP,#+16
   \   000000EE   0xCA0C             LDM      R2,{R2,R3}
   \   000000F0   0x1912             ADDS     R2,R2,R4
   \   000000F2   0x416B             ADCS     R3,R3,R5
   \   000000F4   0x4299             CMP      R1,R3
   \   000000F6   0xD808             BHI      ??read_8
   \   000000F8   0xD301             BCC      ??read_9
   \   000000FA   0x4290             CMP      R0,R2
   \   000000FC   0xD205             BCS      ??read_8
   \                     ??read_9: (+1)
   \   000000FE   0xAA04             ADD      R2,SP,#+16
   \   00000100   0xA806             ADD      R0,SP,#+24
   \   00000102   0xC803             LDM      R0,{R0,R1}
   \   00000104   0x1B00             SUBS     R0,R0,R4
   \   00000106   0x41A9             SBCS     R1,R1,R5
   \   00000108   0xC203             STM      R2!,{R0,R1}
   \                     ??read_8: (+1)
   \   0000010A   0x9808             LDR      R0,[SP, #+32]
   \   0000010C   0x6840             LDR      R0,[R0, #+4]
   \   0000010E   0x5980             LDR      R0,[R0, R6]
   \   00000110   0xA904             ADD      R1,SP,#+16
   \   00000112   0xC90C             LDM      R1!,{R2,R3}
   \   00000114   0x9200             STR      R2,[SP, #+0]
   \   00000116   0x9301             STR      R3,[SP, #+4]
   \   00000118   0x0022             MOVS     R2,R4
   \   0000011A   0x002B             MOVS     R3,R5
   \   0000011C   0x9903             LDR      R1,[SP, #+12]
   \   0000011E   0x6807             LDR      R7,[R0, #+0]
   \   00000120   0x693F             LDR      R7,[R7, #+16]
   \   00000122   0x47B8             BLX      R7
   \   00000124   0x2800             CMP      R0,#+0
   \   00000126   0xD0A6             BEQ      ??read_3
   \   00000128   0xE000             B        ??read_10
    113              }
    114          
    115              return 0;
   \                     ??read_5: (+1)
   \   0000012A   0x2000             MOVS     R0,#+0
   \                     ??read_10: (+1)
   \   0000012C   0xB009             ADD      SP,SP,#+36
   \   0000012E   0xBDF0             POP      {R4-R7,PC}       ;; return
    116          }
    117          

   \                                 In section .text, align 4, keep-with-next
    118          int ChainingBlockDevice::program(const void *b, bd_addr_t addr, bd_size_t size)
    119          {
   \                     _ZN19ChainingBlockDevice7programEPKvyy: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x0014             MOVS     R4,R2
   \   00000008   0x001D             MOVS     R5,R3
    120              MBED_ASSERT(is_valid_program(addr, size));
   \   0000000A   0x6801             LDR      R1,[R0, #+0]
   \   0000000C   0x6A49             LDR      R1,[R1, #+36]
   \   0000000E   0x4788             BLX      R1
   \   00000010   0x0002             MOVS     R2,R0
   \   00000012   0x000B             MOVS     R3,R1
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x0029             MOVS     R1,R5
   \   00000018   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000001C   0x2B00             CMP      R3,#+0
   \   0000001E   0xD120             BNE      ??program_0
   \   00000020   0x2A00             CMP      R2,#+0
   \   00000022   0xD11E             BNE      ??program_0
   \   00000024   0xA80E             ADD      R0,SP,#+56
   \   00000026   0xC803             LDM      R0,{R0,R1}
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0x9101             STR      R1,[SP, #+4]
   \   0000002C   0x9808             LDR      R0,[SP, #+32]
   \   0000002E   0x6801             LDR      R1,[R0, #+0]
   \   00000030   0x6A49             LDR      R1,[R1, #+36]
   \   00000032   0x4788             BLX      R1
   \   00000034   0x0002             MOVS     R2,R0
   \   00000036   0x000B             MOVS     R3,R1
   \   00000038   0x9800             LDR      R0,[SP, #+0]
   \   0000003A   0x9901             LDR      R1,[SP, #+4]
   \   0000003C   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000040   0x2B00             CMP      R3,#+0
   \   00000042   0xD10E             BNE      ??program_0
   \   00000044   0x2A00             CMP      R2,#+0
   \   00000046   0xD10C             BNE      ??program_0
   \   00000048   0x9808             LDR      R0,[SP, #+32]
   \   0000004A   0x6801             LDR      R1,[R0, #+0]
   \   0000004C   0x6AC9             LDR      R1,[R1, #+44]
   \   0000004E   0x4788             BLX      R1
   \   00000050   0xAA0E             ADD      R2,SP,#+56
   \   00000052   0xCA0C             LDM      R2,{R2,R3}
   \   00000054   0x1912             ADDS     R2,R2,R4
   \   00000056   0x416B             ADCS     R3,R3,R5
   \   00000058   0x4299             CMP      R1,R3
   \   0000005A   0xD808             BHI      ??program_1
   \   0000005C   0xD301             BCC      ??program_0
   \   0000005E   0x4290             CMP      R0,R2
   \   00000060   0xD205             BCS      ??program_1
   \                     ??program_0: (+1)
   \   00000062   0x2278             MOVS     R2,#+120
   \   00000064   0x....             ADR.N    R1,?_1
   \   00000066   0xBF00             Nop      
   \   00000068   0x....             ADR.N    R0,?_5
   \   0000006A   0x.... 0x....      BL       mbed_assert_internal
    121              const uint8_t *buffer = static_cast<const uint8_t*>(b);
   \                     ??program_1: (+1)
   \   0000006E   0x9603             STR      R6,[SP, #+12]
    122          
    123              // Find block devices containing blocks, may span multiple block devices
    124              for (size_t i = 0; i < _bd_count && size > 0; i++) {
   \   00000070   0x2600             MOVS     R6,#+0
   \   00000072   0x9602             STR      R6,[SP, #+8]
   \   00000074   0xE01A             B        ??program_2
    125                  bd_size_t bdsize = _bds[i]->size();
    126          
    127                  if (addr < bdsize) {
    128                      bd_size_t program = size;
    129                      if (addr + program > bdsize) {
    130                          program = bdsize - addr;
    131                      }
    132          
    133                      int err = _bds[i]->program(buffer, addr, program);
    134                      if (err) {
    135                          return err;
    136                      }
    137          
    138                      buffer += program;
   \                     ??program_3: (+1)
   \   00000076   0x9A03             LDR      R2,[SP, #+12]
   \   00000078   0xA804             ADD      R0,SP,#+16
   \   0000007A   0xC803             LDM      R0,{R0,R1}
   \   0000007C   0x1810             ADDS     R0,R2,R0
   \   0000007E   0x9003             STR      R0,[SP, #+12]
    139                      addr += program;
   \   00000080   0x0020             MOVS     R0,R4
   \   00000082   0x0029             MOVS     R1,R5
   \   00000084   0xAA04             ADD      R2,SP,#+16
   \   00000086   0xCA30             LDM      R2!,{R4,R5}
   \   00000088   0x1824             ADDS     R4,R4,R0
   \   0000008A   0x414D             ADCS     R5,R5,R1
    140                      size -= program;
   \   0000008C   0xAF0E             ADD      R7,SP,#+56
   \   0000008E   0xA80E             ADD      R0,SP,#+56
   \   00000090   0xC803             LDM      R0,{R0,R1}
   \   00000092   0xAA04             ADD      R2,SP,#+16
   \   00000094   0xCA0C             LDM      R2,{R2,R3}
   \   00000096   0x1A80             SUBS     R0,R0,R2
   \   00000098   0x4199             SBCS     R1,R1,R3
   \   0000009A   0xC703             STM      R7!,{R0,R1}
    141                  }
    142          
    143                  addr -= bdsize;
   \                     ??program_4: (+1)
   \   0000009C   0xA806             ADD      R0,SP,#+24
   \   0000009E   0xC803             LDM      R0,{R0,R1}
   \   000000A0   0x1A24             SUBS     R4,R4,R0
   \   000000A2   0x418D             SBCS     R5,R5,R1
   \   000000A4   0x9802             LDR      R0,[SP, #+8]
   \   000000A6   0x1C40             ADDS     R0,R0,#+1
   \   000000A8   0x9002             STR      R0,[SP, #+8]
   \   000000AA   0x1D36             ADDS     R6,R6,#+4
   \                     ??program_2: (+1)
   \   000000AC   0x9802             LDR      R0,[SP, #+8]
   \   000000AE   0x9908             LDR      R1,[SP, #+32]
   \   000000B0   0x6889             LDR      R1,[R1, #+8]
   \   000000B2   0x4288             CMP      R0,R1
   \   000000B4   0xD239             BCS      ??program_5
   \   000000B6   0xA80E             ADD      R0,SP,#+56
   \   000000B8   0xC803             LDM      R0,{R0,R1}
   \   000000BA   0x2900             CMP      R1,#+0
   \   000000BC   0xD101             BNE      ??program_6
   \   000000BE   0x2800             CMP      R0,#+0
   \   000000C0   0xD033             BEQ      ??program_5
   \                     ??program_6: (+1)
   \   000000C2   0x9808             LDR      R0,[SP, #+32]
   \   000000C4   0x6840             LDR      R0,[R0, #+4]
   \   000000C6   0x5980             LDR      R0,[R0, R6]
   \   000000C8   0x6801             LDR      R1,[R0, #+0]
   \   000000CA   0x6AC9             LDR      R1,[R1, #+44]
   \   000000CC   0x4788             BLX      R1
   \   000000CE   0xAA06             ADD      R2,SP,#+24
   \   000000D0   0xC203             STM      R2!,{R0,R1}
   \   000000D2   0xA806             ADD      R0,SP,#+24
   \   000000D4   0xC803             LDM      R0,{R0,R1}
   \   000000D6   0x428D             CMP      R5,R1
   \   000000D8   0xD8E0             BHI      ??program_4
   \   000000DA   0xD301             BCC      ??program_7
   \   000000DC   0x4284             CMP      R4,R0
   \   000000DE   0xD2DD             BCS      ??program_4
   \                     ??program_7: (+1)
   \   000000E0   0xA80E             ADD      R0,SP,#+56
   \   000000E2   0xC803             LDM      R0,{R0,R1}
   \   000000E4   0xAA04             ADD      R2,SP,#+16
   \   000000E6   0xC203             STM      R2!,{R0,R1}
   \   000000E8   0xA806             ADD      R0,SP,#+24
   \   000000EA   0xC803             LDM      R0,{R0,R1}
   \   000000EC   0xAA04             ADD      R2,SP,#+16
   \   000000EE   0xCA0C             LDM      R2,{R2,R3}
   \   000000F0   0x1912             ADDS     R2,R2,R4
   \   000000F2   0x416B             ADCS     R3,R3,R5
   \   000000F4   0x4299             CMP      R1,R3
   \   000000F6   0xD808             BHI      ??program_8
   \   000000F8   0xD301             BCC      ??program_9
   \   000000FA   0x4290             CMP      R0,R2
   \   000000FC   0xD205             BCS      ??program_8
   \                     ??program_9: (+1)
   \   000000FE   0xAA04             ADD      R2,SP,#+16
   \   00000100   0xA806             ADD      R0,SP,#+24
   \   00000102   0xC803             LDM      R0,{R0,R1}
   \   00000104   0x1B00             SUBS     R0,R0,R4
   \   00000106   0x41A9             SBCS     R1,R1,R5
   \   00000108   0xC203             STM      R2!,{R0,R1}
   \                     ??program_8: (+1)
   \   0000010A   0x9808             LDR      R0,[SP, #+32]
   \   0000010C   0x6840             LDR      R0,[R0, #+4]
   \   0000010E   0x5980             LDR      R0,[R0, R6]
   \   00000110   0xA904             ADD      R1,SP,#+16
   \   00000112   0xC90C             LDM      R1!,{R2,R3}
   \   00000114   0x9200             STR      R2,[SP, #+0]
   \   00000116   0x9301             STR      R3,[SP, #+4]
   \   00000118   0x0022             MOVS     R2,R4
   \   0000011A   0x002B             MOVS     R3,R5
   \   0000011C   0x9903             LDR      R1,[SP, #+12]
   \   0000011E   0x6807             LDR      R7,[R0, #+0]
   \   00000120   0x697F             LDR      R7,[R7, #+20]
   \   00000122   0x47B8             BLX      R7
   \   00000124   0x2800             CMP      R0,#+0
   \   00000126   0xD0A6             BEQ      ??program_3
   \   00000128   0xE000             B        ??program_10
    144              }
    145          
    146              return 0;
   \                     ??program_5: (+1)
   \   0000012A   0x2000             MOVS     R0,#+0
   \                     ??program_10: (+1)
   \   0000012C   0xB009             ADD      SP,SP,#+36
   \   0000012E   0xBDF0             POP      {R4-R7,PC}       ;; return
    147          }
    148          

   \                                 In section .text, align 4, keep-with-next
    149          int ChainingBlockDevice::erase(bd_addr_t addr, bd_size_t size)
    150          {
   \                     _ZN19ChainingBlockDevice5eraseEyy: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0016             MOVS     R6,R2
   \   00000006   0x001F             MOVS     R7,R3
    151              MBED_ASSERT(is_valid_erase(addr, size));
   \   00000008   0x6801             LDR      R1,[R0, #+0]
   \   0000000A   0x6A89             LDR      R1,[R1, #+40]
   \   0000000C   0x4788             BLX      R1
   \   0000000E   0x0002             MOVS     R2,R0
   \   00000010   0x000B             MOVS     R3,R1
   \   00000012   0x0030             MOVS     R0,R6
   \   00000014   0x0039             MOVS     R1,R7
   \   00000016   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000001A   0x2B00             CMP      R3,#+0
   \   0000001C   0xD120             BNE      ??erase_0
   \   0000001E   0x2A00             CMP      R2,#+0
   \   00000020   0xD11E             BNE      ??erase_0
   \   00000022   0xA80C             ADD      R0,SP,#+48
   \   00000024   0xC803             LDM      R0,{R0,R1}
   \   00000026   0x0004             MOVS     R4,R0
   \   00000028   0x000D             MOVS     R5,R1
   \   0000002A   0x9806             LDR      R0,[SP, #+24]
   \   0000002C   0x6801             LDR      R1,[R0, #+0]
   \   0000002E   0x6A89             LDR      R1,[R1, #+40]
   \   00000030   0x4788             BLX      R1
   \   00000032   0x0002             MOVS     R2,R0
   \   00000034   0x000B             MOVS     R3,R1
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0x0029             MOVS     R1,R5
   \   0000003A   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000003E   0x2B00             CMP      R3,#+0
   \   00000040   0xD10E             BNE      ??erase_0
   \   00000042   0x2A00             CMP      R2,#+0
   \   00000044   0xD10C             BNE      ??erase_0
   \   00000046   0x9806             LDR      R0,[SP, #+24]
   \   00000048   0x6801             LDR      R1,[R0, #+0]
   \   0000004A   0x6AC9             LDR      R1,[R1, #+44]
   \   0000004C   0x4788             BLX      R1
   \   0000004E   0xAA0C             ADD      R2,SP,#+48
   \   00000050   0xCA0C             LDM      R2,{R2,R3}
   \   00000052   0x1992             ADDS     R2,R2,R6
   \   00000054   0x417B             ADCS     R3,R3,R7
   \   00000056   0x4299             CMP      R1,R3
   \   00000058   0xD809             BHI      ??erase_1
   \   0000005A   0xD301             BCC      ??erase_0
   \   0000005C   0x4290             CMP      R0,R2
   \   0000005E   0xD206             BCS      ??erase_1
   \                     ??erase_0: (+1)
   \   00000060   0x2297             MOVS     R2,#+151
   \   00000062   0xBF00             Nop      
   \   00000064   0x....             ADR.N    R1,?_1
   \   00000066   0xBF00             Nop      
   \   00000068   0x....             ADR.N    R0,?_6
   \   0000006A   0x.... 0x....      BL       mbed_assert_internal
    152          
    153              // Find block devices containing blocks, may span multiple block devices
    154              for (size_t i = 0; i < _bd_count && size > 0; i++) {
   \                     ??erase_1: (+1)
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x9003             STR      R0,[SP, #+12]
   \   00000072   0xE010             B        ??erase_2
    155                  bd_size_t bdsize = _bds[i]->size();
    156          
    157                  if (addr < bdsize) {
    158                      bd_size_t erase = size;
    159                      if (addr + erase > bdsize) {
    160                          erase = bdsize - addr;
    161                      }
    162          
    163                      int err = _bds[i]->erase(addr, erase);
    164                      if (err) {
    165                          return err;
    166                      }
    167          
    168                      addr += erase;
   \                     ??erase_3: (+1)
   \   00000074   0x1936             ADDS     R6,R6,R4
   \   00000076   0x416F             ADCS     R7,R7,R5
    169                      size -= erase;
   \   00000078   0xAA0C             ADD      R2,SP,#+48
   \   0000007A   0xA80C             ADD      R0,SP,#+48
   \   0000007C   0xC803             LDM      R0,{R0,R1}
   \   0000007E   0x1B00             SUBS     R0,R0,R4
   \   00000080   0x41A9             SBCS     R1,R1,R5
   \   00000082   0xC203             STM      R2!,{R0,R1}
    170                  }
    171          
    172                  addr -= bdsize;
   \                     ??erase_4: (+1)
   \   00000084   0xA804             ADD      R0,SP,#+16
   \   00000086   0xC803             LDM      R0,{R0,R1}
   \   00000088   0x1A36             SUBS     R6,R6,R0
   \   0000008A   0x418F             SBCS     R7,R7,R1
   \   0000008C   0x9803             LDR      R0,[SP, #+12]
   \   0000008E   0x1C40             ADDS     R0,R0,#+1
   \   00000090   0x9003             STR      R0,[SP, #+12]
   \   00000092   0x9802             LDR      R0,[SP, #+8]
   \   00000094   0x1D00             ADDS     R0,R0,#+4
   \                     ??erase_2: (+1)
   \   00000096   0x9002             STR      R0,[SP, #+8]
   \   00000098   0x9803             LDR      R0,[SP, #+12]
   \   0000009A   0x9906             LDR      R1,[SP, #+24]
   \   0000009C   0x6889             LDR      R1,[R1, #+8]
   \   0000009E   0x4288             CMP      R0,R1
   \   000000A0   0xD233             BCS      ??erase_5
   \   000000A2   0xA80C             ADD      R0,SP,#+48
   \   000000A4   0xC803             LDM      R0,{R0,R1}
   \   000000A6   0x2900             CMP      R1,#+0
   \   000000A8   0xD101             BNE      ??erase_6
   \   000000AA   0x2800             CMP      R0,#+0
   \   000000AC   0xD02D             BEQ      ??erase_5
   \                     ??erase_6: (+1)
   \   000000AE   0x9806             LDR      R0,[SP, #+24]
   \   000000B0   0x6840             LDR      R0,[R0, #+4]
   \   000000B2   0x9902             LDR      R1,[SP, #+8]
   \   000000B4   0x5840             LDR      R0,[R0, R1]
   \   000000B6   0x6801             LDR      R1,[R0, #+0]
   \   000000B8   0x6AC9             LDR      R1,[R1, #+44]
   \   000000BA   0x4788             BLX      R1
   \   000000BC   0xAA04             ADD      R2,SP,#+16
   \   000000BE   0xC203             STM      R2!,{R0,R1}
   \   000000C0   0xA804             ADD      R0,SP,#+16
   \   000000C2   0xC803             LDM      R0,{R0,R1}
   \   000000C4   0x428F             CMP      R7,R1
   \   000000C6   0xD8DD             BHI      ??erase_4
   \   000000C8   0xD301             BCC      ??erase_7
   \   000000CA   0x4286             CMP      R6,R0
   \   000000CC   0xD2DA             BCS      ??erase_4
   \                     ??erase_7: (+1)
   \   000000CE   0xA80C             ADD      R0,SP,#+48
   \   000000D0   0xC830             LDM      R0!,{R4,R5}
   \   000000D2   0xA804             ADD      R0,SP,#+16
   \   000000D4   0xC803             LDM      R0,{R0,R1}
   \   000000D6   0x002B             MOVS     R3,R5
   \   000000D8   0x19A2             ADDS     R2,R4,R6
   \   000000DA   0x417B             ADCS     R3,R3,R7
   \   000000DC   0x4299             CMP      R1,R3
   \   000000DE   0xD806             BHI      ??erase_8
   \   000000E0   0xD301             BCC      ??erase_9
   \   000000E2   0x4290             CMP      R0,R2
   \   000000E4   0xD203             BCS      ??erase_8
   \                     ??erase_9: (+1)
   \   000000E6   0xA804             ADD      R0,SP,#+16
   \   000000E8   0xC830             LDM      R0!,{R4,R5}
   \   000000EA   0x1BA4             SUBS     R4,R4,R6
   \   000000EC   0x41BD             SBCS     R5,R5,R7
   \                     ??erase_8: (+1)
   \   000000EE   0x9806             LDR      R0,[SP, #+24]
   \   000000F0   0x6840             LDR      R0,[R0, #+4]
   \   000000F2   0x9902             LDR      R1,[SP, #+8]
   \   000000F4   0x5840             LDR      R0,[R0, R1]
   \   000000F6   0x9400             STR      R4,[SP, #+0]
   \   000000F8   0x9501             STR      R5,[SP, #+4]
   \   000000FA   0x0032             MOVS     R2,R6
   \   000000FC   0x003B             MOVS     R3,R7
   \   000000FE   0x6801             LDR      R1,[R0, #+0]
   \   00000100   0x6989             LDR      R1,[R1, #+24]
   \   00000102   0x4788             BLX      R1
   \   00000104   0x2800             CMP      R0,#+0
   \   00000106   0xD0B5             BEQ      ??erase_3
   \   00000108   0xE000             B        ??erase_10
    173              }
    174          
    175              return 0;
   \                     ??erase_5: (+1)
   \   0000010A   0x2000             MOVS     R0,#+0
   \                     ??erase_10: (+1)
   \   0000010C   0xB007             ADD      SP,SP,#+28
   \   0000010E   0xBDF0             POP      {R4-R7,PC}       ;; return
    176          }
    177          

   \                                 In section .text, align 2, keep-with-next
    178          bd_size_t ChainingBlockDevice::get_read_size() const
    179          {
    180              return _read_size;
   \                     _ZNK19ChainingBlockDevice13get_read_sizeEv: (+1)
   \   00000000   0x3010             ADDS     R0,R0,#+16
   \   00000002   0xC803             LDM      R0,{R0,R1}
   \   00000004   0x4770             BX       LR               ;; return
    181          }
    182          

   \                                 In section .text, align 2, keep-with-next
    183          bd_size_t ChainingBlockDevice::get_program_size() const
    184          {
    185              return _program_size;
   \                     _ZNK19ChainingBlockDevice16get_program_sizeEv: (+1)
   \   00000000   0x3018             ADDS     R0,R0,#+24
   \   00000002   0xC803             LDM      R0,{R0,R1}
   \   00000004   0x4770             BX       LR               ;; return
    186          }
    187          

   \                                 In section .text, align 2, keep-with-next
    188          bd_size_t ChainingBlockDevice::get_erase_size() const
    189          {
    190              return _erase_size;
   \                     _ZNK19ChainingBlockDevice14get_erase_sizeEv: (+1)
   \   00000000   0x3020             ADDS     R0,R0,#+32
   \   00000002   0xC803             LDM      R0,{R0,R1}
   \   00000004   0x4770             BX       LR               ;; return
    191          }
    192          

   \                                 In section .text, align 2, keep-with-next
    193          bd_size_t ChainingBlockDevice::size() const
    194          {
    195              return _size;
   \                     _ZNK19ChainingBlockDevice4sizeEv: (+1)
   \   00000000   0x3028             ADDS     R0,R0,#+40
   \   00000002   0xC803             LDM      R0,{R0,R1}
   \   00000004   0x4770             BX       LR               ;; return
    196          }

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp ChainingBlockDevice::subobject ChainingBlockDevice(BlockDevice **, std::size_t)
   \                     _ZN19ChainingBlockDeviceC2EPP11BlockDevicej: (+1)
   \   00000000   0x....             B.N      ?Subroutine0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     _ZTV19ChainingBlockDevice+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x5F 0x65          DC8 5FH, 65H, 72H, 61H, 73H, 65H, 5FH, 73H
   \              0x72 0x61    
   \              0x73 0x65    
   \              0x5F 0x73    
   \   00000008   0x69 0x7A          DC8 69H, 7AH, 65H, 20H, 3EH, 20H, 65H, 72H
   \              0x65 0x20    
   \              0x3E 0x20    
   \              0x65 0x72    
   \   00000010   0x61 0x73          DC8 61H, 73H, 65H, 20H, 26H, 26H, 20H, 69H
   \              0x65 0x20    
   \              0x26 0x26    
   \              0x20 0x69    
   \   00000018   0x73 0x5F          DC8 73H, 5FH, 61H, 6CH, 69H, 67H, 6EH, 65H
   \              0x61 0x6C    
   \              0x69 0x67    
   \              0x6E 0x65    
   \   00000020   0x64 0x28          DC8 64H, 28H, 5FH, 65H, 72H, 61H, 73H, 65H
   \              0x5F 0x65    
   \              0x72 0x61    
   \              0x73 0x65    
   \   00000028   0x5F 0x73          DC8 5FH, 73H, 69H, 7AH, 65H, 2CH, 20H, 65H
   \              0x69 0x7A    
   \              0x65 0x2C    
   \              0x20 0x65    
   \   00000030   0x72 0x61          DC8 72H, 61H, 73H, 65H, 29H, 0
   \              0x73 0x65    
   \              0x29 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x5F 0x72          DC8 "_read_size > read && is_aligned(_read_size, read)"
   \              0x65 0x61    
   \              0x64 0x5F    
   \              0x73 0x69    
   \              0x7A 0x65    
   \              0x20 0x3E    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x26 0x26    
   \              0x20 0x69    
   \              0x73 0x5F    
   \              0x61 0x6C    
   \              0x69 0x67    
   \              0x6E 0x65    
   \              0x64 0x28    
   \              0x5F 0x72    
   \              0x65 0x61    
   \              0x64 0x5F    
   \              0x73 0x69    
   \              0x7A 0x65    
   \              0x2C 0x20    
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x29 0x00    
   \   00000032   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x5F 0x70          DC8 5FH, 70H, 72H, 6FH, 67H, 72H, 61H, 6DH
   \              0x72 0x6F    
   \              0x67 0x72    
   \              0x61 0x6D    
   \   00000008   0x5F 0x73          DC8 5FH, 73H, 69H, 7AH, 65H, 20H, 3EH, 20H
   \              0x69 0x7A    
   \              0x65 0x20    
   \              0x3E 0x20    
   \   00000010   0x70 0x72          DC8 70H, 72H, 6FH, 67H, 72H, 61H, 6DH, 20H
   \              0x6F 0x67    
   \              0x72 0x61    
   \              0x6D 0x20    
   \   00000018   0x26 0x26          DC8 26H, 26H, 20H, 69H, 73H, 5FH, 61H, 6CH
   \              0x20 0x69    
   \              0x73 0x5F    
   \              0x61 0x6C    
   \   00000020   0x69 0x67          DC8 69H, 67H, 6EH, 65H, 64H, 28H, 5FH, 70H
   \              0x6E 0x65    
   \              0x64 0x28    
   \              0x5F 0x70    
   \   00000028   0x72 0x6F          DC8 72H, 6FH, 67H, 72H, 61H, 6DH, 5FH, 73H
   \              0x67 0x72    
   \              0x61 0x6D    
   \              0x5F 0x73    
   \   00000030   0x69 0x7A          DC8 69H, 7AH, 65H, 2CH, 20H, 70H, 72H, 6FH
   \              0x65 0x2C    
   \              0x20 0x70    
   \              0x72 0x6F    
   \   00000038   0x67 0x72          DC8 67H, 72H, 61H, 6DH, 29H, 0
   \              0x61 0x6D    
   \              0x29 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x69 0x73          DC8 "is_valid_read(addr, size)"
   \              0x5F 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x5F 0x72    
   \              0x65 0x61    
   \              0x64 0x28    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x2C 0x20    
   \              0x73 0x69    
   \              0x7A 0x65    
   \              0x29 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x2E 0x5C          DC8 2EH, 5CH, 6DH, 62H, 65H, 64H, 2DH, 6FH
   \              0x6D 0x62    
   \              0x65 0x64    
   \              0x2D 0x6F    
   \   00000008   0x73 0x5C          DC8 73H, 5CH, 66H, 65H, 61H, 74H, 75H, 72H
   \              0x66 0x65    
   \              0x61 0x74    
   \              0x75 0x72    
   \   00000010   0x65 0x73          DC8 65H, 73H, 5CH, 66H, 69H, 6CH, 65H, 73H
   \              0x5C 0x66    
   \              0x69 0x6C    
   \              0x65 0x73    
   \   00000018   0x79 0x73          DC8 79H, 73H, 74H, 65H, 6DH, 5CH, 62H, 64H
   \              0x74 0x65    
   \              0x6D 0x5C    
   \              0x62 0x64    
   \   00000020   0x5C 0x43          DC8 5CH, 43H, 68H, 61H, 69H, 6EH, 69H, 6EH
   \              0x68 0x61    
   \              0x69 0x6E    
   \              0x69 0x6E    
   \   00000028   0x67 0x42          DC8 67H, 42H, 6CH, 6FH, 63H, 6BH, 44H, 65H
   \              0x6C 0x6F    
   \              0x63 0x6B    
   \              0x44 0x65    
   \   00000030   0x76 0x69          DC8 76H, 69H, 63H, 65H, 2EH, 63H, 70H, 70H
   \              0x63 0x65    
   \              0x2E 0x63    
   \              0x70 0x70    
   \   00000038   0x00               DC8 0
   \   00000039   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x69 0x73          DC8 "is_valid_program(addr, size)"
   \              0x5F 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x5F 0x70    
   \              0x72 0x6F    
   \              0x67 0x72    
   \              0x61 0x6D    
   \              0x28 0x61    
   \              0x64 0x64    
   \              0x72 0x2C    
   \              0x20 0x73    
   \              0x69 0x7A    
   \              0x65 0x29    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x69 0x73          DC8 "is_valid_erase(addr, size)"
   \              0x5F 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x5F 0x65    
   \              0x72 0x61    
   \              0x73 0x65    
   \              0x28 0x61    
   \              0x64 0x64    
   \              0x72 0x2C    
   \              0x20 0x73    
   \              0x69 0x7A    
   \              0x65 0x29    
   \              0x00         
   \   0000001B   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BlockDevice::trim(bd_addr_t, bd_size_t)
       0   ChainingBlockDevice::ChainingBlockDevice(BlockDevice **, std::size_t)
      16   ChainingBlockDevice::deinit()
        16   -- Indirect call
       8   ChainingBlockDevice::deleter ~ChainingBlockDevice()
         8   -> operator delete(void *)
      48   ChainingBlockDevice::erase(bd_addr_t, bd_size_t)
        48   -- Indirect call
        48   -> mbed_assert_internal
        48 __aeabi_uldivmod
       0   ChainingBlockDevice::get_erase_size() const
       0   ChainingBlockDevice::get_program_size() const
       0   ChainingBlockDevice::get_read_size() const
      32   ChainingBlockDevice::init()
        32   -- Indirect call
        32   -> mbed_assert_internal
        32 __aeabi_lmul
        32 __aeabi_uldivmod
      56   ChainingBlockDevice::program(void const *, bd_addr_t, bd_size_t)
        56   -- Indirect call
        56   -> mbed_assert_internal
        56 __aeabi_uldivmod
      56   ChainingBlockDevice::read(void *, bd_addr_t, bd_size_t)
        56   -- Indirect call
        56   -> mbed_assert_internal
        56 __aeabi_uldivmod
       0   ChainingBlockDevice::size() const
       0   ChainingBlockDevice::subobject ChainingBlockDevice(BlockDevice **, std::size_t)
       0   ChainingBlockDevice::~ChainingBlockDevice()
       8   mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
         8   -- Indirect call
       0   mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
       0   mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
      12   mbed::callback<>(void (*)(void *), void *)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable9
      42  ?Subroutine0
      52  ?_0
      60  ?_1
      64  ?_2
      56  ?_3
      28  ?_4
      32  ?_5
      28  ?_6
       4  BlockDevice::trim(bd_addr_t, bd_size_t)
       2  ChainingBlockDevice::ChainingBlockDevice(BlockDevice **, std::size_t)
      40  ChainingBlockDevice::deinit()
       8  ChainingBlockDevice::deleter ~ChainingBlockDevice()
     272  ChainingBlockDevice::erase(bd_addr_t, bd_size_t)
       6  ChainingBlockDevice::get_erase_size() const
       6  ChainingBlockDevice::get_program_size() const
       6  ChainingBlockDevice::get_read_size() const
     462  ChainingBlockDevice::init()
     304  ChainingBlockDevice::program(void const *, bd_addr_t, bd_size_t)
     304  ChainingBlockDevice::read(void *, bd_addr_t, bd_size_t)
       6  ChainingBlockDevice::size() const
       2  ChainingBlockDevice::subobject ChainingBlockDevice(BlockDevice **, std::size_t)
       2  ChainingBlockDevice::~ChainingBlockDevice()
      12  mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
       2  mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
      10  mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
      32  mbed::callback<>(void (*)(void *), void *)
      12  ops
     408  -- Other

 
   420 bytes in section .rodata
 1 854 bytes in section .text
 
 1 784 bytes of CODE  memory (+  70 bytes shared)
     0 bytes of CONST memory (+ 420 bytes shared)

Errors: none
Warnings: none
