###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:15
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\filesystem\bd\MBRBlockDevice.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\bd\MBRBlockDevice.d
#        -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\bd\MBRBlockDevice.s.txt
#        -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\bd\MBRBlockDevice.o
#        .\mbed-os\features\filesystem\bd\MBRBlockDevice.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\bd\MBRBlockDevice.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\bd\MBRBlockDevice.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\filesystem\bd\MBRBlockDevice.cpp
      1          /* mbed Microcontroller Library
      2           * Copyright (c) 2017 ARM Limited
      3           *
      4           * Licensed under the Apache License, Version 2.0 (the "License");
      5           * you may not use this file except in compliance with the License.
      6           * You may obtain a copy of the License at
      7           *
      8           *     http://www.apache.org/licenses/LICENSE-2.0
      9           *
     10           * Unless required by applicable law or agreed to in writing, software
     11           * distributed under the License is distributed on an "AS IS" BASIS,
     12           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     13           * See the License for the specific language governing permissions and
     14           * limitations under the License.
     15           */
     16          
     17          #include "MBRBlockDevice.h"

   \                                 In section .text, align 2
   \   __interwork __softfp int BlockDevice::trim(bd_addr_t, bd_size_t)
   \                     _ZN11BlockDevice4trimEyy: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp bool BlockDevice::is_valid_erase(bd_addr_t, bd_size_t) const
   \                     _ZNK11BlockDevice14is_valid_eraseEyy: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0x0014             MOVS     R4,R2
   \   00000004   0x001D             MOVS     R5,R3
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x6A89             LDR      R1,[R1, #+40]
   \   0000000A   0x4788             BLX      R1
   \   0000000C   0x0002             MOVS     R2,R0
   \   0000000E   0x000B             MOVS     R3,R1
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x0029             MOVS     R1,R5
   \   00000014   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000018   0x2B00             CMP      R3,#+0
   \   0000001A   0xD11E             BNE      ??is_valid_erase_0
   \   0000001C   0x2A00             CMP      R2,#+0
   \   0000001E   0xD11C             BNE      ??is_valid_erase_0
   \   00000020   0xA806             ADD      R0,SP,#+24
   \   00000022   0xC8C0             LDM      R0!,{R6,R7}
   \   00000024   0x9800             LDR      R0,[SP, #+0]
   \   00000026   0x6801             LDR      R1,[R0, #+0]
   \   00000028   0x6A89             LDR      R1,[R1, #+40]
   \   0000002A   0x4788             BLX      R1
   \   0000002C   0x0002             MOVS     R2,R0
   \   0000002E   0x000B             MOVS     R3,R1
   \   00000030   0x0030             MOVS     R0,R6
   \   00000032   0x0039             MOVS     R1,R7
   \   00000034   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000038   0x2B00             CMP      R3,#+0
   \   0000003A   0xD10E             BNE      ??is_valid_erase_0
   \   0000003C   0x2A00             CMP      R2,#+0
   \   0000003E   0xD10C             BNE      ??is_valid_erase_0
   \   00000040   0x9800             LDR      R0,[SP, #+0]
   \   00000042   0x6801             LDR      R1,[R0, #+0]
   \   00000044   0x6AC9             LDR      R1,[R1, #+44]
   \   00000046   0x4788             BLX      R1
   \   00000048   0x1936             ADDS     R6,R6,R4
   \   0000004A   0x416F             ADCS     R7,R7,R5
   \   0000004C   0x42B9             CMP      R1,R7
   \   0000004E   0xD304             BCC      ??is_valid_erase_0
   \   00000050   0xD801             BHI      ??is_valid_erase_1
   \   00000052   0x42B0             CMP      R0,R6
   \   00000054   0xD301             BCC      ??is_valid_erase_0
   \                     ??is_valid_erase_1: (+1)
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0xBDF2             POP      {R1,R4-R7,PC}
   \                     ??is_valid_erase_0: (+1)
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return

   \                                 In section .rodata, align 4
   \   __absolute mbed::Callback<void ()>::ops const mbed::Callback<void ()>::generate<>(mbed::Callback<void ()>::function_context<void (*)(void *), void> const &)::ops
   \                     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops:
   \   00000000   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv
   \   00000004   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv
   \   00000008   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0x6848             LDR      R0,[R1, #+4]
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x4788             BLX      R1
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??function_move_0
   \   00000004   0xC90C             LDM      R1!,{R2,R3}
   \   00000006   0xC00C             STM      R0!,{R2,R3}
   \                     ??function_move_0: (+1)
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
   \                     _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4
   \   __interwork __softfp void mbed::callback<>(void (*)(void *), void *)
   \                     _ZN4mbed8callbackIvvvEENS_8CallbackIFT1_vEEEPFS2_PT_EPT0_: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0xC078             STM      R0!,{R3-R6}
   \   0000000C   0x3810             SUBS     R0,R0,#+16
   \   0000000E   0xD001             BEQ      ??callback_0
   \   00000010   0x6001             STR      R1,[R0, #+0]
   \   00000012   0x6042             STR      R2,[R0, #+4]
   \                     ??callback_0: (+1)
   \   00000014   0x4901             LDR      R1,??callback_1
   \   00000016   0x60C1             STR      R1,[R0, #+12]
   \   00000018   0xBC70             POP      {R4-R6}
   \   0000001A   0x4770             BX       LR               ;; return
   \                     ??callback_1:
   \   0000001C   0x........         DC32     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops

   \                                 In section .text, align 2
   \   __code __interwork __softfp MBRBlockDevice::~MBRBlockDevice()
   \                     _ZN14MBRBlockDeviceD1Ev: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __code __interwork __softfp MBRBlockDevice::deleter ~MBRBlockDevice()
   \                     _ZN14MBRBlockDeviceD0Ev: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZdlPv
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     18          #include <algorithm>
     19          
     20          
     21          // On disk structures, all entries are little endian
     22          MBED_PACKED(struct) mbr_entry {
     23              uint8_t status;
     24              uint8_t chs_start[3];
     25              uint8_t type;
     26              uint8_t chs_stop[3];
     27              uint32_t lba_offset;
     28              uint32_t lba_size;
     29          };
     30          
     31          MBED_PACKED(struct) mbr_table {
     32              struct mbr_entry entries[4];
     33              uint8_t signature[2];
     34          };
     35          
     36          // Little-endian conversion, should compile to noop
     37          // if system is little-endian
     38          static inline uint32_t tole32(uint32_t a)
     39          {
     40              union {
     41                  uint32_t u32;
     42                  uint8_t u8[4];
     43              } w;
     44          
     45              w.u8[0] = a >>  0;
     46              w.u8[1] = a >>  8;
     47              w.u8[2] = a >> 16;
     48              w.u8[3] = a >> 24;
     49          
     50              return w.u32;
     51          }
     52          
     53          static inline uint32_t fromle32(uint32_t a)
     54          {
     55              return tole32(a);
     56          }
     57          

   \                                 In section .text, align 2, keep-with-next
     58          static void tochs(uint32_t lba, uint8_t chs[3])
     59          {
   \                     _Z5tochsjPh: (+1)
   \   00000000   0xB411             PUSH     {R0,R4}
   \   00000002   0xB081             SUB      SP,SP,#+4
     60              uint32_t sector = std::min<uint32_t>(lba, 0xfffffd)+1;
   \   00000004   0x....             LDR      R0,??DataTable9  ;; 0xfffffd
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0x9801             LDR      R0,[SP, #+4]
   \   0000000A   0x....             LDR      R2,??DataTable9_1  ;; 0xfffffe
   \   0000000C   0x4290             CMP      R0,R2
   \   0000000E   0xD301             BCC      ??tochs_0
   \   00000010   0x4668             MOV      R0,SP
   \   00000012   0xE000             B        ??tochs_1
   \                     ??tochs_0: (+1)
   \   00000014   0xA801             ADD      R0,SP,#+4
   \                     ??tochs_1: (+1)
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x1C40             ADDS     R0,R0,#+1
     61              chs[0] = (sector >> 6) & 0xff;
   \   0000001A   0x0982             LSRS     R2,R0,#+6
   \   0000001C   0x700A             STRB     R2,[R1, #+0]
     62              chs[1] = ((sector >> 0) & 0x3f) | ((sector >> 16) & 0xc0);
   \   0000001E   0x0682             LSLS     R2,R0,#+26
   \   00000020   0x0E92             LSRS     R2,R2,#+26
   \   00000022   0x0C03             LSRS     R3,R0,#+16
   \   00000024   0x24C0             MOVS     R4,#+192
   \   00000026   0x401C             ANDS     R4,R4,R3
   \   00000028   0x4314             ORRS     R4,R4,R2
   \   0000002A   0x704C             STRB     R4,[R1, #+1]
     63              chs[2] = (sector >> 14) & 0xff;
   \   0000002C   0x0B80             LSRS     R0,R0,#+14
   \   0000002E   0x7088             STRB     R0,[R1, #+2]
     64          }
   \   00000030   0xBC13             POP      {R0,R1,R4}
   \   00000032   0x4770             BX       LR               ;; return
     65          
     66          
     67          // Partition after address are turned into absolute
     68          // addresses, assumes bd is initialized

   \                                 In section .text, align 4, keep-with-next
     69          static int partition_absolute(
     70                  BlockDevice *bd, int part, uint8_t type,
     71                  bd_size_t offset, bd_size_t size)
     72          {
   \                     _Z18partition_absoluteP11BlockDeviceihyy: (+1)
   \   00000000   0xB57D             PUSH     {R0,R2-R6,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x000D             MOVS     R5,R1
     73              // Allocate smallest buffer necessary to write MBR
     74              uint32_t buffer_size = std::max<uint32_t>(bd->get_program_size(), sizeof(struct mbr_table));
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x6A49             LDR      R1,[R1, #+36]
   \   0000000A   0x4788             BLX      R1
   \   0000000C   0x9004             STR      R0,[SP, #+16]
   \   0000000E   0x2042             MOVS     R0,#+66
   \   00000010   0x9005             STR      R0,[SP, #+20]
   \   00000012   0x9804             LDR      R0,[SP, #+16]
   \   00000014   0x2842             CMP      R0,#+66
   \   00000016   0xD201             BCS      ??partition_absolute_0
   \   00000018   0xA805             ADD      R0,SP,#+20
   \   0000001A   0xE000             B        ??partition_absolute_1
   \                     ??partition_absolute_0: (+1)
   \   0000001C   0xA804             ADD      R0,SP,#+16
   \                     ??partition_absolute_1: (+1)
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x9003             STR      R0,[SP, #+12]
     75              uint8_t *buffer = new uint8_t[buffer_size];
   \   00000022   0x.... 0x....      BL       _Znaj
   \   00000026   0x9002             STR      R0,[SP, #+8]
   \   00000028   0x9803             LDR      R0,[SP, #+12]
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x9000             STR      R0,[SP, #+0]
   \   0000002E   0x9101             STR      R1,[SP, #+4]
   \   00000030   0x2080             MOVS     R0,#+128
   \   00000032   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   00000034   0x9903             LDR      R1,[SP, #+12]
   \   00000036   0x1A42             SUBS     R2,R0,R1
   \   00000038   0x2300             MOVS     R3,#+0
   \   0000003A   0x9902             LDR      R1,[SP, #+8]
   \   0000003C   0x9807             LDR      R0,[SP, #+28]
   \   0000003E   0x6804             LDR      R4,[R0, #+0]
   \   00000040   0x6924             LDR      R4,[R4, #+16]
     76          
     77              // Check for existing MBR
     78              int err = bd->read(buffer, 512-buffer_size, buffer_size);
   \   00000042   0x47A0             BLX      R4
   \   00000044   0x0004             MOVS     R4,R0
     79              if (err) {
   \   00000046   0x9802             LDR      R0,[SP, #+8]
   \   00000048   0xD000             BEQ      .+4
   \   0000004A   0xE08B             B        ??partition_absolute_2
     80                  delete[] buffer;
     81                  return err;
     82              }
     83          
     84              struct mbr_table *table = reinterpret_cast<struct mbr_table*>(
     85                      &buffer[buffer_size - sizeof(struct mbr_table)]);
   \   0000004C   0x9903             LDR      R1,[SP, #+12]
   \   0000004E   0x1844             ADDS     R4,R0,R1
   \   00000050   0x3C42             SUBS     R4,R4,#+66
     86              if (table->signature[0] != 0x55 || table->signature[1] != 0xaa) {
   \   00000052   0x0020             MOVS     R0,R4
   \   00000054   0x3040             ADDS     R0,R0,#+64
   \   00000056   0x7801             LDRB     R1,[R0, #+0]
   \   00000058   0x2955             CMP      R1,#+85
   \   0000005A   0xD102             BNE      ??partition_absolute_3
   \   0000005C   0x7841             LDRB     R1,[R0, #+1]
   \   0000005E   0x29AA             CMP      R1,#+170
   \   00000060   0xD007             BEQ      ??partition_absolute_4
     87                  // Setup default values for MBR
     88                  table->signature[0] = 0x55;
   \                     ??partition_absolute_3: (+1)
   \   00000062   0x2155             MOVS     R1,#+85
   \   00000064   0x7001             STRB     R1,[R0, #+0]
     89                  table->signature[1] = 0xaa;
   \   00000066   0x21AA             MOVS     R1,#+170
   \   00000068   0x7041             STRB     R1,[R0, #+1]
     90                  memset(table->entries, 0, sizeof(table->entries));
   \   0000006A   0x2140             MOVS     R1,#+64
   \   0000006C   0x0020             MOVS     R0,R4
   \   0000006E   0x.... 0x....      BL       __aeabi_memclr
     91              }
     92          
     93              // Setup new partition
     94              MBED_ASSERT(part >= 1 && part <= 4);
   \                     ??partition_absolute_4: (+1)
   \   00000072   0x1E68             SUBS     R0,R5,#+1
   \   00000074   0x2804             CMP      R0,#+4
   \   00000076   0xD304             BCC      ??partition_absolute_5
   \   00000078   0x225E             MOVS     R2,#+94
   \   0000007A   0x....             LDR      R1,??DataTable9_2
   \   0000007C   0x....             ADR.N    R0,?_0
   \   0000007E   0x.... 0x....      BL       mbed_assert_internal
     95              table->entries[part-1].status = 0x00; // inactive (not bootable)
   \                     ??partition_absolute_5: (+1)
   \   00000082   0x0128             LSLS     R0,R5,#+4
   \   00000084   0x1824             ADDS     R4,R4,R0
   \   00000086   0x0020             MOVS     R0,R4
   \   00000088   0x3810             SUBS     R0,R0,#+16
   \   0000008A   0x2100             MOVS     R1,#+0
   \   0000008C   0x7001             STRB     R1,[R0, #+0]
     96              table->entries[part-1].type = type;
   \   0000008E   0xA908             ADD      R1,SP,#+32
   \   00000090   0x7809             LDRB     R1,[R1, #+0]
   \   00000092   0x7101             STRB     R1,[R0, #+4]
     97          
     98              // lba dimensions
     99              uint32_t sector = std::max<uint32_t>(bd->get_erase_size(), 512);
   \   00000094   0x9807             LDR      R0,[SP, #+28]
   \   00000096   0x6801             LDR      R1,[R0, #+0]
   \   00000098   0x6A89             LDR      R1,[R1, #+40]
   \   0000009A   0x4788             BLX      R1
   \   0000009C   0x9004             STR      R0,[SP, #+16]
   \   0000009E   0x2080             MOVS     R0,#+128
   \   000000A0   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   000000A2   0x9005             STR      R0,[SP, #+20]
   \   000000A4   0x9804             LDR      R0,[SP, #+16]
   \   000000A6   0x2180             MOVS     R1,#+128
   \   000000A8   0x0089             LSLS     R1,R1,#+2        ;; #+512
   \   000000AA   0x4288             CMP      R0,R1
   \   000000AC   0xD201             BCS      ??partition_absolute_6
   \   000000AE   0xA805             ADD      R0,SP,#+20
   \   000000B0   0xE000             B        ??partition_absolute_7
   \                     ??partition_absolute_6: (+1)
   \   000000B2   0xA804             ADD      R0,SP,#+16
   \                     ??partition_absolute_7: (+1)
   \   000000B4   0x6806             LDR      R6,[R0, #+0]
    100              uint32_t lba_offset = offset / sector;
   \   000000B6   0xA80E             ADD      R0,SP,#+56
   \   000000B8   0xC803             LDM      R0,{R0,R1}
   \   000000BA   0x0032             MOVS     R2,R6
   \   000000BC   0x2300             MOVS     R3,#+0
   \   000000BE   0x.... 0x....      BL       __aeabi_uldivmod
   \   000000C2   0x9000             STR      R0,[SP, #+0]
    101              uint32_t lba_size = size / sector;
   \   000000C4   0xA810             ADD      R0,SP,#+64
   \   000000C6   0xC803             LDM      R0,{R0,R1}
   \   000000C8   0x0032             MOVS     R2,R6
   \   000000CA   0x2300             MOVS     R3,#+0
   \   000000CC   0x.... 0x....      BL       __aeabi_uldivmod
   \   000000D0   0x0006             MOVS     R6,R0
    102              table->entries[part-1].lba_offset = tole32(lba_offset);
   \   000000D2   0x9800             LDR      R0,[SP, #+0]
   \   000000D4   0x4669             MOV      R1,SP
   \   000000D6   0x7108             STRB     R0,[R1, #+4]
   \   000000D8   0x9800             LDR      R0,[SP, #+0]
   \   000000DA   0x0A00             LSRS     R0,R0,#+8
   \   000000DC   0xA901             ADD      R1,SP,#+4
   \   000000DE   0x7048             STRB     R0,[R1, #+1]
   \   000000E0   0x9800             LDR      R0,[SP, #+0]
   \   000000E2   0x0C00             LSRS     R0,R0,#+16
   \   000000E4   0x7088             STRB     R0,[R1, #+2]
   \   000000E6   0x9800             LDR      R0,[SP, #+0]
   \   000000E8   0x0E00             LSRS     R0,R0,#+24
   \   000000EA   0x70C8             STRB     R0,[R1, #+3]
   \   000000EC   0x0021             MOVS     R1,R4
   \   000000EE   0x3908             SUBS     R1,R1,#+8
   \   000000F0   0x9801             LDR      R0,[SP, #+4]
   \   000000F2   0x.... 0x....      BL       __aeabi_uwrite4
    103              table->entries[part-1].lba_size = tole32(lba_size);
   \   000000F6   0x4669             MOV      R1,SP
   \   000000F8   0x710E             STRB     R6,[R1, #+4]
   \   000000FA   0x0A30             LSRS     R0,R6,#+8
   \   000000FC   0xA901             ADD      R1,SP,#+4
   \   000000FE   0x7048             STRB     R0,[R1, #+1]
   \   00000100   0x0C30             LSRS     R0,R6,#+16
   \   00000102   0x7088             STRB     R0,[R1, #+2]
   \   00000104   0x0E30             LSRS     R0,R6,#+24
   \   00000106   0x70C8             STRB     R0,[R1, #+3]
   \   00000108   0x1F21             SUBS     R1,R4,#+4
   \   0000010A   0x9801             LDR      R0,[SP, #+4]
   \   0000010C   0x.... 0x....      BL       __aeabi_uwrite4
    104          
    105              // chs dimensions
    106              tochs(lba_offset,            table->entries[part-1].chs_start);
   \   00000110   0x0021             MOVS     R1,R4
   \   00000112   0x390F             SUBS     R1,R1,#+15
   \   00000114   0x9800             LDR      R0,[SP, #+0]
   \   00000116   0x.... 0x....      BL       _Z5tochsjPh
    107              tochs(lba_offset+lba_size-1, table->entries[part-1].chs_stop);
   \   0000011A   0x3C0B             SUBS     R4,R4,#+11
   \   0000011C   0x0021             MOVS     R1,R4
   \   0000011E   0x9800             LDR      R0,[SP, #+0]
   \   00000120   0x1980             ADDS     R0,R0,R6
   \   00000122   0x1E40             SUBS     R0,R0,#+1
   \   00000124   0x.... 0x....      BL       _Z5tochsjPh
    108          
    109              // Write out MBR
    110              err = bd->erase(0, bd->get_erase_size());
   \   00000128   0x9807             LDR      R0,[SP, #+28]
   \   0000012A   0x6801             LDR      R1,[R0, #+0]
   \   0000012C   0x6A89             LDR      R1,[R1, #+40]
   \   0000012E   0x4788             BLX      R1
   \   00000130   0x9000             STR      R0,[SP, #+0]
   \   00000132   0x9101             STR      R1,[SP, #+4]
   \   00000134   0x2200             MOVS     R2,#+0
   \   00000136   0x2300             MOVS     R3,#+0
   \   00000138   0x9807             LDR      R0,[SP, #+28]
   \   0000013A   0x6801             LDR      R1,[R0, #+0]
   \   0000013C   0x6989             LDR      R1,[R1, #+24]
   \   0000013E   0x4788             BLX      R1
   \   00000140   0x0004             MOVS     R4,R0
    111              if (err) {
   \   00000142   0xD10E             BNE      ??partition_absolute_8
    112                  delete[] buffer;
    113                  return err;
    114              }
    115          
    116              err = bd->program(buffer, 512-buffer_size, buffer_size);
   \   00000144   0x9803             LDR      R0,[SP, #+12]
   \   00000146   0x2100             MOVS     R1,#+0
   \   00000148   0x9000             STR      R0,[SP, #+0]
   \   0000014A   0x9101             STR      R1,[SP, #+4]
   \   0000014C   0x2080             MOVS     R0,#+128
   \   0000014E   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   00000150   0x9903             LDR      R1,[SP, #+12]
   \   00000152   0x1A42             SUBS     R2,R0,R1
   \   00000154   0x2300             MOVS     R3,#+0
   \   00000156   0x9902             LDR      R1,[SP, #+8]
   \   00000158   0x9807             LDR      R0,[SP, #+28]
   \   0000015A   0x6804             LDR      R4,[R0, #+0]
   \   0000015C   0x6964             LDR      R4,[R4, #+20]
   \   0000015E   0x47A0             BLX      R4
   \   00000160   0x0004             MOVS     R4,R0
    117              delete[] buffer;
   \                     ??partition_absolute_8: (+1)
   \   00000162   0x9802             LDR      R0,[SP, #+8]
   \                     ??partition_absolute_2: (+1)
   \   00000164   0x.... 0x....      BL       _ZdaPv
    118              return err;
   \   00000168   0x0020             MOVS     R0,R4
   \   0000016A   0xB00A             ADD      SP,SP,#+40
   \   0000016C   0xBD70             POP      {R4-R6,PC}       ;; return
    119          }
    120          

   \                                 In section .text, align 2, keep-with-next
    121          int MBRBlockDevice::partition(BlockDevice *bd, int part, uint8_t type, bd_addr_t start)
    122          {
   \                     _ZN14MBRBlockDevice9partitionEP11BlockDeviceihy: (+1)
   \   00000000   0xB5F7             PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
    123              int err = bd->init();
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x6889             LDR      R1,[R1, #+8]
   \   00000008   0x4788             BLX      R1
    124              if (err) {
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD13D             BNE      ??partition_0
    125                  return err;
   \   0000000E   0xA80C             ADD      R0,SP,#+48
   \   00000010   0xC803             LDM      R0,{R0,R1}
    126              }
    127          
    128              // Calculate dimensions
    129              bd_size_t offset = ((int64_t)start < 0) ? -start : start;
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xDA04             BGE      ??partition_1
   \   00000016   0x2400             MOVS     R4,#+0
   \   00000018   0x2500             MOVS     R5,#+0
   \   0000001A   0x1A24             SUBS     R4,R4,R0
   \   0000001C   0x418D             SBCS     R5,R5,R1
   \   0000001E   0xE001             B        ??partition_2
   \                     ??partition_1: (+1)
   \   00000020   0x0004             MOVS     R4,R0
   \   00000022   0x000D             MOVS     R5,R1
    130              bd_size_t size = bd->size();
   \                     ??partition_2: (+1)
   \   00000024   0x9804             LDR      R0,[SP, #+16]
   \   00000026   0x6801             LDR      R1,[R0, #+0]
   \   00000028   0x6AC9             LDR      R1,[R1, #+44]
   \   0000002A   0x4788             BLX      R1
   \   0000002C   0x0006             MOVS     R6,R0
   \   0000002E   0x000F             MOVS     R7,R1
    131          
    132              if (offset < 512) {
   \   00000030   0x2080             MOVS     R0,#+128
   \   00000032   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x428D             CMP      R5,R1
   \   00000038   0xD815             BHI      ??partition_3
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD213             BCS      ??partition_3
    133                  offset += std::max<uint32_t>(bd->get_erase_size(), 512);
   \   0000003E   0x9804             LDR      R0,[SP, #+16]
   \   00000040   0x6801             LDR      R1,[R0, #+0]
   \   00000042   0x6A89             LDR      R1,[R1, #+40]
   \   00000044   0x4788             BLX      R1
   \   00000046   0x9000             STR      R0,[SP, #+0]
   \   00000048   0x2080             MOVS     R0,#+128
   \   0000004A   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   0000004C   0x9001             STR      R0,[SP, #+4]
   \   0000004E   0x9900             LDR      R1,[SP, #+0]
   \   00000050   0x4281             CMP      R1,R0
   \   00000052   0xD201             BCS      ??partition_4
   \   00000054   0xA801             ADD      R0,SP,#+4
   \   00000056   0xE000             B        ??partition_5
   \                     ??partition_4: (+1)
   \   00000058   0x4668             MOV      R0,SP
    134              }
   \                     ??partition_5: (+1)
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x2100             MOVS     R1,#+0
   \   0000005E   0x1900             ADDS     R0,R0,R4
   \   00000060   0x4169             ADCS     R1,R1,R5
   \   00000062   0x0004             MOVS     R4,R0
   \   00000064   0x000D             MOVS     R5,R1
    135          
    136              size -= offset;
    137          
    138              err = partition_absolute(bd, part, type, offset, size);
   \                     ??partition_3: (+1)
   \   00000066   0x1B36             SUBS     R6,R6,R4
   \   00000068   0x41AF             SBCS     R7,R7,R5
   \   0000006A   0x9602             STR      R6,[SP, #+8]
   \   0000006C   0x9703             STR      R7,[SP, #+12]
   \   0000006E   0x9400             STR      R4,[SP, #+0]
   \   00000070   0x9501             STR      R5,[SP, #+4]
   \   00000072   0x4668             MOV      R0,SP
   \   00000074   0x7E02             LDRB     R2,[R0, #+24]
   \   00000076   0x9905             LDR      R1,[SP, #+20]
   \   00000078   0x9804             LDR      R0,[SP, #+16]
   \   0000007A   0x.... 0x....      BL       _Z18partition_absoluteP11BlockDeviceihyy
    139              if (err) {
   \   0000007E   0x2800             CMP      R0,#+0
   \   00000080   0xD103             BNE      ??partition_0
    140                  return err;
    141              }
    142          
    143              err = bd->deinit();
   \   00000082   0x9804             LDR      R0,[SP, #+16]
   \   00000084   0x6801             LDR      R1,[R0, #+0]
   \   00000086   0x68C9             LDR      R1,[R1, #+12]
   \   00000088   0x4788             BLX      R1
    144              if (err) {
   \                     ??partition_0: (+1)
   \   0000008A   0xB007             ADD      SP,SP,#+28
   \   0000008C   0xBDF0             POP      {R4-R7,PC}       ;; return
    145                  return err;
    146              }
    147          
    148              return 0;
    149          }
    150          

   \                                 In section .text, align 2, keep-with-next
    151          int MBRBlockDevice::partition(BlockDevice *bd, int part, uint8_t type,
    152                  bd_addr_t start, bd_addr_t stop)
    153          {
   \                     _ZN14MBRBlockDevice9partitionEP11BlockDeviceihyy: (+1)
   \   00000000   0xB5F7             PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
    154              int err = bd->init();
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x6889             LDR      R1,[R1, #+8]
   \   00000008   0x4788             BLX      R1
    155              if (err) {
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD142             BNE      ??partition_6
    156                  return err;
   \   0000000E   0xA80C             ADD      R0,SP,#+48
   \   00000010   0xC803             LDM      R0,{R0,R1}
    157              }
    158          
    159              // Calculate dimensions
    160              bd_size_t offset = ((int64_t)start < 0) ? -start : start;
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xDA04             BGE      ??partition_7
   \   00000016   0x2400             MOVS     R4,#+0
   \   00000018   0x2500             MOVS     R5,#+0
   \   0000001A   0x1A24             SUBS     R4,R4,R0
   \   0000001C   0x418D             SBCS     R5,R5,R1
   \   0000001E   0xE001             B        ??partition_8
   \                     ??partition_7: (+1)
   \   00000020   0x0004             MOVS     R4,R0
   \   00000022   0x000D             MOVS     R5,R1
   \                     ??partition_8: (+1)
   \   00000024   0xA80E             ADD      R0,SP,#+56
   \   00000026   0xC803             LDM      R0,{R0,R1}
    161              bd_size_t size = ((int64_t)stop < 0) ? -stop : stop;
   \   00000028   0x2900             CMP      R1,#+0
   \   0000002A   0xDA04             BGE      ??partition_9
   \   0000002C   0x2600             MOVS     R6,#+0
   \   0000002E   0x2700             MOVS     R7,#+0
   \   00000030   0x1A36             SUBS     R6,R6,R0
   \   00000032   0x418F             SBCS     R7,R7,R1
   \   00000034   0xE001             B        ??partition_10
   \                     ??partition_9: (+1)
   \   00000036   0x0006             MOVS     R6,R0
   \   00000038   0x000F             MOVS     R7,R1
    162          
    163              if (offset < 512) {
   \                     ??partition_10: (+1)
   \   0000003A   0x2080             MOVS     R0,#+128
   \   0000003C   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0x428D             CMP      R5,R1
   \   00000042   0xD815             BHI      ??partition_11
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD213             BCS      ??partition_11
    164                  offset += std::max<uint32_t>(bd->get_erase_size(), 512);
   \   00000048   0x9804             LDR      R0,[SP, #+16]
   \   0000004A   0x6801             LDR      R1,[R0, #+0]
   \   0000004C   0x6A89             LDR      R1,[R1, #+40]
   \   0000004E   0x4788             BLX      R1
   \   00000050   0x9000             STR      R0,[SP, #+0]
   \   00000052   0x2080             MOVS     R0,#+128
   \   00000054   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   00000056   0x9001             STR      R0,[SP, #+4]
   \   00000058   0x9900             LDR      R1,[SP, #+0]
   \   0000005A   0x4281             CMP      R1,R0
   \   0000005C   0xD201             BCS      ??partition_12
   \   0000005E   0xA801             ADD      R0,SP,#+4
   \   00000060   0xE000             B        ??partition_13
   \                     ??partition_12: (+1)
   \   00000062   0x4668             MOV      R0,SP
    165              }
   \                     ??partition_13: (+1)
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0x2100             MOVS     R1,#+0
   \   00000068   0x1900             ADDS     R0,R0,R4
   \   0000006A   0x4169             ADCS     R1,R1,R5
   \   0000006C   0x0004             MOVS     R4,R0
   \   0000006E   0x000D             MOVS     R5,R1
    166          
    167              size -= offset;
    168          
    169              err = partition_absolute(bd, part, type, offset, size);
   \                     ??partition_11: (+1)
   \   00000070   0x1B36             SUBS     R6,R6,R4
   \   00000072   0x41AF             SBCS     R7,R7,R5
   \   00000074   0x9602             STR      R6,[SP, #+8]
   \   00000076   0x9703             STR      R7,[SP, #+12]
   \   00000078   0x9400             STR      R4,[SP, #+0]
   \   0000007A   0x9501             STR      R5,[SP, #+4]
   \   0000007C   0x4668             MOV      R0,SP
   \   0000007E   0x7E02             LDRB     R2,[R0, #+24]
   \   00000080   0x9905             LDR      R1,[SP, #+20]
   \   00000082   0x9804             LDR      R0,[SP, #+16]
   \   00000084   0x.... 0x....      BL       _Z18partition_absoluteP11BlockDeviceihyy
    170              if (err) {
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD103             BNE      ??partition_6
    171                  return err;
    172              }
    173          
    174              err = bd->deinit();
   \   0000008C   0x9804             LDR      R0,[SP, #+16]
   \   0000008E   0x6801             LDR      R1,[R0, #+0]
   \   00000090   0x68C9             LDR      R1,[R1, #+12]
   \   00000092   0x4788             BLX      R1
    175              if (err) {
   \                     ??partition_6: (+1)
   \   00000094   0xB007             ADD      SP,SP,#+28
   \   00000096   0xBDF0             POP      {R4-R7,PC}       ;; return
    176                  return err;
    177              }
    178          
    179              return 0;
    180          }
    181          

   \                                 In section .text, align 4, keep-with-next
    182          MBRBlockDevice::MBRBlockDevice(BlockDevice *bd, int part)
   \                     _ZN14MBRBlockDeviceC1EP11BlockDevicei: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xBF00             Nop      
   \   00000004                      REQUIRE ?Subroutine0
   \   00000004                      ;; // Fall through to label ?Subroutine0

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x0004             MOVS     R4,R0
   \   00000002   0x....             LDR      R0,??DataTable10
   \   00000004   0x6020             STR      R0,[R4, #+0]
    183              : _bd(bd), _part(part)
   \   00000006   0x6061             STR      R1,[R4, #+4]
   \   00000008   0x7662             STRB     R2,[R4, #+25]
    184          {
    185              MBED_ASSERT(_part >= 1 && _part <= 4);
   \   0000000A   0x7E60             LDRB     R0,[R4, #+25]
   \   0000000C   0x0001             MOVS     R1,R0
   \   0000000E   0xD001             BEQ      ??Subroutine0_0
   \   00000010   0x2805             CMP      R0,#+5
   \   00000012   0xDB04             BLT      ??Subroutine0_1
   \                     ??Subroutine0_0: (+1)
   \   00000014   0x22B9             MOVS     R2,#+185
   \   00000016   0x....             LDR      R1,??DataTable9_2
   \   00000018   0x....             ADR.N    R0,?_2
   \   0000001A   0x.... 0x....      BL       mbed_assert_internal
    186          }
   \                     ??Subroutine0_1: (+1)
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
    187          

   \                                 In section .text, align 4, keep-with-next
    188          int MBRBlockDevice::init()
    189          {
   \                     _ZN14MBRBlockDevice4initEv: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   \   00000004   0x0004             MOVS     R4,R0
    190              int err = _bd->init();
   \   00000006   0x6860             LDR      R0,[R4, #+4]
   \   00000008   0x6801             LDR      R1,[R0, #+0]
   \   0000000A   0x6889             LDR      R1,[R1, #+8]
   \   0000000C   0x4788             BLX      R1
   \   0000000E   0x0005             MOVS     R5,R0
    191              if (err) {
   \   00000010   0xD000             BEQ      .+4
   \   00000012   0xE0A2             B        ??init_0
    192                  return err;
    193              }
    194          
    195              // Allocate smallest buffer necessary to write MBR
    196              uint32_t buffer_size = std::max<uint32_t>(_bd->get_read_size(), sizeof(struct mbr_table));
   \   00000014   0x6860             LDR      R0,[R4, #+4]
   \   00000016   0x6801             LDR      R1,[R0, #+0]
   \   00000018   0x6A09             LDR      R1,[R1, #+32]
   \   0000001A   0x4788             BLX      R1
   \   0000001C   0x9002             STR      R0,[SP, #+8]
   \   0000001E   0x2042             MOVS     R0,#+66
   \   00000020   0x9003             STR      R0,[SP, #+12]
   \   00000022   0x9802             LDR      R0,[SP, #+8]
   \   00000024   0x2842             CMP      R0,#+66
   \   00000026   0xD201             BCS      ??init_1
   \   00000028   0xA803             ADD      R0,SP,#+12
   \   0000002A   0xE000             B        ??init_2
   \                     ??init_1: (+1)
   \   0000002C   0xA802             ADD      R0,SP,#+8
   \                     ??init_2: (+1)
   \   0000002E   0x6806             LDR      R6,[R0, #+0]
    197              uint8_t *buffer = new uint8_t[buffer_size];
   \   00000030   0x0030             MOVS     R0,R6
   \   00000032   0x.... 0x....      BL       _Znaj
   \   00000036   0x0007             MOVS     R7,R0
    198          
    199              err = _bd->read(buffer, 512-buffer_size, buffer_size);
   \   00000038   0x6865             LDR      R5,[R4, #+4]
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0x9600             STR      R6,[SP, #+0]
   \   0000003E   0x9101             STR      R1,[SP, #+4]
   \   00000040   0x2080             MOVS     R0,#+128
   \   00000042   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   00000044   0x1B82             SUBS     R2,R0,R6
   \   00000046   0x2300             MOVS     R3,#+0
   \   00000048   0x0039             MOVS     R1,R7
   \   0000004A   0x0028             MOVS     R0,R5
   \   0000004C   0x682D             LDR      R5,[R5, #+0]
   \   0000004E   0x692D             LDR      R5,[R5, #+16]
   \   00000050   0x47A8             BLX      R5
   \   00000052   0x0005             MOVS     R5,R0
    200              if (err) {
   \   00000054   0xD004             BEQ      ??init_3
    201                  delete[] buffer;
   \   00000056   0x0038             MOVS     R0,R7
   \   00000058   0x.... 0x....      BL       _ZdaPv
    202                  return err;
   \   0000005C   0x0028             MOVS     R0,R5
   \   0000005E   0xE07C             B        ??init_0
    203              }
    204          
    205              // Check for valid table
    206              struct mbr_table *table = reinterpret_cast<struct mbr_table*>(
    207                      &buffer[buffer_size - sizeof(struct mbr_table)]);
   \                     ??init_3: (+1)
   \   00000060   0x19BD             ADDS     R5,R7,R6
   \   00000062   0x3D42             SUBS     R5,R5,#+66
    208              if (table->signature[0] != 0x55 || table->signature[1] != 0xaa) {
   \   00000064   0x0028             MOVS     R0,R5
   \   00000066   0x3040             ADDS     R0,R0,#+64
   \   00000068   0x7801             LDRB     R1,[R0, #+0]
   \   0000006A   0x2955             CMP      R1,#+85
   \   0000006C   0xD102             BNE      ??init_4
   \   0000006E   0x7840             LDRB     R0,[R0, #+1]
   \   00000070   0x28AA             CMP      R0,#+170
   \   00000072   0xD004             BEQ      ??init_5
    209                  delete[] buffer;
   \                     ??init_4: (+1)
   \   00000074   0x0038             MOVS     R0,R7
   \   00000076   0x.... 0x....      BL       _ZdaPv
    210                  return BD_ERROR_INVALID_MBR;
   \   0000007A   0x....             LDR      R0,??DataTable10_1  ;; 0xfffff3e3
   \   0000007C   0xE06D             B        ??init_0
    211              }
    212          
    213              // Check for valid entry
    214              if (table->entries[_part-1].type == 0x00) {
   \                     ??init_5: (+1)
   \   0000007E   0x7E60             LDRB     R0,[R4, #+25]
   \   00000080   0x0100             LSLS     R0,R0,#+4
   \   00000082   0x1828             ADDS     R0,R5,R0
   \   00000084   0x380C             SUBS     R0,R0,#+12
   \   00000086   0x7800             LDRB     R0,[R0, #+0]
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD104             BNE      ??init_6
    215                  delete[] buffer;
   \   0000008C   0x0038             MOVS     R0,R7
   \   0000008E   0x.... 0x....      BL       _ZdaPv
    216                  return BD_ERROR_INVALID_PARTITION;
   \   00000092   0x....             LDR      R0,??DataTable10_2  ;; 0xfffff3e2
   \   00000094   0xE061             B        ??init_0
    217              }
    218          
    219              // Get partition attributes
    220              bd_size_t sector = std::max<uint32_t>(_bd->get_erase_size(), 512);
   \                     ??init_6: (+1)
   \   00000096   0x6860             LDR      R0,[R4, #+4]
   \   00000098   0x6801             LDR      R1,[R0, #+0]
   \   0000009A   0x6A89             LDR      R1,[R1, #+40]
   \   0000009C   0x4788             BLX      R1
   \   0000009E   0x9002             STR      R0,[SP, #+8]
   \   000000A0   0x2080             MOVS     R0,#+128
   \   000000A2   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   000000A4   0x9003             STR      R0,[SP, #+12]
   \   000000A6   0x9802             LDR      R0,[SP, #+8]
   \   000000A8   0x2180             MOVS     R1,#+128
   \   000000AA   0x0089             LSLS     R1,R1,#+2        ;; #+512
   \   000000AC   0x4288             CMP      R0,R1
   \   000000AE   0xD201             BCS      ??init_7
   \   000000B0   0xA803             ADD      R0,SP,#+12
   \   000000B2   0xE000             B        ??init_8
   \                     ??init_7: (+1)
   \   000000B4   0xA802             ADD      R0,SP,#+8
   \                     ??init_8: (+1)
   \   000000B6   0x6800             LDR      R0,[R0, #+0]
   \   000000B8   0x2100             MOVS     R1,#+0
   \   000000BA   0xAA06             ADD      R2,SP,#+24
   \   000000BC   0xC203             STM      R2!,{R0,R1}
    221              _type = table->entries[_part-1].type;
   \   000000BE   0x7E60             LDRB     R0,[R4, #+25]
   \   000000C0   0x0100             LSLS     R0,R0,#+4
   \   000000C2   0x1828             ADDS     R0,R5,R0
   \   000000C4   0x380C             SUBS     R0,R0,#+12
   \   000000C6   0x7800             LDRB     R0,[R0, #+0]
   \   000000C8   0x7620             STRB     R0,[R4, #+24]
    222              _offset = fromle32(table->entries[_part-1].lba_offset) * sector;
   \   000000CA   0x7E60             LDRB     R0,[R4, #+25]
   \   000000CC   0x0100             LSLS     R0,R0,#+4
   \   000000CE   0x1828             ADDS     R0,R5,R0
   \   000000D0   0x3808             SUBS     R0,R0,#+8
   \   000000D2   0x.... 0x....      BL       __aeabi_uread4
   \   000000D6   0x466A             MOV      R2,SP
   \   000000D8   0x7010             STRB     R0,[R2, #+0]
   \   000000DA   0x0A01             LSRS     R1,R0,#+8
   \   000000DC   0x7051             STRB     R1,[R2, #+1]
   \   000000DE   0x0C01             LSRS     R1,R0,#+16
   \   000000E0   0x7091             STRB     R1,[R2, #+2]
   \   000000E2   0x0E00             LSRS     R0,R0,#+24
   \   000000E4   0x4669             MOV      R1,SP
   \   000000E6   0x70C8             STRB     R0,[R1, #+3]
   \   000000E8   0x9800             LDR      R0,[SP, #+0]
   \   000000EA   0x2100             MOVS     R1,#+0
   \   000000EC   0xAA06             ADD      R2,SP,#+24
   \   000000EE   0xCA0C             LDM      R2,{R2,R3}
   \   000000F0   0x.... 0x....      BL       __aeabi_lmul
   \   000000F4   0xAA04             ADD      R2,SP,#+16
   \   000000F6   0xC203             STM      R2!,{R0,R1}
   \   000000F8   0xA804             ADD      R0,SP,#+16
   \   000000FA   0xC803             LDM      R0,{R0,R1}
   \   000000FC   0x0022             MOVS     R2,R4
   \   000000FE   0x3208             ADDS     R2,R2,#+8
   \   00000100   0xC203             STM      R2!,{R0,R1}
    223              _size   = fromle32(table->entries[_part-1].lba_size)   * sector;
   \   00000102   0x7E60             LDRB     R0,[R4, #+25]
   \   00000104   0x0100             LSLS     R0,R0,#+4
   \   00000106   0x1828             ADDS     R0,R5,R0
   \   00000108   0x1F00             SUBS     R0,R0,#+4
   \   0000010A   0x.... 0x....      BL       __aeabi_uread4
   \   0000010E   0x466A             MOV      R2,SP
   \   00000110   0x7010             STRB     R0,[R2, #+0]
   \   00000112   0x0A01             LSRS     R1,R0,#+8
   \   00000114   0x7051             STRB     R1,[R2, #+1]
   \   00000116   0x0C01             LSRS     R1,R0,#+16
   \   00000118   0x7091             STRB     R1,[R2, #+2]
   \   0000011A   0x0E00             LSRS     R0,R0,#+24
   \   0000011C   0x4669             MOV      R1,SP
   \   0000011E   0x70C8             STRB     R0,[R1, #+3]
   \   00000120   0x9800             LDR      R0,[SP, #+0]
   \   00000122   0x2100             MOVS     R1,#+0
   \   00000124   0xAA06             ADD      R2,SP,#+24
   \   00000126   0xCA0C             LDM      R2,{R2,R3}
   \   00000128   0x.... 0x....      BL       __aeabi_lmul
   \   0000012C   0x0022             MOVS     R2,R4
   \   0000012E   0x3210             ADDS     R2,R2,#+16
   \   00000130   0xC203             STM      R2!,{R0,R1}
    224          
    225              // Check that block addresses are valid
    226              MBED_ASSERT(_bd->is_valid_erase(_offset, _size));
   \   00000132   0x9000             STR      R0,[SP, #+0]
   \   00000134   0x9101             STR      R1,[SP, #+4]
   \   00000136   0xA804             ADD      R0,SP,#+16
   \   00000138   0xC80C             LDM      R0!,{R2,R3}
   \   0000013A   0x6860             LDR      R0,[R4, #+4]
   \   0000013C   0x.... 0x....      BL       _ZNK11BlockDevice14is_valid_eraseEyy
   \   00000140   0x2800             CMP      R0,#+0
   \   00000142   0xD106             BNE      ??init_9
   \   00000144   0x22E2             MOVS     R2,#+226
   \   00000146   0xBF00             Nop      
   \   00000148   0x....             ADR.N    R1,?_1
   \   0000014A   0xBF00             Nop      
   \   0000014C   0x....             ADR.N    R0,?_3
   \   0000014E   0x.... 0x....      BL       mbed_assert_internal
    227          
    228              delete[] buffer;
   \                     ??init_9: (+1)
   \   00000152   0x0038             MOVS     R0,R7
   \   00000154   0x.... 0x....      BL       _ZdaPv
    229              return 0;
   \   00000158   0x2000             MOVS     R0,#+0
   \                     ??init_0: (+1)
   \   0000015A   0xB009             ADD      SP,SP,#+36
   \   0000015C   0xBDF0             POP      {R4-R7,PC}       ;; return
    230          }
    231          

   \                                 In section .text, align 2, keep-with-next
    232          int MBRBlockDevice::deinit()
    233          {
   \                     _ZN14MBRBlockDevice6deinitEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    234              return _bd->deinit();
   \   00000002   0x6840             LDR      R0,[R0, #+4]
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x68C9             LDR      R1,[R1, #+12]
   \   00000008   0x4788             BLX      R1
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
    235          }
    236          

   \                                 In section .text, align 4, keep-with-next
    237          int MBRBlockDevice::read(void *b, bd_addr_t addr, bd_size_t size)
    238          {
   \                     _ZN14MBRBlockDevice4readEPvyy: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0xB40F             PUSH     {R0-R3}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0xA80A             ADD      R0,SP,#+40
   \   0000000A   0xC8C0             LDM      R0!,{R6,R7}
    239              MBED_ASSERT(is_valid_read(addr, size));
   \   0000000C   0xA802             ADD      R0,SP,#+8
   \   0000000E   0xC803             LDM      R0,{R0,R1}
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x9101             STR      R1,[SP, #+4]
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x6821             LDR      R1,[R4, #+0]
   \   00000018   0x6A09             LDR      R1,[R1, #+32]
   \   0000001A   0x4788             BLX      R1
   \   0000001C   0x0002             MOVS     R2,R0
   \   0000001E   0x000B             MOVS     R3,R1
   \   00000020   0x9800             LDR      R0,[SP, #+0]
   \   00000022   0x9901             LDR      R1,[SP, #+4]
   \   00000024   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000028   0x2B00             CMP      R3,#+0
   \   0000002A   0xD11E             BNE      ??read_0
   \   0000002C   0x2A00             CMP      R2,#+0
   \   0000002E   0xD11C             BNE      ??read_0
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0x6821             LDR      R1,[R4, #+0]
   \   00000034   0x6A09             LDR      R1,[R1, #+32]
   \   00000036   0x4788             BLX      R1
   \   00000038   0x0002             MOVS     R2,R0
   \   0000003A   0x000B             MOVS     R3,R1
   \   0000003C   0x0030             MOVS     R0,R6
   \   0000003E   0x0039             MOVS     R1,R7
   \   00000040   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000044   0x2B00             CMP      R3,#+0
   \   00000046   0xD110             BNE      ??read_0
   \   00000048   0x2A00             CMP      R2,#+0
   \   0000004A   0xD10E             BNE      ??read_0
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0x6821             LDR      R1,[R4, #+0]
   \   00000050   0x6AC9             LDR      R1,[R1, #+44]
   \   00000052   0x4788             BLX      R1
   \   00000054   0x0002             MOVS     R2,R0
   \   00000056   0x000B             MOVS     R3,R1
   \   00000058   0xA802             ADD      R0,SP,#+8
   \   0000005A   0xC803             LDM      R0,{R0,R1}
   \   0000005C   0x1980             ADDS     R0,R0,R6
   \   0000005E   0x4179             ADCS     R1,R1,R7
   \   00000060   0x428B             CMP      R3,R1
   \   00000062   0xD808             BHI      ??read_1
   \   00000064   0xD301             BCC      ??read_0
   \   00000066   0x4282             CMP      R2,R0
   \   00000068   0xD205             BCS      ??read_1
   \                     ??read_0: (+1)
   \   0000006A   0x22EF             MOVS     R2,#+239
   \   0000006C   0x....             ADR.N    R1,?_1
   \   0000006E   0xBF00             Nop      
   \   00000070   0x....             ADR.N    R0,?_4
   \   00000072   0x.... 0x....      BL       mbed_assert_internal
    240              return _bd->read(b, addr + _offset, size);
   \                     ??read_1: (+1)
   \   00000076   0x6860             LDR      R0,[R4, #+4]
   \   00000078   0x9600             STR      R6,[SP, #+0]
   \   0000007A   0x9701             STR      R7,[SP, #+4]
   \   0000007C   0xA902             ADD      R1,SP,#+8
   \   0000007E   0xC90C             LDM      R1!,{R2,R3}
   \   00000080   0x0021             MOVS     R1,R4
   \   00000082   0x3108             ADDS     R1,R1,#+8
   \   00000084   0xC9C0             LDM      R1!,{R6,R7}
   \   00000086   0x18B6             ADDS     R6,R6,R2
   \   00000088   0x415F             ADCS     R7,R7,R3
   \   0000008A   0x0032             MOVS     R2,R6
   \   0000008C   0x003B             MOVS     R3,R7
   \   0000008E   0x0029             MOVS     R1,R5
   \   00000090   0x6804             LDR      R4,[R0, #+0]
   \   00000092   0x6924             LDR      R4,[R4, #+16]
   \   00000094   0x47A0             BLX      R4
   \   00000096   0xB005             ADD      SP,SP,#+20
   \   00000098   0xBDF0             POP      {R4-R7,PC}       ;; return
    241          }
    242          

   \                                 In section .text, align 4, keep-with-next
    243          int MBRBlockDevice::program(const void *b, bd_addr_t addr, bd_size_t size)
    244          {
   \                     _ZN14MBRBlockDevice7programEPKvyy: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0xB40F             PUSH     {R0-R3}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0xA80A             ADD      R0,SP,#+40
   \   0000000A   0xC8C0             LDM      R0!,{R6,R7}
    245              MBED_ASSERT(is_valid_program(addr, size));
   \   0000000C   0xA802             ADD      R0,SP,#+8
   \   0000000E   0xC803             LDM      R0,{R0,R1}
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x9101             STR      R1,[SP, #+4]
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x6821             LDR      R1,[R4, #+0]
   \   00000018   0x6A49             LDR      R1,[R1, #+36]
   \   0000001A   0x4788             BLX      R1
   \   0000001C   0x0002             MOVS     R2,R0
   \   0000001E   0x000B             MOVS     R3,R1
   \   00000020   0x9800             LDR      R0,[SP, #+0]
   \   00000022   0x9901             LDR      R1,[SP, #+4]
   \   00000024   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000028   0x2B00             CMP      R3,#+0
   \   0000002A   0xD11E             BNE      ??program_0
   \   0000002C   0x2A00             CMP      R2,#+0
   \   0000002E   0xD11C             BNE      ??program_0
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0x6821             LDR      R1,[R4, #+0]
   \   00000034   0x6A49             LDR      R1,[R1, #+36]
   \   00000036   0x4788             BLX      R1
   \   00000038   0x0002             MOVS     R2,R0
   \   0000003A   0x000B             MOVS     R3,R1
   \   0000003C   0x0030             MOVS     R0,R6
   \   0000003E   0x0039             MOVS     R1,R7
   \   00000040   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000044   0x2B00             CMP      R3,#+0
   \   00000046   0xD110             BNE      ??program_0
   \   00000048   0x2A00             CMP      R2,#+0
   \   0000004A   0xD10E             BNE      ??program_0
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0x6821             LDR      R1,[R4, #+0]
   \   00000050   0x6AC9             LDR      R1,[R1, #+44]
   \   00000052   0x4788             BLX      R1
   \   00000054   0x0002             MOVS     R2,R0
   \   00000056   0x000B             MOVS     R3,R1
   \   00000058   0xA802             ADD      R0,SP,#+8
   \   0000005A   0xC803             LDM      R0,{R0,R1}
   \   0000005C   0x1980             ADDS     R0,R0,R6
   \   0000005E   0x4179             ADCS     R1,R1,R7
   \   00000060   0x428B             CMP      R3,R1
   \   00000062   0xD808             BHI      ??program_1
   \   00000064   0xD301             BCC      ??program_0
   \   00000066   0x4282             CMP      R2,R0
   \   00000068   0xD205             BCS      ??program_1
   \                     ??program_0: (+1)
   \   0000006A   0x22F5             MOVS     R2,#+245
   \   0000006C   0x....             ADR.N    R1,?_1
   \   0000006E   0xBF00             Nop      
   \   00000070   0x....             ADR.N    R0,?_5
   \   00000072   0x.... 0x....      BL       mbed_assert_internal
    246              return _bd->program(b, addr + _offset, size);
   \                     ??program_1: (+1)
   \   00000076   0x6860             LDR      R0,[R4, #+4]
   \   00000078   0x9600             STR      R6,[SP, #+0]
   \   0000007A   0x9701             STR      R7,[SP, #+4]
   \   0000007C   0xA902             ADD      R1,SP,#+8
   \   0000007E   0xC90C             LDM      R1!,{R2,R3}
   \   00000080   0x0021             MOVS     R1,R4
   \   00000082   0x3108             ADDS     R1,R1,#+8
   \   00000084   0xC9C0             LDM      R1!,{R6,R7}
   \   00000086   0x18B6             ADDS     R6,R6,R2
   \   00000088   0x415F             ADCS     R7,R7,R3
   \   0000008A   0x0032             MOVS     R2,R6
   \   0000008C   0x003B             MOVS     R3,R7
   \   0000008E   0x0029             MOVS     R1,R5
   \   00000090   0x6804             LDR      R4,[R0, #+0]
   \   00000092   0x6964             LDR      R4,[R4, #+20]
   \   00000094   0x47A0             BLX      R4
   \   00000096   0xB005             ADD      SP,SP,#+20
   \   00000098   0xBDF0             POP      {R4-R7,PC}       ;; return
    247          }
    248          

   \                                 In section .text, align 4, keep-with-next
    249          int MBRBlockDevice::erase(bd_addr_t addr, bd_size_t size)
    250          {
   \                     _ZN14MBRBlockDevice5eraseEyy: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x0006             MOVS     R6,R0
   \   00000004   0x0014             MOVS     R4,R2
   \   00000006   0x001D             MOVS     R5,R3
    251              MBED_ASSERT(is_valid_erase(addr, size));
   \   00000008   0xA806             ADD      R0,SP,#+24
   \   0000000A   0xC803             LDM      R0,{R0,R1}
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   \   0000000E   0x9101             STR      R1,[SP, #+4]
   \   00000010   0x0030             MOVS     R0,R6
   \   00000012   0x.... 0x....      BL       _ZNK11BlockDevice14is_valid_eraseEyy
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD105             BNE      ??erase_0
   \   0000001A   0x22FB             MOVS     R2,#+251
   \   0000001C   0x....             ADR.N    R1,?_1
   \   0000001E   0xBF00             Nop      
   \   00000020   0x....             ADR.N    R0,?_6
   \   00000022   0x.... 0x....      BL       mbed_assert_internal
    252              return _bd->erase(addr + _offset, size);
   \                     ??erase_0: (+1)
   \   00000026   0x6870             LDR      R0,[R6, #+4]
   \   00000028   0xA906             ADD      R1,SP,#+24
   \   0000002A   0xC90C             LDM      R1!,{R2,R3}
   \   0000002C   0x9200             STR      R2,[SP, #+0]
   \   0000002E   0x9301             STR      R3,[SP, #+4]
   \   00000030   0x0031             MOVS     R1,R6
   \   00000032   0x3108             ADDS     R1,R1,#+8
   \   00000034   0xC90C             LDM      R1!,{R2,R3}
   \   00000036   0x1912             ADDS     R2,R2,R4
   \   00000038   0x416B             ADCS     R3,R3,R5
   \   0000003A   0x6801             LDR      R1,[R0, #+0]
   \   0000003C   0x6989             LDR      R1,[R1, #+24]
   \   0000003E   0x4788             BLX      R1
   \   00000040   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    253          }
    254          

   \                                 In section .text, align 2, keep-with-next
    255          bd_size_t MBRBlockDevice::get_read_size() const
    256          {
   \                     _ZNK14MBRBlockDevice13get_read_sizeEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    257              return _bd->get_read_size();
   \   00000002   0x6840             LDR      R0,[R0, #+4]
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x6A09             LDR      R1,[R1, #+32]
   \   00000008   0x4788             BLX      R1
   \   0000000A   0xBD04             POP      {R2,PC}          ;; return
    258          }
    259          

   \                                 In section .text, align 2, keep-with-next
    260          bd_size_t MBRBlockDevice::get_program_size() const
    261          {
   \                     _ZNK14MBRBlockDevice16get_program_sizeEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    262              return _bd->get_program_size();
   \   00000002   0x6840             LDR      R0,[R0, #+4]
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x6A49             LDR      R1,[R1, #+36]
   \   00000008   0x4788             BLX      R1
   \   0000000A   0xBD04             POP      {R2,PC}          ;; return
    263          }
    264          

   \                                 In section .text, align 2, keep-with-next
    265          bd_size_t MBRBlockDevice::get_erase_size() const
    266          {
   \                     _ZNK14MBRBlockDevice14get_erase_sizeEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    267              return _bd->get_erase_size();
   \   00000002   0x6840             LDR      R0,[R0, #+4]
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x6A89             LDR      R1,[R1, #+40]
   \   00000008   0x4788             BLX      R1
   \   0000000A   0xBD04             POP      {R2,PC}          ;; return
    268          }
    269          

   \                                 In section .text, align 2, keep-with-next
    270          bd_size_t MBRBlockDevice::size() const
    271          {
    272              return _size;
   \                     _ZNK14MBRBlockDevice4sizeEv: (+1)
   \   00000000   0x3010             ADDS     R0,R0,#+16
   \   00000002   0xC803             LDM      R0,{R0,R1}
   \   00000004   0x4770             BX       LR               ;; return
    273          }
    274          

   \                                 In section .text, align 2, keep-with-next
    275          bd_size_t MBRBlockDevice::get_partition_start() const
    276          {
    277              return _offset;
   \                     _ZNK14MBRBlockDevice19get_partition_startEv: (+1)
   \   00000000   0x3008             ADDS     R0,R0,#+8
   \   00000002   0xC803             LDM      R0,{R0,R1}
   \   00000004   0x4770             BX       LR               ;; return
    278          }
    279          

   \                                 In section .text, align 2, keep-with-next
    280          bd_size_t MBRBlockDevice::get_partition_stop() const
    281          {
    282              return _offset+_size;
   \                     _ZNK14MBRBlockDevice18get_partition_stopEv: (+1)
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0x3108             ADDS     R1,R1,#+8
   \   00000004   0xC90C             LDM      R1!,{R2,R3}
   \   00000006   0x3010             ADDS     R0,R0,#+16
   \   00000008   0xC803             LDM      R0,{R0,R1}
   \   0000000A   0x1880             ADDS     R0,R0,R2
   \   0000000C   0x4159             ADCS     R1,R1,R3
   \   0000000E   0x4770             BX       LR               ;; return
    283          }
    284          

   \                                 In section .text, align 2, keep-with-next
    285          uint8_t MBRBlockDevice::get_partition_type() const
    286          {
    287              return _type;
   \                     _ZNK14MBRBlockDevice18get_partition_typeEv: (+1)
   \   00000000   0x7E00             LDRB     R0,[R0, #+24]
   \   00000002   0x4770             BX       LR               ;; return
    288          }
    289          

   \                                 In section .text, align 2, keep-with-next
    290          int MBRBlockDevice::get_partition_number() const
    291          {
    292              return _part;
   \                     _ZNK14MBRBlockDevice20get_partition_numberEv: (+1)
   \   00000000   0x7E40             LDRB     R0,[R0, #+25]
   \   00000002   0x4770             BX       LR               ;; return
    293          }

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp MBRBlockDevice::subobject MBRBlockDevice(BlockDevice *, int)
   \                     _ZN14MBRBlockDeviceC2EP11BlockDevicei: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             B.N      ?Subroutine0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x70 0x61          DC8 "part >= 1 && part <= 4"
   \              0x72 0x74    
   \              0x20 0x3E    
   \              0x3D 0x20    
   \              0x31 0x20    
   \              0x26 0x26    
   \              0x20 0x70    
   \              0x61 0x72    
   \              0x74 0x20    
   \              0x3C 0x3D    
   \              0x20 0x34    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x00FFFFFD         DC32     0xfffffd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x00FFFFFE         DC32     0xfffffe

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x5F 0x70          DC8 "_part >= 1 && _part <= 4"
   \              0x61 0x72    
   \              0x74 0x20    
   \              0x3E 0x3D    
   \              0x20 0x31    
   \              0x20 0x26    
   \              0x26 0x20    
   \              0x5F 0x70    
   \              0x61 0x72    
   \              0x74 0x20    
   \              0x3C 0x3D    
   \              0x20 0x34    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x........         DC32     _ZTV14MBRBlockDevice+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0xFFFFF3E3         DC32     0xfffff3e3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0xFFFFF3E2         DC32     0xfffff3e2

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x2E 0x5C          DC8 2EH, 5CH, 6DH, 62H, 65H, 64H, 2DH, 6FH
   \              0x6D 0x62    
   \              0x65 0x64    
   \              0x2D 0x6F    
   \   00000008   0x73 0x5C          DC8 73H, 5CH, 66H, 65H, 61H, 74H, 75H, 72H
   \              0x66 0x65    
   \              0x61 0x74    
   \              0x75 0x72    
   \   00000010   0x65 0x73          DC8 65H, 73H, 5CH, 66H, 69H, 6CH, 65H, 73H
   \              0x5C 0x66    
   \              0x69 0x6C    
   \              0x65 0x73    
   \   00000018   0x79 0x73          DC8 79H, 73H, 74H, 65H, 6DH, 5CH, 62H, 64H
   \              0x74 0x65    
   \              0x6D 0x5C    
   \              0x62 0x64    
   \   00000020   0x5C 0x4D          DC8 5CH, 4DH, 42H, 52H, 42H, 6CH, 6FH, 63H
   \              0x42 0x52    
   \              0x42 0x6C    
   \              0x6F 0x63    
   \   00000028   0x6B 0x44          DC8 6BH, 44H, 65H, 76H, 69H, 63H, 65H, 2EH
   \              0x65 0x76    
   \              0x69 0x63    
   \              0x65 0x2E    
   \   00000030   0x63 0x70          DC8 63H, 70H, 70H, 0
   \              0x70 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x5F 0x62          DC8 "_bd->is_valid_erase(_offset, _size)"
   \              0x64 0x2D    
   \              0x3E 0x69    
   \              0x73 0x5F    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x5F    
   \              0x65 0x72    
   \              0x61 0x73    
   \              0x65 0x28    
   \              0x5F 0x6F    
   \              0x66 0x66    
   \              0x73 0x65    
   \              0x74 0x2C    
   \              0x20 0x5F    
   \              0x73 0x69    
   \              0x7A 0x65    
   \              0x29 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x69 0x73          DC8 "is_valid_read(addr, size)"
   \              0x5F 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x5F 0x72    
   \              0x65 0x61    
   \              0x64 0x28    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x2C 0x20    
   \              0x73 0x69    
   \              0x7A 0x65    
   \              0x29 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x69 0x73          DC8 "is_valid_program(addr, size)"
   \              0x5F 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x5F 0x70    
   \              0x72 0x6F    
   \              0x67 0x72    
   \              0x61 0x6D    
   \              0x28 0x61    
   \              0x64 0x64    
   \              0x72 0x2C    
   \              0x20 0x73    
   \              0x69 0x7A    
   \              0x65 0x29    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x69 0x73          DC8 "is_valid_erase(addr, size)"
   \              0x5F 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x5F 0x65    
   \              0x72 0x61    
   \              0x73 0x65    
   \              0x28 0x61    
   \              0x64 0x64    
   \              0x72 0x2C    
   \              0x20 0x73    
   \              0x69 0x7A    
   \              0x65 0x29    
   \              0x00         
   \   0000001B   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   BlockDevice::is_valid_erase(bd_addr_t, bd_size_t) const
        24   -- Indirect call
        24 __aeabi_uldivmod
       0   BlockDevice::trim(bd_addr_t, bd_size_t)
       8   MBRBlockDevice::MBRBlockDevice(BlockDevice *, int)
         8   -> mbed_assert_internal
       8   MBRBlockDevice::deinit()
         8   -- Indirect call
       8   MBRBlockDevice::deleter ~MBRBlockDevice()
         8   -> operator delete(void *)
      24   MBRBlockDevice::erase(bd_addr_t, bd_size_t)
        24   -- Indirect call
        24   -> BlockDevice::is_valid_erase(bd_addr_t, bd_size_t) const
        24   -> mbed_assert_internal
       8   MBRBlockDevice::get_erase_size() const
         8   -- Indirect call
       0   MBRBlockDevice::get_partition_number() const
       0   MBRBlockDevice::get_partition_start() const
       0   MBRBlockDevice::get_partition_stop() const
       0   MBRBlockDevice::get_partition_type() const
       8   MBRBlockDevice::get_program_size() const
         8   -- Indirect call
       8   MBRBlockDevice::get_read_size() const
         8   -- Indirect call
      56   MBRBlockDevice::init()
        56   -- Indirect call
        56   -> BlockDevice::is_valid_erase(bd_addr_t, bd_size_t) const
        56   -> mbed_assert_internal
        56   -> operator delete[](void *)
        56   -> operator new[](std::size_t)
        56 __aeabi_lmul
        56 __aeabi_uread4
      48   MBRBlockDevice::partition(BlockDevice *, int, std::uint8_t, bd_addr_t)
        48   -- Indirect call
        48   -> partition_absolute(BlockDevice *, int, std::uint8_t, bd_size_t, bd_size_t)
      48   MBRBlockDevice::partition(BlockDevice *, int, std::uint8_t, bd_addr_t, bd_addr_t)
        48   -- Indirect call
        48   -> partition_absolute(BlockDevice *, int, std::uint8_t, bd_size_t, bd_size_t)
      40   MBRBlockDevice::program(void const *, bd_addr_t, bd_size_t)
        40   -- Indirect call
        40   -> mbed_assert_internal
        40 __aeabi_uldivmod
      40   MBRBlockDevice::read(void *, bd_addr_t, bd_size_t)
        40   -- Indirect call
        40   -> mbed_assert_internal
        40 __aeabi_uldivmod
       0   MBRBlockDevice::size() const
       8   MBRBlockDevice::subobject MBRBlockDevice(BlockDevice *, int)
         8   -> mbed_assert_internal
       0   MBRBlockDevice::~MBRBlockDevice()
       8   mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
         8   -- Indirect call
       0   mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
       0   mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
      12   mbed::callback<>(void (*)(void *), void *)
      56   partition_absolute(BlockDevice *, int, std::uint8_t, bd_size_t, bd_size_t)
        56   -- Indirect call
        56   -> __aeabi_memclr
        56   -> mbed_assert_internal
        56   -> operator delete[](void *)
        56   -> operator new[](std::size_t)
        56   -> tochs(unsigned int, std::uint8_t *)
        56 __aeabi_uldivmod
        56 __aeabi_uwrite4
      12   tochs(unsigned int, std::uint8_t *)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
      34  ?Subroutine0
      24  ?_0
      52  ?_1
      28  ?_2
      36  ?_3
      28  ?_4
      32  ?_5
      28  ?_6
      94  BlockDevice::is_valid_erase(bd_addr_t, bd_size_t) const
       4  BlockDevice::trim(bd_addr_t, bd_size_t)
       4  MBRBlockDevice::MBRBlockDevice(BlockDevice *, int)
      12  MBRBlockDevice::deinit()
       8  MBRBlockDevice::deleter ~MBRBlockDevice()
      66  MBRBlockDevice::erase(bd_addr_t, bd_size_t)
      12  MBRBlockDevice::get_erase_size() const
       4  MBRBlockDevice::get_partition_number() const
       6  MBRBlockDevice::get_partition_start() const
      16  MBRBlockDevice::get_partition_stop() const
       4  MBRBlockDevice::get_partition_type() const
      12  MBRBlockDevice::get_program_size() const
      12  MBRBlockDevice::get_read_size() const
     350  MBRBlockDevice::init()
     142  MBRBlockDevice::partition(BlockDevice *, int, std::uint8_t, bd_addr_t)
     152  MBRBlockDevice::partition(BlockDevice *, int, std::uint8_t, bd_addr_t, bd_addr_t)
     154  MBRBlockDevice::program(void const *, bd_addr_t, bd_size_t)
     154  MBRBlockDevice::read(void *, bd_addr_t, bd_size_t)
       6  MBRBlockDevice::size() const
       4  MBRBlockDevice::subobject MBRBlockDevice(BlockDevice *, int)
       2  MBRBlockDevice::~MBRBlockDevice()
      12  mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
       2  mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
      10  mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
      32  mbed::callback<>(void (*)(void *), void *)
      12  ops
     366  partition_absolute(BlockDevice *, int, std::uint8_t, bd_size_t, bd_size_t)
      52  tochs(unsigned int, std::uint8_t *)
     420  -- Other

 
   432 bytes in section .rodata
 1 978 bytes in section .text
 
 1 814 bytes of CODE  memory (+ 164 bytes shared)
     0 bytes of CONST memory (+ 432 bytes shared)

Errors: none
Warnings: none
