###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:13
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\filesystem\bd\HeapBlockDevice.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\bd\HeapBlockDevice.d
#        -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\bd\HeapBlockDevice.s.txt
#        -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\bd\HeapBlockDevice.o
#        .\mbed-os\features\filesystem\bd\HeapBlockDevice.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\bd\HeapBlockDevice.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\bd\HeapBlockDevice.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\filesystem\bd\HeapBlockDevice.cpp
      1          /* mbed Microcontroller Library
      2           * Copyright (c) 2017 ARM Limited
      3           *
      4           * Licensed under the Apache License, Version 2.0 (the "License");
      5           * you may not use this file except in compliance with the License.
      6           * You may obtain a copy of the License at
      7           *
      8           *     http://www.apache.org/licenses/LICENSE-2.0
      9           *
     10           * Unless required by applicable law or agreed to in writing, software
     11           * distributed under the License is distributed on an "AS IS" BASIS,
     12           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     13           * See the License for the specific language governing permissions and
     14           * limitations under the License.
     15           */
     16          
     17          #include "HeapBlockDevice.h"

   \                                 In section .text, align 2
   \   __interwork __softfp int BlockDevice::trim(bd_addr_t, bd_size_t)
   \                     _ZN11BlockDevice4trimEyy: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return

   \                                 In section .rodata, align 4
   \   __absolute mbed::Callback<void ()>::ops const mbed::Callback<void ()>::generate<>(mbed::Callback<void ()>::function_context<void (*)(void *), void> const &)::ops
   \                     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops:
   \   00000000   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv
   \   00000004   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv
   \   00000008   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0x6848             LDR      R0,[R1, #+4]
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x4788             BLX      R1
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??function_move_0
   \   00000004   0xC90C             LDM      R1!,{R2,R3}
   \   00000006   0xC00C             STM      R0!,{R2,R3}
   \                     ??function_move_0: (+1)
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
   \                     _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4
   \   __interwork __softfp void mbed::callback<>(void (*)(void *), void *)
   \                     _ZN4mbed8callbackIvvvEENS_8CallbackIFT1_vEEEPFS2_PT_EPT0_: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0xC078             STM      R0!,{R3-R6}
   \   0000000C   0x3810             SUBS     R0,R0,#+16
   \   0000000E   0xD001             BEQ      ??callback_0
   \   00000010   0x6001             STR      R1,[R0, #+0]
   \   00000012   0x6042             STR      R2,[R0, #+4]
   \                     ??callback_0: (+1)
   \   00000014   0x4901             LDR      R1,??callback_1
   \   00000016   0x60C1             STR      R1,[R0, #+12]
   \   00000018   0xBC70             POP      {R4-R6}
   \   0000001A   0x4770             BX       LR               ;; return
   \                     ??callback_1:
   \   0000001C   0x........         DC32     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops
     18          
     19          

   \                                 In section .text, align 4, keep-with-next
     20          HeapBlockDevice::HeapBlockDevice(bd_size_t size, bd_size_t block)
   \                     _ZN15HeapBlockDeviceC1Eyy: (+1)
   \   00000000   0xB5D0             PUSH     {R4,R6,R7,LR}
   \   00000002   0xBF00             Nop      
   \   00000004                      REQUIRE ?Subroutine1
   \   00000004                      ;; // Fall through to label ?Subroutine1

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x0004             MOVS     R4,R0
   \   00000002   0x0016             MOVS     R6,R2
   \   00000004   0x001F             MOVS     R7,R3
   \   00000006   0x....             LDR      R0,??DataTable12
   \   00000008   0x6020             STR      R0,[R4, #+0]
   \   0000000A   0xA804             ADD      R0,SP,#+16
   \   0000000C   0xC80C             LDM      R0!,{R2,R3}
     21              : _read_size(block), _program_size(block), _erase_size(block)
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x3008             ADDS     R0,R0,#+8
   \   00000012   0xC00C             STM      R0!,{R2,R3}
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x3010             ADDS     R0,R0,#+16
   \   00000018   0xC00C             STM      R0!,{R2,R3}
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x3018             ADDS     R0,R0,#+24
   \   0000001E   0xC00C             STM      R0!,{R2,R3}
     22              , _count(size / block), _blocks(0)
   \   00000020   0x0030             MOVS     R0,R6
   \   00000022   0x0039             MOVS     R1,R7
   \   00000024   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000028   0x0022             MOVS     R2,R4
   \   0000002A   0x3220             ADDS     R2,R2,#+32
   \   0000002C   0xC203             STM      R2!,{R0,R1}
   \   0000002E   0x2200             MOVS     R2,#+0
   \   00000030   0x62A2             STR      R2,[R4, #+40]
     23          {
     24              MBED_ASSERT(_count * _erase_size == size);
   \   00000032   0x0022             MOVS     R2,R4
   \   00000034   0x3218             ADDS     R2,R2,#+24
   \   00000036   0xCA0C             LDM      R2,{R2,R3}
   \   00000038   0x.... 0x....      BL       __aeabi_lmul
   \   0000003C   0x42B9             CMP      R1,R7
   \   0000003E   0xD101             BNE      ??Subroutine1_0
   \   00000040   0x42B0             CMP      R0,R6
   \   00000042   0xD004             BEQ      ??Subroutine1_1
   \                     ??Subroutine1_0: (+1)
   \   00000044   0x2218             MOVS     R2,#+24
   \   00000046   0x....             LDR      R1,??DataTable12_1
   \   00000048   0x....             ADR.N    R0,?_0
   \   0000004A   0x.... 0x....      BL       mbed_assert_internal
     25          }
   \                     ??Subroutine1_1: (+1)
   \   0000004E   0x0020             MOVS     R0,R4
   \   00000050   0xBDD0             POP      {R4,R6,R7,PC}    ;; return
     26          

   \                                 In section .text, align 4, keep-with-next
     27          HeapBlockDevice::HeapBlockDevice(bd_size_t size, bd_size_t read, bd_size_t program, bd_size_t erase)
   \                     _ZN15HeapBlockDeviceC1Eyyyy: (+1)
   \   00000000   0xB5D0             PUSH     {R4,R6,R7,LR}
   \   00000002   0xBF00             Nop      
   \   00000004                      REQUIRE ?Subroutine0
   \   00000004                      ;; // Fall through to label ?Subroutine0

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x0004             MOVS     R4,R0
   \   00000002   0x0016             MOVS     R6,R2
   \   00000004   0x001F             MOVS     R7,R3
   \   00000006   0x....             LDR      R0,??DataTable12
   \   00000008   0x6020             STR      R0,[R4, #+0]
     28              : _read_size(read), _program_size(program), _erase_size(erase)
   \   0000000A   0xA804             ADD      R0,SP,#+16
   \   0000000C   0xC803             LDM      R0,{R0,R1}
   \   0000000E   0x0022             MOVS     R2,R4
   \   00000010   0x3208             ADDS     R2,R2,#+8
   \   00000012   0xC203             STM      R2!,{R0,R1}
   \   00000014   0xA806             ADD      R0,SP,#+24
   \   00000016   0xC803             LDM      R0,{R0,R1}
   \   00000018   0x0022             MOVS     R2,R4
   \   0000001A   0x3210             ADDS     R2,R2,#+16
   \   0000001C   0xC203             STM      R2!,{R0,R1}
   \   0000001E   0xA808             ADD      R0,SP,#+32
   \   00000020   0xC80C             LDM      R0!,{R2,R3}
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x3018             ADDS     R0,R0,#+24
   \   00000026   0xC00C             STM      R0!,{R2,R3}
     29              , _count(size / erase), _blocks(0)
   \   00000028   0x0030             MOVS     R0,R6
   \   0000002A   0x0039             MOVS     R1,R7
   \   0000002C   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000030   0x0022             MOVS     R2,R4
   \   00000032   0x3220             ADDS     R2,R2,#+32
   \   00000034   0xC203             STM      R2!,{R0,R1}
   \   00000036   0x2200             MOVS     R2,#+0
   \   00000038   0x62A2             STR      R2,[R4, #+40]
     30          {
     31              MBED_ASSERT(_count * _erase_size == size);
   \   0000003A   0x0022             MOVS     R2,R4
   \   0000003C   0x3218             ADDS     R2,R2,#+24
   \   0000003E   0xCA0C             LDM      R2,{R2,R3}
   \   00000040   0x.... 0x....      BL       __aeabi_lmul
   \   00000044   0x42B9             CMP      R1,R7
   \   00000046   0xD101             BNE      ??Subroutine0_0
   \   00000048   0x42B0             CMP      R0,R6
   \   0000004A   0xD004             BEQ      ??Subroutine0_1
   \                     ??Subroutine0_0: (+1)
   \   0000004C   0x221F             MOVS     R2,#+31
   \   0000004E   0x....             LDR      R1,??DataTable12_1
   \   00000050   0x....             ADR.N    R0,?_0
   \   00000052   0x.... 0x....      BL       mbed_assert_internal
     32          }
   \                     ??Subroutine0_1: (+1)
   \   00000056   0x0020             MOVS     R0,R4
   \   00000058   0xBDD0             POP      {R4,R6,R7,PC}    ;; return
     33          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp HeapBlockDevice::deleter ~HeapBlockDevice()
   \                     _ZN15HeapBlockDeviceD0Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x.... 0x....      BL       _ZN15HeapBlockDeviceD1Ev
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       _ZdlPv
   \   0000000E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     34          HeapBlockDevice::~HeapBlockDevice()
   \                     _ZN15HeapBlockDeviceD1Ev: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002                      REQUIRE ?Subroutine2
   \   00000002                      ;; // Fall through to label ?Subroutine2

   \                                 In section .text, align 2, keep-with-next
     35          {
   \                     ?Subroutine2: (+1)
   \   00000000   0x....             LDR      R0,??DataTable12
   \   00000002   0x9900             LDR      R1,[SP, #+0]
   \   00000004   0x6008             STR      R0,[R1, #+0]
     36              if (_blocks) {
   \   00000006   0x9800             LDR      R0,[SP, #+0]
   \   00000008   0x6A80             LDR      R0,[R0, #+40]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD017             BEQ      ??Subroutine2_0
     37                  for (size_t i = 0; i < _count; i++) {
   \   0000000E   0x2600             MOVS     R6,#+0
   \   00000010   0x2400             MOVS     R4,#+0
   \   00000012   0x2500             MOVS     R5,#+0
   \   00000014   0xE004             B        ??Subroutine2_1
     38                      free(_blocks[i]);
   \                     ??Subroutine2_2: (+1)
   \   00000016   0x5978             LDR      R0,[R7, R5]
   \   00000018   0x.... 0x....      BL       free
   \   0000001C   0x1C64             ADDS     R4,R4,#+1
   \   0000001E   0x1D2D             ADDS     R5,R5,#+4
   \                     ??Subroutine2_1: (+1)
   \   00000020   0x9800             LDR      R0,[SP, #+0]
   \   00000022   0x6A87             LDR      R7,[R0, #+40]
   \   00000024   0x2300             MOVS     R3,#+0
   \   00000026   0x3020             ADDS     R0,R0,#+32
   \   00000028   0xC803             LDM      R0,{R0,R1}
   \   0000002A   0x428B             CMP      R3,R1
   \   0000002C   0xD3F3             BCC      ??Subroutine2_2
   \   0000002E   0xD801             BHI      ??Subroutine2_3
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD3F0             BCC      ??Subroutine2_2
     39                  }
     40          
     41                  delete[] _blocks;
   \                     ??Subroutine2_3: (+1)
   \   00000034   0x0038             MOVS     R0,R7
   \   00000036   0x.... 0x....      BL       _ZdaPv
     42                  _blocks = 0;
   \   0000003A   0x9800             LDR      R0,[SP, #+0]
   \   0000003C   0x6286             STR      R6,[R0, #+40]
     43              }
     44          }
   \                     ??Subroutine2_0: (+1)
   \   0000003E   0x9800             LDR      R0,[SP, #+0]
   \   00000040   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     45          

   \                                 In section .text, align 2, keep-with-next
     46          int HeapBlockDevice::init()
     47          {
   \                     _ZN15HeapBlockDevice4initEv: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     48              if (!_blocks) {
   \   00000004   0x6AA0             LDR      R0,[R4, #+40]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD116             BNE      ??init_0
     49                  _blocks = new uint8_t*[_count];
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x3020             ADDS     R0,R0,#+32
   \   0000000E   0xC803             LDM      R0,{R0,R1}
   \   00000010   0x0080             LSLS     R0,R0,#+2
   \   00000012   0x.... 0x....      BL       _Znaj
   \   00000016   0x0005             MOVS     R5,R0
   \   00000018   0x62A5             STR      R5,[R4, #+40]
     50                  for (size_t i = 0; i < _count; i++) {
   \   0000001A   0x2600             MOVS     R6,#+0
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0x2300             MOVS     R3,#+0
   \   00000020   0xE002             B        ??init_1
     51                      _blocks[i] = 0;
   \                     ??init_2: (+1)
   \   00000022   0x602E             STR      R6,[R5, #+0]
     52                  }
   \   00000024   0x1C52             ADDS     R2,R2,#+1
   \   00000026   0x1D2D             ADDS     R5,R5,#+4
   \                     ??init_1: (+1)
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x3020             ADDS     R0,R0,#+32
   \   0000002C   0xC803             LDM      R0,{R0,R1}
   \   0000002E   0x428B             CMP      R3,R1
   \   00000030   0xD3F7             BCC      ??init_2
   \   00000032   0xD801             BHI      ??init_0
   \   00000034   0x4282             CMP      R2,R0
   \   00000036   0xD3F4             BCC      ??init_2
     53              }
     54          
     55              return BD_ERROR_OK;
   \                     ??init_0: (+1)
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xBD70             POP      {R4-R6,PC}       ;; return
     56          }
     57          

   \                                 In section .text, align 2, keep-with-next
     58          int HeapBlockDevice::deinit()
     59          {
   \                     _ZN15HeapBlockDevice6deinitEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     60              MBED_ASSERT(_blocks != NULL);
   \   00000002   0x6A80             LDR      R0,[R0, #+40]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD104             BNE      ??deinit_0
   \   00000008   0x223C             MOVS     R2,#+60
   \   0000000A   0x....             LDR      R1,??DataTable12_1
   \   0000000C   0x....             LDR      R0,??DataTable13
   \   0000000E   0x.... 0x....      BL       mbed_assert_internal
     61              // Memory is lazily cleaned up in destructor to allow
     62              // data to live across de/reinitialization
     63              return BD_ERROR_OK;
   \                     ??deinit_0: (+1)
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xBD02             POP      {R1,PC}          ;; return
     64          }
     65          

   \                                 In section .text, align 2, keep-with-next
     66          bd_size_t HeapBlockDevice::get_read_size() const
     67          {
   \                     _ZNK15HeapBlockDevice13get_read_sizeEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     68              MBED_ASSERT(_blocks != NULL);
   \   00000004   0x6AA0             LDR      R0,[R4, #+40]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD104             BNE      ??get_read_size_0
   \   0000000A   0x2244             MOVS     R2,#+68
   \   0000000C   0x....             LDR      R1,??DataTable12_1
   \   0000000E   0x....             LDR      R0,??DataTable13
   \   00000010   0x.... 0x....      BL       mbed_assert_internal
     69              return _read_size;
   \                     ??get_read_size_0: (+1)
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x3008             ADDS     R0,R0,#+8
   \   00000018   0xC803             LDM      R0,{R0,R1}
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
     70          }
     71          

   \                                 In section .text, align 4, keep-with-next
     72          bd_size_t HeapBlockDevice::get_program_size() const
     73          {
   \                     _ZNK15HeapBlockDevice16get_program_sizeEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     74              MBED_ASSERT(_blocks != NULL);
   \   00000004   0x6AA0             LDR      R0,[R4, #+40]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD104             BNE      ??get_program_size_0
   \   0000000A   0x224A             MOVS     R2,#+74
   \   0000000C   0x....             ADR.N    R1,?_1
   \   0000000E   0x....             LDR      R0,??DataTable13
   \   00000010   0x.... 0x....      BL       mbed_assert_internal
     75              return _program_size;
   \                     ??get_program_size_0: (+1)
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x3010             ADDS     R0,R0,#+16
   \   00000018   0xC803             LDM      R0,{R0,R1}
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
     76          }
     77          

   \                                 In section .text, align 4, keep-with-next
     78          bd_size_t HeapBlockDevice::get_erase_size() const
     79          {
   \                     _ZNK15HeapBlockDevice14get_erase_sizeEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     80              MBED_ASSERT(_blocks != NULL);
   \   00000004   0x6AA0             LDR      R0,[R4, #+40]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD104             BNE      ??get_erase_size_0
   \   0000000A   0x2250             MOVS     R2,#+80
   \   0000000C   0x....             ADR.N    R1,?_1
   \   0000000E   0x....             LDR      R0,??DataTable13
   \   00000010   0x.... 0x....      BL       mbed_assert_internal
     81              return _erase_size;
   \                     ??get_erase_size_0: (+1)
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x3018             ADDS     R0,R0,#+24
   \   00000018   0xC803             LDM      R0,{R0,R1}
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
     82          }
     83          

   \                                 In section .text, align 4, keep-with-next
     84          bd_size_t HeapBlockDevice::size() const
     85          {
   \                     _ZNK15HeapBlockDevice4sizeEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     86              MBED_ASSERT(_blocks != NULL);
   \   00000004   0x6AA0             LDR      R0,[R4, #+40]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD105             BNE      ??size_0
   \   0000000A   0x2256             MOVS     R2,#+86
   \   0000000C   0x....             ADR.N    R1,?_1
   \   0000000E   0xBF00             Nop      
   \   00000010   0x....             ADR.N    R0,?_2
   \   00000012   0x.... 0x....      BL       mbed_assert_internal
     87              return _count * _erase_size;
   \                     ??size_0: (+1)
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x3020             ADDS     R0,R0,#+32
   \   0000001A   0xC803             LDM      R0,{R0,R1}
   \   0000001C   0x0022             MOVS     R2,R4
   \   0000001E   0x3218             ADDS     R2,R2,#+24
   \   00000020   0xCA0C             LDM      R2,{R2,R3}
   \   00000022   0x.... 0x....      BL       __aeabi_lmul
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
     88          }
     89          

   \                                 In section .text, align 4, keep-with-next
     90          int HeapBlockDevice::read(void *b, bd_addr_t addr, bd_size_t size)
     91          {
   \                     _ZN15HeapBlockDevice4readEPvyy: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0007             MOVS     R7,R0
   \   00000006   0x000E             MOVS     R6,R1
   \   00000008   0x0014             MOVS     R4,R2
   \   0000000A   0x001D             MOVS     R5,R3
     92              MBED_ASSERT(_blocks != NULL);
   \   0000000C   0x6AB8             LDR      R0,[R7, #+40]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD105             BNE      ??read_0
   \   00000012   0x225C             MOVS     R2,#+92
   \   00000014   0x....             ADR.N    R1,?_1
   \   00000016   0xBF00             Nop      
   \   00000018   0x....             ADR.N    R0,?_2
   \   0000001A   0x.... 0x....      BL       mbed_assert_internal
     93              MBED_ASSERT(is_valid_read(addr, size));
   \                     ??read_0: (+1)
   \   0000001E   0x0038             MOVS     R0,R7
   \   00000020   0x6839             LDR      R1,[R7, #+0]
   \   00000022   0x6A09             LDR      R1,[R1, #+32]
   \   00000024   0x4788             BLX      R1
   \   00000026   0x0002             MOVS     R2,R0
   \   00000028   0x000B             MOVS     R3,R1
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x0029             MOVS     R1,R5
   \   0000002E   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000032   0x2B00             CMP      R3,#+0
   \   00000034   0xD122             BNE      ??read_1
   \   00000036   0x2A00             CMP      R2,#+0
   \   00000038   0xD120             BNE      ??read_1
   \   0000003A   0xA80A             ADD      R0,SP,#+40
   \   0000003C   0xC803             LDM      R0,{R0,R1}
   \   0000003E   0x9000             STR      R0,[SP, #+0]
   \   00000040   0x9101             STR      R1,[SP, #+4]
   \   00000042   0x0038             MOVS     R0,R7
   \   00000044   0x6839             LDR      R1,[R7, #+0]
   \   00000046   0x6A09             LDR      R1,[R1, #+32]
   \   00000048   0x4788             BLX      R1
   \   0000004A   0x0002             MOVS     R2,R0
   \   0000004C   0x000B             MOVS     R3,R1
   \   0000004E   0x9800             LDR      R0,[SP, #+0]
   \   00000050   0x9901             LDR      R1,[SP, #+4]
   \   00000052   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000056   0x2B00             CMP      R3,#+0
   \   00000058   0xD110             BNE      ??read_1
   \   0000005A   0x2A00             CMP      R2,#+0
   \   0000005C   0xD10E             BNE      ??read_1
   \   0000005E   0x0038             MOVS     R0,R7
   \   00000060   0x6839             LDR      R1,[R7, #+0]
   \   00000062   0x6AC9             LDR      R1,[R1, #+44]
   \   00000064   0x4788             BLX      R1
   \   00000066   0x0002             MOVS     R2,R0
   \   00000068   0x000B             MOVS     R3,R1
   \   0000006A   0xA80A             ADD      R0,SP,#+40
   \   0000006C   0xC803             LDM      R0,{R0,R1}
   \   0000006E   0x1900             ADDS     R0,R0,R4
   \   00000070   0x4169             ADCS     R1,R1,R5
   \   00000072   0x428B             CMP      R3,R1
   \   00000074   0xD821             BHI      ??read_2
   \   00000076   0xD301             BCC      ??read_1
   \   00000078   0x4282             CMP      R2,R0
   \   0000007A   0xD21E             BCS      ??read_2
   \                     ??read_1: (+1)
   \   0000007C   0x225D             MOVS     R2,#+93
   \   0000007E   0xBF00             Nop      
   \   00000080   0x....             ADR.N    R1,?_1
   \   00000082   0xBF00             Nop      
   \   00000084   0x....             ADR.N    R0,?_3
   \   00000086   0x.... 0x....      BL       mbed_assert_internal
     94              uint8_t *buffer = static_cast<uint8_t*>(b);
   \   0000008A   0xE016             B        ??read_2
     95          
     96              while (size > 0) {
     97                  bd_addr_t hi = addr / _erase_size;
     98                  bd_addr_t lo = addr % _erase_size;
     99          
    100                  if (_blocks[hi]) {
    101                      memcpy(buffer, &_blocks[hi][lo], _read_size);
    102                  } else {
    103                      memset(buffer, 0, _read_size);
   \                     ??read_3: (+1)
   \   0000008C   0x0001             MOVS     R1,R0
   \   0000008E   0x0030             MOVS     R0,R6
   \   00000090   0x.... 0x....      BL       __aeabi_memclr
    104                  }
    105          
    106                  buffer += _read_size;
   \                     ??read_4: (+1)
   \   00000094   0x0038             MOVS     R0,R7
   \   00000096   0x3008             ADDS     R0,R0,#+8
   \   00000098   0xC803             LDM      R0,{R0,R1}
   \   0000009A   0x1836             ADDS     R6,R6,R0
    107                  addr += _read_size;
   \   0000009C   0x1824             ADDS     R4,R4,R0
   \   0000009E   0x414D             ADCS     R5,R5,R1
    108                  size -= _read_size;
   \   000000A0   0xAA0A             ADD      R2,SP,#+40
   \   000000A2   0x4694             MOV      R12,R2
   \   000000A4   0xCA0C             LDM      R2,{R2,R3}
   \   000000A6   0x9200             STR      R2,[SP, #+0]
   \   000000A8   0x9301             STR      R3,[SP, #+4]
   \   000000AA   0x0002             MOVS     R2,R0
   \   000000AC   0x000B             MOVS     R3,R1
   \   000000AE   0x9800             LDR      R0,[SP, #+0]
   \   000000B0   0x9901             LDR      R1,[SP, #+4]
   \   000000B2   0x1A80             SUBS     R0,R0,R2
   \   000000B4   0x4199             SBCS     R1,R1,R3
   \   000000B6   0x4662             MOV      R2,R12
   \   000000B8   0xC203             STM      R2!,{R0,R1}
   \                     ??read_2: (+1)
   \   000000BA   0xA80A             ADD      R0,SP,#+40
   \   000000BC   0xC803             LDM      R0,{R0,R1}
   \   000000BE   0x2900             CMP      R1,#+0
   \   000000C0   0xD101             BNE      ??read_5
   \   000000C2   0x2800             CMP      R0,#+0
   \   000000C4   0xD021             BEQ      ??read_6
   \                     ??read_5: (+1)
   \   000000C6   0xAA02             ADD      R2,SP,#+8
   \   000000C8   0x0038             MOVS     R0,R7
   \   000000CA   0x3018             ADDS     R0,R0,#+24
   \   000000CC   0xC803             LDM      R0,{R0,R1}
   \   000000CE   0xC203             STM      R2!,{R0,R1}
   \   000000D0   0x0020             MOVS     R0,R4
   \   000000D2   0x0029             MOVS     R1,R5
   \   000000D4   0xAA02             ADD      R2,SP,#+8
   \   000000D6   0xCA0C             LDM      R2,{R2,R3}
   \   000000D8   0x.... 0x....      BL       __aeabi_uldivmod
   \   000000DC   0x6ABA             LDR      R2,[R7, #+40]
   \   000000DE   0x0080             LSLS     R0,R0,#+2
   \   000000E0   0x5813             LDR      R3,[R2, R0]
   \   000000E2   0x0038             MOVS     R0,R7
   \   000000E4   0x3008             ADDS     R0,R0,#+8
   \   000000E6   0xC803             LDM      R0,{R0,R1}
   \   000000E8   0x2B00             CMP      R3,#+0
   \   000000EA   0xD0CF             BEQ      ??read_3
   \   000000EC   0x9001             STR      R0,[SP, #+4]
   \   000000EE   0x9300             STR      R3,[SP, #+0]
   \   000000F0   0x0020             MOVS     R0,R4
   \   000000F2   0x0029             MOVS     R1,R5
   \   000000F4   0xAA02             ADD      R2,SP,#+8
   \   000000F6   0xCA0C             LDM      R2,{R2,R3}
   \   000000F8   0x.... 0x....      BL       __aeabi_uldivmod
   \   000000FC   0x9B00             LDR      R3,[SP, #+0]
   \   000000FE   0x1899             ADDS     R1,R3,R2
   \   00000100   0x9A01             LDR      R2,[SP, #+4]
   \   00000102   0x0030             MOVS     R0,R6
   \   00000104   0x.... 0x....      BL       __aeabi_memcpy
    109              }
   \   00000108   0xE7C4             B        ??read_4
    110          
    111              return 0;
   \                     ??read_6: (+1)
   \   0000010A   0xB005             ADD      SP,SP,#+20
   \   0000010C   0xBDF0             POP      {R4-R7,PC}       ;; return
    112          }
    113          

   \                                 In section .text, align 4, keep-with-next
    114          int HeapBlockDevice::program(const void *b, bd_addr_t addr, bd_size_t size)
    115          {
   \                     _ZN15HeapBlockDevice7programEPKvyy: (+1)
   \   00000000   0xB579             PUSH     {R0,R3-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x0014             MOVS     R4,R2
   \   00000008   0x001D             MOVS     R5,R3
    116              MBED_ASSERT(_blocks != NULL);
   \   0000000A   0x6A80             LDR      R0,[R0, #+40]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD106             BNE      ??program_0
   \   00000010   0x2274             MOVS     R2,#+116
   \   00000012   0xBF00             Nop      
   \   00000014   0x....             ADR.N    R1,?_1
   \   00000016   0xBF00             Nop      
   \   00000018   0x....             ADR.N    R0,?_2
   \   0000001A   0x.... 0x....      BL       mbed_assert_internal
    117              MBED_ASSERT(is_valid_program(addr, size));
   \                     ??program_0: (+1)
   \   0000001E   0x9806             LDR      R0,[SP, #+24]
   \   00000020   0x6801             LDR      R1,[R0, #+0]
   \   00000022   0x6A49             LDR      R1,[R1, #+36]
   \   00000024   0x4788             BLX      R1
   \   00000026   0x0002             MOVS     R2,R0
   \   00000028   0x000B             MOVS     R3,R1
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x0029             MOVS     R1,R5
   \   0000002E   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000032   0x2B00             CMP      R3,#+0
   \   00000034   0xD120             BNE      ??program_1
   \   00000036   0x2A00             CMP      R2,#+0
   \   00000038   0xD11E             BNE      ??program_1
   \   0000003A   0xA80C             ADD      R0,SP,#+48
   \   0000003C   0xC803             LDM      R0,{R0,R1}
   \   0000003E   0x9000             STR      R0,[SP, #+0]
   \   00000040   0x9101             STR      R1,[SP, #+4]
   \   00000042   0x9806             LDR      R0,[SP, #+24]
   \   00000044   0x6801             LDR      R1,[R0, #+0]
   \   00000046   0x6A49             LDR      R1,[R1, #+36]
   \   00000048   0x4788             BLX      R1
   \   0000004A   0x0002             MOVS     R2,R0
   \   0000004C   0x000B             MOVS     R3,R1
   \   0000004E   0x9800             LDR      R0,[SP, #+0]
   \   00000050   0x9901             LDR      R1,[SP, #+4]
   \   00000052   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000056   0x2B00             CMP      R3,#+0
   \   00000058   0xD10E             BNE      ??program_1
   \   0000005A   0x2A00             CMP      R2,#+0
   \   0000005C   0xD10C             BNE      ??program_1
   \   0000005E   0x9806             LDR      R0,[SP, #+24]
   \   00000060   0x6801             LDR      R1,[R0, #+0]
   \   00000062   0x6AC9             LDR      R1,[R1, #+44]
   \   00000064   0x4788             BLX      R1
   \   00000066   0xAA0C             ADD      R2,SP,#+48
   \   00000068   0xCA0C             LDM      R2,{R2,R3}
   \   0000006A   0x1912             ADDS     R2,R2,R4
   \   0000006C   0x416B             ADCS     R3,R3,R5
   \   0000006E   0x4299             CMP      R1,R3
   \   00000070   0xD809             BHI      ??program_2
   \   00000072   0xD301             BCC      ??program_1
   \   00000074   0x4290             CMP      R0,R2
   \   00000076   0xD206             BCS      ??program_2
   \                     ??program_1: (+1)
   \   00000078   0x2275             MOVS     R2,#+117
   \   0000007A   0xBF00             Nop      
   \   0000007C   0x....             ADR.N    R1,?_1
   \   0000007E   0xBF00             Nop      
   \   00000080   0x....             ADR.N    R0,?_4
   \   00000082   0x.... 0x....      BL       mbed_assert_internal
    118              const uint8_t *buffer = static_cast<const uint8_t*>(b);
   \                     ??program_2: (+1)
   \   00000086   0x9601             STR      R6,[SP, #+4]
   \   00000088   0xE01A             B        ??program_3
    119          
    120              while (size > 0) {
    121                  bd_addr_t hi = addr / _erase_size;
    122                  bd_addr_t lo = addr % _erase_size;
    123          
    124                  if (!_blocks[hi]) {
    125                      _blocks[hi] = (uint8_t*)malloc(_erase_size);
    126                      if (!_blocks[hi]) {
    127                          return BD_ERROR_DEVICE_ERROR;
    128                      }
    129                  }
    130          
    131                  memcpy(&_blocks[hi][lo], buffer, _program_size);
   \                     ??program_4: (+1)
   \   0000008A   0x9806             LDR      R0,[SP, #+24]
   \   0000008C   0x3010             ADDS     R0,R0,#+16
   \   0000008E   0xC80C             LDM      R0!,{R2,R3}
   \   00000090   0x9B01             LDR      R3,[SP, #+4]
   \   00000092   0x9806             LDR      R0,[SP, #+24]
   \   00000094   0x6A80             LDR      R0,[R0, #+40]
   \   00000096   0x5986             LDR      R6,[R0, R6]
   \   00000098   0xA804             ADD      R0,SP,#+16
   \   0000009A   0xC803             LDM      R0,{R0,R1}
   \   0000009C   0x1830             ADDS     R0,R6,R0
   \   0000009E   0x0019             MOVS     R1,R3
   \   000000A0   0x.... 0x....      BL       __aeabi_memcpy
    132          
    133                  buffer += _program_size;
   \   000000A4   0x9806             LDR      R0,[SP, #+24]
   \   000000A6   0x3010             ADDS     R0,R0,#+16
   \   000000A8   0xC80C             LDM      R0!,{R2,R3}
   \   000000AA   0x9801             LDR      R0,[SP, #+4]
   \   000000AC   0x1880             ADDS     R0,R0,R2
   \   000000AE   0x9001             STR      R0,[SP, #+4]
    134                  addr += _program_size;
   \   000000B0   0x18A4             ADDS     R4,R4,R2
   \   000000B2   0x415D             ADCS     R5,R5,R3
    135                  size -= _program_size;
   \   000000B4   0xAE0C             ADD      R6,SP,#+48
   \   000000B6   0xA80C             ADD      R0,SP,#+48
   \   000000B8   0xC803             LDM      R0,{R0,R1}
   \   000000BA   0x1A80             SUBS     R0,R0,R2
   \   000000BC   0x4199             SBCS     R1,R1,R3
   \   000000BE   0xC603             STM      R6!,{R0,R1}
   \                     ??program_3: (+1)
   \   000000C0   0xA80C             ADD      R0,SP,#+48
   \   000000C2   0xC803             LDM      R0,{R0,R1}
   \   000000C4   0x2900             CMP      R1,#+0
   \   000000C6   0xD101             BNE      ??program_5
   \   000000C8   0x2800             CMP      R0,#+0
   \   000000CA   0xD025             BEQ      ??program_6
   \                     ??program_5: (+1)
   \   000000CC   0xAA02             ADD      R2,SP,#+8
   \   000000CE   0x9806             LDR      R0,[SP, #+24]
   \   000000D0   0x3018             ADDS     R0,R0,#+24
   \   000000D2   0xC803             LDM      R0,{R0,R1}
   \   000000D4   0xC203             STM      R2!,{R0,R1}
   \   000000D6   0x0020             MOVS     R0,R4
   \   000000D8   0x0029             MOVS     R1,R5
   \   000000DA   0xAA02             ADD      R2,SP,#+8
   \   000000DC   0xCA0C             LDM      R2,{R2,R3}
   \   000000DE   0x.... 0x....      BL       __aeabi_uldivmod
   \   000000E2   0x0006             MOVS     R6,R0
   \   000000E4   0xA804             ADD      R0,SP,#+16
   \   000000E6   0x9000             STR      R0,[SP, #+0]
   \   000000E8   0x0020             MOVS     R0,R4
   \   000000EA   0x0029             MOVS     R1,R5
   \   000000EC   0xAA02             ADD      R2,SP,#+8
   \   000000EE   0xCA0C             LDM      R2,{R2,R3}
   \   000000F0   0x.... 0x....      BL       __aeabi_uldivmod
   \   000000F4   0x9800             LDR      R0,[SP, #+0]
   \   000000F6   0xC00C             STM      R0!,{R2,R3}
   \   000000F8   0x00B6             LSLS     R6,R6,#+2
   \   000000FA   0x9806             LDR      R0,[SP, #+24]
   \   000000FC   0x6A80             LDR      R0,[R0, #+40]
   \   000000FE   0x5980             LDR      R0,[R0, R6]
   \   00000100   0x2800             CMP      R0,#+0
   \   00000102   0xD1C2             BNE      ??program_4
   \   00000104   0xA802             ADD      R0,SP,#+8
   \   00000106   0xC803             LDM      R0,{R0,R1}
   \   00000108   0x.... 0x....      BL       malloc
   \   0000010C   0x9906             LDR      R1,[SP, #+24]
   \   0000010E   0x6A89             LDR      R1,[R1, #+40]
   \   00000110   0x5188             STR      R0,[R1, R6]
   \   00000112   0x2800             CMP      R0,#+0
   \   00000114   0xD1B9             BNE      ??program_4
   \   00000116   0x....             LDR      R0,??DataTable13_1  ;; 0xfffff05f
    136              }
    137          
    138              return 0;
   \                     ??program_6: (+1)
   \   00000118   0xB008             ADD      SP,SP,#+32
   \   0000011A   0xBD70             POP      {R4-R6,PC}       ;; return
    139          }
    140          

   \                                 In section .text, align 4, keep-with-next
    141          int HeapBlockDevice::erase(bd_addr_t addr, bd_size_t size)
    142          {
   \                     _ZN15HeapBlockDevice5eraseEyy: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0x0014             MOVS     R4,R2
   \   00000004   0x001D             MOVS     R5,R3
    143              MBED_ASSERT(_blocks != NULL);
   \   00000006   0x6A80             LDR      R0,[R0, #+40]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD106             BNE      ??erase_0
   \   0000000C   0x228F             MOVS     R2,#+143
   \   0000000E   0xBF00             Nop      
   \   00000010   0x....             ADR.N    R1,?_1
   \   00000012   0xBF00             Nop      
   \   00000014   0x....             ADR.N    R0,?_2
   \   00000016   0x.... 0x....      BL       mbed_assert_internal
    144              MBED_ASSERT(is_valid_erase(addr, size));
   \                     ??erase_0: (+1)
   \   0000001A   0x9800             LDR      R0,[SP, #+0]
   \   0000001C   0x6801             LDR      R1,[R0, #+0]
   \   0000001E   0x6A89             LDR      R1,[R1, #+40]
   \   00000020   0x4788             BLX      R1
   \   00000022   0x0002             MOVS     R2,R0
   \   00000024   0x000B             MOVS     R3,R1
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x0029             MOVS     R1,R5
   \   0000002A   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000002E   0x2B00             CMP      R3,#+0
   \   00000030   0xD11C             BNE      ??erase_1
   \   00000032   0x2A00             CMP      R2,#+0
   \   00000034   0xD11A             BNE      ??erase_1
   \   00000036   0xA806             ADD      R0,SP,#+24
   \   00000038   0xC8C0             LDM      R0!,{R6,R7}
   \   0000003A   0x9800             LDR      R0,[SP, #+0]
   \   0000003C   0x6801             LDR      R1,[R0, #+0]
   \   0000003E   0x6A89             LDR      R1,[R1, #+40]
   \   00000040   0x4788             BLX      R1
   \   00000042   0x0002             MOVS     R2,R0
   \   00000044   0x000B             MOVS     R3,R1
   \   00000046   0x0030             MOVS     R0,R6
   \   00000048   0x0039             MOVS     R1,R7
   \   0000004A   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000004E   0x2B00             CMP      R3,#+0
   \   00000050   0xD10C             BNE      ??erase_1
   \   00000052   0x2A00             CMP      R2,#+0
   \   00000054   0xD10A             BNE      ??erase_1
   \   00000056   0x9800             LDR      R0,[SP, #+0]
   \   00000058   0x6801             LDR      R1,[R0, #+0]
   \   0000005A   0x6AC9             LDR      R1,[R1, #+44]
   \   0000005C   0x4788             BLX      R1
   \   0000005E   0x1936             ADDS     R6,R6,R4
   \   00000060   0x416F             ADCS     R7,R7,R5
   \   00000062   0x42B9             CMP      R1,R7
   \   00000064   0xD809             BHI      ??erase_2
   \   00000066   0xD301             BCC      ??erase_1
   \   00000068   0x42B0             CMP      R0,R6
   \   0000006A   0xD206             BCS      ??erase_2
   \                     ??erase_1: (+1)
   \   0000006C   0x2290             MOVS     R2,#+144
   \   0000006E   0xBF00             Nop      
   \   00000070   0x....             ADR.N    R1,?_1
   \   00000072   0xBF00             Nop      
   \   00000074   0x....             ADR.N    R0,?_5
   \   00000076   0x.... 0x....      BL       mbed_assert_internal
    145              // TODO assert on programming unerased blocks
    146          
    147              return 0;
   \                     ??erase_2: (+1)
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    148          }

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp HeapBlockDevice::subobject HeapBlockDevice(bd_size_t, bd_size_t)
   \                     _ZN15HeapBlockDeviceC2Eyy: (+1)
   \   00000000   0xB5D0             PUSH     {R4,R6,R7,LR}
   \   00000002   0x....             B.N      ?Subroutine1

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp HeapBlockDevice::subobject HeapBlockDevice(bd_size_t, bd_size_t, bd_size_t, bd_size_t)
   \                     _ZN15HeapBlockDeviceC2Eyyyy: (+1)
   \   00000000   0xB5D0             PUSH     {R4,R6,R7,LR}
   \   00000002   0x....             B.N      ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp HeapBlockDevice::subobject ~HeapBlockDevice()
   \                     _ZN15HeapBlockDeviceD2Ev: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0x....             B.N      ?Subroutine2

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x5F 0x63          DC8 "_count * _erase_size == size"
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x20 0x2A    
   \              0x20 0x5F    
   \              0x65 0x72    
   \              0x61 0x73    
   \              0x65 0x5F    
   \              0x73 0x69    
   \              0x7A 0x65    
   \              0x20 0x3D    
   \              0x3D 0x20    
   \              0x73 0x69    
   \              0x7A 0x65    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     _ZTV15HeapBlockDevice+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0xFFFFF05F         DC32     0xfffff05f

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x2E 0x5C          DC8 2EH, 5CH, 6DH, 62H, 65H, 64H, 2DH, 6FH
   \              0x6D 0x62    
   \              0x65 0x64    
   \              0x2D 0x6F    
   \   00000008   0x73 0x5C          DC8 73H, 5CH, 66H, 65H, 61H, 74H, 75H, 72H
   \              0x66 0x65    
   \              0x61 0x74    
   \              0x75 0x72    
   \   00000010   0x65 0x73          DC8 65H, 73H, 5CH, 66H, 69H, 6CH, 65H, 73H
   \              0x5C 0x66    
   \              0x69 0x6C    
   \              0x65 0x73    
   \   00000018   0x79 0x73          DC8 79H, 73H, 74H, 65H, 6DH, 5CH, 62H, 64H
   \              0x74 0x65    
   \              0x6D 0x5C    
   \              0x62 0x64    
   \   00000020   0x5C 0x48          DC8 5CH, 48H, 65H, 61H, 70H, 42H, 6CH, 6FH
   \              0x65 0x61    
   \              0x70 0x42    
   \              0x6C 0x6F    
   \   00000028   0x63 0x6B          DC8 63H, 6BH, 44H, 65H, 76H, 69H, 63H, 65H
   \              0x44 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \   00000030   0x2E 0x63          DC8 2EH, 63H, 70H, 70H, 0
   \              0x70 0x70    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x5F 0x62          DC8 "_blocks != NULL"
   \              0x6C 0x6F    
   \              0x63 0x6B    
   \              0x73 0x20    
   \              0x21 0x3D    
   \              0x20 0x4E    
   \              0x55 0x4C    
   \              0x4C 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x69 0x73          DC8 "is_valid_read(addr, size)"
   \              0x5F 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x5F 0x72    
   \              0x65 0x61    
   \              0x64 0x28    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x2C 0x20    
   \              0x73 0x69    
   \              0x7A 0x65    
   \              0x29 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x69 0x73          DC8 "is_valid_program(addr, size)"
   \              0x5F 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x5F 0x70    
   \              0x72 0x6F    
   \              0x67 0x72    
   \              0x61 0x6D    
   \              0x28 0x61    
   \              0x64 0x64    
   \              0x72 0x2C    
   \              0x20 0x73    
   \              0x69 0x7A    
   \              0x65 0x29    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x69 0x73          DC8 "is_valid_erase(addr, size)"
   \              0x5F 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x5F 0x65    
   \              0x72 0x61    
   \              0x73 0x65    
   \              0x28 0x61    
   \              0x64 0x64    
   \              0x72 0x2C    
   \              0x20 0x73    
   \              0x69 0x7A    
   \              0x65 0x29    
   \              0x00         
   \   0000001B   0x00               DC8 0
    149          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BlockDevice::trim(bd_addr_t, bd_size_t)
      16   HeapBlockDevice::HeapBlockDevice(bd_size_t, bd_size_t)
        16   -> mbed_assert_internal
        16 __aeabi_lmul
        16 __aeabi_uldivmod
      16   HeapBlockDevice::HeapBlockDevice(bd_size_t, bd_size_t, bd_size_t, bd_size_t)
        16   -> mbed_assert_internal
        16 __aeabi_lmul
        16 __aeabi_uldivmod
       8   HeapBlockDevice::deinit()
         8   -> mbed_assert_internal
       8   HeapBlockDevice::deleter ~HeapBlockDevice()
         8   -> HeapBlockDevice::~HeapBlockDevice()
         8   -> operator delete(void *)
      24   HeapBlockDevice::erase(bd_addr_t, bd_size_t)
        24   -- Indirect call
        24   -> mbed_assert_internal
        24 __aeabi_uldivmod
       8   HeapBlockDevice::get_erase_size() const
         8   -> mbed_assert_internal
       8   HeapBlockDevice::get_program_size() const
         8   -> mbed_assert_internal
       8   HeapBlockDevice::get_read_size() const
         8   -> mbed_assert_internal
      16   HeapBlockDevice::init()
        16   -> operator new[](std::size_t)
      48   HeapBlockDevice::program(void const *, bd_addr_t, bd_size_t)
        48   -- Indirect call
        48   -> __aeabi_memcpy
        48   -> mbed_assert_internal
        48   -> std::malloc
        48 __aeabi_uldivmod
      40   HeapBlockDevice::read(void *, bd_addr_t, bd_size_t)
        40   -- Indirect call
        40   -> __aeabi_memclr
        40   -> __aeabi_memcpy
        40   -> mbed_assert_internal
        40 __aeabi_uldivmod
       8   HeapBlockDevice::size() const
         8   -> mbed_assert_internal
         8 __aeabi_lmul
      16   HeapBlockDevice::subobject HeapBlockDevice(bd_size_t, bd_size_t)
        16   -> mbed_assert_internal
        16 __aeabi_lmul
        16 __aeabi_uldivmod
      16   HeapBlockDevice::subobject HeapBlockDevice(bd_size_t, bd_size_t, bd_size_t, bd_size_t)
        16   -> mbed_assert_internal
        16 __aeabi_lmul
        16 __aeabi_uldivmod
      24   HeapBlockDevice::subobject ~HeapBlockDevice()
        24   -> operator delete[](void *)
        24   -> std::free
       0   HeapBlockDevice::~HeapBlockDevice()
        24   -> operator delete[](void *)
        24   -> std::free
       8   mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
         8   -- Indirect call
       0   mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
       0   mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
      12   mbed::callback<>(void (*)(void *), void *)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable13
       4  ??DataTable13_1
      90  ?Subroutine0
      82  ?Subroutine1
      66  ?Subroutine2
      32  ?_0
      56  ?_1
      16  ?_2
      28  ?_3
      32  ?_4
      28  ?_5
       4  BlockDevice::trim(bd_addr_t, bd_size_t)
       4  HeapBlockDevice::HeapBlockDevice(bd_size_t, bd_size_t)
       4  HeapBlockDevice::HeapBlockDevice(bd_size_t, bd_size_t, bd_size_t, bd_size_t)
      22  HeapBlockDevice::deinit()
      16  HeapBlockDevice::deleter ~HeapBlockDevice()
     126  HeapBlockDevice::erase(bd_addr_t, bd_size_t)
      28  HeapBlockDevice::get_erase_size() const
      28  HeapBlockDevice::get_program_size() const
      28  HeapBlockDevice::get_read_size() const
      60  HeapBlockDevice::init()
     284  HeapBlockDevice::program(void const *, bd_addr_t, bd_size_t)
     270  HeapBlockDevice::read(void *, bd_addr_t, bd_size_t)
      40  HeapBlockDevice::size() const
       4  HeapBlockDevice::subobject HeapBlockDevice(bd_size_t, bd_size_t)
       4  HeapBlockDevice::subobject HeapBlockDevice(bd_size_t, bd_size_t, bd_size_t, bd_size_t)
       4  HeapBlockDevice::subobject ~HeapBlockDevice()
       2  HeapBlockDevice::~HeapBlockDevice()
      12  mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
       2  mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
      10  mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
      32  mbed::callback<>(void (*)(void *), void *)
      12  ops
     404  -- Other

 
   416 bytes in section .rodata
 1 430 bytes in section .text
 
 1 370 bytes of CODE  memory (+  60 bytes shared)
     0 bytes of CONST memory (+ 416 bytes shared)

Errors: none
Warnings: none
