###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:20
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\filesystem\fat\FATFileSystem.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\fat\FATFileSystem.d
#        -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\fat\FATFileSystem.s.txt
#        -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\fat\FATFileSystem.o
#        .\mbed-os\features\filesystem\fat\FATFileSystem.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\fat\FATFileSystem.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\filesystem\fat\FATFileSystem.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\filesystem\fat\FATFileSystem.cpp
      1          /* mbed Microcontroller Library
      2           * Copyright (c) 2006-2012 ARM Limited
      3           *
      4           * Permission is hereby granted, free of charge, to any person obtaining a copy
      5           * of this software and associated documentation files (the "Software"), to deal
      6           * in the Software without restriction, including without limitation the rights
      7           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      8           * copies of the Software, and to permit persons to whom the Software is
      9           * furnished to do so, subject to the following conditions:
     10           *
     11           * The above copyright notice and this permission notice shall be included in
     12           * all copies or substantial portions of the Software.
     13           *
     14           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     15           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     16           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     17           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     18           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     19           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     20           * SOFTWARE.
     21           */
     22          #include "mbed.h"

   \                                 In section .text, align 4
   \   __code __interwork __softfp mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
   \                     _ZN4mbed8CallbackIFvvEEC1IvvEEPFvPT_EPT0_: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0xC078             STM      R0!,{R3-R6}
   \   0000000C   0x3810             SUBS     R0,R0,#+16
   \   0000000E   0xD001             BEQ      ??Callback_0
   \   00000010   0x6001             STR      R1,[R0, #+0]
   \   00000012   0x6042             STR      R2,[R0, #+4]
   \                     ??Callback_0: (+1)
   \   00000014   0x4901             LDR      R1,??Callback_1
   \   00000016   0x60C1             STR      R1,[R0, #+12]
   \   00000018   0xBC70             POP      {R4-R6}
   \   0000001A   0x4770             BX       LR               ;; return
   \                     ??Callback_1:
   \   0000001C   0x........         DC32     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops

   \                                 In section .rodata, align 4
   \   __absolute mbed::Callback<void ()>::ops const mbed::Callback<void ()>::generate<>(mbed::Callback<void ()>::function_context<void (*)(void *), void> const &)::ops
   \                     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops:
   \   00000000   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv
   \   00000004   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv
   \   00000008   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0x6848             LDR      R0,[R1, #+4]
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x4788             BLX      R1
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??function_move_0
   \   00000004   0xC90C             LDM      R1!,{R2,R3}
   \   00000006   0xC00C             STM      R0!,{R2,R3}
   \                     ??function_move_0: (+1)
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
   \                     _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4
   \   __code __interwork __softfp mbed::Callback<void (char const *)>::Callback(void (*)(char const *))
   \                     _ZN4mbed8CallbackIFvPKcEEC1EPS3_: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0x000A             MOVS     R2,R1
   \   00000004   0xD106             BNE      ??Callback_2
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0x2400             MOVS     R4,#+0
   \   0000000E   0xC01E             STM      R0!,{R1-R4}
   \   00000010   0x3810             SUBS     R0,R0,#+16
   \   00000012   0xE009             B        ??Callback_3
   \                     ??Callback_2: (+1)
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x2300             MOVS     R3,#+0
   \   00000018   0x2400             MOVS     R4,#+0
   \   0000001A   0x2500             MOVS     R5,#+0
   \   0000001C   0xC03C             STM      R0!,{R2-R5}
   \   0000001E   0x3810             SUBS     R0,R0,#+16
   \   00000020   0xD000             BEQ      ??Callback_4
   \   00000022   0x6001             STR      R1,[R0, #+0]
   \                     ??Callback_4: (+1)
   \   00000024   0x4901             LDR      R1,??Callback_5
   \   00000026   0x60C1             STR      R1,[R0, #+12]
   \                     ??Callback_3: (+1)
   \   00000028   0xBC30             POP      {R4,R5}
   \   0000002A   0x4770             BX       LR               ;; return
   \                     ??Callback_5:
   \   0000002C   0x........         DC32     _ZZN4mbed8CallbackIFvPKcEE8generateIPS3_EEvRKT_E3ops

   \                                 In section .rodata, align 4
   \   __absolute mbed::Callback<void (char const *)>::ops const mbed::Callback<void (char const *)>::generate<>(void (*const &)(char const *))::ops
   \                     _ZZN4mbed8CallbackIFvPKcEE8generateIPS3_EEvRKT_E3ops:
   \   00000000   0x........         DC32 _ZN4mbed8CallbackIFvPKcEE13function_callIPS3_EEvPKvS2_
   \   00000004   0x........         DC32 _ZN4mbed8CallbackIFvPKcEE13function_moveIPS3_EEvPvPKv
   \   00000008   0x........         DC32 _ZN4mbed8CallbackIFvPKcEE13function_dtorIPS3_EEvPv

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void (char const *)>::function_call<void (*)(char const *)>(void const *, char const *)
   \                     _ZN4mbed8CallbackIFvPKcEE13function_callIPS3_EEvPKvS2_: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0002             MOVS     R2,R0
   \   00000004   0x0008             MOVS     R0,R1
   \   00000006   0x6811             LDR      R1,[R2, #+0]
   \   00000008   0x4788             BLX      R1
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void (char const *)>::function_move<void (*)(char const *)>(void *, void const *)
   \                     _ZN4mbed8CallbackIFvPKcEE13function_moveIPS3_EEvPvPKv: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??function_move_1
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x6001             STR      R1,[R0, #+0]
   \                     ??function_move_1: (+1)
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void (char const *)>::function_dtor<void (*)(char const *)>(void *)
   \                     _ZN4mbed8CallbackIFvPKcEE13function_dtorIPS3_EEvPv: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::callback<>(void (*)(void *), void *)
   \                     _ZN4mbed8callbackIvvvEENS_8CallbackIFT1_vEEEPFS2_PT_EPT0_: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEEC1IvvEEPFvPT_EPT0_
   \   00000006   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void debug_if(int, char const *, ...)
   \                     _Z8debug_ifiPKcz: (+1)
   \   00000000   0xB40C             PUSH     {R2,R3}
   \   00000002   0xB002             ADD      SP,SP,#+8
   \   00000004   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4
   \   __interwork __softfp rtos::Mutex *SingletonPtr<rtos::Mutex>::operator->()
   \                     _ZN12SingletonPtrIN4rtos5MutexEEptEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD110             BNE      `??operator->_0`
   \   0000000A   0x4D0E             LDR      R5,`??operator->_1`
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000010   0x6828             LDR      R0,[R5, #+0]
   \   00000012   0x.... 0x....      BL       osMutexAcquire
   \   00000016   0x6820             LDR      R0,[R4, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD104             BNE      `??operator->_2`
   \   0000001C   0x1D20             ADDS     R0,R4,#+4
   \   0000001E   0xD001             BEQ      `??operator->_3`
   \   00000020   0x.... 0x....      BL       _ZN4rtos5MutexC1Ev
   \                     `??operator->_3`: (+1)
   \   00000024   0x6020             STR      R0,[R4, #+0]
   \                     `??operator->_2`: (+1)
   \   00000026   0x6828             LDR      R0,[R5, #+0]
   \   00000028   0x.... 0x....      BL       osMutexRelease
   \                     `??operator->_0`: (+1)
   \   0000002C   0x6820             LDR      R0,[R4, #+0]
   \   0000002E   0x1D21             ADDS     R1,R4,#+4
   \   00000030   0x4288             CMP      R0,R1
   \   00000032   0xD004             BEQ      `??operator->_4`
   \   00000034   0x225D             MOVS     R2,#+93
   \   00000036   0x4904             LDR      R1,`??operator->_1`+0x4
   \   00000038   0x4804             LDR      R0,`??operator->_1`+0x8
   \   0000003A   0x.... 0x....      BL       mbed_assert_internal
   \                     `??operator->_4`: (+1)
   \   0000003E   0x6820             LDR      R0,[R4, #+0]
   \   00000040   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \   00000042   0xBF00             Nop      
   \                     `??operator->_1`:
   \   00000044   0x........         DC32     singleton_mutex_id
   \   00000048   0x........         DC32     _ZZN12SingletonPtrIN4rtos5MutexEE3getEvEs_0
   \   0000004C   0x........         DC32     _ZZN12SingletonPtrIN4rtos5MutexEE3getEvEs
     23          
     24          #include "diskio.h"
     25          #include "ffconf.h"
     26          #include "mbed_debug.h"
     27          #include "mbed_critical.h"
     28          #include <errno.h>
     29          
     30          #include "FATFileSystem.h"

   \                                 In section .text, align 2
   \   __interwork __softfp int FATFileSystem::reformat(BlockDevice *)
   \                     _ZN13FATFileSystem8reformatEP11BlockDevice: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x6803             LDR      R3,[R0, #+0]
   \   00000006   0x6F1B             LDR      R3,[R3, #+112]
   \   00000008   0x4798             BLX      R3
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
     31          
     32          
     33          ////// Error handling /////
     34          
     35          static int fat_error_remap(FRESULT res)
     36          {
     37              switch(res) {
     38                  case FR_OK:                     /* (0) Succeeded */
     39                      return 0;                   /* no error */
     40                  case FR_DISK_ERR:               /* (1) A hard error occurred in the low level disk I/O layer */
     41                  case FR_NOT_READY:              /* (3) The physical drive cannot work */
     42                      return -EIO;                /* I/O error */
     43                  case FR_NO_FILE:                /* (4) Could not find the file */
     44                  case FR_NO_PATH:                /* (5) Could not find the path */
     45                  case FR_INVALID_NAME:           /* (6) The path name format is invalid */
     46                  case FR_INVALID_DRIVE:          /* (11) The logical drive number is invalid */
     47                  case FR_NO_FILESYSTEM:          /* (13) There is no valid FAT volume */
     48                      return -ENOENT;             /* No such file or directory */
     49                  case FR_DENIED:                 /* (7) Access denied due to prohibited access or directory full */
     50                      return -EACCES;             /* Permission denied */
     51                  case FR_EXIST:                  /* (8) Access denied due to prohibited access */
     52                      return -EEXIST;             /* File exists */
     53                  case FR_WRITE_PROTECTED:        /* (10) The physical drive is write protected */
     54                  case FR_LOCKED:                 /* (16) The operation is rejected according to the file sharing policy */
     55                      return -EACCES;             /* Permission denied */
     56                  case FR_INVALID_OBJECT:         /* (9) The file/directory object is invalid */
     57                      return -EFAULT;             /* Bad address */
     58                  case FR_NOT_ENABLED:            /* (12) The volume has no work area */
     59                      return -ENXIO;              /* No such device or address */
     60                  case FR_NOT_ENOUGH_CORE:        /* (17) LFN working buffer could not be allocated */
     61                      return -ENOMEM;             /* Not enough space */
     62                  case FR_TOO_MANY_OPEN_FILES:    /* (18) Number of open files > _FS_LOCK */
     63                      return -ENFILE;             /* Too many open files in system */
     64                  case FR_INVALID_PARAMETER:      /* (19) Given parameter is invalid */
     65                      return -ENOEXEC;            /* Exec format error */
     66                  case FR_INT_ERR:                /* (2) Assertion failed */
     67                  case FR_MKFS_ABORTED:           /* (14) The f_mkfs() aborted due to any parameter error */
     68                  case FR_TIMEOUT:                /* (15) Could not get a grant to access the volume within defined period */
     69                  default:                        /* Bad file number */
     70                      return -EBADF;
     71              }
     72          }
     73          
     74          // Helper class for deferring operations when variable falls out of scope
     75          template <typename T>
     76          class Deferred {
     77          public:
     78              T _t;
     79              Callback<void(T)> _ondefer;
     80          
     81              Deferred(const Deferred&);
     82              Deferred &operator=(const Deferred&);
     83          
     84          public:

   \                                 In section .text, align 2, keep-with-next
   \                     _Z15fat_path_prefixiPKc: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000E             MOVS     R6,R1
   \   00000008   0x0017             MOVS     R7,R2
   \   0000000A   0x2E00             CMP      R6,#+0
   \   0000000C   0xD104             BNE      ??fat_path_prefix_0
   \   0000000E   0x4668             MOV      R0,SP
   \   00000010   0x.... 0x....      BL       _ZN4mbed8CallbackIFvPKcEEC1EPS3_
   \   00000014   0x6027             STR      R7,[R4, #+0]
   \   00000016   0xE025             B        ??fat_path_prefix_1
   \                     ??fat_path_prefix_0: (+1)
   \   00000018   0x....             ADR      R0,??DataTable26  ;; "0:/"
   \   0000001A   0x.... 0x....      BL       strlen
   \   0000001E   0x0005             MOVS     R5,R0
   \   00000020   0x0038             MOVS     R0,R7
   \   00000022   0x.... 0x....      BL       strlen
   \   00000026   0x1828             ADDS     R0,R5,R0
   \   00000028   0x1C40             ADDS     R0,R0,#+1
   \   0000002A   0x.... 0x....      BL       _Znaj
   \   0000002E   0x0005             MOVS     R5,R0
   \   00000030   0xD106             BNE      ??fat_path_prefix_2
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0x4668             MOV      R0,SP
   \   00000036   0x.... 0x....      BL       _ZN4mbed8CallbackIFvPKcEEC1EPS3_
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x6020             STR      R0,[R4, #+0]
   \   0000003E   0xE011             B        ??fat_path_prefix_1
   \                     ??fat_path_prefix_2: (+1)
   \   00000040   0x3630             ADDS     R6,R6,#+48
   \   00000042   0x702E             STRB     R6,[R5, #+0]
   \   00000044   0x203A             MOVS     R0,#+58
   \   00000046   0x7068             STRB     R0,[R5, #+1]
   \   00000048   0x202F             MOVS     R0,#+47
   \   0000004A   0x70A8             STRB     R0,[R5, #+2]
   \   0000004C   0x....             ADR      R0,??DataTable26  ;; "0:/"
   \   0000004E   0x.... 0x....      BL       strlen
   \   00000052   0x0039             MOVS     R1,R7
   \   00000054   0x1828             ADDS     R0,R5,R0
   \   00000056   0x.... 0x....      BL       strcpy
   \   0000005A   0x....             LDR      R1,??DataTable26_1
   \   0000005C   0x4668             MOV      R0,SP
   \   0000005E   0x.... 0x....      BL       _ZN4mbed8CallbackIFvPKcEEC1EPS3_
   \   00000062   0x6025             STR      R5,[R4, #+0]
   \                     ??fat_path_prefix_1: (+1)
   \   00000064   0x9A03             LDR      R2,[SP, #+12]
   \   00000066   0x2A00             CMP      R2,#+0
   \   00000068   0xD003             BEQ      ??fat_path_prefix_3
   \   0000006A   0x4669             MOV      R1,SP
   \   0000006C   0x1D20             ADDS     R0,R4,#+4
   \   0000006E   0x6852             LDR      R2,[R2, #+4]
   \   00000070   0x4790             BLX      R2
   \                     ??fat_path_prefix_3: (+1)
   \   00000072   0x9803             LDR      R0,[SP, #+12]
   \   00000074   0x6120             STR      R0,[R4, #+16]
   \   00000076   0x9903             LDR      R1,[SP, #+12]
   \   00000078   0x2900             CMP      R1,#+0
   \   0000007A   0xD002             BEQ      ??fat_path_prefix_4
   \   0000007C   0x4668             MOV      R0,SP
   \   0000007E   0x6889             LDR      R1,[R1, #+8]
   \   00000080   0x4788             BLX      R1
   \                     ??fat_path_prefix_4: (+1)
   \   00000082   0xB005             ADD      SP,SP,#+20
   \   00000084   0xBDF0             POP      {R4-R7,PC}       ;; return
     85              Deferred(T t, Callback<void(T)> ondefer = NULL)
     86                  : _t(t), _ondefer(ondefer)
     87              {
     88              }
     89          
     90              operator T()
     91              {
     92                  return _t;
     93              }
     94          

   \                                 In section .text, align 2
     95              ~Deferred()
     96              {
   \   __code __interwork __softfp Deferred<char const *>::~Deferred()
   \                     _ZN8DeferredIPKcED1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     97                  if (_ondefer) {
   \   00000004   0x6920             LDR      R0,[R4, #+16]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD004             BEQ      `?~Deferred_0`
     98                      _ondefer(_t);
   \   0000000A   0x6821             LDR      R1,[R4, #+0]
   \   0000000C   0x1D20             ADDS     R0,R4,#+4
   \   0000000E   0x6922             LDR      R2,[R4, #+16]
   \   00000010   0x6812             LDR      R2,[R2, #+0]
   \   00000012   0x4790             BLX      R2
     99                  }
    100              }
   \                     `?~Deferred_0`: (+1)
   \   00000014   0x6921             LDR      R1,[R4, #+16]
   \   00000016   0x2900             CMP      R1,#+0
   \   00000018   0xD002             BEQ      `?~Deferred_1`
   \   0000001A   0x1D20             ADDS     R0,R4,#+4
   \   0000001C   0x6889             LDR      R1,[R1, #+8]
   \   0000001E   0x4788             BLX      R1
   \                     `?~Deferred_1`: (+1)
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    101          };
    102          

   \                                 In section .text, align 2, keep-with-next
    103          static void dodelete(const char *data)
    104          {
   \                     _Z8dodeletePKc: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    105              delete[] data;
   \   00000002   0x.... 0x....      BL       _ZdaPv
    106          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    107          
    108          // Adds prefix needed internally by fatfs, this can be avoided for the first fatfs
    109          // (id 0) otherwise a prefix of "id:/" is inserted in front of the string.
    110          static Deferred<const char*> fat_path_prefix(int id, const char *path)
    111          {
    112              // We can avoid dynamic allocation when only on fatfs is in use
    113              if (id == 0) {
    114                  return path;
    115              }
    116          
    117              // Prefix path with id, will look something like 2:/hi/hello/filehere.txt
    118              char *buffer = new char[strlen("0:/") + strlen(path) + 1];
    119              if (!buffer) {
    120                  return NULL;
    121              }
    122          
    123              buffer[0] = '0' + id;
    124              buffer[1] = ':';
    125              buffer[2] = '/';
    126              strcpy(buffer + strlen("0:/"), path);
    127              return Deferred<const char*>(buffer, dodelete);
    128          }
    129          
    130          
    131          ////// Disk operations //////
    132          
    133          // Global access to block device from FAT driver

   \                                 In section .bss, align 4
    134          static BlockDevice *_ffs[_VOLUMES] = {0};
   \                     _ffs:
   \   00000000                      DS8 16
   \   00000010                      DS8 40
    135          static SingletonPtr<PlatformMutex> _ffs_mutex;
    136          
    137          
    138          // FAT driver functions

   \                                 In section .text, align 2, keep-with-next
    139          DWORD get_fattime(void)
    140          {
   \                     get_fattime: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    141              time_t rawtime;
    142              time(&rawtime);
   \   00000002   0x4668             MOV      R0,SP
   \   00000004   0x.... 0x....      BL       __time32
    143              struct tm *ptm = localtime(&rawtime);
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x.... 0x....      BL       __localtime32
    144              return (DWORD)(ptm->tm_year - 80) << 25
    145                     | (DWORD)(ptm->tm_mon + 1  ) << 21
    146                     | (DWORD)(ptm->tm_mday     ) << 16
    147                     | (DWORD)(ptm->tm_hour     ) << 11
    148                     | (DWORD)(ptm->tm_min      ) << 5
    149                     | (DWORD)(ptm->tm_sec/2    );
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   \   00000010   0x6942             LDR      R2,[R0, #+20]
   \   00000012   0x3A50             SUBS     R2,R2,#+80
   \   00000014   0x0652             LSLS     R2,R2,#+25
   \   00000016   0x6903             LDR      R3,[R0, #+16]
   \   00000018   0x1C5B             ADDS     R3,R3,#+1
   \   0000001A   0x055B             LSLS     R3,R3,#+21
   \   0000001C   0x4313             ORRS     R3,R3,R2
   \   0000001E   0x68C2             LDR      R2,[R0, #+12]
   \   00000020   0x0412             LSLS     R2,R2,#+16
   \   00000022   0x431A             ORRS     R2,R2,R3
   \   00000024   0x6883             LDR      R3,[R0, #+8]
   \   00000026   0x02DB             LSLS     R3,R3,#+11
   \   00000028   0x4313             ORRS     R3,R3,R2
   \   0000002A   0x6840             LDR      R0,[R0, #+4]
   \   0000002C   0x0142             LSLS     R2,R0,#+5
   \   0000002E   0x431A             ORRS     R2,R2,R3
   \   00000030   0x0FC8             LSRS     R0,R1,#+31
   \   00000032   0x1840             ADDS     R0,R0,R1
   \   00000034   0x1040             ASRS     R0,R0,#+1
   \   00000036   0x4310             ORRS     R0,R0,R2
   \   00000038   0xBD02             POP      {R1,PC}          ;; return
    150          }
    151          

   \                                 In section .text, align 2, keep-with-next
    152          void *ff_memalloc(UINT size)
    153          {
   \                     ff_memalloc: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    154              return malloc(size);
   \   00000002   0x.... 0x....      BL       malloc
   \   00000006   0xBD02             POP      {R1,PC}          ;; return
    155          }
    156          

   \                                 In section .text, align 2, keep-with-next
    157          void ff_memfree(void *p)
    158          {
   \                     ff_memfree: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    159              free(p);
   \   00000002   0x.... 0x....      BL       free
    160          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    161          
    162          // Implementation of diskio functions (see ChaN/diskio.h)

   \                                 In section .text, align 4, keep-with-next
    163          static WORD disk_get_sector_size(BYTE pdrv)
    164          {
   \                     _Z20disk_get_sector_sizeh: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    165              WORD ssize = _ffs[pdrv]->get_erase_size();
   \   00000002   0x....             LDR      R1,??DataTable26_2
   \   00000004   0x0080             LSLS     R0,R0,#+2
   \   00000006   0x180F             ADDS     R7,R1,R0
   \   00000008   0x6838             LDR      R0,[R7, #+0]
   \   0000000A   0x6801             LDR      R1,[R0, #+0]
   \   0000000C   0x6A89             LDR      R1,[R1, #+40]
   \   0000000E   0x4788             BLX      R1
   \   00000010   0x0006             MOVS     R6,R0
    166              if (ssize < 512) {
   \   00000012   0x2080             MOVS     R0,#+128
   \   00000014   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   00000016   0xB2B6             UXTH     R6,R6
   \   00000018   0x4286             CMP      R6,R0
   \   0000001A   0xDA00             BGE      ??disk_get_sector_size_0
    167                  ssize = 512;
   \   0000001C   0x0006             MOVS     R6,R0
    168              }
    169          
    170              MBED_ASSERT(ssize >= _MIN_SS && ssize <= _MAX_SS);
   \                     ??disk_get_sector_size_0: (+1)
   \   0000001E   0x....             LDR      R0,??DataTable26_3  ;; 0xfffffe00
   \   00000020   0x1830             ADDS     R0,R6,R0
   \   00000022   0x....             LDR      R1,??DataTable26_4  ;; 0xe01
   \   00000024   0x4288             CMP      R0,R1
   \   00000026   0xD304             BCC      ??disk_get_sector_size_1
   \   00000028   0x22AA             MOVS     R2,#+170
   \   0000002A   0x....             LDR      R1,??DataTable26_5
   \   0000002C   0x....             ADR.N    R0,?_1
   \   0000002E   0x.... 0x....      BL       mbed_assert_internal
    171              MBED_ASSERT(_ffs[pdrv]->get_read_size() <= _ffs[pdrv]->get_erase_size());
   \                     ??disk_get_sector_size_1: (+1)
   \   00000032   0x6838             LDR      R0,[R7, #+0]
   \   00000034   0x6801             LDR      R1,[R0, #+0]
   \   00000036   0x6A89             LDR      R1,[R1, #+40]
   \   00000038   0x4788             BLX      R1
   \   0000003A   0x0004             MOVS     R4,R0
   \   0000003C   0x000D             MOVS     R5,R1
   \   0000003E   0x6838             LDR      R0,[R7, #+0]
   \   00000040   0x6801             LDR      R1,[R0, #+0]
   \   00000042   0x6A09             LDR      R1,[R1, #+32]
   \   00000044   0x4788             BLX      R1
   \   00000046   0x428D             CMP      R5,R1
   \   00000048   0xD807             BHI      ??disk_get_sector_size_2
   \   0000004A   0xD301             BCC      ??disk_get_sector_size_3
   \   0000004C   0x4284             CMP      R4,R0
   \   0000004E   0xD204             BCS      ??disk_get_sector_size_2
   \                     ??disk_get_sector_size_3: (+1)
   \   00000050   0x22AB             MOVS     R2,#+171
   \   00000052   0x....             LDR      R1,??DataTable26_5
   \   00000054   0x....             ADR.N    R0,?_3
   \   00000056   0x.... 0x....      BL       mbed_assert_internal
    172              MBED_ASSERT(_ffs[pdrv]->get_program_size() <= _ffs[pdrv]->get_erase_size());
   \                     ??disk_get_sector_size_2: (+1)
   \   0000005A   0x6838             LDR      R0,[R7, #+0]
   \   0000005C   0x6801             LDR      R1,[R0, #+0]
   \   0000005E   0x6A89             LDR      R1,[R1, #+40]
   \   00000060   0x4788             BLX      R1
   \   00000062   0x0004             MOVS     R4,R0
   \   00000064   0x000D             MOVS     R5,R1
   \   00000066   0x6838             LDR      R0,[R7, #+0]
   \   00000068   0x6801             LDR      R1,[R0, #+0]
   \   0000006A   0x6A49             LDR      R1,[R1, #+36]
   \   0000006C   0x4788             BLX      R1
   \   0000006E   0x428D             CMP      R5,R1
   \   00000070   0xD807             BHI      ??disk_get_sector_size_4
   \   00000072   0xD301             BCC      ??disk_get_sector_size_5
   \   00000074   0x4284             CMP      R4,R0
   \   00000076   0xD204             BCS      ??disk_get_sector_size_4
   \                     ??disk_get_sector_size_5: (+1)
   \   00000078   0x22AC             MOVS     R2,#+172
   \   0000007A   0x....             LDR      R1,??DataTable26_5
   \   0000007C   0x....             ADR.N    R0,?_4
   \   0000007E   0x.... 0x....      BL       mbed_assert_internal
    173              return ssize;
   \                     ??disk_get_sector_size_4: (+1)
   \   00000082   0x0030             MOVS     R0,R6
   \   00000084   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    174          }
    175          
    176          static DWORD disk_get_sector_count(BYTE pdrv)
    177          {
    178              DWORD scount = _ffs[pdrv]->size() / disk_get_sector_size(pdrv);
    179              MBED_ASSERT(scount >= 64);
    180              return scount;
    181          }
    182          

   \                                 In section .text, align 4, keep-with-next
    183          DSTATUS disk_status(BYTE pdrv)
    184          {
   \                     disk_status: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    185              debug_if(FFS_DBG, "disk_status on pdrv [%d]\n", pdrv);
   \   00000002   0x0002             MOVS     R2,R0
   \   00000004   0x....             ADR.N    R1,?_6
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       _Z8debug_ifiPKcz
    186              return RES_OK;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xBD02             POP      {R1,PC}          ;; return
    187          }
    188          

   \                                 In section .text, align 4, keep-with-next
    189          DSTATUS disk_initialize(BYTE pdrv)
    190          {
   \                     disk_initialize: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    191              debug_if(FFS_DBG, "disk_initialize on pdrv [%d]\n", pdrv);
   \   00000004   0x0022             MOVS     R2,R4
   \   00000006   0xBF00             Nop      
   \   00000008   0x....             ADR.N    R1,?_7
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      BL       _Z8debug_ifiPKcz
    192              return (DSTATUS)_ffs[pdrv]->init();
   \   00000010   0x....             LDR      R0,??DataTable26_2
   \   00000012   0x00A1             LSLS     R1,R4,#+2
   \   00000014   0x5840             LDR      R0,[R0, R1]
   \   00000016   0x6801             LDR      R1,[R0, #+0]
   \   00000018   0x6889             LDR      R1,[R1, #+8]
   \   0000001A   0x4788             BLX      R1
   \   0000001C   0xB2C0             UXTB     R0,R0
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
    193          }
    194          

   \                                 In section .text, align 4, keep-with-next
    195          DRESULT disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
    196          {
   \                     disk_read: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000F             MOVS     R7,R1
   \   00000008   0x0014             MOVS     R4,R2
   \   0000000A   0x001E             MOVS     R6,R3
    197              debug_if(FFS_DBG, "disk_read(sector %d, count %d) on pdrv [%d]\n", sector, count, pdrv);
   \   0000000C   0x9500             STR      R5,[SP, #+0]
   \   0000000E   0xBF00             Nop      
   \   00000010   0x....             ADR.N    R1,?_8
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       _Z8debug_ifiPKcz
    198              DWORD ssize = disk_get_sector_size(pdrv);
   \   00000018   0x0028             MOVS     R0,R5
   \   0000001A   0x.... 0x....      BL       _Z20disk_get_sector_sizeh
   \   0000001E   0x0001             MOVS     R1,R0
    199              int err = _ffs[pdrv]->read(buff, sector*ssize, count*ssize);
    200              return err ? RES_PARERR : RES_OK;
   \   00000020   0x....             LDR      R0,??DataTable26_2
   \   00000022   0x00AA             LSLS     R2,R5,#+2
   \   00000024   0x5880             LDR      R0,[R0, R2]
   \   00000026   0x434E             MULS     R6,R1,R6
   \   00000028   0x2300             MOVS     R3,#+0
   \   0000002A   0x9600             STR      R6,[SP, #+0]
   \   0000002C   0x9301             STR      R3,[SP, #+4]
   \   0000002E   0x434C             MULS     R4,R1,R4
   \   00000030   0x0022             MOVS     R2,R4
   \   00000032   0x0039             MOVS     R1,R7
   \   00000034   0x6804             LDR      R4,[R0, #+0]
   \   00000036   0x6924             LDR      R4,[R4, #+16]
   \   00000038   0x47A0             BLX      R4
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD000             BEQ      ??disk_read_0
   \   0000003E   0x2004             MOVS     R0,#+4
   \                     ??disk_read_0: (+1)
   \   00000040   0xB003             ADD      SP,SP,#+12
   \   00000042   0xBDF0             POP      {R4-R7,PC}       ;; return
    201          }
    202          

   \                                 In section .text, align 4, keep-with-next
    203          DRESULT disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
    204          {
   \                     disk_write: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000F             MOVS     R7,R1
   \   00000008   0x0015             MOVS     R5,R2
   \   0000000A   0x001E             MOVS     R6,R3
    205              debug_if(FFS_DBG, "disk_write(sector %d, count %d) on pdrv [%d]\n", sector, count, pdrv);
   \   0000000C   0x9400             STR      R4,[SP, #+0]
   \   0000000E   0xBF00             Nop      
   \   00000010   0x....             ADR.N    R1,?_9
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       _Z8debug_ifiPKcz
    206              DWORD ssize = disk_get_sector_size(pdrv);
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x.... 0x....      BL       _Z20disk_get_sector_sizeh
   \   0000001E   0x0001             MOVS     R1,R0
    207              int err = _ffs[pdrv]->erase(sector*ssize, count*ssize);
    208              if (err) {
   \   00000020   0x....             LDR      R0,??DataTable26_2
   \   00000022   0x00A2             LSLS     R2,R4,#+2
   \   00000024   0x1880             ADDS     R0,R0,R2
   \   00000026   0x9002             STR      R0,[SP, #+8]
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x002C             MOVS     R4,R5
   \   0000002C   0x434C             MULS     R4,R1,R4
   \   0000002E   0xAA04             ADD      R2,SP,#+16
   \   00000030   0x4694             MOV      R12,R2
   \   00000032   0x434E             MULS     R6,R1,R6
   \   00000034   0x0032             MOVS     R2,R6
   \   00000036   0x2300             MOVS     R3,#+0
   \   00000038   0x4661             MOV      R1,R12
   \   0000003A   0xC10C             STM      R1!,{R2,R3}
   \   0000003C   0x9200             STR      R2,[SP, #+0]
   \   0000003E   0x9301             STR      R3,[SP, #+4]
   \   00000040   0x0022             MOVS     R2,R4
   \   00000042   0x6801             LDR      R1,[R0, #+0]
   \   00000044   0x6989             LDR      R1,[R1, #+24]
   \   00000046   0x4788             BLX      R1
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD10D             BNE      ??disk_write_0
    209                  return RES_PARERR;
    210              }
    211          
    212              err = _ffs[pdrv]->program(buff, sector*ssize, count*ssize);
    213              if (err) {
   \   0000004C   0x9802             LDR      R0,[SP, #+8]
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0xA904             ADD      R1,SP,#+16
   \   00000052   0xC90C             LDM      R1!,{R2,R3}
   \   00000054   0x9200             STR      R2,[SP, #+0]
   \   00000056   0x9301             STR      R3,[SP, #+4]
   \   00000058   0x0022             MOVS     R2,R4
   \   0000005A   0x2300             MOVS     R3,#+0
   \   0000005C   0x0039             MOVS     R1,R7
   \   0000005E   0x6804             LDR      R4,[R0, #+0]
   \   00000060   0x6964             LDR      R4,[R4, #+20]
   \   00000062   0x47A0             BLX      R4
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD000             BEQ      ??disk_write_1
    214                  return RES_PARERR;
   \                     ??disk_write_0: (+1)
   \   00000068   0x2004             MOVS     R0,#+4
    215              }
    216          
    217              return RES_OK;
   \                     ??disk_write_1: (+1)
   \   0000006A   0xB007             ADD      SP,SP,#+28
   \   0000006C   0xBDF0             POP      {R4-R7,PC}       ;; return
    218          }
    219          

   \                                 In section .text, align 4, keep-with-next
    220          DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void *buff)
    221          {
   \                     disk_ioctl: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000E             MOVS     R6,R1
   \   00000008   0x0015             MOVS     R5,R2
    222              debug_if(FFS_DBG, "disk_ioctl(%d)\n", cmd);
   \   0000000A   0x0032             MOVS     R2,R6
   \   0000000C   0x....             ADR.N    R1,?_10
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       _Z8debug_ifiPKcz
    223              switch (cmd) {
   \   00000014   0x2E00             CMP      R6,#+0
   \   00000016   0xD006             BEQ      ??disk_ioctl_0
   \   00000018   0x2E02             CMP      R6,#+2
   \   0000001A   0xD02A             BEQ      ??disk_ioctl_1
   \   0000001C   0xD309             BCC      ??disk_ioctl_2
   \   0000001E   0x2E04             CMP      R6,#+4
   \   00000020   0xD035             BEQ      ??disk_ioctl_3
   \   00000022   0xD330             BCC      ??disk_ioctl_4
   \   00000024   0xE04F             B        ??disk_ioctl_5
    224                  case CTRL_SYNC:
    225                      if (_ffs[pdrv] == NULL) {
   \                     ??disk_ioctl_0: (+1)
   \   00000026   0x....             LDR      R0,??DataTable31
   \   00000028   0x00A1             LSLS     R1,R4,#+2
   \   0000002A   0x5840             LDR      R0,[R0, R1]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD12C             BNE      ??disk_ioctl_6
    226                          return RES_NOTRDY;
   \   00000030   0xE033             B.N      ??disk_ioctl_7
    227                      } else {
    228                          return RES_OK;
    229                      }
    230                  case GET_SECTOR_COUNT:
    231                      if (_ffs[pdrv] == NULL) {
   \                     ??disk_ioctl_2: (+1)
   \   00000032   0x....             LDR      R0,??DataTable31
   \   00000034   0x00A1             LSLS     R1,R4,#+2
   \   00000036   0x1846             ADDS     R6,R0,R1
   \   00000038   0x6830             LDR      R0,[R6, #+0]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD02D             BEQ      ??disk_ioctl_7
    232                          return RES_NOTRDY;
    233                      } else {
    234                          *((DWORD*)buff) = disk_get_sector_count(pdrv);
   \   0000003E   0x6801             LDR      R1,[R0, #+0]
   \   00000040   0x6AC9             LDR      R1,[R1, #+44]
   \   00000042   0x4788             BLX      R1
   \   00000044   0x0006             MOVS     R6,R0
   \   00000046   0x000F             MOVS     R7,R1
   \   00000048   0x0020             MOVS     R0,R4
   \   0000004A   0x.... 0x....      BL       _Z20disk_get_sector_sizeh
   \   0000004E   0x0002             MOVS     R2,R0
   \   00000050   0x2300             MOVS     R3,#+0
   \   00000052   0x0030             MOVS     R0,R6
   \   00000054   0x0039             MOVS     R1,R7
   \   00000056   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000005A   0x0004             MOVS     R4,R0
   \   0000005C   0x2C40             CMP      R4,#+64
   \   0000005E   0xD206             BCS      ??disk_ioctl_8
   \   00000060   0x22B3             MOVS     R2,#+179
   \   00000062   0xBF00             Nop      
   \   00000064   0x....             ADR.N    R1,?_2
   \   00000066   0xBF00             Nop      
   \   00000068   0x....             ADR.N    R0,?_5
   \   0000006A   0x.... 0x....      BL       mbed_assert_internal
   \                     ??disk_ioctl_8: (+1)
   \   0000006E   0x602C             STR      R4,[R5, #+0]
    235                          return RES_OK;
   \   00000070   0xE00B             B.N      ??disk_ioctl_6
    236                      }
    237                  case GET_SECTOR_SIZE:
    238                      if (_ffs[pdrv] == NULL) {
   \                     ??disk_ioctl_1: (+1)
   \   00000072   0x....             LDR      R0,??DataTable31
   \   00000074   0x00A1             LSLS     R1,R4,#+2
   \   00000076   0x5840             LDR      R0,[R0, R1]
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD00E             BEQ      ??disk_ioctl_7
    239                          return RES_NOTRDY;
    240                      } else {
    241                          *((WORD*)buff) = disk_get_sector_size(pdrv);
   \   0000007C   0x0020             MOVS     R0,R4
   \   0000007E   0x.... 0x....      BL       _Z20disk_get_sector_sizeh
   \   00000082   0x8028             STRH     R0,[R5, #+0]
    242                          return RES_OK;
   \   00000084   0xE001             B.N      ??disk_ioctl_6
    243                      }
    244                  case GET_BLOCK_SIZE:
    245                      *((DWORD*)buff) = 1; // default when not known
   \                     ??disk_ioctl_4: (+1)
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0x6028             STR      R0,[R5, #+0]
    246                      return RES_OK;
   \                     ??disk_ioctl_6: (+1)
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0xE01C             B        ??disk_ioctl_9
    247                  case CTRL_TRIM:
    248                      if (_ffs[pdrv] == NULL) {
   \                     ??disk_ioctl_3: (+1)
   \   0000008E   0x....             LDR      R0,??DataTable31
   \   00000090   0x00A1             LSLS     R1,R4,#+2
   \   00000092   0x1846             ADDS     R6,R0,R1
   \   00000094   0x6830             LDR      R0,[R6, #+0]
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD101             BNE      ??disk_ioctl_10
    249                          return RES_NOTRDY;
   \                     ??disk_ioctl_7: (+1)
   \   0000009A   0x2003             MOVS     R0,#+3
   \   0000009C   0xE014             B        ??disk_ioctl_9
    250                      } else {
    251                          DWORD *sectors = (DWORD*)buff;
    252                          DWORD ssize = disk_get_sector_size(pdrv);
   \                     ??disk_ioctl_10: (+1)
   \   0000009E   0x0020             MOVS     R0,R4
   \   000000A0   0x.... 0x....      BL       _Z20disk_get_sector_sizeh
   \   000000A4   0x0001             MOVS     R1,R0
    253                          int err = _ffs[pdrv]->trim(sectors[0]*ssize, (sectors[1]-sectors[0]+1)*ssize);
    254                          return err ? RES_PARERR : RES_OK;
   \   000000A6   0x6830             LDR      R0,[R6, #+0]
   \   000000A8   0x682A             LDR      R2,[R5, #+0]
   \   000000AA   0x686B             LDR      R3,[R5, #+4]
   \   000000AC   0x1A9C             SUBS     R4,R3,R2
   \   000000AE   0x1C64             ADDS     R4,R4,#+1
   \   000000B0   0x434C             MULS     R4,R1,R4
   \   000000B2   0x2500             MOVS     R5,#+0
   \   000000B4   0x9400             STR      R4,[SP, #+0]
   \   000000B6   0x9501             STR      R5,[SP, #+4]
   \   000000B8   0x434A             MULS     R2,R1,R2
   \   000000BA   0x2300             MOVS     R3,#+0
   \   000000BC   0x6801             LDR      R1,[R0, #+0]
   \   000000BE   0x69C9             LDR      R1,[R1, #+28]
   \   000000C0   0x4788             BLX      R1
   \   000000C2   0x2800             CMP      R0,#+0
   \   000000C4   0xD000             BEQ      ??disk_ioctl_9
    255                      }
    256              }
    257          
    258              return RES_PARERR;
   \                     ??disk_ioctl_5: (+1)
   \   000000C6   0x2004             MOVS     R0,#+4
   \                     ??disk_ioctl_9: (+1)
   \   000000C8   0xB003             ADD      SP,SP,#+12
   \   000000CA   0xBDF0             POP      {R4-R7,PC}       ;; return
    259          }
    260          
    261          
    262          ////// Generic filesystem operations //////
    263          
    264          // Filesystem implementation (See FATFilySystem.h)

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp FATFileSystem::subobject FATFileSystem(char const *, BlockDevice *)
   \                     _ZN13FATFileSystemC2EPKcP11BlockDevice: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZN13FATFileSystemC1EPKcP11BlockDevice
   \   00000006   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    265          FATFileSystem::FATFileSystem(const char *name, BlockDevice *bd)
   \                     _ZN13FATFileSystemC1EPKcP11BlockDevice: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0015             MOVS     R5,R2
    266                  : FileSystem(name), _id(-1) {
   \   00000006   0x.... 0x....      BL       _ZN4mbed10FileSystemC2EPKc
   \   0000000A   0x....             LDR      R0,??DataTable31_1
   \   0000000C   0x0001             MOVS     R1,R0
   \   0000000E   0x3108             ADDS     R1,R1,#+8
   \   00000010   0x6021             STR      R1,[R4, #+0]
   \   00000012   0x3090             ADDS     R0,R0,#+144
   \   00000014   0x6060             STR      R0,[R4, #+4]
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x43C0             MVNS     R0,R0            ;; #-1
   \   0000001A   0x6520             STR      R0,[R4, #+80]
    267              if (bd) {
   \   0000001C   0x2D00             CMP      R5,#+0
   \   0000001E   0xD004             BEQ      ??FATFileSystem_0
    268                  mount(bd);
   \   00000020   0x2201             MOVS     R2,#+1
   \   00000022   0x0029             MOVS     R1,R5
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       _ZN13FATFileSystem5mountEP11BlockDeviceb
    269              }
    270          }
   \                     ??FATFileSystem_0: (+1)
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    271          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp FATFileSystem::deleter ~FATFileSystem()
   \                     _ZN13FATFileSystemD0Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x.... 0x....      BL       _ZN13FATFileSystemD1Ev
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       _ZdlPv
   \   0000000E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp FATFileSystem::subobject ~FATFileSystem()
   \                     _ZN13FATFileSystemD2Ev: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZN13FATFileSystemD1Ev
   \   00000006   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    272          FATFileSystem::~FATFileSystem()
    273          {
   \                     _ZN13FATFileSystemD1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x....             LDR      R0,??DataTable31_1
   \   00000006   0x0001             MOVS     R1,R0
   \   00000008   0x3108             ADDS     R1,R1,#+8
   \   0000000A   0x6021             STR      R1,[R4, #+0]
   \   0000000C   0x3090             ADDS     R0,R0,#+144
   \   0000000E   0x6060             STR      R0,[R4, #+4]
    274              // nop if unmounted
    275              unmount();
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       _ZN13FATFileSystem7unmountEv
    276          }
   \   00000016   0x1D20             ADDS     R0,R4,#+4
   \   00000018   0x.... 0x....      BL       _ZN4mbed8FileBaseD2Ev
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
    277          

   \                                 In section .text, align 2, keep-with-next
    278          int FATFileSystem::mount(BlockDevice *bd) {
   \                     _ZN13FATFileSystem5mountEP11BlockDevice: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    279              // requires duplicate definition to allow virtual overload to work
    280              return mount(bd, true);
   \   00000002   0x2201             MOVS     R2,#+1
   \   00000004   0x6803             LDR      R3,[R0, #+0]
   \   00000006   0x6FDB             LDR      R3,[R3, #+124]
   \   00000008   0x4798             BLX      R3
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
    281          }
    282          

   \                                 In section .text, align 4, keep-with-next
    283          int FATFileSystem::mount(BlockDevice *bd, bool mount) {
   \                     _ZN13FATFileSystem5mountEP11BlockDeviceb: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0017             MOVS     R7,R2
    284              lock();
   \   00000006   0x6821             LDR      R1,[R4, #+0]
   \   00000008   0x6F49             LDR      R1,[R1, #+116]
   \   0000000A   0x4788             BLX      R1
    285              if (_id != -1) {
   \   0000000C   0x0026             MOVS     R6,R4
   \   0000000E   0x364C             ADDS     R6,R6,#+76
   \   00000010   0x6870             LDR      R0,[R6, #+4]
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xD005             BEQ      ??mount_1
    286                  unlock();
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x6821             LDR      R1,[R4, #+0]
   \   0000001E   0x6F89             LDR      R1,[R1, #+120]
   \   00000020   0x4788             BLX      R1
    287                  return -EINVAL;
   \   00000022   0x2015             MOVS     R0,#+21
   \   00000024   0xE057             B        ??mount_2
    288              }
    289          
    290              for (int i = 0; i < _VOLUMES; i++) {
   \                     ??mount_1: (+1)
   \   00000026   0x2500             MOVS     R5,#+0
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x....             LDR      R0,??DataTable31
    291                  if (!_ffs[i]) {
   \   0000002C   0x6802             LDR      R2,[R0, #+0]
   \   0000002E   0x2A00             CMP      R2,#+0
   \   00000030   0xD140             BNE      ??mount_3
    292                      _id = i;
   \                     ??mount_4: (+1)
   \   00000032   0x6071             STR      R1,[R6, #+4]
    293                      _ffs[_id] = bd;
   \   00000034   0x9B00             LDR      R3,[SP, #+0]
   \   00000036   0x008A             LSLS     R2,R1,#+2
   \   00000038   0x5083             STR      R3,[R0, R2]
    294                      _fsid[0] = '0' + _id;
   \   0000003A   0x3130             ADDS     R1,R1,#+48
   \   0000003C   0x7031             STRB     R1,[R6, #+0]
    295                      _fsid[1] = ':';
   \   0000003E   0x203A             MOVS     R0,#+58
   \   00000040   0x7070             STRB     R0,[R6, #+1]
    296                      _fsid[2] = '\0';
   \   00000042   0x70B5             STRB     R5,[R6, #+2]
    297                      debug_if(FFS_DBG, "Mounting [%s] on ffs drive [%s]\n", getName(), _fsid);
   \   00000044   0x1D20             ADDS     R0,R4,#+4
   \   00000046   0x.... 0x....      BL       _ZN4mbed8FileBase7getNameEv
   \   0000004A   0x0002             MOVS     R2,R0
   \   0000004C   0x0033             MOVS     R3,R6
   \   0000004E   0x....             LDR      R1,??DataTable32
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x.... 0x....      BL       _Z8debug_ifiPKcz
    298                      FRESULT res = f_mount(&_fs, _fsid, mount);
   \   00000056   0x003A             MOVS     R2,R7
   \   00000058   0x0031             MOVS     R1,R6
   \   0000005A   0x0020             MOVS     R0,R4
   \   0000005C   0x3014             ADDS     R0,R0,#+20
   \   0000005E   0x.... 0x....      BL       f_mount
   \   00000062   0x0006             MOVS     R6,R0
    299                      unlock();
   \   00000064   0x0020             MOVS     R0,R4
   \   00000066   0x6821             LDR      R1,[R4, #+0]
   \   00000068   0x6F89             LDR      R1,[R1, #+120]
   \   0000006A   0x4788             BLX      R1
    300                      return fat_error_remap(res);
   \   0000006C   0x2E13             CMP      R6,#+19
   \   0000006E   0xD81F             BHI      ??mount_5
   \   00000070   0xA001             ADR      R0,??mount_0
   \   00000072   0x5D80             LDRB     R0,[R0, R6]
   \   00000074   0x4487             ADD      PC,PC,R0
   \   00000076   0xBF00             Nop      
   \                     ??mount_0:
   \   00000078   0x34 0x30          DC8      0x34,0x30,0x38,0x30
   \              0x38 0x30    
   \   0000007C   0x2C 0x2C          DC8      0x2C,0x2C,0x2C,0x28
   \              0x2C 0x28    
   \   00000080   0x24 0x20          DC8      0x24,0x20,0x28,0x2C
   \              0x28 0x2C    
   \   00000084   0x1C 0x2C          DC8      0x1C,0x2C,0x38,0x38
   \              0x38 0x38    
   \   00000088   0x28 0x5C          DC8      0x28,0x5C,0x18,0x14
   \              0x18 0x14    
   \                     ??mount_6: (+1)
   \   0000008C   0x2007             MOVS     R0,#+7
   \   0000008E   0xE022             B        ??mount_2
   \                     ??mount_7: (+1)
   \   00000090   0x2016             MOVS     R0,#+22
   \   00000092   0xE020             B        ??mount_2
   \                     ??mount_8: (+1)
   \   00000094   0x2005             MOVS     R0,#+5
   \   00000096   0xE01E             B        ??mount_2
   \                     ??mount_9: (+1)
   \   00000098   0x200D             MOVS     R0,#+13
   \   0000009A   0xE01C             B        ??mount_2
   \                     ??mount_10: (+1)
   \   0000009C   0x2010             MOVS     R0,#+16
   \   0000009E   0xE01A             B        ??mount_2
   \                     ??mount_11: (+1)
   \   000000A0   0x200C             MOVS     R0,#+12
   \   000000A2   0xE018             B        ??mount_2
   \                     ??mount_12: (+1)
   \   000000A4   0x2001             MOVS     R0,#+1
   \   000000A6   0xE016             B        ??mount_2
   \                     ??mount_13: (+1)
   \   000000A8   0x2004             MOVS     R0,#+4
   \   000000AA   0xE014             B        ??mount_2
   \                     ??mount_14: (+1)
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0xBDF2             POP      {R1,R4-R7,PC}
   \                     ??mount_5: (+1)
   \   000000B0   0x2008             MOVS     R0,#+8
   \   000000B2   0xE010             B        ??mount_2
    301                  }
   \                     ??mount_3: (+1)
   \   000000B4   0x2101             MOVS     R1,#+1
   \   000000B6   0x6842             LDR      R2,[R0, #+4]
   \   000000B8   0x2A00             CMP      R2,#+0
   \   000000BA   0xD0BA             BEQ      ??mount_4
   \   000000BC   0x2102             MOVS     R1,#+2
   \   000000BE   0x6882             LDR      R2,[R0, #+8]
   \   000000C0   0x2A00             CMP      R2,#+0
   \   000000C2   0xD0B6             BEQ      ??mount_4
   \   000000C4   0x2103             MOVS     R1,#+3
   \   000000C6   0x68C2             LDR      R2,[R0, #+12]
   \   000000C8   0x2A00             CMP      R2,#+0
   \   000000CA   0xD0B2             BEQ      ??mount_4
    302              }
    303          
    304              unlock();
   \   000000CC   0x0020             MOVS     R0,R4
   \   000000CE   0x6821             LDR      R1,[R4, #+0]
   \   000000D0   0x6F89             LDR      R1,[R1, #+120]
   \   000000D2   0x4788             BLX      R1
    305              return -ENOMEM;
   \                     ??mount_15: (+1)
   \   000000D4   0x200B             MOVS     R0,#+11
   \                     ??mount_2: (+1)
   \   000000D6   0x43C0             MVNS     R0,R0            ;; #-12
   \   000000D8   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    306          }
    307          

   \                                 In section .text, align 4, keep-with-next
    308          int FATFileSystem::unmount()
    309          {
   \                     _ZN13FATFileSystem7unmountEv: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    310              lock();
   \   00000004   0x6821             LDR      R1,[R4, #+0]
   \   00000006   0x6F49             LDR      R1,[R1, #+116]
   \   00000008   0x4788             BLX      R1
    311              if (_id == -1) {
   \   0000000A   0x2500             MOVS     R5,#+0
   \   0000000C   0x43ED             MVNS     R5,R5            ;; #-1
   \   0000000E   0x6D20             LDR      R0,[R4, #+80]
   \   00000010   0x42A8             CMP      R0,R5
   \   00000012   0xD105             BNE      ??unmount_1
    312                  unlock();
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x6821             LDR      R1,[R4, #+0]
   \   00000018   0x6F89             LDR      R1,[R1, #+120]
   \   0000001A   0x4788             BLX      R1
    313                  return -EINVAL;
   \   0000001C   0x2015             MOVS     R0,#+21
   \   0000001E   0xE034             B        ??unmount_2
    314              }
    315          
    316              FRESULT res = f_mount(NULL, _fsid, 0);
   \                     ??unmount_1: (+1)
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0x0021             MOVS     R1,R4
   \   00000024   0x314C             ADDS     R1,R1,#+76
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      BL       f_mount
   \   0000002C   0x0007             MOVS     R7,R0
    317              _ffs[_id] = NULL;
   \   0000002E   0x2600             MOVS     R6,#+0
   \   00000030   0x....             LDR      R0,??DataTable32_1
   \   00000032   0x6D21             LDR      R1,[R4, #+80]
   \   00000034   0x0089             LSLS     R1,R1,#+2
   \   00000036   0x5046             STR      R6,[R0, R1]
    318              _id = -1;
   \   00000038   0x6525             STR      R5,[R4, #+80]
    319              unlock();
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x6821             LDR      R1,[R4, #+0]
   \   0000003E   0x6F89             LDR      R1,[R1, #+120]
   \   00000040   0x4788             BLX      R1
    320              return fat_error_remap(res);
   \   00000042   0x2F13             CMP      R7,#+19
   \   00000044   0xD820             BHI      ??unmount_3
   \   00000046   0xA001             ADR      R0,??unmount_0
   \   00000048   0x5DC0             LDRB     R0,[R0, R7]
   \   0000004A   0x4487             ADD      PC,PC,R0
   \                     ??unmount_0:
   \   0000004C   0x36 0x32          DC8      0x36,0x32,0x3A,0x32
   \              0x3A 0x32    
   \   00000050   0x2E 0x2E          DC8      0x2E,0x2E,0x2E,0x2A
   \              0x2E 0x2A    
   \   00000054   0x26 0x22          DC8      0x26,0x22,0x2A,0x2E
   \              0x2A 0x2E    
   \   00000058   0x1E 0x2E          DC8      0x1E,0x2E,0x3A,0x3A
   \              0x3A 0x3A    
   \   0000005C   0x2A 0x1A          DC8      0x2A,0x1A,0x16,0x12
   \              0x16 0x12    
   \                     ??unmount_4: (+1)
   \   00000060   0x2007             MOVS     R0,#+7
   \   00000062   0xE012             B        ??unmount_2
   \                     ??unmount_5: (+1)
   \   00000064   0x2016             MOVS     R0,#+22
   \   00000066   0xE010             B        ??unmount_2
   \                     ??unmount_6: (+1)
   \   00000068   0x200B             MOVS     R0,#+11
   \   0000006A   0xE00E             B        ??unmount_2
   \                     ??unmount_7: (+1)
   \   0000006C   0x2005             MOVS     R0,#+5
   \   0000006E   0xE00C             B        ??unmount_2
   \                     ??unmount_8: (+1)
   \   00000070   0x200D             MOVS     R0,#+13
   \   00000072   0xE00A             B        ??unmount_2
   \                     ??unmount_9: (+1)
   \   00000074   0x2010             MOVS     R0,#+16
   \   00000076   0xE008             B        ??unmount_2
   \                     ??unmount_10: (+1)
   \   00000078   0x200C             MOVS     R0,#+12
   \   0000007A   0xE006             B        ??unmount_2
   \                     ??unmount_11: (+1)
   \   0000007C   0x2001             MOVS     R0,#+1
   \   0000007E   0xE004             B        ??unmount_2
   \                     ??unmount_12: (+1)
   \   00000080   0x2004             MOVS     R0,#+4
   \   00000082   0xE002             B        ??unmount_2
   \                     ??unmount_13: (+1)
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0xBDF2             POP      {R1,R4-R7,PC}
   \                     ??unmount_3: (+1)
   \   00000088   0x2008             MOVS     R0,#+8
   \                     ??unmount_2: (+1)
   \   0000008A   0x43C0             MVNS     R0,R0            ;; #-9
   \   0000008C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    321          }
    322          
    323          /* See http://elm-chan.org/fsw/ff/en/mkfs.html for details of f_mkfs() and
    324           * associated arguments. */

   \                                 In section .text, align 4, keep-with-next
    325          int FATFileSystem::format(BlockDevice *bd, bd_size_t cluster_size) {
   \                     _ZN13FATFileSystem6formatEP11BlockDevicey: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0xB40C             PUSH     {R2,R3}
   \   00000004   0xB096             SUB      SP,SP,#+88
   \   00000006   0x0006             MOVS     R6,R0
    326              FATFileSystem fs;
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x4668             MOV      R0,SP
   \   0000000E   0x.... 0x....      BL       _ZN13FATFileSystemC1EPKcP11BlockDevice
    327              int err = fs.mount(bd, false);
   \   00000012   0x9900             LDR      R1,[SP, #+0]
   \   00000014   0x6F49             LDR      R1,[R1, #+116]
   \   00000016   0x4788             BLX      R1
   \   00000018   0x466C             MOV      R4,SP
   \   0000001A   0x6D20             LDR      R0,[R4, #+80]
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000020   0x4288             CMP      R0,R1
   \   00000022   0xD005             BEQ      ??format_2
   \   00000024   0x4668             MOV      R0,SP
   \   00000026   0x9900             LDR      R1,[SP, #+0]
   \   00000028   0x6F89             LDR      R1,[R1, #+120]
   \   0000002A   0x4788             BLX      R1
   \   0000002C   0x2515             MOVS     R5,#+21
   \   0000002E   0xE07F             B.N      ??format_3
   \                     ??format_2: (+1)
   \   00000030   0x2700             MOVS     R7,#+0
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x....             LDR      R5,??DataTable32_1
   \   00000036   0x6829             LDR      R1,[R5, #+0]
   \   00000038   0x2900             CMP      R1,#+0
   \   0000003A   0xD011             BEQ      ??format_4
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x6869             LDR      R1,[R5, #+4]
   \   00000040   0x2900             CMP      R1,#+0
   \   00000042   0xD00D             BEQ      ??format_4
   \   00000044   0x2002             MOVS     R0,#+2
   \   00000046   0x68A9             LDR      R1,[R5, #+8]
   \   00000048   0x2900             CMP      R1,#+0
   \   0000004A   0xD009             BEQ      ??format_4
   \   0000004C   0x2003             MOVS     R0,#+3
   \   0000004E   0x68E9             LDR      R1,[R5, #+12]
   \   00000050   0x2900             CMP      R1,#+0
   \   00000052   0xD005             BEQ      ??format_4
   \   00000054   0x4668             MOV      R0,SP
   \   00000056   0x9900             LDR      R1,[SP, #+0]
   \   00000058   0x6F89             LDR      R1,[R1, #+120]
   \   0000005A   0x4788             BLX      R1
   \   0000005C   0x250B             MOVS     R5,#+11
   \   0000005E   0xE067             B.N      ??format_3
   \                     ??format_4: (+1)
   \   00000060   0x6520             STR      R0,[R4, #+80]
   \   00000062   0x0081             LSLS     R1,R0,#+2
   \   00000064   0x506E             STR      R6,[R5, R1]
   \   00000066   0x3030             ADDS     R0,R0,#+48
   \   00000068   0x214C             MOVS     R1,#+76
   \   0000006A   0x5460             STRB     R0,[R4, R1]
   \   0000006C   0x203A             MOVS     R0,#+58
   \   0000006E   0x214D             MOVS     R1,#+77
   \   00000070   0x5460             STRB     R0,[R4, R1]
   \   00000072   0x214E             MOVS     R1,#+78
   \   00000074   0x5467             STRB     R7,[R4, R1]
   \   00000076   0x1D20             ADDS     R0,R4,#+4
   \   00000078   0x.... 0x....      BL       _ZN4mbed8FileBase7getNameEv
   \   0000007C   0x0002             MOVS     R2,R0
   \   0000007E   0x0023             MOVS     R3,R4
   \   00000080   0x334C             ADDS     R3,R3,#+76
   \   00000082   0xBF00             Nop      
   \   00000084   0x....             ADR.N    R1,?_21
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0x.... 0x....      BL       _Z8debug_ifiPKcz
   \   0000008C   0x2200             MOVS     R2,#+0
   \   0000008E   0x0021             MOVS     R1,R4
   \   00000090   0x314C             ADDS     R1,R1,#+76
   \   00000092   0x0020             MOVS     R0,R4
   \   00000094   0x3014             ADDS     R0,R0,#+20
   \   00000096   0x.... 0x....      BL       f_mount
   \   0000009A   0x0006             MOVS     R6,R0
   \   0000009C   0x4668             MOV      R0,SP
   \   0000009E   0x9900             LDR      R1,[SP, #+0]
   \   000000A0   0x6F89             LDR      R1,[R1, #+120]
   \   000000A2   0x4788             BLX      R1
   \   000000A4   0x2E13             CMP      R6,#+19
   \   000000A6   0xD842             BHI      ??format_5
   \   000000A8   0xA001             ADR      R0,??format_0
   \   000000AA   0x5D80             LDRB     R0,[R0, R6]
   \   000000AC   0x4487             ADD      PC,PC,R0
   \   000000AE   0xBF00             Nop      
   \                     ??format_0:
   \   000000B0   0x38 0x34          DC8      0x38,0x34,0x7E,0x34
   \              0x7E 0x34    
   \   000000B4   0x30 0x30          DC8      0x30,0x30,0x30,0x2C
   \              0x30 0x2C    
   \   000000B8   0x28 0x24          DC8      0x28,0x24,0x2C,0x30
   \              0x2C 0x30    
   \   000000BC   0x20 0x30          DC8      0x20,0x30,0x7E,0x7E
   \              0x7E 0x7E    
   \   000000C0   0x2C 0x1C          DC8      0x2C,0x1C,0x18,0x14
   \              0x18 0x14    
   \                     ??format_6: (+1)
   \   000000C4   0x2507             MOVS     R5,#+7
   \   000000C6   0xE033             B.N      ??format_3
   \                     ??format_7: (+1)
   \   000000C8   0x2516             MOVS     R5,#+22
   \   000000CA   0xE031             B.N      ??format_3
   \                     ??format_8: (+1)
   \   000000CC   0x250B             MOVS     R5,#+11
   \   000000CE   0xE02F             B.N      ??format_3
   \                     ??format_9: (+1)
   \   000000D0   0x2505             MOVS     R5,#+5
   \   000000D2   0xE02D             B.N      ??format_3
   \                     ??format_10: (+1)
   \   000000D4   0x250D             MOVS     R5,#+13
   \   000000D6   0xE02B             B.N      ??format_3
   \                     ??format_11: (+1)
   \   000000D8   0x2510             MOVS     R5,#+16
   \   000000DA   0xE029             B.N      ??format_3
   \                     ??format_12: (+1)
   \   000000DC   0x250C             MOVS     R5,#+12
   \   000000DE   0xE027             B.N      ??format_3
   \                     ??format_13: (+1)
   \   000000E0   0x2501             MOVS     R5,#+1
   \   000000E2   0xE025             B.N      ??format_3
   \                     ??format_14: (+1)
   \   000000E4   0x2504             MOVS     R5,#+4
   \   000000E6   0xE023             B.N      ??format_3
    328              if (err) {
    329                  return err;
    330              }
    331          
    332              // Logical drive number, Partitioning rule, Allocation unit size (bytes per cluster)
    333              fs.lock();
   \                     ??format_15: (+1)
   \   000000E8   0x0028             MOVS     R0,R5
   \   000000EA   0x3010             ADDS     R0,R0,#+16
   \   000000EC   0x.... 0x....      BL       _ZN12SingletonPtrIN4rtos5MutexEEptEv
   \   000000F0   0x2100             MOVS     R1,#+0
   \   000000F2   0x43C9             MVNS     R1,R1            ;; #-1
   \   000000F4   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
    334              FRESULT res = f_mkfs(fs._fsid, 1, cluster_size);
   \   000000F8   0xA816             ADD      R0,SP,#+88
   \   000000FA   0xC803             LDM      R0,{R0,R1}
   \   000000FC   0x0002             MOVS     R2,R0
   \   000000FE   0x2101             MOVS     R1,#+1
   \   00000100   0x0020             MOVS     R0,R4
   \   00000102   0x304C             ADDS     R0,R0,#+76
   \   00000104   0x.... 0x....      BL       f_mkfs
   \   00000108   0x0006             MOVS     R6,R0
    335              fs.unlock();
   \   0000010A   0x0028             MOVS     R0,R5
   \   0000010C   0x3010             ADDS     R0,R0,#+16
   \   0000010E   0x.... 0x....      BL       _ZN12SingletonPtrIN4rtos5MutexEEptEv
   \   00000112   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
    336              if (res != FR_OK) {
   \   00000116   0x0030             MOVS     R0,R6
   \   00000118   0xD10C             BNE      ??format_16
    337                  return fat_error_remap(res);
    338              }
    339          
    340              err = fs.unmount();
   \   0000011A   0x4668             MOV      R0,SP
   \   0000011C   0x.... 0x....      BL       _ZN13FATFileSystem7unmountEv
   \   00000120   0x0005             MOVS     R5,R0
    341              if (err) {
   \   00000122   0xD030             BEQ      ??format_17
    342                  return err;
   \                     ??format_18: (+1)
   \   00000124   0x4668             MOV      R0,SP
   \   00000126   0x.... 0x....      BL       _ZN13FATFileSystemD1Ev
   \   0000012A   0x0028             MOVS     R0,R5
   \   0000012C   0xE038             B        ??format_19
    343              }
   \                     ??format_5: (+1)
   \   0000012E   0x2508             MOVS     R5,#+8
   \                     ??format_3: (+1)
   \   00000130   0x43ED             MVNS     R5,R5            ;; #-9
   \   00000132   0xE7F7             B        ??format_18
   \                     ??format_16: (+1)
   \   00000134   0x2E13             CMP      R6,#+19
   \   00000136   0xD81F             BHI      ??format_20
   \   00000138   0xA001             ADR      R0,??format_1
   \   0000013A   0x5D80             LDRB     R0,[R0, R6]
   \   0000013C   0x4487             ADD      PC,PC,R0
   \   0000013E   0xBF00             Nop      
   \                     ??format_1:
   \   00000140   0x3C 0x34          DC8      0x3C,0x34,0x38,0x34
   \              0x38 0x34    
   \   00000144   0x30 0x30          DC8      0x30,0x30,0x30,0x2C
   \              0x30 0x2C    
   \   00000148   0x28 0x24          DC8      0x28,0x24,0x2C,0x30
   \              0x2C 0x30    
   \   0000014C   0x20 0x30          DC8      0x20,0x30,0x38,0x38
   \              0x38 0x38    
   \   00000150   0x2C 0x1C          DC8      0x2C,0x1C,0x18,0x14
   \              0x18 0x14    
   \                     ??format_21: (+1)
   \   00000154   0x2707             MOVS     R7,#+7
   \   00000156   0xE010             B        ??format_22
   \                     ??format_23: (+1)
   \   00000158   0x2716             MOVS     R7,#+22
   \   0000015A   0xE00E             B        ??format_22
   \                     ??format_24: (+1)
   \   0000015C   0x270B             MOVS     R7,#+11
   \   0000015E   0xE00C             B        ??format_22
   \                     ??format_25: (+1)
   \   00000160   0x2705             MOVS     R7,#+5
   \   00000162   0xE00A             B        ??format_22
   \                     ??format_26: (+1)
   \   00000164   0x270D             MOVS     R7,#+13
   \   00000166   0xE008             B        ??format_22
   \                     ??format_27: (+1)
   \   00000168   0x2710             MOVS     R7,#+16
   \   0000016A   0xE006             B        ??format_22
   \                     ??format_28: (+1)
   \   0000016C   0x270C             MOVS     R7,#+12
   \   0000016E   0xE004             B        ??format_22
   \                     ??format_29: (+1)
   \   00000170   0x2701             MOVS     R7,#+1
   \   00000172   0xE002             B        ??format_22
   \                     ??format_30: (+1)
   \   00000174   0x2704             MOVS     R7,#+4
   \   00000176   0xE000             B        ??format_22
   \                     ??format_20: (+1)
   \   00000178   0x2708             MOVS     R7,#+8
   \                     ??format_22: (+1)
   \   0000017A   0x43FF             MVNS     R7,R7            ;; #-9
   \                     ??format_31: (+1)
   \   0000017C   0x4668             MOV      R0,SP
   \   0000017E   0x.... 0x....      BL       _ZN13FATFileSystemD1Ev
   \   00000182   0x0038             MOVS     R0,R7
   \   00000184   0xE00C             B        ??format_19
    344          
    345              return 0;
   \                     ??format_17: (+1)
   \   00000186   0x....             LDR      R0,??DataTable33
   \   00000188   0x0001             MOVS     R1,R0
   \   0000018A   0x3108             ADDS     R1,R1,#+8
   \   0000018C   0x9100             STR      R1,[SP, #+0]
   \   0000018E   0x3090             ADDS     R0,R0,#+144
   \   00000190   0x9001             STR      R0,[SP, #+4]
   \   00000192   0x4668             MOV      R0,SP
   \   00000194   0x.... 0x....      BL       _ZN13FATFileSystem7unmountEv
   \   00000198   0x1D20             ADDS     R0,R4,#+4
   \   0000019A   0x.... 0x....      BL       _ZN4mbed8FileBaseD2Ev
   \   0000019E   0x2000             MOVS     R0,#+0
   \                     ??format_19: (+1)
   \   000001A0   0xB019             ADD      SP,SP,#+100
   \   000001A2   0xBDF0             POP      {R4-R7,PC}       ;; return
    346          }
    347          

   \                                 In section .text, align 2, keep-with-next
    348          int FATFileSystem::reformat(BlockDevice *bd, int allocation_unit) {
   \                     _ZN13FATFileSystem8reformatEP11BlockDevicei: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0017             MOVS     R7,R2
    349              lock();
   \   00000008   0x6821             LDR      R1,[R4, #+0]
   \   0000000A   0x6F49             LDR      R1,[R1, #+116]
   \   0000000C   0x4788             BLX      R1
    350              if (_id != -1) {
   \   0000000E   0x6D20             LDR      R0,[R4, #+80]
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000014   0x4288             CMP      R0,R1
   \   00000016   0xD00A             BEQ      ??reformat_0
    351                  if (!bd) {
   \   00000018   0x2D00             CMP      R5,#+0
   \   0000001A   0xD102             BNE      ??reformat_1
    352                      bd = _ffs[_id];
   \   0000001C   0x....             LDR      R1,??DataTable35
   \   0000001E   0x0080             LSLS     R0,R0,#+2
   \   00000020   0x580D             LDR      R5,[R1, R0]
    353                  }
    354          
    355                  int err = unmount();
   \                     ??reformat_1: (+1)
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x6821             LDR      R1,[R4, #+0]
   \   00000026   0x6A49             LDR      R1,[R1, #+36]
   \   00000028   0x4788             BLX      R1
   \   0000002A   0x0006             MOVS     R6,R0
    356                  if (err) {
   \   0000002C   0xD118             BNE      ??reformat_2
    357                      unlock();
    358                      return err;
    359                  }
    360              }
    361          
    362              if (!bd) {
   \                     ??reformat_0: (+1)
   \   0000002E   0x2D00             CMP      R5,#+0
   \   00000030   0xD106             BNE      ??reformat_3
    363                  unlock();
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0x6821             LDR      R1,[R4, #+0]
   \   00000036   0x6F89             LDR      R1,[R1, #+120]
   \   00000038   0x4788             BLX      R1
    364                  return -ENODEV;
   \   0000003A   0x2012             MOVS     R0,#+18
   \   0000003C   0x43C0             MVNS     R0,R0            ;; #-19
   \   0000003E   0xBDF2             POP      {R1,R4-R7,PC}
    365              }
    366          
    367              int err = FATFileSystem::format(bd, allocation_unit);
   \                     ??reformat_3: (+1)
   \   00000040   0x003A             MOVS     R2,R7
   \   00000042   0x17FB             ASRS     R3,R7,#+31
   \   00000044   0x0028             MOVS     R0,R5
   \   00000046   0x.... 0x....      BL       _ZN13FATFileSystem6formatEP11BlockDevicey
   \   0000004A   0x0006             MOVS     R6,R0
    368              if (err) {
   \   0000004C   0x6822             LDR      R2,[R4, #+0]
   \   0000004E   0xD002             BEQ      ??reformat_4
    369                  unlock();
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0x6F91             LDR      R1,[R2, #+120]
   \   00000054   0xE007             B        ??reformat_5
    370                  return err;
    371              }
    372          
    373              err = mount(bd);
   \                     ??reformat_4: (+1)
   \   00000056   0x0029             MOVS     R1,R5
   \   00000058   0x0020             MOVS     R0,R4
   \   0000005A   0x6A12             LDR      R2,[R2, #+32]
   \   0000005C   0x4790             BLX      R2
   \   0000005E   0x0006             MOVS     R6,R0
    374              unlock();
   \                     ??reformat_2: (+1)
   \   00000060   0x0020             MOVS     R0,R4
   \   00000062   0x6821             LDR      R1,[R4, #+0]
   \   00000064   0x6F89             LDR      R1,[R1, #+120]
   \                     ??reformat_5: (+1)
   \   00000066   0x4788             BLX      R1
    375              return err;
   \   00000068   0x0030             MOVS     R0,R6
   \   0000006A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    376          }
    377          

   \                                 In section .text, align 4, keep-with-next
    378          int FATFileSystem::remove(const char *path) {
   \                     _ZN13FATFileSystem6removeEPKc: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
    379              Deferred<const char*> fpath = fat_path_prefix(_id, path);
   \   00000006   0x000A             MOVS     R2,R1
   \   00000008   0x6D21             LDR      R1,[R4, #+80]
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x.... 0x....      BL       _Z15fat_path_prefixiPKc
    380          
    381              lock();
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x6821             LDR      R1,[R4, #+0]
   \   00000014   0x6F49             LDR      R1,[R1, #+116]
   \   00000016   0x4788             BLX      R1
    382              FRESULT res = f_unlink(fpath);
   \   00000018   0x9800             LDR      R0,[SP, #+0]
   \   0000001A   0x.... 0x....      BL       f_unlink
   \   0000001E   0x0005             MOVS     R5,R0
    383              unlock();
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x6821             LDR      R1,[R4, #+0]
   \   00000024   0x6F89             LDR      R1,[R1, #+120]
   \   00000026   0x4788             BLX      R1
    384          
    385              if (res != FR_OK) {
   \   00000028   0x0028             MOVS     R0,R5
   \   0000002A   0xD027             BEQ      ??remove_1
    386                  debug_if(FFS_DBG, "f_unlink() failed: %d\n", res);
   \   0000002C   0x002A             MOVS     R2,R5
   \   0000002E   0xBF00             Nop      
   \   00000030   0x....             ADR.N    R1,?_11
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       _Z8debug_ifiPKcz
    387              }
    388              return fat_error_remap(res);
   \   00000038   0x2D13             CMP      R5,#+19
   \   0000003A   0xD821             BHI      ??remove_2
   \   0000003C   0xA001             ADR      R0,??remove_0
   \   0000003E   0x5D40             LDRB     R0,[R0, R5]
   \   00000040   0x4487             ADD      PC,PC,R0
   \   00000042   0xBF00             Nop      
   \                     ??remove_0:
   \   00000044   0x38 0x34          DC8      0x38,0x34,0x3C,0x34
   \              0x3C 0x34    
   \   00000048   0x30 0x30          DC8      0x30,0x30,0x30,0x2C
   \              0x30 0x2C    
   \   0000004C   0x28 0x24          DC8      0x28,0x24,0x2C,0x30
   \              0x2C 0x30    
   \   00000050   0x20 0x30          DC8      0x20,0x30,0x3C,0x3C
   \              0x3C 0x3C    
   \   00000054   0x2C 0x1C          DC8      0x2C,0x1C,0x18,0x14
   \              0x18 0x14    
   \                     ??remove_3: (+1)
   \   00000058   0x2407             MOVS     R4,#+7
   \   0000005A   0xE012             B        ??remove_4
   \                     ??remove_5: (+1)
   \   0000005C   0x2416             MOVS     R4,#+22
   \   0000005E   0xE010             B        ??remove_4
   \                     ??remove_6: (+1)
   \   00000060   0x240B             MOVS     R4,#+11
   \   00000062   0xE00E             B        ??remove_4
   \                     ??remove_7: (+1)
   \   00000064   0x2405             MOVS     R4,#+5
   \   00000066   0xE00C             B        ??remove_4
   \                     ??remove_8: (+1)
   \   00000068   0x240D             MOVS     R4,#+13
   \   0000006A   0xE00A             B        ??remove_4
   \                     ??remove_9: (+1)
   \   0000006C   0x2410             MOVS     R4,#+16
   \   0000006E   0xE008             B        ??remove_4
   \                     ??remove_10: (+1)
   \   00000070   0x240C             MOVS     R4,#+12
   \   00000072   0xE006             B        ??remove_4
   \                     ??remove_11: (+1)
   \   00000074   0x2401             MOVS     R4,#+1
   \   00000076   0xE004             B        ??remove_4
   \                     ??remove_12: (+1)
   \   00000078   0x2404             MOVS     R4,#+4
   \   0000007A   0xE002             B        ??remove_4
   \                     ??remove_1: (+1)
   \   0000007C   0x2400             MOVS     R4,#+0
   \   0000007E   0xE001             B        ??remove_13
   \                     ??remove_2: (+1)
   \   00000080   0x2408             MOVS     R4,#+8
   \                     ??remove_4: (+1)
   \   00000082   0x43E4             MVNS     R4,R4            ;; #-9
   \                     ??remove_13: (+1)
   \   00000084   0x....             B.N      ?Subroutine1
    389          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x4668             MOV      R0,SP
   \   00000002   0x.... 0x....      BL       _ZN8DeferredIPKcED1Ev
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0xB005             ADD      SP,SP,#+20
   \   0000000A   0xBD30             POP      {R4,R5,PC}       ;; return
    390          

   \                                 In section .text, align 4, keep-with-next
    391          int FATFileSystem::rename(const char *oldpath, const char *newpath) {
   \                     _ZN13FATFileSystem6renameEPKcS1_: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x0015             MOVS     R5,R2
    392              Deferred<const char*> oldfpath = fat_path_prefix(_id, oldpath);
   \   00000008   0x000A             MOVS     R2,R1
   \   0000000A   0x6D21             LDR      R1,[R4, #+80]
   \   0000000C   0xA805             ADD      R0,SP,#+20
   \   0000000E   0x.... 0x....      BL       _Z15fat_path_prefixiPKc
    393              Deferred<const char*> newfpath = fat_path_prefix(_id, newpath);
   \   00000012   0x002A             MOVS     R2,R5
   \   00000014   0x6D21             LDR      R1,[R4, #+80]
   \   00000016   0x4668             MOV      R0,SP
   \   00000018   0x.... 0x....      BL       _Z15fat_path_prefixiPKc
    394          
    395              lock();
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x6821             LDR      R1,[R4, #+0]
   \   00000020   0x6F49             LDR      R1,[R1, #+116]
   \   00000022   0x4788             BLX      R1
    396              FRESULT res = f_rename(oldfpath, newfpath);
   \   00000024   0x9900             LDR      R1,[SP, #+0]
   \   00000026   0x9805             LDR      R0,[SP, #+20]
   \   00000028   0x.... 0x....      BL       f_rename
   \   0000002C   0x0005             MOVS     R5,R0
    397              unlock();
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0x6821             LDR      R1,[R4, #+0]
   \   00000032   0x6F89             LDR      R1,[R1, #+120]
   \   00000034   0x4788             BLX      R1
    398          
    399              if (res != FR_OK) {
   \   00000036   0x0028             MOVS     R0,R5
   \   00000038   0xD026             BEQ      ??rename_1
    400                  debug_if(FFS_DBG, "f_rename() failed: %d\n", res);
   \   0000003A   0x002A             MOVS     R2,R5
   \   0000003C   0x....             ADR.N    R1,?_12
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      BL       _Z8debug_ifiPKcz
    401              }
    402              return fat_error_remap(res);
   \   00000044   0x2D13             CMP      R5,#+19
   \   00000046   0xD821             BHI      ??rename_2
   \   00000048   0xA001             ADR      R0,??rename_0
   \   0000004A   0x5D40             LDRB     R0,[R0, R5]
   \   0000004C   0x4487             ADD      PC,PC,R0
   \   0000004E   0xBF00             Nop      
   \                     ??rename_0:
   \   00000050   0x38 0x34          DC8      0x38,0x34,0x3C,0x34
   \              0x3C 0x34    
   \   00000054   0x30 0x30          DC8      0x30,0x30,0x30,0x2C
   \              0x30 0x2C    
   \   00000058   0x28 0x24          DC8      0x28,0x24,0x2C,0x30
   \              0x2C 0x30    
   \   0000005C   0x20 0x30          DC8      0x20,0x30,0x3C,0x3C
   \              0x3C 0x3C    
   \   00000060   0x2C 0x1C          DC8      0x2C,0x1C,0x18,0x14
   \              0x18 0x14    
   \                     ??rename_3: (+1)
   \   00000064   0x2407             MOVS     R4,#+7
   \   00000066   0xE012             B        ??rename_4
   \                     ??rename_5: (+1)
   \   00000068   0x2416             MOVS     R4,#+22
   \   0000006A   0xE010             B        ??rename_4
   \                     ??rename_6: (+1)
   \   0000006C   0x240B             MOVS     R4,#+11
   \   0000006E   0xE00E             B        ??rename_4
   \                     ??rename_7: (+1)
   \   00000070   0x2405             MOVS     R4,#+5
   \   00000072   0xE00C             B        ??rename_4
   \                     ??rename_8: (+1)
   \   00000074   0x240D             MOVS     R4,#+13
   \   00000076   0xE00A             B        ??rename_4
   \                     ??rename_9: (+1)
   \   00000078   0x2410             MOVS     R4,#+16
   \   0000007A   0xE008             B        ??rename_4
   \                     ??rename_10: (+1)
   \   0000007C   0x240C             MOVS     R4,#+12
   \   0000007E   0xE006             B        ??rename_4
   \                     ??rename_11: (+1)
   \   00000080   0x2401             MOVS     R4,#+1
   \   00000082   0xE004             B        ??rename_4
   \                     ??rename_12: (+1)
   \   00000084   0x2404             MOVS     R4,#+4
   \   00000086   0xE002             B        ??rename_4
   \                     ??rename_1: (+1)
   \   00000088   0x2400             MOVS     R4,#+0
   \   0000008A   0xE001             B        ??rename_13
   \                     ??rename_2: (+1)
   \   0000008C   0x2408             MOVS     R4,#+8
   \                     ??rename_4: (+1)
   \   0000008E   0x43E4             MVNS     R4,R4            ;; #-9
   \                     ??rename_13: (+1)
   \   00000090   0x4668             MOV      R0,SP
   \   00000092   0x.... 0x....      BL       _ZN8DeferredIPKcED1Ev
   \   00000096   0xA805             ADD      R0,SP,#+20
   \   00000098   0x.... 0x....      BL       _ZN8DeferredIPKcED1Ev
   \   0000009C   0x0020             MOVS     R0,R4
   \   0000009E   0xB00B             ADD      SP,SP,#+44
   \   000000A0   0xBD30             POP      {R4,R5,PC}       ;; return
    403          }
    404          

   \                                 In section .text, align 4, keep-with-next
    405          int FATFileSystem::mkdir(const char *path, mode_t mode) {
   \                     _ZN13FATFileSystem5mkdirEPKcj: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
    406              Deferred<const char*> fpath = fat_path_prefix(_id, path);
   \   00000006   0x000A             MOVS     R2,R1
   \   00000008   0x6D21             LDR      R1,[R4, #+80]
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x.... 0x....      BL       _Z15fat_path_prefixiPKc
    407          
    408              lock();
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x6821             LDR      R1,[R4, #+0]
   \   00000014   0x6F49             LDR      R1,[R1, #+116]
   \   00000016   0x4788             BLX      R1
    409              FRESULT res = f_mkdir(fpath);
   \   00000018   0x9800             LDR      R0,[SP, #+0]
   \   0000001A   0x.... 0x....      BL       f_mkdir
   \   0000001E   0x0005             MOVS     R5,R0
    410              unlock();
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x6821             LDR      R1,[R4, #+0]
   \   00000024   0x6F89             LDR      R1,[R1, #+120]
   \   00000026   0x4788             BLX      R1
    411          
    412              if (res != FR_OK) {
   \   00000028   0x0028             MOVS     R0,R5
   \   0000002A   0xD027             BEQ      ??mkdir_1
    413                  debug_if(FFS_DBG, "f_mkdir() failed: %d\n", res);
   \   0000002C   0x002A             MOVS     R2,R5
   \   0000002E   0xBF00             Nop      
   \   00000030   0x....             ADR.N    R1,?_13
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       _Z8debug_ifiPKcz
    414              }
    415              return fat_error_remap(res);
   \   00000038   0x2D13             CMP      R5,#+19
   \   0000003A   0xD821             BHI      ??mkdir_2
   \   0000003C   0xA001             ADR      R0,??mkdir_0
   \   0000003E   0x5D40             LDRB     R0,[R0, R5]
   \   00000040   0x4487             ADD      PC,PC,R0
   \   00000042   0xBF00             Nop      
   \                     ??mkdir_0:
   \   00000044   0x38 0x34          DC8      0x38,0x34,0x3C,0x34
   \              0x3C 0x34    
   \   00000048   0x30 0x30          DC8      0x30,0x30,0x30,0x2C
   \              0x30 0x2C    
   \   0000004C   0x28 0x24          DC8      0x28,0x24,0x2C,0x30
   \              0x2C 0x30    
   \   00000050   0x20 0x30          DC8      0x20,0x30,0x3C,0x3C
   \              0x3C 0x3C    
   \   00000054   0x2C 0x1C          DC8      0x2C,0x1C,0x18,0x14
   \              0x18 0x14    
   \                     ??mkdir_3: (+1)
   \   00000058   0x2407             MOVS     R4,#+7
   \   0000005A   0xE012             B        ??mkdir_4
   \                     ??mkdir_5: (+1)
   \   0000005C   0x2416             MOVS     R4,#+22
   \   0000005E   0xE010             B        ??mkdir_4
   \                     ??mkdir_6: (+1)
   \   00000060   0x240B             MOVS     R4,#+11
   \   00000062   0xE00E             B        ??mkdir_4
   \                     ??mkdir_7: (+1)
   \   00000064   0x2405             MOVS     R4,#+5
   \   00000066   0xE00C             B        ??mkdir_4
   \                     ??mkdir_8: (+1)
   \   00000068   0x240D             MOVS     R4,#+13
   \   0000006A   0xE00A             B        ??mkdir_4
   \                     ??mkdir_9: (+1)
   \   0000006C   0x2410             MOVS     R4,#+16
   \   0000006E   0xE008             B        ??mkdir_4
   \                     ??mkdir_10: (+1)
   \   00000070   0x240C             MOVS     R4,#+12
   \   00000072   0xE006             B        ??mkdir_4
   \                     ??mkdir_11: (+1)
   \   00000074   0x2401             MOVS     R4,#+1
   \   00000076   0xE004             B        ??mkdir_4
   \                     ??mkdir_12: (+1)
   \   00000078   0x2404             MOVS     R4,#+4
   \   0000007A   0xE002             B        ??mkdir_4
   \                     ??mkdir_1: (+1)
   \   0000007C   0x2400             MOVS     R4,#+0
   \   0000007E   0xE001             B        ??mkdir_13
   \                     ??mkdir_2: (+1)
   \   00000080   0x2408             MOVS     R4,#+8
   \                     ??mkdir_4: (+1)
   \   00000082   0x43E4             MVNS     R4,R4            ;; #-9
   \                     ??mkdir_13: (+1)
   \   00000084                      REQUIRE ?Subroutine1
   \   00000084                      ;; // Fall through to label ?Subroutine1
    416          }
    417          

   \                                 In section .text, align 4, keep-with-next
    418          int FATFileSystem::stat(const char *path, struct stat *st) {
   \                     _ZN13FATFileSystem4statEPKcP4stat: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
   \   00000004   0x0004             MOVS     R4,R0
    419              Deferred<const char*> fpath = fat_path_prefix(_id, path);
   \   00000006   0x000A             MOVS     R2,R1
   \   00000008   0x6D21             LDR      R1,[R4, #+80]
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x.... 0x....      BL       _Z15fat_path_prefixiPKc
    420          
    421              lock();
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x6821             LDR      R1,[R4, #+0]
   \   00000014   0x6F49             LDR      R1,[R1, #+116]
   \   00000016   0x4788             BLX      R1
    422              FILINFO f;
    423              memset(&f, 0, sizeof(f));
   \   00000018   0x2120             MOVS     R1,#+32
   \   0000001A   0xA805             ADD      R0,SP,#+20
   \   0000001C   0x.... 0x....      BL       __aeabi_memclr4
    424          
    425              FRESULT res = f_stat(fpath, &f);
   \   00000020   0xA905             ADD      R1,SP,#+20
   \   00000022   0x9800             LDR      R0,[SP, #+0]
   \   00000024   0x.... 0x....      BL       f_stat
   \   00000028   0x0005             MOVS     R5,R0
   \   0000002A   0x6820             LDR      R0,[R4, #+0]
   \   0000002C   0x6F81             LDR      R1,[R0, #+120]
   \   0000002E   0xD02C             BEQ      ??stat_1
    426              if (res != FR_OK) {
    427                  unlock();
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0x4788             BLX      R1
    428                  return fat_error_remap(res);
   \   00000034   0x2D13             CMP      R5,#+19
   \   00000036   0xD821             BHI      ??stat_2
   \   00000038   0xA001             ADR      R0,??stat_0
   \   0000003A   0x5D40             LDRB     R0,[R0, R5]
   \   0000003C   0x4487             ADD      PC,PC,R0
   \   0000003E   0xBF00             Nop      
   \                     ??stat_0:
   \   00000040   0x38 0x34          DC8      0x38,0x34,0x3C,0x34
   \              0x3C 0x34    
   \   00000044   0x30 0x30          DC8      0x30,0x30,0x30,0x2C
   \              0x30 0x2C    
   \   00000048   0x28 0x24          DC8      0x28,0x24,0x2C,0x30
   \              0x2C 0x30    
   \   0000004C   0x20 0x30          DC8      0x20,0x30,0x3C,0x3C
   \              0x3C 0x3C    
   \   00000050   0x2C 0x1C          DC8      0x2C,0x1C,0x18,0x14
   \              0x18 0x14    
   \                     ??stat_3: (+1)
   \   00000054   0x2407             MOVS     R4,#+7
   \   00000056   0xE012             B        ??stat_4
   \                     ??stat_5: (+1)
   \   00000058   0x2416             MOVS     R4,#+22
   \   0000005A   0xE010             B        ??stat_4
   \                     ??stat_6: (+1)
   \   0000005C   0x240B             MOVS     R4,#+11
   \   0000005E   0xE00E             B        ??stat_4
   \                     ??stat_7: (+1)
   \   00000060   0x2405             MOVS     R4,#+5
   \   00000062   0xE00C             B        ??stat_4
   \                     ??stat_8: (+1)
   \   00000064   0x240D             MOVS     R4,#+13
   \   00000066   0xE00A             B        ??stat_4
   \                     ??stat_9: (+1)
   \   00000068   0x2410             MOVS     R4,#+16
   \   0000006A   0xE008             B        ??stat_4
   \                     ??stat_10: (+1)
   \   0000006C   0x240C             MOVS     R4,#+12
   \   0000006E   0xE006             B        ??stat_4
   \                     ??stat_11: (+1)
   \   00000070   0x2401             MOVS     R4,#+1
   \   00000072   0xE004             B        ??stat_4
   \                     ??stat_12: (+1)
   \   00000074   0x2404             MOVS     R4,#+4
   \   00000076   0xE002             B        ??stat_4
   \                     ??stat_13: (+1)
   \   00000078   0x2400             MOVS     R4,#+0
   \   0000007A   0xE001             B        ??stat_14
   \                     ??stat_2: (+1)
   \   0000007C   0x2408             MOVS     R4,#+8
   \                     ??stat_4: (+1)
   \   0000007E   0x43E4             MVNS     R4,R4            ;; #-9
    429              }
   \                     ??stat_14: (+1)
   \   00000080   0x4668             MOV      R0,SP
   \   00000082   0x.... 0x....      BL       _ZN8DeferredIPKcED1Ev
   \   00000086   0x0020             MOVS     R0,R4
   \   00000088   0xE005             B        ??stat_15
    430          
    431              /* ARMCC doesnt support stat(), and these symbols are not defined by the toolchain. */
    432          #ifdef TOOLCHAIN_GCC
    433              st->st_size = f.fsize;
    434              st->st_mode = 0;
    435              st->st_mode |= (f.fattrib & AM_DIR) ? S_IFDIR : S_IFREG;
    436              st->st_mode |= (f.fattrib & AM_RDO) ?
    437                  (S_IRUSR | S_IXUSR | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH) :
    438                  (S_IRWXU | S_IRWXG | S_IRWXO);
    439          #endif /* TOOLCHAIN_GCC */
    440              unlock();
   \                     ??stat_1: (+1)
   \   0000008A   0x0020             MOVS     R0,R4
   \   0000008C   0x4788             BLX      R1
    441          
    442              return 0;
   \   0000008E   0x4668             MOV      R0,SP
   \   00000090   0x.... 0x....      BL       _ZN8DeferredIPKcED1Ev
   \   00000094   0x2000             MOVS     R0,#+0
   \                     ??stat_15: (+1)
   \   00000096   0xB00D             ADD      SP,SP,#+52
   \   00000098   0xBD30             POP      {R4,R5,PC}       ;; return
    443          }
    444          

   \                                 In section .text, align 2, keep-with-next
    445          void FATFileSystem::lock() {
   \                     _ZN13FATFileSystem4lockEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    446              _ffs_mutex->lock();
   \   00000002   0x....             LDR      R0,??DataTable35_1
   \   00000004   0x.... 0x....      BL       _ZN12SingletonPtrIN4rtos5MutexEEptEv
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x43C9             MVNS     R1,R1            ;; #-1
   \   0000000C   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
    447          }
   \   00000010   0xBD01             POP      {R0,PC}          ;; return
    448          

   \                                 In section .text, align 2, keep-with-next
    449          void FATFileSystem::unlock() {
   \                     _ZN13FATFileSystem6unlockEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    450              _ffs_mutex->unlock();
   \   00000002   0x....             LDR      R0,??DataTable35_1
   \   00000004   0x.... 0x....      BL       _ZN12SingletonPtrIN4rtos5MutexEEptEv
   \   00000008   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
    451          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    452          
    453          
    454          ////// File operations //////

   \                                 In section .text, align 4, keep-with-next
    455          int FATFileSystem::file_open(fs_file_t *file, const char *path, int flags) {
   \                     _ZN13FATFileSystem9file_openEPPvPKci: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0007             MOVS     R7,R0
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001C             MOVS     R4,R3
    456              debug_if(FFS_DBG, "open(%s) on filesystem [%s], drv [%s]\n", path, getName(), _id);
   \   0000000A   0x1D38             ADDS     R0,R7,#+4
   \   0000000C   0x.... 0x....      BL       _ZN4mbed8FileBase7getNameEv
   \   00000010   0x6D39             LDR      R1,[R7, #+80]
   \   00000012   0x9100             STR      R1,[SP, #+0]
   \   00000014   0x0003             MOVS     R3,R0
   \   00000016   0x0032             MOVS     R2,R6
   \   00000018   0x....             ADR.N    R1,?_14
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      BL       _Z8debug_ifiPKcz
    457          
    458              FIL *fh = new FIL;
   \   00000020   0x2024             MOVS     R0,#+36
   \   00000022   0x.... 0x....      BL       _Znwj
   \   00000026   0x0005             MOVS     R5,R0
    459              Deferred<const char*> fpath = fat_path_prefix(_id, path);
   \   00000028   0x0032             MOVS     R2,R6
   \   0000002A   0x6D39             LDR      R1,[R7, #+80]
   \   0000002C   0x4668             MOV      R0,SP
   \   0000002E   0x.... 0x....      BL       _Z15fat_path_prefixiPKc
    460          
    461              /* POSIX flags -> FatFS open mode */
    462              BYTE openmode;
    463              if (flags & O_RDWR) {
   \   00000032   0x2002             MOVS     R0,#+2
   \   00000034   0x4204             TST      R4,R0
   \   00000036   0xD001             BEQ      ??file_open_1
    464                  openmode = FA_READ | FA_WRITE;
   \   00000038   0x2603             MOVS     R6,#+3
   \   0000003A   0xE003             B        ??file_open_2
    465              } else if (flags & O_WRONLY) {
   \                     ??file_open_1: (+1)
   \   0000003C   0x2601             MOVS     R6,#+1
   \   0000003E   0x4234             TST      R4,R6
   \   00000040   0xD000             BEQ      ??file_open_2
    466                  openmode = FA_WRITE;
   \   00000042   0x2602             MOVS     R6,#+2
    467              } else {
    468                  openmode = FA_READ;
    469              }
    470              if (flags & O_CREAT) {
   \                     ??file_open_2: (+1)
   \   00000044   0x05A0             LSLS     R0,R4,#+22
   \   00000046   0xD507             BPL      ??file_open_3
    471                  if (flags & O_TRUNC) {
   \   00000048   0x0560             LSLS     R0,R4,#+21
   \   0000004A   0xD502             BPL      ??file_open_4
    472                      openmode |= FA_CREATE_ALWAYS;
   \   0000004C   0x0030             MOVS     R0,R6
   \   0000004E   0x2608             MOVS     R6,#+8
   \   00000050   0xE001             B        ??file_open_5
    473                  } else {
    474                      openmode |= FA_OPEN_ALWAYS;
   \                     ??file_open_4: (+1)
   \   00000052   0x0030             MOVS     R0,R6
   \   00000054   0x2610             MOVS     R6,#+16
   \                     ??file_open_5: (+1)
   \   00000056   0x4306             ORRS     R6,R6,R0
    475                  }
    476              }
    477          
    478              lock();
   \                     ??file_open_3: (+1)
   \   00000058   0x0038             MOVS     R0,R7
   \   0000005A   0x6839             LDR      R1,[R7, #+0]
   \   0000005C   0x6F49             LDR      R1,[R1, #+116]
   \   0000005E   0x4788             BLX      R1
    479              FRESULT res = f_open(fh, fpath, openmode);
   \   00000060   0x0032             MOVS     R2,R6
   \   00000062   0x9900             LDR      R1,[SP, #+0]
   \   00000064   0x0028             MOVS     R0,R5
   \   00000066   0x.... 0x....      BL       f_open
   \   0000006A   0x0006             MOVS     R6,R0
    480          
    481              if (res != FR_OK) {
   \   0000006C   0xD035             BEQ      ??file_open_6
    482                  unlock();
   \   0000006E   0x0038             MOVS     R0,R7
   \   00000070   0x6839             LDR      R1,[R7, #+0]
   \   00000072   0x6F89             LDR      R1,[R1, #+120]
   \   00000074   0x4788             BLX      R1
    483                  debug_if(FFS_DBG, "f_open('w') failed: %d\n", res);
   \   00000076   0x0032             MOVS     R2,R6
   \   00000078   0x....             ADR.N    R1,?_15
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x.... 0x....      BL       _Z8debug_ifiPKcz
    484                  delete fh;
   \   00000080   0x0028             MOVS     R0,R5
   \   00000082   0x.... 0x....      BL       _ZdlPv
    485                  return fat_error_remap(res);
   \   00000086   0x2E13             CMP      R6,#+19
   \   00000088   0xD820             BHI      ??file_open_7
   \   0000008A   0xA001             ADR      R0,??file_open_0
   \   0000008C   0x5D80             LDRB     R0,[R0, R6]
   \   0000008E   0x4487             ADD      PC,PC,R0
   \                     ??file_open_0:
   \   00000090   0x36 0x32          DC8      0x36,0x32,0x3A,0x32
   \              0x3A 0x32    
   \   00000094   0x2E 0x2E          DC8      0x2E,0x2E,0x2E,0x2A
   \              0x2E 0x2A    
   \   00000098   0x26 0x22          DC8      0x26,0x22,0x2A,0x2E
   \              0x2A 0x2E    
   \   0000009C   0x1E 0x2E          DC8      0x1E,0x2E,0x3A,0x3A
   \              0x3A 0x3A    
   \   000000A0   0x2A 0x1A          DC8      0x2A,0x1A,0x16,0x12
   \              0x16 0x12    
   \                     ??file_open_8: (+1)
   \   000000A4   0x2407             MOVS     R4,#+7
   \   000000A6   0xE012             B        ??file_open_9
   \                     ??file_open_10: (+1)
   \   000000A8   0x2416             MOVS     R4,#+22
   \   000000AA   0xE010             B        ??file_open_9
   \                     ??file_open_11: (+1)
   \   000000AC   0x240B             MOVS     R4,#+11
   \   000000AE   0xE00E             B        ??file_open_9
   \                     ??file_open_12: (+1)
   \   000000B0   0x2405             MOVS     R4,#+5
   \   000000B2   0xE00C             B        ??file_open_9
   \                     ??file_open_13: (+1)
   \   000000B4   0x240D             MOVS     R4,#+13
   \   000000B6   0xE00A             B        ??file_open_9
   \                     ??file_open_14: (+1)
   \   000000B8   0x2410             MOVS     R4,#+16
   \   000000BA   0xE008             B        ??file_open_9
   \                     ??file_open_15: (+1)
   \   000000BC   0x240C             MOVS     R4,#+12
   \   000000BE   0xE006             B        ??file_open_9
   \                     ??file_open_16: (+1)
   \   000000C0   0x2401             MOVS     R4,#+1
   \   000000C2   0xE004             B        ??file_open_9
   \                     ??file_open_17: (+1)
   \   000000C4   0x2404             MOVS     R4,#+4
   \   000000C6   0xE002             B        ??file_open_9
   \                     ??file_open_18: (+1)
   \   000000C8   0x2400             MOVS     R4,#+0
   \   000000CA   0xE001             B        ??file_open_19
   \                     ??file_open_7: (+1)
   \   000000CC   0x2408             MOVS     R4,#+8
   \                     ??file_open_9: (+1)
   \   000000CE   0x43E4             MVNS     R4,R4            ;; #-9
    486              }
   \                     ??file_open_19: (+1)
   \   000000D0   0x4668             MOV      R0,SP
   \   000000D2   0x.... 0x....      BL       _ZN8DeferredIPKcED1Ev
   \   000000D6   0x0020             MOVS     R0,R4
   \   000000D8   0xE00F             B        ??file_open_20
    487          
    488              if (flags & O_APPEND) {
   \                     ??file_open_6: (+1)
   \   000000DA   0x0720             LSLS     R0,R4,#+28
   \   000000DC   0xD503             BPL      ??file_open_21
    489                  f_lseek(fh, fh->fsize);
   \   000000DE   0x68E9             LDR      R1,[R5, #+12]
   \   000000E0   0x0028             MOVS     R0,R5
   \   000000E2   0x.... 0x....      BL       f_lseek
    490              }
    491              unlock();
   \                     ??file_open_21: (+1)
   \   000000E6   0x0038             MOVS     R0,R7
   \   000000E8   0x6839             LDR      R1,[R7, #+0]
   \   000000EA   0x6F89             LDR      R1,[R1, #+120]
   \   000000EC   0x4788             BLX      R1
    492          
    493              *file = fh;
   \   000000EE   0x9806             LDR      R0,[SP, #+24]
   \   000000F0   0x6005             STR      R5,[R0, #+0]
    494              return 0;
   \   000000F2   0x4668             MOV      R0,SP
   \   000000F4   0x.... 0x....      BL       _ZN8DeferredIPKcED1Ev
   \   000000F8   0x2000             MOVS     R0,#+0
   \                     ??file_open_20: (+1)
   \   000000FA   0xB007             ADD      SP,SP,#+28
   \   000000FC   0xBDF0             POP      {R4-R7,PC}       ;; return
    495          }
    496          

   \                                 In section .text, align 4, keep-with-next
    497          int FATFileSystem::file_close(fs_file_t file) {
   \                     _ZN13FATFileSystem10file_closeEPv: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    498              FIL *fh = static_cast<FIL*>(file);
    499          
    500              lock();
   \   00000006   0x6829             LDR      R1,[R5, #+0]
   \   00000008   0x6F49             LDR      R1,[R1, #+116]
   \   0000000A   0x4788             BLX      R1
    501              FRESULT res = f_close(fh);
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       f_close
   \   00000012   0x0006             MOVS     R6,R0
    502              unlock();
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0x6829             LDR      R1,[R5, #+0]
   \   00000018   0x6F89             LDR      R1,[R1, #+120]
   \   0000001A   0x4788             BLX      R1
    503          
    504              delete fh;
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      BL       _ZdlPv
    505              return fat_error_remap(res);
   \   00000022   0x2E13             CMP      R6,#+19
   \   00000024   0xD820             BHI      ??file_close_1
   \   00000026   0xA001             ADR      R0,??file_close_0
   \   00000028   0x5D80             LDRB     R0,[R0, R6]
   \   0000002A   0x4487             ADD      PC,PC,R0
   \                     ??file_close_0:
   \   0000002C   0x36 0x32          DC8      0x36,0x32,0x3A,0x32
   \              0x3A 0x32    
   \   00000030   0x2E 0x2E          DC8      0x2E,0x2E,0x2E,0x2A
   \              0x2E 0x2A    
   \   00000034   0x26 0x22          DC8      0x26,0x22,0x2A,0x2E
   \              0x2A 0x2E    
   \   00000038   0x1E 0x2E          DC8      0x1E,0x2E,0x3A,0x3A
   \              0x3A 0x3A    
   \   0000003C   0x2A 0x1A          DC8      0x2A,0x1A,0x16,0x12
   \              0x16 0x12    
   \                     ??file_close_2: (+1)
   \   00000040   0x2007             MOVS     R0,#+7
   \   00000042   0xE012             B        ??file_close_3
   \                     ??file_close_4: (+1)
   \   00000044   0x2016             MOVS     R0,#+22
   \   00000046   0xE010             B        ??file_close_3
   \                     ??file_close_5: (+1)
   \   00000048   0x200B             MOVS     R0,#+11
   \   0000004A   0xE00E             B        ??file_close_3
   \                     ??file_close_6: (+1)
   \   0000004C   0x2005             MOVS     R0,#+5
   \   0000004E   0xE00C             B        ??file_close_3
   \                     ??file_close_7: (+1)
   \   00000050   0x200D             MOVS     R0,#+13
   \   00000052   0xE00A             B        ??file_close_3
   \                     ??file_close_8: (+1)
   \   00000054   0x2010             MOVS     R0,#+16
   \   00000056   0xE008             B        ??file_close_3
   \                     ??file_close_9: (+1)
   \   00000058   0x200C             MOVS     R0,#+12
   \   0000005A   0xE006             B        ??file_close_3
   \                     ??file_close_10: (+1)
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0xE004             B        ??file_close_3
   \                     ??file_close_11: (+1)
   \   00000060   0x2004             MOVS     R0,#+4
   \   00000062   0xE002             B        ??file_close_3
   \                     ??file_close_12: (+1)
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0xBD70             POP      {R4-R6,PC}
   \                     ??file_close_1: (+1)
   \   00000068   0x2008             MOVS     R0,#+8
   \                     ??file_close_3: (+1)
   \   0000006A   0x43C0             MVNS     R0,R0            ;; #-9
   \   0000006C   0xBD70             POP      {R4-R6,PC}       ;; return
    506          }
    507          

   \                                 In section .text, align 4, keep-with-next
    508          ssize_t FATFileSystem::file_read(fs_file_t file, void *buffer, size_t len) {
   \                     _ZN13FATFileSystem9file_readEPvS0_j: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000F             MOVS     R7,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001D             MOVS     R5,R3
    509              FIL *fh = static_cast<FIL*>(file);
    510          
    511              lock();
   \   0000000A   0x6821             LDR      R1,[R4, #+0]
   \   0000000C   0x6F49             LDR      R1,[R1, #+116]
   \   0000000E   0x4788             BLX      R1
    512              UINT n;
    513              FRESULT res = f_read(fh, buffer, len, &n);
   \   00000010   0x466B             MOV      R3,SP
   \   00000012   0x002A             MOVS     R2,R5
   \   00000014   0x0031             MOVS     R1,R6
   \   00000016   0x0038             MOVS     R0,R7
   \   00000018   0x.... 0x....      BL       f_read
   \   0000001C   0x0005             MOVS     R5,R0
    514              unlock();
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x6821             LDR      R1,[R4, #+0]
   \   00000022   0x6F89             LDR      R1,[R1, #+120]
   \   00000024   0x4788             BLX      R1
    515          
    516              if (res != FR_OK) {
   \   00000026   0x0028             MOVS     R0,R5
   \   00000028   0xD02B             BEQ      ??file_read_1
    517                  debug_if(FFS_DBG, "f_read() failed: %d\n", res);
   \   0000002A   0x002A             MOVS     R2,R5
   \   0000002C   0x....             ADR.N    R1,?_16
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      BL       _Z8debug_ifiPKcz
    518                  return fat_error_remap(res);
   \   00000034   0x2D13             CMP      R5,#+19
   \   00000036   0xD821             BHI      ??file_read_2
   \   00000038   0xA001             ADR      R0,??file_read_0
   \   0000003A   0x5D40             LDRB     R0,[R0, R5]
   \   0000003C   0x4487             ADD      PC,PC,R0
   \   0000003E   0xBF00             Nop      
   \                     ??file_read_0:
   \   00000040   0x38 0x34          DC8      0x38,0x34,0x3C,0x34
   \              0x3C 0x34    
   \   00000044   0x30 0x30          DC8      0x30,0x30,0x30,0x2C
   \              0x30 0x2C    
   \   00000048   0x28 0x24          DC8      0x28,0x24,0x2C,0x30
   \              0x2C 0x30    
   \   0000004C   0x20 0x30          DC8      0x20,0x30,0x3C,0x3C
   \              0x3C 0x3C    
   \   00000050   0x2C 0x1C          DC8      0x2C,0x1C,0x18,0x14
   \              0x18 0x14    
   \                     ??file_read_3: (+1)
   \   00000054   0x2007             MOVS     R0,#+7
   \   00000056   0xE012             B.N      ??file_read_4
   \                     ??file_read_5: (+1)
   \   00000058   0x2016             MOVS     R0,#+22
   \   0000005A   0xE010             B.N      ??file_read_4
   \                     ??file_read_6: (+1)
   \   0000005C   0x200B             MOVS     R0,#+11
   \   0000005E   0xE00E             B.N      ??file_read_4
   \                     ??file_read_7: (+1)
   \   00000060   0x2005             MOVS     R0,#+5
   \   00000062   0xE00C             B.N      ??file_read_4
   \                     ??file_read_8: (+1)
   \   00000064   0x200D             MOVS     R0,#+13
   \   00000066   0xE00A             B.N      ??file_read_4
   \                     ??file_read_9: (+1)
   \   00000068   0x2010             MOVS     R0,#+16
   \   0000006A   0xE008             B.N      ??file_read_4
   \                     ??file_read_10: (+1)
   \   0000006C   0x200C             MOVS     R0,#+12
   \   0000006E   0xE006             B.N      ??file_read_4
   \                     ??file_read_11: (+1)
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0xE004             B.N      ??file_read_4
   \                     ??file_read_12: (+1)
   \   00000074   0x2004             MOVS     R0,#+4
   \   00000076   0xE002             B.N      ??file_read_4
   \                     ??file_read_13: (+1)
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0xBDF2             POP      {R1,R4-R7,PC}
   \                     ??file_read_2: (+1)
   \   0000007C   0x2008             MOVS     R0,#+8
   \                     ??file_read_4: (+1)
   \   0000007E   0x43C0             MVNS     R0,R0            ;; #-9
    519              } else {
   \   00000080   0xBDF2             POP      {R1,R4-R7,PC}
    520                  return n;
   \                     ??file_read_1: (+1)
   \   00000082   0x9800             LDR      R0,[SP, #+0]
   \   00000084   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    521              }
    522          }
    523          

   \                                 In section .text, align 4, keep-with-next
    524          ssize_t FATFileSystem::file_write(fs_file_t file, const void *buffer, size_t len) {
   \                     _ZN13FATFileSystem10file_writeEPvPKvj: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000F             MOVS     R7,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001D             MOVS     R5,R3
    525              FIL *fh = static_cast<FIL*>(file);
    526          
    527              lock();
   \   0000000A   0x6821             LDR      R1,[R4, #+0]
   \   0000000C   0x6F49             LDR      R1,[R1, #+116]
   \   0000000E   0x4788             BLX      R1
    528              UINT n;
    529              FRESULT res = f_write(fh, buffer, len, &n);
   \   00000010   0x466B             MOV      R3,SP
   \   00000012   0x002A             MOVS     R2,R5
   \   00000014   0x0031             MOVS     R1,R6
   \   00000016   0x0038             MOVS     R0,R7
   \   00000018   0x.... 0x....      BL       f_write
   \   0000001C   0x0005             MOVS     R5,R0
    530              unlock();
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x6821             LDR      R1,[R4, #+0]
   \   00000022   0x6F89             LDR      R1,[R1, #+120]
   \   00000024   0x4788             BLX      R1
    531          
    532              if (res != FR_OK) {
   \   00000026   0x0028             MOVS     R0,R5
   \   00000028   0xD02B             BEQ      ??file_write_1
    533                  debug_if(FFS_DBG, "f_write() failed: %d", res);
   \   0000002A   0x002A             MOVS     R2,R5
   \   0000002C   0x....             ADR.N    R1,?_17
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      BL       _Z8debug_ifiPKcz
    534                  return fat_error_remap(res);
   \   00000034   0x2D13             CMP      R5,#+19
   \   00000036   0xD821             BHI      ??file_write_2
   \   00000038   0xA001             ADR      R0,??file_write_0
   \   0000003A   0x5D40             LDRB     R0,[R0, R5]
   \   0000003C   0x4487             ADD      PC,PC,R0
   \   0000003E   0xBF00             Nop      
   \                     ??file_write_0:
   \   00000040   0x38 0x34          DC8      0x38,0x34,0x3C,0x34
   \              0x3C 0x34    
   \   00000044   0x30 0x30          DC8      0x30,0x30,0x30,0x2C
   \              0x30 0x2C    
   \   00000048   0x28 0x24          DC8      0x28,0x24,0x2C,0x30
   \              0x2C 0x30    
   \   0000004C   0x20 0x30          DC8      0x20,0x30,0x3C,0x3C
   \              0x3C 0x3C    
   \   00000050   0x2C 0x1C          DC8      0x2C,0x1C,0x18,0x14
   \              0x18 0x14    
   \                     ??file_write_3: (+1)
   \   00000054   0x2007             MOVS     R0,#+7
   \   00000056   0xE012             B.N      ??file_write_4
   \                     ??file_write_5: (+1)
   \   00000058   0x2016             MOVS     R0,#+22
   \   0000005A   0xE010             B.N      ??file_write_4
   \                     ??file_write_6: (+1)
   \   0000005C   0x200B             MOVS     R0,#+11
   \   0000005E   0xE00E             B.N      ??file_write_4
   \                     ??file_write_7: (+1)
   \   00000060   0x2005             MOVS     R0,#+5
   \   00000062   0xE00C             B.N      ??file_write_4
   \                     ??file_write_8: (+1)
   \   00000064   0x200D             MOVS     R0,#+13
   \   00000066   0xE00A             B.N      ??file_write_4
   \                     ??file_write_9: (+1)
   \   00000068   0x2010             MOVS     R0,#+16
   \   0000006A   0xE008             B.N      ??file_write_4
   \                     ??file_write_10: (+1)
   \   0000006C   0x200C             MOVS     R0,#+12
   \   0000006E   0xE006             B.N      ??file_write_4
   \                     ??file_write_11: (+1)
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0xE004             B.N      ??file_write_4
   \                     ??file_write_12: (+1)
   \   00000074   0x2004             MOVS     R0,#+4
   \   00000076   0xE002             B.N      ??file_write_4
   \                     ??file_write_13: (+1)
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0xBDF2             POP      {R1,R4-R7,PC}
   \                     ??file_write_2: (+1)
   \   0000007C   0x2008             MOVS     R0,#+8
   \                     ??file_write_4: (+1)
   \   0000007E   0x43C0             MVNS     R0,R0            ;; #-9
    535              } else {
   \   00000080   0xBDF2             POP      {R1,R4-R7,PC}
    536                  return n;
   \                     ??file_write_1: (+1)
   \   00000082   0x9800             LDR      R0,[SP, #+0]
   \   00000084   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    537              }
    538          }
    539          

   \                                 In section .text, align 4, keep-with-next
    540          int FATFileSystem::file_sync(fs_file_t file) {
   \                     _ZN13FATFileSystem9file_syncEPv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    541              FIL *fh = static_cast<FIL*>(file);
    542          
    543              lock();
   \   00000006   0x6829             LDR      R1,[R5, #+0]
   \   00000008   0x6F49             LDR      R1,[R1, #+116]
   \   0000000A   0x4788             BLX      R1
    544              FRESULT res = f_sync(fh);
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       f_sync
   \   00000012   0x0004             MOVS     R4,R0
    545              unlock();
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0x6829             LDR      R1,[R5, #+0]
   \   00000018   0x6F89             LDR      R1,[R1, #+120]
   \   0000001A   0x4788             BLX      R1
    546          
    547              if (res != FR_OK) {
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0xD027             BEQ      ??file_sync_1
    548                  debug_if(FFS_DBG, "f_sync() failed: %d\n", res);
   \   00000020   0x0022             MOVS     R2,R4
   \   00000022   0xBF00             Nop      
   \   00000024   0x....             ADR.N    R1,?_18
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      BL       _Z8debug_ifiPKcz
    549              }
    550              return fat_error_remap(res);
   \   0000002C   0x2C13             CMP      R4,#+19
   \   0000002E   0xD821             BHI      ??file_sync_2
   \   00000030   0xA001             ADR      R0,??file_sync_0
   \   00000032   0x5D00             LDRB     R0,[R0, R4]
   \   00000034   0x4487             ADD      PC,PC,R0
   \   00000036   0xBF00             Nop      
   \                     ??file_sync_0:
   \   00000038   0x38 0x34          DC8      0x38,0x34,0x3C,0x34
   \              0x3C 0x34    
   \   0000003C   0x30 0x30          DC8      0x30,0x30,0x30,0x2C
   \              0x30 0x2C    
   \   00000040   0x28 0x24          DC8      0x28,0x24,0x2C,0x30
   \              0x2C 0x30    
   \   00000044   0x20 0x30          DC8      0x20,0x30,0x3C,0x3C
   \              0x3C 0x3C    
   \   00000048   0x2C 0x1C          DC8      0x2C,0x1C,0x18,0x14
   \              0x18 0x14    
   \                     ??file_sync_3: (+1)
   \   0000004C   0x2007             MOVS     R0,#+7
   \   0000004E   0xE012             B        ??file_sync_4
   \                     ??file_sync_5: (+1)
   \   00000050   0x2016             MOVS     R0,#+22
   \   00000052   0xE010             B        ??file_sync_4
   \                     ??file_sync_6: (+1)
   \   00000054   0x200B             MOVS     R0,#+11
   \   00000056   0xE00E             B        ??file_sync_4
   \                     ??file_sync_7: (+1)
   \   00000058   0x2005             MOVS     R0,#+5
   \   0000005A   0xE00C             B        ??file_sync_4
   \                     ??file_sync_8: (+1)
   \   0000005C   0x200D             MOVS     R0,#+13
   \   0000005E   0xE00A             B        ??file_sync_4
   \                     ??file_sync_9: (+1)
   \   00000060   0x2010             MOVS     R0,#+16
   \   00000062   0xE008             B        ??file_sync_4
   \                     ??file_sync_10: (+1)
   \   00000064   0x200C             MOVS     R0,#+12
   \   00000066   0xE006             B        ??file_sync_4
   \                     ??file_sync_11: (+1)
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0xE004             B        ??file_sync_4
   \                     ??file_sync_12: (+1)
   \   0000006C   0x2004             MOVS     R0,#+4
   \   0000006E   0xE002             B        ??file_sync_4
   \                     ??file_sync_1: (+1)
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??file_sync_2: (+1)
   \   00000074   0x2008             MOVS     R0,#+8
   \                     ??file_sync_4: (+1)
   \   00000076   0x43C0             MVNS     R0,R0            ;; #-9
   \   00000078   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    551          }
    552          

   \                                 In section .text, align 4, keep-with-next
    553          off_t FATFileSystem::file_seek(fs_file_t file, off_t offset, int whence) {
   \                     _ZN13FATFileSystem9file_seekEPvli: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0007             MOVS     R7,R0
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0015             MOVS     R5,R2
   \   00000008   0x001E             MOVS     R6,R3
    554              FIL *fh = static_cast<FIL*>(file);
    555          
    556              lock();
   \   0000000A   0x6839             LDR      R1,[R7, #+0]
   \   0000000C   0x6F49             LDR      R1,[R1, #+116]
   \   0000000E   0x4788             BLX      R1
    557              if (whence == SEEK_END) {
   \   00000010   0x2E02             CMP      R6,#+2
   \   00000012   0xD101             BNE      ??file_seek_1
    558                  offset += fh->fsize;
   \   00000014   0x68E0             LDR      R0,[R4, #+12]
   \   00000016   0xE002             B        ??file_seek_2
    559              } else if(whence==SEEK_CUR) {
   \                     ??file_seek_1: (+1)
   \   00000018   0x2E01             CMP      R6,#+1
   \   0000001A   0xD101             BNE      ??file_seek_3
    560                  offset += fh->fptr;
   \   0000001C   0x68A0             LDR      R0,[R4, #+8]
   \                     ??file_seek_2: (+1)
   \   0000001E   0x182D             ADDS     R5,R5,R0
    561              }
    562          
    563              FRESULT res = f_lseek(fh, offset);
   \                     ??file_seek_3: (+1)
   \   00000020   0x0029             MOVS     R1,R5
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x.... 0x....      BL       f_lseek
   \   00000028   0x0005             MOVS     R5,R0
    564              off_t noffset = fh->fptr;
   \   0000002A   0x68A4             LDR      R4,[R4, #+8]
    565              unlock();
   \   0000002C   0x0038             MOVS     R0,R7
   \   0000002E   0x6839             LDR      R1,[R7, #+0]
   \   00000030   0x6F89             LDR      R1,[R1, #+120]
   \   00000032   0x4788             BLX      R1
    566          
    567              if (res != FR_OK) {
   \   00000034   0x0028             MOVS     R0,R5
   \   00000036   0xD02C             BEQ      ??file_seek_4
    568                  debug_if(FFS_DBG, "lseek failed: %d\n", res);
   \   00000038   0x002A             MOVS     R2,R5
   \   0000003A   0xBF00             Nop      
   \   0000003C   0x....             ADR.N    R1,?_19
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      BL       _Z8debug_ifiPKcz
    569                  return fat_error_remap(res);
   \   00000044   0x2D13             CMP      R5,#+19
   \   00000046   0xD821             BHI      ??file_seek_5
   \   00000048   0xA001             ADR      R0,??file_seek_0
   \   0000004A   0x5D40             LDRB     R0,[R0, R5]
   \   0000004C   0x4487             ADD      PC,PC,R0
   \   0000004E   0xBF00             Nop      
   \                     ??file_seek_0:
   \   00000050   0x38 0x34          DC8      0x38,0x34,0x3C,0x34
   \              0x3C 0x34    
   \   00000054   0x30 0x30          DC8      0x30,0x30,0x30,0x2C
   \              0x30 0x2C    
   \   00000058   0x28 0x24          DC8      0x28,0x24,0x2C,0x30
   \              0x2C 0x30    
   \   0000005C   0x20 0x30          DC8      0x20,0x30,0x3C,0x3C
   \              0x3C 0x3C    
   \   00000060   0x2C 0x1C          DC8      0x2C,0x1C,0x18,0x14
   \              0x18 0x14    
   \                     ??file_seek_6: (+1)
   \   00000064   0x2007             MOVS     R0,#+7
   \   00000066   0xE012             B.N      ??file_seek_7
   \                     ??file_seek_8: (+1)
   \   00000068   0x2016             MOVS     R0,#+22
   \   0000006A   0xE010             B.N      ??file_seek_7
   \                     ??file_seek_9: (+1)
   \   0000006C   0x200B             MOVS     R0,#+11
   \   0000006E   0xE00E             B.N      ??file_seek_7
   \                     ??file_seek_10: (+1)
   \   00000070   0x2005             MOVS     R0,#+5
   \   00000072   0xE00C             B.N      ??file_seek_7
   \                     ??file_seek_11: (+1)
   \   00000074   0x200D             MOVS     R0,#+13
   \   00000076   0xE00A             B.N      ??file_seek_7
   \                     ??file_seek_12: (+1)
   \   00000078   0x2010             MOVS     R0,#+16
   \   0000007A   0xE008             B.N      ??file_seek_7
   \                     ??file_seek_13: (+1)
   \   0000007C   0x200C             MOVS     R0,#+12
   \   0000007E   0xE006             B.N      ??file_seek_7
   \                     ??file_seek_14: (+1)
   \   00000080   0x2001             MOVS     R0,#+1
   \   00000082   0xE004             B.N      ??file_seek_7
   \                     ??file_seek_15: (+1)
   \   00000084   0x2004             MOVS     R0,#+4
   \   00000086   0xE002             B.N      ??file_seek_7
   \                     ??file_seek_16: (+1)
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0xBDF2             POP      {R1,R4-R7,PC}
   \                     ??file_seek_5: (+1)
   \   0000008C   0x2008             MOVS     R0,#+8
   \                     ??file_seek_7: (+1)
   \   0000008E   0x43C0             MVNS     R0,R0            ;; #-9
    570              } else {
   \   00000090   0xBDF2             POP      {R1,R4-R7,PC}
    571                  return noffset;
   \                     ??file_seek_4: (+1)
   \   00000092   0x0020             MOVS     R0,R4
   \   00000094   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    572              }
    573          }
    574          

   \                                 In section .text, align 2, keep-with-next
    575          off_t FATFileSystem::file_tell(fs_file_t file) {
   \                     _ZN13FATFileSystem9file_tellEPv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    576              FIL *fh = static_cast<FIL*>(file);
    577          
    578              lock();
   \   00000006   0x6829             LDR      R1,[R5, #+0]
   \   00000008   0x6F49             LDR      R1,[R1, #+116]
   \   0000000A   0x4788             BLX      R1
    579              off_t res = fh->fptr;
   \   0000000C   0x68A4             LDR      R4,[R4, #+8]
    580              unlock();
   \   0000000E   0x....             B.N      ?Subroutine0
    581          
    582              return res;
    583          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x0028             MOVS     R0,R5
   \   00000002   0x6829             LDR      R1,[R5, #+0]
   \   00000004   0x6F89             LDR      R1,[R1, #+120]
   \   00000006   0x4788             BLX      R1
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    584          

   \                                 In section .text, align 2, keep-with-next
    585          off_t FATFileSystem::file_size(fs_file_t file) {
   \                     _ZN13FATFileSystem9file_sizeEPv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    586              FIL *fh = static_cast<FIL*>(file);
    587          
    588              lock();
   \   00000006   0x6829             LDR      R1,[R5, #+0]
   \   00000008   0x6F49             LDR      R1,[R1, #+116]
   \   0000000A   0x4788             BLX      R1
    589              off_t res = fh->fsize;
   \   0000000C   0x68E4             LDR      R4,[R4, #+12]
    590              unlock();
   \   0000000E                      REQUIRE ?Subroutine0
   \   0000000E                      ;; // Fall through to label ?Subroutine0
    591          
    592              return res;
    593          }
    594          
    595          
    596          ////// Dir operations //////

   \                                 In section .text, align 4, keep-with-next
    597          int FATFileSystem::dir_open(fs_dir_t *dir, const char *path) {
   \                     _ZN13FATFileSystem8dir_openEPPvPKc: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x000F             MOVS     R7,R1
   \   00000008   0x0015             MOVS     R5,R2
    598              FATFS_DIR *dh = new FATFS_DIR;
   \   0000000A   0x2024             MOVS     R0,#+36
   \   0000000C   0x.... 0x....      BL       _Znwj
   \   00000010   0x0004             MOVS     R4,R0
    599              Deferred<const char*> fpath = fat_path_prefix(_id, path);
   \   00000012   0x002A             MOVS     R2,R5
   \   00000014   0x6D31             LDR      R1,[R6, #+80]
   \   00000016   0x4668             MOV      R0,SP
   \   00000018   0x.... 0x....      BL       _Z15fat_path_prefixiPKc
    600          
    601              lock();
   \   0000001C   0x0030             MOVS     R0,R6
   \   0000001E   0x6831             LDR      R1,[R6, #+0]
   \   00000020   0x6F49             LDR      R1,[R1, #+116]
   \   00000022   0x4788             BLX      R1
    602              FRESULT res = f_opendir(dh, fpath);
   \   00000024   0x9900             LDR      R1,[SP, #+0]
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x.... 0x....      BL       f_opendir
   \   0000002C   0x0005             MOVS     R5,R0
    603              unlock();
   \   0000002E   0x0030             MOVS     R0,R6
   \   00000030   0x6831             LDR      R1,[R6, #+0]
   \   00000032   0x6F89             LDR      R1,[R1, #+120]
   \   00000034   0x4788             BLX      R1
    604          
    605              if (res != FR_OK) {
   \   00000036   0x0028             MOVS     R0,R5
   \   00000038   0xD031             BEQ      ??dir_open_1
    606                  debug_if(FFS_DBG, "f_opendir() failed: %d\n", res);
   \   0000003A   0x002A             MOVS     R2,R5
   \   0000003C   0x....             ADR.N    R1,?_20
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      BL       _Z8debug_ifiPKcz
    607                  delete dh;
   \   00000044   0x0020             MOVS     R0,R4
   \   00000046   0x.... 0x....      BL       _ZdlPv
    608                  return fat_error_remap(res);
   \   0000004A   0x2D13             CMP      R5,#+19
   \   0000004C   0xD820             BHI      ??dir_open_2
   \   0000004E   0xA001             ADR      R0,??dir_open_0
   \   00000050   0x5D40             LDRB     R0,[R0, R5]
   \   00000052   0x4487             ADD      PC,PC,R0
   \                     ??dir_open_0:
   \   00000054   0x36 0x32          DC8      0x36,0x32,0x3A,0x32
   \              0x3A 0x32    
   \   00000058   0x2E 0x2E          DC8      0x2E,0x2E,0x2E,0x2A
   \              0x2E 0x2A    
   \   0000005C   0x26 0x22          DC8      0x26,0x22,0x2A,0x2E
   \              0x2A 0x2E    
   \   00000060   0x1E 0x2E          DC8      0x1E,0x2E,0x3A,0x3A
   \              0x3A 0x3A    
   \   00000064   0x2A 0x1A          DC8      0x2A,0x1A,0x16,0x12
   \              0x16 0x12    
   \                     ??dir_open_3: (+1)
   \   00000068   0x2407             MOVS     R4,#+7
   \   0000006A   0xE012             B        ??dir_open_4
   \                     ??dir_open_5: (+1)
   \   0000006C   0x2416             MOVS     R4,#+22
   \   0000006E   0xE010             B        ??dir_open_4
   \                     ??dir_open_6: (+1)
   \   00000070   0x240B             MOVS     R4,#+11
   \   00000072   0xE00E             B        ??dir_open_4
   \                     ??dir_open_7: (+1)
   \   00000074   0x2405             MOVS     R4,#+5
   \   00000076   0xE00C             B        ??dir_open_4
   \                     ??dir_open_8: (+1)
   \   00000078   0x240D             MOVS     R4,#+13
   \   0000007A   0xE00A             B        ??dir_open_4
   \                     ??dir_open_9: (+1)
   \   0000007C   0x2410             MOVS     R4,#+16
   \   0000007E   0xE008             B        ??dir_open_4
   \                     ??dir_open_10: (+1)
   \   00000080   0x240C             MOVS     R4,#+12
   \   00000082   0xE006             B        ??dir_open_4
   \                     ??dir_open_11: (+1)
   \   00000084   0x2401             MOVS     R4,#+1
   \   00000086   0xE004             B        ??dir_open_4
   \                     ??dir_open_12: (+1)
   \   00000088   0x2404             MOVS     R4,#+4
   \   0000008A   0xE002             B        ??dir_open_4
   \                     ??dir_open_13: (+1)
   \   0000008C   0x2400             MOVS     R4,#+0
   \   0000008E   0xE001             B        ??dir_open_14
   \                     ??dir_open_2: (+1)
   \   00000090   0x2408             MOVS     R4,#+8
   \                     ??dir_open_4: (+1)
   \   00000092   0x43E4             MVNS     R4,R4            ;; #-9
    609              }
   \                     ??dir_open_14: (+1)
   \   00000094   0x4668             MOV      R0,SP
   \   00000096   0x.... 0x....      BL       _ZN8DeferredIPKcED1Ev
   \   0000009A   0x0020             MOVS     R0,R4
   \   0000009C   0xE004             B        ??dir_open_15
    610          
    611              *dir = dh;
   \                     ??dir_open_1: (+1)
   \   0000009E   0x603C             STR      R4,[R7, #+0]
    612              return 0;
   \   000000A0   0x4668             MOV      R0,SP
   \   000000A2   0x.... 0x....      BL       _ZN8DeferredIPKcED1Ev
   \   000000A6   0x2000             MOVS     R0,#+0
   \                     ??dir_open_15: (+1)
   \   000000A8   0xB005             ADD      SP,SP,#+20
   \   000000AA   0xBDF0             POP      {R4-R7,PC}       ;; return
    613          }
    614          

   \                                 In section .text, align 4, keep-with-next
    615          int FATFileSystem::dir_close(fs_dir_t dir) {
   \                     _ZN13FATFileSystem9dir_closeEPv: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    616              FATFS_DIR *dh = static_cast<FATFS_DIR*>(dir);
    617          
    618              lock();
   \   00000006   0x6829             LDR      R1,[R5, #+0]
   \   00000008   0x6F49             LDR      R1,[R1, #+116]
   \   0000000A   0x4788             BLX      R1
    619              FRESULT res = f_closedir(dh);
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       f_closedir
   \   00000012   0x0006             MOVS     R6,R0
    620              unlock();
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0x6829             LDR      R1,[R5, #+0]
   \   00000018   0x6F89             LDR      R1,[R1, #+120]
   \   0000001A   0x4788             BLX      R1
    621          
    622              delete dh;
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      BL       _ZdlPv
    623              return fat_error_remap(res);
   \   00000022   0x2E13             CMP      R6,#+19
   \   00000024   0xD820             BHI      ??dir_close_1
   \   00000026   0xA001             ADR      R0,??dir_close_0
   \   00000028   0x5D80             LDRB     R0,[R0, R6]
   \   0000002A   0x4487             ADD      PC,PC,R0
   \                     ??dir_close_0:
   \   0000002C   0x36 0x32          DC8      0x36,0x32,0x3A,0x32
   \              0x3A 0x32    
   \   00000030   0x2E 0x2E          DC8      0x2E,0x2E,0x2E,0x2A
   \              0x2E 0x2A    
   \   00000034   0x26 0x22          DC8      0x26,0x22,0x2A,0x2E
   \              0x2A 0x2E    
   \   00000038   0x1E 0x2E          DC8      0x1E,0x2E,0x3A,0x3A
   \              0x3A 0x3A    
   \   0000003C   0x2A 0x1A          DC8      0x2A,0x1A,0x16,0x12
   \              0x16 0x12    
   \                     ??dir_close_2: (+1)
   \   00000040   0x2007             MOVS     R0,#+7
   \   00000042   0xE012             B        ??dir_close_3
   \                     ??dir_close_4: (+1)
   \   00000044   0x2016             MOVS     R0,#+22
   \   00000046   0xE010             B        ??dir_close_3
   \                     ??dir_close_5: (+1)
   \   00000048   0x200B             MOVS     R0,#+11
   \   0000004A   0xE00E             B        ??dir_close_3
   \                     ??dir_close_6: (+1)
   \   0000004C   0x2005             MOVS     R0,#+5
   \   0000004E   0xE00C             B        ??dir_close_3
   \                     ??dir_close_7: (+1)
   \   00000050   0x200D             MOVS     R0,#+13
   \   00000052   0xE00A             B        ??dir_close_3
   \                     ??dir_close_8: (+1)
   \   00000054   0x2010             MOVS     R0,#+16
   \   00000056   0xE008             B        ??dir_close_3
   \                     ??dir_close_9: (+1)
   \   00000058   0x200C             MOVS     R0,#+12
   \   0000005A   0xE006             B        ??dir_close_3
   \                     ??dir_close_10: (+1)
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0xE004             B        ??dir_close_3
   \                     ??dir_close_11: (+1)
   \   00000060   0x2004             MOVS     R0,#+4
   \   00000062   0xE002             B        ??dir_close_3
   \                     ??dir_close_12: (+1)
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0xBD70             POP      {R4-R6,PC}
   \                     ??dir_close_1: (+1)
   \   00000068   0x2008             MOVS     R0,#+8
   \                     ??dir_close_3: (+1)
   \   0000006A   0x43C0             MVNS     R0,R0            ;; #-9
   \   0000006C   0xBD70             POP      {R4-R6,PC}       ;; return
    624          }
    625          

   \                                 In section .text, align 4, keep-with-next
    626          ssize_t FATFileSystem::dir_read(fs_dir_t dir, struct dirent *ent) {
   \                     _ZN13FATFileSystem8dir_readEPvP6dirent: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000E             MOVS     R6,R1
   \   00000008   0x0014             MOVS     R4,R2
    627              FATFS_DIR *dh = static_cast<FATFS_DIR*>(dir);
    628              FILINFO finfo;
    629          
    630          #if _USE_LFN
    631              finfo.lfname = ent->d_name;
   \   0000000A   0x9406             STR      R4,[SP, #+24]
    632              finfo.lfsize = NAME_MAX;
   \   0000000C   0x20FF             MOVS     R0,#+255
   \   0000000E   0x9007             STR      R0,[SP, #+28]
    633          #endif // _USE_LFN
    634          
    635              lock();
   \   00000010   0x0028             MOVS     R0,R5
   \   00000012   0x6829             LDR      R1,[R5, #+0]
   \   00000014   0x6F49             LDR      R1,[R1, #+116]
   \   00000016   0x4788             BLX      R1
    636              FRESULT res = f_readdir(dh, &finfo);
   \   00000018   0x4669             MOV      R1,SP
   \   0000001A   0x0030             MOVS     R0,R6
   \   0000001C   0x.... 0x....      BL       f_readdir
   \   00000020   0x0006             MOVS     R6,R0
    637              unlock();
   \   00000022   0x0028             MOVS     R0,R5
   \   00000024   0x6829             LDR      R1,[R5, #+0]
   \   00000026   0x6F89             LDR      R1,[R1, #+120]
   \   00000028   0x4788             BLX      R1
    638          
    639              if (res != FR_OK) {
   \   0000002A   0x0030             MOVS     R0,R6
   \   0000002C   0xD023             BEQ      ??dir_read_1
    640                  return fat_error_remap(res);
   \   0000002E   0x2E13             CMP      R6,#+19
   \   00000030   0xD81E             BHI      ??dir_read_2
   \   00000032   0xA001             ADR      R0,??dir_read_0
   \   00000034   0x5D80             LDRB     R0,[R0, R6]
   \   00000036   0x4487             ADD      PC,PC,R0
   \                     ??dir_read_0:
   \   00000038   0x44 0x32          DC8      0x44,0x32,0x36,0x32
   \              0x36 0x32    
   \   0000003C   0x2E 0x2E          DC8      0x2E,0x2E,0x2E,0x2A
   \              0x2E 0x2A    
   \   00000040   0x26 0x22          DC8      0x26,0x22,0x2A,0x2E
   \              0x2A 0x2E    
   \   00000044   0x1E 0x2E          DC8      0x1E,0x2E,0x36,0x36
   \              0x36 0x36    
   \   00000048   0x2A 0x1A          DC8      0x2A,0x1A,0x16,0x12
   \              0x16 0x12    
   \                     ??dir_read_3: (+1)
   \   0000004C   0x2007             MOVS     R0,#+7
   \   0000004E   0xE010             B.N      ??dir_read_4
   \                     ??dir_read_5: (+1)
   \   00000050   0x2016             MOVS     R0,#+22
   \   00000052   0xE00E             B.N      ??dir_read_4
   \                     ??dir_read_6: (+1)
   \   00000054   0x200B             MOVS     R0,#+11
   \   00000056   0xE00C             B.N      ??dir_read_4
   \                     ??dir_read_7: (+1)
   \   00000058   0x2005             MOVS     R0,#+5
   \   0000005A   0xE00A             B.N      ??dir_read_4
   \                     ??dir_read_8: (+1)
   \   0000005C   0x200D             MOVS     R0,#+13
   \   0000005E   0xE008             B.N      ??dir_read_4
   \                     ??dir_read_9: (+1)
   \   00000060   0x2010             MOVS     R0,#+16
   \   00000062   0xE006             B.N      ??dir_read_4
   \                     ??dir_read_10: (+1)
   \   00000064   0x200C             MOVS     R0,#+12
   \   00000066   0xE004             B.N      ??dir_read_4
   \                     ??dir_read_11: (+1)
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0xE002             B.N      ??dir_read_4
   \                     ??dir_read_12: (+1)
   \   0000006C   0x2004             MOVS     R0,#+4
   \   0000006E   0xE000             B.N      ??dir_read_4
   \                     ??dir_read_2: (+1)
   \   00000070   0x2008             MOVS     R0,#+8
   \                     ??dir_read_4: (+1)
   \   00000072   0x43C0             MVNS     R0,R0            ;; #-9
    641              } else if (finfo.fname[0] == 0) {
   \   00000074   0xE018             B        ??dir_read_13
   \                     ??dir_read_1: (+1)
   \   00000076   0x4668             MOV      R0,SP
   \   00000078   0x7A41             LDRB     R1,[R0, #+9]
   \   0000007A   0x2900             CMP      R1,#+0
   \   0000007C   0xD101             BNE      ??dir_read_14
    642                  return 0;
   \                     ??dir_read_15: (+1)
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0xE012             B        ??dir_read_13
    643              }
    644          
    645              ent->d_type = (finfo.fattrib & AM_DIR) ? DT_DIR : DT_REG;
   \                     ??dir_read_14: (+1)
   \   00000082   0x7A01             LDRB     R1,[R0, #+8]
   \   00000084   0x06C9             LSLS     R1,R1,#+27
   \   00000086   0xD501             BPL      ??dir_read_16
   \   00000088   0x2103             MOVS     R1,#+3
   \   0000008A   0xE000             B        ??dir_read_17
   \                     ??dir_read_16: (+1)
   \   0000008C   0x2105             MOVS     R1,#+5
   \                     ??dir_read_17: (+1)
   \   0000008E   0x2280             MOVS     R2,#+128
   \   00000090   0x0052             LSLS     R2,R2,#+1        ;; #+256
   \   00000092   0x54A1             STRB     R1,[R4, R2]
    646          
    647          #if _USE_LFN
    648              if (ent->d_name[0] == 0) {
   \   00000094   0x7821             LDRB     R1,[R4, #+0]
   \   00000096   0x2900             CMP      R1,#+0
   \   00000098   0xD105             BNE      ??dir_read_18
    649                  // No long filename so use short filename.
    650                  strncpy(ent->d_name, finfo.fname, NAME_MAX);
   \   0000009A   0x22FF             MOVS     R2,#+255
   \   0000009C   0x0001             MOVS     R1,R0
   \   0000009E   0x3109             ADDS     R1,R1,#+9
   \   000000A0   0x0020             MOVS     R0,R4
   \   000000A2   0x.... 0x....      BL       strncpy
    651              }
    652          #else
    653              strncpy(end->d_name, finfo.fname, len);
    654          #endif
    655          
    656              return 1;
   \                     ??dir_read_18: (+1)
   \   000000A6   0x2001             MOVS     R0,#+1
   \                     ??dir_read_13: (+1)
   \   000000A8   0xB008             ADD      SP,SP,#+32
   \   000000AA   0xBD70             POP      {R4-R6,PC}       ;; return
    657          }
    658          

   \                                 In section .text, align 2, keep-with-next
    659          void FATFileSystem::dir_seek(fs_dir_t dir, off_t offset) {
   \                     _ZN13FATFileSystem8dir_seekEPvl: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0C8             SUB      SP,SP,#+288
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0016             MOVS     R6,R2
    660              FATFS_DIR *dh = static_cast<FATFS_DIR*>(dir);
    661          
    662              lock();
   \   0000000A   0x6829             LDR      R1,[R5, #+0]
   \   0000000C   0x6F49             LDR      R1,[R1, #+116]
   \   0000000E   0x4788             BLX      R1
    663              if (offset < dh->index) {
   \   00000010   0x88E0             LDRH     R0,[R4, #+6]
   \   00000012   0x4286             CMP      R6,R0
   \   00000014   0xDA03             BGE      ??dir_seek_0
    664                  f_rewinddir(dh);
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x.... 0x....      BL       f_readdir
    665              }
    666              while (dh->index < offset) {
   \                     ??dir_seek_0: (+1)
   \   0000001E   0x88E0             LDRH     R0,[R4, #+6]
   \   00000020   0x42B0             CMP      R0,R6
   \   00000022   0xDA0D             BGE      ??dir_seek_1
    667                  FILINFO finfo;
    668                  FRESULT res;
    669          #if _USE_LFN
    670                  char lfname[NAME_MAX];
    671                  finfo.lfname = lfname;
   \   00000024   0xA808             ADD      R0,SP,#+32
   \   00000026   0x9006             STR      R0,[SP, #+24]
    672                  finfo.lfsize = NAME_MAX;
   \   00000028   0x20FF             MOVS     R0,#+255
   \   0000002A   0x9007             STR      R0,[SP, #+28]
    673          #endif // _USE_LFN
    674                  res = f_readdir(dh, &finfo);
    675                  if (res != FR_OK) {
   \   0000002C   0x4669             MOV      R1,SP
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0x.... 0x....      BL       f_readdir
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD103             BNE      ??dir_seek_1
    676                      break;
    677                  } else if (finfo.fname[0] == 0) {
   \   00000038   0x4668             MOV      R0,SP
   \   0000003A   0x7A40             LDRB     R0,[R0, #+9]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD1EE             BNE      ??dir_seek_0
    678                      break;
    679                  }
    680              }
    681              unlock();
   \                     ??dir_seek_1: (+1)
   \   00000040   0x0028             MOVS     R0,R5
   \   00000042   0x6829             LDR      R1,[R5, #+0]
   \   00000044   0x6F89             LDR      R1,[R1, #+120]
   \   00000046   0x4788             BLX      R1
    682          }
   \   00000048   0xB048             ADD      SP,SP,#+288
   \   0000004A   0xBD70             POP      {R4-R6,PC}       ;; return
    683          

   \                                 In section .text, align 2, keep-with-next
    684          off_t FATFileSystem::dir_tell(fs_dir_t dir) {
   \                     _ZN13FATFileSystem8dir_tellEPv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    685              FATFS_DIR *dh = static_cast<FATFS_DIR*>(dir);
    686          
    687              lock();
   \   00000006   0x6829             LDR      R1,[R5, #+0]
   \   00000008   0x6F49             LDR      R1,[R1, #+116]
   \   0000000A   0x4788             BLX      R1
    688              off_t offset = dh->index;
   \   0000000C   0x88E4             LDRH     R4,[R4, #+6]
    689              unlock();
   \   0000000E   0x....             B.N      ?Subroutine0
    690          
    691              return offset;
    692          }
    693          

   \                                 In section .text, align 2, keep-with-next
    694          void FATFileSystem::dir_rewind(fs_dir_t dir) {
   \                     _ZN13FATFileSystem10dir_rewindEPv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    695              FATFS_DIR *dh = static_cast<FATFS_DIR*>(dir);
    696          
    697              lock();
   \   00000006   0x6821             LDR      R1,[R4, #+0]
   \   00000008   0x6F49             LDR      R1,[R1, #+116]
   \   0000000A   0x4788             BLX      R1
    698              f_rewinddir(dh);
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0x.... 0x....      BL       f_readdir
    699              unlock();
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x6821             LDR      R1,[R4, #+0]
   \   00000018   0x6F89             LDR      R1,[R1, #+120]
   \   0000001A   0x4788             BLX      R1
    700          }
   \   0000001C   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x30 0x3A          DC8 "0:/"
   \              0x2F 0x00    

   \                                 In section .text, align 2, keep-with-next
   \   __interwork __softfp void FATFileSystem::deleter ~FATFileSystem for FileBase/-4/()
   \                     _ZThn4_N13FATFileSystemD0Ev: (+1)
   \   00000000   0x1F00             SUBS     R0,R0,#+4
   \   00000002                      REQUIRE _ZN13FATFileSystemD0Ev
   \   00000002                      ;; // Fall through to label FATFileSystem::deleter ~FATFileSystem()

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x73 0x73          DC8 "ssize >= _MIN_SS && ssize <= _MAX_SS"
   \              0x69 0x7A    
   \              0x65 0x20    
   \              0x3E 0x3D    
   \              0x20 0x5F    
   \              0x4D 0x49    
   \              0x4E 0x5F    
   \              0x53 0x53    
   \              0x20 0x26    
   \              0x26 0x20    
   \              0x73 0x73    
   \              0x69 0x7A    
   \              0x65 0x20    
   \              0x3C 0x3D    
   \              0x20 0x5F    
   \              0x4D 0x41    
   \              0x58 0x5F    
   \              0x53 0x53    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x5F 0x66          DC8 5FH, 66H, 66H, 73H, 5BH, 70H, 64H, 72H
   \              0x66 0x73    
   \              0x5B 0x70    
   \              0x64 0x72    
   \   00000008   0x76 0x5D          DC8 76H, 5DH, 2DH, 3EH, 67H, 65H, 74H, 5FH
   \              0x2D 0x3E    
   \              0x67 0x65    
   \              0x74 0x5F    
   \   00000010   0x72 0x65          DC8 72H, 65H, 61H, 64H, 5FH, 73H, 69H, 7AH
   \              0x61 0x64    
   \              0x5F 0x73    
   \              0x69 0x7A    
   \   00000018   0x65 0x28          DC8 65H, 28H, 29H, 20H, 3CH, 3DH, 20H, 5FH
   \              0x29 0x20    
   \              0x3C 0x3D    
   \              0x20 0x5F    
   \   00000020   0x66 0x66          DC8 66H, 66H, 73H, 5BH, 70H, 64H, 72H, 76H
   \              0x73 0x5B    
   \              0x70 0x64    
   \              0x72 0x76    
   \   00000028   0x5D 0x2D          DC8 5DH, 2DH, 3EH, 67H, 65H, 74H, 5FH, 65H
   \              0x3E 0x67    
   \              0x65 0x74    
   \              0x5F 0x65    
   \   00000030   0x72 0x61          DC8 72H, 61H, 73H, 65H, 5FH, 73H, 69H, 7AH
   \              0x73 0x65    
   \              0x5F 0x73    
   \              0x69 0x7A    
   \   00000038   0x65 0x28          DC8 65H, 28H, 29H, 0
   \              0x29 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x5F 0x66          DC8 5FH, 66H, 66H, 73H, 5BH, 70H, 64H, 72H
   \              0x66 0x73    
   \              0x5B 0x70    
   \              0x64 0x72    
   \   00000008   0x76 0x5D          DC8 76H, 5DH, 2DH, 3EH, 67H, 65H, 74H, 5FH
   \              0x2D 0x3E    
   \              0x67 0x65    
   \              0x74 0x5F    
   \   00000010   0x70 0x72          DC8 70H, 72H, 6FH, 67H, 72H, 61H, 6DH, 5FH
   \              0x6F 0x67    
   \              0x72 0x61    
   \              0x6D 0x5F    
   \   00000018   0x73 0x69          DC8 73H, 69H, 7AH, 65H, 28H, 29H, 20H, 3CH
   \              0x7A 0x65    
   \              0x28 0x29    
   \              0x20 0x3C    
   \   00000020   0x3D 0x20          DC8 3DH, 20H, 5FH, 66H, 66H, 73H, 5BH, 70H
   \              0x5F 0x66    
   \              0x66 0x73    
   \              0x5B 0x70    
   \   00000028   0x64 0x72          DC8 64H, 72H, 76H, 5DH, 2DH, 3EH, 67H, 65H
   \              0x76 0x5D    
   \              0x2D 0x3E    
   \              0x67 0x65    
   \   00000030   0x74 0x5F          DC8 74H, 5FH, 65H, 72H, 61H, 73H, 65H, 5FH
   \              0x65 0x72    
   \              0x61 0x73    
   \              0x65 0x5F    
   \   00000038   0x73 0x69          DC8 73H, 69H, 7AH, 65H, 28H, 29H, 0
   \              0x7A 0x65    
   \              0x28 0x29    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x64 0x69          DC8 "disk_status on pdrv [%d]\012"
   \              0x73 0x6B    
   \              0x5F 0x73    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x20    
   \              0x6F 0x6E    
   \              0x20 0x70    
   \              0x64 0x72    
   \              0x76 0x20    
   \              0x5B 0x25    
   \              0x64 0x5D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x64 0x69          DC8 "disk_initialize on pdrv [%d]\012"
   \              0x73 0x6B    
   \              0x5F 0x69    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x65 0x20    
   \              0x6F 0x6E    
   \              0x20 0x70    
   \              0x64 0x72    
   \              0x76 0x20    
   \              0x5B 0x25    
   \              0x64 0x5D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x64 0x69          DC8 "disk_read(sector %d, count %d) on pdrv [%d]\012"
   \              0x73 0x6B    
   \              0x5F 0x72    
   \              0x65 0x61    
   \              0x64 0x28    
   \              0x73 0x65    
   \              0x63 0x74    
   \              0x6F 0x72    
   \              0x20 0x25    
   \              0x64 0x2C    
   \              0x20 0x63    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x20 0x25    
   \              0x64 0x29    
   \              0x20 0x6F    
   \              0x6E 0x20    
   \              0x70 0x64    
   \              0x72 0x76    
   \              0x20 0x5B    
   \              0x25 0x64    
   \              0x5D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   0x30 0x3A          DC8      "0:/"
   \              0x2F 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_1:
   \   00000000   0x........         DC32     _Z8dodeletePKc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_2:
   \   00000000   0x........         DC32     _ffs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_3:
   \   00000000   0xFFFFFE00         DC32     0xfffffe00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_4:
   \   00000000   0x00000E01         DC32     0xe01

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_5:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x64 0x69          DC8 "disk_write(sector %d, count %d) on pdrv [%d]\012"
   \              0x73 0x6B    
   \              0x5F 0x77    
   \              0x72 0x69    
   \              0x74 0x65    
   \              0x28 0x73    
   \              0x65 0x63    
   \              0x74 0x6F    
   \              0x72 0x20    
   \              0x25 0x64    
   \              0x2C 0x20    
   \              0x63 0x6F    
   \              0x75 0x6E    
   \              0x74 0x20    
   \              0x25 0x64    
   \              0x29 0x20    
   \              0x6F 0x6E    
   \              0x20 0x70    
   \              0x64 0x72    
   \              0x76 0x20    
   \              0x5B 0x25    
   \              0x64 0x5D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x64 0x69          DC8 "disk_ioctl(%d)\012"
   \              0x73 0x6B    
   \              0x5F 0x69    
   \              0x6F 0x63    
   \              0x74 0x6C    
   \              0x28 0x25    
   \              0x64 0x29    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x2E 0x5C          DC8 2EH, 5CH, 6DH, 62H, 65H, 64H, 2DH, 6FH
   \              0x6D 0x62    
   \              0x65 0x64    
   \              0x2D 0x6F    
   \   00000008   0x73 0x5C          DC8 73H, 5CH, 66H, 65H, 61H, 74H, 75H, 72H
   \              0x66 0x65    
   \              0x61 0x74    
   \              0x75 0x72    
   \   00000010   0x65 0x73          DC8 65H, 73H, 5CH, 66H, 69H, 6CH, 65H, 73H
   \              0x5C 0x66    
   \              0x69 0x6C    
   \              0x65 0x73    
   \   00000018   0x79 0x73          DC8 79H, 73H, 74H, 65H, 6DH, 5CH, 66H, 61H
   \              0x74 0x65    
   \              0x6D 0x5C    
   \              0x66 0x61    
   \   00000020   0x74 0x5C          DC8 74H, 5CH, 46H, 41H, 54H, 46H, 69H, 6CH
   \              0x46 0x41    
   \              0x54 0x46    
   \              0x69 0x6C    
   \   00000028   0x65 0x53          DC8 65H, 53H, 79H, 73H, 74H, 65H, 6DH, 2EH
   \              0x79 0x73    
   \              0x74 0x65    
   \              0x6D 0x2E    
   \   00000030   0x63 0x70          DC8 63H, 70H, 70H, 0
   \              0x70 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x73 0x63          DC8 "scount >= 64"
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x20 0x3E    
   \              0x3D 0x20    
   \              0x36 0x34    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 2, keep-with-next
   \   __interwork __softfp void *FATFileSystem::~FATFileSystem for FileBase/-4/()
   \                     _ZThn4_N13FATFileSystemD1Ev: (+1)
   \   00000000   0x1F00             SUBS     R0,R0,#+4
   \   00000002                      REQUIRE _ZN13FATFileSystemD1Ev
   \   00000002                      ;; // Fall through to label FATFileSystem::~FATFileSystem()

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31:
   \   00000000   0x........         DC32     _ffs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_1:
   \   00000000   0x........         DC32     _ZTV13FATFileSystem

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32:
   \   00000000   0x........         DC32     ?_21

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_1:
   \   00000000   0x........         DC32     _ffs

   \                                 In section .text, align 4, keep-with-next
   \                     ?_21:
   \   00000000   0x4D 0x6F          DC8 "Mounting [%s] on ffs drive [%s]\012"
   \              0x75 0x6E    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x5B    
   \              0x25 0x73    
   \              0x5D 0x20    
   \              0x6F 0x6E    
   \              0x20 0x66    
   \              0x66 0x73    
   \              0x20 0x64    
   \              0x72 0x69    
   \              0x76 0x65    
   \              0x20 0x5B    
   \              0x25 0x73    
   \              0x5D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33:
   \   00000000   0x........         DC32     _ZTV13FATFileSystem

   \                                 In section .text, align 4, keep-with-next
   \                     ?_11:
   \   00000000   0x66 0x5F          DC8 "f_unlink() failed: %d\012"
   \              0x75 0x6E    
   \              0x6C 0x69    
   \              0x6E 0x6B    
   \              0x28 0x29    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x3A    
   \              0x20 0x25    
   \              0x64 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_12:
   \   00000000   0x66 0x5F          DC8 "f_rename() failed: %d\012"
   \              0x72 0x65    
   \              0x6E 0x61    
   \              0x6D 0x65    
   \              0x28 0x29    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x3A    
   \              0x20 0x25    
   \              0x64 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_13:
   \   00000000   0x66 0x5F          DC8 "f_mkdir() failed: %d\012"
   \              0x6D 0x6B    
   \              0x64 0x69    
   \              0x72 0x28    
   \              0x29 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35:
   \   00000000   0x........         DC32     _ffs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_1:
   \   00000000   0x........         DC32     _ffs+0x10

   \                                 In section .text, align 4, keep-with-next
   \                     ?_14:
   \   00000000   0x6F 0x70          DC8 "open(%s) on filesystem [%s], drv [%s]\012"
   \              0x65 0x6E    
   \              0x28 0x25    
   \              0x73 0x29    
   \              0x20 0x6F    
   \              0x6E 0x20    
   \              0x66 0x69    
   \              0x6C 0x65    
   \              0x73 0x79    
   \              0x73 0x74    
   \              0x65 0x6D    
   \              0x20 0x5B    
   \              0x25 0x73    
   \              0x5D 0x2C    
   \              0x20 0x64    
   \              0x72 0x76    
   \              0x20 0x5B    
   \              0x25 0x73    
   \              0x5D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_15:
   \   00000000   0x66 0x5F          DC8 "f_open('w') failed: %d\012"
   \              0x6F 0x70    
   \              0x65 0x6E    
   \              0x28 0x27    
   \              0x77 0x27    
   \              0x29 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_16:
   \   00000000   0x66 0x5F          DC8 "f_read() failed: %d\012"
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x28 0x29    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x3A    
   \              0x20 0x25    
   \              0x64 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_17:
   \   00000000   0x66 0x5F          DC8 "f_write() failed: %d"
   \              0x77 0x72    
   \              0x69 0x74    
   \              0x65 0x28    
   \              0x29 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_18:
   \   00000000   0x66 0x5F          DC8 "f_sync() failed: %d\012"
   \              0x73 0x79    
   \              0x6E 0x63    
   \              0x28 0x29    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x3A    
   \              0x20 0x25    
   \              0x64 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_19:
   \   00000000   0x6C 0x73          DC8 "lseek failed: %d\012"
   \              0x65 0x65    
   \              0x6B 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_20:
   \   00000000   0x66 0x5F          DC8 "f_opendir() failed: %d\012"
   \              0x6F 0x70    
   \              0x65 0x6E    
   \              0x64 0x69    
   \              0x72 0x28    
   \              0x29 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x0A 0x00    
    701          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Deferred<char const *>::~Deferred()
         8   -- Indirect call
      16   FATFileSystem::FATFileSystem(char const *, BlockDevice *)
        16   -> FATFileSystem::mount(BlockDevice *, bool)
        16   -> mbed::FileSystem::subobject FileSystem(char const *)
       0   FATFileSystem::deleter ~FATFileSystem for FileBase/-4/()
         0   -> FATFileSystem::deleter ~FATFileSystem()
       8   FATFileSystem::deleter ~FATFileSystem()
         8   -> FATFileSystem::~FATFileSystem()
         8   -> operator delete(void *)
      16   FATFileSystem::dir_close(void *)
        16   -- Indirect call
        16   -> f_closedir
        16   -> operator delete(void *)
      40   FATFileSystem::dir_open(void * *, char const *)
        40   -- Indirect call
        40   -> Deferred<char const *>::~Deferred()
        40   -> debug_if(int, char const *, ...)
        40   -> f_opendir
        40   -> fat_path_prefix(int, char const *)
        40   -> operator delete(void *)
        40   -> operator new(std::size_t)
      48   FATFileSystem::dir_read(void *, dirent *)
        48   -- Indirect call
        48   -> f_readdir
        48   -> std::strncpy
      16   FATFileSystem::dir_rewind(void *)
        16   -- Indirect call
        16   -> f_readdir
     304   FATFileSystem::dir_seek(void *, off_t)
       304   -- Indirect call
       304   -> f_readdir
      16   FATFileSystem::dir_tell(void *)
        16   -- Indirect call
      16   FATFileSystem::file_close(void *)
        16   -- Indirect call
        16   -> f_close
        16   -> operator delete(void *)
      48   FATFileSystem::file_open(void * *, char const *, int)
        48   -- Indirect call
        48   -> Deferred<char const *>::~Deferred()
        48   -> debug_if(int, char const *, ...)
        48   -> f_lseek
        48   -> f_open
        48   -> fat_path_prefix(int, char const *)
        48   -> mbed::FileBase::getName()
        48   -> operator delete(void *)
        48   -> operator new(std::size_t)
      24   FATFileSystem::file_read(void *, void *, std::size_t)
        24   -- Indirect call
        24   -> debug_if(int, char const *, ...)
        24   -> f_read
      24   FATFileSystem::file_seek(void *, off_t, int)
        24   -- Indirect call
        24   -> debug_if(int, char const *, ...)
        24   -> f_lseek
      16   FATFileSystem::file_size(void *)
        16   -- Indirect call
      16   FATFileSystem::file_sync(void *)
        16   -- Indirect call
        16   -> debug_if(int, char const *, ...)
        16   -> f_sync
      16   FATFileSystem::file_tell(void *)
        16   -- Indirect call
      24   FATFileSystem::file_write(void *, void const *, std::size_t)
        24   -- Indirect call
        24   -> debug_if(int, char const *, ...)
        24   -> f_write
     120   FATFileSystem::format(BlockDevice *, bd_size_t)
       120   -- Indirect call
       120   -> FATFileSystem::FATFileSystem(char const *, BlockDevice *)
       120   -> FATFileSystem::unmount()
       120   -> FATFileSystem::~FATFileSystem()
       120   -> SingletonPtr<rtos::Mutex>::operator->()
       120   -> debug_if(int, char const *, ...)
       120   -> f_mkfs
       120   -> f_mount
       120   -> mbed::FileBase::getName()
       120   -> mbed::FileBase::subobject ~FileBase()
       120   -> rtos::Mutex::lock(unsigned int)
       120   -> rtos::Mutex::unlock()
       8   FATFileSystem::lock()
         8   -> SingletonPtr<rtos::Mutex>::operator->()
         8   -> rtos::Mutex::lock(unsigned int)
      32   FATFileSystem::mkdir(char const *, mode_t)
        32   -- Indirect call
        32   -> Deferred<char const *>::~Deferred()
        32   -> debug_if(int, char const *, ...)
        32   -> f_mkdir
        32   -> fat_path_prefix(int, char const *)
       8   FATFileSystem::mount(BlockDevice *)
         8   -- Indirect call
      24   FATFileSystem::mount(BlockDevice *, bool)
        24   -- Indirect call
        24   -> debug_if(int, char const *, ...)
        24   -> f_mount
        24   -> mbed::FileBase::getName()
       8   FATFileSystem::reformat(BlockDevice *)
         8   -- Indirect call
      24   FATFileSystem::reformat(BlockDevice *, int)
        24   -- Indirect call
        24   -> FATFileSystem::format(BlockDevice *, bd_size_t)
      32   FATFileSystem::remove(char const *)
        32   -- Indirect call
        32   -> Deferred<char const *>::~Deferred()
        32   -> debug_if(int, char const *, ...)
        32   -> f_unlink
        32   -> fat_path_prefix(int, char const *)
      56   FATFileSystem::rename(char const *, char const *)
        56   -- Indirect call
        56   -> Deferred<char const *>::~Deferred()
        56   -> debug_if(int, char const *, ...)
        56   -> f_rename
        56   -> fat_path_prefix(int, char const *)
      64   FATFileSystem::stat(char const *, stat *)
        64   -- Indirect call
        64   -> Deferred<char const *>::~Deferred()
        64   -> __aeabi_memclr4
        64   -> f_stat
        64   -> fat_path_prefix(int, char const *)
       8   FATFileSystem::subobject FATFileSystem(char const *, BlockDevice *)
         8   -> FATFileSystem::FATFileSystem(char const *, BlockDevice *)
       8   FATFileSystem::subobject ~FATFileSystem()
         8   -> FATFileSystem::~FATFileSystem()
       8   FATFileSystem::unlock()
         8   -> SingletonPtr<rtos::Mutex>::operator->()
         8   -> rtos::Mutex::unlock()
      24   FATFileSystem::unmount()
        24   -- Indirect call
        24   -> f_mount
       0   FATFileSystem::~FATFileSystem for FileBase/-4/()
         0   -> FATFileSystem::~FATFileSystem()
       8   FATFileSystem::~FATFileSystem()
         8   -> FATFileSystem::unmount()
         8   -> mbed::FileBase::subobject ~FileBase()
      16   SingletonPtr<rtos::Mutex>::operator->()
        16   -> mbed_assert_internal
        16   -> osMutexAcquire
        16   -> osMutexRelease
        16   -> rtos::Mutex::Mutex()
       8   debug_if(int, char const *, ...)
      24   disk_get_sector_size(BYTE)
        24   -- Indirect call
        24   -> mbed_assert_internal
       8   disk_initialize
         8   -- Indirect call
         8   -> debug_if(int, char const *, ...)
      32   disk_ioctl
        32   -- Indirect call
        32   -> debug_if(int, char const *, ...)
        32   -> disk_get_sector_size(BYTE)
        32   -> mbed_assert_internal
        32 __aeabi_uldivmod
      32   disk_read
        32   -- Indirect call
        32   -> debug_if(int, char const *, ...)
        32   -> disk_get_sector_size(BYTE)
       8   disk_status
         8   -> debug_if(int, char const *, ...)
      48   disk_write
        48   -- Indirect call
        48   -> debug_if(int, char const *, ...)
        48   -> disk_get_sector_size(BYTE)
       8   dodelete(char const *)
         8   -> operator delete[](void *)
      40   fat_path_prefix(int, char const *)
        40   -- Indirect call
        40   -> mbed::Callback<void (char const *)>::Callback(void (*)(char const *))
        40   -> operator new[](std::size_t)
        40   -> std::strcpy
        40   -> std::strlen
       8   ff_memalloc
         8   -> std::malloc
       8   ff_memfree
         8   -> std::free
       8   get_fattime
         8   -> std::__localtime32
         8   -> std::__time32
      12   mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
       8   mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
         8   -- Indirect call
       0   mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
       0   mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
       8   mbed::Callback<void (char const *)>::Callback(void (*)(char const *))
       8   mbed::Callback<void (char const *)>::function_call<void (*)(char const *)>(void const *, char const *)
         8   -- Indirect call
       0   mbed::Callback<void (char const *)>::function_dtor<void (*)(char const *)>(void *)
       0   mbed::Callback<void (char const *)>::function_move<void (*)(char const *)>(void *, void const *)
       8   mbed::callback<>(void (*)(void *), void *)
         8   -> mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable26
       4  ??DataTable26_1
       4  ??DataTable26_2
       4  ??DataTable26_3
       4  ??DataTable26_4
       4  ??DataTable26_5
       4  ??DataTable31
       4  ??DataTable31_1
       4  ??DataTable32
       4  ??DataTable32_1
       4  ??DataTable33
       4  ??DataTable35
       4  ??DataTable35_1
      12  ?Subroutine0
      12  ?Subroutine1
       4  ?_0
      40  ?_1
      16  ?_10
      24  ?_11
      24  ?_12
      24  ?_13
      40  ?_14
      24  ?_15
      24  ?_16
      24  ?_17
      24  ?_18
      20  ?_19
      52  ?_2
      24  ?_20
      36  ?_21
      60  ?_3
      64  ?_4
      16  ?_5
      28  ?_6
      32  ?_7
      48  ?_8
      48  ?_9
      36  Deferred<char const *>::~Deferred()
      46  FATFileSystem::FATFileSystem(char const *, BlockDevice *)
       2  FATFileSystem::deleter ~FATFileSystem for FileBase/-4/()
      16  FATFileSystem::deleter ~FATFileSystem()
     110  FATFileSystem::dir_close(void *)
     172  FATFileSystem::dir_open(void * *, char const *)
     172  FATFileSystem::dir_read(void *, dirent *)
      30  FATFileSystem::dir_rewind(void *)
      76  FATFileSystem::dir_seek(void *, off_t)
      16  FATFileSystem::dir_tell(void *)
     110  FATFileSystem::file_close(void *)
     254  FATFileSystem::file_open(void * *, char const *, int)
     134  FATFileSystem::file_read(void *, void *, std::size_t)
     150  FATFileSystem::file_seek(void *, off_t, int)
      14  FATFileSystem::file_size(void *)
     122  FATFileSystem::file_sync(void *)
      16  FATFileSystem::file_tell(void *)
     134  FATFileSystem::file_write(void *, void const *, std::size_t)
     420  FATFileSystem::format(BlockDevice *, bd_size_t)
      18  FATFileSystem::lock()
     132  FATFileSystem::mkdir(char const *, mode_t)
      12  FATFileSystem::mount(BlockDevice *)
     218  FATFileSystem::mount(BlockDevice *, bool)
      12  FATFileSystem::reformat(BlockDevice *)
     108  FATFileSystem::reformat(BlockDevice *, int)
     134  FATFileSystem::remove(char const *)
     162  FATFileSystem::rename(char const *, char const *)
     154  FATFileSystem::stat(char const *, stat *)
       8  FATFileSystem::subobject FATFileSystem(char const *, BlockDevice *)
       8  FATFileSystem::subobject ~FATFileSystem()
      14  FATFileSystem::unlock()
     142  FATFileSystem::unmount()
       2  FATFileSystem::~FATFileSystem for FileBase/-4/()
      32  FATFileSystem::~FATFileSystem()
      80  SingletonPtr<rtos::Mutex>::operator->()
      56  _ffs
          _ffs_mutex
       6  debug_if(int, char const *, ...)
     134  disk_get_sector_size(BYTE)
      32  disk_initialize
     204  disk_ioctl
      68  disk_read
      16  disk_status
     110  disk_write
       8  dodelete(char const *)
     134  fat_path_prefix(int, char const *)
       8  ff_memalloc
       8  ff_memfree
      58  get_fattime
      32  mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
      12  mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
       2  mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
      10  mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
      48  mbed::Callback<void (char const *)>::Callback(void (*)(char const *))
      12  mbed::Callback<void (char const *)>::function_call<void (*)(char const *)>(void const *, char const *)
       2  mbed::Callback<void (char const *)>::function_dtor<void (*)(char const *)>(void *)
      10  mbed::Callback<void (char const *)>::function_move<void (*)(char const *)>(void *, void const *)
       8  mbed::callback<>(void (*)(void *), void *)
      12  ops
      12  ops
     752  -- Other

 
    56 bytes in section .bss
   780 bytes in section .rodata
 4 956 bytes in section .text
 
 4 692 bytes of CODE  memory (+ 264 bytes shared)
     4 bytes of CONST memory (+ 776 bytes shared)
    56 bytes of DATA  memory

Errors: none
Warnings: none
