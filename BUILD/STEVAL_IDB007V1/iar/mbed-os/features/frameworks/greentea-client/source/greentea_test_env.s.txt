###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       16/Mar/2018  12:16:12
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        .\mbed-os\features\frameworks\greentea-client\source\greentea_test_env.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DDEVICE_SERIAL=1 -DTARGET_CORTEX_M -DDEVICE_SPI=1 -DTARGET_LIKE_MBED
#        -DMBED_BUILD_TIMESTAMP=1521198946.13 -DARM_MATH_CM0 -DTARGET_RELEASE
#        -D__CORTEX_M0 -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0
#        -DTOOLCHAIN_object -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -f
#        .\BUILD\STEVAL_IDB007V1\iar\.includes_fc2e77952737cb4522ab0dffe8cfd8aa.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN
#        -I./mbed-os/features/frameworks
#        -I./mbed-os/features/frameworks/greentea-client
#        -I./mbed-os/features/frameworks/greentea-client/greentea-client
#        -I./mbed-os/features/frameworks/greentea-client/source
#        -I./mbed-os/features/frameworks/unity
#        -I./mbed-os/features/frameworks/unity/source
#        -I./mbed-os/features/frameworks/unity/unity
#        -I./mbed-os/features/frameworks/utest
#        -I./mbed-os/features/frameworks/utest/source
#        -I./mbed-os/features/frameworks/utest/utest
#        -I./mbed-os/features/mbedtls -I./mbed-os/features/mbedtls/importer
#        -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/features/netsocket
#        -I./mbed-os/features/netsocket/cellular
#        -I./mbed-os/features/netsocket/cellular/generic_modem_driver
#        -I./mbed-os/features/netsocket/cellular/utils
#        -I./mbed-os/features/storage -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\iar\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\frameworks\greentea-client\source\greentea_test_env.d
#        -l
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\frameworks\greentea-client\source\greentea_test_env.s.txt
#        -o
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\frameworks\greentea-client\source\greentea_test_env.o
#        .\mbed-os\features\frameworks\greentea-client\source\greentea_test_env.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\frameworks\greentea-client\source\greentea_test_env.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\frameworks\greentea-client\source\greentea_test_env.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia\mbed-os\features\frameworks\greentea-client\source\greentea_test_env.cpp
      1          /*
      2           * Copyright (c) 2013-2016, ARM Limited, All Rights Reserved
      3           * SPDX-License-Identifier: Apache-2.0
      4           *
      5           * Licensed under the Apache License, Version 2.0 (the "License"); you may
      6           * not use this file except in compliance with the License.
      7           * You may obtain a copy of the License at
      8           *
      9           * http://www.apache.org/licenses/LICENSE-2.0
     10           *
     11           * Unless required by applicable law or agreed to in writing, software
     12           * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     13           * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     14           * See the License for the specific language governing permissions and
     15           * limitations under the License.
     16           */
     17          
     18          #include <ctype.h>
     19          #include <cstdio>
     20          #include <string.h>
     21          #include "mbed.h"

   \                                 In section .text, align 4
   \   __code __interwork __softfp mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
   \                     _ZN4mbed8CallbackIFvvEEC1IvvEEPFvPT_EPT0_: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0xC078             STM      R0!,{R3-R6}
   \   0000000C   0x3810             SUBS     R0,R0,#+16
   \   0000000E   0xD001             BEQ      ??Callback_0
   \   00000010   0x6001             STR      R1,[R0, #+0]
   \   00000012   0x6042             STR      R2,[R0, #+4]
   \                     ??Callback_0: (+1)
   \   00000014   0x4901             LDR      R1,??Callback_1
   \   00000016   0x60C1             STR      R1,[R0, #+12]
   \   00000018   0xBC70             POP      {R4-R6}
   \   0000001A   0x4770             BX       LR               ;; return
   \                     ??Callback_1:
   \   0000001C   0x........         DC32     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops

   \                                 In section .rodata, align 4
   \   __absolute mbed::Callback<void ()>::ops const mbed::Callback<void ()>::generate<>(mbed::Callback<void ()>::function_context<void (*)(void *), void> const &)::ops
   \                     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops:
   \   00000000   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv
   \   00000004   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv
   \   00000008   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0x6848             LDR      R0,[R1, #+4]
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x4788             BLX      R1
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??function_move_0
   \   00000004   0xC90C             LDM      R1!,{R2,R3}
   \   00000006   0xC00C             STM      R0!,{R2,R3}
   \                     ??function_move_0: (+1)
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
   \                     _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::callback<>(void (*)(void *), void *)
   \                     _ZN4mbed8callbackIvvvEENS_8CallbackIFT1_vEEEPFS2_PT_EPT0_: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEEC1IvvEEPFvPT_EPT0_
   \   00000006   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4
   \   __interwork __softfp GreenteaSerial *SingletonPtr<GreenteaSerial>::operator->()
   \                     _ZN12SingletonPtrI14GreenteaSerialEptEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD110             BNE      `??operator->_0`
   \   0000000A   0x4D0E             LDR      R5,`??operator->_1`
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000010   0x6828             LDR      R0,[R5, #+0]
   \   00000012   0x.... 0x....      BL       osMutexAcquire
   \   00000016   0x6820             LDR      R0,[R4, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD104             BNE      `??operator->_2`
   \   0000001C   0x1D20             ADDS     R0,R4,#+4
   \   0000001E   0xD001             BEQ      `??operator->_3`
   \   00000020   0x.... 0x....      BL       _ZN14GreenteaSerialC1Ev
   \                     `??operator->_3`: (+1)
   \   00000024   0x6020             STR      R0,[R4, #+0]
   \                     `??operator->_2`: (+1)
   \   00000026   0x6828             LDR      R0,[R5, #+0]
   \   00000028   0x.... 0x....      BL       osMutexRelease
   \                     `??operator->_0`: (+1)
   \   0000002C   0x6820             LDR      R0,[R4, #+0]
   \   0000002E   0x1D21             ADDS     R1,R4,#+4
   \   00000030   0x4288             CMP      R0,R1
   \   00000032   0xD004             BEQ      `??operator->_4`
   \   00000034   0x225D             MOVS     R2,#+93
   \   00000036   0x4904             LDR      R1,`??operator->_1`+0x4
   \   00000038   0x4804             LDR      R0,`??operator->_1`+0x8
   \   0000003A   0x.... 0x....      BL       mbed_assert_internal
   \                     `??operator->_4`: (+1)
   \   0000003E   0x6820             LDR      R0,[R4, #+0]
   \   00000040   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \   00000042   0xBF00             Nop      
   \                     `??operator->_1`:
   \   00000044   0x........         DC32     singleton_mutex_id
   \   00000048   0x........         DC32     _ZZN12SingletonPtrI14GreenteaSerialE3getEvEs_0
   \   0000004C   0x........         DC32     _ZZN12SingletonPtrI14GreenteaSerialE3getEvEs
     22          #include "greentea-client/test_env.h"
     23          #include "greentea-client/greentea_serial.h"
     24          #include "greentea-client/greentea_metrics.h"
     25          
     26          
     27          /**
     28           *   Generic test suite transport protocol keys
     29           */

   \                                 In section .data, align 4
     30          const char* GREENTEA_TEST_ENV_END = "end";
   \                     GREENTEA_TEST_ENV_END:
   \   00000000   0x........         DC32 ?_0
     31          const char* GREENTEA_TEST_ENV_EXIT = "__exit";
   \                     GREENTEA_TEST_ENV_EXIT:
   \   00000004   0x........         DC32 ?_1
     32          const char* GREENTEA_TEST_ENV_SYNC = "__sync";
     33          const char* GREENTEA_TEST_ENV_TIMEOUT = "__timeout";
     34          const char* GREENTEA_TEST_ENV_HOST_TEST_NAME = "__host_test_name";
     35          const char* GREENTEA_TEST_ENV_HOST_TEST_VERSION = "__version";
     36          
     37          /**
     38           *   Test suite success code strings
     39           */
     40          const char* GREENTEA_TEST_ENV_SUCCESS = "success";
   \                     GREENTEA_TEST_ENV_SUCCESS:
   \   00000008   0x........         DC32 ?_2
     41          const char* GREENTEA_TEST_ENV_FAILURE = "failure";
   \                     GREENTEA_TEST_ENV_FAILURE:
   \   0000000C   0x........         DC32 ?_3

   \                                 In section .data, align 4
   \                     GREENTEA_TEST_ENV_SYNC:
   \   00000000   0x........         DC32 ?_4
   \                     GREENTEA_TEST_ENV_TIMEOUT:
   \   00000004   0x........         DC32 ?_5
   \                     GREENTEA_TEST_ENV_HOST_TEST_NAME:
   \   00000008   0x........         DC32 ?_6
   \                     GREENTEA_TEST_ENV_HOST_TEST_VERSION:
   \   0000000C   0x........         DC32 ?_7
     42          
     43          /**
     44           *   Test case transport protocol start/finish keys
     45           */

   \                                 In section .data, align 4
     46          const char* GREENTEA_TEST_ENV_TESTCASE_NAME = "__testcase_name";
   \                     GREENTEA_TEST_ENV_TESTCASE_NAME:
   \   00000000   0x........         DC32 ?_8

   \                                 In section .data, align 4
     47          const char* GREENTEA_TEST_ENV_TESTCASE_COUNT = "__testcase_count";
   \                     GREENTEA_TEST_ENV_TESTCASE_COUNT:
   \   00000000   0x........         DC32 ?_9

   \                                 In section .data, align 4
     48          const char* GREENTEA_TEST_ENV_TESTCASE_START = "__testcase_start";
   \                     GREENTEA_TEST_ENV_TESTCASE_START:
   \   00000000   0x........         DC32 ?_10

   \                                 In section .data, align 4
     49          const char* GREENTEA_TEST_ENV_TESTCASE_FINISH = "__testcase_finish";
   \                     GREENTEA_TEST_ENV_TESTCASE_FINISH:
   \   00000000   0x........         DC32 ?_11

   \                                 In section .data, align 4
     50          const char* GREENTEA_TEST_ENV_TESTCASE_SUMMARY = "__testcase_summary";
   \                     GREENTEA_TEST_ENV_TESTCASE_SUMMARY:
   \   00000000   0x........         DC32 ?_12
     51          // Code Coverage (LCOV)  transport protocol keys

   \                                 In section .data, align 4
     52          const char* GREENTEA_TEST_ENV_LCOV_START = "__coverage_start";
   \                     GREENTEA_TEST_ENV_LCOV_START:
   \   00000000   0x........         DC32 ?_13
     53          
     54          /**
     55           *   Auxilary functions
     56           */
     57          static void greentea_notify_timeout(const int);
     58          static void greentea_notify_hosttest(const char *);
     59          static void greentea_notify_completion(const int);
     60          static void greentea_notify_version();
     61          static void greentea_write_string(const char *str);
     62          
     63          /** \brief Handle the handshake with the host
     64           *  \details This is contains the shared handhshake functionality that is used between
     65           *           GREENTEA_SETUP and GREENTEA_SETUP_UUID.
     66           *           This function is blocking.
     67           */

   \                                 In section .text, align 4, keep-with-next
     68          void _GREENTEA_SETUP_COMMON(const int timeout, const char *host_test_name, char *buffer, size_t size) {
   \                     _Z22_GREENTEA_SETUP_COMMONiPKcPcj: (+1)
   \   00000000   0xB5FB             PUSH     {R0,R1,R3-R7,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0017             MOVS     R7,R2
     69              greentea_metrics_setup();
   \   00000006   0x.... 0x....      BL       _Z22greentea_metrics_setupv
     70              // Key-value protocol handshake function. Waits for {{__sync;...}} message
     71              // Sync preamble: "{{__sync;0dad4a9d-59a3-4aec-810d-d5fb09d852c1}}"
     72              // Example value of sync_uuid == "0dad4a9d-59a3-4aec-810d-d5fb09d852c1"
     73          
     74              char _key[8] = {0};
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0xC006             STM      R0!,{R1,R2}
   \   00000012   0x....             LDR      R4,??DataTable29
   \   00000014   0x....             LDR      R6,??DataTable30
     75          
     76              while (1) {
     77                  greentea_parse_kv(_key, buffer, sizeof(_key), size);
   \                     ??_GREENTEA_SETUP_COMMON_0: (+1)
   \   00000016   0x9B04             LDR      R3,[SP, #+16]
   \   00000018   0x2208             MOVS     R2,#+8
   \   0000001A   0x0039             MOVS     R1,R7
   \   0000001C   0x4668             MOV      R0,SP
   \   0000001E   0x.... 0x....      BL       greentea_parse_kv
     78                  greentea_write_string("mbedmbedmbedmbedmbedmbedmbedmbed\r\n");
   \   00000022   0xBF00             Nop      
   \   00000024   0x....             ADR.N    R5,?_15
   \   00000026   0xE006             B        ??_GREENTEA_SETUP_COMMON_1
   \                     ??_GREENTEA_SETUP_COMMON_2: (+1)
   \   00000028   0x0030             MOVS     R0,R6
   \   0000002A   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   0000002E   0x7829             LDRB     R1,[R5, #+0]
   \   00000030   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
   \   00000034   0x1C6D             ADDS     R5,R5,#+1
   \                     ??_GREENTEA_SETUP_COMMON_1: (+1)
   \   00000036   0x7828             LDRB     R0,[R5, #+0]
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD1F5             BNE      ??_GREENTEA_SETUP_COMMON_2
     79                  if (strcmp(_key, GREENTEA_TEST_ENV_SYNC) == 0) {
   \   0000003C   0x6821             LDR      R1,[R4, #+0]
   \   0000003E   0x4668             MOV      R0,SP
   \   00000040   0x.... 0x....      BL       strcmp
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD1E6             BNE      ??_GREENTEA_SETUP_COMMON_0
     80                      // Found correct __sync message
     81                      greentea_send_kv(_key, buffer);
   \   00000048   0x0039             MOVS     R1,R7
   \   0000004A   0x4668             MOV      R0,SP
   \   0000004C   0x.... 0x....      BL       greentea_send_kv
     82                      break;
     83                  }
     84              }
     85          
     86              greentea_notify_version();
   \   00000050   0x....             ADR.N    R1,?_17
   \   00000052   0x68E0             LDR      R0,[R4, #+12]
   \   00000054   0x.... 0x....      BL       greentea_send_kv
     87              greentea_notify_timeout(timeout);
   \   00000058   0x9902             LDR      R1,[SP, #+8]
   \   0000005A   0x6860             LDR      R0,[R4, #+4]
   \   0000005C   0x.... 0x....      BL       _Z16greentea_send_kvPKci
     88              greentea_notify_hosttest(host_test_name);
   \   00000060   0x9903             LDR      R1,[SP, #+12]
   \   00000062   0x68A0             LDR      R0,[R4, #+8]
   \   00000064   0x.... 0x....      BL       greentea_send_kv
     89          }
   \   00000068   0xB005             ADD      SP,SP,#+20
   \   0000006A   0xBDF0             POP      {R4-R7,PC}       ;; return
     90          
     91          /** \brief Handshake with host and send setup data (timeout and host test name)
     92           *  \details This function will send preamble to master.
     93           *           After host test name is received master will invoke host test script
     94           *           and add host test's callback handlers to main event loop
     95           *           This function is blocking.
     96           */

   \                                 In section .text, align 2, keep-with-next
     97          extern "C" void GREENTEA_SETUP(const int timeout, const char *host_test_name) {
   \                     GREENTEA_SETUP: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     98              char _value[GREENTEA_UUID_LENGTH] = {0};
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x2130             MOVS     R1,#+48
   \   0000000C   0x.... 0x....      BL       __aeabi_memclr4
     99              _GREENTEA_SETUP_COMMON(timeout, host_test_name, _value, GREENTEA_UUID_LENGTH);
   \   00000010   0x2330             MOVS     R3,#+48
   \   00000012   0x466A             MOV      R2,SP
   \   00000014   0x0029             MOVS     R1,R5
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x.... 0x....      BL       _Z22_GREENTEA_SETUP_COMMONiPKcPcj
    100          }
   \   0000001C   0xB00D             ADD      SP,SP,#+52
   \   0000001E   0xBD30             POP      {R4,R5,PC}       ;; return
    101          
    102          /** \brief Handshake with host and send setup data (timeout and host test name). Allows you to preserve sync UUID.
    103           *  \details This function will send preamble to master.
    104           *           After host test name is received master will invoke host test script
    105           *           and add host test's callback handlers to main event loop
    106           *           This function is blocking.
    107           *           This function differs from GREENTEA_SETUP because it allows you to
    108           *           preserve the UUID sent during the sync process.
    109           */

   \                                 In section .text, align 2, keep-with-next
    110          void GREENTEA_SETUP_UUID(const int timeout, const char *host_test_name, char *buffer, size_t size) {
   \                     _Z19GREENTEA_SETUP_UUIDiPKcPcj: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    111              _GREENTEA_SETUP_COMMON(timeout, host_test_name, buffer, size);
   \   00000002   0x.... 0x....      BL       _Z22_GREENTEA_SETUP_COMMONiPKcPcj
    112          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    113          
    114          /** \brief Notify host (__exit message) side that test suite execution was complete
    115           *  \result Test suite result
    116           *  \details If __exit is not received by host side we will assume TIMEOUT
    117           */

   \                                 In section .text, align 2, keep-with-next
    118          void GREENTEA_TESTSUITE_RESULT(const int result) {
   \                     _Z25GREENTEA_TESTSUITE_RESULTi: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    119              greentea_notify_completion(result);
   \   00000002   0x....             LDR      R5,??DataTable31
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD001             BEQ      ??GREENTEA_TESTSUITE_RESULT_0
   \   00000008   0x68AC             LDR      R4,[R5, #+8]
   \   0000000A   0xE000             B        ??GREENTEA_TESTSUITE_RESULT_1
   \                     ??GREENTEA_TESTSUITE_RESULT_0: (+1)
   \   0000000C   0x68EC             LDR      R4,[R5, #+12]
   \                     ??GREENTEA_TESTSUITE_RESULT_1: (+1)
   \   0000000E   0x.... 0x....      BL       _Z23greentea_metrics_reportv
   \   00000012   0x0021             MOVS     R1,R4
   \   00000014   0x6828             LDR      R0,[R5, #+0]
   \   00000016   0x.... 0x....      BL       greentea_send_kv
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x6868             LDR      R0,[R5, #+4]
   \   0000001E   0x.... 0x....      BL       _Z16greentea_send_kvPKci
    120          }
   \   00000022   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    121          
    122          /**
    123           *  Test Case support
    124           */
    125          
    126          /** \brief Notify host side that test case started
    127           *  \details test_case_name Test case name
    128           */

   \                                 In section .text, align 2, keep-with-next
    129          void GREENTEA_TESTCASE_START(const char *test_case_name) {
   \                     _Z23GREENTEA_TESTCASE_STARTPKc: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    130              greentea_send_kv(GREENTEA_TEST_ENV_TESTCASE_START, test_case_name);
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0x....             LDR      R0,??DataTable31_1
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x.... 0x....      BL       greentea_send_kv
    131          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    132          
    133          /** \brief Notify host side that test case finished
    134           *  \details test_case_name Test case name
    135           *  \details result Test case result (0 -OK, non zero...)
    136           */

   \                                 In section .text, align 2, keep-with-next
    137          void GREENTEA_TESTCASE_FINISH(const char *test_case_name, const size_t passes, const size_t failed) {
   \                     _Z24GREENTEA_TESTCASE_FINISHPKcjj: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    138              greentea_send_kv(GREENTEA_TEST_ENV_TESTCASE_FINISH, test_case_name, passes, failed);
   \   00000002   0x0013             MOVS     R3,R2
   \   00000004   0x000A             MOVS     R2,R1
   \   00000006   0x0001             MOVS     R1,R0
   \   00000008   0x....             LDR      R0,??DataTable31_2
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x.... 0x....      BL       _Z16greentea_send_kvPKcS0_ii
    139          }
   \   00000010   0xBD01             POP      {R0,PC}          ;; return
    140          
    141          /**
    142           *****************************************************************************
    143           *  Auxilary functions and key-value protocol support
    144           *****************************************************************************
    145           */
    146          
    147          
    148          /**
    149           *****************************************************************************
    150           *  LCOV support
    151           *****************************************************************************
    152           */
    153          #ifdef MBED_CFG_DEBUG_OPTIONS_COVERAGE
    154          extern "C" void __gcov_flush(void);
    155          extern bool coverage_report;
    156          
    157          /**
    158           * \brief Send code coverage (gcov/LCOV) notification to master
    159           *
    160           *        Generates preamble of message sent to notify host about code coverage data dump.
    161           *
    162           *        This function is used by mbedOS software
    163           *        (see: mbed-drivers/source/retarget.cpp file) to generate code coverage
    164           *        messages to host. When code coverage feature is turned on slave will
    165           *        print-out code coverage data in form of key-value protocol.
    166           *        Message with code coverage data will contain message name, path to code
    167           *        coverage output file host will touch and fill with code coverage binary
    168           *        payload. Coverage payload is encoded as stream of ASCII coded bytes ("%02X").
    169           *
    170           * \param path to file with code coverage payload (set by gcov instrumentation)
    171           *
    172           */
    173          void greentea_notify_coverage_start(const char *path) {
    174              printf("{{%s;%s;", GREENTEA_TEST_ENV_LCOV_START, path);
    175          }
    176          
    177          /**
    178           *  \brief Sufix for code coverage message to master (closing statement)
    179           *
    180           *         This function is used by mbedOS software
    181           *         (see: mbed-drivers/source/retarget.cpp file) to generate code coverage
    182           *         messages to host. When code coverage feature is turned on slave will
    183           *         print-out code coverage data in form of key-value protocol.
    184           *         Message with code coverage data will contain message name, path to code
    185           *         coverage output file host will touch and fill with code coverage binary
    186           *         payload. Coverage payload is encoded as stream of ASCII coded bytes ("%02X").
    187           *
    188           *         Companion function greentea_notify_coverage_start() defines code coverage message structure
    189           *
    190           */
    191          void greentea_notify_coverage_end() {
    192              printf("}}" NL);
    193          }
    194          
    195          #endif
    196          
    197          /**
    198           *****************************************************************************
    199           *  Key-value protocol support
    200           *****************************************************************************
    201           */
    202          
    203          /**
    204           * \brief Write the preamble characters to the serial port
    205           *
    206           *        This function writes the preamble "{{" which is required
    207           *        for key-value comunication between the target and the host.
    208           *        This uses a Rawserial object, greentea_serial, which provides
    209           *        a direct interface to the USBTX and USBRX serial pins and allows
    210           *        the direct writing of characters using the putc() method.
    211           *        This suite of functions are provided to allow for serial communication
    212           *        to the host from within a thread/ISR.
    213           *
    214           */
    215          inline void greentea_write_preamble()
    216          {
    217              greentea_serial->putc('{');
    218              greentea_serial->putc('{');
    219          }
    220          
    221          /**
    222           * \brief Write the postamble characters to the serial port
    223           *
    224           *        This function writes the postamble "{{\n" which is required
    225           *        for key-value comunication between the target and the host.
    226           *        This uses a Rawserial object, greentea_serial, which provides
    227           *        a direct interface to the USBTX and USBRX serial pins and allows
    228           *        the direct writing of characters using the putc() method.
    229           *        This suite of functions are provided to allow for serial communication
    230           *        to the host from within a thread/ISR.
    231           *
    232           */

   \                                 In section .text, align 4
    233          inline void greentea_write_postamble()
    234          {
   \                     _Z24greentea_write_postamblev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    235              greentea_serial->putc('}');
   \   00000002   0x4C0D             LDR      R4,??greentea_write_postamble_0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   0000000A   0x217D             MOVS     R1,#+125
   \   0000000C   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
    236              greentea_serial->putc('}');
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000016   0x217D             MOVS     R1,#+125
   \   00000018   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
    237              greentea_serial->putc('\r');
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000022   0x210D             MOVS     R1,#+13
   \   00000024   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
    238              greentea_serial->putc('\n');
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   0000002E   0x210A             MOVS     R1,#+10
   \   00000030   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
    239          }
   \   00000034   0xBD10             POP      {R4,PC}          ;; return
   \   00000036   0xBF00             Nop      
   \                     ??greentea_write_postamble_0:
   \   00000038   0x........         DC32     greentea_serial
    240          
    241          /**
    242           * \brief Write a string to the serial port
    243           *
    244           *        This function writes a '\0' terminated string from the target
    245           *        to the host. It writes directly to the serial port using the
    246           *        greentea_serial, Rawserial object.
    247           *
    248           * \param str - string value
    249           *
    250           */

   \                                 In section .text, align 2, keep-with-next
    251          inline void greentea_write_string(const char *str)
    252          {
   \                     _Z21greentea_write_stringPKc: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x....             LDR      R4,??DataTable30
   \   00000006   0xE006             B        ??greentea_write_string_0
    253              while (*str != '\0') {
    254                  greentea_serial->putc(*str);
   \                     ??greentea_write_string_1: (+1)
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   0000000E   0x7829             LDRB     R1,[R5, #+0]
   \   00000010   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
    255                  str ++;
   \   00000014   0x1C6D             ADDS     R5,R5,#+1
    256              }
   \                     ??greentea_write_string_0: (+1)
   \   00000016   0x7828             LDRB     R0,[R5, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD1F5             BNE      ??greentea_write_string_1
    257          }
   \   0000001C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    258          
    259          
    260          /**
    261           * \brief Write an int to the serial port
    262           *
    263           *        This function writes an integer value from the target
    264           *        to the host. The integer value is converted to a string and
    265           *        and then written character by character directly to the serial
    266           *        port using the greentea_serial, Rawserial object.
    267           *        sprintf() is used to convert the int to a string. Sprintf if
    268           *        inherently thread safe so can be used.
    269           *
    270           * \param val - integer value
    271           *
    272           */
    273          #define MAX_INT_STRING_LEN 15

   \                                 In section .text, align 4
    274          inline void greentea_write_int(const int val)
    275          {
   \                     _Z18greentea_write_inti: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0002             MOVS     R2,R0
    276              char intval[MAX_INT_STRING_LEN];
    277              unsigned int i = 0;
    278              sprintf(intval, "%d", val);
   \   00000006   0x4909             LDR      R1,??greentea_write_int_0
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x.... 0x....      BL       sprintf
   \   0000000E   0x466D             MOV      R5,SP
   \   00000010   0x4C07             LDR      R4,??greentea_write_int_0+0x4
   \   00000012   0xE006             B        ??greentea_write_int_1
    279              while (intval[i] != '\0') {
    280                  greentea_serial->putc(intval[i]);
   \                     ??greentea_write_int_2: (+1)
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   0000001A   0x7829             LDRB     R1,[R5, #+0]
   \   0000001C   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
    281                  i++;
   \   00000020   0x1C6D             ADDS     R5,R5,#+1
    282              }
   \                     ??greentea_write_int_1: (+1)
   \   00000022   0x7828             LDRB     R0,[R5, #+0]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD1F5             BNE      ??greentea_write_int_2
    283          }
   \   00000028   0xB005             ADD      SP,SP,#+20
   \   0000002A   0xBD30             POP      {R4,R5,PC}       ;; return
   \                     ??greentea_write_int_0:
   \   0000002C   0x........         DC32     _ZZ18greentea_write_intiEs
   \   00000030   0x........         DC32     greentea_serial
    284          
    285          /**
    286           * \brief Encapsulate and send key-value message from DUT to host
    287           *
    288           *        This function uses underlying functions to write directly
    289           *        to the serial port, (USBTX). This allows KVs to be used
    290           *        from within interrupt context.
    291           *
    292           * \param key Message key (message/event name)
    293           * \param value Message payload, string value
    294           *
    295           */

   \                                 In section .text, align 2, keep-with-next
    296          extern "C" void greentea_send_kv(const char *key, const char *val) {
   \                     greentea_send_kv: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0006             MOVS     R6,R0
   \   00000004   0x000C             MOVS     R4,R1
    297              if (key && val) {
   \   00000006   0x2E00             CMP      R6,#+0
   \   00000008   0xD01C             BEQ      ??greentea_send_kv_0
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD01A             BEQ      ??greentea_send_kv_0
    298                  greentea_write_preamble();
   \   0000000E   0x....             LDR      R5,??DataTable30
   \   00000010   0x0028             MOVS     R0,R5
   \   00000012   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000016   0x217B             MOVS     R1,#+123
   \   00000018   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
   \   0000001C   0x0028             MOVS     R0,R5
   \   0000001E   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000022   0x217B             MOVS     R1,#+123
   \   00000024   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
    299                  greentea_write_string(key);
   \   00000028   0x0030             MOVS     R0,R6
   \   0000002A   0x.... 0x....      BL       _Z21greentea_write_stringPKc
    300                  greentea_serial->putc(';');
   \   0000002E   0x0028             MOVS     R0,R5
   \   00000030   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000034   0x213B             MOVS     R1,#+59
   \   00000036   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
    301                  greentea_write_string(val);
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x.... 0x....      BL       _Z21greentea_write_stringPKc
    302                  greentea_write_postamble();
   \   00000040   0x.... 0x....      BL       _Z24greentea_write_postamblev
    303              }
    304          }
   \                     ??greentea_send_kv_0: (+1)
   \   00000044   0xBD70             POP      {R4-R6,PC}       ;; return
    305          
    306          /**
    307           * \brief Encapsulate and send key-value message from DUT to host
    308           *
    309           *        This function uses underlying functions to write directly
    310           *        to the serial port, (USBTX). This allows KVs to be used
    311           *        from within interrupt context.
    312           *        Last value is an integer to avoid integer to string conversion
    313           *        made by the user.
    314           *
    315           * \param key Message key (message/event name)
    316           * \param value Message payload, integer value
    317           *
    318           */

   \                                 In section .text, align 2, keep-with-next
    319          void greentea_send_kv(const char *key, const int val) {
   \                     _Z16greentea_send_kvPKci: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000E             MOVS     R6,R1
    320              if (key) {
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD01A             BEQ      ??greentea_send_kv_1
    321                  greentea_write_preamble();
   \   0000000A   0x....             LDR      R5,??DataTable30
   \   0000000C   0x0028             MOVS     R0,R5
   \   0000000E   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000012   0x217B             MOVS     R1,#+123
   \   00000014   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
   \   00000018   0x0028             MOVS     R0,R5
   \   0000001A   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   0000001E   0x217B             MOVS     R1,#+123
   \   00000020   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
    322                  greentea_write_string(key);
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       _Z21greentea_write_stringPKc
    323                  greentea_serial->putc(';');
   \   0000002A   0x0028             MOVS     R0,R5
   \   0000002C   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000030   0x213B             MOVS     R1,#+59
   \   00000032   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
    324                  greentea_write_int(val);
   \   00000036   0x0030             MOVS     R0,R6
   \   00000038   0x.... 0x....      BL       _Z18greentea_write_inti
    325                  greentea_write_postamble();
   \   0000003C   0x.... 0x....      BL       _Z24greentea_write_postamblev
    326              }
    327          }
   \                     ??greentea_send_kv_1: (+1)
   \   00000040   0xBD70             POP      {R4-R6,PC}       ;; return
    328          
    329          /**
    330           * \brief Encapsulate and send key-value-value message from DUT to host
    331           *
    332           *        This function uses underlying functions to write directly
    333           *        to the serial port, (USBTX). This allows KVs to be used
    334           *        from within interrupt context.
    335           *        Last value is an integer to avoid integer to string conversion
    336           *        made by the user.
    337           *
    338           * \param key Message key (message/event name)
    339           * \param value Message payload, string value
    340           * \param result Send additional integer formatted data
    341           *
    342           */

   \                                 In section .text, align 2, keep-with-next
    343          void greentea_send_kv(const char *key, const char *val, const int result) {
   \                     _Z16greentea_send_kvPKcS0_i: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x0017             MOVS     R7,R2
    344              if (key) {
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD023             BEQ      ??greentea_send_kv_2
    345                  greentea_write_preamble();
   \   0000000C   0x....             LDR      R5,??DataTable31_3
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000014   0x217B             MOVS     R1,#+123
   \   00000016   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
   \   0000001A   0x0028             MOVS     R0,R5
   \   0000001C   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000020   0x217B             MOVS     R1,#+123
   \   00000022   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
    346                  greentea_write_string(key);
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x.... 0x....      BL       _Z21greentea_write_stringPKc
    347                  greentea_serial->putc(';');
   \   0000002C   0x0028             MOVS     R0,R5
   \   0000002E   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000032   0x213B             MOVS     R1,#+59
   \   00000034   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
    348                  greentea_write_string(val);
   \   00000038   0x0030             MOVS     R0,R6
   \   0000003A   0x.... 0x....      BL       _Z21greentea_write_stringPKc
    349                  greentea_serial->putc(';');
   \   0000003E   0x0028             MOVS     R0,R5
   \   00000040   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000044   0x213B             MOVS     R1,#+59
   \   00000046   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
    350                  greentea_write_int(result);
   \   0000004A   0x0038             MOVS     R0,R7
   \   0000004C   0x.... 0x....      BL       _Z18greentea_write_inti
    351                  greentea_write_postamble();
   \   00000050   0x.... 0x....      BL       _Z24greentea_write_postamblev
    352          
    353              }
    354          }
   \                     ??greentea_send_kv_2: (+1)
   \   00000054   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    355          
    356          /**
    357           * \brief Encapsulate and send key-value-value-value message from DUT to host
    358           *
    359           *        This function uses underlying functions to write directly
    360           *        to the serial port, (USBTX). This allows KVs to be used
    361           *        from within interrupt context.
    362           *        Last 2 values are integers to avoid integer to string conversion
    363           *        made by the user.
    364           *
    365           *        Names of the parameters: this function is used to send test case
    366           *        name with number of passes and failures to host. But it can be used
    367           *        to send any key-value-value-value (string-string-integer-integer)
    368           *        set to host.
    369           *
    370           * \param key Message key (message/event name)
    371           * \param value Message payload, string value
    372           * \param passes Send additional integer formatted data
    373           * \param failures Send additional integer formatted data
    374           *
    375           */

   \                                 In section .text, align 2, keep-with-next
    376          void greentea_send_kv(const char *key, const char *val, const int passes, const int failures) {
   \                     _Z16greentea_send_kvPKcS0_ii: (+1)
   \   00000000   0xB5F4             PUSH     {R2,R4-R7,LR}
   \   00000002   0x0006             MOVS     R6,R0
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x001F             MOVS     R7,R3
    377              if (key) {
   \   00000008   0x2E00             CMP      R6,#+0
   \   0000000A   0xD034             BEQ      ??greentea_send_kv_3
    378                  greentea_write_preamble();
   \   0000000C   0x....             LDR      R5,??DataTable31_3
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000014   0x217B             MOVS     R1,#+123
   \   00000016   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
   \   0000001A   0x0028             MOVS     R0,R5
   \   0000001C   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000020   0x217B             MOVS     R1,#+123
   \   00000022   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
    379                  greentea_write_string(key);
   \   00000026   0x0030             MOVS     R0,R6
   \   00000028   0x.... 0x....      BL       _Z21greentea_write_stringPKc
    380                  greentea_serial->putc(';');
   \   0000002C   0x0028             MOVS     R0,R5
   \   0000002E   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000032   0x213B             MOVS     R1,#+59
   \   00000034   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
    381                  greentea_write_string(val);
   \   00000038   0xE006             B        ??greentea_send_kv_4
   \                     ??greentea_send_kv_5: (+1)
   \   0000003A   0x0028             MOVS     R0,R5
   \   0000003C   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000040   0x7821             LDRB     R1,[R4, #+0]
   \   00000042   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
   \   00000046   0x1C64             ADDS     R4,R4,#+1
   \                     ??greentea_send_kv_4: (+1)
   \   00000048   0x7820             LDRB     R0,[R4, #+0]
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD1F5             BNE      ??greentea_send_kv_5
    382                  greentea_serial->putc(';');
   \   0000004E   0x0028             MOVS     R0,R5
   \   00000050   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000054   0x213B             MOVS     R1,#+59
   \   00000056   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
    383                  greentea_write_int(passes);
   \   0000005A   0x9800             LDR      R0,[SP, #+0]
   \   0000005C   0x.... 0x....      BL       _Z18greentea_write_inti
    384                  greentea_serial->putc(';');
   \   00000060   0x0028             MOVS     R0,R5
   \   00000062   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000066   0x213B             MOVS     R1,#+59
   \   00000068   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
    385                  greentea_write_int(failures);
   \   0000006C   0x0038             MOVS     R0,R7
   \   0000006E   0x.... 0x....      BL       _Z18greentea_write_inti
    386                  greentea_write_postamble();
   \   00000072   0x.... 0x....      BL       _Z24greentea_write_postamblev
    387              }
    388          }
   \                     ??greentea_send_kv_3: (+1)
   \   00000076   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    389          
    390          /**
    391           * \brief Encapsulate and send key-value-value message from DUT to host
    392           *
    393           *        This function uses underlying functions to write directly
    394           *        to the serial port, (USBTX). This allows key-value-value to be used
    395           *        from within interrupt context.
    396           *        Both values are integers to avoid integer to string conversion
    397           *        made by the user.
    398           *
    399           *        Names of the parameters: this function is used to send number
    400           *        of passes and failures to host. But it can be used to send any
    401           *        key-value-value (string-integer-integer) message to host.
    402           *
    403           * \param key Message key (message/event name)
    404           * \param value Message payload, integer value
    405           * \param passes Send additional integer formatted data
    406           * \param failures Send additional integer formatted data
    407           *
    408           */

   \                                 In section .text, align 2, keep-with-next
    409          void greentea_send_kv(const char *key, const int passes, const int failures) {
   \                     _Z16greentea_send_kvPKcii: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x0017             MOVS     R7,R2
    410              if (key) {
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD02B             BEQ      ??greentea_send_kv_6
    411                  greentea_write_preamble();
   \   0000000C   0x....             LDR      R5,??DataTable31_3
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000014   0x217B             MOVS     R1,#+123
   \   00000016   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
   \   0000001A   0x0028             MOVS     R0,R5
   \   0000001C   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000020   0x217B             MOVS     R1,#+123
   \   00000022   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
    412                  greentea_write_string(key);
   \   00000026   0xE006             B        ??greentea_send_kv_7
   \                     ??greentea_send_kv_8: (+1)
   \   00000028   0x0028             MOVS     R0,R5
   \   0000002A   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   0000002E   0x7821             LDRB     R1,[R4, #+0]
   \   00000030   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
   \   00000034   0x1C64             ADDS     R4,R4,#+1
   \                     ??greentea_send_kv_7: (+1)
   \   00000036   0x7820             LDRB     R0,[R4, #+0]
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD1F5             BNE      ??greentea_send_kv_8
    413                  greentea_serial->putc(';');
   \   0000003C   0x0028             MOVS     R0,R5
   \   0000003E   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000042   0x213B             MOVS     R1,#+59
   \   00000044   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
    414                  greentea_write_int(passes);
   \   00000048   0x0030             MOVS     R0,R6
   \   0000004A   0x.... 0x....      BL       _Z18greentea_write_inti
    415                  greentea_serial->putc(';');
   \   0000004E   0x0028             MOVS     R0,R5
   \   00000050   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000054   0x213B             MOVS     R1,#+59
   \   00000056   0x.... 0x....      BL       _ZN4mbed9RawSerial4putcEi
    416                  greentea_write_int(failures);
   \   0000005A   0x0038             MOVS     R0,R7
   \   0000005C   0x.... 0x....      BL       _Z18greentea_write_inti
    417                  greentea_write_postamble();
   \   00000060   0x.... 0x....      BL       _Z24greentea_write_postamblev
    418              }
    419          }
   \                     ??greentea_send_kv_6: (+1)
   \   00000064   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    420          
    421          /**
    422           * \brief Send message with timeout to master in seconds
    423           *
    424           *        GREENTEA_TEST_ENV_TIMEOUT message is part of preamble
    425           *        sent from DUT to host during synchronisation (beginning of test
    426           *        suite execution).
    427           *
    428           *        Notification about total test suite timeout. Timeout is measured
    429           *        from the moment of GREENTEA_TEST_ENV_TIMEOUT reception by host.
    430           *        If timeout is reached host (and host test) will be stopped and
    431           *        control will return to Greentea.
    432           *
    433           * \param timeout Test suite timeout in seconds
    434           *
    435           */
    436          static void greentea_notify_timeout(const int timeout) {
    437              greentea_send_kv(GREENTEA_TEST_ENV_TIMEOUT, timeout);
    438          }
    439          
    440          /**
    441           * \brief Send host test name to master
    442           *
    443           *        GREENTEA_TEST_ENV_HOST_TEST_NAME message is part of preamble
    444           *        sent from DUT to host during synchronisation (beginning of test
    445           *        suite execution).
    446           *
    447           *        Host test Python script implements host side callbacks
    448           *        for key-value events sent from DUT to host. Host test's
    449           *        callbacks are registered after GREENTEA_TEST_ENV_HOST_TEST_NAME
    450           *        message reaches host.
    451           *
    452           * \param host_test_name Host test name, host test will be loaded by mbedhtrun
    453           */
    454          static void greentea_notify_hosttest(const char *host_test_name) {
    455              greentea_send_kv(GREENTEA_TEST_ENV_HOST_TEST_NAME, host_test_name);
    456          }
    457          
    458          /**
    459           * \brief Send to master information that test suite finished its execution
    460           *
    461           *        GREENTEA_TEST_ENV_END and GREENTEA_TEST_ENV_EXIT messages
    462           *        are sent just before test suite execution finishes (noting
    463           *        else to do). You can place it just before you return from your
    464           *        main() function.
    465           *
    466           *        Code coverage: If MEBD_CFG_DEBUG_OPTIONS_COVERAGE is set in the
    467           *        project via build configuration function will output series
    468           *        of code coverage messages GREENTEA_TEST_ENV_LCOV_START with code
    469           *        coverage binary data. This data is captured by Greentea and can
    470           *        be used to generate LCOV reports.
    471           *
    472           * \param result Test suite result from DUT (0 - FAIl, !0 - SUCCESS)
    473           *
    474           */
    475          static void greentea_notify_completion(const int result) {
    476              const char *val = result ? GREENTEA_TEST_ENV_SUCCESS : GREENTEA_TEST_ENV_FAILURE;
    477          #ifdef MBED_CFG_DEBUG_OPTIONS_COVERAGE
    478              coverage_report = true;
    479              __gcov_flush();
    480              coverage_report = false;
    481          #endif
    482              greentea_metrics_report();
    483              greentea_send_kv(GREENTEA_TEST_ENV_END, val);
    484              greentea_send_kv(GREENTEA_TEST_ENV_EXIT, 0);
    485          }
    486          
    487          /**
    488           * \brief Send to master greentea-client version
    489           */
    490          static void greentea_notify_version() {
    491              greentea_send_kv(GREENTEA_TEST_ENV_HOST_TEST_VERSION, MBED_GREENTEA_CLIENT_VERSION_STRING);
    492          }
    493          
    494          /**
    495           *****************************************************************************
    496           *  Parse engine for KV values which replaces scanf
    497           *****************************************************************************
    498           *
    499           *  Example usage:
    500           *
    501           *  char key[10];
    502           *  char value[48];
    503           *
    504           *  greentea_parse_kv(key, value, 10, 48);
    505           *  greentea_parse_kv(key, value, 10, 48);
    506           *
    507           */
    508          
    509          
    510          static int gettok(char *, const int);
    511          static int getNextToken(char *, const int);
    512          static int HandleKV(char *,  char *,  const int,  const int);
    513          static int isstring(int);
    514          
    515          /**
    516           *  \brief Current token of key-value protocol's tokenizer
    517           */

   \                                 In section .bss, align 4
    518          static int CurTok = 0;
   \                     CurTok:
   \   00000000                      DS8 4
    519          
    520          /**
    521           *  \enum Token enumeration for key-value protocol tokenizer
    522           *
    523           *        This enum is used by key-value protocol tokenizer
    524           *        to detect parts of protocol in stream.
    525           *
    526           *        tok_eof       ::= EOF (end of file)
    527           *        tok_open      ::= "{{"
    528           *        tok_close     ::= "}}"
    529           *        tok_semicolon ::= ";"
    530           *        tok_string    ::= [a-zA-Z0-9_-!@#$%^&*()]+    // See isstring() function
    531           *
    532           */
    533          enum Token {
    534              tok_eof = -1,
    535              tok_open = -2,
    536              tok_close = -3,
    537              tok_semicolon = -4,
    538              tok_string = -5
    539          };
    540          
    541          /**
    542           * \brief Read character from stream of data
    543           *
    544           *        Closure for default "get character" function.
    545           *        This function is used to read characters from the stream
    546           *        (default is serial port RX). Key-value protocol tokenizer
    547           *        will build stream of tokes used by key-value protocol to
    548           *        detect valid messages.
    549           *
    550           *        If EOF is received parser finishes parsing and stops. In
    551           *        situation where we have serial port stream of data parsing
    552           *        goes forever.
    553           *
    554           * \return Next character from the stream or EOF if stream has ended.
    555           *
    556           */

   \                                 In section .text, align 2, keep-with-next
    557          extern "C" int greentea_getc() {
   \                     greentea_getc: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    558              return greentea_serial->getc();
   \   00000002   0x....             LDR      R0,??DataTable31_3
   \   00000004   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000008   0x.... 0x....      BL       _ZN4mbed9RawSerial4getcEv
   \   0000000C   0xBD02             POP      {R1,PC}          ;; return
    559          }
    560          
    561          /**
    562           * \brief parse input string for key-value pairs: {{key;value}}
    563           *        This function should replace scanf() used to
    564           *        check for incoming messages from master. All data
    565           *        parsed and rejected is discarded.
    566           *
    567           * \param out_key Ouput data with key
    568           * \param out_value Ouput data with value
    569           * \param out_key_size out_key total size
    570           * \param out_value_size out_value total data
    571           *
    572           * success != 0 when key-value pair was found
    573           * success == 0 when end of the stream was found
    574           *
    575           */

   \                                 In section .text, align 2, keep-with-next
    576          extern "C" int greentea_parse_kv(char *out_key,
    577                                char *out_value,
    578                                const int out_key_size,
    579                                const int out_value_size) {
   \                     greentea_parse_kv: (+1)
   \   00000000   0xB5FF             PUSH     {R0-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
    580              getNextToken(0, 0);
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       _Z6gettokPci
   \   0000000C   0x2702             MOVS     R7,#+2
   \   0000000E   0x43FF             MVNS     R7,R7            ;; #-3
   \   00000010   0x2603             MOVS     R6,#+3
   \   00000012   0x43F6             MVNS     R6,R6            ;; #-4
   \   00000014   0x2404             MOVS     R4,#+4
   \   00000016   0x43E4             MVNS     R4,R4            ;; #-5
   \   00000018   0x....             LDR      R5,??DataTable32
   \   0000001A   0xE003             B        ??greentea_parse_kv_0
    581              while (1) {
    582                  switch (CurTok) {
    583                  case tok_eof:
    584                      return 0;
    585          
    586                  case tok_open:
    587                      if (HandleKV(out_key, out_value, out_key_size, out_value_size)) {
    588                          // We've found {{ KEY ; VALUE }} expression
    589                          return 1;
    590                      }
    591                      break;
    592          
    593                  default:
    594                      // Load next token and pray...
    595                      getNextToken(0, 0);
   \                     ??greentea_parse_kv_1: (+1)
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       _Z6gettokPci
    596                      break;
   \                     ??greentea_parse_kv_0: (+1)
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0x43C9             MVNS     R1,R1            ;; #-2
   \   00000028   0x1A40             SUBS     R0,R0,R1
   \   0000002A   0xD003             BEQ      ??greentea_parse_kv_2
   \   0000002C   0x1E40             SUBS     R0,R0,#+1
   \   0000002E   0xD1F5             BNE      ??greentea_parse_kv_1
   \                     ??greentea_parse_kv_3: (+1)
   \   00000030   0xB005             ADD      SP,SP,#+20
   \   00000032   0xBDF0             POP      {R4-R7,PC}       ;; return
   \                     ??greentea_parse_kv_2: (+1)
   \   00000034   0x9903             LDR      R1,[SP, #+12]
   \   00000036   0x9801             LDR      R0,[SP, #+4]
   \   00000038   0x.... 0x....      BL       _Z6gettokPci
   \   0000003C   0x6028             STR      R0,[R5, #+0]
   \   0000003E   0x42A0             CMP      R0,R4
   \   00000040   0xD1EC             BNE      ??greentea_parse_kv_1
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x.... 0x....      BL       _Z6gettokPci
   \   0000004A   0x6028             STR      R0,[R5, #+0]
   \   0000004C   0x42B0             CMP      R0,R6
   \   0000004E   0xD1E5             BNE      ??greentea_parse_kv_1
   \   00000050   0x9904             LDR      R1,[SP, #+16]
   \   00000052   0x9802             LDR      R0,[SP, #+8]
   \   00000054   0x.... 0x....      BL       _Z6gettokPci
   \   00000058   0x6028             STR      R0,[R5, #+0]
   \   0000005A   0x42A0             CMP      R0,R4
   \   0000005C   0xD1DE             BNE      ??greentea_parse_kv_1
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x.... 0x....      BL       _Z6gettokPci
   \   00000066   0x42B8             CMP      R0,R7
   \   00000068   0xD1D8             BNE      ??greentea_parse_kv_1
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0xE7E0             B        ??greentea_parse_kv_3
    597                  }
    598              }
    599          }
    600          
    601          /**
    602           *  \brief Get next token from stream
    603           *
    604           *         Key-value TOKENIZER feature
    605           *
    606           *         This function is used by key-value parser determine
    607           *         if key-value message is embedded in stream data.
    608           *
    609           *  \param str Output parameters to store token string value
    610           *  \param str_size Size of 'str' parameter in bytes (characters)
    611           *
    612           */
    613          static int getNextToken(char *str, const int str_size) {
    614              return CurTok = gettok(str, str_size);
    615          }
    616          
    617          /**
    618           *  \brief Check if character is punctuation character
    619           *
    620           *          Auxilary key-value TOKENIZER function
    621           *
    622           *          Defines if character is in subset of allowed punctuation
    623           *          characters which can be part of a key or value string.
    624           *          Not allowed characters are: ";{}"
    625           *
    626           *  \param c Input character to check
    627           *  \return Return 1 if character is allowed punctuation character, otherwise return false
    628           *
    629           */
    630          static int ispunctuation(int c) {

   \                                 In section .rodata, align 4, keep-with-next
    631              static const char punctuation[] = "_-!@#$%^&*()=+:<>,./?\\\"'";  // No ";{}"
   \                     `ispunctuation(int)::punctuation`:
   \   00000000   0x5F 0x2D          DC8 "_-!@#$%^&*()=+:<>,./?\\\"'"
   \              0x21 0x40    
   \              0x23 0x24    
   \              0x25 0x5E    
   \              0x26 0x2A    
   \              0x28 0x29    
   \              0x3D 0x2B    
   \              0x3A 0x3C    
   \              0x3E 0x2C    
   \              0x2E 0x2F    
   \              0x3F 0x5C    
   \              0x22 0x27    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    632              for (size_t i=0; i< sizeof(punctuation); ++i) {
    633                  if (c == punctuation[i]) {
    634                      return 1;
    635                  }
    636              }
    637              return 0;
    638          }
    639          
    640          /**
    641           *  \brief Check if character is string token character
    642           *
    643           *          Auxilary key-value TOKENIZER function
    644           *
    645           *          Defines if character is in subset of allowed string
    646           *          token characters.
    647           *          String defines set of characters which can be a key or value string.
    648           *
    649           *          Allowed subset includes:
    650           *          - Alphanumerical characters
    651           *          - Digits
    652           *          - White spaces and
    653           *          - subset of punctuation characters.
    654           *
    655           *  \param c Input character to check
    656           *  \return Return 1 if character is allowed punctuation character, otherwise return false
    657           *
    658           */

   \                                 In section .text, align 2, keep-with-next
    659          static int isstring(int c) {
   \                     _Z8isstringi: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    660              return (isalpha(c) ||
    661                      isdigit(c) ||
    662                      isspace(c) ||
    663                      ispunctuation(c));
   \   00000004   0x.... 0x....      BL       isalpha
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD11E             BNE      ??isstring_0
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x3830             SUBS     R0,R0,#+48
   \   00000010   0x280A             CMP      R0,#+10
   \   00000012   0xD31A             BCC      ??isstring_0
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x.... 0x....      BL       isspace
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD115             BNE      ??isstring_0
   \   0000001E   0x2C5F             CMP      R4,#+95
   \   00000020   0xD013             BEQ      ??isstring_0
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x....             LDR      R1,??DataTable32_1
   \                     ??isstring_1: (+1)
   \   00000026   0x780A             LDRB     R2,[R1, #+0]
   \   00000028   0x4294             CMP      R4,R2
   \   0000002A   0xD00E             BEQ      ??isstring_0
   \   0000002C   0x784A             LDRB     R2,[R1, #+1]
   \   0000002E   0x4294             CMP      R4,R2
   \   00000030   0xD00B             BEQ      ??isstring_0
   \   00000032   0x788A             LDRB     R2,[R1, #+2]
   \   00000034   0x4294             CMP      R4,R2
   \   00000036   0xD008             BEQ      ??isstring_0
   \   00000038   0x78CA             LDRB     R2,[R1, #+3]
   \   0000003A   0x4294             CMP      R4,R2
   \   0000003C   0xD005             BEQ      ??isstring_0
   \   0000003E   0x1D00             ADDS     R0,R0,#+4
   \   00000040   0x1D09             ADDS     R1,R1,#+4
   \   00000042   0x2819             CMP      R0,#+25
   \   00000044   0xD3EF             BCC      ??isstring_1
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0xBD10             POP      {R4,PC}          ;; return
   \                     ??isstring_0: (+1)
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0xBD10             POP      {R4,PC}
    664          }
    665          
    666          /**
    667           *  \brief TOKENIZER of key-value protocol
    668           *
    669           *         Actual key-value TOKENIZER engine
    670           *
    671           *         TOKENIZER defines #Token enum to map recognized tokens to integer values.
    672           *
    673           *         <TOK_EOF>       ::= EOF (end of file)
    674           *         <TOK_OPEN>      ::= "{{"
    675           *         <TOK_CLOSE>     ::= "}}"
    676           *         <TOK_SEMICOLON> ::= ";"
    677           *         <TOK_STRING>    ::= [a-zA-Z0-9_-!@#$%^&*()]+    // See isstring() function *
    678           *
    679           *  \param out_str Output string with parsed token (string)
    680           *  \param str_size Size of str buffer we can use
    681           *
    682           *  \return Return #Token enum value used by parser to check for key-value occurrences
    683           *
    684           */

   \                                 In section .text, align 2, keep-with-next
    685          static int gettok(char *out_str, const int str_size) {
   \                     _Z6gettokPci: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000F             MOVS     R7,R1
   \   00000006   0x....             LDR      R6,??DataTable32_2
   \   00000008   0x....             LDR      R5,??DataTable32_3
   \   0000000A   0xE005             B        ??gettok_0
    686              static int LastChar = '!';
    687              static int str_idx = 0;
    688          
    689              // whitespace ::=
    690              while (isspace(LastChar)) {
    691                  LastChar = greentea_getc();
   \                     ??gettok_1: (+1)
   \   0000000C   0x0030             MOVS     R0,R6
   \   0000000E   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000012   0x.... 0x....      BL       _ZN4mbed9RawSerial4getcEv
   \   00000016   0x6028             STR      R0,[R5, #+0]
    692              }
   \                     ??gettok_0: (+1)
   \   00000018   0x6828             LDR      R0,[R5, #+0]
   \   0000001A   0x.... 0x....      BL       isspace
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD1F4             BNE      ??gettok_1
    693          
    694              // string ::= [a-zA-Z0-9_-!@#$%^&*()]+
    695              if (isstring(LastChar)) {
   \   00000022   0x6828             LDR      R0,[R5, #+0]
   \   00000024   0x.... 0x....      BL       _Z8isstringi
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD026             BEQ      ??gettok_2
    696                  str_idx = 0;
   \   0000002C   0x2600             MOVS     R6,#+0
   \   0000002E   0x606E             STR      R6,[R5, #+4]
    697                  if (out_str && str_idx < str_size - 1) {
   \   00000030   0x2C00             CMP      R4,#+0
   \   00000032   0xD010             BEQ      ??gettok_3
   \   00000034   0x1E78             SUBS     R0,R7,#+1
   \   00000036   0x2801             CMP      R0,#+1
   \   00000038   0xDB0D             BLT      ??gettok_3
    698                      out_str[str_idx++] = LastChar;
   \   0000003A   0x6828             LDR      R0,[R5, #+0]
   \   0000003C   0x7020             STRB     R0,[R4, #+0]
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0xE008             B        ??gettok_4
    699                  }
    700          
    701                  while (isstring((LastChar = greentea_getc())))
    702                      if (out_str && str_idx < str_size - 1) {
   \                     ??gettok_5: (+1)
   \   00000042   0x2C00             CMP      R4,#+0
   \   00000044   0xD007             BEQ      ??gettok_3
   \   00000046   0x6868             LDR      R0,[R5, #+4]
   \   00000048   0x1E79             SUBS     R1,R7,#+1
   \   0000004A   0x4288             CMP      R0,R1
   \   0000004C   0xDA03             BGE      ??gettok_3
    703                          out_str[str_idx++] = LastChar;
   \   0000004E   0x6829             LDR      R1,[R5, #+0]
   \   00000050   0x5421             STRB     R1,[R4, R0]
   \   00000052   0x1C40             ADDS     R0,R0,#+1
   \                     ??gettok_4: (+1)
   \   00000054   0x6068             STR      R0,[R5, #+4]
    704                      }
   \                     ??gettok_3: (+1)
   \   00000056   0x....             LDR      R0,??DataTable32_2
   \   00000058   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   0000005C   0x.... 0x....      BL       _ZN4mbed9RawSerial4getcEv
   \   00000060   0x6028             STR      R0,[R5, #+0]
   \   00000062   0x.... 0x....      BL       _Z8isstringi
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD1EB             BNE      ??gettok_5
    705                  if (out_str && str_idx < str_size) {
   \   0000006A   0x2C00             CMP      R4,#+0
   \   0000006C   0xD003             BEQ      ??gettok_6
   \   0000006E   0x6868             LDR      R0,[R5, #+4]
   \   00000070   0x42B8             CMP      R0,R7
   \   00000072   0xDA00             BGE      ??gettok_6
    706                      out_str[str_idx] = '\0';
   \   00000074   0x5426             STRB     R6,[R4, R0]
    707                  }
    708          
    709                  return tok_string;
   \                     ??gettok_6: (+1)
   \   00000076   0x2004             MOVS     R0,#+4
   \   00000078   0xE028             B.N      ??gettok_7
    710              }
    711          
    712              // semicolon ::= ';'
    713              if (LastChar == ';') {
   \                     ??gettok_2: (+1)
   \   0000007A   0x6828             LDR      R0,[R5, #+0]
   \   0000007C   0x283B             CMP      R0,#+59
   \   0000007E   0xD107             BNE      ??gettok_8
    714                  LastChar = greentea_getc();
   \   00000080   0x4630             MOV      R0,R6
   \   00000082   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   00000086   0x.... 0x....      BL       _ZN4mbed9RawSerial4getcEv
   \   0000008A   0x6028             STR      R0,[R5, #+0]
    715                  return tok_semicolon;
   \   0000008C   0x2003             MOVS     R0,#+3
   \   0000008E   0xE01D             B.N      ??gettok_7
    716              }
    717          
    718              // open ::= '{{'
    719              if (LastChar == '{') {
   \                     ??gettok_8: (+1)
   \   00000090   0x287B             CMP      R0,#+123
   \   00000092   0xD10F             BNE      ??gettok_9
    720                  LastChar = greentea_getc();
   \   00000094   0x0030             MOVS     R0,R6
   \   00000096   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   0000009A   0x.... 0x....      BL       _ZN4mbed9RawSerial4getcEv
   \   0000009E   0x6028             STR      R0,[R5, #+0]
    721                  if (LastChar == '{') {
   \   000000A0   0x287B             CMP      R0,#+123
   \   000000A2   0xD107             BNE      ??gettok_9
    722                      LastChar = greentea_getc();
   \   000000A4   0x0030             MOVS     R0,R6
   \   000000A6   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   000000AA   0x.... 0x....      BL       _ZN4mbed9RawSerial4getcEv
   \   000000AE   0x6028             STR      R0,[R5, #+0]
    723                      return tok_open;
   \   000000B0   0x2001             MOVS     R0,#+1
   \   000000B2   0xE00B             B.N      ??gettok_7
    724                  }
    725              }
    726          
    727              // close ::= '}'
    728          	if (LastChar == '}') {
   \                     ??gettok_9: (+1)
   \   000000B4   0x6828             LDR      R0,[R5, #+0]
   \   000000B6   0x287D             CMP      R0,#+125
   \   000000B8   0xD10A             BNE      ??gettok_10
    729          		LastChar = greentea_getc();
   \   000000BA   0x4630             MOV      R0,R6
   \   000000BC   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   000000C0   0x.... 0x....      BL       _ZN4mbed9RawSerial4getcEv
   \   000000C4   0x6028             STR      R0,[R5, #+0]
    730          		if (LastChar == '}') {
   \   000000C6   0x287D             CMP      R0,#+125
   \   000000C8   0xD102             BNE      ??gettok_10
    731          			return tok_close;
   \   000000CA   0x2002             MOVS     R0,#+2
   \                     ??gettok_7: (+1)
   \   000000CC   0x43C0             MVNS     R0,R0            ;; #-3
   \   000000CE   0xBDF2             POP      {R1,R4-R7,PC}
    732          		}
    733          	}
    734          
    735              if (LastChar == EOF)
   \                     ??gettok_10: (+1)
   \   000000D0   0x682C             LDR      R4,[R5, #+0]
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x43C0             MVNS     R0,R0            ;; #-1
   \   000000D6   0x4284             CMP      R4,R0
   \   000000D8   0xD006             BEQ      ??gettok_11
    736                  return tok_eof;
    737          
    738              // Otherwise, just return the character as its ascii value.
    739              int ThisChar = LastChar;
    740              LastChar = greentea_getc();
   \   000000DA   0x4630             MOV      R0,R6
   \   000000DC   0x.... 0x....      BL       _ZN12SingletonPtrI14GreenteaSerialEptEv
   \   000000E0   0x.... 0x....      BL       _ZN4mbed9RawSerial4getcEv
   \   000000E4   0x6028             STR      R0,[R5, #+0]
    741              return ThisChar;
   \   000000E6   0x0020             MOVS     R0,R4
   \                     ??gettok_11: (+1)
   \   000000E8   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    742          }

   \                                 In section .data, align 4
   \                     `gettok(char *, int)::LastChar`:
   \   00000000   0x00000021         DC32 33
   \   00000004   0x00000000         DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_15:
   \   00000000   0x6D 0x62          DC8 "mbedmbedmbedmbedmbedmbedmbedmbed\015\012"
   \              0x65 0x64    
   \              0x6D 0x62    
   \              0x65 0x64    
   \              0x6D 0x62    
   \              0x65 0x64    
   \              0x6D 0x62    
   \              0x65 0x64    
   \              0x6D 0x62    
   \              0x65 0x64    
   \              0x6D 0x62    
   \              0x65 0x64    
   \              0x6D 0x62    
   \              0x65 0x64    
   \              0x6D 0x62    
   \              0x65 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_17:
   \   00000000   0x31 0x2E          DC8 "1.3.0"
   \              0x33 0x2E    
   \              0x30 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   0x........         DC32     GREENTEA_TEST_ENV_SYNC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   0x........         DC32     greentea_serial

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31:
   \   00000000   0x........         DC32     GREENTEA_TEST_ENV_END

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_1:
   \   00000000   0x........         DC32     GREENTEA_TEST_ENV_TESTCASE_START

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_2:
   \   00000000   0x........         DC32     GREENTEA_TEST_ENV_TESTCASE_FINISH

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_3:
   \   00000000   0x........         DC32     greentea_serial

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32:
   \   00000000   0x........         DC32     CurTok

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_1:
   \   00000000   0x........         DC32     `ispunctuation(int)::punctuation`+0x1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_2:
   \   00000000   0x........         DC32     greentea_serial

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_3:
   \   00000000   0x........         DC32     `gettok(char *, int)::LastChar`

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x65 0x6E          DC8 "end"
   \              0x64 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x5F 0x5F          DC8 "__exit"
   \              0x65 0x78    
   \              0x69 0x74    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x5F 0x5F          DC8 "__sync"
   \              0x73 0x79    
   \              0x6E 0x63    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x5F 0x5F          DC8 "__timeout"
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x6F 0x75    
   \              0x74 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x5F 0x5F          DC8 "__host_test_name"
   \              0x68 0x6F    
   \              0x73 0x74    
   \              0x5F 0x74    
   \              0x65 0x73    
   \              0x74 0x5F    
   \              0x6E 0x61    
   \              0x6D 0x65    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x5F 0x5F          DC8 "__version"
   \              0x76 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x73 0x75          DC8 "success"
   \              0x63 0x63    
   \              0x65 0x73    
   \              0x73 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x66 0x61          DC8 "failure"
   \              0x69 0x6C    
   \              0x75 0x72    
   \              0x65 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x5F 0x5F          DC8 "__testcase_name"
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x63 0x61    
   \              0x73 0x65    
   \              0x5F 0x6E    
   \              0x61 0x6D    
   \              0x65 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x5F 0x5F          DC8 "__testcase_count"
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x63 0x61    
   \              0x73 0x65    
   \              0x5F 0x63    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x5F 0x5F          DC8 "__testcase_start"
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x63 0x61    
   \              0x73 0x65    
   \              0x5F 0x73    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_11:
   \   00000000   0x5F 0x5F          DC8 "__testcase_finish"
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x63 0x61    
   \              0x73 0x65    
   \              0x5F 0x66    
   \              0x69 0x6E    
   \              0x69 0x73    
   \              0x68 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_12:
   \   00000000   0x5F 0x5F          DC8 "__testcase_summary"
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x63 0x61    
   \              0x73 0x65    
   \              0x5F 0x73    
   \              0x75 0x6D    
   \              0x6D 0x61    
   \              0x72 0x79    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_13:
   \   00000000   0x5F 0x5F          DC8 "__coverage_start"
   \              0x63 0x6F    
   \              0x76 0x65    
   \              0x72 0x61    
   \              0x67 0x65    
   \              0x5F 0x73    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_14:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_16:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002E   0x00 0x00          DC8 0, 0
    743          
    744          /**
    745           *  \brief Key-value parser
    746           *
    747           *         Key-value message grammar
    748           *
    749           *         <MESSAGE>: <TOK_OPEN> <TOK_STRING> <TOK_SEMICOLON> <TOK_STRING> <TOK_CLOSE>
    750           *
    751           *         Examples:
    752           *         message:     "{{__timeout; 1000}}"
    753           *                      "{{__sync; 12345678-1234-5678-1234-567812345678}}"
    754           *
    755           *  \param out_key Output buffer to store key string value
    756           *  \param out_value Output buffer to store value string value
    757           *  \param out_key_size Buffer 'out_key' buffer size
    758           *  \param out_value_size Buffer 'out_value_size' buffer size
    759           *  \return Returns 1 if key-value message was parsed successfully in stream of tokens from tokenizer
    760           *
    761           */
    762          static int HandleKV(char *out_key,
    763                              char *out_value,
    764                              const int out_key_size,
    765                              const int out_value_size) {
    766              // We already started with <open>
    767              if (getNextToken(out_key, out_key_size) == tok_string) {
    768                  if (getNextToken(0, 0) == tok_semicolon) {
    769                      if (getNextToken(out_value, out_value_size) == tok_string) {
    770                          if (getNextToken(0, 0) == tok_close) {
    771                              // <open> <string> <semicolon> <string> <close>
    772                              // Found "{{KEY;VALUE}}" expression
    773                              return 1;
    774                          }
    775                      }
    776                  }
    777              }
    778              getNextToken(0, 0);
    779              return 0;
    780          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      64   GREENTEA_SETUP
        64   -> _GREENTEA_SETUP_COMMON(int, char const *, char *, std::size_t)
        64   -> __aeabi_memclr4
       8   GREENTEA_SETUP_UUID(int, char const *, char *, std::size_t)
         8   -> _GREENTEA_SETUP_COMMON(int, char const *, char *, std::size_t)
       8   GREENTEA_TESTCASE_FINISH(char const *, std::size_t, std::size_t)
         8   -> greentea_send_kv(char const *, char const *, int, int)
       8   GREENTEA_TESTCASE_START(char const *)
         8   -> greentea_send_kv
      16   GREENTEA_TESTSUITE_RESULT(int)
        16   -> greentea_metrics_report()
        16   -> greentea_send_kv
        16   -> greentea_send_kv(char const *, int)
      16   SingletonPtr<GreenteaSerial>::operator->()
        16   -> GreenteaSerial::GreenteaSerial()
        16   -> mbed_assert_internal
        16   -> osMutexAcquire
        16   -> osMutexRelease
      40   _GREENTEA_SETUP_COMMON(int, char const *, char *, std::size_t)
        40   -> SingletonPtr<GreenteaSerial>::operator->()
        40   -> greentea_metrics_setup()
        40   -> greentea_parse_kv
        40   -> greentea_send_kv
        40   -> greentea_send_kv(char const *, int)
        40   -> mbed::RawSerial::putc(int)
        40   -> std::strcmp
      24   gettok(char *, int)
        24   -> SingletonPtr<GreenteaSerial>::operator->()
        24   -> isstring(int)
        24   -> mbed::RawSerial::getc()
        24   -> std::isspace
       8   greentea_getc
         8   -> SingletonPtr<GreenteaSerial>::operator->()
         8   -> mbed::RawSerial::getc()
      40   greentea_parse_kv
        40   -> gettok(char *, int)
      16   greentea_send_kv
        16   -> SingletonPtr<GreenteaSerial>::operator->()
        16   -> greentea_write_postamble()
        16   -> greentea_write_string(char const *)
        16   -> mbed::RawSerial::putc(int)
      24   greentea_send_kv(char const *, char const *, int)
        24   -> SingletonPtr<GreenteaSerial>::operator->()
        24   -> greentea_write_int(int)
        24   -> greentea_write_postamble()
        24   -> greentea_write_string(char const *)
        24   -> mbed::RawSerial::putc(int)
      24   greentea_send_kv(char const *, char const *, int, int)
        24   -> SingletonPtr<GreenteaSerial>::operator->()
        24   -> greentea_write_int(int)
        24   -> greentea_write_postamble()
        24   -> greentea_write_string(char const *)
        24   -> mbed::RawSerial::putc(int)
      16   greentea_send_kv(char const *, int)
        16   -> SingletonPtr<GreenteaSerial>::operator->()
        16   -> greentea_write_int(int)
        16   -> greentea_write_postamble()
        16   -> greentea_write_string(char const *)
        16   -> mbed::RawSerial::putc(int)
      24   greentea_send_kv(char const *, int, int)
        24   -> SingletonPtr<GreenteaSerial>::operator->()
        24   -> greentea_write_int(int)
        24   -> greentea_write_postamble()
        24   -> mbed::RawSerial::putc(int)
      32   greentea_write_int(int)
        32   -> SingletonPtr<GreenteaSerial>::operator->()
        32   -> mbed::RawSerial::putc(int)
        32   -> std::sprintf
       8   greentea_write_postamble()
         8   -> SingletonPtr<GreenteaSerial>::operator->()
         8   -> mbed::RawSerial::putc(int)
      16   greentea_write_string(char const *)
        16   -> SingletonPtr<GreenteaSerial>::operator->()
        16   -> mbed::RawSerial::putc(int)
       8   isstring(int)
         8   -> std::isalpha
         8   -> std::isspace
      12   mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
       8   mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
         8   -- Indirect call
       0   mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
       0   mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
       8   mbed::callback<>(void (*)(void *), void *)
         8   -> mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable29
       4  ??DataTable30
       4  ??DataTable31
       4  ??DataTable31_1
       4  ??DataTable31_2
       4  ??DataTable31_3
       4  ??DataTable32
       4  ??DataTable32_1
       4  ??DataTable32_2
       4  ??DataTable32_3
       4  ?_0
       8  ?_1
      20  ?_10
      20  ?_11
      20  ?_12
      20  ?_13
       8  ?_14
      36  ?_15
      48  ?_16
       8  ?_17
       8  ?_2
       8  ?_3
       8  ?_4
      12  ?_5
      20  ?_6
      12  ?_7
      16  ?_8
      20  ?_9
       4  CurTok
      32  GREENTEA_SETUP
       8  GREENTEA_SETUP_UUID(int, char const *, char *, std::size_t)
      18  GREENTEA_TESTCASE_FINISH(char const *, std::size_t, std::size_t)
      14  GREENTEA_TESTCASE_START(char const *)
      36  GREENTEA_TESTSUITE_RESULT(int)
      16  GREENTEA_TEST_ENV_END
          GREENTEA_TEST_ENV_EXIT
          GREENTEA_TEST_ENV_SUCCESS
          GREENTEA_TEST_ENV_FAILURE
       4  GREENTEA_TEST_ENV_LCOV_START
      16  GREENTEA_TEST_ENV_SYNC
          GREENTEA_TEST_ENV_TIMEOUT
          GREENTEA_TEST_ENV_HOST_TEST_NAME
          GREENTEA_TEST_ENV_HOST_TEST_VERSION
       4  GREENTEA_TEST_ENV_TESTCASE_COUNT
       4  GREENTEA_TEST_ENV_TESTCASE_FINISH
       4  GREENTEA_TEST_ENV_TESTCASE_NAME
       4  GREENTEA_TEST_ENV_TESTCASE_START
       4  GREENTEA_TEST_ENV_TESTCASE_SUMMARY
       8  LastChar
          str_idx
      80  SingletonPtr<GreenteaSerial>::operator->()
     108  _GREENTEA_SETUP_COMMON(int, char const *, char *, std::size_t)
     234  gettok(char *, int)
      14  greentea_getc
     110  greentea_parse_kv
      70  greentea_send_kv
      86  greentea_send_kv(char const *, char const *, int)
     120  greentea_send_kv(char const *, char const *, int, int)
      66  greentea_send_kv(char const *, int)
     102  greentea_send_kv(char const *, int, int)
      52  greentea_write_int(int)
      60  greentea_write_postamble()
      30  greentea_write_string(char const *)
      78  isstring(int)
      32  mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
      12  mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
       2  mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
      10  mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
       8  mbed::callback<>(void (*)(void *), void *)
      12  ops
      28  punctuation
     392  -- Other

 
     4 bytes in section .bss
    64 bytes in section .data
   684 bytes in section .rodata
 1 466 bytes in section .text
 
 1 210 bytes of CODE  memory (+ 256 bytes shared)
   280 bytes of CONST memory (+ 404 bytes shared)
    68 bytes of DATA  memory

Errors: none
Warnings: none
