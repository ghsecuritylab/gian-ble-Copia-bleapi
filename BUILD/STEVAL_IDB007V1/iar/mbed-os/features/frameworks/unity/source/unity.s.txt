###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       16/Mar/2018  12:16:12
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\frameworks\unity\source\unity.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DDEVICE_SERIAL=1 -DTARGET_CORTEX_M -DDEVICE_SPI=1 -DTARGET_LIKE_MBED
#        -DMBED_BUILD_TIMESTAMP=1521198946.13 -DARM_MATH_CM0 -DTARGET_RELEASE
#        -D__CORTEX_M0 -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0
#        -DTOOLCHAIN_object -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -f
#        .\BUILD\STEVAL_IDB007V1\iar\.includes_fc2e77952737cb4522ab0dffe8cfd8aa.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN
#        -I./mbed-os/features/frameworks
#        -I./mbed-os/features/frameworks/greentea-client
#        -I./mbed-os/features/frameworks/greentea-client/greentea-client
#        -I./mbed-os/features/frameworks/greentea-client/source
#        -I./mbed-os/features/frameworks/unity
#        -I./mbed-os/features/frameworks/unity/source
#        -I./mbed-os/features/frameworks/unity/unity
#        -I./mbed-os/features/frameworks/utest
#        -I./mbed-os/features/frameworks/utest/source
#        -I./mbed-os/features/frameworks/utest/utest
#        -I./mbed-os/features/mbedtls -I./mbed-os/features/mbedtls/importer
#        -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/features/netsocket
#        -I./mbed-os/features/netsocket/cellular
#        -I./mbed-os/features/netsocket/cellular/generic_modem_driver
#        -I./mbed-os/features/netsocket/cellular/utils
#        -I./mbed-os/features/storage -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\iar\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\frameworks\unity\source\unity.d
#        -l
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\frameworks\unity\source\unity.s.txt
#        -o
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\frameworks\unity\source\unity.o
#        .\mbed-os\features\frameworks\unity\source\unity.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\frameworks\unity\source\unity.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\frameworks\unity\source\unity.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia\mbed-os\features\frameworks\unity\source\unity.c
      1          /* =========================================================================
      2              Unity Project - A Test Framework for C
      3              Copyright (c) 2007-14 Mike Karlesky, Mark VanderVoord, Greg Williams
      4              [Released under MIT License. Please refer to license.txt for details]
      5          ============================================================================ */
      6          
      7          #include "unity/unity.h"
      8          #include "utest/unity_handler.h"
      9          #include <stddef.h>
     10          
     11          /* If omitted from header, declare overrideable prototypes here so they're ready for use */
     12          #ifdef UNITY_OMIT_OUTPUT_CHAR_HEADER_DECLARATION
     13          int UNITY_OUTPUT_CHAR(int);
     14          #endif
     15          #ifdef UNITY_OMIT_OUTPUT_FLUSH_HEADER_DECLARATION
     16          int UNITY_OUTPUT_FLUSH(void);
     17          #endif
     18          
     19          /* Helpful macros for us to use here */
     20          #define UNITY_FAIL_AND_BAIL   { UNITY_OUTPUT_CHAR('\n'); utest_unity_assert_failure(); }
     21          #define UNITY_IGNORE_AND_BAIL { UNITY_OUTPUT_CHAR('\n'); utest_unity_ignore_failure(); }
     22          
     23          /* return prematurely if we are already in failure or ignore state */
     24          #define UNITY_SKIP_EXECUTION  { if ((Unity.CurrentTestFailed != 0) || (Unity.CurrentTestIgnored != 0)) {return;} }
     25          

   \                                 In section .bss, align 8
     26          struct _Unity Unity;
   \                     Unity:
   \   00000000                      DS8 128
     27          

   \                                 In section .text, align 4, keep-with-next
     28          static const char UnityStrOk[]                     = "OK";
   \                     UnityStrOk:
   \   00000000   0x4F 0x4B          DC8 "OK"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
     29          static const char UnityStrPass[]                   = "PASS";
   \                     UnityStrPass:
   \   00000000   0x50 0x41          DC8 "PASS"
   \              0x53 0x53    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
     30          static const char UnityStrFail[]                   = "FAIL";
   \                     UnityStrFail:
   \   00000000   0x46 0x41          DC8 "FAIL"
   \              0x49 0x4C    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
     31          static const char UnityStrIgnore[]                 = "IGNORE";
   \                     UnityStrIgnore:
   \   00000000   0x49 0x47          DC8 "IGNORE"
   \              0x4E 0x4F    
   \              0x52 0x45    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
     32          static const char UnityStrNull[]                   = "NULL";
   \                     UnityStrNull:
   \   00000000   0x4E 0x55          DC8 "NULL"
   \              0x4C 0x4C    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
     33          static const char UnityStrSpacer[]                 = ". ";
   \                     UnityStrSpacer:
   \   00000000   0x2E 0x20          DC8 ". "
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
     34          static const char UnityStrExpected[]               = " Expected ";
   \                     UnityStrExpected:
   \   00000000   0x20 0x45          DC8 " Expected "
   \              0x78 0x70    
   \              0x65 0x63    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
     35          static const char UnityStrWas[]                    = " Was ";
   \                     UnityStrWas:
   \   00000000   0x20 0x57          DC8 " Was "
   \              0x61 0x73    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
     36          static const char UnityStrElement[]                = " Element ";
   \                     UnityStrElement:
   \   00000000   0x20 0x45          DC8 " Element "
   \              0x6C 0x65    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
     37          static const char UnityStrByte[]                   = " Byte ";
   \                     UnityStrByte:
   \   00000000   0x20 0x42          DC8 " Byte "
   \              0x79 0x74    
   \              0x65 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
     38          static const char UnityStrMemory[]                 = " Memory Mismatch.";
   \                     UnityStrMemory:
   \   00000000   0x20 0x4D          DC8 " Memory Mismatch."
   \              0x65 0x6D    
   \              0x6F 0x72    
   \              0x79 0x20    
   \              0x4D 0x69    
   \              0x73 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x2E 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
     39          static const char UnityStrDelta[]                  = " Values Not Within Delta ";
   \                     UnityStrDelta:
   \   00000000   0x20 0x56          DC8 " Values Not Within Delta "
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x73 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x57 0x69    
   \              0x74 0x68    
   \              0x69 0x6E    
   \              0x20 0x44    
   \              0x65 0x6C    
   \              0x74 0x61    
   \              0x20 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
     40          static const char UnityStrPointless[]              = " You Asked Me To Compare Nothing, Which Was Pointless.";
   \                     UnityStrPointless:
   \   00000000   0x20 0x59          DC8 20H, 59H, 6FH, 75H, 20H, 41H, 73H, 6BH
   \              0x6F 0x75    
   \              0x20 0x41    
   \              0x73 0x6B    
   \   00000008   0x65 0x64          DC8 65H, 64H, 20H, 4DH, 65H, 20H, 54H, 6FH
   \              0x20 0x4D    
   \              0x65 0x20    
   \              0x54 0x6F    
   \   00000010   0x20 0x43          DC8 20H, 43H, 6FH, 6DH, 70H, 61H, 72H, 65H
   \              0x6F 0x6D    
   \              0x70 0x61    
   \              0x72 0x65    
   \   00000018   0x20 0x4E          DC8 20H, 4EH, 6FH, 74H, 68H, 69H, 6EH, 67H
   \              0x6F 0x74    
   \              0x68 0x69    
   \              0x6E 0x67    
   \   00000020   0x2C 0x20          DC8 2CH, 20H, 57H, 68H, 69H, 63H, 68H, 20H
   \              0x57 0x68    
   \              0x69 0x63    
   \              0x68 0x20    
   \   00000028   0x57 0x61          DC8 57H, 61H, 73H, 20H, 50H, 6FH, 69H, 6EH
   \              0x73 0x20    
   \              0x50 0x6F    
   \              0x69 0x6E    
   \   00000030   0x74 0x6C          DC8 74H, 6CH, 65H, 73H, 73H, 2EH, 0
   \              0x65 0x73    
   \              0x73 0x2E    
   \              0x00         
   \   00000037   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
     41          static const char UnityStrNullPointerForExpected[] = " Expected pointer to be NULL";
   \                     UnityStrNullPointerForExpected:
   \   00000000   0x20 0x45          DC8 " Expected pointer to be NULL"
   \              0x78 0x70    
   \              0x65 0x63    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x70 0x6F    
   \              0x69 0x6E    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x74 0x6F    
   \              0x20 0x62    
   \              0x65 0x20    
   \              0x4E 0x55    
   \              0x4C 0x4C    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
     42          static const char UnityStrNullPointerForActual[]   = " Actual pointer was NULL";
   \                     UnityStrNullPointerForActual:
   \   00000000   0x20 0x41          DC8 " Actual pointer was NULL"
   \              0x63 0x74    
   \              0x75 0x61    
   \              0x6C 0x20    
   \              0x70 0x6F    
   \              0x69 0x6E    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x77 0x61    
   \              0x73 0x20    
   \              0x4E 0x55    
   \              0x4C 0x4C    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
     43          static const char UnityStrNot[]                    = "Not ";
   \                     UnityStrNot:
   \   00000000   0x4E 0x6F          DC8 "Not "
   \              0x74 0x20    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
     44          static const char UnityStrInf[]                    = "Infinity";
   \                     UnityStrInf:
   \   00000000   0x49 0x6E          DC8 "Infinity"
   \              0x66 0x69    
   \              0x6E 0x69    
   \              0x74 0x79    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
     45          static const char UnityStrNegInf[]                 = "Negative Infinity";
   \                     UnityStrNegInf:
   \   00000000   0x4E 0x65          DC8 "Negative Infinity"
   \              0x67 0x61    
   \              0x74 0x69    
   \              0x76 0x65    
   \              0x20 0x49    
   \              0x6E 0x66    
   \              0x69 0x6E    
   \              0x69 0x74    
   \              0x79 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
     46          static const char UnityStrNaN[]                    = "NaN";
   \                     UnityStrNaN:
   \   00000000   0x4E 0x61          DC8 "NaN"
   \              0x4E 0x00    

   \                                 In section .rodata, align 4, keep-with-next
     47          static const char UnityStrDet[]                    = "Determinate";
   \                     UnityStrDet:
   \   00000000   0x44 0x65          DC8 "Determinate"
   \              0x74 0x65    
   \              0x72 0x6D    
   \              0x69 0x6E    
   \              0x61 0x74    
   \              0x65 0x00    

   \                                 In section .text, align 4, keep-with-next
     48          static const char UnityStrInvalidFloatTrait[]      = "Invalid Float Trait";
   \                     UnityStrInvalidFloatTrait:
   \   00000000   0x49 0x6E          DC8 "Invalid Float Trait"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x46 0x6C    
   \              0x6F 0x61    
   \              0x74 0x20    
   \              0x54 0x72    
   \              0x61 0x69    
   \              0x74 0x00    

   \                                 In section .rodata, align 4, keep-with-next
     49          const char UnityStrErrFloat[]                      = "Unity Floating Point Disabled";
   \                     UnityStrErrFloat:
   \   00000000   0x55 0x6E          DC8 "Unity Floating Point Disabled"
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x46 0x6C    
   \              0x6F 0x61    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x50    
   \              0x6F 0x69    
   \              0x6E 0x74    
   \              0x20 0x44    
   \              0x69 0x73    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x64 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
     50          const char UnityStrErrDouble[]                     = "Unity Double Precision Disabled";
   \                     UnityStrErrDouble:
   \   00000000   0x55 0x6E          DC8 "Unity Double Precision Disabled"
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x44 0x6F    
   \              0x75 0x62    
   \              0x6C 0x65    
   \              0x20 0x50    
   \              0x72 0x65    
   \              0x63 0x69    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x20 0x44    
   \              0x69 0x73    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x64 0x00    

   \                                 In section .rodata, align 4, keep-with-next
     51          const char UnityStrErr64[]                         = "Unity 64-bit Support Disabled";
   \                     UnityStrErr64:
   \   00000000   0x55 0x6E          DC8 "Unity 64-bit Support Disabled"
   \              0x69 0x74    
   \              0x79 0x20    
   \              0x36 0x34    
   \              0x2D 0x62    
   \              0x69 0x74    
   \              0x20 0x53    
   \              0x75 0x70    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x20 0x44    
   \              0x69 0x73    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x64 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
     52          static const char UnityStrBreaker[]                = "-----------------------";
   \                     UnityStrBreaker:
   \   00000000   0x2D 0x2D          DC8 "-----------------------"
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x00    

   \                                 In section .text, align 4, keep-with-next
     53          static const char UnityStrResultsTests[]           = " Tests ";
   \                     UnityStrResultsTests:
   \   00000000   0x20 0x54          DC8 " Tests "
   \              0x65 0x73    
   \              0x74 0x73    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
     54          static const char UnityStrResultsFailures[]        = " Failures ";
   \                     UnityStrResultsFailures:
   \   00000000   0x20 0x46          DC8 " Failures "
   \              0x61 0x69    
   \              0x6C 0x75    
   \              0x72 0x65    
   \              0x73 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
     55          static const char UnityStrResultsIgnored[]         = " Ignored ";
   \                     UnityStrResultsIgnored:
   \   00000000   0x20 0x49          DC8 " Ignored "
   \              0x67 0x6E    
   \              0x6F 0x72    
   \              0x65 0x64    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
     56          static const char UnityStrDetail1Name[]            = UNITY_DETAIL1_NAME " ";
   \                     UnityStrDetail1Name:
   \   00000000   0x46 0x75          DC8 "Function "
   \              0x6E 0x63    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
     57          static const char UnityStrDetail2Name[]            = " " UNITY_DETAIL2_NAME " ";
   \                     UnityStrDetail2Name:
   \   00000000   0x20 0x41          DC8 " Argument "
   \              0x72 0x67    
   \              0x75 0x6D    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0
     58          
     59          #ifdef UNITY_FLOAT_NEEDS_ZERO
     60          /* Dividing by these constants produces +/- infinity.
     61           * The rationale is given in UnityAssertFloatIsInf's body. */
     62          static const _UF f_zero = 0.0f;
     63          #endif
     64          
     65          /* compiler-generic print formatting masks */

   \                                 In section .text, align 8, keep-with-next
     66          static const _U_UINT UnitySizeMask[] =
   \                     UnitySizeMask:
   \   00000000   0x000000FF         DC32 255, 0, 65535, 0, 65535, 0, 4294967295, 0, 4294967295, 0
   \              0x00000000   
   \              0x0000FFFF   
   \              0x00000000   
   \              0x0000FFFF   
   \              0x00000000   
   \              0xFFFFFFFF   
   \              0x00000000   
   \              0xFFFFFFFF   
   \              0x00000000   
   \   00000028   0xFFFFFFFF         DC32 4294967295, 0, 4294967295, 0, 4294967295, 4294967295
   \              0x00000000   
   \              0xFFFFFFFF   
   \              0x00000000   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
     67          {
     68              255u,         /* 0xFF */
     69              65535u,       /* 0xFFFF */
     70              65535u,
     71              4294967295u,  /* 0xFFFFFFFF */
     72              4294967295u,
     73              4294967295u,
     74              4294967295u
     75          #ifdef UNITY_SUPPORT_64
     76              ,0xFFFFFFFFFFFFFFFFull
     77          #endif
     78          };
     79          
     80          /*-----------------------------------------------
     81           * Pretty Printers & Test Result Output Handlers
     82           *-----------------------------------------------*/
     83          

   \                                 In section .text, align 2, keep-with-next
     84          void UnityPrint(const char* string)
     85          {
   \                     UnityPrint: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     86              const char* pch = string;
   \   00000002   0x0004             MOVS     R4,R0
     87          
     88              if (pch != NULL)
   \   00000004   0xD109             BNE      ??UnityPrint_0
     89              {
     90                  while (*pch)
     91                  {
     92                      /* printable characters plus CR & LF are printed */
     93                      if ((*pch <= 126) && (*pch >= 32))
     94                      {
     95                          UNITY_OUTPUT_CHAR(*pch);
     96                      }
     97                      /* write escaped carriage returns */
     98                      else if (*pch == 13)
     99                      {
    100                          UNITY_OUTPUT_CHAR('\\');
    101                          UNITY_OUTPUT_CHAR('r');
    102                      }
    103                      /* write escaped line feeds */
    104                      else if (*pch == 10)
    105                      {
    106                          UNITY_OUTPUT_CHAR('\\');
    107                          UNITY_OUTPUT_CHAR('n');
    108                      }
    109                      /* unprintable characters are shown as codes */
    110                      else
    111                      {
    112                          UNITY_OUTPUT_CHAR('\\');
    113                          UnityPrintNumberHex((_U_UINT)*pch, 2);
    114                      }
    115                      pch++;
    116                  }
    117              }
    118          }
   \                     ??UnityPrint_1: (+1)
   \   00000006   0xBD10             POP      {R4,PC}          ;; return
   \                     ??UnityPrint_2: (+1)
   \   00000008   0x205C             MOVS     R0,#+92
   \   0000000A   0x.... 0x....      BL       utest_safe_putc
   \   0000000E   0x2202             MOVS     R2,#+2
   \   00000010   0x7820             LDRB     R0,[R4, #+0]
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x.... 0x....      BL       UnityPrintNumberHex
   \                     ??UnityPrint_3: (+1)
   \   00000018   0x1C64             ADDS     R4,R4,#+1
   \                     ??UnityPrint_0: (+1)
   \   0000001A   0x7821             LDRB     R1,[R4, #+0]
   \   0000001C   0x0008             MOVS     R0,R1
   \   0000001E   0xD0F2             BEQ      ??UnityPrint_1
   \   00000020   0x3920             SUBS     R1,R1,#+32
   \   00000022   0x295F             CMP      R1,#+95
   \   00000024   0xD202             BCS      ??UnityPrint_4
   \                     ??UnityPrint_5: (+1)
   \   00000026   0x.... 0x....      BL       utest_safe_putc
   \   0000002A   0xE7F5             B        ??UnityPrint_3
   \                     ??UnityPrint_4: (+1)
   \   0000002C   0x280D             CMP      R0,#+13
   \   0000002E   0xD104             BNE      ??UnityPrint_6
   \   00000030   0x205C             MOVS     R0,#+92
   \   00000032   0x.... 0x....      BL       utest_safe_putc
   \   00000036   0x2072             MOVS     R0,#+114
   \   00000038   0xE7F5             B.N      ??UnityPrint_5
   \                     ??UnityPrint_6: (+1)
   \   0000003A   0x280A             CMP      R0,#+10
   \   0000003C   0xD1E4             BNE      ??UnityPrint_2
   \   0000003E   0x205C             MOVS     R0,#+92
   \   00000040   0x.... 0x....      BL       utest_safe_putc
   \   00000044   0x206E             MOVS     R0,#+110
   \   00000046   0xE7EE             B.N      ??UnityPrint_5
    119          
    120          void UnityPrintLen(const char* string, const _UU32 length);

   \                                 In section .text, align 2, keep-with-next
    121          void UnityPrintLen(const char* string, const _UU32 length)
    122          {
   \                     UnityPrintLen: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000E             MOVS     R6,R1
    123              const char* pch = string;
   \   00000006   0x002C             MOVS     R4,R5
    124          
    125              if (pch != NULL)
   \   00000008   0xD109             BNE      ??UnityPrintLen_0
    126              {
    127                  while (*pch && (_UU32)(pch - string) < length)
    128                  {
    129                      /* printable characters plus CR & LF are printed */
    130                      if ((*pch <= 126) && (*pch >= 32))
    131                      {
    132                          UNITY_OUTPUT_CHAR(*pch);
    133                      }
    134                      /* write escaped carriage returns */
    135                      else if (*pch == 13)
    136                      {
    137                          UNITY_OUTPUT_CHAR('\\');
    138                          UNITY_OUTPUT_CHAR('r');
    139                      }
    140                      /* write escaped line feeds */
    141                      else if (*pch == 10)
    142                      {
    143                          UNITY_OUTPUT_CHAR('\\');
    144                          UNITY_OUTPUT_CHAR('n');
    145                      }
    146                      /* unprintable characters are shown as codes */
    147                      else
    148                      {
    149                          UNITY_OUTPUT_CHAR('\\');
    150                          UnityPrintNumberHex((_U_UINT)*pch, 2);
    151                      }
    152                      pch++;
    153                  }
    154              }
    155          }
   \                     ??UnityPrintLen_1: (+1)
   \   0000000A   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??UnityPrintLen_2: (+1)
   \   0000000C   0x205C             MOVS     R0,#+92
   \   0000000E   0x.... 0x....      BL       utest_safe_putc
   \   00000012   0x2202             MOVS     R2,#+2
   \   00000014   0x7820             LDRB     R0,[R4, #+0]
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x.... 0x....      BL       UnityPrintNumberHex
   \                     ??UnityPrintLen_3: (+1)
   \   0000001C   0x1C64             ADDS     R4,R4,#+1
   \                     ??UnityPrintLen_0: (+1)
   \   0000001E   0x7821             LDRB     R1,[R4, #+0]
   \   00000020   0x0008             MOVS     R0,R1
   \   00000022   0xD0F2             BEQ      ??UnityPrintLen_1
   \   00000024   0x1B60             SUBS     R0,R4,R5
   \   00000026   0x42B0             CMP      R0,R6
   \   00000028   0xD2EF             BCS      ??UnityPrintLen_1
   \   0000002A   0x0008             MOVS     R0,R1
   \   0000002C   0x3920             SUBS     R1,R1,#+32
   \   0000002E   0x295F             CMP      R1,#+95
   \   00000030   0xD202             BCS      ??UnityPrintLen_4
   \                     ??UnityPrintLen_5: (+1)
   \   00000032   0x.... 0x....      BL       utest_safe_putc
   \   00000036   0xE7F1             B        ??UnityPrintLen_3
   \                     ??UnityPrintLen_4: (+1)
   \   00000038   0x280D             CMP      R0,#+13
   \   0000003A   0xD104             BNE      ??UnityPrintLen_6
   \   0000003C   0x205C             MOVS     R0,#+92
   \   0000003E   0x.... 0x....      BL       utest_safe_putc
   \   00000042   0x2072             MOVS     R0,#+114
   \   00000044   0xE7F5             B.N      ??UnityPrintLen_5
   \                     ??UnityPrintLen_6: (+1)
   \   00000046   0x280A             CMP      R0,#+10
   \   00000048   0xD1E0             BNE      ??UnityPrintLen_2
   \   0000004A   0x205C             MOVS     R0,#+92
   \   0000004C   0x.... 0x....      BL       utest_safe_putc
   \   00000050   0x206E             MOVS     R0,#+110
   \   00000052   0xE7EE             B.N      ??UnityPrintLen_5
    156          
    157          /*-----------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    158          void UnityPrintNumberByStyle(const _U_SINT number, const UNITY_DISPLAY_STYLE_T style)
    159          {
   \                     UnityPrintNumberByStyle: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    160              if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
   \   00000002   0x06D3             LSLS     R3,R2,#+27
   \   00000004   0xD502             BPL      ??UnityPrintNumberByStyle_0
    161              {
    162                  UnityPrintNumber(number);
   \   00000006   0x.... 0x....      BL       UnityPrintNumber
   \   0000000A   0xBD10             POP      {R4,PC}
    163              }
    164              else if ((style & UNITY_DISPLAY_RANGE_UINT) == UNITY_DISPLAY_RANGE_UINT)
   \                     ??UnityPrintNumberByStyle_0: (+1)
   \   0000000C   0x0693             LSLS     R3,R2,#+26
   \   0000000E   0xD50D             BPL      ??UnityPrintNumberByStyle_1
    165              {
    166                  UnityPrintNumberUnsigned(  (_U_UINT)number  &  UnitySizeMask[((_U_UINT)style & (_U_UINT)0x0F) - 1]  );
   \   00000010   0x....             ADR.N    R3,UnitySizeMask
   \   00000012   0x00D2             LSLS     R2,R2,#+3
   \   00000014   0x2478             MOVS     R4,#+120
   \   00000016   0x4014             ANDS     R4,R4,R2
   \   00000018   0x191A             ADDS     R2,R3,R4
   \   0000001A   0x3A08             SUBS     R2,R2,#+8
   \   0000001C   0xCA0C             LDM      R2,{R2,R3}
   \   0000001E   0x4002             ANDS     R2,R2,R0
   \   00000020   0x400B             ANDS     R3,R3,R1
   \   00000022   0x0010             MOVS     R0,R2
   \   00000024   0x0019             MOVS     R1,R3
   \   00000026   0x.... 0x....      BL       UnityPrintNumberUnsigned
   \   0000002A   0xBD10             POP      {R4,PC}
    167              }
    168              else
    169              {
    170                  UnityPrintNumberHex((_U_UINT)number, (char)((style & 0x000F) << 1));
   \                     ??UnityPrintNumberByStyle_1: (+1)
   \   0000002C   0x0053             LSLS     R3,R2,#+1
   \   0000002E   0x221E             MOVS     R2,#+30
   \   00000030   0x401A             ANDS     R2,R2,R3
   \   00000032   0x.... 0x....      BL       UnityPrintNumberHex
    171              }
    172          }
   \   00000036   0xBD10             POP      {R4,PC}          ;; return
    173          
    174          /*-----------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    175          void UnityPrintNumber(const _U_SINT number_to_print)
    176          {
   \                     UnityPrintNumber: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    177              _U_UINT number = (_U_UINT)number_to_print;
    178          
    179              if (number_to_print < 0)
   \   00000006   0x2D00             CMP      R5,#+0
   \   00000008   0xDA08             BGE      ??UnityPrintNumber_0
    180              {
    181                  /* A negative number, including MIN negative */
    182                  UNITY_OUTPUT_CHAR('-');
   \   0000000A   0x202D             MOVS     R0,#+45
   \   0000000C   0x.... 0x....      BL       utest_safe_putc
    183                  number = (_U_UINT)(-number_to_print);
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x1B00             SUBS     R0,R0,R4
   \   00000016   0x41A9             SBCS     R1,R1,R5
   \   00000018   0x0004             MOVS     R4,R0
   \   0000001A   0x000D             MOVS     R5,R1
    184              }
    185              UnityPrintNumberUnsigned(number);
   \                     ??UnityPrintNumber_0: (+1)
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x0029             MOVS     R1,R5
   \   00000020   0x.... 0x....      BL       UnityPrintNumberUnsigned
    186          }
   \   00000024   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    187          
    188          /*-----------------------------------------------
    189           * basically do an itoa using as little ram as possible */

   \                                 In section .text, align 2, keep-with-next
    190          void UnityPrintNumberUnsigned(const _U_UINT number)
    191          {
   \                     UnityPrintNumberUnsigned: (+1)
   \   00000000   0xB53B             PUSH     {R0,R1,R3-R5,LR}
    192              _U_UINT divisor = 1;
   \   00000002   0x2401             MOVS     R4,#+1
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0xE007             B        ??UnityPrintNumberUnsigned_0
    193          
    194              /* figure out initial divisor */
    195              while (number / divisor > 9)
    196              {
    197                  divisor *= 10;
   \                     ??UnityPrintNumberUnsigned_1: (+1)
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0x220A             MOVS     R2,#+10
   \   0000000E   0x2300             MOVS     R3,#+0
   \   00000010   0x.... 0x....      BL       __aeabi_lmul
   \   00000014   0x0004             MOVS     R4,R0
   \   00000016   0x000D             MOVS     R5,R1
    198              }
   \                     ??UnityPrintNumberUnsigned_0: (+1)
   \   00000018   0x4668             MOV      R0,SP
   \   0000001A   0xC803             LDM      R0,{R0,R1}
   \   0000001C   0x0022             MOVS     R2,R4
   \   0000001E   0x002B             MOVS     R3,R5
   \   00000020   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000024   0x2900             CMP      R1,#+0
   \   00000026   0xD8EF             BHI      ??UnityPrintNumberUnsigned_1
   \   00000028   0x280A             CMP      R0,#+10
   \   0000002A   0xD2ED             BCS      ??UnityPrintNumberUnsigned_1
    199          
    200              /* now mod and print, then divide divisor */
    201              do
    202              {
    203                  UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   \                     ??UnityPrintNumberUnsigned_2: (+1)
   \   0000002C   0x4668             MOV      R0,SP
   \   0000002E   0xC803             LDM      R0,{R0,R1}
   \   00000030   0x0022             MOVS     R2,R4
   \   00000032   0x002B             MOVS     R3,R5
   \   00000034   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000038   0x220A             MOVS     R2,#+10
   \   0000003A   0x2300             MOVS     R3,#+0
   \   0000003C   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000040   0x0010             MOVS     R0,R2
   \   00000042   0x3030             ADDS     R0,R0,#+48
   \   00000044   0xB2C0             UXTB     R0,R0
   \   00000046   0x.... 0x....      BL       utest_safe_putc
    204                  divisor /= 10;
   \   0000004A   0x0020             MOVS     R0,R4
   \   0000004C   0x0029             MOVS     R1,R5
   \   0000004E   0x220A             MOVS     R2,#+10
   \   00000050   0x2300             MOVS     R3,#+0
   \   00000052   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000056   0x0004             MOVS     R4,R0
   \   00000058   0x000D             MOVS     R5,R1
    205              }
    206              while (divisor > 0);
   \   0000005A   0xD1E7             BNE      ??UnityPrintNumberUnsigned_2
   \   0000005C   0x2C00             CMP      R4,#+0
   \   0000005E   0xD1E5             BNE      ??UnityPrintNumberUnsigned_2
    207          }
   \   00000060   0xB003             ADD      SP,SP,#+12
   \   00000062   0xBD30             POP      {R4,R5,PC}       ;; return
    208          
    209          /*-----------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    210          void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
    211          {
   \                     UnityPrintNumberHex: (+1)
   \   00000000   0xB55B             PUSH     {R0,R1,R3,R4,R6,LR}
    212              _U_UINT nibble;
    213              char nibbles = nibbles_to_print;
   \   00000002   0x0014             MOVS     R4,R2
    214              UNITY_OUTPUT_CHAR('0');
   \   00000004   0x2030             MOVS     R0,#+48
   \   00000006   0x.... 0x....      BL       utest_safe_putc
    215              UNITY_OUTPUT_CHAR('x');
   \   0000000A   0x2078             MOVS     R0,#+120
   \   0000000C   0x.... 0x....      BL       utest_safe_putc
   \   00000010   0x260F             MOVS     R6,#+15
   \   00000012   0xE003             B        ??UnityPrintNumberHex_0
    216          
    217              while (nibbles > 0)
    218              {
    219                  nibble = (number >> (--nibbles << 2)) & 0x0000000F;
    220                  if (nibble <= 9)
    221                  {
    222                      UNITY_OUTPUT_CHAR((char)('0' + nibble));
   \                     ??UnityPrintNumberHex_1: (+1)
   \   00000014   0x3030             ADDS     R0,R0,#+48
   \                     ??UnityPrintNumberHex_2: (+1)
   \   00000016   0xB2C0             UXTB     R0,R0
   \   00000018   0x.... 0x....      BL       utest_safe_putc
    223                  }
   \                     ??UnityPrintNumberHex_0: (+1)
   \   0000001C   0x0620             LSLS     R0,R4,#+24
   \   0000001E   0xD00D             BEQ      ??UnityPrintNumberHex_3
   \   00000020   0x1E64             SUBS     R4,R4,#+1
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0xC803             LDM      R0,{R0,R1}
   \   00000026   0x00A2             LSLS     R2,R4,#+2
   \   00000028   0x.... 0x....      BL       __aeabi_llsr
   \   0000002C   0x4030             ANDS     R0,R0,R6
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0x2900             CMP      R1,#+0
   \   00000032   0xD801             BHI      ??UnityPrintNumberHex_4
   \   00000034   0x280A             CMP      R0,#+10
   \   00000036   0xD3ED             BCC      ??UnityPrintNumberHex_1
    224                  else
    225                  {
    226                      UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   \                     ??UnityPrintNumberHex_4: (+1)
   \   00000038   0x3037             ADDS     R0,R0,#+55
   \   0000003A   0xE7EC             B        ??UnityPrintNumberHex_2
    227                  }
    228              }
    229          }
   \                     ??UnityPrintNumberHex_3: (+1)
   \   0000003C   0xB003             ADD      SP,SP,#+12
   \   0000003E   0xBD50             POP      {R4,R6,PC}       ;; return
    230          
    231          /*-----------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    232          void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
    233          {
   \                     UnityPrintMask: (+1)
   \   00000000   0xB558             PUSH     {R3,R4,R6,LR}
   \   00000002   0xB40F             PUSH     {R0-R3}
    234              _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
   \   00000004   0x2480             MOVS     R4,#+128
   \   00000006   0x0624             LSLS     R4,R4,#+24       ;; #-2147483648
    235              _US32 i;
    236          
    237              for (i = 0; i < UNITY_INT_WIDTH; i++)
   \   00000008   0x2620             MOVS     R6,#+32
    238              {
    239                  if (current_bit & mask)
   \                     ??UnityPrintMask_0: (+1)
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0xC803             LDM      R0,{R0,R1}
   \   0000000E   0x4020             ANDS     R0,R0,R4
   \   00000010   0xD007             BEQ      ??UnityPrintMask_1
    240                  {
    241                      if (current_bit & number)
   \   00000012   0xA802             ADD      R0,SP,#+8
   \   00000014   0xC803             LDM      R0,{R0,R1}
   \   00000016   0x4020             ANDS     R0,R0,R4
   \   00000018   0xD001             BEQ      ??UnityPrintMask_2
    242                      {
    243                          UNITY_OUTPUT_CHAR('1');
   \   0000001A   0x2031             MOVS     R0,#+49
   \   0000001C   0xE002             B        ??UnityPrintMask_3
    244                      }
    245                      else
    246                      {
    247                          UNITY_OUTPUT_CHAR('0');
   \                     ??UnityPrintMask_2: (+1)
   \   0000001E   0x2030             MOVS     R0,#+48
   \   00000020   0xE000             B        ??UnityPrintMask_3
    248                      }
    249                  }
    250                  else
    251                  {
    252                      UNITY_OUTPUT_CHAR('.');
   \                     ??UnityPrintMask_1: (+1)
   \   00000022   0x202E             MOVS     R0,#+46
   \                     ??UnityPrintMask_3: (+1)
   \   00000024   0x.... 0x....      BL       utest_safe_putc
    253                  }
    254                  current_bit = current_bit >> 1;
   \   00000028   0x0864             LSRS     R4,R4,#+1
    255              }
   \   0000002A   0x1E76             SUBS     R6,R6,#+1
   \   0000002C   0xD1ED             BNE      ??UnityPrintMask_0
    256          }
   \   0000002E   0xB005             ADD      SP,SP,#+20
   \   00000030   0xBD50             POP      {R4,R6,PC}       ;; return
    257          
    258          /*-----------------------------------------------*/
    259          #ifdef UNITY_FLOAT_VERBOSE
    260          #include <stdio.h>
    261          
    262          #ifndef UNITY_VERBOSE_NUMBER_MAX_LENGTH
    263          # ifdef UNITY_DOUBLE_VERBOSE
    264          #  define UNITY_VERBOSE_NUMBER_MAX_LENGTH 317
    265          # else
    266          #  define UNITY_VERBOSE_NUMBER_MAX_LENGTH 47
    267          # endif
    268          #endif
    269          
    270          void UnityPrintFloat(_UF number)
    271          {
    272              char TempBuffer[UNITY_VERBOSE_NUMBER_MAX_LENGTH + 1];
    273              snprintf(TempBuffer, sizeof(TempBuffer), "%.6f", number);
    274              UnityPrint(TempBuffer);
    275          }
    276          #endif
    277          
    278          /*-----------------------------------------------*/
    279          
    280          void UnityPrintFail(void);

   \                                 In section .text, align 2, keep-with-next
    281          void UnityPrintFail(void)
    282          {
   \                     UnityPrintFail: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    283              UnityPrint(UnityStrFail);
   \   00000002   0x....             LDR      R0,??DataTable41
   \   00000004   0x.... 0x....      BL       UnityPrint
    284          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    285          
    286          void UnityPrintOk(void);

   \                                 In section .text, align 2, keep-with-next
    287          void UnityPrintOk(void)
    288          {
   \                     UnityPrintOk: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    289              UnityPrint(UnityStrOk);
   \   00000002   0x....             LDR      R0,??DataTable41_1
   \   00000004   0x.... 0x....      BL       UnityPrint
    290          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    291          
    292          /*-----------------------------------------------*/
    293          static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line);

   \                                 In section .text, align 2, keep-with-next
    294          static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
    295          {
   \                     UnityTestResultsBegin: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0014             MOVS     R4,R2
   \   00000004   0x001D             MOVS     R5,R3
    296          #ifndef UNITY_FIXTURES
    297              UnityPrint(file);
   \   00000006   0x.... 0x....      BL       UnityPrint
    298              UNITY_OUTPUT_CHAR(':');
   \   0000000A   0x203A             MOVS     R0,#+58
   \   0000000C   0x.... 0x....      BL       utest_safe_putc
    299              UnityPrintNumber((_U_SINT)line);
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x0029             MOVS     R1,R5
   \   00000014   0x.... 0x....      BL       UnityPrintNumber
    300              UNITY_OUTPUT_CHAR(':');
   \   00000018   0x203A             MOVS     R0,#+58
   \   0000001A   0x.... 0x....      BL       utest_safe_putc
    301              UnityPrint(Unity.CurrentTestName);
   \   0000001E   0x....             LDR      R0,??DataTable41_2
   \   00000020   0x6840             LDR      R0,[R0, #+4]
   \   00000022   0x.... 0x....      BL       UnityPrint
    302              UNITY_OUTPUT_CHAR(':');
   \   00000026   0x203A             MOVS     R0,#+58
   \   00000028   0x.... 0x....      BL       utest_safe_putc
    303          #else
    304              UNITY_UNUSED(file);
    305              UNITY_UNUSED(line);
    306          #endif
    307          }
   \   0000002C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    308          
    309          /*-----------------------------------------------*/
    310          static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line);
    311          static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
    312          {
    313          #ifndef UNITY_FIXTURES
    314              UnityTestResultsBegin(Unity.TestFile, line);
    315          #else
    316              UNITY_UNUSED(line);
    317          #endif
    318              UnityPrint(UnityStrFail);
    319              UNITY_OUTPUT_CHAR(':');
    320          }
    321          
    322          /*-----------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    323          void UnityConcludeTest(void)
    324          {
   \                     UnityConcludeTest: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    325              if (Unity.CurrentTestIgnored)
   \   00000002   0x....             LDR      R4,??DataTable41_2
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x3038             ADDS     R0,R0,#+56
   \   00000008   0xC803             LDM      R0,{R0,R1}
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD101             BNE      ??UnityConcludeTest_0
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD008             BEQ      ??UnityConcludeTest_1
    326              {
    327                  Unity.TestIgnores++;
   \                     ??UnityConcludeTest_0: (+1)
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x3028             ADDS     R0,R0,#+40
   \   00000016   0xC803             LDM      R0,{R0,R1}
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x4151             ADCS     R1,R1,R2
   \   0000001E   0x0022             MOVS     R2,R4
   \   00000020   0x3228             ADDS     R2,R2,#+40
   \   00000022   0xE019             B        ??UnityConcludeTest_2
    328              }
    329              else if (!Unity.CurrentTestFailed)
   \                     ??UnityConcludeTest_1: (+1)
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x3030             ADDS     R0,R0,#+48
   \   00000028   0xC803             LDM      R0,{R0,R1}
   \   0000002A   0x2900             CMP      R1,#+0
   \   0000002C   0xD10C             BNE      ??UnityConcludeTest_3
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD10A             BNE      ??UnityConcludeTest_3
    330              {
    331                  UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0x3010             ADDS     R0,R0,#+16
   \   00000036   0xC80C             LDM      R0!,{R2,R3}
   \   00000038   0x6820             LDR      R0,[R4, #+0]
   \   0000003A   0x.... 0x....      BL       UnityTestResultsBegin
    332                  UnityPrint(UnityStrPass);
   \   0000003E   0xBF00             Nop      
   \   00000040   0x....             ADR.N    R0,UnityStrPass
   \   00000042   0x.... 0x....      BL       UnityPrint
   \   00000046   0xE008             B        ??UnityConcludeTest_4
    333              }
    334              else
    335              {
    336                  Unity.TestFailures++;
   \                     ??UnityConcludeTest_3: (+1)
   \   00000048   0x0020             MOVS     R0,R4
   \   0000004A   0x3020             ADDS     R0,R0,#+32
   \   0000004C   0xC803             LDM      R0,{R0,R1}
   \   0000004E   0x2200             MOVS     R2,#+0
   \   00000050   0x1C40             ADDS     R0,R0,#+1
   \   00000052   0x4151             ADCS     R1,R1,R2
   \   00000054   0x0022             MOVS     R2,R4
   \   00000056   0x3220             ADDS     R2,R2,#+32
   \                     ??UnityConcludeTest_2: (+1)
   \   00000058   0xC203             STM      R2!,{R0,R1}
    337              }
    338          
    339              Unity.CurrentTestFailed = 0;
   \                     ??UnityConcludeTest_4: (+1)
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x2100             MOVS     R1,#+0
   \   0000005E   0x0022             MOVS     R2,R4
   \   00000060   0x3230             ADDS     R2,R2,#+48
   \   00000062   0xC203             STM      R2!,{R0,R1}
    340              Unity.CurrentTestIgnored = 0;
   \   00000064   0x0022             MOVS     R2,R4
   \   00000066   0x3238             ADDS     R2,R2,#+56
   \   00000068   0xC203             STM      R2!,{R0,R1}
    341              UNITY_PRINT_EOL();
   \   0000006A   0x200A             MOVS     R0,#+10
   \   0000006C   0x.... 0x....      BL       utest_safe_putc
    342              UNITY_OUTPUT_FLUSH();
   \   00000070   0x....             LDR      R0,??DataTable41_3
   \   00000072   0x.... 0x....      BL       fflush
    343          }
   \   00000076   0xBD10             POP      {R4,PC}          ;; return
    344          
    345          /*-----------------------------------------------*/
    346          static void UnityAddMsgIfSpecified(const char* msg);

   \                                 In section .text, align 2, keep-with-next
    347          static void UnityAddMsgIfSpecified(const char* msg)
    348          {
   \                     UnityAddMsgIfSpecified: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    349              if (msg)
   \   00000004   0xD01C             BEQ      ??UnityAddMsgIfSpecified_0
    350              {
    351                  UnityPrint(UnityStrSpacer);
   \   00000006   0x....             LDR      R5,??DataTable41_4
   \   00000008   0x0028             MOVS     R0,R5
   \   0000000A   0x.... 0x....      BL       UnityPrint
    352          #ifndef UNITY_EXCLUDE_DETAILS
    353                  if (Unity.CurrentDetail1)
   \   0000000E   0x....             LDR      R6,??DataTable41_2
   \   00000010   0x68B0             LDR      R0,[R6, #+8]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD011             BEQ      ??UnityAddMsgIfSpecified_1
    354                  {
    355                      UnityPrint(UnityStrDetail1Name);
   \   00000016   0x....             LDR      R0,??DataTable41_5
   \   00000018   0x.... 0x....      BL       UnityPrint
    356                      UnityPrint(Unity.CurrentDetail1);
   \   0000001C   0x68B0             LDR      R0,[R6, #+8]
   \   0000001E   0x.... 0x....      BL       UnityPrint
    357                      if (Unity.CurrentDetail2)
   \   00000022   0x68F0             LDR      R0,[R6, #+12]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD005             BEQ      ??UnityAddMsgIfSpecified_2
    358                      {
    359                          UnityPrint(UnityStrDetail2Name);
   \   00000028   0x....             LDR      R0,??DataTable41_6
   \   0000002A   0x.... 0x....      BL       UnityPrint
    360                          UnityPrint(Unity.CurrentDetail2);
   \   0000002E   0x68F0             LDR      R0,[R6, #+12]
   \   00000030   0x.... 0x....      BL       UnityPrint
    361                      }
    362                      UnityPrint(UnityStrSpacer);
   \                     ??UnityAddMsgIfSpecified_2: (+1)
   \   00000034   0x0028             MOVS     R0,R5
   \   00000036   0x.... 0x....      BL       UnityPrint
    363                  }
    364          #endif
    365                  UnityPrint(msg);
   \                     ??UnityAddMsgIfSpecified_1: (+1)
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x.... 0x....      BL       UnityPrint
    366              }
    367          }
   \                     ??UnityAddMsgIfSpecified_0: (+1)
   \   00000040   0xBD70             POP      {R4-R6,PC}       ;; return
    368          
    369          /*-----------------------------------------------*/
    370          static void UnityPrintExpectedAndActualStrings(const char* expected, const char* actual);

   \                                 In section .text, align 2, keep-with-next
    371          static void UnityPrintExpectedAndActualStrings(const char* expected, const char* actual)
    372          {
   \                     UnityPrintExpectedAndActualStrings: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    373              UnityPrint(UnityStrExpected);
   \   00000006   0x....             LDR      R0,??DataTable41_7
   \   00000008   0x.... 0x....      BL       UnityPrint
    374              if (expected != NULL)
   \   0000000C   0x2D00             CMP      R5,#+0
   \   0000000E   0xD009             BEQ      ??UnityPrintExpectedAndActualStrings_0
    375              {
    376                  UNITY_OUTPUT_CHAR('\'');
   \   00000010   0x2027             MOVS     R0,#+39
   \   00000012   0x.... 0x....      BL       utest_safe_putc
    377                  UnityPrint(expected);
   \   00000016   0x0028             MOVS     R0,R5
   \   00000018   0x.... 0x....      BL       UnityPrint
    378                  UNITY_OUTPUT_CHAR('\'');
   \   0000001C   0x2027             MOVS     R0,#+39
   \   0000001E   0x.... 0x....      BL       utest_safe_putc
   \   00000022   0xE002             B        ??UnityPrintExpectedAndActualStrings_1
    379              }
    380              else
    381              {
    382                UnityPrint(UnityStrNull);
   \                     ??UnityPrintExpectedAndActualStrings_0: (+1)
   \   00000024   0x....             LDR      R0,??DataTable41_8
   \   00000026   0x.... 0x....      BL       UnityPrint
    383              }
    384              UnityPrint(UnityStrWas);
   \                     ??UnityPrintExpectedAndActualStrings_1: (+1)
   \   0000002A   0x....             LDR      R0,??DataTable41_9
   \   0000002C   0x.... 0x....      BL       UnityPrint
    385              if (actual != NULL)
   \   00000030   0x2C00             CMP      R4,#+0
   \   00000032   0xD009             BEQ      ??UnityPrintExpectedAndActualStrings_2
    386              {
    387                  UNITY_OUTPUT_CHAR('\'');
   \   00000034   0x2027             MOVS     R0,#+39
   \   00000036   0x.... 0x....      BL       utest_safe_putc
    388                  UnityPrint(actual);
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x.... 0x....      BL       UnityPrint
    389                  UNITY_OUTPUT_CHAR('\'');
   \   00000040   0x2027             MOVS     R0,#+39
   \   00000042   0x.... 0x....      BL       utest_safe_putc
   \   00000046   0xBD31             POP      {R0,R4,R5,PC}
    390              }
    391              else
    392              {
    393                UnityPrint(UnityStrNull);
   \                     ??UnityPrintExpectedAndActualStrings_2: (+1)
   \   00000048   0x....             LDR      R0,??DataTable41_8
   \   0000004A   0x.... 0x....      BL       UnityPrint
    394              }
    395          }
   \   0000004E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    396          
    397          /*-----------------------------------------------*/
    398          static void UnityPrintExpectedAndActualStringsLen(const char* expected, const char* actual, const _UU32 length)
    399          {
    400              UnityPrint(UnityStrExpected);
    401              if (expected != NULL)
    402              {
    403                  UNITY_OUTPUT_CHAR('\'');
    404                  UnityPrintLen(expected, length);
    405                  UNITY_OUTPUT_CHAR('\'');
    406              }
    407              else
    408              {
    409                UnityPrint(UnityStrNull);
    410              }
    411              UnityPrint(UnityStrWas);
    412              if (actual != NULL)
    413              {
    414                  UNITY_OUTPUT_CHAR('\'');
    415                  UnityPrintLen(actual, length);
    416                  UNITY_OUTPUT_CHAR('\'');
    417              }
    418              else
    419              {
    420                UnityPrint(UnityStrNull);
    421              }
    422          }
    423          
    424          
    425          
    426          /*-----------------------------------------------
    427           * Assertion & Control Helpers
    428           *-----------------------------------------------*/
    429          

   \                                 In section .text, align 4, keep-with-next
    430          static int UnityCheckArraysForNull(UNITY_INTERNAL_PTR expected, UNITY_INTERNAL_PTR actual, const UNITY_LINE_TYPE lineNumber, const char* msg)
    431          {
   \                     UnityCheckArraysForNull: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x000F             MOVS     R7,R1
   \   00000004   0x0014             MOVS     R4,R2
   \   00000006   0x001D             MOVS     R5,R3
   \   00000008   0x9E06             LDR      R6,[SP, #+24]
    432              /* return true if they are both NULL */
    433              if ((expected == NULL) && (actual == NULL))
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD119             BNE      ??UnityCheckArraysForNull_0
   \   0000000E   0x2F00             CMP      R7,#+0
   \   00000010   0xD101             BNE      ??UnityCheckArraysForNull_1
    434                  return 1;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xBDF2             POP      {R1,R4-R7,PC}
    435          
    436              /* throw error if just expected is NULL */
    437              if (expected == NULL)
    438              {
    439                  UnityTestResultsFailBegin(lineNumber);
   \                     ??UnityCheckArraysForNull_1: (+1)
   \   00000016   0x....             LDR      R0,??DataTable41_2
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x.... 0x....      BL       UnityTestResultsBegin
   \   0000001E   0x....             LDR      R0,??DataTable41
   \   00000020   0x.... 0x....      BL       UnityPrint
   \   00000024   0x203A             MOVS     R0,#+58
   \   00000026   0x.... 0x....      BL       utest_safe_putc
    440                  UnityPrint(UnityStrNullPointerForExpected);
   \   0000002A   0xBF00             Nop      
   \   0000002C   0x....             ADR.N    R0,UnityStrNullPointerForExpected
   \   0000002E   0x.... 0x....      BL       UnityPrint
    441                  UnityAddMsgIfSpecified(msg);
   \   00000032   0x0030             MOVS     R0,R6
   \   00000034   0x.... 0x....      BL       UnityAddMsgIfSpecified
    442                  UNITY_FAIL_AND_BAIL;
   \   00000038   0x200A             MOVS     R0,#+10
   \   0000003A   0x.... 0x....      BL       utest_safe_putc
   \   0000003E   0x.... 0x....      BL       utest_unity_assert_failure
    443              }
    444          
    445              /* throw error if just actual is NULL */
    446              if (actual == NULL)
   \                     ??UnityCheckArraysForNull_0: (+1)
   \   00000042   0x2F00             CMP      R7,#+0
   \   00000044   0xD117             BNE      ??UnityCheckArraysForNull_2
    447              {
    448                  UnityTestResultsFailBegin(lineNumber);
   \   00000046   0x0022             MOVS     R2,R4
   \   00000048   0x002B             MOVS     R3,R5
   \   0000004A   0x....             LDR      R0,??DataTable41_2
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0x.... 0x....      BL       UnityTestResultsBegin
   \   00000052   0x....             LDR      R0,??DataTable41
   \   00000054   0x.... 0x....      BL       UnityPrint
   \   00000058   0x203A             MOVS     R0,#+58
   \   0000005A   0x.... 0x....      BL       utest_safe_putc
    449                  UnityPrint(UnityStrNullPointerForActual);
   \   0000005E   0xBF00             Nop      
   \   00000060   0x....             ADR.N    R0,UnityStrNullPointerForActual
   \   00000062   0x.... 0x....      BL       UnityPrint
    450                  UnityAddMsgIfSpecified(msg);
   \   00000066   0x0030             MOVS     R0,R6
   \   00000068   0x.... 0x....      BL       UnityAddMsgIfSpecified
    451                  UNITY_FAIL_AND_BAIL;
   \   0000006C   0x200A             MOVS     R0,#+10
   \   0000006E   0x.... 0x....      BL       utest_safe_putc
   \   00000072   0x.... 0x....      BL       utest_unity_assert_failure
    452              }
    453          
    454              /* return false if neither is NULL */
    455              return 0;
   \                     ??UnityCheckArraysForNull_2: (+1)
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    456          }
    457          
    458          /*-----------------------------------------------
    459           * Assertion Functions
    460           *-----------------------------------------------*/
    461          

   \                                 In section .text, align 2, keep-with-next
    462          void UnityAssertBits(const _U_SINT mask,
    463                               const _U_SINT expected,
    464                               const _U_SINT actual,
    465                               const char* msg,
    466                               const UNITY_LINE_TYPE lineNumber)
    467          {
   \                     UnityAssertBits: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    468              UNITY_SKIP_EXECUTION;
   \   00000006   0x....             LDR      R6,??DataTable41_2
   \   00000008   0x0030             MOVS     R0,R6
   \   0000000A   0x3030             ADDS     R0,R0,#+48
   \   0000000C   0xC803             LDM      R0,{R0,R1}
   \   0000000E   0x2900             CMP      R1,#+0
   \   00000010   0xD139             BNE      ??UnityAssertBits_0
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD137             BNE      ??UnityAssertBits_0
   \   00000016   0x0030             MOVS     R0,R6
   \   00000018   0x3038             ADDS     R0,R0,#+56
   \   0000001A   0xC803             LDM      R0,{R0,R1}
   \   0000001C   0x2900             CMP      R1,#+0
   \   0000001E   0xD132             BNE      ??UnityAssertBits_0
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD130             BNE      ??UnityAssertBits_0
    469          
    470              if ((mask & expected) != (mask & actual))
   \   00000024   0x4668             MOV      R0,SP
   \   00000026   0xC803             LDM      R0,{R0,R1}
   \   00000028   0x4020             ANDS     R0,R0,R4
   \   0000002A   0x4029             ANDS     R1,R1,R5
   \   0000002C   0xAA06             ADD      R2,SP,#+24
   \   0000002E   0xCA0C             LDM      R2,{R2,R3}
   \   00000030   0x4022             ANDS     R2,R2,R4
   \   00000032   0x402B             ANDS     R3,R3,R5
   \   00000034   0x4299             CMP      R1,R3
   \   00000036   0xD101             BNE      ??UnityAssertBits_1
   \   00000038   0x4290             CMP      R0,R2
   \   0000003A   0xD024             BEQ      ??UnityAssertBits_0
    471              {
    472                  UnityTestResultsFailBegin(lineNumber);
   \                     ??UnityAssertBits_1: (+1)
   \   0000003C   0xA80A             ADD      R0,SP,#+40
   \   0000003E   0xC80C             LDM      R0!,{R2,R3}
   \   00000040   0x6830             LDR      R0,[R6, #+0]
   \   00000042   0x.... 0x....      BL       UnityTestResultsBegin
   \   00000046   0x....             LDR      R0,??DataTable41
   \   00000048   0x.... 0x....      BL       UnityPrint
   \   0000004C   0x203A             MOVS     R0,#+58
   \   0000004E   0x.... 0x....      BL       utest_safe_putc
    473                  UnityPrint(UnityStrExpected);
   \   00000052   0x....             LDR      R0,??DataTable41_7
   \   00000054   0x.... 0x....      BL       UnityPrint
    474                  UnityPrintMask((_U_UINT)mask, (_U_UINT)expected);
   \   00000058   0x4668             MOV      R0,SP
   \   0000005A   0xC80C             LDM      R0!,{R2,R3}
   \   0000005C   0x0020             MOVS     R0,R4
   \   0000005E   0x0029             MOVS     R1,R5
   \   00000060   0x.... 0x....      BL       UnityPrintMask
    475                  UnityPrint(UnityStrWas);
   \   00000064   0x....             LDR      R0,??DataTable41_9
   \   00000066   0x.... 0x....      BL       UnityPrint
    476                  UnityPrintMask((_U_UINT)mask, (_U_UINT)actual);
   \   0000006A   0xA806             ADD      R0,SP,#+24
   \   0000006C   0xC80C             LDM      R0!,{R2,R3}
   \   0000006E   0x0020             MOVS     R0,R4
   \   00000070   0x0029             MOVS     R1,R5
   \   00000072   0x.... 0x....      BL       UnityPrintMask
    477                  UnityAddMsgIfSpecified(msg);
   \   00000076   0x9808             LDR      R0,[SP, #+32]
   \   00000078   0x.... 0x....      BL       UnityAddMsgIfSpecified
    478                  UNITY_FAIL_AND_BAIL;
   \   0000007C   0x200A             MOVS     R0,#+10
   \   0000007E   0x.... 0x....      BL       utest_safe_putc
   \   00000082   0x.... 0x....      BL       utest_unity_assert_failure
    479              }
    480          }
   \                     ??UnityAssertBits_0: (+1)
   \   00000086   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    481          
    482          /*-----------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    483          void UnityAssertEqualNumber(const _U_SINT expected,
    484                                      const _U_SINT actual,
    485                                      const char* msg,
    486                                      const UNITY_LINE_TYPE lineNumber,
    487                                      const UNITY_DISPLAY_STYLE_T style)
    488          {
   \                     UnityAssertEqualNumber: (+1)
   \   00000000   0xB5DC             PUSH     {R2-R4,R6,R7,LR}
   \   00000002   0x0006             MOVS     R6,R0
   \   00000004   0x000F             MOVS     R7,R1
    489              UNITY_SKIP_EXECUTION;
   \   00000006   0x....             LDR      R4,??DataTable41_2
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x3030             ADDS     R0,R0,#+48
   \   0000000C   0xC803             LDM      R0,{R0,R1}
   \   0000000E   0x2900             CMP      R1,#+0
   \   00000010   0xD132             BNE      ??UnityAssertEqualNumber_0
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD130             BNE      ??UnityAssertEqualNumber_0
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x3038             ADDS     R0,R0,#+56
   \   0000001A   0xC803             LDM      R0,{R0,R1}
   \   0000001C   0x2900             CMP      R1,#+0
   \   0000001E   0xD12B             BNE      ??UnityAssertEqualNumber_0
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD129             BNE      ??UnityAssertEqualNumber_0
    490          
    491              if (expected != actual)
   \   00000024   0x4668             MOV      R0,SP
   \   00000026   0xC803             LDM      R0,{R0,R1}
   \   00000028   0x428F             CMP      R7,R1
   \   0000002A   0xD101             BNE      ??UnityAssertEqualNumber_1
   \   0000002C   0x4286             CMP      R6,R0
   \   0000002E   0xD023             BEQ      ??UnityAssertEqualNumber_0
    492              {
    493                  UnityTestResultsFailBegin(lineNumber);
   \                     ??UnityAssertEqualNumber_1: (+1)
   \   00000030   0xA808             ADD      R0,SP,#+32
   \   00000032   0xC80C             LDM      R0!,{R2,R3}
   \   00000034   0x6820             LDR      R0,[R4, #+0]
   \   00000036   0x.... 0x....      BL       UnityTestResultsBegin
   \   0000003A   0x....             LDR      R0,??DataTable41
   \   0000003C   0x.... 0x....      BL       UnityPrint
   \   00000040   0x203A             MOVS     R0,#+58
   \   00000042   0x.... 0x....      BL       utest_safe_putc
    494                  UnityPrint(UnityStrExpected);
   \   00000046   0x....             LDR      R0,??DataTable41_7
   \   00000048   0x.... 0x....      BL       UnityPrint
   \   0000004C   0x9C0A             LDR      R4,[SP, #+40]
    495                  UnityPrintNumberByStyle(expected, style);
   \   0000004E   0x0022             MOVS     R2,R4
   \   00000050   0x0030             MOVS     R0,R6
   \   00000052   0x0039             MOVS     R1,R7
   \   00000054   0x.... 0x....      BL       UnityPrintNumberByStyle
    496                  UnityPrint(UnityStrWas);
   \   00000058   0x....             LDR      R0,??DataTable41_9
   \   0000005A   0x.... 0x....      BL       UnityPrint
    497                  UnityPrintNumberByStyle(actual, style);
   \   0000005E   0x0022             MOVS     R2,R4
   \   00000060   0x4668             MOV      R0,SP
   \   00000062   0xC803             LDM      R0,{R0,R1}
   \   00000064   0x.... 0x....      BL       UnityPrintNumberByStyle
    498                  UnityAddMsgIfSpecified(msg);
   \   00000068   0x9806             LDR      R0,[SP, #+24]
   \   0000006A   0x.... 0x....      BL       UnityAddMsgIfSpecified
    499                  UNITY_FAIL_AND_BAIL;
   \   0000006E   0x200A             MOVS     R0,#+10
   \   00000070   0x.... 0x....      BL       utest_safe_putc
   \   00000074   0x.... 0x....      BL       utest_unity_assert_failure
    500              }
    501          }
   \                     ??UnityAssertEqualNumber_0: (+1)
   \   00000078   0xBDD3             POP      {R0,R1,R4,R6,R7,PC}  ;; return
    502          
    503          #define UnityPrintPointlessAndBail()       \
    504          {                                          \
    505              UnityTestResultsFailBegin(lineNumber); \
    506              UnityPrint(UnityStrPointless);         \
    507              UnityAddMsgIfSpecified(msg);           \
    508              UNITY_FAIL_AND_BAIL; }
    509          
    510          /*-----------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    511          void UnityAssertEqualIntArray(UNITY_INTERNAL_PTR expected,
    512                                        UNITY_INTERNAL_PTR actual,
    513                                        const _UU32 num_elements,
    514                                        const char* msg,
    515                                        const UNITY_LINE_TYPE lineNumber,
    516                                        const UNITY_DISPLAY_STYLE_T style)
    517          {
   \                     UnityAssertEqualIntArray: (+1)
   \   00000000   0xB5FC             PUSH     {R2-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    518              _UU32 elements = num_elements;
   \   00000008   0x9201             STR      R2,[SP, #+4]
    519              UNITY_INTERNAL_PTR ptr_exp = (UNITY_INTERNAL_PTR)expected;
   \   0000000A   0x9403             STR      R4,[SP, #+12]
    520              UNITY_INTERNAL_PTR ptr_act = (UNITY_INTERNAL_PTR)actual;
   \   0000000C   0x9502             STR      R5,[SP, #+8]
   \   0000000E   0x48C2             LDR      R0,??UnityAssertEqualIntArray_0
   \   00000010   0xC803             LDM      R0,{R0,R1}
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xD000             BEQ      .+4
   \   00000016   0xE1FB             B        ??UnityAssertEqualIntArray_1
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD000             BEQ      .+4
   \   0000001C   0xE1F8             B        ??UnityAssertEqualIntArray_1
   \   0000001E   0x48BF             LDR      R0,??UnityAssertEqualIntArray_0+0x4
   \   00000020   0xC803             LDM      R0,{R0,R1}
   \   00000022   0x2900             CMP      R1,#+0
   \   00000024   0xD000             BEQ      .+4
   \   00000026   0xE1F3             B        ??UnityAssertEqualIntArray_1
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD000             BEQ      .+4
   \   0000002C   0xE1F0             B        ??UnityAssertEqualIntArray_1
    521          
    522              UNITY_SKIP_EXECUTION;
    523          
    524              if (elements == 0)
   \   0000002E   0x9801             LDR      R0,[SP, #+4]
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD116             BNE      ??UnityAssertEqualIntArray_2
    525              {
    526                  UnityPrintPointlessAndBail();
   \   00000034   0xA80E             ADD      R0,SP,#+56
   \   00000036   0xC80C             LDM      R0!,{R2,R3}
   \   00000038   0x48B9             LDR      R0,??UnityAssertEqualIntArray_0+0x8
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x.... 0x....      BL       UnityTestResultsBegin
   \   00000040   0x48B8             LDR      R0,??UnityAssertEqualIntArray_0+0xC
   \   00000042   0x.... 0x....      BL       UnityPrint
   \   00000046   0x203A             MOVS     R0,#+58
   \   00000048   0x.... 0x....      BL       utest_safe_putc
   \   0000004C   0x48B6             LDR      R0,??UnityAssertEqualIntArray_0+0x10
   \   0000004E   0x.... 0x....      BL       UnityPrint
   \   00000052   0x9808             LDR      R0,[SP, #+32]
   \   00000054   0x.... 0x....      BL       UnityAddMsgIfSpecified
   \   00000058   0x200A             MOVS     R0,#+10
   \   0000005A   0x.... 0x....      BL       utest_safe_putc
   \   0000005E   0x.... 0x....      BL       utest_unity_assert_failure
    527              }
    528          
    529              if (UnityCheckArraysForNull((UNITY_INTERNAL_PTR)expected, (UNITY_INTERNAL_PTR)actual, lineNumber, msg) == 1)
   \                     ??UnityAssertEqualIntArray_2: (+1)
   \   00000062   0x9808             LDR      R0,[SP, #+32]
   \   00000064   0x9000             STR      R0,[SP, #+0]
   \   00000066   0xA80E             ADD      R0,SP,#+56
   \   00000068   0xC80C             LDM      R0!,{R2,R3}
   \   0000006A   0x0029             MOVS     R1,R5
   \   0000006C   0x0020             MOVS     R0,R4
   \   0000006E   0x.... 0x....      BL       UnityCheckArraysForNull
   \   00000072   0x2801             CMP      R0,#+1
   \   00000074   0xD100             BNE      .+4
   \   00000076   0xE1CB             B        ??UnityAssertEqualIntArray_1
    530                  return;
    531          
    532              /* If style is UNITY_DISPLAY_STYLE_INT, we'll fall into the default case rather than the INT16 or INT32 (etc) case
    533               * as UNITY_DISPLAY_STYLE_INT includes a flag for UNITY_DISPLAY_RANGE_AUTO, which the width-specific
    534               * variants do not. Therefore remove this flag. */
    535              switch(style & (UNITY_DISPLAY_STYLE_T)(~UNITY_DISPLAY_RANGE_AUTO))
   \   00000078   0xA810             ADD      R0,SP,#+64
   \   0000007A   0x7800             LDRB     R0,[R0, #+0]
   \   0000007C   0x0640             LSLS     R0,R0,#+25
   \   0000007E   0x0E40             LSRS     R0,R0,#+25
   \   00000080   0x2811             CMP      R0,#+17
   \   00000082   0xD016             BEQ      ??UnityAssertEqualIntArray_3
   \   00000084   0x2812             CMP      R0,#+18
   \   00000086   0xD100             BNE      .+4
   \   00000088   0xE0AC             B        ??UnityAssertEqualIntArray_4
   \   0000008A   0x2818             CMP      R0,#+24
   \   0000008C   0xD100             BNE      .+4
   \   0000008E   0xE11C             B        ??UnityAssertEqualIntArray_5
   \   00000090   0x2821             CMP      R0,#+33
   \   00000092   0xD00E             BEQ      ??UnityAssertEqualIntArray_3
   \   00000094   0x2822             CMP      R0,#+34
   \   00000096   0xD100             BNE      .+4
   \   00000098   0xE0A4             B        ??UnityAssertEqualIntArray_4
   \   0000009A   0x2828             CMP      R0,#+40
   \   0000009C   0xD100             BNE      .+4
   \   0000009E   0xE114             B        ??UnityAssertEqualIntArray_5
   \   000000A0   0x2841             CMP      R0,#+65
   \   000000A2   0xD006             BEQ      ??UnityAssertEqualIntArray_3
   \   000000A4   0x2842             CMP      R0,#+66
   \   000000A6   0xD100             BNE      .+4
   \   000000A8   0xE09C             B        ??UnityAssertEqualIntArray_4
   \   000000AA   0x2848             CMP      R0,#+72
   \   000000AC   0xD100             BNE      .+4
   \   000000AE   0xE10C             B        ??UnityAssertEqualIntArray_5
   \   000000B0   0xE18A             B        ??UnityAssertEqualIntArray_6
    536              {
    537                  case UNITY_DISPLAY_STYLE_HEX8:
    538                  case UNITY_DISPLAY_STYLE_INT8:
    539                  case UNITY_DISPLAY_STYLE_UINT8:
    540                      while (elements--)
   \                     ??UnityAssertEqualIntArray_3: (+1)
   \   000000B2   0x9801             LDR      R0,[SP, #+4]
   \   000000B4   0x2800             CMP      R0,#+0
   \   000000B6   0xD100             BNE      .+4
   \   000000B8   0xE1AA             B        ??UnityAssertEqualIntArray_1
   \   000000BA   0x1E40             SUBS     R0,R0,#+1
   \   000000BC   0x9001             STR      R0,[SP, #+4]
    541                      {
    542                          if (*(UNITY_PTR_ATTRIBUTE const _US8*)ptr_exp != *(UNITY_PTR_ATTRIBUTE const _US8*)ptr_act)
   \   000000BE   0x9803             LDR      R0,[SP, #+12]
   \   000000C0   0x2100             MOVS     R1,#+0
   \   000000C2   0x5640             LDRSB    R0,[R0, R1]
   \   000000C4   0x9902             LDR      R1,[SP, #+8]
   \   000000C6   0x2200             MOVS     R2,#+0
   \   000000C8   0x5689             LDRSB    R1,[R1, R2]
   \   000000CA   0x4288             CMP      R0,R1
   \   000000CC   0xD033             BEQ      ??UnityAssertEqualIntArray_7
    543                          {
    544                              UnityTestResultsFailBegin(lineNumber);
   \   000000CE   0xA80E             ADD      R0,SP,#+56
   \   000000D0   0xC80C             LDM      R0!,{R2,R3}
   \   000000D2   0x4893             LDR      R0,??UnityAssertEqualIntArray_0+0x8
   \   000000D4   0x6800             LDR      R0,[R0, #+0]
   \   000000D6   0x.... 0x....      BL       UnityTestResultsBegin
   \   000000DA   0x4892             LDR      R0,??UnityAssertEqualIntArray_0+0xC
   \   000000DC   0x.... 0x....      BL       UnityPrint
   \   000000E0   0x203A             MOVS     R0,#+58
   \   000000E2   0x.... 0x....      BL       utest_safe_putc
    545                              UnityPrint(UnityStrElement);
   \   000000E6   0x....             LDR      R0,??DataTable42
   \   000000E8   0x.... 0x....      BL       UnityPrint
    546                              UnityPrintNumberUnsigned(num_elements - elements - 1);
   \   000000EC   0x9807             LDR      R0,[SP, #+28]
   \   000000EE   0x9901             LDR      R1,[SP, #+4]
   \   000000F0   0x1A40             SUBS     R0,R0,R1
   \   000000F2   0x1E40             SUBS     R0,R0,#+1
   \   000000F4   0x2100             MOVS     R1,#+0
   \   000000F6   0x.... 0x....      BL       UnityPrintNumberUnsigned
    547                              UnityPrint(UnityStrExpected);
   \   000000FA   0x....             LDR      R0,??DataTable42_1
   \   000000FC   0x.... 0x....      BL       UnityPrint
    548                              UnityPrintNumberByStyle(*(UNITY_PTR_ATTRIBUTE const _US8*)ptr_exp, style);
   \   00000100   0xA810             ADD      R0,SP,#+64
   \   00000102   0x7802             LDRB     R2,[R0, #+0]
   \   00000104   0x9803             LDR      R0,[SP, #+12]
   \   00000106   0x2100             MOVS     R1,#+0
   \   00000108   0x5640             LDRSB    R0,[R0, R1]
   \   0000010A   0x17C1             ASRS     R1,R0,#+31
   \   0000010C   0x.... 0x....      BL       UnityPrintNumberByStyle
    549                              UnityPrint(UnityStrWas);
   \   00000110   0x....             LDR      R0,??DataTable42_2
   \   00000112   0x.... 0x....      BL       UnityPrint
    550                              UnityPrintNumberByStyle(*(UNITY_PTR_ATTRIBUTE const _US8*)ptr_act, style);
   \   00000116   0xA810             ADD      R0,SP,#+64
   \   00000118   0x7802             LDRB     R2,[R0, #+0]
   \   0000011A   0x9802             LDR      R0,[SP, #+8]
   \   0000011C   0x2100             MOVS     R1,#+0
   \   0000011E   0x5640             LDRSB    R0,[R0, R1]
   \   00000120   0x17C1             ASRS     R1,R0,#+31
   \   00000122   0x.... 0x....      BL       UnityPrintNumberByStyle
    551                              UnityAddMsgIfSpecified(msg);
   \   00000126   0x9808             LDR      R0,[SP, #+32]
   \   00000128   0x.... 0x....      BL       UnityAddMsgIfSpecified
    552                              UNITY_FAIL_AND_BAIL;
   \   0000012C   0x200A             MOVS     R0,#+10
   \   0000012E   0x.... 0x....      BL       utest_safe_putc
   \   00000132   0x.... 0x....      BL       utest_unity_assert_failure
    553                          }
    554                          ptr_exp = (UNITY_INTERNAL_PTR)((_UP)ptr_exp + 1);
   \                     ??UnityAssertEqualIntArray_7: (+1)
   \   00000136   0x9803             LDR      R0,[SP, #+12]
   \   00000138   0x1C40             ADDS     R0,R0,#+1
   \   0000013A   0x9003             STR      R0,[SP, #+12]
    555                          ptr_act = (UNITY_INTERNAL_PTR)((_UP)ptr_act + 1);
   \   0000013C   0x9802             LDR      R0,[SP, #+8]
   \   0000013E   0x1C40             ADDS     R0,R0,#+1
   \   00000140   0x9002             STR      R0,[SP, #+8]
   \   00000142   0xE7B6             B        ??UnityAssertEqualIntArray_3
    556                      }
    557                      break;
    558                  case UNITY_DISPLAY_STYLE_HEX16:
    559                  case UNITY_DISPLAY_STYLE_INT16:
    560                  case UNITY_DISPLAY_STYLE_UINT16:
    561                      while (elements--)
    562                      {
    563                          if (*(UNITY_PTR_ATTRIBUTE const _US16*)ptr_exp != *(UNITY_PTR_ATTRIBUTE const _US16*)ptr_act)
    564                          {
   \                     ??UnityAssertEqualIntArray_8: (+1)
   \   00000144   0x0030             MOVS     R0,R6
   \   00000146   0x0039             MOVS     R1,R7
   \   00000148   0x220A             MOVS     R2,#+10
   \   0000014A   0x2300             MOVS     R3,#+0
   \   0000014C   0x.... 0x....      BL       __aeabi_lmul
   \   00000150   0x0006             MOVS     R6,R0
   \   00000152   0x000F             MOVS     R7,R1
   \                     ??UnityAssertEqualIntArray_9: (+1)
   \   00000154   0xA804             ADD      R0,SP,#+16
   \   00000156   0xC803             LDM      R0,{R0,R1}
   \   00000158   0x0032             MOVS     R2,R6
   \   0000015A   0x003B             MOVS     R3,R7
   \   0000015C   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000160   0x2900             CMP      R1,#+0
   \   00000162   0xD8EF             BHI      ??UnityAssertEqualIntArray_8
   \   00000164   0x280A             CMP      R0,#+10
   \   00000166   0xD2ED             BCS      ??UnityAssertEqualIntArray_8
   \                     ??UnityAssertEqualIntArray_10: (+1)
   \   00000168   0xA804             ADD      R0,SP,#+16
   \   0000016A   0xC803             LDM      R0,{R0,R1}
   \   0000016C   0x0032             MOVS     R2,R6
   \   0000016E   0x003B             MOVS     R3,R7
   \   00000170   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000174   0x220A             MOVS     R2,#+10
   \   00000176   0x2300             MOVS     R3,#+0
   \   00000178   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000017C   0x0010             MOVS     R0,R2
   \   0000017E   0x3030             ADDS     R0,R0,#+48
   \   00000180   0xB2C0             UXTB     R0,R0
   \   00000182   0x.... 0x....      BL       utest_safe_putc
   \   00000186   0x0030             MOVS     R0,R6
   \   00000188   0x0039             MOVS     R1,R7
   \   0000018A   0x220A             MOVS     R2,#+10
   \   0000018C   0x2300             MOVS     R3,#+0
   \   0000018E   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000192   0x0006             MOVS     R6,R0
   \   00000194   0x000F             MOVS     R7,R1
   \   00000196   0xD1E7             BNE      ??UnityAssertEqualIntArray_10
   \   00000198   0x2E00             CMP      R6,#+0
   \   0000019A   0xD1E5             BNE      ??UnityAssertEqualIntArray_10
    565                              UnityTestResultsFailBegin(lineNumber);
    566                              UnityPrint(UnityStrElement);
    567                              UnityPrintNumberUnsigned(num_elements - elements - 1);
    568                              UnityPrint(UnityStrExpected);
   \   0000019C   0x....             LDR      R0,??DataTable42_1
   \   0000019E   0x.... 0x....      BL       UnityPrint
    569                              UnityPrintNumberByStyle(*(UNITY_PTR_ATTRIBUTE const _US16*)ptr_exp, style);
   \   000001A2   0xA810             ADD      R0,SP,#+64
   \   000001A4   0x7802             LDRB     R2,[R0, #+0]
   \   000001A6   0x9803             LDR      R0,[SP, #+12]
   \   000001A8   0x2100             MOVS     R1,#+0
   \   000001AA   0x5E40             LDRSH    R0,[R0, R1]
   \   000001AC   0x17C1             ASRS     R1,R0,#+31
   \   000001AE   0x.... 0x....      BL       UnityPrintNumberByStyle
    570                              UnityPrint(UnityStrWas);
   \   000001B2   0x....             LDR      R0,??DataTable42_2
   \   000001B4   0x.... 0x....      BL       UnityPrint
    571                              UnityPrintNumberByStyle(*(UNITY_PTR_ATTRIBUTE const _US16*)ptr_act, style);
   \   000001B8   0xA810             ADD      R0,SP,#+64
   \   000001BA   0x7802             LDRB     R2,[R0, #+0]
   \   000001BC   0x9802             LDR      R0,[SP, #+8]
   \   000001BE   0x2100             MOVS     R1,#+0
   \   000001C0   0x5E40             LDRSH    R0,[R0, R1]
   \   000001C2   0x17C1             ASRS     R1,R0,#+31
   \   000001C4   0x.... 0x....      BL       UnityPrintNumberByStyle
    572                              UnityAddMsgIfSpecified(msg);
   \   000001C8   0x9808             LDR      R0,[SP, #+32]
   \   000001CA   0x.... 0x....      BL       UnityAddMsgIfSpecified
    573                              UNITY_FAIL_AND_BAIL;
   \   000001CE   0x200A             MOVS     R0,#+10
   \   000001D0   0x.... 0x....      BL       utest_safe_putc
   \   000001D4   0x.... 0x....      BL       utest_unity_assert_failure
    574                          }
    575                          ptr_exp = (UNITY_INTERNAL_PTR)((_UP)ptr_exp + 2);
   \                     ??UnityAssertEqualIntArray_11: (+1)
   \   000001D8   0x9803             LDR      R0,[SP, #+12]
   \   000001DA   0x1C80             ADDS     R0,R0,#+2
   \   000001DC   0x9003             STR      R0,[SP, #+12]
    576                          ptr_act = (UNITY_INTERNAL_PTR)((_UP)ptr_act + 2);
   \   000001DE   0x9802             LDR      R0,[SP, #+8]
   \   000001E0   0x1C80             ADDS     R0,R0,#+2
   \   000001E2   0x9002             STR      R0,[SP, #+8]
   \                     ??UnityAssertEqualIntArray_4: (+1)
   \   000001E4   0x9801             LDR      R0,[SP, #+4]
   \   000001E6   0x2800             CMP      R0,#+0
   \   000001E8   0xD100             BNE      .+4
   \   000001EA   0xE111             B        ??UnityAssertEqualIntArray_1
   \   000001EC   0x1E40             SUBS     R0,R0,#+1
   \   000001EE   0x9001             STR      R0,[SP, #+4]
   \   000001F0   0x9803             LDR      R0,[SP, #+12]
   \   000001F2   0x2100             MOVS     R1,#+0
   \   000001F4   0x5E40             LDRSH    R0,[R0, R1]
   \   000001F6   0x9902             LDR      R1,[SP, #+8]
   \   000001F8   0x2200             MOVS     R2,#+0
   \   000001FA   0x5E89             LDRSH    R1,[R1, R2]
   \   000001FC   0x4288             CMP      R0,R1
   \   000001FE   0xD0EB             BEQ      ??UnityAssertEqualIntArray_11
   \   00000200   0xA80E             ADD      R0,SP,#+56
   \   00000202   0xC80C             LDM      R0!,{R2,R3}
   \   00000204   0x4846             LDR      R0,??UnityAssertEqualIntArray_0+0x8
   \   00000206   0x6800             LDR      R0,[R0, #+0]
   \   00000208   0x.... 0x....      BL       UnityTestResultsBegin
   \   0000020C   0x4845             LDR      R0,??UnityAssertEqualIntArray_0+0xC
   \   0000020E   0x.... 0x....      BL       UnityPrint
   \   00000212   0x203A             MOVS     R0,#+58
   \   00000214   0x.... 0x....      BL       utest_safe_putc
   \   00000218   0x....             LDR      R0,??DataTable42
   \   0000021A   0x.... 0x....      BL       UnityPrint
   \   0000021E   0x9807             LDR      R0,[SP, #+28]
   \   00000220   0x9901             LDR      R1,[SP, #+4]
   \   00000222   0x1A40             SUBS     R0,R0,R1
   \   00000224   0x1E40             SUBS     R0,R0,#+1
   \   00000226   0x2100             MOVS     R1,#+0
   \   00000228   0xAA04             ADD      R2,SP,#+16
   \   0000022A   0xC203             STM      R2!,{R0,R1}
   \   0000022C   0x2601             MOVS     R6,#+1
   \   0000022E   0x2700             MOVS     R7,#+0
   \   00000230   0xE790             B        ??UnityAssertEqualIntArray_9
    577                      }
    578                      break;
    579          #ifdef UNITY_SUPPORT_64
    580                  case UNITY_DISPLAY_STYLE_HEX64:
    581                  case UNITY_DISPLAY_STYLE_INT64:
    582                  case UNITY_DISPLAY_STYLE_UINT64:
    583                      while (elements--)
    584                      {
    585                          if (*(UNITY_PTR_ATTRIBUTE const _US64*)ptr_exp != *(UNITY_PTR_ATTRIBUTE const _US64*)ptr_act)
    586                          {
   \                     ??UnityAssertEqualIntArray_12: (+1)
   \   00000232   0x0030             MOVS     R0,R6
   \   00000234   0x0039             MOVS     R1,R7
   \   00000236   0x220A             MOVS     R2,#+10
   \   00000238   0x2300             MOVS     R3,#+0
   \   0000023A   0x.... 0x....      BL       __aeabi_lmul
   \   0000023E   0x0006             MOVS     R6,R0
   \   00000240   0x000F             MOVS     R7,R1
   \                     ??UnityAssertEqualIntArray_13: (+1)
   \   00000242   0xA804             ADD      R0,SP,#+16
   \   00000244   0xC803             LDM      R0,{R0,R1}
   \   00000246   0x0032             MOVS     R2,R6
   \   00000248   0x003B             MOVS     R3,R7
   \   0000024A   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000024E   0x2900             CMP      R1,#+0
   \   00000250   0xD8EF             BHI      ??UnityAssertEqualIntArray_12
   \   00000252   0x280A             CMP      R0,#+10
   \   00000254   0xD2ED             BCS      ??UnityAssertEqualIntArray_12
   \                     ??UnityAssertEqualIntArray_14: (+1)
   \   00000256   0xA804             ADD      R0,SP,#+16
   \   00000258   0xC803             LDM      R0,{R0,R1}
   \   0000025A   0x0032             MOVS     R2,R6
   \   0000025C   0x003B             MOVS     R3,R7
   \   0000025E   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000262   0x220A             MOVS     R2,#+10
   \   00000264   0x2300             MOVS     R3,#+0
   \   00000266   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000026A   0x0010             MOVS     R0,R2
   \   0000026C   0x3030             ADDS     R0,R0,#+48
   \   0000026E   0xB2C0             UXTB     R0,R0
   \   00000270   0x.... 0x....      BL       utest_safe_putc
   \   00000274   0x0030             MOVS     R0,R6
   \   00000276   0x0039             MOVS     R1,R7
   \   00000278   0x220A             MOVS     R2,#+10
   \   0000027A   0x2300             MOVS     R3,#+0
   \   0000027C   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000280   0x0006             MOVS     R6,R0
   \   00000282   0x000F             MOVS     R7,R1
   \   00000284   0xD1E7             BNE      ??UnityAssertEqualIntArray_14
   \   00000286   0x2E00             CMP      R6,#+0
   \   00000288   0xD1E5             BNE      ??UnityAssertEqualIntArray_14
    587                              UnityTestResultsFailBegin(lineNumber);
    588                              UnityPrint(UnityStrElement);
    589                              UnityPrintNumberUnsigned(num_elements - elements - 1);
    590                              UnityPrint(UnityStrExpected);
   \   0000028A   0x....             LDR      R0,??DataTable42_1
   \   0000028C   0x.... 0x....      BL       UnityPrint
    591                              UnityPrintNumberByStyle(*(UNITY_PTR_ATTRIBUTE const _US64*)ptr_exp, style);
   \   00000290   0xA810             ADD      R0,SP,#+64
   \   00000292   0x7802             LDRB     R2,[R0, #+0]
   \   00000294   0x9803             LDR      R0,[SP, #+12]
   \   00000296   0xC803             LDM      R0,{R0,R1}
   \   00000298   0x.... 0x....      BL       UnityPrintNumberByStyle
    592                              UnityPrint(UnityStrWas);
   \   0000029C   0x....             LDR      R0,??DataTable42_2
   \   0000029E   0x.... 0x....      BL       UnityPrint
    593                              UnityPrintNumberByStyle(*(UNITY_PTR_ATTRIBUTE const _US64*)ptr_act, style);
   \   000002A2   0xA810             ADD      R0,SP,#+64
   \   000002A4   0x7802             LDRB     R2,[R0, #+0]
   \   000002A6   0x9802             LDR      R0,[SP, #+8]
   \   000002A8   0xC803             LDM      R0,{R0,R1}
   \   000002AA   0x.... 0x....      BL       UnityPrintNumberByStyle
    594                              UnityAddMsgIfSpecified(msg);
   \   000002AE   0x9808             LDR      R0,[SP, #+32]
   \   000002B0   0x.... 0x....      BL       UnityAddMsgIfSpecified
    595                              UNITY_FAIL_AND_BAIL;
   \   000002B4   0x200A             MOVS     R0,#+10
   \   000002B6   0x.... 0x....      BL       utest_safe_putc
   \   000002BA   0x.... 0x....      BL       utest_unity_assert_failure
    596                          }
    597                          ptr_exp = (UNITY_INTERNAL_PTR)((_UP)ptr_exp + 8);
   \                     ??UnityAssertEqualIntArray_15: (+1)
   \   000002BE   0x9803             LDR      R0,[SP, #+12]
   \   000002C0   0x3008             ADDS     R0,R0,#+8
   \   000002C2   0x9003             STR      R0,[SP, #+12]
    598                          ptr_act = (UNITY_INTERNAL_PTR)((_UP)ptr_act + 8);
   \   000002C4   0x9802             LDR      R0,[SP, #+8]
   \   000002C6   0x3008             ADDS     R0,R0,#+8
   \   000002C8   0x9002             STR      R0,[SP, #+8]
   \                     ??UnityAssertEqualIntArray_5: (+1)
   \   000002CA   0x9801             LDR      R0,[SP, #+4]
   \   000002CC   0x2800             CMP      R0,#+0
   \   000002CE   0xD100             BNE      .+4
   \   000002D0   0xE09E             B        ??UnityAssertEqualIntArray_1
   \   000002D2   0x1E40             SUBS     R0,R0,#+1
   \   000002D4   0x9001             STR      R0,[SP, #+4]
   \   000002D6   0x9803             LDR      R0,[SP, #+12]
   \   000002D8   0xC80C             LDM      R0!,{R2,R3}
   \   000002DA   0x9802             LDR      R0,[SP, #+8]
   \   000002DC   0xC803             LDM      R0,{R0,R1}
   \   000002DE   0x428B             CMP      R3,R1
   \   000002E0   0xD101             BNE      ??UnityAssertEqualIntArray_16
   \   000002E2   0x4282             CMP      R2,R0
   \   000002E4   0xD0EB             BEQ      ??UnityAssertEqualIntArray_15
   \                     ??UnityAssertEqualIntArray_16: (+1)
   \   000002E6   0xA80E             ADD      R0,SP,#+56
   \   000002E8   0xC80C             LDM      R0!,{R2,R3}
   \   000002EA   0x480D             LDR      R0,??UnityAssertEqualIntArray_0+0x8
   \   000002EC   0x6800             LDR      R0,[R0, #+0]
   \   000002EE   0x.... 0x....      BL       UnityTestResultsBegin
   \   000002F2   0x480C             LDR      R0,??UnityAssertEqualIntArray_0+0xC
   \   000002F4   0x.... 0x....      BL       UnityPrint
   \   000002F8   0x203A             MOVS     R0,#+58
   \   000002FA   0x.... 0x....      BL       utest_safe_putc
   \   000002FE   0x....             LDR      R0,??DataTable42
   \   00000300   0x.... 0x....      BL       UnityPrint
   \   00000304   0x9807             LDR      R0,[SP, #+28]
   \   00000306   0x9901             LDR      R1,[SP, #+4]
   \   00000308   0x1A40             SUBS     R0,R0,R1
   \   0000030A   0x1E40             SUBS     R0,R0,#+1
   \   0000030C   0x2100             MOVS     R1,#+0
   \   0000030E   0xAA04             ADD      R2,SP,#+16
   \   00000310   0xC203             STM      R2!,{R0,R1}
   \   00000312   0x2601             MOVS     R6,#+1
   \   00000314   0x2700             MOVS     R7,#+0
   \   00000316   0xE794             B        ??UnityAssertEqualIntArray_13
   \                     ??UnityAssertEqualIntArray_0:
   \   00000318   0x........         DC32     Unity+0x30
   \   0000031C   0x........         DC32     Unity+0x38
   \   00000320   0x........         DC32     Unity
   \   00000324   0x........         DC32     UnityStrFail
   \   00000328   0x........         DC32     UnityStrPointless
    599                      }
    600                      break;
    601          #endif
    602                  default:
    603                      while (elements--)
    604                      {
    605                          if (*(UNITY_PTR_ATTRIBUTE const _US32*)ptr_exp != *(UNITY_PTR_ATTRIBUTE const _US32*)ptr_act)
    606                          {
   \                     ??UnityAssertEqualIntArray_17: (+1)
   \   0000032C   0x0030             MOVS     R0,R6
   \   0000032E   0x0039             MOVS     R1,R7
   \   00000330   0x220A             MOVS     R2,#+10
   \   00000332   0x2300             MOVS     R3,#+0
   \   00000334   0x.... 0x....      BL       __aeabi_lmul
   \   00000338   0x0006             MOVS     R6,R0
   \   0000033A   0x000F             MOVS     R7,R1
   \                     ??UnityAssertEqualIntArray_18: (+1)
   \   0000033C   0xA804             ADD      R0,SP,#+16
   \   0000033E   0xC803             LDM      R0,{R0,R1}
   \   00000340   0x0032             MOVS     R2,R6
   \   00000342   0x003B             MOVS     R3,R7
   \   00000344   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000348   0x2900             CMP      R1,#+0
   \   0000034A   0xD8EF             BHI      ??UnityAssertEqualIntArray_17
   \   0000034C   0x280A             CMP      R0,#+10
   \   0000034E   0xD2ED             BCS      ??UnityAssertEqualIntArray_17
   \                     ??UnityAssertEqualIntArray_19: (+1)
   \   00000350   0xA804             ADD      R0,SP,#+16
   \   00000352   0xC803             LDM      R0,{R0,R1}
   \   00000354   0x0032             MOVS     R2,R6
   \   00000356   0x003B             MOVS     R3,R7
   \   00000358   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000035C   0x220A             MOVS     R2,#+10
   \   0000035E   0x2300             MOVS     R3,#+0
   \   00000360   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000364   0x0010             MOVS     R0,R2
   \   00000366   0x3030             ADDS     R0,R0,#+48
   \   00000368   0xB2C0             UXTB     R0,R0
   \   0000036A   0x.... 0x....      BL       utest_safe_putc
   \   0000036E   0x0030             MOVS     R0,R6
   \   00000370   0x0039             MOVS     R1,R7
   \   00000372   0x220A             MOVS     R2,#+10
   \   00000374   0x2300             MOVS     R3,#+0
   \   00000376   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000037A   0x0006             MOVS     R6,R0
   \   0000037C   0x000F             MOVS     R7,R1
   \   0000037E   0xD1E7             BNE      ??UnityAssertEqualIntArray_19
   \   00000380   0x2E00             CMP      R6,#+0
   \   00000382   0xD1E5             BNE      ??UnityAssertEqualIntArray_19
    607                              UnityTestResultsFailBegin(lineNumber);
    608                              UnityPrint(UnityStrElement);
    609                              UnityPrintNumberUnsigned(num_elements - elements - 1);
    610                              UnityPrint(UnityStrExpected);
   \   00000384   0x....             LDR      R0,??DataTable42_1
   \   00000386   0x.... 0x....      BL       UnityPrint
    611                              UnityPrintNumberByStyle(*(UNITY_PTR_ATTRIBUTE const _US32*)ptr_exp, style);
   \   0000038A   0xA810             ADD      R0,SP,#+64
   \   0000038C   0x7802             LDRB     R2,[R0, #+0]
   \   0000038E   0x9803             LDR      R0,[SP, #+12]
   \   00000390   0x6800             LDR      R0,[R0, #+0]
   \   00000392   0x17C1             ASRS     R1,R0,#+31
   \   00000394   0x.... 0x....      BL       UnityPrintNumberByStyle
    612                              UnityPrint(UnityStrWas);
   \   00000398   0x....             LDR      R0,??DataTable42_2
   \   0000039A   0x.... 0x....      BL       UnityPrint
    613                              UnityPrintNumberByStyle(*(UNITY_PTR_ATTRIBUTE const _US32*)ptr_act, style);
   \   0000039E   0xA810             ADD      R0,SP,#+64
   \   000003A0   0x7802             LDRB     R2,[R0, #+0]
   \   000003A2   0x9802             LDR      R0,[SP, #+8]
   \   000003A4   0x6800             LDR      R0,[R0, #+0]
   \   000003A6   0x17C1             ASRS     R1,R0,#+31
   \   000003A8   0x.... 0x....      BL       UnityPrintNumberByStyle
    614                              UnityAddMsgIfSpecified(msg);
   \   000003AC   0x9808             LDR      R0,[SP, #+32]
   \   000003AE   0x.... 0x....      BL       UnityAddMsgIfSpecified
    615                              UNITY_FAIL_AND_BAIL;
   \   000003B2   0x200A             MOVS     R0,#+10
   \   000003B4   0x.... 0x....      BL       utest_safe_putc
   \   000003B8   0x.... 0x....      BL       utest_unity_assert_failure
    616                          }
    617                          ptr_exp = (UNITY_INTERNAL_PTR)((_UP)ptr_exp + 4);
   \                     ??UnityAssertEqualIntArray_20: (+1)
   \   000003BC   0x9803             LDR      R0,[SP, #+12]
   \   000003BE   0x1D00             ADDS     R0,R0,#+4
   \   000003C0   0x9003             STR      R0,[SP, #+12]
    618                          ptr_act = (UNITY_INTERNAL_PTR)((_UP)ptr_act + 4);
   \   000003C2   0x9802             LDR      R0,[SP, #+8]
   \   000003C4   0x1D00             ADDS     R0,R0,#+4
   \   000003C6   0x9002             STR      R0,[SP, #+8]
   \                     ??UnityAssertEqualIntArray_6: (+1)
   \   000003C8   0x9801             LDR      R0,[SP, #+4]
   \   000003CA   0x2800             CMP      R0,#+0
   \   000003CC   0xD020             BEQ      ??UnityAssertEqualIntArray_1
   \   000003CE   0x1E40             SUBS     R0,R0,#+1
   \   000003D0   0x9001             STR      R0,[SP, #+4]
   \   000003D2   0x9803             LDR      R0,[SP, #+12]
   \   000003D4   0x6800             LDR      R0,[R0, #+0]
   \   000003D6   0x9902             LDR      R1,[SP, #+8]
   \   000003D8   0x6809             LDR      R1,[R1, #+0]
   \   000003DA   0x4288             CMP      R0,R1
   \   000003DC   0xD0EE             BEQ      ??UnityAssertEqualIntArray_20
   \   000003DE   0xA80E             ADD      R0,SP,#+56
   \   000003E0   0xC80C             LDM      R0!,{R2,R3}
   \   000003E2   0x....             LDR      R0,??DataTable44
   \   000003E4   0x6800             LDR      R0,[R0, #+0]
   \   000003E6   0x.... 0x....      BL       UnityTestResultsBegin
   \   000003EA   0x....             LDR      R0,??DataTable44_1
   \   000003EC   0x.... 0x....      BL       UnityPrint
   \   000003F0   0x203A             MOVS     R0,#+58
   \   000003F2   0x.... 0x....      BL       utest_safe_putc
   \   000003F6   0x....             LDR      R0,??DataTable42
   \   000003F8   0x.... 0x....      BL       UnityPrint
   \   000003FC   0x9807             LDR      R0,[SP, #+28]
   \   000003FE   0x9901             LDR      R1,[SP, #+4]
   \   00000400   0x1A40             SUBS     R0,R0,R1
   \   00000402   0x1E40             SUBS     R0,R0,#+1
   \   00000404   0x2100             MOVS     R1,#+0
   \   00000406   0xAA04             ADD      R2,SP,#+16
   \   00000408   0xC203             STM      R2!,{R0,R1}
   \   0000040A   0x2601             MOVS     R6,#+1
   \   0000040C   0x2700             MOVS     R7,#+0
   \   0000040E   0xE795             B        ??UnityAssertEqualIntArray_18
    619                      }
    620                      break;
    621              }
    622          }
   \                     ??UnityAssertEqualIntArray_1: (+1)
   \   00000410   0xB009             ADD      SP,SP,#+36
   \   00000412   0xBDF0             POP      {R4-R7,PC}       ;; return
    623          
    624          /*-----------------------------------------------*/
    625          #ifndef UNITY_EXCLUDE_FLOAT

   \                                 In section .text, align 2, keep-with-next
    626          void UnityAssertEqualFloatArray(UNITY_PTR_ATTRIBUTE const _UF* expected,
    627                                          UNITY_PTR_ATTRIBUTE const _UF* actual,
    628                                          const _UU32 num_elements,
    629                                          const char* msg,
    630                                          const UNITY_LINE_TYPE lineNumber)
    631          {
   \                     UnityAssertEqualFloatArray: (+1)
   \   00000000   0xB578             PUSH     {R3-R6,LR}
   \   00000002   0xB408             PUSH     {R3}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x0005             MOVS     R5,R0
   \   00000008   0x000E             MOVS     R6,R1
   \   0000000A   0x0014             MOVS     R4,R2
    632              _UU32 elements = num_elements;
    633              UNITY_PTR_ATTRIBUTE const _UF* ptr_expected = expected;
   \   0000000C   0x9503             STR      R5,[SP, #+12]
    634              UNITY_PTR_ATTRIBUTE const _UF* ptr_actual = actual;
   \   0000000E   0x9602             STR      R6,[SP, #+8]
   \   00000010   0x....             LDR      R0,??DataTable44_2
   \   00000012   0xC803             LDM      R0,{R0,R1}
   \   00000014   0x2900             CMP      R1,#+0
   \   00000016   0xD000             BEQ      .+4
   \   00000018   0xE0B9             B        ??UnityAssertEqualFloatArray_0
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD000             BEQ      .+4
   \   0000001E   0xE0B6             B        ??UnityAssertEqualFloatArray_0
   \   00000020   0x....             LDR      R0,??DataTable44_3
   \   00000022   0xC803             LDM      R0,{R0,R1}
   \   00000024   0x2900             CMP      R1,#+0
   \   00000026   0xD000             BEQ      .+4
   \   00000028   0xE0B1             B        ??UnityAssertEqualFloatArray_0
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD000             BEQ      .+4
   \   0000002E   0xE0AE             B        ??UnityAssertEqualFloatArray_0
    635              _UF diff, tol;
    636          
    637              UNITY_SKIP_EXECUTION;
    638          
    639              if (elements == 0)
   \   00000030   0x2C00             CMP      R4,#+0
   \   00000032   0xD116             BNE      ??UnityAssertEqualFloatArray_1
    640              {
    641                  UnityPrintPointlessAndBail();
   \   00000034   0xA80A             ADD      R0,SP,#+40
   \   00000036   0xC80C             LDM      R0!,{R2,R3}
   \   00000038   0x....             LDR      R0,??DataTable44
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x.... 0x....      BL       UnityTestResultsBegin
   \   00000040   0x....             LDR      R0,??DataTable44_1
   \   00000042   0x.... 0x....      BL       UnityPrint
   \   00000046   0x203A             MOVS     R0,#+58
   \   00000048   0x.... 0x....      BL       utest_safe_putc
   \   0000004C   0x....             LDR      R0,??DataTable44_4
   \   0000004E   0x.... 0x....      BL       UnityPrint
   \   00000052   0x9804             LDR      R0,[SP, #+16]
   \   00000054   0x.... 0x....      BL       UnityAddMsgIfSpecified
   \   00000058   0x200A             MOVS     R0,#+10
   \   0000005A   0x.... 0x....      BL       utest_safe_putc
   \   0000005E   0x.... 0x....      BL       utest_unity_assert_failure
    642              }
    643          
    644              if (UnityCheckArraysForNull((UNITY_INTERNAL_PTR)expected, (UNITY_INTERNAL_PTR)actual, lineNumber, msg) == 1)
   \                     ??UnityAssertEqualFloatArray_1: (+1)
   \   00000062   0x9804             LDR      R0,[SP, #+16]
   \   00000064   0x9000             STR      R0,[SP, #+0]
   \   00000066   0xA80A             ADD      R0,SP,#+40
   \   00000068   0xC80C             LDM      R0!,{R2,R3}
   \   0000006A   0x0031             MOVS     R1,R6
   \   0000006C   0x0028             MOVS     R0,R5
   \   0000006E   0x.... 0x....      BL       UnityCheckArraysForNull
   \   00000072   0x2801             CMP      R0,#+1
   \   00000074   0xD100             BNE      .+4
   \   00000076   0xE08A             B        ??UnityAssertEqualFloatArray_0
   \   00000078   0x2C00             CMP      R4,#+0
   \   0000007A   0xD100             BNE      .+4
   \   0000007C   0xE087             B        ??UnityAssertEqualFloatArray_0
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x9001             STR      R0,[SP, #+4]
   \   00000082   0x9400             STR      R4,[SP, #+0]
    645                  return;
    646          
    647              while (elements--)
    648              {
    649                  diff = *ptr_expected - *ptr_actual;
   \                     ??UnityAssertEqualFloatArray_2: (+1)
   \   00000084   0x9803             LDR      R0,[SP, #+12]
   \   00000086   0x6805             LDR      R5,[R0, #+0]
   \   00000088   0x0028             MOVS     R0,R5
   \   0000008A   0x9902             LDR      R1,[SP, #+8]
   \   0000008C   0x6809             LDR      R1,[R1, #+0]
   \   0000008E   0x.... 0x....      BL       __aeabi_fsub
   \   00000092   0x0004             MOVS     R4,R0
    650                  if (diff < 0.0f)
   \   00000094   0x9800             LDR      R0,[SP, #+0]
   \   00000096   0x1E40             SUBS     R0,R0,#+1
   \   00000098   0x9000             STR      R0,[SP, #+0]
   \   0000009A   0x0020             MOVS     R0,R4
   \   0000009C   0x2100             MOVS     R1,#+0
   \   0000009E   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000A2   0xD202             BCS      ??UnityAssertEqualFloatArray_3
    651                      diff = 0.0f - diff;
   \   000000A4   0x2080             MOVS     R0,#+128
   \   000000A6   0x0600             LSLS     R0,R0,#+24       ;; #-2147483648
   \   000000A8   0x4044             EORS     R4,R4,R0
    652                  tol = UNITY_FLOAT_PRECISION * *ptr_expected;
   \                     ??UnityAssertEqualFloatArray_3: (+1)
   \   000000AA   0x....             LDR      R0,??DataTable44_5  ;; 0x3727c5ac
   \   000000AC   0x0029             MOVS     R1,R5
   \   000000AE   0x.... 0x....      BL       __aeabi_fmul
   \   000000B2   0x0005             MOVS     R5,R0
    653                  if (tol < 0.0f)
   \   000000B4   0x2100             MOVS     R1,#+0
   \   000000B6   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000BA   0xD202             BCS      ??UnityAssertEqualFloatArray_4
    654                      tol = 0.0f - tol;
   \   000000BC   0x2080             MOVS     R0,#+128
   \   000000BE   0x0600             LSLS     R0,R0,#+24       ;; #-2147483648
   \   000000C0   0x4045             EORS     R5,R5,R0
    655          
    656                  /* This first part of this condition will catch any NaN or Infinite values */
    657                  if (isnan(diff) || isinf(diff) || (diff > tol))
   \                     ??UnityAssertEqualFloatArray_4: (+1)
   \   000000C2   0x0020             MOVS     R0,R4
   \   000000C4   0x.... 0x....      BL       __iar_FDtest
   \   000000C8   0x2802             CMP      R0,#+2
   \   000000CA   0xD009             BEQ      ??UnityAssertEqualFloatArray_5
   \   000000CC   0x0020             MOVS     R0,R4
   \   000000CE   0x.... 0x....      BL       __iar_FDtest
   \   000000D2   0x2801             CMP      R0,#+1
   \   000000D4   0xD004             BEQ      ??UnityAssertEqualFloatArray_5
   \   000000D6   0x0028             MOVS     R0,R5
   \   000000D8   0x0021             MOVS     R1,R4
   \   000000DA   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000DE   0xD249             BCS      ??UnityAssertEqualFloatArray_6
    658                  {
    659                      UnityTestResultsFailBegin(lineNumber);
   \                     ??UnityAssertEqualFloatArray_5: (+1)
   \   000000E0   0xA80A             ADD      R0,SP,#+40
   \   000000E2   0xC80C             LDM      R0!,{R2,R3}
   \   000000E4   0x....             LDR      R0,??DataTable44
   \   000000E6   0x6800             LDR      R0,[R0, #+0]
   \   000000E8   0x.... 0x....      BL       UnityTestResultsBegin
   \   000000EC   0x....             LDR      R0,??DataTable44_1
   \   000000EE   0x.... 0x....      BL       UnityPrint
   \   000000F2   0x203A             MOVS     R0,#+58
   \   000000F4   0x.... 0x....      BL       utest_safe_putc
    660                      UnityPrint(UnityStrElement);
   \   000000F8   0x....             LDR      R0,??DataTable45
   \   000000FA   0x.... 0x....      BL       UnityPrint
    661                      UnityPrintNumberUnsigned(num_elements - elements - 1);
   \   000000FE   0x9E01             LDR      R6,[SP, #+4]
   \   00000100   0x2401             MOVS     R4,#+1
   \   00000102   0x2500             MOVS     R5,#+0
   \   00000104   0xE007             B        ??UnityAssertEqualFloatArray_7
   \                     ??UnityAssertEqualFloatArray_8: (+1)
   \   00000106   0x0020             MOVS     R0,R4
   \   00000108   0x0029             MOVS     R1,R5
   \   0000010A   0x220A             MOVS     R2,#+10
   \   0000010C   0x2300             MOVS     R3,#+0
   \   0000010E   0x.... 0x....      BL       __aeabi_lmul
   \   00000112   0x0004             MOVS     R4,R0
   \   00000114   0x000D             MOVS     R5,R1
   \                     ??UnityAssertEqualFloatArray_7: (+1)
   \   00000116   0x0030             MOVS     R0,R6
   \   00000118   0x2100             MOVS     R1,#+0
   \   0000011A   0x0022             MOVS     R2,R4
   \   0000011C   0x002B             MOVS     R3,R5
   \   0000011E   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000122   0x2900             CMP      R1,#+0
   \   00000124   0xD8EF             BHI      ??UnityAssertEqualFloatArray_8
   \   00000126   0x280A             CMP      R0,#+10
   \   00000128   0xD2ED             BCS      ??UnityAssertEqualFloatArray_8
   \                     ??UnityAssertEqualFloatArray_9: (+1)
   \   0000012A   0x0030             MOVS     R0,R6
   \   0000012C   0x2100             MOVS     R1,#+0
   \   0000012E   0x0022             MOVS     R2,R4
   \   00000130   0x002B             MOVS     R3,R5
   \   00000132   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000136   0x220A             MOVS     R2,#+10
   \   00000138   0x2300             MOVS     R3,#+0
   \   0000013A   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000013E   0x0010             MOVS     R0,R2
   \   00000140   0x3030             ADDS     R0,R0,#+48
   \   00000142   0xB2C0             UXTB     R0,R0
   \   00000144   0x.... 0x....      BL       utest_safe_putc
   \   00000148   0x0020             MOVS     R0,R4
   \   0000014A   0x0029             MOVS     R1,R5
   \   0000014C   0x220A             MOVS     R2,#+10
   \   0000014E   0x2300             MOVS     R3,#+0
   \   00000150   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000154   0x0004             MOVS     R4,R0
   \   00000156   0x000D             MOVS     R5,R1
   \   00000158   0xD1E7             BNE      ??UnityAssertEqualFloatArray_9
   \   0000015A   0x2C00             CMP      R4,#+0
   \   0000015C   0xD1E5             BNE      ??UnityAssertEqualFloatArray_9
    662          #ifdef UNITY_FLOAT_VERBOSE
    663                      UnityPrint(UnityStrExpected);
    664                      UnityPrintFloat(*ptr_expected);
    665                      UnityPrint(UnityStrWas);
    666                      UnityPrintFloat(*ptr_actual);
    667          #else
    668                      UnityPrint(UnityStrDelta);
   \   0000015E   0x....             LDR      R0,??DataTable45_1
   \   00000160   0x.... 0x....      BL       UnityPrint
    669          #endif
    670                      UnityAddMsgIfSpecified(msg);
   \   00000164   0x9804             LDR      R0,[SP, #+16]
   \   00000166   0x.... 0x....      BL       UnityAddMsgIfSpecified
    671                      UNITY_FAIL_AND_BAIL;
   \   0000016A   0x200A             MOVS     R0,#+10
   \   0000016C   0x.... 0x....      BL       utest_safe_putc
   \   00000170   0x.... 0x....      BL       utest_unity_assert_failure
    672                  }
    673                  ptr_expected++;
   \                     ??UnityAssertEqualFloatArray_6: (+1)
   \   00000174   0x9803             LDR      R0,[SP, #+12]
   \   00000176   0x1D00             ADDS     R0,R0,#+4
   \   00000178   0x9003             STR      R0,[SP, #+12]
    674                  ptr_actual++;
   \   0000017A   0x9802             LDR      R0,[SP, #+8]
   \   0000017C   0x1D00             ADDS     R0,R0,#+4
   \   0000017E   0x9002             STR      R0,[SP, #+8]
   \   00000180   0x9801             LDR      R0,[SP, #+4]
   \   00000182   0x1C40             ADDS     R0,R0,#+1
   \   00000184   0x9001             STR      R0,[SP, #+4]
    675              }
   \   00000186   0x9800             LDR      R0,[SP, #+0]
   \   00000188   0x2800             CMP      R0,#+0
   \   0000018A   0xD000             BEQ      .+4
   \   0000018C   0xE77A             B        ??UnityAssertEqualFloatArray_2
    676          }
   \                     ??UnityAssertEqualFloatArray_0: (+1)
   \   0000018E   0xB006             ADD      SP,SP,#+24
   \   00000190   0xBD70             POP      {R4-R6,PC}       ;; return
    677          
    678          /*-----------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    679          void UnityAssertFloatsWithin(const _UF delta,
    680                                       const _UF expected,
    681                                       const _UF actual,
    682                                       const char* msg,
    683                                       const UNITY_LINE_TYPE lineNumber)
    684          {
   \                     UnityAssertFloatsWithin: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x0010             MOVS     R0,R2
   \   00000006   0x001F             MOVS     R7,R3
    685              _UF diff = actual - expected;
   \   00000008   0x.... 0x....      BL       __aeabi_fsub
   \   0000000C   0x0004             MOVS     R4,R0
    686              _UF pos_delta = delta;
    687          
    688              UNITY_SKIP_EXECUTION;
   \   0000000E   0x....             LDR      R6,??DataTable44
   \   00000010   0x0030             MOVS     R0,R6
   \   00000012   0x3030             ADDS     R0,R0,#+48
   \   00000014   0xC803             LDM      R0,{R0,R1}
   \   00000016   0x2900             CMP      R1,#+0
   \   00000018   0xD13B             BNE      ??UnityAssertFloatsWithin_0
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD139             BNE      ??UnityAssertFloatsWithin_0
   \   0000001E   0x0030             MOVS     R0,R6
   \   00000020   0x3038             ADDS     R0,R0,#+56
   \   00000022   0xC803             LDM      R0,{R0,R1}
   \   00000024   0x2900             CMP      R1,#+0
   \   00000026   0xD134             BNE      ??UnityAssertFloatsWithin_0
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD132             BNE      ??UnityAssertFloatsWithin_0
    689          
    690              if (diff < 0.0f)
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000032   0xD202             BCS      ??UnityAssertFloatsWithin_1
    691              {
    692                  diff = 0.0f - diff;
   \   00000034   0x2080             MOVS     R0,#+128
   \   00000036   0x0600             LSLS     R0,R0,#+24       ;; #-2147483648
   \   00000038   0x4044             EORS     R4,R4,R0
    693              }
    694              if (pos_delta < 0.0f)
   \                     ??UnityAssertFloatsWithin_1: (+1)
   \   0000003A   0x0028             MOVS     R0,R5
   \   0000003C   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000040   0xD202             BCS      ??UnityAssertFloatsWithin_2
    695              {
    696                  pos_delta = 0.0f - pos_delta;
   \   00000042   0x2080             MOVS     R0,#+128
   \   00000044   0x0600             LSLS     R0,R0,#+24       ;; #-2147483648
   \   00000046   0x4045             EORS     R5,R5,R0
    697              }
    698          
    699              /* This first part of this condition will catch any NaN or Infinite values */
    700              if (isnan(diff) || isinf(diff) || (pos_delta < diff))
   \                     ??UnityAssertFloatsWithin_2: (+1)
   \   00000048   0x0020             MOVS     R0,R4
   \   0000004A   0x.... 0x....      BL       __iar_FDtest
   \   0000004E   0x2802             CMP      R0,#+2
   \   00000050   0xD009             BEQ      ??UnityAssertFloatsWithin_3
   \   00000052   0x0020             MOVS     R0,R4
   \   00000054   0x.... 0x....      BL       __iar_FDtest
   \   00000058   0x2801             CMP      R0,#+1
   \   0000005A   0xD004             BEQ      ??UnityAssertFloatsWithin_3
   \   0000005C   0x0028             MOVS     R0,R5
   \   0000005E   0x0021             MOVS     R1,R4
   \   00000060   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000064   0xD215             BCS      ??UnityAssertFloatsWithin_0
    701              {
    702                  UnityTestResultsFailBegin(lineNumber);
   \                     ??UnityAssertFloatsWithin_3: (+1)
   \   00000066   0xA806             ADD      R0,SP,#+24
   \   00000068   0xC80C             LDM      R0!,{R2,R3}
   \   0000006A   0x6830             LDR      R0,[R6, #+0]
   \   0000006C   0x.... 0x....      BL       UnityTestResultsBegin
   \   00000070   0x....             LDR      R0,??DataTable44_1
   \   00000072   0x.... 0x....      BL       UnityPrint
   \   00000076   0x203A             MOVS     R0,#+58
   \   00000078   0x.... 0x....      BL       utest_safe_putc
    703          #ifdef UNITY_FLOAT_VERBOSE
    704                  UnityPrint(UnityStrExpected);
    705                  UnityPrintFloat(expected);
    706                  UnityPrint(UnityStrWas);
    707                  UnityPrintFloat(actual);
    708          #else
    709                  UnityPrint(UnityStrDelta);
   \   0000007C   0x....             LDR      R0,??DataTable45_1
   \   0000007E   0x.... 0x....      BL       UnityPrint
    710          #endif
    711                  UnityAddMsgIfSpecified(msg);
   \   00000082   0x0038             MOVS     R0,R7
   \   00000084   0x.... 0x....      BL       UnityAddMsgIfSpecified
    712                  UNITY_FAIL_AND_BAIL;
   \   00000088   0x200A             MOVS     R0,#+10
   \   0000008A   0x.... 0x....      BL       utest_safe_putc
   \   0000008E   0x.... 0x....      BL       utest_unity_assert_failure
    713              }
    714          }
   \                     ??UnityAssertFloatsWithin_0: (+1)
   \   00000092   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    715          
    716          /*-----------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    717          void UnityAssertFloatSpecial(const _UF actual,
    718                                       const char* msg,
    719                                       const UNITY_LINE_TYPE lineNumber,
    720                                       const UNITY_FLOAT_TRAIT_T style)
    721          {
   \                     UnityAssertFloatSpecial: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0xB40C             PUSH     {R2,R3}
   \   00000004   0xB088             SUB      SP,SP,#+32
   \   00000006   0x0006             MOVS     R6,R0
    722              const char* trait_names[] = { UnityStrInf, UnityStrNegInf, UnityStrNaN, UnityStrDet };
   \   00000008   0xA804             ADD      R0,SP,#+16
   \   0000000A   0x....             LDR      R1,??DataTable45_2
   \   0000000C   0x2210             MOVS     R2,#+16
   \   0000000E   0x.... 0x....      BL       __aeabi_memcpy4
    723              _U_SINT should_be_trait   = ((_U_SINT)style & 1);
   \   00000012   0x2401             MOVS     R4,#+1
   \   00000014   0x9D10             LDR      R5,[SP, #+64]
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x4028             ANDS     R0,R0,R5
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x466A             MOV      R2,SP
   \   0000001E   0xC203             STM      R2!,{R0,R1}
    724              _U_SINT is_trait          = !should_be_trait;
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0xC803             LDM      R0,{R0,R1}
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD102             BNE      ??UnityAssertFloatSpecial_1
   \   00000028   0x2201             MOVS     R2,#+1
   \   0000002A   0x2300             MOVS     R3,#+0
   \   0000002C   0xE001             B        ??UnityAssertFloatSpecial_2
   \                     ??UnityAssertFloatSpecial_1: (+1)
   \   0000002E   0x2200             MOVS     R2,#+0
   \   00000030   0x2300             MOVS     R3,#+0
    725              _U_SINT trait_index       = (_U_SINT)(style >> 1);
   \                     ??UnityAssertFloatSpecial_2: (+1)
   \   00000032   0x0868             LSRS     R0,R5,#+1
   \   00000034   0xAF02             ADD      R7,SP,#+8
   \   00000036   0xC703             STM      R7!,{R0,R1}
   \   00000038   0x....             LDR      R0,??DataTable45_3
   \   0000003A   0xC803             LDM      R0,{R0,R1}
   \   0000003C   0x2900             CMP      R1,#+0
   \   0000003E   0xD000             BEQ      .+4
   \   00000040   0xE091             B        ??UnityAssertFloatSpecial_3
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD000             BEQ      .+4
   \   00000046   0xE08E             B        ??UnityAssertFloatSpecial_3
   \   00000048   0x....             LDR      R0,??DataTable45_4
   \   0000004A   0xC803             LDM      R0,{R0,R1}
   \   0000004C   0x2900             CMP      R1,#+0
   \   0000004E   0xD000             BEQ      .+4
   \   00000050   0xE089             B        ??UnityAssertFloatSpecial_3
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD000             BEQ      .+4
   \   00000056   0xE086             B        ??UnityAssertFloatSpecial_3
    726          
    727              UNITY_SKIP_EXECUTION;
    728          
    729              switch(style)
   \   00000058   0x2D07             CMP      R5,#+7
   \   0000005A   0xD847             BHI      ??UnityAssertFloatSpecial_4
   \   0000005C   0xA001             ADR      R0,??UnityAssertFloatSpecial_0
   \   0000005E   0x5D40             LDRB     R0,[R0, R5]
   \   00000060   0x4487             ADD      PC,PC,R0
   \   00000062   0xBF00             Nop      
   \                     ??UnityAssertFloatSpecial_0:
   \   00000064   0x08 0x08          DC8      0x8,0x8,0x2A,0x2A
   \              0x2A 0x2A    
   \   00000068   0x50 0x50          DC8      0x50,0x50,0x64,0x64
   \              0x64 0x64    
    730              {
    731                  /* To determine Inf / Neg Inf, we compare to an Inf / Neg Inf value we create on the fly
    732                   * We are using a variable to hold the zero value because some compilers complain about dividing by zero otherwise */
    733                  case UNITY_FLOAT_IS_INF:
    734                  case UNITY_FLOAT_IS_NOT_INF:
    735                      is_trait = isinf(actual) & ispos(actual);
   \                     ??UnityAssertFloatSpecial_5: (+1)
   \   0000006C   0x0030             MOVS     R0,R6
   \   0000006E   0x.... 0x....      BL       __iar_FDtest
   \   00000072   0x2801             CMP      R0,#+1
   \   00000074   0xD101             BNE      ??UnityAssertFloatSpecial_6
   \   00000076   0x2301             MOVS     R3,#+1
   \   00000078   0xE000             B        ??UnityAssertFloatSpecial_7
   \                     ??UnityAssertFloatSpecial_6: (+1)
   \   0000007A   0x2300             MOVS     R3,#+0
   \                     ??UnityAssertFloatSpecial_7: (+1)
   \   0000007C   0x0030             MOVS     R0,R6
   \   0000007E   0x05E1             LSLS     R1,R4,#+23
   \   00000080   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000084   0xD801             BHI      ??UnityAssertFloatSpecial_8
   \   00000086   0x2201             MOVS     R2,#+1
   \   00000088   0xE011             B        ??UnityAssertFloatSpecial_9
   \                     ??UnityAssertFloatSpecial_8: (+1)
   \   0000008A   0x2200             MOVS     R2,#+0
   \   0000008C   0xE00F             B.N      ??UnityAssertFloatSpecial_9
    736                      break;
    737                  case UNITY_FLOAT_IS_NEG_INF:
    738                  case UNITY_FLOAT_IS_NOT_NEG_INF:
    739                      is_trait = isinf(actual) & isneg(actual);
   \                     ??UnityAssertFloatSpecial_10: (+1)
   \   0000008E   0x0030             MOVS     R0,R6
   \   00000090   0x.... 0x....      BL       __iar_FDtest
   \   00000094   0x2801             CMP      R0,#+1
   \   00000096   0xD101             BNE      ??UnityAssertFloatSpecial_11
   \   00000098   0x2301             MOVS     R3,#+1
   \   0000009A   0xE000             B        ??UnityAssertFloatSpecial_12
   \                     ??UnityAssertFloatSpecial_11: (+1)
   \   0000009C   0x2300             MOVS     R3,#+0
   \                     ??UnityAssertFloatSpecial_12: (+1)
   \   0000009E   0x0030             MOVS     R0,R6
   \   000000A0   0x2100             MOVS     R1,#+0
   \   000000A2   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000A6   0xD201             BCS      ??UnityAssertFloatSpecial_13
   \   000000A8   0x2201             MOVS     R2,#+1
   \   000000AA   0xE000             B        ??UnityAssertFloatSpecial_9
   \                     ??UnityAssertFloatSpecial_13: (+1)
   \   000000AC   0x2200             MOVS     R2,#+0
   \                     ??UnityAssertFloatSpecial_9: (+1)
   \   000000AE   0x401A             ANDS     R2,R2,R3
   \   000000B0   0x17D3             ASRS     R3,R2,#+31
    740                      break;
   \   000000B2   0xE017             B        ??UnityAssertFloatSpecial_14
    741          
    742                  /* NaN is the only floating point value that does NOT equal itself. Therefore if Actual == Actual, then it is NOT NaN. */
    743                  case UNITY_FLOAT_IS_NAN:
    744                  case UNITY_FLOAT_IS_NOT_NAN:
    745                      is_trait = isnan(actual);
   \                     ??UnityAssertFloatSpecial_15: (+1)
   \   000000B4   0x0030             MOVS     R0,R6
   \   000000B6   0x.... 0x....      BL       __iar_FDtest
   \   000000BA   0x2802             CMP      R0,#+2
   \   000000BC   0xD101             BNE      ??UnityAssertFloatSpecial_16
   \   000000BE   0x2201             MOVS     R2,#+1
   \   000000C0   0xE00F             B        ??UnityAssertFloatSpecial_17
   \                     ??UnityAssertFloatSpecial_16: (+1)
   \   000000C2   0x2200             MOVS     R2,#+0
   \   000000C4   0x2300             MOVS     R3,#+0
   \   000000C6   0xE00D             B        ??UnityAssertFloatSpecial_14
    746                      break;
    747          
    748                  /* A determinate number is non infinite and not NaN. (therefore the opposite of the two above) */
    749                  case UNITY_FLOAT_IS_DET:
    750                  case UNITY_FLOAT_IS_NOT_DET:
    751                      if (isinf(actual) | isnan(actual))
   \                     ??UnityAssertFloatSpecial_18: (+1)
   \   000000C8   0x0030             MOVS     R0,R6
   \   000000CA   0x.... 0x....      BL       __iar_FDtest
   \   000000CE   0x2801             CMP      R0,#+1
   \   000000D0   0xD100             BNE      ??UnityAssertFloatSpecial_19
   \   000000D2   0x2400             MOVS     R4,#+0
   \                     ??UnityAssertFloatSpecial_19: (+1)
   \   000000D4   0x0030             MOVS     R0,R6
   \   000000D6   0x.... 0x....      BL       __iar_FDtest
   \   000000DA   0x2802             CMP      R0,#+2
   \   000000DC   0xD100             BNE      ??UnityAssertFloatSpecial_20
   \   000000DE   0x2400             MOVS     R4,#+0
    752                          is_trait = 0;
    753                      else
    754                          is_trait = 1;
   \                     ??UnityAssertFloatSpecial_20: (+1)
   \   000000E0   0x0022             MOVS     R2,R4
   \                     ??UnityAssertFloatSpecial_17: (+1)
   \   000000E2   0x2300             MOVS     R3,#+0
   \                     ??UnityAssertFloatSpecial_14: (+1)
   \   000000E4   0xA802             ADD      R0,SP,#+8
   \   000000E6   0xC803             LDM      R0,{R0,R1}
   \   000000E8   0x0084             LSLS     R4,R0,#+2
   \   000000EA   0xE002             B        ??UnityAssertFloatSpecial_21
    755                      break;
    756          
    757                  default:
    758                      trait_index = 0;
   \                     ??UnityAssertFloatSpecial_4: (+1)
   \   000000EC   0x2400             MOVS     R4,#+0
    759                      trait_names[0] = UnityStrInvalidFloatTrait;
   \   000000EE   0x....             LDR      R0,??DataTable46
   \   000000F0   0x9004             STR      R0,[SP, #+16]
    760                      break;
    761              }
    762          
    763              if (is_trait != should_be_trait)
   \                     ??UnityAssertFloatSpecial_21: (+1)
   \   000000F2   0x4668             MOV      R0,SP
   \   000000F4   0xC803             LDM      R0,{R0,R1}
   \   000000F6   0x428B             CMP      R3,R1
   \   000000F8   0xD101             BNE      ??UnityAssertFloatSpecial_22
   \   000000FA   0x4282             CMP      R2,R0
   \   000000FC   0xD033             BEQ      ??UnityAssertFloatSpecial_3
    764              {
    765                  UnityTestResultsFailBegin(lineNumber);
   \                     ??UnityAssertFloatSpecial_22: (+1)
   \   000000FE   0xA808             ADD      R0,SP,#+32
   \   00000100   0xC80C             LDM      R0!,{R2,R3}
   \   00000102   0x....             LDR      R0,??DataTable47
   \   00000104   0x6800             LDR      R0,[R0, #+0]
   \   00000106   0x.... 0x....      BL       UnityTestResultsBegin
   \   0000010A   0x....             LDR      R0,??DataTable47_1
   \   0000010C   0x.... 0x....      BL       UnityPrint
   \   00000110   0x203A             MOVS     R0,#+58
   \   00000112   0x.... 0x....      BL       utest_safe_putc
    766                  UnityPrint(UnityStrExpected);
   \   00000116   0x....             LDR      R0,??DataTable47_2
   \   00000118   0x.... 0x....      BL       UnityPrint
    767                  if (!should_be_trait)
   \   0000011C   0x4668             MOV      R0,SP
   \   0000011E   0xC803             LDM      R0,{R0,R1}
   \   00000120   0x2900             CMP      R1,#+0
   \   00000122   0xD104             BNE      ??UnityAssertFloatSpecial_23
   \   00000124   0x2800             CMP      R0,#+0
   \   00000126   0xD102             BNE      ??UnityAssertFloatSpecial_23
    768                      UnityPrint(UnityStrNot);
   \   00000128   0x....             LDR      R0,??DataTable47_9
   \   0000012A   0x.... 0x....      BL       UnityPrint
    769                  UnityPrint(trait_names[trait_index]);
   \                     ??UnityAssertFloatSpecial_23: (+1)
   \   0000012E   0xA804             ADD      R0,SP,#+16
   \   00000130   0x5904             LDR      R4,[R0, R4]
   \   00000132   0x0020             MOVS     R0,R4
   \   00000134   0x.... 0x....      BL       UnityPrint
    770                  UnityPrint(UnityStrWas);
   \   00000138   0x....             LDR      R0,??DataTable47_3
   \   0000013A   0x.... 0x....      BL       UnityPrint
    771          #ifdef UNITY_FLOAT_VERBOSE
    772                  UnityPrintFloat(actual);
    773          #else
    774                  if (should_be_trait)
   \   0000013E   0x4668             MOV      R0,SP
   \   00000140   0xC803             LDM      R0,{R0,R1}
   \   00000142   0x2900             CMP      R1,#+0
   \   00000144   0xD101             BNE      ??UnityAssertFloatSpecial_24
   \   00000146   0x2800             CMP      R0,#+0
   \   00000148   0xD002             BEQ      ??UnityAssertFloatSpecial_25
    775                      UnityPrint(UnityStrNot);
   \                     ??UnityAssertFloatSpecial_24: (+1)
   \   0000014A   0x....             LDR      R0,??DataTable47_9
   \   0000014C   0x.... 0x....      BL       UnityPrint
    776                  UnityPrint(trait_names[trait_index]);
   \                     ??UnityAssertFloatSpecial_25: (+1)
   \   00000150   0x0020             MOVS     R0,R4
   \   00000152   0x.... 0x....      BL       UnityPrint
    777          #endif
    778                  UnityAddMsgIfSpecified(msg);
   \   00000156   0x980A             LDR      R0,[SP, #+40]
   \   00000158   0x.... 0x....      BL       UnityAddMsgIfSpecified
    779                  UNITY_FAIL_AND_BAIL;
   \   0000015C   0x200A             MOVS     R0,#+10
   \   0000015E   0x.... 0x....      BL       utest_safe_putc
   \   00000162   0x.... 0x....      BL       utest_unity_assert_failure
    780              }
    781          }
   \                     ??UnityAssertFloatSpecial_3: (+1)
   \   00000166   0xB00B             ADD      SP,SP,#+44
   \   00000168   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x........         DC32 UnityStrInf, UnityStrNegInf, UnityStrNaN, UnityStrDet
   \              0x........   
   \              0x........   
   \              0x........   
    782          
    783          #endif /* not UNITY_EXCLUDE_FLOAT */
    784          
    785          /*-----------------------------------------------*/
    786          #ifndef UNITY_EXCLUDE_DOUBLE

   \                                 In section .text, align 2, keep-with-next
    787          void UnityAssertEqualDoubleArray(UNITY_PTR_ATTRIBUTE const _UD* expected,
    788                                           UNITY_PTR_ATTRIBUTE const _UD* actual,
    789                                           const _UU32 num_elements,
    790                                           const char* msg,
    791                                           const UNITY_LINE_TYPE lineNumber)
    792          {
   \                     UnityAssertEqualDoubleArray: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000E             MOVS     R6,R1
   \   00000008   0x0014             MOVS     R4,R2
    793              _UU32 elements = num_elements;
    794              UNITY_PTR_ATTRIBUTE const _UD* ptr_expected = expected;
   \   0000000A   0x9503             STR      R5,[SP, #+12]
    795              UNITY_PTR_ATTRIBUTE const _UD* ptr_actual = actual;
   \   0000000C   0x9602             STR      R6,[SP, #+8]
   \   0000000E   0x....             LDR      R0,??DataTable47_4
   \   00000010   0xC803             LDM      R0,{R0,R1}
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xD000             BEQ      .+4
   \   00000016   0xE0C4             B        ??UnityAssertEqualDoubleArray_0
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD000             BEQ      .+4
   \   0000001C   0xE0C1             B        ??UnityAssertEqualDoubleArray_0
   \   0000001E   0x....             LDR      R0,??DataTable47_5
   \   00000020   0xC803             LDM      R0,{R0,R1}
   \   00000022   0x2900             CMP      R1,#+0
   \   00000024   0xD000             BEQ      .+4
   \   00000026   0xE0BC             B        ??UnityAssertEqualDoubleArray_0
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD000             BEQ      .+4
   \   0000002C   0xE0B9             B        ??UnityAssertEqualDoubleArray_0
    796              _UD diff, tol;
    797          
    798              UNITY_SKIP_EXECUTION;
    799          
    800              if (elements == 0)
   \   0000002E   0x2C00             CMP      R4,#+0
   \   00000030   0xD116             BNE      ??UnityAssertEqualDoubleArray_1
    801              {
    802                  UnityPrintPointlessAndBail();
   \   00000032   0xA80A             ADD      R0,SP,#+40
   \   00000034   0xC80C             LDM      R0!,{R2,R3}
   \   00000036   0x....             LDR      R0,??DataTable47
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x.... 0x....      BL       UnityTestResultsBegin
   \   0000003E   0x....             LDR      R0,??DataTable47_1
   \   00000040   0x.... 0x....      BL       UnityPrint
   \   00000044   0x203A             MOVS     R0,#+58
   \   00000046   0x.... 0x....      BL       utest_safe_putc
   \   0000004A   0x....             LDR      R0,??DataTable47_6
   \   0000004C   0x.... 0x....      BL       UnityPrint
   \   00000050   0x9804             LDR      R0,[SP, #+16]
   \   00000052   0x.... 0x....      BL       UnityAddMsgIfSpecified
   \   00000056   0x200A             MOVS     R0,#+10
   \   00000058   0x.... 0x....      BL       utest_safe_putc
   \   0000005C   0x.... 0x....      BL       utest_unity_assert_failure
    803              }
    804          
    805              if (UnityCheckArraysForNull((UNITY_INTERNAL_PTR)expected, (UNITY_INTERNAL_PTR)actual, lineNumber, msg) == 1)
   \                     ??UnityAssertEqualDoubleArray_1: (+1)
   \   00000060   0x9804             LDR      R0,[SP, #+16]
   \   00000062   0x9000             STR      R0,[SP, #+0]
   \   00000064   0xA80A             ADD      R0,SP,#+40
   \   00000066   0xC80C             LDM      R0!,{R2,R3}
   \   00000068   0x0031             MOVS     R1,R6
   \   0000006A   0x0028             MOVS     R0,R5
   \   0000006C   0x.... 0x....      BL       UnityCheckArraysForNull
   \   00000070   0x2801             CMP      R0,#+1
   \   00000072   0xD100             BNE      .+4
   \   00000074   0xE095             B        ??UnityAssertEqualDoubleArray_0
   \   00000076   0x2C00             CMP      R4,#+0
   \   00000078   0xD100             BNE      .+4
   \   0000007A   0xE092             B        ??UnityAssertEqualDoubleArray_0
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0x9001             STR      R0,[SP, #+4]
   \   00000080   0x9400             STR      R4,[SP, #+0]
    806                  return;
    807          
    808              while (elements--)
    809              {
    810                  diff = *ptr_expected - *ptr_actual;
   \                     ??UnityAssertEqualDoubleArray_2: (+1)
   \   00000082   0x9803             LDR      R0,[SP, #+12]
   \   00000084   0xC8C0             LDM      R0!,{R6,R7}
   \   00000086   0x0030             MOVS     R0,R6
   \   00000088   0x0039             MOVS     R1,R7
   \   0000008A   0x9A02             LDR      R2,[SP, #+8]
   \   0000008C   0xCA0C             LDM      R2,{R2,R3}
   \   0000008E   0x.... 0x....      BL       __aeabi_dsub
   \   00000092   0x0004             MOVS     R4,R0
   \   00000094   0x000D             MOVS     R5,R1
    811                  if (diff < 0.0)
   \   00000096   0x9800             LDR      R0,[SP, #+0]
   \   00000098   0x1E40             SUBS     R0,R0,#+1
   \   0000009A   0x9000             STR      R0,[SP, #+0]
   \   0000009C   0x0020             MOVS     R0,R4
   \   0000009E   0x2200             MOVS     R2,#+0
   \   000000A0   0x2300             MOVS     R3,#+0
   \   000000A2   0x.... 0x....      BL       __aeabi_cdcmple
   \   000000A6   0xD202             BCS      ??UnityAssertEqualDoubleArray_3
    812                    diff = 0.0 - diff;
   \   000000A8   0x2080             MOVS     R0,#+128
   \   000000AA   0x0600             LSLS     R0,R0,#+24       ;; #-2147483648
   \   000000AC   0x4045             EORS     R5,R5,R0
    813                  tol = UNITY_DOUBLE_PRECISION * *ptr_expected;
   \                     ??UnityAssertEqualDoubleArray_3: (+1)
   \   000000AE   0x....             ADR      R2,??DataTable47_7
   \   000000B0   0xCA0C             LDM      R2,{R2,R3}
   \   000000B2   0x0030             MOVS     R0,R6
   \   000000B4   0x0039             MOVS     R1,R7
   \   000000B6   0x.... 0x....      BL       __aeabi_dmul
   \   000000BA   0x0006             MOVS     R6,R0
   \   000000BC   0x000F             MOVS     R7,R1
    814                  if (tol < 0.0)
   \   000000BE   0x2200             MOVS     R2,#+0
   \   000000C0   0x2300             MOVS     R3,#+0
   \   000000C2   0x.... 0x....      BL       __aeabi_cdcmple
   \   000000C6   0xD202             BCS      ??UnityAssertEqualDoubleArray_4
    815                      tol = 0.0 - tol;
   \   000000C8   0x2080             MOVS     R0,#+128
   \   000000CA   0x0600             LSLS     R0,R0,#+24       ;; #-2147483648
   \   000000CC   0x4047             EORS     R7,R7,R0
    816          
    817                  /* This first part of this condition will catch any NaN or Infinite values */
    818                  if (isnan(diff) || isinf(diff) || (diff > tol))
   \                     ??UnityAssertEqualDoubleArray_4: (+1)
   \   000000CE   0x0020             MOVS     R0,R4
   \   000000D0   0x0029             MOVS     R1,R5
   \   000000D2   0x.... 0x....      BL       __iar_Dtest
   \   000000D6   0x2802             CMP      R0,#+2
   \   000000D8   0xD00C             BEQ      ??UnityAssertEqualDoubleArray_5
   \   000000DA   0x0020             MOVS     R0,R4
   \   000000DC   0x0029             MOVS     R1,R5
   \   000000DE   0x.... 0x....      BL       __iar_Dtest
   \   000000E2   0x2801             CMP      R0,#+1
   \   000000E4   0xD006             BEQ      ??UnityAssertEqualDoubleArray_5
   \   000000E6   0x0030             MOVS     R0,R6
   \   000000E8   0x0039             MOVS     R1,R7
   \   000000EA   0x0022             MOVS     R2,R4
   \   000000EC   0x002B             MOVS     R3,R5
   \   000000EE   0x.... 0x....      BL       __aeabi_cdcmple
   \   000000F2   0xD249             BCS      ??UnityAssertEqualDoubleArray_6
    819                  {
    820                      UnityTestResultsFailBegin(lineNumber);
   \                     ??UnityAssertEqualDoubleArray_5: (+1)
   \   000000F4   0xA80A             ADD      R0,SP,#+40
   \   000000F6   0xC80C             LDM      R0!,{R2,R3}
   \   000000F8   0x....             LDR      R0,??DataTable47
   \   000000FA   0x6800             LDR      R0,[R0, #+0]
   \   000000FC   0x.... 0x....      BL       UnityTestResultsBegin
   \   00000100   0x....             LDR      R0,??DataTable47_1
   \   00000102   0x.... 0x....      BL       UnityPrint
   \   00000106   0x203A             MOVS     R0,#+58
   \   00000108   0x.... 0x....      BL       utest_safe_putc
    821                      UnityPrint(UnityStrElement);
   \   0000010C   0x....             LDR      R0,??DataTable47_8
   \   0000010E   0x.... 0x....      BL       UnityPrint
    822                      UnityPrintNumberUnsigned(num_elements - elements - 1);
   \   00000112   0x9E01             LDR      R6,[SP, #+4]
   \   00000114   0x2401             MOVS     R4,#+1
   \   00000116   0x2500             MOVS     R5,#+0
   \   00000118   0xE007             B        ??UnityAssertEqualDoubleArray_7
   \                     ??UnityAssertEqualDoubleArray_8: (+1)
   \   0000011A   0x0020             MOVS     R0,R4
   \   0000011C   0x0029             MOVS     R1,R5
   \   0000011E   0x220A             MOVS     R2,#+10
   \   00000120   0x2300             MOVS     R3,#+0
   \   00000122   0x.... 0x....      BL       __aeabi_lmul
   \   00000126   0x0004             MOVS     R4,R0
   \   00000128   0x000D             MOVS     R5,R1
   \                     ??UnityAssertEqualDoubleArray_7: (+1)
   \   0000012A   0x0030             MOVS     R0,R6
   \   0000012C   0x2100             MOVS     R1,#+0
   \   0000012E   0x0022             MOVS     R2,R4
   \   00000130   0x002B             MOVS     R3,R5
   \   00000132   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000136   0x2900             CMP      R1,#+0
   \   00000138   0xD8EF             BHI      ??UnityAssertEqualDoubleArray_8
   \   0000013A   0x280A             CMP      R0,#+10
   \   0000013C   0xD2ED             BCS      ??UnityAssertEqualDoubleArray_8
   \                     ??UnityAssertEqualDoubleArray_9: (+1)
   \   0000013E   0x0030             MOVS     R0,R6
   \   00000140   0x2100             MOVS     R1,#+0
   \   00000142   0x0022             MOVS     R2,R4
   \   00000144   0x002B             MOVS     R3,R5
   \   00000146   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000014A   0x220A             MOVS     R2,#+10
   \   0000014C   0x2300             MOVS     R3,#+0
   \   0000014E   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000152   0x0010             MOVS     R0,R2
   \   00000154   0x3030             ADDS     R0,R0,#+48
   \   00000156   0xB2C0             UXTB     R0,R0
   \   00000158   0x.... 0x....      BL       utest_safe_putc
   \   0000015C   0x0020             MOVS     R0,R4
   \   0000015E   0x0029             MOVS     R1,R5
   \   00000160   0x220A             MOVS     R2,#+10
   \   00000162   0x2300             MOVS     R3,#+0
   \   00000164   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000168   0x0004             MOVS     R4,R0
   \   0000016A   0x000D             MOVS     R5,R1
   \   0000016C   0xD1E7             BNE      ??UnityAssertEqualDoubleArray_9
   \   0000016E   0x2C00             CMP      R4,#+0
   \   00000170   0xD1E5             BNE      ??UnityAssertEqualDoubleArray_9
    823          #ifdef UNITY_DOUBLE_VERBOSE
    824                      UnityPrint(UnityStrExpected);
    825                      UnityPrintFloat((float)(*ptr_expected));
    826                      UnityPrint(UnityStrWas);
    827                      UnityPrintFloat((float)(*ptr_actual));
    828          #else
    829                      UnityPrint(UnityStrDelta);
   \   00000172   0x....             LDR      R0,??DataTable48
   \   00000174   0x.... 0x....      BL       UnityPrint
    830          #endif
    831                      UnityAddMsgIfSpecified(msg);
   \   00000178   0x9804             LDR      R0,[SP, #+16]
   \   0000017A   0x.... 0x....      BL       UnityAddMsgIfSpecified
    832                      UNITY_FAIL_AND_BAIL;
   \   0000017E   0x200A             MOVS     R0,#+10
   \   00000180   0x.... 0x....      BL       utest_safe_putc
   \   00000184   0x.... 0x....      BL       utest_unity_assert_failure
    833                  }
    834                  ptr_expected++;
   \                     ??UnityAssertEqualDoubleArray_6: (+1)
   \   00000188   0x9803             LDR      R0,[SP, #+12]
   \   0000018A   0x3008             ADDS     R0,R0,#+8
   \   0000018C   0x9003             STR      R0,[SP, #+12]
    835                  ptr_actual++;
   \   0000018E   0x9802             LDR      R0,[SP, #+8]
   \   00000190   0x3008             ADDS     R0,R0,#+8
   \   00000192   0x9002             STR      R0,[SP, #+8]
   \   00000194   0x9801             LDR      R0,[SP, #+4]
   \   00000196   0x1C40             ADDS     R0,R0,#+1
   \   00000198   0x9001             STR      R0,[SP, #+4]
    836              }
   \   0000019A   0x9800             LDR      R0,[SP, #+0]
   \   0000019C   0x2800             CMP      R0,#+0
   \   0000019E   0xD000             BEQ      .+4
   \   000001A0   0xE76F             B        ??UnityAssertEqualDoubleArray_2
    837          }
   \                     ??UnityAssertEqualDoubleArray_0: (+1)
   \   000001A2   0xB005             ADD      SP,SP,#+20
   \   000001A4   0xBDF0             POP      {R4-R7,PC}       ;; return
    838          
    839          /*-----------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    840          void UnityAssertDoublesWithin(const _UD delta,
    841                                        const _UD expected,
    842                                        const _UD actual,
    843                                        const char* msg,
    844                                        const UNITY_LINE_TYPE lineNumber)
    845          {
   \                     UnityAssertDoublesWithin: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0006             MOVS     R6,R0
   \   00000004   0x000F             MOVS     R7,R1
    846              _UD diff = actual - expected;
   \   00000006   0xA806             ADD      R0,SP,#+24
   \   00000008   0xC803             LDM      R0,{R0,R1}
   \   0000000A   0x.... 0x....      BL       __aeabi_dsub
   \   0000000E   0x0004             MOVS     R4,R0
   \   00000010   0x000D             MOVS     R5,R1
    847              _UD pos_delta = delta;
   \   00000012   0x....             LDR      R0,??DataTable47_4
   \   00000014   0xC803             LDM      R0,{R0,R1}
   \   00000016   0x2900             CMP      R1,#+0
   \   00000018   0xD143             BNE      ??UnityAssertDoublesWithin_0
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD141             BNE      ??UnityAssertDoublesWithin_0
   \   0000001E   0x....             LDR      R0,??DataTable47_5
   \   00000020   0xC803             LDM      R0,{R0,R1}
   \   00000022   0x2900             CMP      R1,#+0
   \   00000024   0xD13D             BNE      ??UnityAssertDoublesWithin_0
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD13B             BNE      ??UnityAssertDoublesWithin_0
    848          
    849              UNITY_SKIP_EXECUTION;
    850          
    851              if (diff < 0.0)
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x0029             MOVS     R1,R5
   \   0000002E   0x2200             MOVS     R2,#+0
   \   00000030   0x2300             MOVS     R3,#+0
   \   00000032   0x.... 0x....      BL       __aeabi_cdcmple
   \   00000036   0xD202             BCS      ??UnityAssertDoublesWithin_1
    852              {
    853                  diff = 0.0 - diff;
   \   00000038   0x2080             MOVS     R0,#+128
   \   0000003A   0x0600             LSLS     R0,R0,#+24       ;; #-2147483648
   \   0000003C   0x4045             EORS     R5,R5,R0
    854              }
    855              if (pos_delta < 0.0)
   \                     ??UnityAssertDoublesWithin_1: (+1)
   \   0000003E   0x0030             MOVS     R0,R6
   \   00000040   0x0039             MOVS     R1,R7
   \   00000042   0x.... 0x....      BL       __aeabi_cdcmple
   \   00000046   0xD202             BCS      ??UnityAssertDoublesWithin_2
    856              {
    857                  pos_delta = 0.0 - pos_delta;
   \   00000048   0x2080             MOVS     R0,#+128
   \   0000004A   0x0600             LSLS     R0,R0,#+24       ;; #-2147483648
   \   0000004C   0x4047             EORS     R7,R7,R0
    858              }
    859          
    860              /* This first part of this condition will catch any NaN or Infinite values */
    861              if (isnan(diff) || isinf(diff) || (pos_delta < diff))
   \                     ??UnityAssertDoublesWithin_2: (+1)
   \   0000004E   0x0020             MOVS     R0,R4
   \   00000050   0x0029             MOVS     R1,R5
   \   00000052   0x.... 0x....      BL       __iar_Dtest
   \   00000056   0x2802             CMP      R0,#+2
   \   00000058   0xD00C             BEQ      ??UnityAssertDoublesWithin_3
   \   0000005A   0x0020             MOVS     R0,R4
   \   0000005C   0x0029             MOVS     R1,R5
   \   0000005E   0x.... 0x....      BL       __iar_Dtest
   \   00000062   0x2801             CMP      R0,#+1
   \   00000064   0xD006             BEQ      ??UnityAssertDoublesWithin_3
   \   00000066   0x0030             MOVS     R0,R6
   \   00000068   0x0039             MOVS     R1,R7
   \   0000006A   0x0022             MOVS     R2,R4
   \   0000006C   0x002B             MOVS     R3,R5
   \   0000006E   0x.... 0x....      BL       __aeabi_cdcmple
   \   00000072   0xD216             BCS      ??UnityAssertDoublesWithin_0
    862              {
    863                  UnityTestResultsFailBegin(lineNumber);
   \                     ??UnityAssertDoublesWithin_3: (+1)
   \   00000074   0xA80A             ADD      R0,SP,#+40
   \   00000076   0xC80C             LDM      R0!,{R2,R3}
   \   00000078   0x....             LDR      R0,??DataTable47
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0x.... 0x....      BL       UnityTestResultsBegin
   \   00000080   0x....             LDR      R0,??DataTable47_1
   \   00000082   0x.... 0x....      BL       UnityPrint
   \   00000086   0x203A             MOVS     R0,#+58
   \   00000088   0x.... 0x....      BL       utest_safe_putc
    864          #ifdef UNITY_DOUBLE_VERBOSE
    865                  UnityPrint(UnityStrExpected);
    866                  UnityPrintFloat((float)expected);
    867                  UnityPrint(UnityStrWas);
    868                  UnityPrintFloat((float)actual);
    869          #else
    870                  UnityPrint(UnityStrDelta);
   \   0000008C   0x....             LDR      R0,??DataTable48
   \   0000008E   0x.... 0x....      BL       UnityPrint
    871          #endif
    872                  UnityAddMsgIfSpecified(msg);
   \   00000092   0x9808             LDR      R0,[SP, #+32]
   \   00000094   0x.... 0x....      BL       UnityAddMsgIfSpecified
    873                  UNITY_FAIL_AND_BAIL;
   \   00000098   0x200A             MOVS     R0,#+10
   \   0000009A   0x.... 0x....      BL       utest_safe_putc
   \   0000009E   0x.... 0x....      BL       utest_unity_assert_failure
    874              }
    875          }
   \                     ??UnityAssertDoublesWithin_0: (+1)
   \   000000A2   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    876          
    877          /*-----------------------------------------------*/
    878          

   \                                 In section .text, align 4, keep-with-next
    879          void UnityAssertDoubleSpecial(const _UD actual,
    880                                        const char* msg,
    881                                        const UNITY_LINE_TYPE lineNumber,
    882                                        const UNITY_FLOAT_TRAIT_T style)
    883          {
   \                     UnityAssertDoubleSpecial: (+1)
   \   00000000   0xB5F4             PUSH     {R2,R4-R7,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x000F             MOVS     R7,R1
    884              const char* trait_names[] = { UnityStrInf, UnityStrNegInf, UnityStrNaN, UnityStrDet };
   \   00000008   0xA804             ADD      R0,SP,#+16
   \   0000000A   0x....             LDR      R1,??DataTable49
   \   0000000C   0x2210             MOVS     R2,#+16
   \   0000000E   0x.... 0x....      BL       __aeabi_memcpy4
    885              _U_SINT should_be_trait   = ((_U_SINT)style & 1);
   \   00000012   0x2401             MOVS     R4,#+1
   \   00000014   0xA810             ADD      R0,SP,#+64
   \   00000016   0x7801             LDRB     R1,[R0, #+0]
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x4008             ANDS     R0,R0,R1
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x466A             MOV      R2,SP
   \   00000020   0xC203             STM      R2!,{R0,R1}
    886              _U_SINT is_trait          = !should_be_trait;
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0xC803             LDM      R0,{R0,R1}
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD101             BNE      ??UnityAssertDoubleSpecial_1
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0xE000             B        ??UnityAssertDoubleSpecial_2
   \                     ??UnityAssertDoubleSpecial_1: (+1)
   \   0000002E   0x2000             MOVS     R0,#+0
    887              _U_SINT trait_index       = (_U_SINT)(style >> 1);
   \                     ??UnityAssertDoubleSpecial_2: (+1)
   \   00000030   0xAA10             ADD      R2,SP,#+64
   \   00000032   0x7812             LDRB     R2,[R2, #+0]
   \   00000034   0x0852             LSRS     R2,R2,#+1
   \   00000036   0x2300             MOVS     R3,#+0
   \   00000038   0xAD02             ADD      R5,SP,#+8
   \   0000003A   0xC50C             STM      R5!,{R2,R3}
   \   0000003C   0x....             LDR      R2,??DataTable49_1
   \   0000003E   0xCA0C             LDM      R2,{R2,R3}
   \   00000040   0x2B00             CMP      R3,#+0
   \   00000042   0xD000             BEQ      .+4
   \   00000044   0xE0A0             B        ??UnityAssertDoubleSpecial_3
   \   00000046   0x2A00             CMP      R2,#+0
   \   00000048   0xD000             BEQ      .+4
   \   0000004A   0xE09D             B        ??UnityAssertDoubleSpecial_3
   \   0000004C   0x....             LDR      R2,??DataTable49_2
   \   0000004E   0xCA0C             LDM      R2,{R2,R3}
   \   00000050   0x2B00             CMP      R3,#+0
   \   00000052   0xD000             BEQ      .+4
   \   00000054   0xE098             B        ??UnityAssertDoubleSpecial_3
   \   00000056   0x2A00             CMP      R2,#+0
   \   00000058   0xD000             BEQ      .+4
   \   0000005A   0xE095             B        ??UnityAssertDoubleSpecial_3
    888          
    889              UNITY_SKIP_EXECUTION;
    890          
    891               switch(style)
   \   0000005C   0xAA10             ADD      R2,SP,#+64
   \   0000005E   0x7812             LDRB     R2,[R2, #+0]
   \   00000060   0x2A07             CMP      R2,#+7
   \   00000062   0xD851             BHI      ??UnityAssertDoubleSpecial_4
   \   00000064   0xA301             ADR      R3,??UnityAssertDoubleSpecial_0
   \   00000066   0x5C9B             LDRB     R3,[R3, R2]
   \   00000068   0x449F             ADD      PC,PC,R3
   \   0000006A   0xBF00             Nop      
   \                     ??UnityAssertDoubleSpecial_0:
   \   0000006C   0x08 0x08          DC8      0x8,0x8,0x30,0x30
   \              0x30 0x30    
   \   00000070   0x5C 0x5C          DC8      0x5C,0x5C,0x72,0x72
   \              0x72 0x72    
    892              {
    893                  /* To determine Inf / Neg Inf, we compare to an Inf / Neg Inf value we create on the fly
    894                   * We are using a variable to hold the zero value because some compilers complain about dividing by zero otherwise */
    895                  case UNITY_FLOAT_IS_INF:
    896                  case UNITY_FLOAT_IS_NOT_INF:
    897                      is_trait = isinf(actual) & ispos(actual);
   \                     ??UnityAssertDoubleSpecial_5: (+1)
   \   00000074   0x0030             MOVS     R0,R6
   \   00000076   0x0039             MOVS     R1,R7
   \   00000078   0x.... 0x....      BL       __iar_Dtest
   \   0000007C   0x2801             CMP      R0,#+1
   \   0000007E   0xD101             BNE      ??UnityAssertDoubleSpecial_6
   \   00000080   0x2501             MOVS     R5,#+1
   \   00000082   0xE000             B        ??UnityAssertDoubleSpecial_7
   \                     ??UnityAssertDoubleSpecial_6: (+1)
   \   00000084   0x2500             MOVS     R5,#+0
   \                     ??UnityAssertDoubleSpecial_7: (+1)
   \   00000086   0x0030             MOVS     R0,R6
   \   00000088   0x0039             MOVS     R1,R7
   \   0000008A   0x2200             MOVS     R2,#+0
   \   0000008C   0x0523             LSLS     R3,R4,#+20
   \   0000008E   0x.... 0x....      BL       __aeabi_cdrcmple
   \   00000092   0xD801             BHI      ??UnityAssertDoubleSpecial_8
   \   00000094   0x2001             MOVS     R0,#+1
   \   00000096   0xE014             B        ??UnityAssertDoubleSpecial_9
   \                     ??UnityAssertDoubleSpecial_8: (+1)
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0xE012             B.N      ??UnityAssertDoubleSpecial_9
    898                      break;
    899                  case UNITY_FLOAT_IS_NEG_INF:
    900                  case UNITY_FLOAT_IS_NOT_NEG_INF:
    901                      is_trait = isinf(actual) & isneg(actual);
   \                     ??UnityAssertDoubleSpecial_10: (+1)
   \   0000009C   0x0030             MOVS     R0,R6
   \   0000009E   0x0039             MOVS     R1,R7
   \   000000A0   0x.... 0x....      BL       __iar_Dtest
   \   000000A4   0x2801             CMP      R0,#+1
   \   000000A6   0xD101             BNE      ??UnityAssertDoubleSpecial_11
   \   000000A8   0x2501             MOVS     R5,#+1
   \   000000AA   0xE000             B        ??UnityAssertDoubleSpecial_12
   \                     ??UnityAssertDoubleSpecial_11: (+1)
   \   000000AC   0x2500             MOVS     R5,#+0
   \                     ??UnityAssertDoubleSpecial_12: (+1)
   \   000000AE   0x0030             MOVS     R0,R6
   \   000000B0   0x0039             MOVS     R1,R7
   \   000000B2   0x2200             MOVS     R2,#+0
   \   000000B4   0x2300             MOVS     R3,#+0
   \   000000B6   0x.... 0x....      BL       __aeabi_cdcmple
   \   000000BA   0xD201             BCS      ??UnityAssertDoubleSpecial_13
   \   000000BC   0x2001             MOVS     R0,#+1
   \   000000BE   0xE000             B        ??UnityAssertDoubleSpecial_9
   \                     ??UnityAssertDoubleSpecial_13: (+1)
   \   000000C0   0x2000             MOVS     R0,#+0
   \                     ??UnityAssertDoubleSpecial_9: (+1)
   \   000000C2   0x4028             ANDS     R0,R0,R5
   \   000000C4   0x17C1             ASRS     R1,R0,#+31
    902                      break;
   \   000000C6   0xE01B             B        ??UnityAssertDoubleSpecial_14
    903          
    904                  /* NaN is the only floating point value that does NOT equal itself. Therefore if Actual == Actual, then it is NOT NaN. */
    905                  case UNITY_FLOAT_IS_NAN:
    906                  case UNITY_FLOAT_IS_NOT_NAN:
    907                      is_trait = isnan(actual);
   \                     ??UnityAssertDoubleSpecial_15: (+1)
   \   000000C8   0x0030             MOVS     R0,R6
   \   000000CA   0x0039             MOVS     R1,R7
   \   000000CC   0x.... 0x....      BL       __iar_Dtest
   \   000000D0   0x2802             CMP      R0,#+2
   \   000000D2   0xD101             BNE      ??UnityAssertDoubleSpecial_16
   \   000000D4   0x2001             MOVS     R0,#+1
   \   000000D6   0xE012             B        ??UnityAssertDoubleSpecial_17
   \                     ??UnityAssertDoubleSpecial_16: (+1)
   \   000000D8   0x2000             MOVS     R0,#+0
   \   000000DA   0x2100             MOVS     R1,#+0
   \   000000DC   0xE010             B        ??UnityAssertDoubleSpecial_14
    908                      break;
    909          
    910                  /* A determinate number is non infinite and not NaN. (therefore the opposite of the two above) */
    911                  case UNITY_FLOAT_IS_DET:
    912                  case UNITY_FLOAT_IS_NOT_DET:
    913                      if (isinf(actual) | isnan(actual))
   \                     ??UnityAssertDoubleSpecial_18: (+1)
   \   000000DE   0x0030             MOVS     R0,R6
   \   000000E0   0x0039             MOVS     R1,R7
   \   000000E2   0x.... 0x....      BL       __iar_Dtest
   \   000000E6   0x2801             CMP      R0,#+1
   \   000000E8   0xD100             BNE      ??UnityAssertDoubleSpecial_19
   \   000000EA   0x2400             MOVS     R4,#+0
   \                     ??UnityAssertDoubleSpecial_19: (+1)
   \   000000EC   0x0030             MOVS     R0,R6
   \   000000EE   0x0039             MOVS     R1,R7
   \   000000F0   0x.... 0x....      BL       __iar_Dtest
   \   000000F4   0x2802             CMP      R0,#+2
   \   000000F6   0xD101             BNE      ??UnityAssertDoubleSpecial_20
   \   000000F8   0x2000             MOVS     R0,#+0
   \   000000FA   0xE000             B        ??UnityAssertDoubleSpecial_17
   \                     ??UnityAssertDoubleSpecial_20: (+1)
   \   000000FC   0x0020             MOVS     R0,R4
    914                          is_trait = 0;
    915                      else
    916                          is_trait = 1;
   \                     ??UnityAssertDoubleSpecial_17: (+1)
   \   000000FE   0x2100             MOVS     R1,#+0
   \                     ??UnityAssertDoubleSpecial_14: (+1)
   \   00000100   0xAA02             ADD      R2,SP,#+8
   \   00000102   0xCA0C             LDM      R2,{R2,R3}
   \   00000104   0x0094             LSLS     R4,R2,#+2
   \   00000106   0xE003             B        ??UnityAssertDoubleSpecial_21
    917                      break;
    918          
    919                  default:
    920                      trait_index = 0;
   \                     ??UnityAssertDoubleSpecial_4: (+1)
   \   00000108   0x2400             MOVS     R4,#+0
    921                      trait_names[0] = UnityStrInvalidFloatTrait;
   \   0000010A   0xBF00             Nop      
   \   0000010C   0x....             ADR.N    R2,UnityStrInvalidFloatTrait
   \   0000010E   0x9204             STR      R2,[SP, #+16]
    922                      break;
    923              }
    924          
    925              if (is_trait != should_be_trait)
   \                     ??UnityAssertDoubleSpecial_21: (+1)
   \   00000110   0x466A             MOV      R2,SP
   \   00000112   0xCA0C             LDM      R2,{R2,R3}
   \   00000114   0x4299             CMP      R1,R3
   \   00000116   0xD101             BNE      ??UnityAssertDoubleSpecial_22
   \   00000118   0x4290             CMP      R0,R2
   \   0000011A   0xD035             BEQ      ??UnityAssertDoubleSpecial_3
    926              {
    927                  UnityTestResultsFailBegin(lineNumber);
   \                     ??UnityAssertDoubleSpecial_22: (+1)
   \   0000011C   0xA80E             ADD      R0,SP,#+56
   \   0000011E   0xC80C             LDM      R0!,{R2,R3}
   \   00000120   0x....             LDR      R0,??DataTable50
   \   00000122   0x6800             LDR      R0,[R0, #+0]
   \   00000124   0x.... 0x....      BL       UnityTestResultsBegin
   \   00000128   0x....             LDR      R0,??DataTable50_1
   \   0000012A   0x.... 0x....      BL       UnityPrint
   \   0000012E   0x203A             MOVS     R0,#+58
   \   00000130   0x.... 0x....      BL       utest_safe_putc
    928                  UnityPrint(UnityStrExpected);
   \   00000134   0x....             LDR      R0,??DataTable50_2
   \   00000136   0x.... 0x....      BL       UnityPrint
    929                  if (!should_be_trait)
   \   0000013A   0x4668             MOV      R0,SP
   \   0000013C   0xC803             LDM      R0,{R0,R1}
   \   0000013E   0x2900             CMP      R1,#+0
   \   00000140   0xD105             BNE      ??UnityAssertDoubleSpecial_23
   \   00000142   0x2800             CMP      R0,#+0
   \   00000144   0xD103             BNE      ??UnityAssertDoubleSpecial_23
    930                      UnityPrint(UnityStrNot);
   \   00000146   0xBF00             Nop      
   \   00000148   0x....             ADR.N    R0,UnityStrNot
   \   0000014A   0x.... 0x....      BL       UnityPrint
    931                  UnityPrint(trait_names[trait_index]);
   \                     ??UnityAssertDoubleSpecial_23: (+1)
   \   0000014E   0xA804             ADD      R0,SP,#+16
   \   00000150   0x5904             LDR      R4,[R0, R4]
   \   00000152   0x0020             MOVS     R0,R4
   \   00000154   0x.... 0x....      BL       UnityPrint
    932                  UnityPrint(UnityStrWas);
   \   00000158   0x....             LDR      R0,??DataTable51
   \   0000015A   0x.... 0x....      BL       UnityPrint
    933          #ifdef UNITY_DOUBLE_VERBOSE
    934                  UnityPrintFloat(actual);
    935          #else
    936                  if (should_be_trait)
   \   0000015E   0x4668             MOV      R0,SP
   \   00000160   0xC803             LDM      R0,{R0,R1}
   \   00000162   0x2900             CMP      R1,#+0
   \   00000164   0xD101             BNE      ??UnityAssertDoubleSpecial_24
   \   00000166   0x2800             CMP      R0,#+0
   \   00000168   0xD003             BEQ      ??UnityAssertDoubleSpecial_25
    937                      UnityPrint(UnityStrNot);
   \                     ??UnityAssertDoubleSpecial_24: (+1)
   \   0000016A   0xBF00             Nop      
   \   0000016C   0x....             ADR.N    R0,UnityStrNot
   \   0000016E   0x.... 0x....      BL       UnityPrint
    938                  UnityPrint(trait_names[trait_index]);
   \                     ??UnityAssertDoubleSpecial_25: (+1)
   \   00000172   0x0020             MOVS     R0,R4
   \   00000174   0x.... 0x....      BL       UnityPrint
    939          #endif
    940                  UnityAddMsgIfSpecified(msg);
   \   00000178   0x9808             LDR      R0,[SP, #+32]
   \   0000017A   0x.... 0x....      BL       UnityAddMsgIfSpecified
    941                  UNITY_FAIL_AND_BAIL;
   \   0000017E   0x200A             MOVS     R0,#+10
   \   00000180   0x.... 0x....      BL       utest_safe_putc
   \   00000184   0x.... 0x....      BL       utest_unity_assert_failure
    942              }
    943          }
   \                     ??UnityAssertDoubleSpecial_3: (+1)
   \   00000188   0xB009             ADD      SP,SP,#+36
   \   0000018A   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x........         DC32 UnityStrInf, UnityStrNegInf, UnityStrNaN, UnityStrDet
   \              0x........   
   \              0x........   
   \              0x........   
    944          
    945          
    946          #endif /* not UNITY_EXCLUDE_DOUBLE */
    947          
    948          /*-----------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    949          void UnityAssertNumbersWithin( const _U_UINT delta,
    950                                         const _U_SINT expected,
    951                                         const _U_SINT actual,
    952                                         const char* msg,
    953                                         const UNITY_LINE_TYPE lineNumber,
    954                                         const UNITY_DISPLAY_STYLE_T style)
    955          {
   \                     UnityAssertNumbersWithin: (+1)
   \   00000000   0xB5FB             PUSH     {R0,R1,R3-R7,LR}
   \   00000002   0x0016             MOVS     R6,R2
   \   00000004   0x001F             MOVS     R7,R3
   \   00000006   0x....             LDR      R0,??DataTable49_1
   \   00000008   0xC803             LDM      R0,{R0,R1}
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD169             BNE      ??UnityAssertNumbersWithin_0
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD167             BNE      ??UnityAssertNumbersWithin_0
   \   00000012   0x....             LDR      R0,??DataTable49_2
   \   00000014   0xC803             LDM      R0,{R0,R1}
   \   00000016   0x2900             CMP      R1,#+0
   \   00000018   0xD163             BNE      ??UnityAssertNumbersWithin_0
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD161             BNE      ??UnityAssertNumbersWithin_0
   \   0000001E   0xA808             ADD      R0,SP,#+32
   \   00000020   0xC830             LDM      R0!,{R4,R5}
    956              UNITY_SKIP_EXECUTION;
    957          
    958              if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
   \   00000022   0xA80E             ADD      R0,SP,#+56
   \   00000024   0x7800             LDRB     R0,[R0, #+0]
   \   00000026   0x06C0             LSLS     R0,R0,#+27
   \   00000028   0xD50A             BPL      ??UnityAssertNumbersWithin_1
    959              {
    960                  if (actual > expected)
   \   0000002A   0x42AF             CMP      R7,R5
   \   0000002C   0xDC13             BGT      ??UnityAssertNumbersWithin_2
   \   0000002E   0xDB01             BLT      ??UnityAssertNumbersWithin_3
   \   00000030   0x42A6             CMP      R6,R4
   \   00000032   0xD210             BCS      ??UnityAssertNumbersWithin_2
    961                      Unity.CurrentTestFailed = ((_U_UINT)(actual - expected) > delta);
   \                     ??UnityAssertNumbersWithin_3: (+1)
   \   00000034   0x4668             MOV      R0,SP
   \   00000036   0xC803             LDM      R0,{R0,R1}
   \   00000038   0x002B             MOVS     R3,R5
   \   0000003A   0x1BA2             SUBS     R2,R4,R6
   \   0000003C   0x41BB             SBCS     R3,R3,R7
   \   0000003E   0xE00E             B        ??UnityAssertNumbersWithin_4
    962                  else
    963                      Unity.CurrentTestFailed = ((_U_UINT)(expected - actual) > delta);
    964              }
    965              else
    966              {
    967                  if ((_U_UINT)actual > (_U_UINT)expected)
   \                     ??UnityAssertNumbersWithin_1: (+1)
   \   00000040   0x42AF             CMP      R7,R5
   \   00000042   0xD808             BHI      ??UnityAssertNumbersWithin_2
   \   00000044   0xD301             BCC      ??UnityAssertNumbersWithin_5
   \   00000046   0x42A6             CMP      R6,R4
   \   00000048   0xD205             BCS      ??UnityAssertNumbersWithin_2
    968                      Unity.CurrentTestFailed = ((_U_UINT)(actual - expected) > delta);
   \                     ??UnityAssertNumbersWithin_5: (+1)
   \   0000004A   0x4668             MOV      R0,SP
   \   0000004C   0xC803             LDM      R0,{R0,R1}
   \   0000004E   0x002B             MOVS     R3,R5
   \   00000050   0x1BA2             SUBS     R2,R4,R6
   \   00000052   0x41BB             SBCS     R3,R3,R7
   \   00000054   0xE003             B        ??UnityAssertNumbersWithin_4
    969                  else
    970                      Unity.CurrentTestFailed = ((_U_UINT)(expected - actual) > delta);
   \                     ??UnityAssertNumbersWithin_2: (+1)
   \   00000056   0x4668             MOV      R0,SP
   \   00000058   0xC803             LDM      R0,{R0,R1}
   \   0000005A   0x1B12             SUBS     R2,R2,R4
   \   0000005C   0x41AB             SBCS     R3,R3,R5
   \                     ??UnityAssertNumbersWithin_4: (+1)
   \   0000005E   0x4299             CMP      R1,R3
   \   00000060   0xD805             BHI      ??UnityAssertNumbersWithin_6
   \   00000062   0xD301             BCC      ??UnityAssertNumbersWithin_7
   \   00000064   0x4290             CMP      R0,R2
   \   00000066   0xD202             BCS      ??UnityAssertNumbersWithin_6
   \                     ??UnityAssertNumbersWithin_7: (+1)
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0x2100             MOVS     R1,#+0
   \   0000006C   0xE001             B        ??UnityAssertNumbersWithin_8
   \                     ??UnityAssertNumbersWithin_6: (+1)
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x2100             MOVS     R1,#+0
   \                     ??UnityAssertNumbersWithin_8: (+1)
   \   00000072   0x....             LDR      R2,??DataTable49_1
   \   00000074   0xC203             STM      R2!,{R0,R1}
    971              }
    972          
    973              if (Unity.CurrentTestFailed)
   \   00000076   0x....             LDR      R0,??DataTable49_1
   \   00000078   0xC803             LDM      R0,{R0,R1}
   \   0000007A   0x2900             CMP      R1,#+0
   \   0000007C   0xD101             BNE      ??UnityAssertNumbersWithin_9
   \   0000007E   0x2800             CMP      R0,#+0
   \   00000080   0xD02F             BEQ      ??UnityAssertNumbersWithin_0
    974              {
    975                  UnityTestResultsFailBegin(lineNumber);
   \                     ??UnityAssertNumbersWithin_9: (+1)
   \   00000082   0xA80C             ADD      R0,SP,#+48
   \   00000084   0xC80C             LDM      R0!,{R2,R3}
   \   00000086   0x....             LDR      R0,??DataTable50
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0x.... 0x....      BL       UnityTestResultsBegin
   \   0000008E   0x....             LDR      R0,??DataTable50_1
   \   00000090   0x.... 0x....      BL       UnityPrint
   \   00000094   0x203A             MOVS     R0,#+58
   \   00000096   0x.... 0x....      BL       utest_safe_putc
    976                  UnityPrint(UnityStrDelta);
   \   0000009A   0xBF00             Nop      
   \   0000009C   0x....             ADR.N    R0,UnityStrDelta
   \   0000009E   0x.... 0x....      BL       UnityPrint
    977                  UnityPrintNumberByStyle((_U_SINT)delta, style);
   \   000000A2   0xA80E             ADD      R0,SP,#+56
   \   000000A4   0x7802             LDRB     R2,[R0, #+0]
   \   000000A6   0x4668             MOV      R0,SP
   \   000000A8   0xC803             LDM      R0,{R0,R1}
   \   000000AA   0x.... 0x....      BL       UnityPrintNumberByStyle
    978                  UnityPrint(UnityStrExpected);
   \   000000AE   0x....             LDR      R0,??DataTable50_2
   \   000000B0   0x.... 0x....      BL       UnityPrint
    979                  UnityPrintNumberByStyle(expected, style);
   \   000000B4   0xA80E             ADD      R0,SP,#+56
   \   000000B6   0x7802             LDRB     R2,[R0, #+0]
   \   000000B8   0x0030             MOVS     R0,R6
   \   000000BA   0x0039             MOVS     R1,R7
   \   000000BC   0x.... 0x....      BL       UnityPrintNumberByStyle
    980                  UnityPrint(UnityStrWas);
   \   000000C0   0x....             LDR      R0,??DataTable51
   \   000000C2   0x.... 0x....      BL       UnityPrint
    981                  UnityPrintNumberByStyle(actual, style);
   \   000000C6   0xA80E             ADD      R0,SP,#+56
   \   000000C8   0x7802             LDRB     R2,[R0, #+0]
   \   000000CA   0x0020             MOVS     R0,R4
   \   000000CC   0x0029             MOVS     R1,R5
   \   000000CE   0x.... 0x....      BL       UnityPrintNumberByStyle
    982                  UnityAddMsgIfSpecified(msg);
   \   000000D2   0x980A             LDR      R0,[SP, #+40]
   \   000000D4   0x.... 0x....      BL       UnityAddMsgIfSpecified
    983                  UNITY_FAIL_AND_BAIL;
   \   000000D8   0x200A             MOVS     R0,#+10
   \   000000DA   0x.... 0x....      BL       utest_safe_putc
   \   000000DE   0x.... 0x....      BL       utest_unity_assert_failure
    984              }
    985          }
   \                     ??UnityAssertNumbersWithin_0: (+1)
   \   000000E2   0xB003             ADD      SP,SP,#+12
   \   000000E4   0xBDF0             POP      {R4-R7,PC}       ;; return
    986          
    987          /*-----------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    988          void UnityAssertEqualString(const char* expected,
    989                                      const char* actual,
    990                                      const char* msg,
    991                                      const UNITY_LINE_TYPE lineNumber)
    992          {
   \                     UnityAssertEqualString: (+1)
   \   00000000   0xB5F4             PUSH     {R2,R4-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    993              _UU32 i;
    994          
    995              UNITY_SKIP_EXECUTION;
   \   00000006   0x....             LDR      R6,??DataTable50
   \   00000008   0x0030             MOVS     R0,R6
   \   0000000A   0x3030             ADDS     R0,R0,#+48
   \   0000000C   0xC803             LDM      R0,{R0,R1}
   \   0000000E   0x2900             CMP      R1,#+0
   \   00000010   0xD137             BNE      ??UnityAssertEqualString_0
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD135             BNE      ??UnityAssertEqualString_0
   \   00000016   0x0030             MOVS     R0,R6
   \   00000018   0x3038             ADDS     R0,R0,#+56
   \   0000001A   0xC803             LDM      R0,{R0,R1}
   \   0000001C   0x2900             CMP      R1,#+0
   \   0000001E   0xD130             BNE      ??UnityAssertEqualString_0
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD12E             BNE      ??UnityAssertEqualString_0
    996          
    997              /* if both pointers not null compare the strings */
    998              if (expected && actual)
   \   00000024   0x2C00             CMP      R4,#+0
   \   00000026   0xD00E             BEQ      ??UnityAssertEqualString_1
   \   00000028   0x2D00             CMP      R5,#+0
   \   0000002A   0xD00E             BEQ      ??UnityAssertEqualString_2
    999              {
   1000                  for (i = 0; expected[i] || actual[i]; i++)
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x0029             MOVS     R1,R5
   \                     ??UnityAssertEqualString_3: (+1)
   \   00000030   0x780B             LDRB     R3,[R1, #+0]
   \   00000032   0x7802             LDRB     R2,[R0, #+0]
   \   00000034   0x0017             MOVS     R7,R2
   \   00000036   0xD101             BNE      ??UnityAssertEqualString_4
   \   00000038   0x001F             MOVS     R7,R3
   \   0000003A   0xD022             BEQ      ??UnityAssertEqualString_0
   1001                  {
   1002                      if (expected[i] != actual[i])
   \                     ??UnityAssertEqualString_4: (+1)
   \   0000003C   0x429A             CMP      R2,R3
   \   0000003E   0xD104             BNE      ??UnityAssertEqualString_2
   1003                      {
   1004                          Unity.CurrentTestFailed = 1;
   1005                          break;
   1006                      }
   1007                  }
   \   00000040   0x1C49             ADDS     R1,R1,#+1
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0xE7F4             B        ??UnityAssertEqualString_3
   1008              }
   1009              else
   1010              { /* handle case of one pointers being null (if both null, test should pass) */
   1011                  if (expected != actual)
   \                     ??UnityAssertEqualString_1: (+1)
   \   00000046   0x2D00             CMP      R5,#+0
   \   00000048   0xD01B             BEQ      ??UnityAssertEqualString_0
   1012                  {
   1013                      Unity.CurrentTestFailed = 1;
   \                     ??UnityAssertEqualString_2: (+1)
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x0032             MOVS     R2,R6
   \   00000050   0x3230             ADDS     R2,R2,#+48
   \   00000052   0xC203             STM      R2!,{R0,R1}
   1014                  }
   1015              }
   1016          
   1017              if (Unity.CurrentTestFailed)
   1018              {
   1019                UnityTestResultsFailBegin(lineNumber);
   \   00000054   0xA806             ADD      R0,SP,#+24
   \   00000056   0xC80C             LDM      R0!,{R2,R3}
   \   00000058   0x6830             LDR      R0,[R6, #+0]
   \   0000005A   0x.... 0x....      BL       UnityTestResultsBegin
   \   0000005E   0x....             LDR      R0,??DataTable52
   \   00000060   0x.... 0x....      BL       UnityPrint
   \   00000064   0x203A             MOVS     R0,#+58
   \   00000066   0x.... 0x....      BL       utest_safe_putc
   1020                UnityPrintExpectedAndActualStrings(expected, actual);
   \   0000006A   0x0029             MOVS     R1,R5
   \   0000006C   0x0020             MOVS     R0,R4
   \   0000006E   0x.... 0x....      BL       UnityPrintExpectedAndActualStrings
   1021                UnityAddMsgIfSpecified(msg);
   \   00000072   0x9800             LDR      R0,[SP, #+0]
   \   00000074   0x.... 0x....      BL       UnityAddMsgIfSpecified
   1022                UNITY_FAIL_AND_BAIL;
   \   00000078   0x200A             MOVS     R0,#+10
   \   0000007A   0x.... 0x....      BL       utest_safe_putc
   \   0000007E   0x.... 0x....      BL       utest_unity_assert_failure
   1023              }
   1024          }
   \                     ??UnityAssertEqualString_0: (+1)
   \   00000082   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
   1025          
   1026          /*-----------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
   1027          void UnityAssertEqualStringLen(const char* expected,
   1028                                      const char* actual,
   1029                                      const _UU32 length,
   1030                                      const char* msg,
   1031                                      const UNITY_LINE_TYPE lineNumber)
   1032          {
   \                     UnityAssertEqualStringLen: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
   1033              _UU32 i;
   1034          
   1035              UNITY_SKIP_EXECUTION;
   \   00000006   0x....             LDR      R6,??DataTable52_1
   \   00000008   0x0030             MOVS     R0,R6
   \   0000000A   0x3030             ADDS     R0,R0,#+48
   \   0000000C   0xC803             LDM      R0,{R0,R1}
   \   0000000E   0x2900             CMP      R1,#+0
   \   00000010   0xD15F             BNE      ??UnityAssertEqualStringLen_0
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD15D             BNE      ??UnityAssertEqualStringLen_0
   \   00000016   0x0030             MOVS     R0,R6
   \   00000018   0x3038             ADDS     R0,R0,#+56
   \   0000001A   0xC803             LDM      R0,{R0,R1}
   \   0000001C   0x2900             CMP      R1,#+0
   \   0000001E   0xD158             BNE      ??UnityAssertEqualStringLen_0
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD156             BNE      ??UnityAssertEqualStringLen_0
   1036          
   1037              /* if both pointers not null compare the strings */
   1038              if (expected && actual)
   \   00000024   0x2D00             CMP      R5,#+0
   \   00000026   0xD013             BEQ      ??UnityAssertEqualStringLen_1
   \   00000028   0x2C00             CMP      R4,#+0
   \   0000002A   0xD013             BEQ      ??UnityAssertEqualStringLen_2
   1039              {
   1040                  for (i = 0; (expected[i] || actual[i]) && i < length; i++)
   \   0000002C   0x0029             MOVS     R1,R5
   \   0000002E   0x0022             MOVS     R2,R4
   \                     ??UnityAssertEqualStringLen_3: (+1)
   \   00000030   0x780B             LDRB     R3,[R1, #+0]
   \   00000032   0x001F             MOVS     R7,R3
   \   00000034   0xD102             BNE      ??UnityAssertEqualStringLen_4
   \   00000036   0x7817             LDRB     R7,[R2, #+0]
   \   00000038   0x2F00             CMP      R7,#+0
   \   0000003A   0xD04A             BEQ      ??UnityAssertEqualStringLen_0
   \                     ??UnityAssertEqualStringLen_4: (+1)
   \   0000003C   0x9F01             LDR      R7,[SP, #+4]
   \   0000003E   0x42B8             CMP      R0,R7
   \   00000040   0xD247             BCS      ??UnityAssertEqualStringLen_0
   1041                  {
   1042                      if (expected[i] != actual[i])
   \   00000042   0x7817             LDRB     R7,[R2, #+0]
   \   00000044   0x42BB             CMP      R3,R7
   \   00000046   0xD105             BNE      ??UnityAssertEqualStringLen_2
   1043                      {
   1044                          Unity.CurrentTestFailed = 1;
   1045                          break;
   1046                      }
   1047                  }
   \   00000048   0x1C40             ADDS     R0,R0,#+1
   \   0000004A   0x1C52             ADDS     R2,R2,#+1
   \   0000004C   0x1C49             ADDS     R1,R1,#+1
   \   0000004E   0xE7EF             B        ??UnityAssertEqualStringLen_3
   1048              }
   1049              else
   1050              { /* handle case of one pointers being null (if both null, test should pass) */
   1051                  if (expected != actual)
   \                     ??UnityAssertEqualStringLen_1: (+1)
   \   00000050   0x2C00             CMP      R4,#+0
   \   00000052   0xD03E             BEQ      ??UnityAssertEqualStringLen_0
   1052                  {
   1053                      Unity.CurrentTestFailed = 1;
   \                     ??UnityAssertEqualStringLen_2: (+1)
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0x2100             MOVS     R1,#+0
   \   00000058   0x0032             MOVS     R2,R6
   \   0000005A   0x3230             ADDS     R2,R2,#+48
   \   0000005C   0xC203             STM      R2!,{R0,R1}
   1054                  }
   1055              }
   1056          
   1057              if (Unity.CurrentTestFailed)
   1058              {
   1059                UnityTestResultsFailBegin(lineNumber);
   \   0000005E   0xA808             ADD      R0,SP,#+32
   \   00000060   0xC80C             LDM      R0!,{R2,R3}
   \   00000062   0x6830             LDR      R0,[R6, #+0]
   \   00000064   0x.... 0x....      BL       UnityTestResultsBegin
   \   00000068   0x....             LDR      R0,??DataTable52
   \   0000006A   0x.... 0x....      BL       UnityPrint
   \   0000006E   0x203A             MOVS     R0,#+58
   \   00000070   0x.... 0x....      BL       utest_safe_putc
   1060                UnityPrintExpectedAndActualStringsLen(expected, actual, length);
   \   00000074   0x....             LDR      R0,??DataTable52_2
   \   00000076   0x.... 0x....      BL       UnityPrint
   \   0000007A   0x2D00             CMP      R5,#+0
   \   0000007C   0xD00A             BEQ      ??UnityAssertEqualStringLen_5
   \   0000007E   0x2027             MOVS     R0,#+39
   \   00000080   0x.... 0x....      BL       utest_safe_putc
   \   00000084   0x9901             LDR      R1,[SP, #+4]
   \   00000086   0x0028             MOVS     R0,R5
   \   00000088   0x.... 0x....      BL       UnityPrintLen
   \   0000008C   0x2027             MOVS     R0,#+39
   \   0000008E   0x.... 0x....      BL       utest_safe_putc
   \   00000092   0xE002             B        ??UnityAssertEqualStringLen_6
   \                     ??UnityAssertEqualStringLen_5: (+1)
   \   00000094   0x....             ADR.N    R0,UnityStrNull
   \   00000096   0x.... 0x....      BL       UnityPrint
   \                     ??UnityAssertEqualStringLen_6: (+1)
   \   0000009A   0x....             LDR      R0,??DataTable51
   \   0000009C   0x.... 0x....      BL       UnityPrint
   \   000000A0   0x2C00             CMP      R4,#+0
   \   000000A2   0xD00A             BEQ      ??UnityAssertEqualStringLen_7
   \   000000A4   0x2027             MOVS     R0,#+39
   \   000000A6   0x.... 0x....      BL       utest_safe_putc
   \   000000AA   0x9901             LDR      R1,[SP, #+4]
   \   000000AC   0x0020             MOVS     R0,R4
   \   000000AE   0x.... 0x....      BL       UnityPrintLen
   \   000000B2   0x2027             MOVS     R0,#+39
   \   000000B4   0x.... 0x....      BL       utest_safe_putc
   \   000000B8   0xE003             B        ??UnityAssertEqualStringLen_8
   \                     ??UnityAssertEqualStringLen_7: (+1)
   \   000000BA   0xBF00             Nop      
   \   000000BC   0x....             ADR.N    R0,UnityStrNull
   \   000000BE   0x.... 0x....      BL       UnityPrint
   1061                UnityAddMsgIfSpecified(msg);
   \                     ??UnityAssertEqualStringLen_8: (+1)
   \   000000C2   0x9802             LDR      R0,[SP, #+8]
   \   000000C4   0x.... 0x....      BL       UnityAddMsgIfSpecified
   1062                UNITY_FAIL_AND_BAIL;
   \   000000C8   0x200A             MOVS     R0,#+10
   \   000000CA   0x.... 0x....      BL       utest_safe_putc
   \   000000CE   0x.... 0x....      BL       utest_unity_assert_failure
   1063              }
   1064          }
   \                     ??UnityAssertEqualStringLen_0: (+1)
   \   000000D2   0xB003             ADD      SP,SP,#+12
   \   000000D4   0xBDF0             POP      {R4-R7,PC}       ;; return
   1065          
   1066          
   1067          /*-----------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1068          void UnityAssertEqualStringArray( const char** expected,
   1069                                            const char** actual,
   1070                                            const _UU32 num_elements,
   1071                                            const char* msg,
   1072                                            const UNITY_LINE_TYPE lineNumber)
   1073          {
   \                     UnityAssertEqualStringArray: (+1)
   \   00000000   0xB53C             PUSH     {R2-R5,LR}
   \   00000002   0xB40F             PUSH     {R0-R3}
   \   00000004   0xB087             SUB      SP,SP,#+28
   1074              _UU32 i, j = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9001             STR      R0,[SP, #+4]
   \   0000000A   0x....             LDR      R0,??DataTable52_3
   \   0000000C   0xC803             LDM      R0,{R0,R1}
   \   0000000E   0x2900             CMP      R1,#+0
   \   00000010   0xD000             BEQ      .+4
   \   00000012   0xE0B0             B        ??UnityAssertEqualStringArray_0
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD000             BEQ      .+4
   \   00000018   0xE0AD             B        ??UnityAssertEqualStringArray_0
   \   0000001A   0x....             LDR      R0,??DataTable52_4
   \   0000001C   0xC803             LDM      R0,{R0,R1}
   \   0000001E   0x2900             CMP      R1,#+0
   \   00000020   0xD000             BEQ      .+4
   \   00000022   0xE0A8             B        ??UnityAssertEqualStringArray_0
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD000             BEQ      .+4
   \   00000028   0xE0A5             B        ??UnityAssertEqualStringArray_0
   1075          
   1076              UNITY_SKIP_EXECUTION;
   1077          
   1078              /* if no elements, it's an error */
   1079              if (num_elements == 0)
   \   0000002A   0x9809             LDR      R0,[SP, #+36]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD116             BNE      ??UnityAssertEqualStringArray_1
   1080              {
   1081                  UnityPrintPointlessAndBail();
   \   00000030   0xA810             ADD      R0,SP,#+64
   \   00000032   0xC80C             LDM      R0!,{R2,R3}
   \   00000034   0x....             LDR      R0,??DataTable52_1
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x.... 0x....      BL       UnityTestResultsBegin
   \   0000003C   0x....             LDR      R0,??DataTable52
   \   0000003E   0x.... 0x....      BL       UnityPrint
   \   00000042   0x203A             MOVS     R0,#+58
   \   00000044   0x.... 0x....      BL       utest_safe_putc
   \   00000048   0x....             LDR      R0,??DataTable52_5
   \   0000004A   0x.... 0x....      BL       UnityPrint
   \   0000004E   0x980A             LDR      R0,[SP, #+40]
   \   00000050   0x.... 0x....      BL       UnityAddMsgIfSpecified
   \   00000054   0x200A             MOVS     R0,#+10
   \   00000056   0x.... 0x....      BL       utest_safe_putc
   \   0000005A   0x.... 0x....      BL       utest_unity_assert_failure
   1082              }
   1083          
   1084              if (UnityCheckArraysForNull((UNITY_INTERNAL_PTR)expected, (UNITY_INTERNAL_PTR)actual, lineNumber, msg) == 1)
   \                     ??UnityAssertEqualStringArray_1: (+1)
   \   0000005E   0x980A             LDR      R0,[SP, #+40]
   \   00000060   0x9000             STR      R0,[SP, #+0]
   \   00000062   0xA810             ADD      R0,SP,#+64
   \   00000064   0xC80C             LDM      R0!,{R2,R3}
   \   00000066   0x9908             LDR      R1,[SP, #+32]
   \   00000068   0x9807             LDR      R0,[SP, #+28]
   \   0000006A   0x.... 0x....      BL       UnityCheckArraysForNull
   \   0000006E   0x2801             CMP      R0,#+1
   \   00000070   0xD100             BNE      .+4
   \   00000072   0xE080             B        ??UnityAssertEqualStringArray_0
   1085                  return;
   1086          
   1087              do
   1088              {
   1089                  /* if both pointers not null compare the strings */
   1090                  if (expected[j] && actual[j])
   \                     ??UnityAssertEqualStringArray_2: (+1)
   \   00000074   0x9801             LDR      R0,[SP, #+4]
   \   00000076   0x0081             LSLS     R1,R0,#+2
   \   00000078   0x9807             LDR      R0,[SP, #+28]
   \   0000007A   0x1840             ADDS     R0,R0,R1
   \   0000007C   0x9002             STR      R0,[SP, #+8]
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0x9A08             LDR      R2,[SP, #+32]
   \   00000082   0x1851             ADDS     R1,R2,R1
   \   00000084   0x9100             STR      R1,[SP, #+0]
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD00D             BEQ      ??UnityAssertEqualStringArray_3
   \   0000008A   0x6809             LDR      R1,[R1, #+0]
   \   0000008C   0x2900             CMP      R1,#+0
   \   0000008E   0xD00D             BEQ      ??UnityAssertEqualStringArray_4
   1091                  {
   1092                      for (i = 0; expected[j][i] || actual[j][i]; i++)
   \                     ??UnityAssertEqualStringArray_5: (+1)
   \   00000090   0x780A             LDRB     R2,[R1, #+0]
   \   00000092   0x7803             LDRB     R3,[R0, #+0]
   \   00000094   0x001C             MOVS     R4,R3
   \   00000096   0xD101             BNE      ??UnityAssertEqualStringArray_6
   \   00000098   0x0014             MOVS     R4,R2
   \   0000009A   0xD00C             BEQ      ??UnityAssertEqualStringArray_7
   1093                      {
   1094                          if (expected[j][i] != actual[j][i])
   \                     ??UnityAssertEqualStringArray_6: (+1)
   \   0000009C   0x4293             CMP      R3,R2
   \   0000009E   0xD105             BNE      ??UnityAssertEqualStringArray_4
   1095                          {
   1096                              Unity.CurrentTestFailed = 1;
   1097                              break;
   1098                          }
   1099                      }
   \   000000A0   0x1C49             ADDS     R1,R1,#+1
   \   000000A2   0x1C40             ADDS     R0,R0,#+1
   \   000000A4   0xE7F4             B        ??UnityAssertEqualStringArray_5
   1100                  }
   1101                  else
   1102                  { /* handle case of one pointers being null (if both null, test should pass) */
   1103                      if (expected[j] != actual[j])
   \                     ??UnityAssertEqualStringArray_3: (+1)
   \   000000A6   0x6808             LDR      R0,[R1, #+0]
   \   000000A8   0x2800             CMP      R0,#+0
   \   000000AA   0xD004             BEQ      ??UnityAssertEqualStringArray_7
   1104                      {
   1105                          Unity.CurrentTestFailed = 1;
   \                     ??UnityAssertEqualStringArray_4: (+1)
   \   000000AC   0x2001             MOVS     R0,#+1
   \   000000AE   0x2100             MOVS     R1,#+0
   \   000000B0   0x....             LDR      R2,??DataTable52_3
   \   000000B2   0xC203             STM      R2!,{R0,R1}
   \   000000B4   0xE005             B        ??UnityAssertEqualStringArray_8
   1106                      }
   1107                  }
   1108          
   1109                  if (Unity.CurrentTestFailed)
   \                     ??UnityAssertEqualStringArray_7: (+1)
   \   000000B6   0x....             LDR      R0,??DataTable52_3
   \   000000B8   0xC803             LDM      R0,{R0,R1}
   \   000000BA   0x2900             CMP      R1,#+0
   \   000000BC   0xD101             BNE      ??UnityAssertEqualStringArray_8
   \   000000BE   0x2800             CMP      R0,#+0
   \   000000C0   0xD052             BEQ      ??UnityAssertEqualStringArray_9
   1110                  {
   1111                      UnityTestResultsFailBegin(lineNumber);
   \                     ??UnityAssertEqualStringArray_8: (+1)
   \   000000C2   0xA810             ADD      R0,SP,#+64
   \   000000C4   0xC80C             LDM      R0!,{R2,R3}
   \   000000C6   0x....             LDR      R0,??DataTable52_1
   \   000000C8   0x6800             LDR      R0,[R0, #+0]
   \   000000CA   0x.... 0x....      BL       UnityTestResultsBegin
   \   000000CE   0x....             LDR      R0,??DataTable52
   \   000000D0   0x.... 0x....      BL       UnityPrint
   \   000000D4   0x203A             MOVS     R0,#+58
   \   000000D6   0x.... 0x....      BL       utest_safe_putc
   1112                      if (num_elements > 1)
   \   000000DA   0x9809             LDR      R0,[SP, #+36]
   \   000000DC   0x2802             CMP      R0,#+2
   \   000000DE   0xD335             BCC      ??UnityAssertEqualStringArray_10
   1113                      {
   1114                          UnityPrint(UnityStrElement);
   \   000000E0   0x....             LDR      R0,??DataTable53
   \   000000E2   0x.... 0x....      BL       UnityPrint
   1115                          UnityPrintNumberUnsigned(j);
   \   000000E6   0x9801             LDR      R0,[SP, #+4]
   \   000000E8   0x2100             MOVS     R1,#+0
   \   000000EA   0xAA04             ADD      R2,SP,#+16
   \   000000EC   0xC203             STM      R2!,{R0,R1}
   \   000000EE   0x2401             MOVS     R4,#+1
   \   000000F0   0x2500             MOVS     R5,#+0
   \   000000F2   0xE007             B        ??UnityAssertEqualStringArray_11
   \                     ??UnityAssertEqualStringArray_12: (+1)
   \   000000F4   0x0020             MOVS     R0,R4
   \   000000F6   0x0029             MOVS     R1,R5
   \   000000F8   0x220A             MOVS     R2,#+10
   \   000000FA   0x2300             MOVS     R3,#+0
   \   000000FC   0x.... 0x....      BL       __aeabi_lmul
   \   00000100   0x0004             MOVS     R4,R0
   \   00000102   0x000D             MOVS     R5,R1
   \                     ??UnityAssertEqualStringArray_11: (+1)
   \   00000104   0xA804             ADD      R0,SP,#+16
   \   00000106   0xC803             LDM      R0,{R0,R1}
   \   00000108   0x0022             MOVS     R2,R4
   \   0000010A   0x002B             MOVS     R3,R5
   \   0000010C   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000110   0x2900             CMP      R1,#+0
   \   00000112   0xD8EF             BHI      ??UnityAssertEqualStringArray_12
   \   00000114   0x280A             CMP      R0,#+10
   \   00000116   0xD2ED             BCS      ??UnityAssertEqualStringArray_12
   \                     ??UnityAssertEqualStringArray_13: (+1)
   \   00000118   0xA804             ADD      R0,SP,#+16
   \   0000011A   0xC803             LDM      R0,{R0,R1}
   \   0000011C   0x0022             MOVS     R2,R4
   \   0000011E   0x002B             MOVS     R3,R5
   \   00000120   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000124   0x220A             MOVS     R2,#+10
   \   00000126   0x2300             MOVS     R3,#+0
   \   00000128   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000012C   0x0010             MOVS     R0,R2
   \   0000012E   0x3030             ADDS     R0,R0,#+48
   \   00000130   0xB2C0             UXTB     R0,R0
   \   00000132   0x.... 0x....      BL       utest_safe_putc
   \   00000136   0x0020             MOVS     R0,R4
   \   00000138   0x0029             MOVS     R1,R5
   \   0000013A   0x220A             MOVS     R2,#+10
   \   0000013C   0x2300             MOVS     R3,#+0
   \   0000013E   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000142   0x0004             MOVS     R4,R0
   \   00000144   0x000D             MOVS     R5,R1
   \   00000146   0xD1E7             BNE      ??UnityAssertEqualStringArray_13
   \   00000148   0x2C00             CMP      R4,#+0
   \   0000014A   0xD1E5             BNE      ??UnityAssertEqualStringArray_13
   1116                      }
   1117                      UnityPrintExpectedAndActualStrings((const char*)(expected[j]), (const char*)(actual[j]));
   \                     ??UnityAssertEqualStringArray_10: (+1)
   \   0000014C   0x9800             LDR      R0,[SP, #+0]
   \   0000014E   0x6801             LDR      R1,[R0, #+0]
   \   00000150   0x9802             LDR      R0,[SP, #+8]
   \   00000152   0x6800             LDR      R0,[R0, #+0]
   \   00000154   0x.... 0x....      BL       UnityPrintExpectedAndActualStrings
   1118                      UnityAddMsgIfSpecified(msg);
   \   00000158   0x980A             LDR      R0,[SP, #+40]
   \   0000015A   0x.... 0x....      BL       UnityAddMsgIfSpecified
   1119                      UNITY_FAIL_AND_BAIL;
   \   0000015E   0x200A             MOVS     R0,#+10
   \   00000160   0x.... 0x....      BL       utest_safe_putc
   \   00000164   0x.... 0x....      BL       utest_unity_assert_failure
   1120                  }
   1121              } while (++j < num_elements);
   \                     ??UnityAssertEqualStringArray_9: (+1)
   \   00000168   0x9801             LDR      R0,[SP, #+4]
   \   0000016A   0x1C40             ADDS     R0,R0,#+1
   \   0000016C   0x9001             STR      R0,[SP, #+4]
   \   0000016E   0x9909             LDR      R1,[SP, #+36]
   \   00000170   0x4288             CMP      R0,R1
   \   00000172   0xD200             BCS      .+4
   \   00000174   0xE77E             B        ??UnityAssertEqualStringArray_2
   1122          }
   \                     ??UnityAssertEqualStringArray_0: (+1)
   \   00000176   0xB00D             ADD      SP,SP,#+52
   \   00000178   0xBD30             POP      {R4,R5,PC}       ;; return
   1123          
   1124          /*-----------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
   1125          void UnityAssertEqualMemory( UNITY_INTERNAL_PTR expected,
   1126                                       UNITY_INTERNAL_PTR actual,
   1127                                       const _UU32 length,
   1128                                       const _UU32 num_elements,
   1129                                       const char* msg,
   1130                                       const UNITY_LINE_TYPE lineNumber)
   1131          {
   \                     UnityAssertEqualMemory: (+1)
   \   00000000   0xB53C             PUSH     {R2-R5,LR}
   \   00000002   0xB40C             PUSH     {R2,R3}
   \   00000004   0xB08B             SUB      SP,SP,#+44
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   1132              UNITY_PTR_ATTRIBUTE const unsigned char* ptr_exp = (UNITY_PTR_ATTRIBUTE const unsigned char*)expected;
   \   0000000A   0x9403             STR      R4,[SP, #+12]
   1133              UNITY_PTR_ATTRIBUTE const unsigned char* ptr_act = (UNITY_PTR_ATTRIBUTE const unsigned char*)actual;
   \   0000000C   0x9502             STR      R5,[SP, #+8]
   1134              _UU32 elements = num_elements;
   \   0000000E   0x980C             LDR      R0,[SP, #+48]
   \   00000010   0x9001             STR      R0,[SP, #+4]
   \   00000012   0x....             LDR      R0,??DataTable54
   \   00000014   0xC803             LDM      R0,{R0,R1}
   \   00000016   0x2900             CMP      R1,#+0
   \   00000018   0xD000             BEQ      .+4
   \   0000001A   0xE11B             B        ??UnityAssertEqualMemory_0
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD000             BEQ      .+4
   \   00000020   0xE118             B        ??UnityAssertEqualMemory_0
   \   00000022   0x....             LDR      R0,??DataTable54_1
   \   00000024   0xC803             LDM      R0,{R0,R1}
   \   00000026   0x2900             CMP      R1,#+0
   \   00000028   0xD000             BEQ      .+4
   \   0000002A   0xE113             B        ??UnityAssertEqualMemory_0
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD000             BEQ      .+4
   \   00000030   0xE110             B        ??UnityAssertEqualMemory_0
   1135              _UU32 bytes;
   1136          
   1137              UNITY_SKIP_EXECUTION;
   1138          
   1139              if ((elements == 0) || (length == 0))
   \   00000032   0x9801             LDR      R0,[SP, #+4]
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD002             BEQ      ??UnityAssertEqualMemory_1
   \   00000038   0x980B             LDR      R0,[SP, #+44]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD116             BNE      ??UnityAssertEqualMemory_2
   1140              {
   1141                  UnityPrintPointlessAndBail();
   \                     ??UnityAssertEqualMemory_1: (+1)
   \   0000003E   0xA814             ADD      R0,SP,#+80
   \   00000040   0xC80C             LDM      R0!,{R2,R3}
   \   00000042   0x....             LDR      R0,??DataTable55
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x.... 0x....      BL       UnityTestResultsBegin
   \   0000004A   0x....             LDR      R0,??DataTable54_2
   \   0000004C   0x.... 0x....      BL       UnityPrint
   \   00000050   0x203A             MOVS     R0,#+58
   \   00000052   0x.... 0x....      BL       utest_safe_putc
   \   00000056   0x....             LDR      R0,??DataTable54_3
   \   00000058   0x.... 0x....      BL       UnityPrint
   \   0000005C   0x9812             LDR      R0,[SP, #+72]
   \   0000005E   0x.... 0x....      BL       UnityAddMsgIfSpecified
   \   00000062   0x200A             MOVS     R0,#+10
   \   00000064   0x.... 0x....      BL       utest_safe_putc
   \   00000068   0x.... 0x....      BL       utest_unity_assert_failure
   1142              }
   1143          
   1144              if (UnityCheckArraysForNull((UNITY_INTERNAL_PTR)expected, (UNITY_INTERNAL_PTR)actual, lineNumber, msg) == 1)
   \                     ??UnityAssertEqualMemory_2: (+1)
   \   0000006C   0x9812             LDR      R0,[SP, #+72]
   \   0000006E   0x9000             STR      R0,[SP, #+0]
   \   00000070   0xA814             ADD      R0,SP,#+80
   \   00000072   0xC80C             LDM      R0!,{R2,R3}
   \   00000074   0x0029             MOVS     R1,R5
   \   00000076   0x0020             MOVS     R0,R4
   \   00000078   0x.... 0x....      BL       UnityCheckArraysForNull
   \   0000007C   0x2801             CMP      R0,#+1
   \   0000007E   0xD000             BEQ      .+4
   \   00000080   0xE0E4             B        ??UnityAssertEqualMemory_3
   1145                  return;
   \   00000082   0xE0E7             B        ??UnityAssertEqualMemory_0
   1146          
   1147              while (elements--)
   \                     ??UnityAssertEqualMemory_4: (+1)
   \   00000084   0x1E40             SUBS     R0,R0,#+1
   \   00000086   0x9001             STR      R0,[SP, #+4]
   1148              {
   1149                  /* /////////////////////////////////// */
   1150                  bytes = length;
   \   00000088   0x980B             LDR      R0,[SP, #+44]
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD100             BNE      .+4
   \   0000008E   0xE0DD             B        ??UnityAssertEqualMemory_3
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x9004             STR      R0,[SP, #+16]
   \   00000094   0x980B             LDR      R0,[SP, #+44]
   \   00000096   0x9000             STR      R0,[SP, #+0]
   \   00000098   0x980C             LDR      R0,[SP, #+48]
   \   0000009A   0x9901             LDR      R1,[SP, #+4]
   \   0000009C   0x1A40             SUBS     R0,R0,R1
   \   0000009E   0x1E40             SUBS     R0,R0,#+1
   \   000000A0   0x2100             MOVS     R1,#+0
   \   000000A2   0xAA08             ADD      R2,SP,#+32
   \   000000A4   0xC203             STM      R2!,{R0,R1}
   1151                  while (bytes--)
   1152                  {
   1153                      if (*ptr_exp != *ptr_act)
   \                     ??UnityAssertEqualMemory_5: (+1)
   \   000000A6   0x9800             LDR      R0,[SP, #+0]
   \   000000A8   0x1E40             SUBS     R0,R0,#+1
   \   000000AA   0x9000             STR      R0,[SP, #+0]
   \   000000AC   0x9803             LDR      R0,[SP, #+12]
   \   000000AE   0x7800             LDRB     R0,[R0, #+0]
   \   000000B0   0x9902             LDR      R1,[SP, #+8]
   \   000000B2   0x7809             LDRB     R1,[R1, #+0]
   \   000000B4   0x4288             CMP      R0,R1
   \   000000B6   0xD100             BNE      .+4
   \   000000B8   0xE0BB             B        ??UnityAssertEqualMemory_6
   1154                      {
   1155                          UnityTestResultsFailBegin(lineNumber);
   \   000000BA   0xA814             ADD      R0,SP,#+80
   \   000000BC   0xC80C             LDM      R0!,{R2,R3}
   \   000000BE   0x....             LDR      R0,??DataTable55
   \   000000C0   0x6800             LDR      R0,[R0, #+0]
   \   000000C2   0x.... 0x....      BL       UnityTestResultsBegin
   \   000000C6   0x....             LDR      R0,??DataTable54_2
   \   000000C8   0x.... 0x....      BL       UnityPrint
   \   000000CC   0x203A             MOVS     R0,#+58
   \   000000CE   0x.... 0x....      BL       utest_safe_putc
   1156                          UnityPrint(UnityStrMemory);
   \   000000D2   0x....             LDR      R0,??DataTable56
   \   000000D4   0x.... 0x....      BL       UnityPrint
   1157                          if (num_elements > 1)
   \   000000D8   0x980C             LDR      R0,[SP, #+48]
   \   000000DA   0x2802             CMP      R0,#+2
   \   000000DC   0xD335             BCC      ??UnityAssertEqualMemory_7
   1158                          {
   1159                              UnityPrint(UnityStrElement);
   \   000000DE   0x....             LDR      R0,??DataTable53
   \   000000E0   0x.... 0x....      BL       UnityPrint
   1160                              UnityPrintNumberUnsigned(num_elements - elements - 1);
   \   000000E4   0xA808             ADD      R0,SP,#+32
   \   000000E6   0xC803             LDM      R0,{R0,R1}
   \   000000E8   0xAA06             ADD      R2,SP,#+24
   \   000000EA   0xC203             STM      R2!,{R0,R1}
   \   000000EC   0x2401             MOVS     R4,#+1
   \   000000EE   0x2500             MOVS     R5,#+0
   \   000000F0   0xE007             B        ??UnityAssertEqualMemory_8
   \                     ??UnityAssertEqualMemory_9: (+1)
   \   000000F2   0x0020             MOVS     R0,R4
   \   000000F4   0x0029             MOVS     R1,R5
   \   000000F6   0x220A             MOVS     R2,#+10
   \   000000F8   0x2300             MOVS     R3,#+0
   \   000000FA   0x.... 0x....      BL       __aeabi_lmul
   \   000000FE   0x0004             MOVS     R4,R0
   \   00000100   0x000D             MOVS     R5,R1
   \                     ??UnityAssertEqualMemory_8: (+1)
   \   00000102   0xA806             ADD      R0,SP,#+24
   \   00000104   0xC803             LDM      R0,{R0,R1}
   \   00000106   0x0022             MOVS     R2,R4
   \   00000108   0x002B             MOVS     R3,R5
   \   0000010A   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000010E   0x2900             CMP      R1,#+0
   \   00000110   0xD8EF             BHI      ??UnityAssertEqualMemory_9
   \   00000112   0x280A             CMP      R0,#+10
   \   00000114   0xD2ED             BCS      ??UnityAssertEqualMemory_9
   \                     ??UnityAssertEqualMemory_10: (+1)
   \   00000116   0xA806             ADD      R0,SP,#+24
   \   00000118   0xC803             LDM      R0,{R0,R1}
   \   0000011A   0x0022             MOVS     R2,R4
   \   0000011C   0x002B             MOVS     R3,R5
   \   0000011E   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000122   0x220A             MOVS     R2,#+10
   \   00000124   0x2300             MOVS     R3,#+0
   \   00000126   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000012A   0x0010             MOVS     R0,R2
   \   0000012C   0x3030             ADDS     R0,R0,#+48
   \   0000012E   0xB2C0             UXTB     R0,R0
   \   00000130   0x.... 0x....      BL       utest_safe_putc
   \   00000134   0x0020             MOVS     R0,R4
   \   00000136   0x0029             MOVS     R1,R5
   \   00000138   0x220A             MOVS     R2,#+10
   \   0000013A   0x2300             MOVS     R3,#+0
   \   0000013C   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000140   0x0004             MOVS     R4,R0
   \   00000142   0x000D             MOVS     R5,R1
   \   00000144   0xD1E7             BNE      ??UnityAssertEqualMemory_10
   \   00000146   0x2C00             CMP      R4,#+0
   \   00000148   0xD1E5             BNE      ??UnityAssertEqualMemory_10
   1161                          }
   1162                          UnityPrint(UnityStrByte);
   \                     ??UnityAssertEqualMemory_7: (+1)
   \   0000014A   0xBF00             Nop      
   \   0000014C   0x....             ADR.N    R0,UnityStrByte
   \   0000014E   0x.... 0x....      BL       UnityPrint
   1163                          UnityPrintNumberUnsigned(length - bytes - 1);
   \   00000152   0x9804             LDR      R0,[SP, #+16]
   \   00000154   0x2100             MOVS     R1,#+0
   \   00000156   0xAA06             ADD      R2,SP,#+24
   \   00000158   0xC203             STM      R2!,{R0,R1}
   \   0000015A   0x2401             MOVS     R4,#+1
   \   0000015C   0x2500             MOVS     R5,#+0
   \   0000015E   0xE007             B        ??UnityAssertEqualMemory_11
   \                     ??UnityAssertEqualMemory_12: (+1)
   \   00000160   0x0020             MOVS     R0,R4
   \   00000162   0x0029             MOVS     R1,R5
   \   00000164   0x220A             MOVS     R2,#+10
   \   00000166   0x2300             MOVS     R3,#+0
   \   00000168   0x.... 0x....      BL       __aeabi_lmul
   \   0000016C   0x0004             MOVS     R4,R0
   \   0000016E   0x000D             MOVS     R5,R1
   \                     ??UnityAssertEqualMemory_11: (+1)
   \   00000170   0xA806             ADD      R0,SP,#+24
   \   00000172   0xC803             LDM      R0,{R0,R1}
   \   00000174   0x0022             MOVS     R2,R4
   \   00000176   0x002B             MOVS     R3,R5
   \   00000178   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000017C   0x2900             CMP      R1,#+0
   \   0000017E   0xD8EF             BHI      ??UnityAssertEqualMemory_12
   \   00000180   0x280A             CMP      R0,#+10
   \   00000182   0xD2ED             BCS      ??UnityAssertEqualMemory_12
   \                     ??UnityAssertEqualMemory_13: (+1)
   \   00000184   0xA806             ADD      R0,SP,#+24
   \   00000186   0xC803             LDM      R0,{R0,R1}
   \   00000188   0x0022             MOVS     R2,R4
   \   0000018A   0x002B             MOVS     R3,R5
   \   0000018C   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000190   0x220A             MOVS     R2,#+10
   \   00000192   0x2300             MOVS     R3,#+0
   \   00000194   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000198   0x0010             MOVS     R0,R2
   \   0000019A   0x3030             ADDS     R0,R0,#+48
   \   0000019C   0xB2C0             UXTB     R0,R0
   \   0000019E   0x.... 0x....      BL       utest_safe_putc
   \   000001A2   0x0020             MOVS     R0,R4
   \   000001A4   0x0029             MOVS     R1,R5
   \   000001A6   0x220A             MOVS     R2,#+10
   \   000001A8   0x2300             MOVS     R3,#+0
   \   000001AA   0x.... 0x....      BL       __aeabi_uldivmod
   \   000001AE   0x0004             MOVS     R4,R0
   \   000001B0   0x000D             MOVS     R5,R1
   \   000001B2   0xD1E7             BNE      ??UnityAssertEqualMemory_13
   \   000001B4   0x2C00             CMP      R4,#+0
   \   000001B6   0xD1E5             BNE      ??UnityAssertEqualMemory_13
   1164                          UnityPrint(UnityStrExpected);
   \   000001B8   0x....             ADR.N    R0,UnityStrExpected
   \   000001BA   0x.... 0x....      BL       UnityPrint
   1165                          UnityPrintNumberByStyle(*ptr_exp, UNITY_DISPLAY_STYLE_HEX8);
   \   000001BE   0x2202             MOVS     R2,#+2
   \   000001C0   0x9803             LDR      R0,[SP, #+12]
   \   000001C2   0x7800             LDRB     R0,[R0, #+0]
   \   000001C4   0x2100             MOVS     R1,#+0
   \   000001C6   0x.... 0x....      BL       UnityPrintNumberHex
   1166                          UnityPrint(UnityStrWas);
   \   000001CA   0xBF00             Nop      
   \   000001CC   0x....             ADR.N    R0,UnityStrWas
   \   000001CE   0x.... 0x....      BL       UnityPrint
   1167                          UnityPrintNumberByStyle(*ptr_act, UNITY_DISPLAY_STYLE_HEX8);
   \   000001D2   0x2202             MOVS     R2,#+2
   \   000001D4   0x9802             LDR      R0,[SP, #+8]
   \   000001D6   0x7800             LDRB     R0,[R0, #+0]
   \   000001D8   0x2100             MOVS     R1,#+0
   \   000001DA   0x.... 0x....      BL       UnityPrintNumberHex
   1168                          UnityAddMsgIfSpecified(msg);
   \   000001DE   0x9812             LDR      R0,[SP, #+72]
   \   000001E0   0x2800             CMP      R0,#+0
   \   000001E2   0xD021             BEQ      ??UnityAssertEqualMemory_14
   \   000001E4   0x....             ADR.N    R0,UnityStrSpacer
   \   000001E6   0x.... 0x....      BL       UnityPrint
   \   000001EA   0x....             LDR      R0,??DataTable55
   \   000001EC   0x6880             LDR      R0,[R0, #+8]
   \   000001EE   0x2800             CMP      R0,#+0
   \   000001F0   0xD017             BEQ      ??UnityAssertEqualMemory_15
   \   000001F2   0xBF00             Nop      
   \   000001F4   0x....             ADR.N    R0,UnityStrDetail1Name
   \   000001F6   0x.... 0x....      BL       UnityPrint
   \   000001FA   0x....             LDR      R0,??DataTable55
   \   000001FC   0x6880             LDR      R0,[R0, #+8]
   \   000001FE   0x.... 0x....      BL       UnityPrint
   \   00000202   0x....             LDR      R0,??DataTable55
   \   00000204   0x68C0             LDR      R0,[R0, #+12]
   \   00000206   0x2800             CMP      R0,#+0
   \   00000208   0xD007             BEQ      ??UnityAssertEqualMemory_16
   \   0000020A   0xBF00             Nop      
   \   0000020C   0x....             ADR.N    R0,UnityStrDetail2Name
   \   0000020E   0x.... 0x....      BL       UnityPrint
   \   00000212   0x....             LDR      R0,??DataTable55
   \   00000214   0x68C0             LDR      R0,[R0, #+12]
   \   00000216   0x.... 0x....      BL       UnityPrint
   \                     ??UnityAssertEqualMemory_16: (+1)
   \   0000021A   0xBF00             Nop      
   \   0000021C   0x....             ADR.N    R0,UnityStrSpacer
   \   0000021E   0x.... 0x....      BL       UnityPrint
   \                     ??UnityAssertEqualMemory_15: (+1)
   \   00000222   0x9812             LDR      R0,[SP, #+72]
   \   00000224   0x.... 0x....      BL       UnityPrint
   1169                          UNITY_FAIL_AND_BAIL;
   \                     ??UnityAssertEqualMemory_14: (+1)
   \   00000228   0x200A             MOVS     R0,#+10
   \   0000022A   0x.... 0x....      BL       utest_safe_putc
   \   0000022E   0x.... 0x....      BL       utest_unity_assert_failure
   1170                      }
   1171                      ptr_exp = (UNITY_INTERNAL_PTR)((_UP)ptr_exp + 1);
   \                     ??UnityAssertEqualMemory_6: (+1)
   \   00000232   0x9803             LDR      R0,[SP, #+12]
   \   00000234   0x1C40             ADDS     R0,R0,#+1
   \   00000236   0x9003             STR      R0,[SP, #+12]
   1172                      ptr_act = (UNITY_INTERNAL_PTR)((_UP)ptr_act + 1);
   \   00000238   0x9802             LDR      R0,[SP, #+8]
   \   0000023A   0x1C40             ADDS     R0,R0,#+1
   \   0000023C   0x9002             STR      R0,[SP, #+8]
   \   0000023E   0x9804             LDR      R0,[SP, #+16]
   \   00000240   0x1C40             ADDS     R0,R0,#+1
   \   00000242   0x9004             STR      R0,[SP, #+16]
   1173                  }
   \   00000244   0x9800             LDR      R0,[SP, #+0]
   \   00000246   0x2800             CMP      R0,#+0
   \   00000248   0xD000             BEQ      .+4
   \   0000024A   0xE72C             B        ??UnityAssertEqualMemory_5
   1174                  /* /////////////////////////////////// */
   1175          
   1176              }
   \                     ??UnityAssertEqualMemory_3: (+1)
   \   0000024C   0x9801             LDR      R0,[SP, #+4]
   \   0000024E   0x2800             CMP      R0,#+0
   \   00000250   0xD000             BEQ      .+4
   \   00000252   0xE717             B        ??UnityAssertEqualMemory_4
   1177          }
   \                     ??UnityAssertEqualMemory_0: (+1)
   \   00000254   0xB00F             ADD      SP,SP,#+60
   \   00000256   0xBD30             POP      {R4,R5,PC}       ;; return
   1178          
   1179          /*-----------------------------------------------
   1180           * Control Functions
   1181           *-----------------------------------------------*/
   1182          

   \                                 In section .text, align 4, keep-with-next
   1183          void UnityFail(const char* msg, const UNITY_LINE_TYPE line)
   1184          {
   \                     UnityFail: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   1185              UNITY_SKIP_EXECUTION;
   \   00000004   0x....             LDR      R4,??DataTable55
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x3030             ADDS     R0,R0,#+48
   \   0000000A   0xC803             LDM      R0,{R0,R1}
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD138             BNE      ??UnityFail_0
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD136             BNE      ??UnityFail_0
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x3038             ADDS     R0,R0,#+56
   \   00000018   0xC803             LDM      R0,{R0,R1}
   \   0000001A   0x2900             CMP      R1,#+0
   \   0000001C   0xD131             BNE      ??UnityFail_0
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD12F             BNE      ??UnityFail_0
   1186          
   1187              UnityTestResultsBegin(Unity.TestFile, line);
   \   00000022   0x6820             LDR      R0,[R4, #+0]
   \   00000024   0x.... 0x....      BL       UnityTestResultsBegin
   1188              UnityPrintFail();
   \   00000028   0x....             LDR      R0,??DataTable54_2
   \   0000002A   0x.... 0x....      BL       UnityPrint
   1189              if (msg != NULL)
   \   0000002E   0x2D00             CMP      R5,#+0
   \   00000030   0xD022             BEQ      ??UnityFail_1
   1190              {
   1191                  UNITY_OUTPUT_CHAR(':');
   \   00000032   0x203A             MOVS     R0,#+58
   \   00000034   0x.... 0x....      BL       utest_safe_putc
   1192          
   1193          #ifndef UNITY_EXCLUDE_DETAILS
   1194                  if (Unity.CurrentDetail1)
   \   00000038   0x68A0             LDR      R0,[R4, #+8]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD013             BEQ      ??UnityFail_2
   1195                  {
   1196                      UnityPrint(UnityStrDetail1Name);
   \   0000003E   0xBF00             Nop      
   \   00000040   0x....             ADR.N    R0,UnityStrDetail1Name
   \   00000042   0x.... 0x....      BL       UnityPrint
   1197                      UnityPrint(Unity.CurrentDetail1);
   \   00000046   0x68A0             LDR      R0,[R4, #+8]
   \   00000048   0x.... 0x....      BL       UnityPrint
   1198                      if (Unity.CurrentDetail2)
   \   0000004C   0x68E0             LDR      R0,[R4, #+12]
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD006             BEQ      ??UnityFail_3
   1199                      {
   1200                          UnityPrint(UnityStrDetail2Name);
   \   00000052   0xBF00             Nop      
   \   00000054   0x....             ADR.N    R0,UnityStrDetail2Name
   \   00000056   0x.... 0x....      BL       UnityPrint
   1201                          UnityPrint(Unity.CurrentDetail2);
   \   0000005A   0x68E0             LDR      R0,[R4, #+12]
   \   0000005C   0x.... 0x....      BL       UnityPrint
   1202                      }
   1203                      UnityPrint(UnityStrSpacer);
   \                     ??UnityFail_3: (+1)
   \   00000060   0x....             ADR.N    R0,UnityStrSpacer
   \   00000062   0x.... 0x....      BL       UnityPrint
   1204                  }
   1205          #endif
   1206                  if (msg[0] != ' ')
   \                     ??UnityFail_2: (+1)
   \   00000066   0x7828             LDRB     R0,[R5, #+0]
   \   00000068   0x2820             CMP      R0,#+32
   \   0000006A   0xD002             BEQ      ??UnityFail_4
   1207                  {
   1208                      UNITY_OUTPUT_CHAR(' ');
   \   0000006C   0x2020             MOVS     R0,#+32
   \   0000006E   0x.... 0x....      BL       utest_safe_putc
   1209                  }
   1210                  UnityPrint(msg);
   \                     ??UnityFail_4: (+1)
   \   00000072   0x0028             MOVS     R0,R5
   \   00000074   0x.... 0x....      BL       UnityPrint
   1211              }
   1212              UNITY_FAIL_AND_BAIL;
   \                     ??UnityFail_1: (+1)
   \   00000078   0x200A             MOVS     R0,#+10
   \   0000007A   0x.... 0x....      BL       utest_safe_putc
   \   0000007E   0x.... 0x....      BL       utest_unity_assert_failure
   1213          }
   \                     ??UnityFail_0: (+1)
   \   00000082   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   1214          
   1215          /*-----------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
   1216          void UnityIgnore(const char* msg, const UNITY_LINE_TYPE line)
   1217          {
   \                     UnityIgnore: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1218              UNITY_SKIP_EXECUTION;
   \   00000004   0x....             LDR      R5,??DataTable58
   \   00000006   0x0028             MOVS     R0,R5
   \   00000008   0x3030             ADDS     R0,R0,#+48
   \   0000000A   0xC803             LDM      R0,{R0,R1}
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD11E             BNE      ??UnityIgnore_0
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD11C             BNE      ??UnityIgnore_0
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0x3038             ADDS     R0,R0,#+56
   \   00000018   0xC803             LDM      R0,{R0,R1}
   \   0000001A   0x2900             CMP      R1,#+0
   \   0000001C   0xD117             BNE      ??UnityIgnore_0
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD115             BNE      ??UnityIgnore_0
   1219          
   1220              UnityTestResultsBegin(Unity.TestFile, line);
   \   00000022   0x6828             LDR      R0,[R5, #+0]
   \   00000024   0x.... 0x....      BL       UnityTestResultsBegin
   1221              UnityPrint(UnityStrIgnore);
   \   00000028   0x....             ADR.N    R0,UnityStrIgnore
   \   0000002A   0x.... 0x....      BL       UnityPrint
   1222              if (msg != NULL)
   \   0000002E   0x2C00             CMP      R4,#+0
   \   00000030   0xD008             BEQ      ??UnityIgnore_1
   1223              {
   1224                UNITY_OUTPUT_CHAR(':');
   \   00000032   0x203A             MOVS     R0,#+58
   \   00000034   0x.... 0x....      BL       utest_safe_putc
   1225                UNITY_OUTPUT_CHAR(' ');
   \   00000038   0x2020             MOVS     R0,#+32
   \   0000003A   0x.... 0x....      BL       utest_safe_putc
   1226                UnityPrint(msg);
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x.... 0x....      BL       UnityPrint
   1227              }
   1228              UNITY_IGNORE_AND_BAIL;
   \                     ??UnityIgnore_1: (+1)
   \   00000044   0x200A             MOVS     R0,#+10
   \   00000046   0x.... 0x....      BL       utest_safe_putc
   \   0000004A   0x.... 0x....      BL       utest_unity_ignore_failure
   1229          }
   \                     ??UnityIgnore_0: (+1)
   \   0000004E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   1230          
   1231          /*-----------------------------------------------*/
   1232          #if defined(UNITY_WEAK_ATTRIBUTE)
   1233              UNITY_WEAK_ATTRIBUTE void setUp(void) { }
   1234              UNITY_WEAK_ATTRIBUTE void tearDown(void) { }
   1235          #elif defined(UNITY_WEAK_PRAGMA)
   1236          #   pragma weak setUp
   1237              void setUp(void) { }
   1238          #   pragma weak tearDown
   1239              void tearDown(void) { }
   1240          #endif
   1241          /*-----------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1242          void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
   1243          {
   \                     UnityDefaultTestRun: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0010             MOVS     R0,R2
   1244              Unity.CurrentTestName = FuncName;
   \   00000006   0x....             LDR      R5,??DataTable58
   \   00000008   0x6069             STR      R1,[R5, #+4]
   1245              Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
   \   0000000A   0x17C1             ASRS     R1,R0,#+31
   \   0000000C   0x002A             MOVS     R2,R5
   \   0000000E   0x3210             ADDS     R2,R2,#+16
   \   00000010   0xC203             STM      R2!,{R0,R1}
   1246              Unity.NumberOfTests++;
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0x3018             ADDS     R0,R0,#+24
   \   00000016   0xC803             LDM      R0,{R0,R1}
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x4151             ADCS     R1,R1,R2
   \   0000001E   0x002A             MOVS     R2,R5
   \   00000020   0x3218             ADDS     R2,R2,#+24
   \   00000022   0xC203             STM      R2!,{R0,R1}
   1247              UNITY_CLR_DETAILS();
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x60A8             STR      R0,[R5, #+8]
   \   00000028   0x60E8             STR      R0,[R5, #+12]
   1248              if (TEST_PROTECT())
   \   0000002A   0x0028             MOVS     R0,R5
   \   0000002C   0x3040             ADDS     R0,R0,#+64
   \   0000002E   0x.... 0x....      BL       setjmp
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD102             BNE      ??UnityDefaultTestRun_0
   1249              {
   1250                  setUp();
   \   00000036   0x.... 0x....      BL       setUp
   1251                  Func();
   \   0000003A   0x47A0             BLX      R4
   1252              }
   1253              if (TEST_PROTECT() && !(Unity.CurrentTestIgnored))
   \                     ??UnityDefaultTestRun_0: (+1)
   \   0000003C   0x0028             MOVS     R0,R5
   \   0000003E   0x3040             ADDS     R0,R0,#+64
   \   00000040   0x.... 0x....      BL       setjmp
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD108             BNE      ??UnityDefaultTestRun_1
   \   00000048   0x0028             MOVS     R0,R5
   \   0000004A   0x3038             ADDS     R0,R0,#+56
   \   0000004C   0xC803             LDM      R0,{R0,R1}
   \   0000004E   0x2900             CMP      R1,#+0
   \   00000050   0xD103             BNE      ??UnityDefaultTestRun_1
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD101             BNE      ??UnityDefaultTestRun_1
   1254              {
   1255                  tearDown();
   \   00000056   0x.... 0x....      BL       tearDown
   1256              }
   1257              UnityConcludeTest();
   \                     ??UnityDefaultTestRun_1: (+1)
   \   0000005A   0x.... 0x....      BL       UnityConcludeTest
   1258          }
   \   0000005E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   1259          
   1260          /*-----------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1261          void UnityBegin(const char* filename)
   1262          {
   \                     UnityBegin: (+1)
   \   00000000   0xB410             PUSH     {R4}
   1263              Unity.TestFile = filename;
   \   00000002   0x....             LDR      R2,??DataTable58
   \   00000004   0x6010             STR      R0,[R2, #+0]
   1264              Unity.CurrentTestName = NULL;
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x6053             STR      R3,[R2, #+4]
   1265              Unity.CurrentTestLineNumber = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x0014             MOVS     R4,R2
   \   00000010   0x3410             ADDS     R4,R4,#+16
   \   00000012   0xC403             STM      R4!,{R0,R1}
   1266              Unity.NumberOfTests = 0;
   \   00000014   0x0014             MOVS     R4,R2
   \   00000016   0x3418             ADDS     R4,R4,#+24
   \   00000018   0xC403             STM      R4!,{R0,R1}
   1267              Unity.TestFailures = 0;
   \   0000001A   0x0014             MOVS     R4,R2
   \   0000001C   0x3420             ADDS     R4,R4,#+32
   \   0000001E   0xC403             STM      R4!,{R0,R1}
   1268              Unity.TestIgnores = 0;
   \   00000020   0x0014             MOVS     R4,R2
   \   00000022   0x3428             ADDS     R4,R4,#+40
   \   00000024   0xC403             STM      R4!,{R0,R1}
   1269              Unity.CurrentTestFailed = 0;
   \   00000026   0x0014             MOVS     R4,R2
   \   00000028   0x3430             ADDS     R4,R4,#+48
   \   0000002A   0xC403             STM      R4!,{R0,R1}
   1270              Unity.CurrentTestIgnored = 0;
   \   0000002C   0x0014             MOVS     R4,R2
   \   0000002E   0x3438             ADDS     R4,R4,#+56
   \   00000030   0xC403             STM      R4!,{R0,R1}
   1271          
   1272              UNITY_CLR_DETAILS();
   \   00000032   0x6093             STR      R3,[R2, #+8]
   \   00000034   0x60D3             STR      R3,[R2, #+12]
   1273              UNITY_OUTPUT_START();
   1274          }
   \   00000036   0xBC10             POP      {R4}
   \   00000038   0x4770             BX       LR               ;; return
   1275          
   1276          /*-----------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
   1277          int UnityEnd(void)
   1278          {
   \                     UnityEnd: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1279              UNITY_PRINT_EOL();
   \   00000002   0x200A             MOVS     R0,#+10
   \   00000004   0x.... 0x....      BL       utest_safe_putc
   1280              UnityPrint(UnityStrBreaker);
   \   00000008   0x....             ADR.N    R0,UnityStrBreaker
   \   0000000A   0x.... 0x....      BL       UnityPrint
   1281              UNITY_PRINT_EOL();
   \   0000000E   0x200A             MOVS     R0,#+10
   \   00000010   0x.... 0x....      BL       utest_safe_putc
   1282              UnityPrintNumber((_U_SINT)(Unity.NumberOfTests));
   \   00000014   0x....             LDR      R4,??DataTable58
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x3018             ADDS     R0,R0,#+24
   \   0000001A   0xC803             LDM      R0,{R0,R1}
   \   0000001C   0x.... 0x....      BL       UnityPrintNumber
   1283              UnityPrint(UnityStrResultsTests);
   \   00000020   0x....             ADR.N    R0,UnityStrResultsTests
   \   00000022   0x.... 0x....      BL       UnityPrint
   1284              UnityPrintNumber((_U_SINT)(Unity.TestFailures));
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x3020             ADDS     R0,R0,#+32
   \   0000002A   0xC803             LDM      R0,{R0,R1}
   \   0000002C   0x.... 0x....      BL       UnityPrintNumber
   1285              UnityPrint(UnityStrResultsFailures);
   \   00000030   0x....             ADR.N    R0,UnityStrResultsFailures
   \   00000032   0x.... 0x....      BL       UnityPrint
   1286              UnityPrintNumber((_U_SINT)(Unity.TestIgnores));
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0x3028             ADDS     R0,R0,#+40
   \   0000003A   0xC803             LDM      R0,{R0,R1}
   \   0000003C   0x.... 0x....      BL       UnityPrintNumber
   1287              UnityPrint(UnityStrResultsIgnored);
   \   00000040   0x....             ADR.N    R0,UnityStrResultsIgnored
   \   00000042   0x.... 0x....      BL       UnityPrint
   1288              UNITY_PRINT_EOL();
   \   00000046   0x200A             MOVS     R0,#+10
   \   00000048   0x.... 0x....      BL       utest_safe_putc
   1289              if (Unity.TestFailures == 0U)
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0x3020             ADDS     R0,R0,#+32
   \   00000050   0xC803             LDM      R0,{R0,R1}
   \   00000052   0x2900             CMP      R1,#+0
   \   00000054   0xD104             BNE      ??UnityEnd_0
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD102             BNE      ??UnityEnd_0
   1290              {
   1291                  UnityPrintOk();
   \   0000005A   0xBF00             Nop      
   \   0000005C   0x....             ADR.N    R0,UnityStrOk
   \   0000005E   0xE000             B        ??UnityEnd_1
   1292              }
   1293              else
   1294              {
   1295                  UnityPrintFail();
   \                     ??UnityEnd_0: (+1)
   \   00000060   0x....             ADR.N    R0,UnityStrFail
   \                     ??UnityEnd_1: (+1)
   \   00000062   0x.... 0x....      BL       UnityPrint
   1296          #ifdef UNITY_DIFFERENTIATE_FINAL_FAIL
   1297                  UNITY_OUTPUT_CHAR('E'); UNITY_OUTPUT_CHAR('D');
   1298          #endif
   1299              }
   1300              UNITY_PRINT_EOL();
   \   00000066   0x200A             MOVS     R0,#+10
   \   00000068   0x.... 0x....      BL       utest_safe_putc
   1301              UNITY_OUTPUT_FLUSH();
   \   0000006C   0x....             LDR      R0,??DataTable58_1
   \   0000006E   0x.... 0x....      BL       fflush
   1302              UNITY_OUTPUT_COMPLETE();
   1303              return (int)(Unity.TestFailures);
   \   00000072   0x0020             MOVS     R0,R4
   \   00000074   0x3020             ADDS     R0,R0,#+32
   \   00000076   0xC803             LDM      R0,{R0,R1}
   \   00000078   0xBD10             POP      {R4,PC}          ;; return
   1304          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41:
   \   00000000   0x........         DC32     UnityStrFail

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_1:
   \   00000000   0x........         DC32     UnityStrOk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_2:
   \   00000000   0x........         DC32     Unity

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_3:
   \   00000000   0x........         DC32     __iar_Stdout

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_4:
   \   00000000   0x........         DC32     UnityStrSpacer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_5:
   \   00000000   0x........         DC32     UnityStrDetail1Name

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_6:
   \   00000000   0x........         DC32     UnityStrDetail2Name

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_7:
   \   00000000   0x........         DC32     UnityStrExpected

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_8:
   \   00000000   0x........         DC32     UnityStrNull

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41_9:
   \   00000000   0x........         DC32     UnityStrWas

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   0x........         DC32     UnityStrElement

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_1:
   \   00000000   0x........         DC32     UnityStrExpected

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_2:
   \   00000000   0x........         DC32     UnityStrWas

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44:
   \   00000000   0x........         DC32     Unity

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_1:
   \   00000000   0x........         DC32     UnityStrFail

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_2:
   \   00000000   0x........         DC32     Unity+0x30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_3:
   \   00000000   0x........         DC32     Unity+0x38

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_4:
   \   00000000   0x........         DC32     UnityStrPointless

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_5:
   \   00000000   0x3727C5AC         DC32     0x3727c5ac

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45:
   \   00000000   0x........         DC32     UnityStrElement

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_1:
   \   00000000   0x........         DC32     UnityStrDelta

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_3:
   \   00000000   0x........         DC32     Unity+0x30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_4:
   \   00000000   0x........         DC32     Unity+0x38

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46:
   \   00000000   0x........         DC32     UnityStrInvalidFloatTrait

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47:
   \   00000000   0x........         DC32     Unity

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_1:
   \   00000000   0x........         DC32     UnityStrFail

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_2:
   \   00000000   0x........         DC32     UnityStrExpected

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_3:
   \   00000000   0x........         DC32     UnityStrWas

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_4:
   \   00000000   0x........         DC32     Unity+0x30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_5:
   \   00000000   0x........         DC32     Unity+0x38

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_6:
   \   00000000   0x........         DC32     UnityStrPointless

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_7:
   \   00000000   0x80000000         DC32     0x80000000,0x3D719799
   \              0x3D719799   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_8:
   \   00000000   0x........         DC32     UnityStrElement

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_9:
   \   00000000   0x........         DC32     UnityStrNot

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable48:
   \   00000000   0x........         DC32     UnityStrDelta

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable49:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable49_1:
   \   00000000   0x........         DC32     Unity+0x30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable49_2:
   \   00000000   0x........         DC32     Unity+0x38

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable50:
   \   00000000   0x........         DC32     Unity

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable50_1:
   \   00000000   0x........         DC32     UnityStrFail

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable50_2:
   \   00000000   0x........         DC32     UnityStrExpected

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51:
   \   00000000   0x........         DC32     UnityStrWas

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52:
   \   00000000   0x........         DC32     UnityStrFail

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52_1:
   \   00000000   0x........         DC32     Unity

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52_2:
   \   00000000   0x........         DC32     UnityStrExpected

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52_3:
   \   00000000   0x........         DC32     Unity+0x30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52_4:
   \   00000000   0x........         DC32     Unity+0x38

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52_5:
   \   00000000   0x........         DC32     UnityStrPointless

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable53:
   \   00000000   0x........         DC32     UnityStrElement

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable54:
   \   00000000   0x........         DC32     Unity+0x30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable54_1:
   \   00000000   0x........         DC32     Unity+0x38

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable54_2:
   \   00000000   0x........         DC32     UnityStrFail

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable54_3:
   \   00000000   0x........         DC32     UnityStrPointless

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55:
   \   00000000   0x........         DC32     Unity

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable56:
   \   00000000   0x........         DC32     UnityStrMemory

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable58:
   \   00000000   0x........         DC32     Unity

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable58_1:
   \   00000000   0x........         DC32     __iar_Stdout
   1305          
   1306          /*-----------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   UnityAddMsgIfSpecified
        16   -> UnityPrint
      24   UnityAssertBits
        24   -> UnityAddMsgIfSpecified
        24   -> UnityPrint
        24   -> UnityPrintMask
        24   -> UnityTestResultsBegin
        24   -> utest_safe_putc
        24   -> utest_unity_assert_failure
      56   UnityAssertDoubleSpecial
        56   -> UnityAddMsgIfSpecified
        56   -> UnityPrint
        56   -> UnityTestResultsBegin
        56   -> __aeabi_memcpy4
        56   -> __iar_Dtest
        56   -> utest_safe_putc
        56   -> utest_unity_assert_failure
        56 __aeabi_cdcmple
        56 __aeabi_cdrcmple
      24   UnityAssertDoublesWithin
        24   -> UnityAddMsgIfSpecified
        24   -> UnityPrint
        24   -> UnityTestResultsBegin
        24   -> __aeabi_dsub
        24   -> __iar_Dtest
        24   -> utest_safe_putc
        24   -> utest_unity_assert_failure
        24 __aeabi_cdcmple
      40   UnityAssertEqualDoubleArray
        40   -> UnityAddMsgIfSpecified
        40   -> UnityCheckArraysForNull
        40   -> UnityPrint
        40   -> UnityTestResultsBegin
        40   -> __aeabi_dmul
        40   -> __aeabi_dsub
        40   -> __iar_Dtest
        40   -> utest_safe_putc
        40   -> utest_unity_assert_failure
        40 __aeabi_cdcmple
        40 __aeabi_lmul
        40 __aeabi_uldivmod
      40   UnityAssertEqualFloatArray
        40   -> UnityAddMsgIfSpecified
        40   -> UnityCheckArraysForNull
        40   -> UnityPrint
        40   -> UnityTestResultsBegin
        40   -> __aeabi_fmul
        40   -> __aeabi_fsub
        40   -> __iar_FDtest
        40   -> utest_safe_putc
        40   -> utest_unity_assert_failure
        40 __aeabi_cfcmple
        40 __aeabi_lmul
        40 __aeabi_uldivmod
      56   UnityAssertEqualIntArray
        56   -> UnityAddMsgIfSpecified
        56   -> UnityCheckArraysForNull
        56   -> UnityPrint
        56   -> UnityPrintNumberByStyle
        56   -> UnityPrintNumberUnsigned
        56   -> UnityTestResultsBegin
        56   -> utest_safe_putc
        56   -> utest_unity_assert_failure
        56 __aeabi_lmul
        56 __aeabi_uldivmod
      72   UnityAssertEqualMemory
        72   -> UnityAddMsgIfSpecified
        72   -> UnityCheckArraysForNull
        72   -> UnityPrint
        72   -> UnityPrintNumberHex
        72   -> UnityTestResultsBegin
        72   -> utest_safe_putc
        72   -> utest_unity_assert_failure
        72 __aeabi_lmul
        72 __aeabi_uldivmod
      24   UnityAssertEqualNumber
        24   -> UnityAddMsgIfSpecified
        24   -> UnityPrint
        24   -> UnityPrintNumberByStyle
        24   -> UnityTestResultsBegin
        24   -> utest_safe_putc
        24   -> utest_unity_assert_failure
      24   UnityAssertEqualString
        24   -> UnityAddMsgIfSpecified
        24   -> UnityPrint
        24   -> UnityPrintExpectedAndActualStrings
        24   -> UnityTestResultsBegin
        24   -> utest_safe_putc
        24   -> utest_unity_assert_failure
      64   UnityAssertEqualStringArray
        64   -> UnityAddMsgIfSpecified
        64   -> UnityCheckArraysForNull
        64   -> UnityPrint
        64   -> UnityPrintExpectedAndActualStrings
        64   -> UnityTestResultsBegin
        64   -> utest_safe_putc
        64   -> utest_unity_assert_failure
        64 __aeabi_lmul
        64 __aeabi_uldivmod
      32   UnityAssertEqualStringLen
        32   -> UnityAddMsgIfSpecified
        32   -> UnityPrint
        32   -> UnityPrintLen
        32   -> UnityTestResultsBegin
        32   -> utest_safe_putc
        32   -> utest_unity_assert_failure
      64   UnityAssertFloatSpecial
        64   -> UnityAddMsgIfSpecified
        64   -> UnityPrint
        64   -> UnityTestResultsBegin
        64   -> __aeabi_memcpy4
        64   -> __iar_FDtest
        64   -> utest_safe_putc
        64   -> utest_unity_assert_failure
        64 __aeabi_cfcmple
        64 __aeabi_cfrcmple
      24   UnityAssertFloatsWithin
        24   -> UnityAddMsgIfSpecified
        24   -> UnityPrint
        24   -> UnityTestResultsBegin
        24   -> __aeabi_fsub
        24   -> __iar_FDtest
        24   -> utest_safe_putc
        24   -> utest_unity_assert_failure
        24 __aeabi_cfcmple
      32   UnityAssertNumbersWithin
        32   -> UnityAddMsgIfSpecified
        32   -> UnityPrint
        32   -> UnityPrintNumberByStyle
        32   -> UnityTestResultsBegin
        32   -> utest_safe_putc
        32   -> utest_unity_assert_failure
       4   UnityBegin
      24   UnityCheckArraysForNull
        24   -> UnityAddMsgIfSpecified
        24   -> UnityPrint
        24   -> UnityTestResultsBegin
        24   -> utest_safe_putc
        24   -> utest_unity_assert_failure
       8   UnityConcludeTest
         8   -> UnityPrint
         8   -> UnityTestResultsBegin
         8   -> fflush
         8   -> utest_safe_putc
      16   UnityDefaultTestRun
        16   -- Indirect call
        16   -> UnityConcludeTest
        16   -> setUp
        16   -> setjmp
        16   -> tearDown
       8   UnityEnd
         8   -> UnityPrint
         8   -> UnityPrintNumber
         8   -> fflush
         8   -> utest_safe_putc
      16   UnityFail
        16   -> UnityPrint
        16   -> UnityTestResultsBegin
        16   -> utest_safe_putc
        16   -> utest_unity_assert_failure
      16   UnityIgnore
        16   -> UnityPrint
        16   -> UnityTestResultsBegin
        16   -> utest_safe_putc
        16   -> utest_unity_ignore_failure
       8   UnityPrint
         8   -> UnityPrintNumberHex
         8   -> utest_safe_putc
      16   UnityPrintExpectedAndActualStrings
        16   -> UnityPrint
        16   -> utest_safe_putc
       8   UnityPrintFail
         8   -> UnityPrint
      16   UnityPrintLen
        16   -> UnityPrintNumberHex
        16   -> utest_safe_putc
      32   UnityPrintMask
        32   -> utest_safe_putc
      16   UnityPrintNumber
        16   -> UnityPrintNumberUnsigned
        16   -> utest_safe_putc
       8   UnityPrintNumberByStyle
         8   -> UnityPrintNumber
         8   -> UnityPrintNumberHex
         8   -> UnityPrintNumberUnsigned
      24   UnityPrintNumberHex
        24   -> utest_safe_putc
        24 __aeabi_llsr
      24   UnityPrintNumberUnsigned
        24   -> utest_safe_putc
        24 __aeabi_lmul
        24 __aeabi_uldivmod
       8   UnityPrintOk
         8   -> UnityPrint
      16   UnityTestResultsBegin
        16   -> UnityPrint
        16   -> UnityPrintNumber
        16   -> utest_safe_putc


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable41
       4  ??DataTable41_1
       4  ??DataTable41_2
       4  ??DataTable41_3
       4  ??DataTable41_4
       4  ??DataTable41_5
       4  ??DataTable41_6
       4  ??DataTable41_7
       4  ??DataTable41_8
       4  ??DataTable41_9
       4  ??DataTable42
       4  ??DataTable42_1
       4  ??DataTable42_2
       4  ??DataTable44
       4  ??DataTable44_1
       4  ??DataTable44_2
       4  ??DataTable44_3
       4  ??DataTable44_4
       4  ??DataTable44_5
       4  ??DataTable45
       4  ??DataTable45_1
       4  ??DataTable45_2
       4  ??DataTable45_3
       4  ??DataTable45_4
       4  ??DataTable46
       4  ??DataTable47
       4  ??DataTable47_1
       4  ??DataTable47_2
       4  ??DataTable47_3
       4  ??DataTable47_4
       4  ??DataTable47_5
       4  ??DataTable47_6
       8  ??DataTable47_7
       4  ??DataTable47_8
       4  ??DataTable47_9
       4  ??DataTable48
       4  ??DataTable49
       4  ??DataTable49_1
       4  ??DataTable49_2
       4  ??DataTable50
       4  ??DataTable50_1
       4  ??DataTable50_2
       4  ??DataTable51
       4  ??DataTable52
       4  ??DataTable52_1
       4  ??DataTable52_2
       4  ??DataTable52_3
       4  ??DataTable52_4
       4  ??DataTable52_5
       4  ??DataTable53
       4  ??DataTable54
       4  ??DataTable54_1
       4  ??DataTable54_2
       4  ??DataTable54_3
       4  ??DataTable55
       4  ??DataTable56
       4  ??DataTable58
       4  ??DataTable58_1
      16  ?_0
      16  ?_1
     128  Unity
      66  UnityAddMsgIfSpecified
     136  UnityAssertBits
     396  UnityAssertDoubleSpecial
     164  UnityAssertDoublesWithin
     422  UnityAssertEqualDoubleArray
     402  UnityAssertEqualFloatArray
    1044  UnityAssertEqualIntArray
     600  UnityAssertEqualMemory
     122  UnityAssertEqualNumber
     132  UnityAssertEqualString
     378  UnityAssertEqualStringArray
     214  UnityAssertEqualStringLen
     362  UnityAssertFloatSpecial
     148  UnityAssertFloatsWithin
     230  UnityAssertNumbersWithin
      58  UnityBegin
     122  UnityCheckArraysForNull
     120  UnityConcludeTest
      96  UnityDefaultTestRun
     122  UnityEnd
     132  UnityFail
      80  UnityIgnore
      72  UnityPrint
      80  UnityPrintExpectedAndActualStrings
      10  UnityPrintFail
      84  UnityPrintLen
      50  UnityPrintMask
      38  UnityPrintNumber
      56  UnityPrintNumberByStyle
      64  UnityPrintNumberHex
     100  UnityPrintNumberUnsigned
      10  UnityPrintOk
      64  UnitySizeMask
      24  UnityStrBreaker
       8  UnityStrByte
      28  UnityStrDelta
      12  UnityStrDet
      12  UnityStrDetail1Name
      12  UnityStrDetail2Name
      12  UnityStrElement
      32  UnityStrErr64
      32  UnityStrErrDouble
      32  UnityStrErrFloat
      12  UnityStrExpected
       8  UnityStrFail
       8  UnityStrIgnore
      12  UnityStrInf
      20  UnityStrInvalidFloatTrait
      20  UnityStrMemory
       4  UnityStrNaN
      20  UnityStrNegInf
       8  UnityStrNot
       8  UnityStrNull
      28  UnityStrNullPointerForActual
      32  UnityStrNullPointerForExpected
       4  UnityStrOk
       8  UnityStrPass
      56  UnityStrPointless
      12  UnityStrResultsFailures
      12  UnityStrResultsIgnored
       8  UnityStrResultsTests
       4  UnityStrSpacer
       8  UnityStrWas
      46  UnityTestResultsBegin

 
   128 bytes in section .bss
   264 bytes in section .rodata
 6 720 bytes in section .text
 
 6 720 bytes of CODE  memory
   264 bytes of CONST memory
   128 bytes of DATA  memory

Errors: none
Warnings: none
