###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       16/Mar/2018  12:16:19
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\frameworks\utest\source\utest_shim.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DDEVICE_SERIAL=1 -DTARGET_CORTEX_M -DDEVICE_SPI=1 -DTARGET_LIKE_MBED
#        -DMBED_BUILD_TIMESTAMP=1521198946.13 -DARM_MATH_CM0 -DTARGET_RELEASE
#        -D__CORTEX_M0 -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0
#        -DTOOLCHAIN_object -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -f
#        .\BUILD\STEVAL_IDB007V1\iar\.includes_fc2e77952737cb4522ab0dffe8cfd8aa.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN
#        -I./mbed-os/features/frameworks
#        -I./mbed-os/features/frameworks/greentea-client
#        -I./mbed-os/features/frameworks/greentea-client/greentea-client
#        -I./mbed-os/features/frameworks/greentea-client/source
#        -I./mbed-os/features/frameworks/unity
#        -I./mbed-os/features/frameworks/unity/source
#        -I./mbed-os/features/frameworks/unity/unity
#        -I./mbed-os/features/frameworks/utest
#        -I./mbed-os/features/frameworks/utest/source
#        -I./mbed-os/features/frameworks/utest/utest
#        -I./mbed-os/features/mbedtls -I./mbed-os/features/mbedtls/importer
#        -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/features/netsocket
#        -I./mbed-os/features/netsocket/cellular
#        -I./mbed-os/features/netsocket/cellular/generic_modem_driver
#        -I./mbed-os/features/netsocket/cellular/utils
#        -I./mbed-os/features/storage -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\iar\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\frameworks\utest\source\utest_shim.d
#        -l
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\frameworks\utest\source\utest_shim.s.txt
#        -o
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\frameworks\utest\source\utest_shim.o
#        .\mbed-os\features\frameworks\utest\source\utest_shim.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\frameworks\utest\source\utest_shim.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\frameworks\utest\source\utest_shim.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia\mbed-os\features\frameworks\utest\source\utest_shim.cpp
      1          /****************************************************************************
      2           * Copyright (c) 2015, ARM Limited, All Rights Reserved
      3           * SPDX-License-Identifier: Apache-2.0
      4           *
      5           * Licensed under the Apache License, Version 2.0 (the "License"); you may
      6           * not use this file except in compliance with the License.
      7           * You may obtain a copy of the License at
      8           *
      9           * http://www.apache.org/licenses/LICENSE-2.0
     10           *
     11           * Unless required by applicable law or agreed to in writing, software
     12           * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     13           * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     14           * See the License for the specific language governing permissions and
     15           * limitations under the License.
     16           ****************************************************************************
     17           */
     18          
     19          #include "utest/utest_shim.h"

   \                                 In section .text, align 4
   \   __code __interwork __softfp mbed::Callback<void ()>::Callback(void (*)())
   \                     _ZN4mbed8CallbackIFvvEEC1EPS1_: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0x000A             MOVS     R2,R1
   \   00000004   0xD106             BNE      ??Callback_0
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0x2400             MOVS     R4,#+0
   \   0000000E   0xC01E             STM      R0!,{R1-R4}
   \   00000010   0x3810             SUBS     R0,R0,#+16
   \   00000012   0xE009             B        ??Callback_1
   \                     ??Callback_0: (+1)
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x2300             MOVS     R3,#+0
   \   00000018   0x2400             MOVS     R4,#+0
   \   0000001A   0x2500             MOVS     R5,#+0
   \   0000001C   0xC03C             STM      R0!,{R2-R5}
   \   0000001E   0x3810             SUBS     R0,R0,#+16
   \   00000020   0xD000             BEQ      ??Callback_2
   \   00000022   0x6001             STR      R1,[R0, #+0]
   \                     ??Callback_2: (+1)
   \   00000024   0x4901             LDR      R1,??Callback_3
   \   00000026   0x60C1             STR      R1,[R0, #+12]
   \                     ??Callback_1: (+1)
   \   00000028   0xBC30             POP      {R4,R5}
   \   0000002A   0x4770             BX       LR               ;; return
   \                     ??Callback_3:
   \   0000002C   0x........         DC32     _ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops

   \                                 In section .text, align 4
   \   __code __interwork __softfp mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
   \                     _ZN4mbed8CallbackIFvvEEC1IvvEEPFvPT_EPT0_: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0xC078             STM      R0!,{R3-R6}
   \   0000000C   0x3810             SUBS     R0,R0,#+16
   \   0000000E   0xD001             BEQ      ??Callback_4
   \   00000010   0x6001             STR      R1,[R0, #+0]
   \   00000012   0x6042             STR      R2,[R0, #+4]
   \                     ??Callback_4: (+1)
   \   00000014   0x4901             LDR      R1,??Callback_5
   \   00000016   0x60C1             STR      R1,[R0, #+12]
   \   00000018   0xBC70             POP      {R4-R6}
   \   0000001A   0x4770             BX       LR               ;; return
   \                     ??Callback_5:
   \   0000001C   0x........         DC32     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops

   \                                 In section .rodata, align 4
   \   __absolute mbed::Callback<void ()>::ops const mbed::Callback<void ()>::generate<>(void (*const &)())::ops
   \                     _ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops:
   \   00000000   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv
   \   00000004   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv
   \   00000008   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv

   \                                 In section .rodata, align 4
   \   __absolute mbed::Callback<void ()>::ops const mbed::Callback<void ()>::generate<>(mbed::Callback<void ()>::function_context<void (*)(void *), void> const &)::ops
   \                     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops:
   \   00000000   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv
   \   00000004   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv
   \   00000008   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_call<void (*)()>(void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4780             BLX      R0
   \   00000006   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0x6848             LDR      R0,[R1, #+4]
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x4788             BLX      R1
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_move<void (*)()>(void *, void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??function_move_0
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x6001             STR      R1,[R0, #+0]
   \                     ??function_move_0: (+1)
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??function_move_1
   \   00000004   0xC90C             LDM      R1!,{R2,R3}
   \   00000006   0xC00C             STM      R0!,{R2,R3}
   \                     ??function_move_1: (+1)
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_dtor<void (*)()>(void *)
   \                     _ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
   \                     _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::callback<>(void (*)(void *), void *)
   \                     _ZN4mbed8callbackIvvvEENS_8CallbackIFT1_vEEEPFS2_PT_EPT0_: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEEC1IvvEEPFvPT_EPT0_
   \   00000006   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4
   \   __interwork __softfp mbed::Timeout *SingletonPtr<mbed::Timeout>::get()
   \                     _ZN12SingletonPtrIN4mbed7TimeoutEE3getEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD121             BNE      ??get_0
   \   0000000A   0x4D16             LDR      R5,??get_1
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000010   0x6828             LDR      R0,[R5, #+0]
   \   00000012   0x.... 0x....      BL       osMutexAcquire
   \   00000016   0x6820             LDR      R0,[R4, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD115             BNE      ??get_2
   \   0000001C   0x1D20             ADDS     R0,R4,#+4
   \   0000001E   0xD012             BEQ      ??get_3
   \   00000020   0x2140             MOVS     R1,#+64
   \   00000022   0x.... 0x....      BL       __aeabi_memclr4
   \   00000026   0x1D20             ADDS     R0,R4,#+4
   \   00000028   0x.... 0x....      BL       _ZN4mbed10TimerEventC2Ev
   \   0000002C   0x480E             LDR      R0,??get_1+0x4
   \   0000002E   0x6060             STR      R0,[R4, #+4]
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0x302C             ADDS     R0,R0,#+44
   \   00000036   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEEC1EPS1_
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x213C             MOVS     R1,#+60
   \   0000003E   0x5460             STRB     R0,[R4, R1]
   \   00000040   0x480A             LDR      R0,??get_1+0x8
   \   00000042   0x6060             STR      R0,[R4, #+4]
   \   00000044   0x1D20             ADDS     R0,R4,#+4
   \                     ??get_3: (+1)
   \   00000046   0x6020             STR      R0,[R4, #+0]
   \                     ??get_2: (+1)
   \   00000048   0x6828             LDR      R0,[R5, #+0]
   \   0000004A   0x.... 0x....      BL       osMutexRelease
   \                     ??get_0: (+1)
   \   0000004E   0x6820             LDR      R0,[R4, #+0]
   \   00000050   0x1D21             ADDS     R1,R4,#+4
   \   00000052   0x4288             CMP      R0,R1
   \   00000054   0xD004             BEQ      ??get_4
   \   00000056   0x225D             MOVS     R2,#+93
   \   00000058   0x4905             LDR      R1,??get_1+0xC
   \   0000005A   0x4806             LDR      R0,??get_1+0x10
   \   0000005C   0x.... 0x....      BL       mbed_assert_internal
   \                     ??get_4: (+1)
   \   00000060   0x6820             LDR      R0,[R4, #+0]
   \   00000062   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \                     ??get_1:
   \   00000064   0x........         DC32     singleton_mutex_id
   \   00000068   0x........         DC32     _ZTVN4mbed6TickerE+0x8
   \   0000006C   0x........         DC32     _ZTVN4mbed7TimeoutE+0x8
   \   00000070   0x........         DC32     _ZZN12SingletonPtrIN4mbed7TimeoutEE3getEvEs_0
   \   00000074   0x........         DC32     _ZZN12SingletonPtrIN4mbed7TimeoutEE3getEvEs
     20          #include "utest/utest_stack_trace.h"
     21          
     22          #if UTEST_SHIM_SCHEDULER_USE_MINAR
     23          #include "minar/minar.h"
     24          
     25          static int32_t utest_minar_init()
     26          {
     27              return 0;
     28          }
     29          static void *utest_minar_post(const utest_v1_harness_callback_t callback, const uint32_t delay_ms)
     30          {
     31              void *handle = minar::Scheduler::postCallback(callback).delay(minar::milliseconds(delay_ms)).getHandle();
     32              return handle;
     33          }
     34          static int32_t utest_minar_cancel(void *handle)
     35          {
     36              int32_t ret = minar::Scheduler::cancelCallback(handle);
     37              return ret;
     38          }
     39          static int32_t utest_minar_run()
     40          {
     41              return 0;
     42          }
     43          extern "C" {
     44          static const utest_v1_scheduler_t utest_v1_scheduler =
     45          {
     46              utest_minar_init,
     47              utest_minar_post,
     48              utest_minar_cancel,
     49              utest_minar_run
     50          };
     51          utest_v1_scheduler_t utest_v1_get_scheduler()
     52          {
     53              return utest_v1_scheduler;
     54          }
     55          }
     56          
     57          #elif UTEST_SHIM_SCHEDULER_USE_US_TICKER
     58          #ifdef YOTTA_MBED_HAL_VERSION_STRING
     59          #   include "mbed-hal/us_ticker_api.h"
     60          #else
     61          #   include "mbed.h"
     62          #endif
     63          
     64          // only one callback is active at any given time

   \                                 In section .bss, align 4
     65          static volatile utest_v1_harness_callback_t minimal_callback;
   \                     minimal_callback:
   \   00000000                      DS8 4
   \   00000004                      DS8 4
     66          static volatile utest_v1_harness_callback_t ticker_callback;
     67          
     68          // Timeout object used to control the scheduling of test case callbacks
     69          SingletonPtr<Timeout> utest_timeout_object;
   \                     utest_timeout_object:
   \   00000008                      DS8 68
     70          

   \                                 In section .text, align 2, keep-with-next
     71          static void ticker_handler()
     72          {
     73              UTEST_LOG_FUNCTION();
     74              minimal_callback = ticker_callback;
   \                     _Z14ticker_handlerv: (+1)
   \   00000000   0x....             LDR      R0,??DataTable5
   \   00000002   0x6841             LDR      R1,[R0, #+4]
   \   00000004   0x6001             STR      R1,[R0, #+0]
     75          }
   \   00000006   0x4770             BX       LR               ;; return
     76          

   \                                 In section .text, align 2, keep-with-next
     77          static int32_t utest_us_ticker_init()
     78          {
   \                     _Z20utest_us_ticker_initv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     79              UTEST_LOG_FUNCTION();
     80              // initialize the Timeout object to makes sure it is not initialized in 
     81              // interrupt context.
     82              utest_timeout_object.get();
   \   00000002   0x....             LDR      R0,??DataTable5_1
   \   00000004   0x.... 0x....      BL       _ZN12SingletonPtrIN4mbed7TimeoutEE3getEv
     83              return 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
     84          }

   \                                 In section .text, align 2, keep-with-next
     85          static void *utest_us_ticker_post(const utest_v1_harness_callback_t callback, timestamp_t delay_ms)
     86          {
   \                     _Z20utest_us_ticker_postPFvvEj: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x000E             MOVS     R6,R1
     87              UTEST_LOG_FUNCTION();
     88              timestamp_t delay_us = delay_ms *1000;
     89              
     90              if (delay_ms) {
   \   00000006   0x....             LDR      R4,??DataTable5
   \   00000008   0xD03E             BEQ      ??utest_us_ticker_post_0
     91                  ticker_callback = callback;
   \   0000000A   0x6060             STR      R0,[R4, #+4]
     92                  // fire the interrupt in 1000us * delay_ms
     93                  utest_timeout_object->attach_us(ticker_handler, delay_us);
   \   0000000C   0x....             LDR      R1,??DataTable5_2
   \   0000000E   0x4668             MOV      R0,SP
   \   00000010   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEEC1EPS1_
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x3008             ADDS     R0,R0,#+8
   \   00000018   0x.... 0x....      BL       _ZN12SingletonPtrIN4mbed7TimeoutEE3getEv
   \   0000001C   0x0004             MOVS     R4,R0
   \   0000001E   0x20FA             MOVS     R0,#+250
   \   00000020   0x0080             LSLS     R0,R0,#+2        ;; #+1000
   \   00000022   0x4346             MULS     R6,R0,R6
   \   00000024   0x.... 0x....      BL       core_util_critical_section_enter
   \   00000028   0x0025             MOVS     R5,R4
   \   0000002A   0x3534             ADDS     R5,R5,#+52
   \   0000002C   0x6828             LDR      R0,[R5, #+0]
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD104             BNE      ??utest_us_ticker_post_1
   \   00000032   0x7928             LDRB     R0,[R5, #+4]
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD001             BEQ      ??utest_us_ticker_post_1
   \   00000038   0x.... 0x....      BL       sleep_manager_lock_deep_sleep
   \                     ??utest_us_ticker_post_1: (+1)
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0x3028             ADDS     R0,R0,#+40
   \   00000040   0x4568             CMP      R0,SP
   \   00000042   0xD013             BEQ      ??utest_us_ticker_post_2
   \   00000044   0x0020             MOVS     R0,R4
   \   00000046   0x3028             ADDS     R0,R0,#+40
   \   00000048   0x6829             LDR      R1,[R5, #+0]
   \   0000004A   0x2900             CMP      R1,#+0
   \   0000004C   0xD001             BEQ      ??utest_us_ticker_post_3
   \   0000004E   0x6889             LDR      R1,[R1, #+8]
   \   00000050   0x4788             BLX      R1
   \                     ??utest_us_ticker_post_3: (+1)
   \   00000052   0x0020             MOVS     R0,R4
   \   00000054   0x3028             ADDS     R0,R0,#+40
   \   00000056   0xD009             BEQ      ??utest_us_ticker_post_2
   \   00000058   0x0020             MOVS     R0,R4
   \   0000005A   0x3028             ADDS     R0,R0,#+40
   \   0000005C   0x9A03             LDR      R2,[SP, #+12]
   \   0000005E   0x2A00             CMP      R2,#+0
   \   00000060   0xD002             BEQ      ??utest_us_ticker_post_4
   \   00000062   0x4669             MOV      R1,SP
   \   00000064   0x6852             LDR      R2,[R2, #+4]
   \   00000066   0x4790             BLX      R2
   \                     ??utest_us_ticker_post_4: (+1)
   \   00000068   0x9803             LDR      R0,[SP, #+12]
   \   0000006A   0x6028             STR      R0,[R5, #+0]
   \                     ??utest_us_ticker_post_2: (+1)
   \   0000006C   0x0032             MOVS     R2,R6
   \   0000006E   0x2300             MOVS     R3,#+0
   \   00000070   0x0020             MOVS     R0,R4
   \   00000072   0x.... 0x....      BL       _ZN4mbed6Ticker5setupEy
   \   00000076   0x.... 0x....      BL       core_util_critical_section_exit
     94                  
     95              } 
   \   0000007A   0x9903             LDR      R1,[SP, #+12]
   \   0000007C   0x2900             CMP      R1,#+0
   \   0000007E   0xD004             BEQ      ??utest_us_ticker_post_5
   \   00000080   0x4668             MOV      R0,SP
   \   00000082   0x6889             LDR      R1,[R1, #+8]
   \   00000084   0x4788             BLX      R1
   \   00000086   0xE000             B        ??utest_us_ticker_post_5
     96              else {
     97                  minimal_callback = callback;
   \                     ??utest_us_ticker_post_0: (+1)
   \   00000088   0x6020             STR      R0,[R4, #+0]
     98              }
     99          
    100              // return a bogus handle
    101              return (void*)1;
   \                     ??utest_us_ticker_post_5: (+1)
   \   0000008A   0x2001             MOVS     R0,#+1
   \   0000008C   0xB004             ADD      SP,SP,#+16
   \   0000008E   0xBD70             POP      {R4-R6,PC}       ;; return
    102          }

   \                                 In section .text, align 2, keep-with-next
    103          static int32_t utest_us_ticker_cancel(void *handle)
    104          {
   \                     _Z22utest_us_ticker_cancelPv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    105              UTEST_LOG_FUNCTION();
    106              (void) handle;
    107              utest_timeout_object->detach();
   \   00000002   0x....             LDR      R0,??DataTable5_1
   \   00000004   0x.... 0x....      BL       _ZN12SingletonPtrIN4mbed7TimeoutEE3getEv
   \   00000008   0x.... 0x....      BL       _ZN4mbed6Ticker6detachEv
    108              return 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xBD02             POP      {R1,PC}          ;; return
    109          }

   \                                 In section .text, align 2, keep-with-next
    110          static int32_t utest_us_ticker_run()
    111          {
   \                     _Z19utest_us_ticker_runv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x....             LDR      R5,??DataTable5
    112              UTEST_LOG_FUNCTION();
    113              while(1)
    114              {
    115                  // check if a new callback has been set
    116                  if (minimal_callback)
   \                     ??utest_us_ticker_run_0: (+1)
   \   00000006   0x6828             LDR      R0,[R5, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD0FC             BEQ      ??utest_us_ticker_run_0
    117                  {
    118                      // copy the callback
    119                      utest_v1_harness_callback_t callback = minimal_callback;
   \   0000000C   0x6828             LDR      R0,[R5, #+0]
    120                      // reset the shared callback
    121                      minimal_callback = NULL;
   \   0000000E   0x602C             STR      R4,[R5, #+0]
    122                      // execute the copied callback
    123                      callback();
   \   00000010   0x4780             BLX      R0
   \   00000012   0xE7F8             B        ??utest_us_ticker_run_0
    124                  }
    125              }
    126          }
    127          
    128          
    129          extern "C" {

   \                                 In section .text, align 4, keep-with-next
    130          static const utest_v1_scheduler_t utest_v1_scheduler =
   \                     utest_v1_scheduler:
   \   00000000   0x........         DC32 _Z20utest_us_ticker_initv, _Z20utest_us_ticker_postPFvvEj
   \              0x........   
   \   00000008   0x........         DC32 _Z22utest_us_ticker_cancelPv, _Z19utest_us_ticker_runv
   \              0x........   
    131          {
    132              utest_us_ticker_init,
    133              utest_us_ticker_post,
    134              utest_us_ticker_cancel,
    135              utest_us_ticker_run
    136          };

   \                                 In section .text, align 4, keep-with-next
    137          utest_v1_scheduler_t utest_v1_get_scheduler()
    138          {
   \                     utest_v1_get_scheduler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    139              UTEST_LOG_FUNCTION();
    140              return utest_v1_scheduler;
   \   00000002   0xBF00             Nop      
   \   00000004   0x....             ADR.N    R1,utest_v1_scheduler
   \   00000006   0x2210             MOVS     R2,#+16
   \   00000008   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    141          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     minimal_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     minimal_callback+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     _Z14ticker_handlerv
    142          }
    143          #endif
    144          
    145          #ifdef YOTTA_CORE_UTIL_VERSION_STRING
    146          // their functionality is implemented using the CriticalSectionLock class
    147          void utest_v1_enter_critical_section(void) {}
    148          void utest_v1_leave_critical_section(void) {}
    149          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   SingletonPtr<mbed::Timeout>::get()
        16   -> __aeabi_memclr4
        16   -> mbed::Callback<void ()>::Callback(void (*)())
        16   -> mbed::TimerEvent::subobject TimerEvent()
        16   -> mbed_assert_internal
        16   -> osMutexAcquire
        16   -> osMutexRelease
       8   mbed::Callback<void ()>::Callback(void (*)())
      12   mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
       8   mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
         8   -- Indirect call
       8   mbed::Callback<void ()>::function_call<void (*)()>(void const *)
         8   -- Indirect call
       0   mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
       0   mbed::Callback<void ()>::function_dtor<void (*)()>(void *)
       0   mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
       0   mbed::Callback<void ()>::function_move<void (*)()>(void *, void const *)
       8   mbed::callback<>(void (*)(void *), void *)
         8   -> mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
       0   ticker_handler()
       8   utest_us_ticker_cancel(void *)
         8   -> SingletonPtr<mbed::Timeout>::get()
         8   -> mbed::Ticker::detach()
       8   utest_us_ticker_init()
         8   -> SingletonPtr<mbed::Timeout>::get()
      32   utest_us_ticker_post(void (*)(), timestamp_t)
        32   -- Indirect call
        32   -> SingletonPtr<mbed::Timeout>::get()
        32   -> core_util_critical_section_enter
        32   -> core_util_critical_section_exit
        32   -> mbed::Callback<void ()>::Callback(void (*)())
        32   -> mbed::Ticker::setup(std::uint64_t)
        32   -> sleep_manager_lock_deep_sleep
      16   utest_us_ticker_run()
        16   -- Indirect call
       8   utest_v1_get_scheduler
         8   -> __aeabi_memcpy4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
     120  SingletonPtr<mbed::Timeout>::get()
      48  mbed::Callback<void ()>::Callback(void (*)())
      32  mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
      12  mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
       8  mbed::Callback<void ()>::function_call<void (*)()>(void const *)
       2  mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
       2  mbed::Callback<void ()>::function_dtor<void (*)()>(void *)
      10  mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
      10  mbed::Callback<void ()>::function_move<void (*)()>(void *, void const *)
       8  mbed::callback<>(void (*)(void *), void *)
      76  minimal_callback
          ticker_callback
          utest_timeout_object
      12  ops
      12  ops
       8  ticker_handler()
      16  utest_us_ticker_cancel(void *)
      12  utest_us_ticker_init()
     144  utest_us_ticker_post(void (*)(), timestamp_t)
      20  utest_us_ticker_run()
      14  utest_v1_get_scheduler
      16  utest_v1_scheduler
     388  -- Other

 
  76 bytes in section .bss
 412 bytes in section .rodata
 494 bytes in section .text
 
 242 bytes of CODE  memory (+ 252 bytes shared)
   0 bytes of CONST memory (+ 412 bytes shared)
  76 bytes of DATA  memory

Errors: none
Warnings: none
