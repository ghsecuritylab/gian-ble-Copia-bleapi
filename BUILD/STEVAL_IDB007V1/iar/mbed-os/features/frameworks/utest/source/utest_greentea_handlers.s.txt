###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       16/Mar/2018  12:16:17
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        .\mbed-os\features\frameworks\utest\source\utest_greentea_handlers.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DDEVICE_SERIAL=1 -DTARGET_CORTEX_M -DDEVICE_SPI=1 -DTARGET_LIKE_MBED
#        -DMBED_BUILD_TIMESTAMP=1521198946.13 -DARM_MATH_CM0 -DTARGET_RELEASE
#        -D__CORTEX_M0 -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0
#        -DTOOLCHAIN_object -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -f
#        .\BUILD\STEVAL_IDB007V1\iar\.includes_fc2e77952737cb4522ab0dffe8cfd8aa.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN
#        -I./mbed-os/features/frameworks
#        -I./mbed-os/features/frameworks/greentea-client
#        -I./mbed-os/features/frameworks/greentea-client/greentea-client
#        -I./mbed-os/features/frameworks/greentea-client/source
#        -I./mbed-os/features/frameworks/unity
#        -I./mbed-os/features/frameworks/unity/source
#        -I./mbed-os/features/frameworks/unity/unity
#        -I./mbed-os/features/frameworks/utest
#        -I./mbed-os/features/frameworks/utest/source
#        -I./mbed-os/features/frameworks/utest/utest
#        -I./mbed-os/features/mbedtls -I./mbed-os/features/mbedtls/importer
#        -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/features/netsocket
#        -I./mbed-os/features/netsocket/cellular
#        -I./mbed-os/features/netsocket/cellular/generic_modem_driver
#        -I./mbed-os/features/netsocket/cellular/utils
#        -I./mbed-os/features/storage -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\iar\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\frameworks\utest\source\utest_greentea_handlers.d
#        -l
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\frameworks\utest\source\utest_greentea_handlers.s.txt
#        -o
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\frameworks\utest\source\utest_greentea_handlers.o
#        .\mbed-os\features\frameworks\utest\source\utest_greentea_handlers.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\frameworks\utest\source\utest_greentea_handlers.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\frameworks\utest\source\utest_greentea_handlers.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia\mbed-os\features\frameworks\utest\source\utest_greentea_handlers.cpp
      1          /****************************************************************************
      2           * Copyright (c) 2015, ARM Limited, All Rights Reserved
      3           * SPDX-License-Identifier: Apache-2.0
      4           *
      5           * Licensed under the Apache License, Version 2.0 (the "License"); you may
      6           * not use this file except in compliance with the License.
      7           * You may obtain a copy of the License at
      8           *
      9           * http://www.apache.org/licenses/LICENSE-2.0
     10           *
     11           * Unless required by applicable law or agreed to in writing, software
     12           * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     13           * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     14           * See the License for the specific language governing permissions and
     15           * limitations under the License.
     16           ****************************************************************************
     17           */
     18          
     19          #include "utest/utest_default_handlers.h"

   \                                 In section .text, align 4
   \   __code __interwork __softfp mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
   \                     _ZN4mbed8CallbackIFvvEEC1IvvEEPFvPT_EPT0_: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0xC078             STM      R0!,{R3-R6}
   \   0000000C   0x3810             SUBS     R0,R0,#+16
   \   0000000E   0xD001             BEQ      ??Callback_0
   \   00000010   0x6001             STR      R1,[R0, #+0]
   \   00000012   0x6042             STR      R2,[R0, #+4]
   \                     ??Callback_0: (+1)
   \   00000014   0x4901             LDR      R1,??Callback_1
   \   00000016   0x60C1             STR      R1,[R0, #+12]
   \   00000018   0xBC70             POP      {R4-R6}
   \   0000001A   0x4770             BX       LR               ;; return
   \                     ??Callback_1:
   \   0000001C   0x........         DC32     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops

   \                                 In section .rodata, align 4
   \   __absolute mbed::Callback<void ()>::ops const mbed::Callback<void ()>::generate<>(mbed::Callback<void ()>::function_context<void (*)(void *), void> const &)::ops
   \                     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops:
   \   00000000   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv
   \   00000004   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv
   \   00000008   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0x6848             LDR      R0,[R1, #+4]
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x4788             BLX      R1
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??function_move_0
   \   00000004   0xC90C             LDM      R1!,{R2,R3}
   \   00000006   0xC00C             STM      R0!,{R2,R3}
   \                     ??function_move_0: (+1)
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
   \                     _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::callback<>(void (*)(void *), void *)
   \                     _ZN4mbed8callbackIvvvEENS_8CallbackIFT1_vEEEPFS2_PT_EPT0_: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEEC1IvvEEPFvPT_EPT0_
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     20          #include "utest/utest_case.h"
     21          #include "greentea-client/test_env.h"
     22          #include "utest/utest_stack_trace.h"
     23          #include "utest/utest_serial.h"
     24          
     25          using namespace utest::v1;
     26          
     27          static void selftest_failure_handler(const failure_t);
     28          static void test_failure_handler(const failure_t);
     29          
     30          

   \                                 In section .rodata, align 4, keep-with-next
     31          const handlers_t utest::v1::greentea_abort_handlers = {
   \                     _ZN5utest2v123greentea_abort_handlersE:
   \   00000000   0x........         DC32 _ZN5utest2v135default_greentea_test_setup_handlerEj
   \   00000004   0x........         DC32 _ZN5utest2v130greentea_test_teardown_handlerEjjNS0_9failure_tE
   \   00000008   0x........         DC32 _Z20test_failure_handlerN5utest2v19failure_tE
   \   0000000C   0x........         DC32 _ZN5utest2v127greentea_case_setup_handlerEPKNS0_4CaseEj
   \   00000010   0x........         DC32 _ZN5utest2v130greentea_case_teardown_handlerEPKNS0_4CaseEjjNS0_9failure_tE
   \   00000014   0x........         DC32 _ZN5utest2v135greentea_case_failure_abort_handlerEPKNS0_4CaseENS0_9failure_tE
     32              default_greentea_test_setup_handler,
     33              greentea_test_teardown_handler,
     34              test_failure_handler,
     35              greentea_case_setup_handler,
     36              greentea_case_teardown_handler,
     37              greentea_case_failure_abort_handler
     38          };
     39          

   \                                 In section .rodata, align 4, keep-with-next
     40          const handlers_t utest::v1::greentea_continue_handlers = {
   \                     _ZN5utest2v126greentea_continue_handlersE:
   \   00000000   0x........         DC32 _ZN5utest2v135default_greentea_test_setup_handlerEj
   \   00000004   0x........         DC32 _ZN5utest2v130greentea_test_teardown_handlerEjjNS0_9failure_tE
   \   00000008   0x........         DC32 _Z20test_failure_handlerN5utest2v19failure_tE
   \   0000000C   0x........         DC32 _ZN5utest2v127greentea_case_setup_handlerEPKNS0_4CaseEj
   \   00000010   0x........         DC32 _ZN5utest2v130greentea_case_teardown_handlerEPKNS0_4CaseEjjNS0_9failure_tE
   \   00000014   0x........         DC32 _ZN5utest2v138greentea_case_failure_continue_handlerEPKNS0_4CaseENS0_9failure_tE
     41              default_greentea_test_setup_handler,
     42              greentea_test_teardown_handler,
     43              test_failure_handler,
     44              greentea_case_setup_handler,
     45              greentea_case_teardown_handler,
     46              greentea_case_failure_continue_handler
     47          };
     48          

   \                                 In section .rodata, align 4, keep-with-next
     49          const handlers_t utest::v1::selftest_handlers = {
   \                     _ZN5utest2v117selftest_handlersE:
   \   00000000   0x........         DC32 _ZN5utest2v135default_greentea_test_setup_handlerEj
   \   00000004   0x........         DC32 _ZN5utest2v130greentea_test_teardown_handlerEjjNS0_9failure_tE
   \   00000008   0x........         DC32 _Z24selftest_failure_handlerN5utest2v19failure_tE
   \   0000000C   0x........         DC32 _ZN5utest2v127greentea_case_setup_handlerEPKNS0_4CaseEj
   \   00000010   0x........         DC32 _ZN5utest2v130greentea_case_teardown_handlerEPKNS0_4CaseEjjNS0_9failure_tE
   \   00000014   0x........         DC32 _ZN5utest2v138greentea_case_failure_continue_handlerEPKNS0_4CaseENS0_9failure_tE
     50              default_greentea_test_setup_handler,
     51              greentea_test_teardown_handler,
     52              selftest_failure_handler,
     53              greentea_case_setup_handler,
     54              greentea_case_teardown_handler,
     55              greentea_case_failure_continue_handler
     56          };
     57          
     58          
     59          // --- SPECIAL HANDLERS ---
     60          

   \                                 In section .text, align 2, keep-with-next
     61          static void selftest_failure_handler(const failure_t failure) {
   \                     _Z24selftest_failure_handlerN5utest2v19failure_tE: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
     62              UTEST_LOG_FUNCTION();
     63              if (failure.location == LOCATION_TEST_SETUP || failure.location == LOCATION_TEST_TEARDOWN || failure.reason == REASON_ASSERTION) {
   \   00000006   0x78A0             LDRB     R0,[R4, #+2]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD004             BEQ      ??selftest_failure_handler_0
   \   0000000C   0x2802             CMP      R0,#+2
   \   0000000E   0xD002             BEQ      ??selftest_failure_handler_0
   \   00000010   0x8820             LDRH     R0,[R4, #+0]
   \   00000012   0x2810             CMP      R0,#+16
   \   00000014   0xD106             BNE      ??selftest_failure_handler_1
     64                  verbose_test_failure_handler(failure);
   \                     ??selftest_failure_handler_0: (+1)
   \   00000016   0x4668             MOV      R0,SP
   \   00000018   0x8821             LDRH     R1,[R4, #+0]
   \   0000001A   0x8001             STRH     R1,[R0, #+0]
   \   0000001C   0x78A1             LDRB     R1,[R4, #+2]
   \   0000001E   0x7081             STRB     R1,[R0, #+2]
     65              }
   \   00000020   0x.... 0x....      BL       _ZN5utest2v128verbose_test_failure_handlerENS0_9failure_tE
     66              if (failure.reason == REASON_ASSERTION) {
   \                     ??selftest_failure_handler_1: (+1)
   \   00000024   0x8820             LDRH     R0,[R4, #+0]
   \   00000026   0x2810             CMP      R0,#+16
   \   00000028   0xD103             BNE      ??selftest_failure_handler_2
     67                  UTEST_DUMP_TRACE
     68                  GREENTEA_TESTSUITE_RESULT(false);
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x.... 0x....      BL       _Z25GREENTEA_TESTSUITE_RESULTi
     69                  while(1) ;
   \                     ??selftest_failure_handler_3: (+1)
   \   00000030   0xE7FE             B        ??selftest_failure_handler_3
     70              }
     71          }
   \                     ??selftest_failure_handler_2: (+1)
   \   00000032   0xBD13             POP      {R0,R1,R4,PC}    ;; return
     72          

   \                                 In section .text, align 2, keep-with-next
     73          static void test_failure_handler(const failure_t failure) {
   \                     _Z20test_failure_handlerN5utest2v19failure_tE: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     74              UTEST_LOG_FUNCTION();
     75              if (failure.location == LOCATION_TEST_SETUP || failure.location == LOCATION_TEST_TEARDOWN) {
   \   00000002   0x7881             LDRB     R1,[R0, #+2]
   \   00000004   0x2901             CMP      R1,#+1
   \   00000006   0xD001             BEQ      ??test_failure_handler_0
   \   00000008   0x2902             CMP      R1,#+2
   \   0000000A   0xD10B             BNE      ??test_failure_handler_1
     76                  verbose_test_failure_handler(failure);
   \                     ??test_failure_handler_0: (+1)
   \   0000000C   0x4669             MOV      R1,SP
   \   0000000E   0x8802             LDRH     R2,[R0, #+0]
   \   00000010   0x800A             STRH     R2,[R1, #+0]
   \   00000012   0x7880             LDRB     R0,[R0, #+2]
   \   00000014   0x7088             STRB     R0,[R1, #+2]
   \   00000016   0x4668             MOV      R0,SP
   \   00000018   0x.... 0x....      BL       _ZN5utest2v128verbose_test_failure_handlerENS0_9failure_tE
     77                  GREENTEA_TESTSUITE_RESULT(false);
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      BL       _Z25GREENTEA_TESTSUITE_RESULTi
     78                  while(1) ;
   \                     ??test_failure_handler_2: (+1)
   \   00000022   0xE7FE             B        ??test_failure_handler_2
     79              }
     80          }
   \                     ??test_failure_handler_1: (+1)
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
     81          
     82          // --- GREENTEA HANDLERS ---
     83          

   \                                 In section .text, align 2, keep-with-next
     84          void utest::v1::greentea_testcase_notification_handler(const char *testcase)
     85          {
   \                     _ZN5utest2v138greentea_testcase_notification_handlerEPKc: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     86              UTEST_LOG_FUNCTION();
     87              greentea_send_kv(GREENTEA_TEST_ENV_TESTCASE_NAME, testcase);
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0x....             LDR      R0,??DataTable8
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x.... 0x....      BL       greentea_send_kv
     88          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
     89          

   \                                 In section .text, align 4, keep-with-next
     90          utest::v1::status_t utest::v1::default_greentea_test_setup_handler(const size_t number_of_cases)
     91          {
   \                     _ZN5utest2v135default_greentea_test_setup_handlerEj: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     92              UTEST_LOG_FUNCTION();
     93              GREENTEA_SETUP(UTEST_DEFAULT_GREENTEA_TIMEOUT, UTEST_DEFAULT_HOST_TEST_NAME);
   \   00000004   0x....             ADR.N    R1,?_0
   \   00000006   0x200A             MOVS     R0,#+10
   \   00000008   0x.... 0x....      BL       GREENTEA_SETUP
     94              return greentea_test_setup_handler(number_of_cases);
   \   0000000C   0x....             B.N      ?Subroutine0
     95          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x0021             MOVS     R1,R4
   \   00000002   0x....             LDR      R0,??DataTable8_1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x.... 0x....      BL       _Z16greentea_send_kvPKci
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       _ZN5utest2v126verbose_test_setup_handlerEj
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
     96          
     97          

   \                                 In section .text, align 2, keep-with-next
     98          utest::v1::status_t utest::v1::greentea_test_setup_handler(const size_t number_of_cases)
     99          {
   \                     _ZN5utest2v127greentea_test_setup_handlerEj: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    100              UTEST_LOG_FUNCTION();
    101              greentea_send_kv(TEST_ENV_TESTCASE_COUNT, number_of_cases);
   \   00000004                      REQUIRE ?Subroutine0
   \   00000004                      ;; // Fall through to label ?Subroutine0
    102              return verbose_test_setup_handler(number_of_cases);
    103          }
    104          

   \                                 In section .text, align 2, keep-with-next
    105          void utest::v1::greentea_test_teardown_handler(const size_t passed, const size_t failed, const failure_t failure)
    106          {
   \                     _ZN5utest2v130greentea_test_teardown_handlerEjjNS0_9failure_tE: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0015             MOVS     R5,R2
    107              UTEST_LOG_FUNCTION();
    108              verbose_test_teardown_handler(passed, failed, failure);
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x8829             LDRH     R1,[R5, #+0]
   \   0000000E   0x8001             STRH     R1,[R0, #+0]
   \   00000010   0x78A9             LDRB     R1,[R5, #+2]
   \   00000012   0x7081             STRB     R1,[R0, #+2]
   \   00000014   0x466A             MOV      R2,SP
   \   00000016   0x0021             MOVS     R1,R4
   \   00000018   0x0030             MOVS     R0,R6
   \   0000001A   0x.... 0x....      BL       _ZN5utest2v129verbose_test_teardown_handlerEjjNS0_9failure_tE
    109              greentea_send_kv(TEST_ENV_TESTCASE_SUMMARY, passed, failed);
   \   0000001E   0x0022             MOVS     R2,R4
   \   00000020   0x0031             MOVS     R1,R6
   \   00000022   0x....             LDR      R0,??DataTable8_2
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x.... 0x....      BL       _Z16greentea_send_kvPKcii
    110              int result = !(failed || (failure.reason && !(failure.reason & REASON_IGNORE)));
   \   0000002A   0x2C00             CMP      R4,#+0
   \   0000002C   0xD10C             BNE      ??greentea_test_teardown_handler_0
   \   0000002E   0x8829             LDRH     R1,[R5, #+0]
   \   00000030   0x0008             MOVS     R0,R1
   \   00000032   0xD007             BEQ      ??greentea_test_teardown_handler_1
   \   00000034   0x2080             MOVS     R0,#+128
   \   00000036   0x0200             LSLS     R0,R0,#+8        ;; #+32768
   \   00000038   0x4001             ANDS     R1,R1,R0
   \   0000003A   0x1E48             SUBS     R0,R1,#+1
   \   0000003C   0x4180             SBCS     R0,R0,R0
   \   0000003E   0x43C0             MVNS     R0,R0
   \   00000040   0x0FC0             LSRS     R0,R0,#+31
   \   00000042   0xE002             B        ??greentea_test_teardown_handler_2
   \                     ??greentea_test_teardown_handler_1: (+1)
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0xE000             B        ??greentea_test_teardown_handler_2
   \                     ??greentea_test_teardown_handler_0: (+1)
   \   00000048   0x2000             MOVS     R0,#+0
    111              GREENTEA_TESTSUITE_RESULT(result);
   \                     ??greentea_test_teardown_handler_2: (+1)
   \   0000004A   0x.... 0x....      BL       _Z25GREENTEA_TESTSUITE_RESULTi
    112          }
   \   0000004E   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    113          

   \                                 In section .text, align 2, keep-with-next
    114          void utest::v1::greentea_test_failure_handler(const failure_t failure)
    115          {
   \                     _ZN5utest2v129greentea_test_failure_handlerENS0_9failure_tE: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    116              UTEST_LOG_FUNCTION();
    117              verbose_test_failure_handler(failure);
   \   00000002   0x4669             MOV      R1,SP
   \   00000004   0x8802             LDRH     R2,[R0, #+0]
   \   00000006   0x800A             STRH     R2,[R1, #+0]
   \   00000008   0x7880             LDRB     R0,[R0, #+2]
   \   0000000A   0x7088             STRB     R0,[R1, #+2]
   \   0000000C   0x4668             MOV      R0,SP
   \   0000000E   0x.... 0x....      BL       _ZN5utest2v128verbose_test_failure_handlerENS0_9failure_tE
    118          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    119          
    120          // --- GREENTEA CASE HANDLERS ---

   \                                 In section .text, align 2, keep-with-next
    121          utest::v1::status_t utest::v1::greentea_case_setup_handler(const Case *const source, const size_t index_of_case)
    122          {
   \                     _ZN5utest2v127greentea_case_setup_handlerEPKNS0_4CaseEj: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
    123              UTEST_LOG_FUNCTION();
    124              utest::v1::status_t status = verbose_case_setup_handler(source, index_of_case);
   \   00000004   0x.... 0x....      BL       _ZN5utest2v126verbose_case_setup_handlerEPKNS0_4CaseEj
   \   00000008   0x0004             MOVS     R4,R0
    125              greentea_send_kv(TEST_ENV_TESTCASE_START, source->get_description());
   \   0000000A   0x0028             MOVS     R0,R5
   \   0000000C   0x.... 0x....      BL       _ZNK5utest2v14Case15get_descriptionEv
   \   00000010   0x0001             MOVS     R1,R0
   \   00000012   0x....             LDR      R0,??DataTable8_3
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x.... 0x....      BL       greentea_send_kv
    126              return status;
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    127          }
    128          

   \                                 In section .text, align 2, keep-with-next
    129          utest::v1::status_t utest::v1::greentea_case_teardown_handler(const Case *const source, const size_t passed, const size_t failed, const failure_t failure)
    130          {
   \                     _ZN5utest2v130greentea_case_teardown_handlerEPKNS0_4CaseEjjNS0_9failure_tE: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0007             MOVS     R7,R0
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x0015             MOVS     R5,R2
   \   00000008   0x001C             MOVS     R4,R3
    131              UTEST_LOG_FUNCTION();
    132              greentea_send_kv(TEST_ENV_TESTCASE_FINISH, source->get_description(), passed, failed);
   \   0000000A   0x.... 0x....      BL       _ZNK5utest2v14Case15get_descriptionEv
   \   0000000E   0x002B             MOVS     R3,R5
   \   00000010   0x0032             MOVS     R2,R6
   \   00000012   0x0001             MOVS     R1,R0
   \   00000014   0x....             LDR      R0,??DataTable8_4
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x.... 0x....      BL       _Z16greentea_send_kvPKcS0_ii
    133              return verbose_case_teardown_handler(source, passed, failed, failure);
   \   0000001C   0x4668             MOV      R0,SP
   \   0000001E   0x8821             LDRH     R1,[R4, #+0]
   \   00000020   0x8001             STRH     R1,[R0, #+0]
   \   00000022   0x78A1             LDRB     R1,[R4, #+2]
   \   00000024   0x7081             STRB     R1,[R0, #+2]
   \   00000026   0x466B             MOV      R3,SP
   \   00000028   0x002A             MOVS     R2,R5
   \   0000002A   0x0031             MOVS     R1,R6
   \   0000002C   0x0038             MOVS     R0,R7
   \   0000002E   0x.... 0x....      BL       _ZN5utest2v129verbose_case_teardown_handlerEPKNS0_4CaseEjjNS0_9failure_tE
   \   00000032   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    134          }
    135          

   \                                 In section .text, align 2, keep-with-next
    136          utest::v1::status_t utest::v1::greentea_case_failure_abort_handler(const Case *const source, const failure_t failure)
    137          {
   \                     _ZN5utest2v135greentea_case_failure_abort_handlerEPKNS0_4CaseENS0_9failure_tE: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    138              UTEST_LOG_FUNCTION();
    139              utest::v1::status_t status = verbose_case_failure_handler(source, failure);
   \   00000002   0x466A             MOV      R2,SP
   \   00000004   0x880B             LDRH     R3,[R1, #+0]
   \   00000006   0x8013             STRH     R3,[R2, #+0]
   \   00000008   0x7889             LDRB     R1,[R1, #+2]
   \   0000000A   0x7091             STRB     R1,[R2, #+2]
   \   0000000C   0x4669             MOV      R1,SP
   \   0000000E   0x.... 0x....      BL       _ZN5utest2v128verbose_case_failure_handlerEPKNS0_4CaseENS0_9failure_tE
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x43C9             MVNS     R1,R1            ;; #-2
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xD101             BNE      ??greentea_case_failure_abort_handler_0
   \   0000001A   0x4608             MOV      R0,R1
   \   0000001C   0xBD02             POP      {R1,PC}
   \                     ??greentea_case_failure_abort_handler_0: (+1)
   \   0000001E   0x2002             MOVS     R0,#+2
   \   00000020   0x43C0             MVNS     R0,R0            ;; #-3
   \   00000022   0xBD02             POP      {R1,PC}          ;; return
    140              return (status == STATUS_IGNORE) ? STATUS_IGNORE : STATUS_ABORT;
    141          }
    142          

   \                                 In section .text, align 2, keep-with-next
    143          utest::v1::status_t utest::v1::greentea_case_failure_continue_handler(const Case *const source, const failure_t failure)
    144          {
   \                     _ZN5utest2v138greentea_case_failure_continue_handlerEPKNS0_4CaseENS0_9failure_tE: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    145              UTEST_LOG_FUNCTION();
    146              return verbose_case_failure_handler(source, failure);
   \   00000002   0x466A             MOV      R2,SP
   \   00000004   0x880B             LDRH     R3,[R1, #+0]
   \   00000006   0x8013             STRH     R3,[R2, #+0]
   \   00000008   0x7889             LDRB     R1,[R1, #+2]
   \   0000000A   0x7091             STRB     R1,[R2, #+2]
   \   0000000C   0x4669             MOV      R1,SP
   \   0000000E   0x.... 0x....      BL       _ZN5utest2v128verbose_case_failure_handlerEPKNS0_4CaseENS0_9failure_tE
   \   00000012   0xBD02             POP      {R1,PC}          ;; return
    147          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     GREENTEA_TEST_ENV_TESTCASE_NAME

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     GREENTEA_TEST_ENV_TESTCASE_COUNT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     GREENTEA_TEST_ENV_TESTCASE_SUMMARY

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x........         DC32     GREENTEA_TEST_ENV_TESTCASE_START

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     GREENTEA_TEST_ENV_TESTCASE_FINISH

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x64 0x65          DC8 "default_auto"
   \              0x66 0x61    
   \              0x75 0x6C    
   \              0x74 0x5F    
   \              0x61 0x75    
   \              0x74 0x6F    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
       8   mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
         8   -- Indirect call
       0   mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
       0   mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
       8   mbed::callback<>(void (*)(void *), void *)
         8   -> mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
      16   selftest_failure_handler(utest::v1::failure_t)
        16   -> GREENTEA_TESTSUITE_RESULT(int)
        16   -> utest::v1::verbose_test_failure_handler(utest::v1::failure_t)
       8   test_failure_handler(utest::v1::failure_t)
         8   -> GREENTEA_TESTSUITE_RESULT(int)
         8   -> utest::v1::verbose_test_failure_handler(utest::v1::failure_t)
       8   utest::v1::default_greentea_test_setup_handler(std::size_t)
         8   -> GREENTEA_SETUP
         8   -> greentea_send_kv(char const *, int)
         8   -> utest::v1::verbose_test_setup_handler(std::size_t)
       8   utest::v1::greentea_case_failure_abort_handler(utest::v1::Case const *, utest::v1::failure_t)
         8   -> utest::v1::verbose_case_failure_handler(utest::v1::Case const *, utest::v1::failure_t)
       8   utest::v1::greentea_case_failure_continue_handler(utest::v1::Case const *, utest::v1::failure_t)
         8   -> utest::v1::verbose_case_failure_handler(utest::v1::Case const *, utest::v1::failure_t)
      16   utest::v1::greentea_case_setup_handler(utest::v1::Case const *, std::size_t)
        16   -> greentea_send_kv
        16   -> utest::v1::Case::get_description() const
        16   -> utest::v1::verbose_case_setup_handler(utest::v1::Case const *, std::size_t)
      24   utest::v1::greentea_case_teardown_handler(utest::v1::Case const *, std::size_t, std::size_t, utest::v1::failure_t)
        24   -> greentea_send_kv(char const *, char const *, int, int)
        24   -> utest::v1::Case::get_description() const
        24   -> utest::v1::verbose_case_teardown_handler(utest::v1::Case const *, std::size_t, std::size_t, utest::v1::failure_t)
       8   utest::v1::greentea_test_failure_handler(utest::v1::failure_t)
         8   -> utest::v1::verbose_test_failure_handler(utest::v1::failure_t)
       8   utest::v1::greentea_test_setup_handler(std::size_t)
         8   -> greentea_send_kv(char const *, int)
         8   -> utest::v1::verbose_test_setup_handler(std::size_t)
      24   utest::v1::greentea_test_teardown_handler(std::size_t, std::size_t, utest::v1::failure_t)
        24   -> GREENTEA_TESTSUITE_RESULT(int)
        24   -> greentea_send_kv(char const *, int, int)
        24   -> utest::v1::verbose_test_teardown_handler(std::size_t, std::size_t, utest::v1::failure_t)
       8   utest::v1::greentea_testcase_notification_handler(char const *)
         8   -> greentea_send_kv


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
      18  ?Subroutine0
      16  ?_0
      32  mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
      12  mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
       2  mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
      10  mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
       8  mbed::callback<>(void (*)(void *), void *)
      12  ops
      52  selftest_failure_handler(utest::v1::failure_t)
      38  test_failure_handler(utest::v1::failure_t)
      14  utest::v1::default_greentea_test_setup_handler(std::size_t)
      24  utest::v1::greentea_abort_handlers
      36  utest::v1::greentea_case_failure_abort_handler(utest::v1::Case const *, utest::v1::failure_t)
      20  utest::v1::greentea_case_failure_continue_handler(utest::v1::Case const *, utest::v1::failure_t)
      30  utest::v1::greentea_case_setup_handler(utest::v1::Case const *, std::size_t)
      52  utest::v1::greentea_case_teardown_handler(utest::v1::Case const *, std::size_t, std::size_t, utest::v1::failure_t)
      24  utest::v1::greentea_continue_handlers
      20  utest::v1::greentea_test_failure_handler(utest::v1::failure_t)
       4  utest::v1::greentea_test_setup_handler(std::size_t)
      80  utest::v1::greentea_test_teardown_handler(std::size_t, std::size_t, utest::v1::failure_t)
      14  utest::v1::greentea_testcase_notification_handler(char const *)
      24  utest::v1::selftest_handlers
     292  -- Other

 
 376 bytes in section .rodata
 478 bytes in section .text
 
 414 bytes of CODE  memory (+  64 bytes shared)
  72 bytes of CONST memory (+ 304 bytes shared)

Errors: none
Warnings: none
