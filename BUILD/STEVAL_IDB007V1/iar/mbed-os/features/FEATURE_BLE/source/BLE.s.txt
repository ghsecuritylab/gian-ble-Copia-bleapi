###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:05
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\FEATURE_BLE\source\BLE.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\FEATURE_BLE\source\BLE.d
#        -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\FEATURE_BLE\source\BLE.s.txt
#        -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\FEATURE_BLE\source\BLE.o
#        .\mbed-os\features\FEATURE_BLE\source\BLE.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\FEATURE_BLE\source\BLE.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\FEATURE_BLE\source\BLE.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\FEATURE_BLE\source\BLE.cpp
      1          /* mbed Microcontroller Library
      2           * Copyright (c) 2006-2013 ARM Limited
      3           *
      4           * Licensed under the Apache License, Version 2.0 (the "License");
      5           * you may not use this file except in compliance with the License.
      6           * You may obtain a copy of the License at
      7           *
      8           *     http://www.apache.org/licenses/LICENSE-2.0
      9           *
     10           * Unless required by applicable law or agreed to in writing, software
     11           * distributed under the License is distributed on an "AS IS" BASIS,
     12           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     13           * See the License for the specific language governing permissions and
     14           * limitations under the License.
     15           */
     16          
     17          #include <stdio.h>
     18          #include "ble/BLE.h"

   \                                 In section .text, align 2
   \   __interwork __softfp void SafeBool_::base::trueTag() const
   \                     _ZNK9SafeBool_4base7trueTagEv: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4
   \   __code __interwork __softfp FunctionPointerWithContext<BLE::OnEventsToProcessCallbackContext *>::FunctionPointerWithContext(void (*)(BLE::OnEventsToProcessCallbackContext *))
   \                     _ZN26FunctionPointerWithContextIPN3BLE32OnEventsToProcessCallbackContextEEC1EPFvS2_E: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x220C             MOVS     R2,#+12
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x.... 0x....      BL       memset
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x60E8             STR      R0,[R5, #+12]
   \   00000012   0x6128             STR      R0,[R5, #+16]
   \   00000014   0x602C             STR      R4,[R5, #+0]
   \   00000016   0x4802             LDR      R0,??FunctionPointerWithContext_0
   \   00000018   0x60E8             STR      R0,[R5, #+12]
   \   0000001A   0x0028             MOVS     R0,R5
   \   0000001C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \   0000001E   0xBF00             Nop      
   \                     ??FunctionPointerWithContext_0:
   \   00000020   0x........         DC32     _ZN26FunctionPointerWithContextIPN3BLE32OnEventsToProcessCallbackContextEE14functioncallerEPKS3_S2_

   \                                 In section .text, align 2
   \   __code __interwork __softfp FunctionPointerWithContext<BLE::InitializationCompleteCallbackContext *>::FunctionPointerWithContext(FunctionPointerWithContext<BLE::InitializationCompleteCallbackContext *> const &)
   \                     _ZN26FunctionPointerWithContextIPN3BLE37InitializationCompleteCallbackContextEEC1ERKS3_: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0xC91C             LDM      R1!,{R2-R4}
   \   00000004   0xC01C             STM      R0!,{R2-R4}
   \   00000006   0x390C             SUBS     R1,R1,#+12
   \   00000008   0x380C             SUBS     R0,R0,#+12
   \   0000000A   0x68C9             LDR      R1,[R1, #+12]
   \   0000000C   0x60C1             STR      R1,[R0, #+12]
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x6101             STR      R1,[R0, #+16]
   \   00000012   0xBC10             POP      {R4}
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void FunctionPointerWithContext<BLE::OnEventsToProcessCallbackContext *>::functioncaller(FunctionPointerWithContext<BLE::OnEventsToProcessCallbackContext *> const *, BLE::OnEventsToProcessCallbackContext *)
   \                     _ZN26FunctionPointerWithContextIPN3BLE32OnEventsToProcessCallbackContextEE14functioncallerEPKS3_S2_: (+1)
   \   00000000   0x6802             LDR      R2,[R0, #+0]
   \   00000002   0x0010             MOVS     R0,R2
   \   00000004   0xD100             BNE      ??functioncaller_0
   \   00000006   0x4770             BX       LR
   \                     ??functioncaller_0: (+1)
   \   00000008   0xB580             PUSH     {R7,LR}
   \   0000000A   0x0008             MOVS     R0,R1
   \   0000000C   0x4790             BLX      R2
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
     19          #include "ble/BLEInstanceBase.h"
     20          
     21          #if defined(TARGET_OTA_ENABLED)
     22          #include "ble/services/DFUService.h"
     23          #endif
     24          
     25          #ifdef YOTTA_CFG_MBED_OS
     26          #include <minar/minar.h>
     27          #endif
     28          
     29          #if !defined(YOTTA_CFG_MBED_OS)
     30          #include <mbed_error.h>
     31          #include <toolchain.h>

  #warning toolchain.h has been replaced by mbed_toolchain.h, please update to mbed_toolchain.h [since mbed-os-5.3]
   ^
"C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\platform\toolchain.h",23  Warning[Pe1105]: #warning directive: toolchain.h has been replaced by mbed_toolchain.h, please update to mbed_toolchain.h [since mbed-os-5.3]
     32          #endif
     33          

   \                                 In section .text, align 2, keep-with-next
     34          ble_error_t
     35          BLE::initImplementation(FunctionPointerWithContext<InitializationCompleteCallbackContext*> callback)
     36          {
   \                     _ZN3BLE18initImplementationE26FunctionPointerWithContextIPNS_37InitializationCompleteCallbackContextEE: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
     37              ble_error_t err = transport->init(instanceID, callback);
   \   00000006   0x6865             LDR      R5,[R4, #+4]
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x.... 0x....      BL       _ZN26FunctionPointerWithContextIPN3BLE37InitializationCompleteCallbackContextEEC1ERKS3_
   \   0000000E   0x0002             MOVS     R2,R0
   \   00000010   0x6821             LDR      R1,[R4, #+0]
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0x682B             LDR      R3,[R5, #+0]
   \   00000016   0x68DB             LDR      R3,[R3, #+12]
   \   00000018   0x4798             BLX      R3
     38              if (err != BLE_ERROR_NONE) {
   \   0000001A   0x0001             MOVS     R1,R0
   \   0000001C   0xD100             BNE      ??initImplementation_0
     39                  return err;
     40              }
     41          
     42              /* Platforms enabled for DFU should introduce the DFU Service into
     43               * applications automatically. */
     44          #if defined(TARGET_OTA_ENABLED)
     45              static DFUService dfu(*this); // defined static so that the object remains alive
     46          #endif // TARGET_OTA_ENABLED
     47          
     48              return BLE_ERROR_NONE;
   \   0000001E   0x2000             MOVS     R0,#+0
   \                     ??initImplementation_0: (+1)
   \   00000020   0xB005             ADD      SP,SP,#+20
   \   00000022   0xBD30             POP      {R4,R5,PC}       ;; return
     49          }
     50          
     51          /**
     52           * BLE::Instance() and BLE constructor rely upon a static array of initializers
     53           * to create actual BLE transport instances. A description of these instances
     54           * and initializers is supposed to be put in some .json file contributing to
     55           * yotta's configuration (typically in the target definition described by
     56           * target.json). Here's a sample:
     57           *
     58           *  "config": {
     59           *    ...
     60           *    "ble_instances": {
     61           *      "count": 1,
     62           *      "0" : {
     63           *        "initializer" : "createBLEInstance"
     64           *      }
     65           *    }
     66           *    ...
     67           *  }
     68           *
     69           * The following macros result in translating the above config into a static
     70           * array: instanceConstructors.
     71           */
     72          #ifdef YOTTA_CFG_BLE_INSTANCES_COUNT
     73          #define CONCATENATE(A, B) A ## B
     74          #define EXPAND(X) X /* this adds a level of indirection needed to allow macro-expansion following a token-paste operation (see use of CONCATENATE() below). */
     75          
     76          #define INITIALIZER_LIST_FOR_INSTANCE_CONSTRUCTORS_1 YOTTA_CFG_BLE_INSTANCES_0_INITIALIZER
     77          #define INITIALIZER_LIST_FOR_INSTANCE_CONSTRUCTORS_2 INITIALIZER_LIST_FOR_INSTANCE_CONSTRUCTORS_1, YOTTA_CFG_BLE_INSTANCES_1_INITIALIZER
     78          #define INITIALIZER_LIST_FOR_INSTANCE_CONSTRUCTORS_3 INITIALIZER_LIST_FOR_INSTANCE_CONSTRUCTORS_2, YOTTA_CFG_BLE_INSTANCES_2_INITIALIZER
     79          #define INITIALIZER_LIST_FOR_INSTANCE_CONSTRUCTORS_4 INITIALIZER_LIST_FOR_INSTANCE_CONSTRUCTORS_3, YOTTA_CFG_BLE_INSTANCES_3_INITIALIZER
     80          #define INITIALIZER_LIST_FOR_INSTANCE_CONSTRUCTORS_5 INITIALIZER_LIST_FOR_INSTANCE_CONSTRUCTORS_4, YOTTA_CFG_BLE_INSTANCES_4_INITIALIZER
     81          /* ... add more of the above if ever needed */
     82          
     83          #define INITIALIZER_LIST_FOR_INSTANCE_CONSTRUCTORS(N) EXPAND(CONCATENATE(INITIALIZER_LIST_FOR_INSTANCE_CONSTRUCTORS_, N))
     84          #elif !defined(INITIALIZER_LIST_FOR_INSTANCE_CONSTRUCTORS)
     85          /*
     86           * The following applies when building without yotta. By default BLE_API provides
     87           * a trivial initializer list containing a single constructor: createBLEInstance.
     88           * This may be overridden.
     89           */
     90          #define INITIALIZER_LIST_FOR_INSTANCE_CONSTRUCTORS createBLEInstance
     91          
     92          // yotta unlike mbed-cli has proper dependency mechanisms
     93          // It is not required to defined a stub for createBLEInstance
     94          #if !defined(YOTTA_CFG_MBED_OS)
     95          
     96          // this stub is required by ARMCC otherwise link will systematically fail

   \                                 In section .text, align 4
     97          MBED_WEAK BLEInstanceBase* createBLEInstance() {
   \                     _Z17createBLEInstancev: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     98              error("Please provide an implementation for mbed BLE");
   \   00000002   0x4802             LDR      R0,??createBLEInstance_0
   \   00000004   0x.... 0x....      BL       error
     99              return NULL;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
   \                     ??createBLEInstance_0:
   \   0000000C   0x........         DC32     ?_0
    100          }
    101          
    102          #endif
    103          
    104          
    105          #endif /* YOTTA_CFG_BLE_INSTANCES_COUNT */
    106          
    107          typedef BLEInstanceBase *(*InstanceConstructor_t)(void);
    108          static const InstanceConstructor_t instanceConstructors[BLE::NUM_INSTANCES] = {
    109          #ifndef YOTTA_CFG_BLE_INSTANCES_COUNT
    110              INITIALIZER_LIST_FOR_INSTANCE_CONSTRUCTORS
    111          #else
    112              INITIALIZER_LIST_FOR_INSTANCE_CONSTRUCTORS(YOTTA_CFG_BLE_INSTANCES_COUNT)
    113          #endif
    114          };
    115          

   \                                 In section .text, align 2, keep-with-next
    116          BLE &
    117          BLE::Instance(InstanceID_t id)
    118          {
   \                     _ZN3BLE8InstanceEj: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    119              static BLE *singletons[NUM_INSTANCES];
    120              if (id < NUM_INSTANCES) {
   \   00000002   0x....             LDR      R4,??DataTable5
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD127             BNE      ??Instance_0
    121                  if (singletons[id] == NULL) {
   \   00000008   0x6A20             LDR      R0,[R4, #+32]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD122             BNE      ??Instance_1
    122                      singletons[id] = new BLE(id); /* This object will never be freed. */
   \   0000000E   0x2020             MOVS     R0,#+32
   \   00000010   0x.... 0x....      BL       _Znwj
   \   00000014   0x0006             MOVS     R6,R0
   \   00000016   0x2500             MOVS     R5,#+0
   \   00000018   0x2E00             CMP      R6,#+0
   \   0000001A   0xD01A             BEQ      ??Instance_2
   \   0000001C   0x6035             STR      R5,[R6, #+0]
   \   0000001E   0x6075             STR      R5,[R6, #+4]
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x3008             ADDS     R0,R0,#+8
   \   00000024   0x.... 0x....      BL       _ZN26FunctionPointerWithContextIPN3BLE32OnEventsToProcessCallbackContextEEC1EPFvS2_E
   \   00000028   0x7735             STRB     R5,[R6, #+28]
   \   0000002A   0x6830             LDR      R0,[R6, #+0]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD10E             BNE      ??Instance_3
   \   00000030   0x6AA0             LDR      R0,[R4, #+40]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD105             BNE      ??Instance_4
   \   00000036   0x.... 0x....      BL       _Z17createBLEInstancev
   \   0000003A   0x6831             LDR      R1,[R6, #+0]
   \   0000003C   0x0089             LSLS     R1,R1,#+2
   \   0000003E   0x1861             ADDS     R1,R4,R1
   \   00000040   0x6288             STR      R0,[R1, #+40]
   \                     ??Instance_4: (+1)
   \   00000042   0x6830             LDR      R0,[R6, #+0]
   \   00000044   0x0080             LSLS     R0,R0,#+2
   \   00000046   0x1820             ADDS     R0,R4,R0
   \   00000048   0x6A80             LDR      R0,[R0, #+40]
   \   0000004A   0x6070             STR      R0,[R6, #+4]
   \   0000004C   0xE000             B        ??Instance_5
   \                     ??Instance_3: (+1)
   \   0000004E   0x6075             STR      R5,[R6, #+4]
    123                  }
   \                     ??Instance_5: (+1)
   \   00000050   0x0035             MOVS     R5,R6
   \                     ??Instance_2: (+1)
   \   00000052   0x6225             STR      R5,[R4, #+32]
    124          
    125                  return *singletons[id];
   \                     ??Instance_1: (+1)
   \   00000054   0x6A20             LDR      R0,[R4, #+32]
   \   00000056   0xBD70             POP      {R4-R6,PC}
    126              }
   \                     ??Instance_0: (+1)
   \   00000058   0x2501             MOVS     R5,#+1
   \   0000005A   0x6A60             LDR      R0,[R4, #+36]
   \   0000005C   0x4028             ANDS     R0,R0,R5
   \   0000005E   0xD125             BNE      ??Instance_6
   \   00000060   0x0020             MOVS     R0,R4
   \   00000062   0x3024             ADDS     R0,R0,#+36
   \   00000064   0x.... 0x....      BL       __cxa_guard_acquire
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD01F             BEQ      ??Instance_6
    127          
    128              /* we come here only in the case of a bad interfaceID. */
    129              static BLE badSingleton(NUM_INSTANCES /* this is a bad index; and will result in a NULL transport. */);
   \   0000006C   0x6025             STR      R5,[R4, #+0]
   \   0000006E   0x2500             MOVS     R5,#+0
   \   00000070   0x6065             STR      R5,[R4, #+4]
   \   00000072   0x2100             MOVS     R1,#+0
   \   00000074   0x0020             MOVS     R0,R4
   \   00000076   0x3008             ADDS     R0,R0,#+8
   \   00000078   0x.... 0x....      BL       _ZN26FunctionPointerWithContextIPN3BLE32OnEventsToProcessCallbackContextEEC1EPFvS2_E
   \   0000007C   0x7725             STRB     R5,[R4, #+28]
   \   0000007E   0x6820             LDR      R0,[R4, #+0]
   \   00000080   0x2800             CMP      R0,#+0
   \   00000082   0xD10E             BNE      ??Instance_7
   \   00000084   0x6AA0             LDR      R0,[R4, #+40]
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD105             BNE      ??Instance_8
   \   0000008A   0x.... 0x....      BL       _Z17createBLEInstancev
   \   0000008E   0x6821             LDR      R1,[R4, #+0]
   \   00000090   0x0089             LSLS     R1,R1,#+2
   \   00000092   0x1861             ADDS     R1,R4,R1
   \   00000094   0x6288             STR      R0,[R1, #+40]
   \                     ??Instance_8: (+1)
   \   00000096   0x6820             LDR      R0,[R4, #+0]
   \   00000098   0x0080             LSLS     R0,R0,#+2
   \   0000009A   0x1820             ADDS     R0,R4,R0
   \   0000009C   0x6A80             LDR      R0,[R0, #+40]
   \   0000009E   0x6060             STR      R0,[R4, #+4]
   \   000000A0   0xE000             B        ??Instance_9
   \                     ??Instance_7: (+1)
   \   000000A2   0x6065             STR      R5,[R4, #+4]
   \                     ??Instance_9: (+1)
   \   000000A4   0x0020             MOVS     R0,R4
   \   000000A6   0x3024             ADDS     R0,R0,#+36
   \   000000A8   0x.... 0x....      BL       __cxa_guard_release
    130              return badSingleton;
   \                     ??Instance_6: (+1)
   \   000000AC   0x0020             MOVS     R0,R4
   \   000000AE   0xBD70             POP      {R4-R6,PC}       ;; return
    131          }
    132          
    133          #ifdef YOTTA_CFG_MBED_OS
    134          void defaultSchedulingCallback(BLE::OnEventsToProcessCallbackContext* params) {
    135              minar::Scheduler::postCallback(&params->ble, &BLE::processEvents);
    136          }
    137          #else
    138          #define defaultSchedulingCallback NULL
    139          #endif
    140          
    141          

   \                                 In section .text, align 2, keep-with-next
    142          BLE::BLE(InstanceID_t instanceIDIn) : instanceID(instanceIDIn), transport(),
   \                     _ZN3BLEC1Ej: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002                      REQUIRE ?Subroutine0
   \   00000002                      ;; // Fall through to label ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x0004             MOVS     R4,R0
   \   00000002   0x6021             STR      R1,[R4, #+0]
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0x6065             STR      R5,[R4, #+4]
    143              whenEventsToProcess(defaultSchedulingCallback),
    144              event_signaled(false)
    145          {
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x3008             ADDS     R0,R0,#+8
   \   0000000C   0x.... 0x....      BL       _ZN26FunctionPointerWithContextIPN3BLE32OnEventsToProcessCallbackContextEEC1EPFvS2_E
   \   00000010   0x7725             STRB     R5,[R4, #+28]
    146              static BLEInstanceBase *transportInstances[NUM_INSTANCES];
    147          
    148              if (instanceID < NUM_INSTANCES) {
   \   00000012   0x6820             LDR      R0,[R4, #+0]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD10F             BNE      ??Subroutine0_0
    149                  if (!transportInstances[instanceID]) {
   \   00000018   0x....             LDR      R5,??DataTable5
   \   0000001A   0x6AA8             LDR      R0,[R5, #+40]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD105             BNE      ??Subroutine0_1
    150                      transportInstances[instanceID] = instanceConstructors[instanceID](); /* Call the stack's initializer for the transport object. */
   \   00000020   0x.... 0x....      BL       _Z17createBLEInstancev
   \   00000024   0x6821             LDR      R1,[R4, #+0]
   \   00000026   0x0089             LSLS     R1,R1,#+2
   \   00000028   0x1869             ADDS     R1,R5,R1
   \   0000002A   0x6288             STR      R0,[R1, #+40]
    151                  }
    152                  transport = transportInstances[instanceID];
   \                     ??Subroutine0_1: (+1)
   \   0000002C   0x6820             LDR      R0,[R4, #+0]
   \   0000002E   0x0080             LSLS     R0,R0,#+2
   \   00000030   0x1828             ADDS     R0,R5,R0
   \   00000032   0x6A80             LDR      R0,[R0, #+40]
   \   00000034   0x6060             STR      R0,[R4, #+4]
   \   00000036   0xE000             B        ??Subroutine0_2
    153              } else {
    154                  transport = NULL;
   \                     ??Subroutine0_0: (+1)
   \   00000038   0x6065             STR      R5,[R4, #+4]
    155              }
    156          }
   \                     ??Subroutine0_2: (+1)
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0xBD32             POP      {R1,R4,R5,PC}    ;; return

   \                                 In section .bss, align 4
   \                     `BLE::Instance(unsigned int)::badSingleton`:
   \   00000000                      DS8 32
   \   00000020                      DS8 4
   \   00000024                      DS8 4
   \   00000028                      DS8 4
    157          

   \                                 In section .text, align 4, keep-with-next
    158          bool BLE::hasInitialized(void) const
    159          {
   \                     _ZNK3BLE14hasInitializedEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    160              if (!transport) {
   \   00000004   0x6860             LDR      R0,[R4, #+4]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD103             BNE      ??hasInitialized_0
    161                  error("bad handle to underlying transport");
   \   0000000A   0xBF00             Nop      
   \   0000000C   0x....             ADR.N    R0,?_1
   \   0000000E   0x.... 0x....      BL       error
    162              }
    163          
    164              return transport->hasInitialized();
   \                     ??hasInitialized_0: (+1)
   \   00000012   0x6860             LDR      R0,[R4, #+4]
   \   00000014   0x6801             LDR      R1,[R0, #+0]
   \   00000016   0x6909             LDR      R1,[R1, #+16]
   \   00000018   0x4788             BLX      R1
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
    165          }
    166          

   \                                 In section .text, align 4, keep-with-next
    167          ble_error_t BLE::shutdown(void)
    168          {
   \                     _ZN3BLE8shutdownEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    169              if (!transport) {
   \   00000004   0x6860             LDR      R0,[R4, #+4]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD103             BNE      ??shutdown_0
    170                  error("bad handle to underlying transport");
   \   0000000A   0xBF00             Nop      
   \   0000000C   0x....             ADR.N    R0,?_1
   \   0000000E   0x.... 0x....      BL       error
    171              }
    172          
    173              event_signaled = false;
   \                     ??shutdown_0: (+1)
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x7720             STRB     R0,[R4, #+28]
    174              return transport->shutdown();
   \   00000016   0x6860             LDR      R0,[R4, #+4]
   \   00000018   0x6801             LDR      R1,[R0, #+0]
   \   0000001A   0x6949             LDR      R1,[R1, #+20]
   \   0000001C   0x4788             BLX      R1
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
    175          }
    176          

   \                                 In section .text, align 4, keep-with-next
    177          const char *BLE::getVersion(void)
    178          {
   \                     _ZN3BLE10getVersionEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    179              if (!transport) {
   \   00000004   0x6860             LDR      R0,[R4, #+4]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD103             BNE      ??getVersion_0
    180                  error("bad handle to underlying transport");
   \   0000000A   0xBF00             Nop      
   \   0000000C   0x....             ADR.N    R0,?_1
   \   0000000E   0x.... 0x....      BL       error
    181              }
    182          
    183              return transport->getVersion();
   \                     ??getVersion_0: (+1)
   \   00000012   0x6860             LDR      R0,[R4, #+4]
   \   00000014   0x6801             LDR      R1,[R0, #+0]
   \   00000016   0x6989             LDR      R1,[R1, #+24]
   \   00000018   0x4788             BLX      R1
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
    184          }
    185          

   \                                 In section .text, align 2, keep-with-next
    186          const Gap &BLE::gap() const
   \                     _ZNK3BLE3gapEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             B.N      ?Subroutine1

   \                                 In section .text, align 4, keep-with-next
    187          {
   \                     ?Subroutine1: (+1)
   \   00000000   0x0004             MOVS     R4,R0
    188              if (!transport) {
   \   00000002   0x6860             LDR      R0,[R4, #+4]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD102             BNE      ??Subroutine1_0
    189                  error("bad handle to underlying transport");
   \   00000008   0x....             ADR.N    R0,?_1
   \   0000000A   0x.... 0x....      BL       error
    190              }
    191          
    192              return transport->getGap();
   \                     ??Subroutine1_0: (+1)
   \   0000000E   0x6860             LDR      R0,[R4, #+4]
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0x69C9             LDR      R1,[R1, #+28]
   \   00000014   0x4788             BLX      R1
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    193          }
    194          

   \                                 In section .text, align 4, keep-with-next
    195          Gap &BLE::gap()
   \                     _ZN3BLE3gapEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xBF00             Nop      
   \   00000004                      REQUIRE ?Subroutine1
   \   00000004                      ;; // Fall through to label ?Subroutine1
    196          {
    197              if (!transport) {
    198                  error("bad handle to underlying transport");
    199              }
    200          
    201              return transport->getGap();
    202          }
    203          

   \                                 In section .text, align 2, keep-with-next
    204          const GattServer& BLE::gattServer() const
   \                     _ZNK3BLE10gattServerEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             B.N      ?Subroutine2

   \                                 In section .text, align 4, keep-with-next
    205          {
   \                     ?Subroutine2: (+1)
   \   00000000   0x0004             MOVS     R4,R0
    206              if (!transport) {
   \   00000002   0x6860             LDR      R0,[R4, #+4]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD102             BNE      ??Subroutine2_0
    207                  error("bad handle to underlying transport");
   \   00000008   0x....             ADR.N    R0,?_1
   \   0000000A   0x.... 0x....      BL       error
    208              }
    209          
    210              return transport->getGattServer();
   \                     ??Subroutine2_0: (+1)
   \   0000000E   0x6860             LDR      R0,[R4, #+4]
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0x6A49             LDR      R1,[R1, #+36]
   \   00000014   0x4788             BLX      R1
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    211          }
    212          

   \                                 In section .text, align 4, keep-with-next
    213          GattServer& BLE::gattServer()
   \                     _ZN3BLE10gattServerEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xBF00             Nop      
   \   00000004                      REQUIRE ?Subroutine2
   \   00000004                      ;; // Fall through to label ?Subroutine2
    214          {
    215              if (!transport) {
    216                  error("bad handle to underlying transport");
    217              }
    218          
    219              return transport->getGattServer();
    220          }
    221          

   \                                 In section .text, align 2, keep-with-next
    222          const GattClient& BLE::gattClient() const
   \                     _ZNK3BLE10gattClientEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             B.N      ?Subroutine3

   \                                 In section .text, align 4, keep-with-next
    223          {
   \                     ?Subroutine3: (+1)
   \   00000000   0x0004             MOVS     R4,R0
    224              if (!transport) {
   \   00000002   0x6860             LDR      R0,[R4, #+4]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD102             BNE      ??Subroutine3_0
    225                  error("bad handle to underlying transport");
   \   00000008   0x....             ADR.N    R0,?_1
   \   0000000A   0x.... 0x....      BL       error
    226              }
    227          
    228              return transport->getGattClient();
   \                     ??Subroutine3_0: (+1)
   \   0000000E   0x6860             LDR      R0,[R4, #+4]
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0x6AC9             LDR      R1,[R1, #+44]
   \   00000014   0x4788             BLX      R1
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    229          }
    230          

   \                                 In section .text, align 4, keep-with-next
    231          GattClient& BLE::gattClient()
   \                     _ZN3BLE10gattClientEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xBF00             Nop      
   \   00000004                      REQUIRE ?Subroutine3
   \   00000004                      ;; // Fall through to label ?Subroutine3
    232          {
    233              if (!transport) {
    234                  error("bad handle to underlying transport");
    235              }
    236          
    237              return transport->getGattClient();
    238          }
    239          

   \                                 In section .text, align 2, keep-with-next
    240          const SecurityManager& BLE::securityManager() const
   \                     _ZNK3BLE15securityManagerEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             B.N      ?Subroutine4

   \                                 In section .text, align 4, keep-with-next
    241          {
   \                     ?Subroutine4: (+1)
   \   00000000   0x0004             MOVS     R4,R0
    242              if (!transport) {
   \   00000002   0x6860             LDR      R0,[R4, #+4]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD102             BNE      ??Subroutine4_0
    243                  error("bad handle to underlying transport");
   \   00000008   0x....             ADR.N    R0,?_1
   \   0000000A   0x.... 0x....      BL       error
    244              }
    245          
    246              return transport->getSecurityManager();
   \                     ??Subroutine4_0: (+1)
   \   0000000E   0x6860             LDR      R0,[R4, #+4]
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0x6B09             LDR      R1,[R1, #+48]
   \   00000014   0x4788             BLX      R1
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    247          }
    248          

   \                                 In section .text, align 4, keep-with-next
    249          SecurityManager& BLE::securityManager()
   \                     _ZN3BLE15securityManagerEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xBF00             Nop      
   \   00000004                      REQUIRE ?Subroutine4
   \   00000004                      ;; // Fall through to label ?Subroutine4
    250          {
    251              if (!transport) {
    252                  error("bad handle to underlying transport");
    253              }
    254          
    255              return transport->getSecurityManager();
    256          }
    257          

   \                                 In section .text, align 4, keep-with-next
    258          void BLE::waitForEvent(void)
    259          {
   \                     _ZN3BLE12waitForEventEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    260              if (!transport) {
   \   00000004   0x6860             LDR      R0,[R4, #+4]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD103             BNE      ??waitForEvent_0
    261                  error("bad handle to underlying transport");
   \   0000000A   0xBF00             Nop      
   \   0000000C   0x....             ADR.N    R0,?_1
   \   0000000E   0x.... 0x....      BL       error
    262              }
    263          
    264              transport->waitForEvent();
   \                     ??waitForEvent_0: (+1)
   \   00000012   0x6860             LDR      R0,[R4, #+4]
   \   00000014   0x6801             LDR      R1,[R0, #+0]
   \   00000016   0x6B89             LDR      R1,[R1, #+56]
   \   00000018   0x4788             BLX      R1
    265          }
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
    266          

   \                                 In section .text, align 4, keep-with-next
    267          void BLE::processEvents()
    268          {
   \                     _ZN3BLE13processEventsEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    269              if (event_signaled == false) {
   \   00000004   0x7F20             LDRB     R0,[R4, #+28]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD00B             BEQ      ??processEvents_0
    270                  return;
    271              }
    272          
    273              if (!transport) {
   \   0000000A   0x6860             LDR      R0,[R4, #+4]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD102             BNE      ??processEvents_1
    274                  error("bad handle to underlying transport");
   \   00000010   0x....             ADR.N    R0,?_1
   \   00000012   0x.... 0x....      BL       error
    275              }
    276          
    277              event_signaled = false;
   \                     ??processEvents_1: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x7720             STRB     R0,[R4, #+28]
    278          
    279              transport->processEvents();
   \   0000001A   0x6860             LDR      R0,[R4, #+4]
   \   0000001C   0x6801             LDR      R1,[R0, #+0]
   \   0000001E   0x6889             LDR      R1,[R1, #+8]
   \   00000020   0x4788             BLX      R1
    280          }
   \                     ??processEvents_0: (+1)
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    281          

   \                                 In section .text, align 4, keep-with-next
    282          void BLE::onEventsToProcess(const BLE::OnEventsToProcessCallback_t& callback)
    283          {
   \                     _ZN3BLE17onEventsToProcessERK26FunctionPointerWithContextIPNS_32OnEventsToProcessCallbackContextEE: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    284              whenEventsToProcess = callback;
   \   00000002   0x0002             MOVS     R2,R0
   \   00000004   0x3208             ADDS     R2,R2,#+8
   \   00000006   0xC938             LDM      R1!,{R3-R5}
   \   00000008   0xC238             STM      R2!,{R3-R5}
   \   0000000A   0x390C             SUBS     R1,R1,#+12
   \   0000000C   0x68CA             LDR      R2,[R1, #+12]
   \   0000000E   0x6142             STR      R2,[R0, #+20]
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x6181             STR      R1,[R0, #+24]
    285          
    286              // If events were previously signaled but the handler was not in place then
    287              // signal immediately events availability
    288              if (event_signaled && whenEventsToProcess) {
   \   00000014   0x7F01             LDRB     R1,[R0, #+28]
   \   00000016   0x2900             CMP      R1,#+0
   \   00000018   0xD00C             BEQ      ??onEventsToProcess_0
   \   0000001A   0x6881             LDR      R1,[R0, #+8]
   \   0000001C   0x2900             CMP      R1,#+0
   \   0000001E   0xD101             BNE      ??onEventsToProcess_1
   \   00000020   0x....             ADR.N    R1,?_3
   \   00000022   0xE000             B        ??onEventsToProcess_2
   \                     ??onEventsToProcess_1: (+1)
   \   00000024   0x....             ADR.N    R1,?_2
   \                     ??onEventsToProcess_2: (+1)
   \   00000026   0x6809             LDR      R1,[R1, #+0]
   \   00000028   0x2900             CMP      R1,#+0
   \   0000002A   0xD003             BEQ      ??onEventsToProcess_0
    289                  OnEventsToProcessCallbackContext params = {
    290                      *this
    291                  };
   \   0000002C   0x9000             STR      R0,[SP, #+0]
    292                  whenEventsToProcess(&params);
   \   0000002E   0x4669             MOV      R1,SP
   \   00000030   0x3008             ADDS     R0,R0,#+8
   \   00000032   0x4790             BLX      R2
    293              }
    294          }
   \                     ??onEventsToProcess_0: (+1)
   \   00000034   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    295          

   \                                 In section .text, align 4, keep-with-next
    296          void BLE::signalEventsToProcess()
    297          {
   \                     _ZN3BLE21signalEventsToProcessEv: (+1)
   \   00000000   0x0002             MOVS     R2,R0
    298              if (event_signaled == true) {
   \   00000002   0x7F10             LDRB     R0,[R2, #+28]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD000             BEQ      ??signalEventsToProcess_0
   \   00000008   0x4770             BX       LR
    299                  return;
    300              }
    301          
    302              event_signaled = true;
   \                     ??signalEventsToProcess_0: (+1)
   \   0000000A   0xB580             PUSH     {R7,LR}
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x7710             STRB     R0,[R2, #+28]
    303          
    304              if (whenEventsToProcess) {
   \   00000010   0x6890             LDR      R0,[R2, #+8]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD104             BNE      ??signalEventsToProcess_1
   \   00000016   0x6890             LDR      R0,[R2, #+8]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD101             BNE      ??signalEventsToProcess_1
   \   0000001C   0x....             ADR.N    R0,?_3
   \   0000001E   0xE000             B        ??signalEventsToProcess_2
   \                     ??signalEventsToProcess_1: (+1)
   \   00000020   0x....             ADR.N    R0,?_2
   \                     ??signalEventsToProcess_2: (+1)
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD005             BEQ      ??signalEventsToProcess_3
    305                  OnEventsToProcessCallbackContext params = {
    306                      *this
    307                  };
   \   00000028   0x9200             STR      R2,[SP, #+0]
    308                  whenEventsToProcess(&params);
   \   0000002A   0x4669             MOV      R1,SP
   \   0000002C   0x0010             MOVS     R0,R2
   \   0000002E   0x3008             ADDS     R0,R0,#+8
   \   00000030   0x6952             LDR      R2,[R2, #+20]
   \   00000032   0x4790             BLX      R2
    309              }
    310          }
   \                     ??signalEventsToProcess_3: (+1)
   \   00000034   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x50 0x6C          DC8 "Please provide an implementation for mbed BLE"
   \              0x65 0x61    
   \              0x73 0x65    
   \              0x20 0x70    
   \              0x72 0x6F    
   \              0x76 0x69    
   \              0x64 0x65    
   \              0x20 0x61    
   \              0x6E 0x20    
   \              0x69 0x6D    
   \              0x70 0x6C    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x6D    
   \              0x62 0x65    
   \              0x64 0x20    
   \              0x42 0x4C    
   \              0x45 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp BLE::subobject BLE(unsigned int)
   \                     _ZN3BLEC2Ej: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x....             B.N      ?Subroutine0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     `BLE::Instance(unsigned int)::badSingleton`

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x62 0x61          DC8 "bad handle to underlying transport"
   \              0x64 0x20    
   \              0x68 0x61    
   \              0x6E 0x64    
   \              0x6C 0x65    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x75 0x6E    
   \              0x64 0x65    
   \              0x72 0x6C    
   \              0x79 0x69    
   \              0x6E 0x67    
   \              0x20 0x74    
   \              0x72 0x61    
   \              0x6E 0x73    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x00         
   \   00000023   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BLE::BLE(unsigned int)
        16   -> FunctionPointerWithContext<BLE::OnEventsToProcessCallbackContext *>::FunctionPointerWithContext(void (*)(BLE::OnEventsToProcessCallbackContext *))
        16   -> createBLEInstance()
      16   BLE::Instance(unsigned int)
        16   -> FunctionPointerWithContext<BLE::OnEventsToProcessCallbackContext *>::FunctionPointerWithContext(void (*)(BLE::OnEventsToProcessCallbackContext *))
        16   -> __cxa_guard_acquire
        16   -> __cxa_guard_release
        16   -> createBLEInstance()
        16   -> operator new(std::size_t)
       8   BLE::gap()
         8   -- Indirect call
         8   -> error
       8   BLE::gap() const
         8   -- Indirect call
         8   -> error
       8   BLE::gattClient()
         8   -- Indirect call
         8   -> error
       8   BLE::gattClient() const
         8   -- Indirect call
         8   -> error
       8   BLE::gattServer()
         8   -- Indirect call
         8   -> error
       8   BLE::gattServer() const
         8   -- Indirect call
         8   -> error
       8   BLE::getVersion()
         8   -- Indirect call
         8   -> error
       8   BLE::hasInitialized() const
         8   -- Indirect call
         8   -> error
      32   BLE::initImplementation(FunctionPointerWithContext<BLE::InitializationCompleteCallbackContext *>)
        32   -- Indirect call
        32   -> FunctionPointerWithContext<BLE::InitializationCompleteCallbackContext *>::FunctionPointerWithContext(FunctionPointerWithContext<BLE::InitializationCompleteCallbackContext *> const &)
      16   BLE::onEventsToProcess(BLE::OnEventsToProcessCallback_t const &)
        16   -- Indirect call
       8   BLE::processEvents()
         8   -- Indirect call
         8   -> error
       8   BLE::securityManager()
         8   -- Indirect call
         8   -> error
       8   BLE::securityManager() const
         8   -- Indirect call
         8   -> error
       8   BLE::shutdown()
         8   -- Indirect call
         8   -> error
       8   BLE::signalEventsToProcess()
         8   -- Indirect call
      16   BLE::subobject BLE(unsigned int)
        16   -> FunctionPointerWithContext<BLE::OnEventsToProcessCallbackContext *>::FunctionPointerWithContext(void (*)(BLE::OnEventsToProcessCallbackContext *))
        16   -> createBLEInstance()
       8   BLE::waitForEvent()
         8   -- Indirect call
         8   -> error
       4   FunctionPointerWithContext<BLE::InitializationCompleteCallbackContext *>::FunctionPointerWithContext(FunctionPointerWithContext<BLE::InitializationCompleteCallbackContext *> const &)
      16   FunctionPointerWithContext<BLE::OnEventsToProcessCallbackContext *>::FunctionPointerWithContext(void (*)(BLE::OnEventsToProcessCallbackContext *))
        16   -> memset
       8   FunctionPointerWithContext<BLE::OnEventsToProcessCallbackContext *>::functioncaller(FunctionPointerWithContext<BLE::OnEventsToProcessCallbackContext *> const *, BLE::OnEventsToProcessCallbackContext *)
         8   -- Indirect call
       0   SafeBool_::base::trueTag() const
       8   createBLEInstance()
         8   -> error


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
      62  ?Subroutine0
      24  ?Subroutine1
      24  ?Subroutine2
      24  ?Subroutine3
      24  ?Subroutine4
      48  ?_0
      36  ?_1
       2  BLE::BLE(unsigned int)
     176  BLE::Instance(unsigned int)
       4  BLE::gap()
       4  BLE::gap() const
       4  BLE::gattClient()
       4  BLE::gattClient() const
       4  BLE::gattServer()
       4  BLE::gattServer() const
      28  BLE::getVersion()
      28  BLE::hasInitialized() const
      36  BLE::initImplementation(FunctionPointerWithContext<BLE::InitializationCompleteCallbackContext *>)
      54  BLE::onEventsToProcess(BLE::OnEventsToProcessCallback_t const &)
      36  BLE::processEvents()
       4  BLE::securityManager()
       4  BLE::securityManager() const
      32  BLE::shutdown()
      54  BLE::signalEventsToProcess()
       4  BLE::subobject BLE(unsigned int)
      28  BLE::waitForEvent()
      22  FunctionPointerWithContext<BLE::InitializationCompleteCallbackContext *>::FunctionPointerWithContext(FunctionPointerWithContext<BLE::InitializationCompleteCallbackContext *> const &)
      36  FunctionPointerWithContext<BLE::OnEventsToProcessCallbackContext *>::FunctionPointerWithContext(void (*)(BLE::OnEventsToProcessCallbackContext *))
      16  FunctionPointerWithContext<BLE::OnEventsToProcessCallbackContext *>::functioncaller(FunctionPointerWithContext<BLE::OnEventsToProcessCallbackContext *> const *, BLE::OnEventsToProcessCallbackContext *)
       2  SafeBool_::base::trueTag() const
      44  badSingleton
          singletons
          static guard for badSingleton
          transportInstances
      16  createBLEInstance()
    1016  -- Other

 
    44 bytes in section .bss
 1 048 bytes in section .rodata
   816 bytes in section .text
 
 724 bytes of CODE  memory (+    92 bytes shared)
  48 bytes of CONST memory (+ 1 000 bytes shared)
  44 bytes of DATA  memory

Errors: none
Warnings: 1
