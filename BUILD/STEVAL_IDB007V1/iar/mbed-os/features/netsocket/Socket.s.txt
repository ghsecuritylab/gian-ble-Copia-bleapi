###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       16/Mar/2018  12:16:40
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\netsocket\Socket.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DDEVICE_SERIAL=1 -DTARGET_CORTEX_M -DDEVICE_SPI=1 -DTARGET_LIKE_MBED
#        -DMBED_BUILD_TIMESTAMP=1521198946.13 -DARM_MATH_CM0 -DTARGET_RELEASE
#        -D__CORTEX_M0 -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0
#        -DTOOLCHAIN_object -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -f
#        .\BUILD\STEVAL_IDB007V1\iar\.includes_fc2e77952737cb4522ab0dffe8cfd8aa.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN
#        -I./mbed-os/features/frameworks
#        -I./mbed-os/features/frameworks/greentea-client
#        -I./mbed-os/features/frameworks/greentea-client/greentea-client
#        -I./mbed-os/features/frameworks/greentea-client/source
#        -I./mbed-os/features/frameworks/unity
#        -I./mbed-os/features/frameworks/unity/source
#        -I./mbed-os/features/frameworks/unity/unity
#        -I./mbed-os/features/frameworks/utest
#        -I./mbed-os/features/frameworks/utest/source
#        -I./mbed-os/features/frameworks/utest/utest
#        -I./mbed-os/features/mbedtls -I./mbed-os/features/mbedtls/importer
#        -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/features/netsocket
#        -I./mbed-os/features/netsocket/cellular
#        -I./mbed-os/features/netsocket/cellular/generic_modem_driver
#        -I./mbed-os/features/netsocket/cellular/utils
#        -I./mbed-os/features/storage -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\iar\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\Socket.d -l
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\Socket.s.txt -o
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\Socket.o
#        .\mbed-os\features\netsocket\Socket.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\Socket.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\Socket.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia\mbed-os\features\netsocket\Socket.cpp
      1          /* Socket
      2           * Copyright (c) 2015 ARM Limited
      3           *
      4           * Licensed under the Apache License, Version 2.0 (the "License");
      5           * you may not use this file except in compliance with the License.
      6           * You may obtain a copy of the License at
      7           *
      8           *     http://www.apache.org/licenses/LICENSE-2.0
      9           *
     10           * Unless required by applicable law or agreed to in writing, software
     11           * distributed under the License is distributed on an "AS IS" BASIS,
     12           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     13           * See the License for the specific language governing permissions and
     14           * limitations under the License.
     15           */
     16          
     17          #include "Socket.h"

   \                                 In section .text, align 4
   \   __code __interwork __softfp mbed::Callback<void ()>::Callback(void (*)())
   \                     _ZN4mbed8CallbackIFvvEEC1EPS1_: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0x000A             MOVS     R2,R1
   \   00000004   0xD106             BNE      ??Callback_0
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0x2400             MOVS     R4,#+0
   \   0000000E   0xC01E             STM      R0!,{R1-R4}
   \   00000010   0x3810             SUBS     R0,R0,#+16
   \   00000012   0xE009             B        ??Callback_1
   \                     ??Callback_0: (+1)
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x2300             MOVS     R3,#+0
   \   00000018   0x2400             MOVS     R4,#+0
   \   0000001A   0x2500             MOVS     R5,#+0
   \   0000001C   0xC03C             STM      R0!,{R2-R5}
   \   0000001E   0x3810             SUBS     R0,R0,#+16
   \   00000020   0xD000             BEQ      ??Callback_2
   \   00000022   0x6001             STR      R1,[R0, #+0]
   \                     ??Callback_2: (+1)
   \   00000024   0x4901             LDR      R1,??Callback_3
   \   00000026   0x60C1             STR      R1,[R0, #+12]
   \                     ??Callback_1: (+1)
   \   00000028   0xBC30             POP      {R4,R5}
   \   0000002A   0x4770             BX       LR               ;; return
   \                     ??Callback_3:
   \   0000002C   0x........         DC32     _ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops

   \                                 In section .text, align 2
   \   __code __interwork __softfp mbed::Callback<void ()>::Callback(mbed::Callback<void ()> const &)
   \                     _ZN4mbed8CallbackIFvvEEC1ERKS2_: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x68E2             LDR      R2,[R4, #+12]
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xD001             BEQ      ??Callback_4
   \   0000000C   0x6852             LDR      R2,[R2, #+4]
   \   0000000E   0x4790             BLX      R2
   \                     ??Callback_4: (+1)
   \   00000010   0x68E0             LDR      R0,[R4, #+12]
   \   00000012   0x60E8             STR      R0,[R5, #+12]
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0xBD32             POP      {R1,R4,R5,PC}    ;; return

   \                                 In section .text, align 4
   \   __code __interwork __softfp mbed::Callback<void ()>::Callback<>(Socket *, void (Socket::*)())
   \                     _ZN4mbed8CallbackIFvvEEC1I6SocketS4_EEPT0_MT_FvvE: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEE14method_contextI6SocketMS4_FvvEEC1EPS4_S6_
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0x2300             MOVS     R3,#+0
   \   00000014   0xC40F             STM      R4!,{R0-R3}
   \   00000016   0x3C10             SUBS     R4,R4,#+16
   \   00000018   0xD003             BEQ      ??Callback_5
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0xC80E             LDM      R0!,{R1-R3}
   \   0000001E   0xC40E             STM      R4!,{R1-R3}
   \   00000020   0x3C0C             SUBS     R4,R4,#+12
   \                     ??Callback_5: (+1)
   \   00000022   0x4802             LDR      R0,??Callback_6
   \   00000024   0x60E0             STR      R0,[R4, #+12]
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0xB004             ADD      SP,SP,#+16
   \   0000002A   0xBD10             POP      {R4,PC}          ;; return
   \                     ??Callback_6:
   \   0000002C   0x........         DC32     _ZZN4mbed8CallbackIFvvEE8generateINS2_14method_contextI6SocketMS5_FvvEEEEEvRKT_E3ops

   \                                 In section .text, align 4
   \   __code __interwork __softfp mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
   \                     _ZN4mbed8CallbackIFvvEEC1IvvEEPFvPT_EPT0_: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0xC078             STM      R0!,{R3-R6}
   \   0000000C   0x3810             SUBS     R0,R0,#+16
   \   0000000E   0xD001             BEQ      ??Callback_7
   \   00000010   0x6001             STR      R1,[R0, #+0]
   \   00000012   0x6042             STR      R2,[R0, #+4]
   \                     ??Callback_7: (+1)
   \   00000014   0x4901             LDR      R1,??Callback_8
   \   00000016   0x60C1             STR      R1,[R0, #+12]
   \   00000018   0xBC70             POP      {R4-R6}
   \   0000001A   0x4770             BX       LR               ;; return
   \                     ??Callback_8:
   \   0000001C   0x........         DC32     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops

   \                                 In section .text, align 4
   \   __interwork __softfp void mbed::Callback<void ()>::thunk(void *)
   \                     _ZN4mbed8CallbackIFvvEE5thunkEPv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x68E0             LDR      R0,[R4, #+12]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD105             BNE      ??thunk_0
   \   0000000A   0x2284             MOVS     R2,#+132
   \   0000000C   0x0092             LSLS     R2,R2,#+2        ;; #+528
   \   0000000E   0x4904             LDR      R1,??thunk_1
   \   00000010   0x4804             LDR      R0,??thunk_1+0x4
   \   00000012   0x.... 0x....      BL       mbed_assert_internal
   \                     ??thunk_0: (+1)
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x68E1             LDR      R1,[R4, #+12]
   \   0000001A   0x6809             LDR      R1,[R1, #+0]
   \   0000001C   0x4788             BLX      R1
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
   \                     ??thunk_1:
   \   00000020   0x........         DC32     _ZZNK4mbed8CallbackIFvvEE4callEvEs_0
   \   00000024   0x........         DC32     _ZZNK4mbed8CallbackIFvvEE4callEvEs

   \                                 In section .rodata, align 4
   \   __absolute mbed::Callback<void ()>::ops const mbed::Callback<void ()>::generate<>(void (*const &)())::ops
   \                     _ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops:
   \   00000000   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv
   \   00000004   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv
   \   00000008   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv

   \                                 In section .rodata, align 4
   \   __absolute mbed::Callback<void ()>::ops const mbed::Callback<void ()>::generate<>(mbed::Callback<void ()>::function_context<void (*)(void *), void> const &)::ops
   \                     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops:
   \   00000000   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv
   \   00000004   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv
   \   00000008   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_

   \                                 In section .rodata, align 4
   \   __absolute mbed::Callback<void ()>::ops const mbed::Callback<void ()>::generate<>(mbed::Callback<void ()>::method_context<Socket, void (Socket::*)()> const &)::ops
   \                     _ZZN4mbed8CallbackIFvvEE8generateINS2_14method_contextI6SocketMS5_FvvEEEEEvRKT_E3ops:
   \   00000000   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv
   \   00000004   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv
   \   00000008   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_call<void (*)()>(void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4780             BLX      R0
   \   00000006   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0x6848             LDR      R0,[R1, #+4]
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x4788             BLX      R1
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::method_context<Socket, void (Socket::*)()>>(void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0x684A             LDR      R2,[R1, #+4]
   \   00000006   0x6888             LDR      R0,[R1, #+8]
   \   00000008   0x1053             ASRS     R3,R2,#+1
   \   0000000A   0x18C0             ADDS     R0,R0,R3
   \   0000000C   0x07D2             LSLS     R2,R2,#+31
   \   0000000E   0xD401             BMI      ??function_call_0
   \   00000010   0x6809             LDR      R1,[R1, #+0]
   \   00000012   0xE002             B        ??function_call_1
   \                     ??function_call_0: (+1)
   \   00000014   0x6802             LDR      R2,[R0, #+0]
   \   00000016   0x6809             LDR      R1,[R1, #+0]
   \   00000018   0x5851             LDR      R1,[R2, R1]
   \                     ??function_call_1: (+1)
   \   0000001A   0x4788             BLX      R1
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_move<void (*)()>(void *, void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??function_move_0
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x6001             STR      R1,[R0, #+0]
   \                     ??function_move_0: (+1)
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??function_move_1
   \   00000004   0xC90C             LDM      R1!,{R2,R3}
   \   00000006   0xC00C             STM      R0!,{R2,R3}
   \                     ??function_move_1: (+1)
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::method_context<Socket, void (Socket::*)()>>(void *, void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD100             BNE      ??function_move_2
   \   00000004   0x4770             BX       LR
   \                     ??function_move_2: (+1)
   \   00000006   0xB410             PUSH     {R4}
   \   00000008   0xC91C             LDM      R1!,{R2-R4}
   \   0000000A   0xC01C             STM      R0!,{R2-R4}
   \   0000000C   0xBC10             POP      {R4}
   \   0000000E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_dtor<void (*)()>(void *)
   \                     _ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
   \                     _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::method_context<Socket, void (Socket::*)()>>(void *)
   \                     _ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __code __interwork __softfp mbed::Callback<void ()>::method_context<Socket, void (Socket::*)()>::method_context(Socket *, void (Socket::*)())
   \                     _ZN4mbed8CallbackIFvvEE14method_contextI6SocketMS4_FvvEEC1EPS4_S6_: (+1)
   \   00000000   0xC00C             STM      R0!,{R2,R3}
   \   00000002   0x3808             SUBS     R0,R0,#+8
   \   00000004   0x6081             STR      R1,[R0, #+8]
   \   00000006   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::callback<>(Socket *, void (Socket::*)())
   \                     _ZN4mbed8callbackI6SocketS1_vEENS_8CallbackIFT1_vEEEPT0_MT_FS3_vE: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEEC1I6SocketS4_EEPT0_MT_FvvE
   \   00000006   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::callback<>(void (*)(void *), void *)
   \                     _ZN4mbed8callbackIvvvEENS_8CallbackIFT1_vEEEPFS2_PT_EPT0_: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEEC1IvvEEPFvPT_EPT0_
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     18          #include "mbed.h"
     19          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp Socket::subobject Socket()
   \                     _ZN6SocketC2Ev: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZN6SocketC1Ev
   \   00000006   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     20          Socket::Socket()
   \                     _ZN6SocketC1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     21              : _stack(0)
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x6060             STR      R0,[R4, #+4]
     22              , _socket(0)
   \   00000008   0x60A0             STR      R0,[R4, #+8]
     23              , _timeout(osWaitForever)
   \   0000000A   0x43C0             MVNS     R0,R0            ;; #-1
   \   0000000C   0x60E0             STR      R0,[R4, #+12]
     24          {
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x3010             ADDS     R0,R0,#+16
   \   00000014   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEEC1EPS1_
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x3020             ADDS     R0,R0,#+32
   \   0000001E   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEEC1EPS1_
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x3030             ADDS     R0,R0,#+48
   \   00000026   0x.... 0x....      BL       _ZN4rtos5MutexC1Ev
     25          }
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
     26          

   \                                 In section .text, align 4, keep-with-next
     27          nsapi_error_t Socket::open(NetworkStack *stack)
     28          {
   \                     _ZN6Socket4openEP12NetworkStack: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     29              _lock.lock();
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x43C9             MVNS     R1,R1            ;; #-1
   \   0000000C   0x3030             ADDS     R0,R0,#+48
   \   0000000E   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
     30          
     31              if (_stack != NULL || stack == NULL) {
   \   00000012   0x6860             LDR      R0,[R4, #+4]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD101             BNE      ??open_0
   \   00000018   0x2D00             CMP      R5,#+0
   \   0000001A   0xD105             BNE      ??open_1
     32                  _lock.unlock();
   \                     ??open_0: (+1)
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x3030             ADDS     R0,R0,#+48
   \   00000020   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
     33                  return NSAPI_ERROR_PARAMETER;
   \   00000024   0x....             LDR      R0,??DataTable5  ;; 0xfffff445
   \   00000026   0xE042             B        ??open_2
     34              }
     35              _stack = stack;
   \                     ??open_1: (+1)
   \   00000028   0x6065             STR      R5,[R4, #+4]
     36          
     37              nsapi_socket_t socket;
     38              nsapi_error_t err = _stack->socket_open(&socket, get_proto());
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x6821             LDR      R1,[R4, #+0]
   \   0000002E   0x6889             LDR      R1,[R1, #+8]
   \   00000030   0x4788             BLX      R1
   \   00000032   0x0002             MOVS     R2,R0
   \   00000034   0x4669             MOV      R1,SP
   \   00000036   0x0028             MOVS     R0,R5
   \   00000038   0x682B             LDR      R3,[R5, #+0]
   \   0000003A   0x69DB             LDR      R3,[R3, #+28]
   \   0000003C   0x4798             BLX      R3
   \   0000003E   0x0005             MOVS     R5,R0
     39              if (err) {
   \   00000040   0xD005             BEQ      ??open_3
     40                  _lock.unlock();
   \   00000042   0x0020             MOVS     R0,R4
   \   00000044   0x3030             ADDS     R0,R0,#+48
   \   00000046   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
     41                  return err;
   \   0000004A   0x0028             MOVS     R0,R5
   \   0000004C   0xE02F             B        ??open_2
     42              }
     43          
     44              _socket = socket;
   \                     ??open_3: (+1)
   \   0000004E   0x9800             LDR      R0,[SP, #+0]
   \   00000050   0x60A0             STR      R0,[R4, #+8]
     45              _event = callback(this, &Socket::event);
   \   00000052   0xBF00             Nop      
   \   00000054   0x....             ADR.N    R0,?_0
   \   00000056   0xC80C             LDM      R0!,{R2,R3}
   \   00000058   0x0021             MOVS     R1,R4
   \   0000005A   0xA801             ADD      R0,SP,#+4
   \   0000005C   0x.... 0x....      BL       _ZN4mbed8callbackI6SocketS1_vEENS_8CallbackIFT1_vEEEPT0_MT_FS3_vE
   \   00000060   0x0020             MOVS     R0,R4
   \   00000062   0x3010             ADDS     R0,R0,#+16
   \   00000064   0xA901             ADD      R1,SP,#+4
   \   00000066   0x4288             CMP      R0,R1
   \   00000068   0xD00E             BEQ      ??open_4
   \   0000006A   0x69E1             LDR      R1,[R4, #+28]
   \   0000006C   0x2900             CMP      R1,#+0
   \   0000006E   0xD003             BEQ      ??open_5
   \   00000070   0x0020             MOVS     R0,R4
   \   00000072   0x3010             ADDS     R0,R0,#+16
   \   00000074   0x6889             LDR      R1,[R1, #+8]
   \   00000076   0x4788             BLX      R1
   \                     ??open_5: (+1)
   \   00000078   0x0020             MOVS     R0,R4
   \   0000007A   0x3010             ADDS     R0,R0,#+16
   \   0000007C   0xD004             BEQ      ??open_4
   \   0000007E   0xA901             ADD      R1,SP,#+4
   \   00000080   0x0020             MOVS     R0,R4
   \   00000082   0x3010             ADDS     R0,R0,#+16
   \   00000084   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEEC1ERKS2_
   \                     ??open_4: (+1)
   \   00000088   0x9904             LDR      R1,[SP, #+16]
   \   0000008A   0x2900             CMP      R1,#+0
   \   0000008C   0xD002             BEQ      ??open_6
   \   0000008E   0xA801             ADD      R0,SP,#+4
   \   00000090   0x6889             LDR      R1,[R1, #+8]
   \   00000092   0x4788             BLX      R1
     46              _stack->socket_attach(_socket, Callback<void()>::thunk, &_event);
   \                     ??open_6: (+1)
   \   00000094   0x6860             LDR      R0,[R4, #+4]
   \   00000096   0x0023             MOVS     R3,R4
   \   00000098   0x3310             ADDS     R3,R3,#+16
   \   0000009A   0x....             LDR      R2,??DataTable5_1
   \   0000009C   0x68A1             LDR      R1,[R4, #+8]
   \   0000009E   0x6805             LDR      R5,[R0, #+0]
   \   000000A0   0x6C6D             LDR      R5,[R5, #+68]
   \   000000A2   0x47A8             BLX      R5
     47          
     48              _lock.unlock();
   \   000000A4   0x0020             MOVS     R0,R4
   \   000000A6   0x3030             ADDS     R0,R0,#+48
   \   000000A8   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
     49              return NSAPI_ERROR_OK;
   \   000000AC   0x2000             MOVS     R0,#+0
   \                     ??open_2: (+1)
   \   000000AE   0xB005             ADD      SP,SP,#+20
   \   000000B0   0xBD30             POP      {R4,R5,PC}       ;; return
     50          }
     51          

   \                                 In section .text, align 2, keep-with-next
     52          nsapi_error_t Socket::close()
     53          {
   \                     _ZN6Socket5closeEv: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     54              _lock.lock();
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000008   0x3030             ADDS     R0,R0,#+48
   \   0000000A   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
     55          
     56              nsapi_error_t ret = NSAPI_ERROR_OK;
   \   0000000E   0x2500             MOVS     R5,#+0
   \   00000010   0x2600             MOVS     R6,#+0
     57              if (_socket) {
   \   00000012   0x68A1             LDR      R1,[R4, #+8]
   \   00000014   0x2900             CMP      R1,#+0
   \   00000016   0xD00C             BEQ      ??close_0
     58                  _stack->socket_attach(_socket, 0, 0);
   \   00000018   0x6860             LDR      R0,[R4, #+4]
   \   0000001A   0x2300             MOVS     R3,#+0
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0x6806             LDR      R6,[R0, #+0]
   \   00000020   0x6C76             LDR      R6,[R6, #+68]
   \   00000022   0x47B0             BLX      R6
     59                  nsapi_socket_t socket = _socket;
   \   00000024   0x68A1             LDR      R1,[R4, #+8]
     60                  _socket = 0;
   \   00000026   0x60A5             STR      R5,[R4, #+8]
     61                  ret = _stack->socket_close(socket);
   \   00000028   0x6860             LDR      R0,[R4, #+4]
   \   0000002A   0x6802             LDR      R2,[R0, #+0]
   \   0000002C   0x6A12             LDR      R2,[R2, #+32]
   \   0000002E   0x4790             BLX      R2
   \   00000030   0x0006             MOVS     R6,R0
     62              }
     63              _stack = 0;
   \                     ??close_0: (+1)
   \   00000032   0x6065             STR      R5,[R4, #+4]
     64          
     65              // Wakeup anything in a blocking operation
     66              // on this socket
     67              event();
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x6821             LDR      R1,[R4, #+0]
   \   00000038   0x68C9             LDR      R1,[R1, #+12]
   \   0000003A   0x4788             BLX      R1
     68          
     69              _lock.unlock();
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0x3030             ADDS     R0,R0,#+48
   \   00000040   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
     70              return ret;
   \   00000044   0x0030             MOVS     R0,R6
   \   00000046   0xBD70             POP      {R4-R6,PC}       ;; return
     71          }
     72          

   \                                 In section .text, align 2, keep-with-next
     73          int Socket::modify_multicast_group(const SocketAddress &address, nsapi_socket_option_t socketopt)
     74          {
   \                     _ZN6Socket22modify_multicast_groupERK13SocketAddress19nsapi_socket_option: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB095             SUB      SP,SP,#+84
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x0014             MOVS     R4,R2
     75              nsapi_ip_mreq_t mreq;
     76          
     77              // Set up group address
     78              mreq.imr_multiaddr = address.get_addr();
   \   00000008   0xA806             ADD      R0,SP,#+24
   \   0000000A   0x.... 0x....      BL       _ZNK13SocketAddress8get_addrEv
   \   0000000E   0xA80B             ADD      R0,SP,#+44
   \   00000010   0xA906             ADD      R1,SP,#+24
   \   00000012   0x2211             MOVS     R2,#+17
   \   00000014   0x.... 0x....      BL       __aeabi_memcpy
     79              mreq.imr_interface = nsapi_addr_t();   // Default address, NSAPI_UNSPEC
   \   00000018   0x2111             MOVS     R1,#+17
   \   0000001A   0xA801             ADD      R0,SP,#+4
   \   0000001C   0x.... 0x....      BL       __aeabi_memclr4
   \   00000020   0xA80B             ADD      R0,SP,#+44
   \   00000022   0x3011             ADDS     R0,R0,#+17
   \   00000024   0xA901             ADD      R1,SP,#+4
   \   00000026   0x2211             MOVS     R2,#+17
   \   00000028   0x.... 0x....      BL       __aeabi_memcpy
     80          
     81              return this->setsockopt(NSAPI_SOCKET, socketopt, &mreq, sizeof(mreq));
   \   0000002C   0x2022             MOVS     R0,#+34
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0xAB0B             ADD      R3,SP,#+44
   \   00000032   0x0022             MOVS     R2,R4
   \   00000034   0x....             LDR      R1,??DataTable5_2  ;; 0x1b58
   \   00000036   0x0028             MOVS     R0,R5
   \   00000038   0x.... 0x....      BL       _ZN6Socket10setsockoptEiiPKvj
   \   0000003C   0xB015             ADD      SP,SP,#+84
   \   0000003E   0xBD30             POP      {R4,R5,PC}       ;; return
     82          }
     83          

   \                                 In section .text, align 2, keep-with-next
     84          int Socket::join_multicast_group(const SocketAddress &address)
     85          {
   \                     _ZN6Socket20join_multicast_groupERK13SocketAddress: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB094             SUB      SP,SP,#+80
   \   00000004   0x0004             MOVS     R4,R0
     86              return modify_multicast_group(address, NSAPI_ADD_MEMBERSHIP);
   \   00000006   0xA806             ADD      R0,SP,#+24
   \   00000008   0x.... 0x....      BL       _ZNK13SocketAddress8get_addrEv
   \   0000000C   0xA80B             ADD      R0,SP,#+44
   \   0000000E   0xA906             ADD      R1,SP,#+24
   \   00000010   0x2211             MOVS     R2,#+17
   \   00000012   0x.... 0x....      BL       __aeabi_memcpy
   \   00000016   0x2111             MOVS     R1,#+17
   \   00000018   0xA801             ADD      R0,SP,#+4
   \   0000001A   0x.... 0x....      BL       __aeabi_memclr4
   \   0000001E   0xA80B             ADD      R0,SP,#+44
   \   00000020   0x3011             ADDS     R0,R0,#+17
   \   00000022   0xA901             ADD      R1,SP,#+4
   \   00000024   0x2211             MOVS     R2,#+17
   \   00000026   0x.... 0x....      BL       __aeabi_memcpy
   \   0000002A   0x2022             MOVS     R0,#+34
   \   0000002C   0x9000             STR      R0,[SP, #+0]
   \   0000002E   0xAB0B             ADD      R3,SP,#+44
   \   00000030   0x2207             MOVS     R2,#+7
   \   00000032   0x....             B.N      ?Subroutine1
     87          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x....             LDR      R1,??DataTable5_2  ;; 0x1b58
   \   00000002   0x0020             MOVS     R0,R4
   \   00000004   0x.... 0x....      BL       _ZN6Socket10setsockoptEiiPKvj
   \   00000008   0xB014             ADD      SP,SP,#+80
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
     88          

   \                                 In section .text, align 2, keep-with-next
     89          int Socket::leave_multicast_group(const SocketAddress &address)
     90          {
   \                     _ZN6Socket21leave_multicast_groupERK13SocketAddress: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB094             SUB      SP,SP,#+80
   \   00000004   0x0004             MOVS     R4,R0
     91              return modify_multicast_group(address, NSAPI_DROP_MEMBERSHIP);
   \   00000006   0xA806             ADD      R0,SP,#+24
   \   00000008   0x.... 0x....      BL       _ZNK13SocketAddress8get_addrEv
   \   0000000C   0xA80B             ADD      R0,SP,#+44
   \   0000000E   0xA906             ADD      R1,SP,#+24
   \   00000010   0x2211             MOVS     R2,#+17
   \   00000012   0x.... 0x....      BL       __aeabi_memcpy
   \   00000016   0x2111             MOVS     R1,#+17
   \   00000018   0xA801             ADD      R0,SP,#+4
   \   0000001A   0x.... 0x....      BL       __aeabi_memclr4
   \   0000001E   0xA80B             ADD      R0,SP,#+44
   \   00000020   0x3011             ADDS     R0,R0,#+17
   \   00000022   0xA901             ADD      R1,SP,#+4
   \   00000024   0x2211             MOVS     R2,#+17
   \   00000026   0x.... 0x....      BL       __aeabi_memcpy
   \   0000002A   0x2022             MOVS     R0,#+34
   \   0000002C   0x9000             STR      R0,[SP, #+0]
   \   0000002E   0xAB0B             ADD      R3,SP,#+44
   \   00000030   0x2208             MOVS     R2,#+8
   \   00000032                      REQUIRE ?Subroutine1
   \   00000032                      ;; // Fall through to label ?Subroutine1
     92          }
     93          
     94          

   \                                 In section .text, align 2, keep-with-next
     95          nsapi_error_t Socket::bind(uint16_t port)
     96          {
   \                     _ZN6Socket4bindEt: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB090             SUB      SP,SP,#+64
   \   00000004   0x0004             MOVS     R4,R0
     97              // Underlying bind is thread safe
     98              SocketAddress addr(0, port);
   \   00000006   0x000A             MOVS     R2,R1
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x....             B.N      ?Subroutine0
     99              return bind(addr);
    100          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x4668             MOV      R0,SP
   \   00000002   0x.... 0x....      BL       _ZN13SocketAddressC1EPKct
   \   00000006   0x0001             MOVS     R1,R0
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       _ZN6Socket4bindERK13SocketAddress
   \   0000000E   0xB010             ADD      SP,SP,#+64
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
    101          

   \                                 In section .text, align 2, keep-with-next
    102          nsapi_error_t Socket::bind(const char *address, uint16_t port)
    103          {
   \                     _ZN6Socket4bindEPKct: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB090             SUB      SP,SP,#+64
   \   00000004   0x0004             MOVS     R4,R0
    104              // Underlying bind is thread safe
    105              SocketAddress addr(address, port);
   \   00000006                      REQUIRE ?Subroutine0
   \   00000006                      ;; // Fall through to label ?Subroutine0
    106              return bind(addr);
    107          }
    108          

   \                                 In section .text, align 2, keep-with-next
    109          nsapi_error_t Socket::bind(const SocketAddress &address)
    110          {
   \                     _ZN6Socket4bindERK13SocketAddress: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    111              _lock.lock();
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x43C9             MVNS     R1,R1            ;; #-1
   \   0000000A   0x3030             ADDS     R0,R0,#+48
   \   0000000C   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
    112              nsapi_error_t ret;
    113          
    114              if (!_socket) {
   \   00000010   0x68A1             LDR      R1,[R4, #+8]
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xD101             BNE      ??bind_0
    115                  ret = NSAPI_ERROR_NO_SOCKET;
   \   00000016   0x....             LDR      R5,??DataTable5_3  ;; 0xfffff443
   \   00000018   0xE005             B        ??bind_1
    116              } else {
    117                  ret = _stack->socket_bind(_socket, address);
   \                     ??bind_0: (+1)
   \   0000001A   0x6860             LDR      R0,[R4, #+4]
   \   0000001C   0x002A             MOVS     R2,R5
   \   0000001E   0x6803             LDR      R3,[R0, #+0]
   \   00000020   0x6A5B             LDR      R3,[R3, #+36]
   \   00000022   0x4798             BLX      R3
   \   00000024   0x0005             MOVS     R5,R0
    118              }
    119          
    120              _lock.unlock();
   \                     ??bind_1: (+1)
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x3030             ADDS     R0,R0,#+48
   \   0000002A   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
    121              return ret;
   \   0000002E   0x0028             MOVS     R0,R5
   \   00000030   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    122          }
    123          

   \                                 In section .text, align 2, keep-with-next
    124          void Socket::set_blocking(bool blocking)
    125          {
   \                     _ZN6Socket12set_blockingEb: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    126              // Socket::set_timeout is thread safe
    127              set_timeout(blocking ? -1 : 0);
   \   00000004   0x2600             MOVS     R6,#+0
   \   00000006   0x43F6             MVNS     R6,R6            ;; #-1
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD001             BEQ      ??set_blocking_0
   \   0000000C   0x0035             MOVS     R5,R6
   \   0000000E   0xE000             B        ??set_blocking_1
   \                     ??set_blocking_0: (+1)
   \   00000010   0x2500             MOVS     R5,#+0
   \                     ??set_blocking_1: (+1)
   \   00000012   0x....             B.N      ?Subroutine2
    128          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x0031             MOVS     R1,R6
   \   00000002   0x3030             ADDS     R0,R0,#+48
   \   00000004   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
   \   00000008   0x2D00             CMP      R5,#+0
   \   0000000A   0xD400             BMI      ??Subroutine2_0
   \   0000000C   0x002E             MOVS     R6,R5
   \                     ??Subroutine2_0: (+1)
   \   0000000E   0x60E6             STR      R6,[R4, #+12]
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x3030             ADDS     R0,R0,#+48
   \   00000014   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
   \   00000018   0xBD70             POP      {R4-R6,PC}       ;; return
    129          

   \                                 In section .text, align 2, keep-with-next
    130          void Socket::set_timeout(int timeout)
    131          {
   \                     _ZN6Socket11set_timeoutEi: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    132              _lock.lock();
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0x43F6             MVNS     R6,R6            ;; #-1
   \   0000000A                      REQUIRE ?Subroutine2
   \   0000000A                      ;; // Fall through to label ?Subroutine2
    133          
    134              if (timeout >= 0) {
    135                  _timeout = (uint32_t)timeout;
    136              } else {
    137                  _timeout = osWaitForever;
    138              }
    139          
    140              _lock.unlock();
    141          }
    142          

   \                                 In section .text, align 2, keep-with-next
    143          nsapi_error_t Socket::setsockopt(int level, int optname, const void *optval, unsigned optlen)
    144          {
   \                     _ZN6Socket10setsockoptEiiPKvj: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0017             MOVS     R7,R2
   \   0000000A   0x001E             MOVS     R6,R3
    145              _lock.lock();
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000010   0x3030             ADDS     R0,R0,#+48
   \   00000012   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
    146              nsapi_error_t ret;
    147          
    148              if (!_socket) {
   \   00000016   0x68A1             LDR      R1,[R4, #+8]
   \   00000018   0x2900             CMP      R1,#+0
   \   0000001A   0xD101             BNE      ??setsockopt_0
    149                  ret = NSAPI_ERROR_NO_SOCKET;
   \   0000001C   0x....             LDR      R5,??DataTable5_3  ;; 0xfffff443
   \   0000001E   0xE009             B        ??setsockopt_1
    150              } else {
    151                  ret = _stack->setsockopt(_socket, level, optname, optval, optlen);
   \                     ??setsockopt_0: (+1)
   \   00000020   0x6860             LDR      R0,[R4, #+4]
   \   00000022   0x9A08             LDR      R2,[SP, #+32]
   \   00000024   0x9201             STR      R2,[SP, #+4]
   \   00000026   0x9600             STR      R6,[SP, #+0]
   \   00000028   0x003B             MOVS     R3,R7
   \   0000002A   0x002A             MOVS     R2,R5
   \   0000002C   0x6805             LDR      R5,[R0, #+0]
   \   0000002E   0x6CAD             LDR      R5,[R5, #+72]
   \   00000030   0x47A8             BLX      R5
   \   00000032   0x0005             MOVS     R5,R0
    152              }
    153          
    154              _lock.unlock();
   \                     ??setsockopt_1: (+1)
   \   00000034   0x....             B.N      ?Subroutine3
    155              return ret;
    156          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x0020             MOVS     R0,R4
   \   00000002   0x3030             ADDS     R0,R0,#+48
   \   00000004   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
   \   00000008   0x0028             MOVS     R0,R5
   \   0000000A   0xB003             ADD      SP,SP,#+12
   \   0000000C   0xBDF0             POP      {R4-R7,PC}       ;; return
    157          

   \                                 In section .text, align 4, keep-with-next
    158          nsapi_error_t Socket::getsockopt(int level, int optname, void *optval, unsigned *optlen)
    159          {
   \                     _ZN6Socket10getsockoptEiiPvPj: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0017             MOVS     R7,R2
   \   0000000A   0x001E             MOVS     R6,R3
    160              _lock.lock();
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000010   0x3030             ADDS     R0,R0,#+48
   \   00000012   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
    161              nsapi_error_t ret;
    162          
    163              if (!_socket) {
   \   00000016   0x68A1             LDR      R1,[R4, #+8]
   \   00000018   0x2900             CMP      R1,#+0
   \   0000001A   0xD103             BNE      ??getsockopt_0
    164                  ret = NSAPI_ERROR_NO_SOCKET;
   \   0000001C   0x4D00             LDR      R5,??getsockopt_1  ;; 0xfffff443
   \   0000001E   0xE00B             B        ??getsockopt_2
   \                     ??getsockopt_1:
   \   00000020   0xFFFFF443         DC32     0xfffff443
    165              } else {
    166                  ret = _stack->getsockopt(_socket, level, optname, optval, optlen);
   \                     ??getsockopt_0: (+1)
   \   00000024   0x6860             LDR      R0,[R4, #+4]
   \   00000026   0x9A08             LDR      R2,[SP, #+32]
   \   00000028   0x9201             STR      R2,[SP, #+4]
   \   0000002A   0x9600             STR      R6,[SP, #+0]
   \   0000002C   0x003B             MOVS     R3,R7
   \   0000002E   0x002A             MOVS     R2,R5
   \   00000030   0x6805             LDR      R5,[R0, #+0]
   \   00000032   0x6CED             LDR      R5,[R5, #+76]
   \   00000034   0x47A8             BLX      R5
   \   00000036   0x0005             MOVS     R5,R0
    167              }
    168          
    169              _lock.unlock();
   \                     ??getsockopt_2: (+1)
   \   00000038                      REQUIRE ?Subroutine3
   \   00000038                      ;; // Fall through to label ?Subroutine3
    170              return ret;
    171          
    172          }
    173          

   \                                 In section .text, align 2, keep-with-next
    174          void Socket::sigio(Callback<void()> callback)
    175          {
   \                     _ZN6Socket5sigioEN4mbed8CallbackIFvvEEE: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    176              _lock.lock();
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x43C9             MVNS     R1,R1            ;; #-1
   \   0000000A   0x3030             ADDS     R0,R0,#+48
   \   0000000C   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
    177              _callback = callback;
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x3020             ADDS     R0,R0,#+32
   \   00000014   0x42A8             CMP      R0,R5
   \   00000016   0xD00E             BEQ      ??sigio_0
   \   00000018   0x6AE1             LDR      R1,[R4, #+44]
   \   0000001A   0x2900             CMP      R1,#+0
   \   0000001C   0xD003             BEQ      ??sigio_1
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x3020             ADDS     R0,R0,#+32
   \   00000022   0x6889             LDR      R1,[R1, #+8]
   \   00000024   0x4788             BLX      R1
   \                     ??sigio_1: (+1)
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x3020             ADDS     R0,R0,#+32
   \   0000002A   0xD004             BEQ      ??sigio_0
   \   0000002C   0x0029             MOVS     R1,R5
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0x3020             ADDS     R0,R0,#+32
   \   00000032   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEEC1ERKS2_
    178              _lock.unlock();
   \                     ??sigio_0: (+1)
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0x3030             ADDS     R0,R0,#+48
   \   0000003A   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
    179          }
   \   0000003E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    180          

   \                                 In section .text, align 2, keep-with-next
    181          void Socket::attach(Callback<void()> callback)
    182          {
   \                     _ZN6Socket6attachEN4mbed8CallbackIFvvEEE: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000C             MOVS     R4,R1
    183              sigio(callback);
   \   00000008   0x68E2             LDR      R2,[R4, #+12]
   \   0000000A   0x2A00             CMP      R2,#+0
   \   0000000C   0xD002             BEQ      ??attach_0
   \   0000000E   0x4668             MOV      R0,SP
   \   00000010   0x6852             LDR      R2,[R2, #+4]
   \   00000012   0x4790             BLX      R2
   \                     ??attach_0: (+1)
   \   00000014   0x68E0             LDR      R0,[R4, #+12]
   \   00000016   0x9003             STR      R0,[SP, #+12]
   \   00000018   0x4669             MOV      R1,SP
   \   0000001A   0x0028             MOVS     R0,R5
   \   0000001C   0x.... 0x....      BL       _ZN6Socket5sigioEN4mbed8CallbackIFvvEEE
   \   00000020   0x9903             LDR      R1,[SP, #+12]
   \   00000022   0x2900             CMP      R1,#+0
   \   00000024   0xD002             BEQ      ??attach_1
   \   00000026   0x4668             MOV      R0,SP
   \   00000028   0x6889             LDR      R1,[R1, #+8]
   \   0000002A   0x4788             BLX      R1
    184          }
   \                     ??attach_1: (+1)
   \   0000002C   0xB005             ADD      SP,SP,#+20
   \   0000002E   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0xFFFFF445         DC32     0xfffff445

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     _ZN4mbed8CallbackIFvvEE5thunkEPv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x00001B58         DC32     0x1b58

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0xFFFFF443         DC32     0xfffff443

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Socket::Socket()
         8   -> mbed::Callback<void ()>::Callback(void (*)())
         8   -> rtos::Mutex::Mutex()
      32   Socket::attach(mbed::Callback<void ()>)
        32   -- Indirect call
        32   -> Socket::sigio(mbed::Callback<void ()>)
      16   Socket::bind(SocketAddress const &)
        16   -- Indirect call
        16   -> rtos::Mutex::lock(unsigned int)
        16   -> rtos::Mutex::unlock()
      72   Socket::bind(char const *, std::uint16_t)
        72   -> Socket::bind(SocketAddress const &)
        72   -> SocketAddress::SocketAddress(char const *, std::uint16_t)
      72   Socket::bind(std::uint16_t)
        72   -> Socket::bind(SocketAddress const &)
        72   -> SocketAddress::SocketAddress(char const *, std::uint16_t)
      16   Socket::close()
        16   -- Indirect call
        16   -> rtos::Mutex::lock(unsigned int)
        16   -> rtos::Mutex::unlock()
      32   Socket::getsockopt(int, int, void *, unsigned int *)
        32   -- Indirect call
        32   -> rtos::Mutex::lock(unsigned int)
        32   -> rtos::Mutex::unlock()
      88   Socket::join_multicast_group(SocketAddress const &)
        88   -> Socket::setsockopt(int, int, void const *, unsigned int)
        88   -> SocketAddress::get_addr() const
        88   -> __aeabi_memclr4
        88   -> __aeabi_memcpy
      88   Socket::leave_multicast_group(SocketAddress const &)
        88   -> Socket::setsockopt(int, int, void const *, unsigned int)
        88   -> SocketAddress::get_addr() const
        88   -> __aeabi_memclr4
        88   -> __aeabi_memcpy
      96   Socket::modify_multicast_group(SocketAddress const &, nsapi_socket_option)
        96   -> Socket::setsockopt(int, int, void const *, unsigned int)
        96   -> SocketAddress::get_addr() const
        96   -> __aeabi_memclr4
        96   -> __aeabi_memcpy
      32   Socket::open(NetworkStack *)
        32   -- Indirect call
        32   -> mbed::Callback<void ()>::Callback(mbed::Callback<void ()> const &)
        32   -> mbed::callback<>(Socket *, void (Socket::*)())
        32   -> rtos::Mutex::lock(unsigned int)
        32   -> rtos::Mutex::unlock()
      16   Socket::set_blocking(bool)
        16   -> rtos::Mutex::lock(unsigned int)
        16   -> rtos::Mutex::unlock()
      16   Socket::set_timeout(int)
        16   -> rtos::Mutex::lock(unsigned int)
        16   -> rtos::Mutex::unlock()
      32   Socket::setsockopt(int, int, void const *, unsigned int)
        32   -- Indirect call
        32   -> rtos::Mutex::lock(unsigned int)
        32   -> rtos::Mutex::unlock()
      16   Socket::sigio(mbed::Callback<void ()>)
        16   -- Indirect call
        16   -> mbed::Callback<void ()>::Callback(mbed::Callback<void ()> const &)
        16   -> rtos::Mutex::lock(unsigned int)
        16   -> rtos::Mutex::unlock()
       8   Socket::subobject Socket()
         8   -> Socket::Socket()
      16   mbed::Callback<void ()>::Callback(mbed::Callback<void ()> const &)
        16   -- Indirect call
       8   mbed::Callback<void ()>::Callback(void (*)())
      24   mbed::Callback<void ()>::Callback<>(Socket *, void (Socket::*)())
        24   -> mbed::Callback<void ()>::method_context<Socket, void (Socket::*)()>::method_context(Socket *, void (Socket::*)())
      12   mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
       8   mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
         8   -- Indirect call
       8   mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::method_context<Socket, void (Socket::*)()>>(void const *)
         8   -- Indirect call
       8   mbed::Callback<void ()>::function_call<void (*)()>(void const *)
         8   -- Indirect call
       0   mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
       0   mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::method_context<Socket, void (Socket::*)()>>(void *)
       0   mbed::Callback<void ()>::function_dtor<void (*)()>(void *)
       0   mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
       4   mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::method_context<Socket, void (Socket::*)()>>(void *, void const *)
       0   mbed::Callback<void ()>::function_move<void (*)()>(void *, void const *)
       0   mbed::Callback<void ()>::method_context<Socket, void (Socket::*)()>::method_context(Socket *, void (Socket::*)())
       8   mbed::Callback<void ()>::thunk(void *)
         8   -- Indirect call
         8   -> mbed_assert_internal
       8   mbed::callback<>(Socket *, void (Socket::*)())
         8   -> mbed::Callback<void ()>::Callback<>(Socket *, void (Socket::*)())
       8   mbed::callback<>(void (*)(void *), void *)
         8   -> mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
      18  ?Subroutine0
      12  ?Subroutine1
      26  ?Subroutine2
      14  ?Subroutine3
      46  Socket::Socket()
      48  Socket::attach(mbed::Callback<void ()>)
      50  Socket::bind(SocketAddress const &)
       6  Socket::bind(char const *, std::uint16_t)
      12  Socket::bind(std::uint16_t)
      72  Socket::close()
      56  Socket::getsockopt(int, int, void *, unsigned int *)
      52  Socket::join_multicast_group(SocketAddress const &)
      50  Socket::leave_multicast_group(SocketAddress const &)
      64  Socket::modify_multicast_group(SocketAddress const &, nsapi_socket_option)
     178  Socket::open(NetworkStack *)
      20  Socket::set_blocking(bool)
      10  Socket::set_timeout(int)
      54  Socket::setsockopt(int, int, void const *, unsigned int)
      64  Socket::sigio(mbed::Callback<void ()>)
       8  Socket::subobject Socket()
      24  mbed::Callback<void ()>::Callback(mbed::Callback<void ()> const &)
      48  mbed::Callback<void ()>::Callback(void (*)())
      48  mbed::Callback<void ()>::Callback<>(Socket *, void (Socket::*)())
      32  mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
      12  mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
      30  mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::method_context<Socket, void (Socket::*)()>>(void const *)
       8  mbed::Callback<void ()>::function_call<void (*)()>(void const *)
       2  mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
       2  mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::method_context<Socket, void (Socket::*)()>>(void *)
       2  mbed::Callback<void ()>::function_dtor<void (*)()>(void *)
      10  mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
      16  mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::method_context<Socket, void (Socket::*)()>>(void *, void const *)
      10  mbed::Callback<void ()>::function_move<void (*)()>(void *, void const *)
       8  mbed::Callback<void ()>::method_context<Socket, void (Socket::*)()>::method_context(Socket *, void (Socket::*)())
      40  mbed::Callback<void ()>::thunk(void *)
       8  mbed::callback<>(Socket *, void (Socket::*)())
       8  mbed::callback<>(void (*)(void *), void *)
      12  ops
      12  ops
      12  ops
     356  -- Other

 
   384 bytes in section .rodata
 1 192 bytes in section .text
 
 884 bytes of CODE  memory (+ 308 bytes shared)
   0 bytes of CONST memory (+ 384 bytes shared)

Errors: none
Warnings: none
