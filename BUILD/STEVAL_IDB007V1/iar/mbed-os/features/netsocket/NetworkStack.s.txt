###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       16/Mar/2018  12:16:39
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\netsocket\NetworkStack.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DDEVICE_SERIAL=1 -DTARGET_CORTEX_M -DDEVICE_SPI=1 -DTARGET_LIKE_MBED
#        -DMBED_BUILD_TIMESTAMP=1521198946.13 -DARM_MATH_CM0 -DTARGET_RELEASE
#        -D__CORTEX_M0 -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0
#        -DTOOLCHAIN_object -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -f
#        .\BUILD\STEVAL_IDB007V1\iar\.includes_fc2e77952737cb4522ab0dffe8cfd8aa.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN
#        -I./mbed-os/features/frameworks
#        -I./mbed-os/features/frameworks/greentea-client
#        -I./mbed-os/features/frameworks/greentea-client/greentea-client
#        -I./mbed-os/features/frameworks/greentea-client/source
#        -I./mbed-os/features/frameworks/unity
#        -I./mbed-os/features/frameworks/unity/source
#        -I./mbed-os/features/frameworks/unity/unity
#        -I./mbed-os/features/frameworks/utest
#        -I./mbed-os/features/frameworks/utest/source
#        -I./mbed-os/features/frameworks/utest/utest
#        -I./mbed-os/features/mbedtls -I./mbed-os/features/mbedtls/importer
#        -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/features/netsocket
#        -I./mbed-os/features/netsocket/cellular
#        -I./mbed-os/features/netsocket/cellular/generic_modem_driver
#        -I./mbed-os/features/netsocket/cellular/utils
#        -I./mbed-os/features/storage -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\iar\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\NetworkStack.d
#        -l
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\NetworkStack.s.txt
#        -o
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\NetworkStack.o
#        .\mbed-os\features\netsocket\NetworkStack.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\NetworkStack.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\NetworkStack.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia\mbed-os\features\netsocket\NetworkStack.cpp
      1          /* Socket
      2           * Copyright (c) 2015 ARM Limited
      3           *
      4           * Licensed under the Apache License, Version 2.0 (the "License");
      5           * you may not use this file except in compliance with the License.
      6           * You may obtain a copy of the License at
      7           *
      8           *     http://www.apache.org/licenses/LICENSE-2.0
      9           *
     10           * Unless required by applicable law or agreed to in writing, software
     11           * distributed under the License is distributed on an "AS IS" BASIS,
     12           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     13           * See the License for the specific language governing permissions and
     14           * limitations under the License.
     15           */
     16          
     17          #include "NetworkStack.h"

   \                                 In section .text, align 2
   \   __code __interwork __softfp NetworkStack::~NetworkStack()
   \                     _ZN12NetworkStackD1Ev: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __code __interwork __softfp NetworkStack::deleter ~NetworkStack()
   \                     _ZN12NetworkStackD0Ev: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZdlPv
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     18          #include "nsapi_dns.h"
     19          #include "mbed.h"

   \                                 In section .rodata, align 4
   \   __absolute mbed::Callback<void ()>::ops const mbed::Callback<void ()>::generate<>(mbed::Callback<void ()>::function_context<void (*)(void *), void> const &)::ops
   \                     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops:
   \   00000000   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv
   \   00000004   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv
   \   00000008   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0x6848             LDR      R0,[R1, #+4]
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x4788             BLX      R1
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??function_move_0
   \   00000004   0xC90C             LDM      R1!,{R2,R3}
   \   00000006   0xC00C             STM      R0!,{R2,R3}
   \                     ??function_move_0: (+1)
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
   \                     _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4
   \   __interwork __softfp void mbed::callback<>(void (*)(void *), void *)
   \                     _ZN4mbed8callbackIvvvEENS_8CallbackIFT1_vEEEPFS2_PT_EPT0_: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0xC078             STM      R0!,{R3-R6}
   \   0000000C   0x3810             SUBS     R0,R0,#+16
   \   0000000E   0xD001             BEQ      ??callback_0
   \   00000010   0x6001             STR      R1,[R0, #+0]
   \   00000012   0x6042             STR      R2,[R0, #+4]
   \                     ??callback_0: (+1)
   \   00000014   0x4901             LDR      R1,??callback_1
   \   00000016   0x60C1             STR      R1,[R0, #+12]
   \   00000018   0xBC70             POP      {R4-R6}
   \   0000001A   0x4770             BX       LR               ;; return
   \                     ??callback_1:
   \   0000001C   0x........         DC32     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops
     20          #include "stddef.h"
     21          #include <new>
     22          
     23          
     24          // Default NetworkStack operations

   \                                 In section .text, align 2, keep-with-next
     25          nsapi_error_t NetworkStack::gethostbyname(const char *name, SocketAddress *address, nsapi_version_t version)
     26          {
   \                     _ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB097             SUB      SP,SP,#+92
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x000F             MOVS     R7,R1
   \   00000008   0x0015             MOVS     R5,R2
   \   0000000A   0x001C             MOVS     R4,R3
     27              // check for simple ip addresses
     28              if (address->set_ip_address(name)) {
   \   0000000C   0x0028             MOVS     R0,R5
   \   0000000E   0x.... 0x....      BL       _ZN13SocketAddress14set_ip_addressEPKc
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD00A             BEQ      ??gethostbyname_0
     29                  if (version != NSAPI_UNSPEC && address->get_ip_version() != version) {
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0xD006             BEQ      ??gethostbyname_1
   \   0000001A   0x0028             MOVS     R0,R5
   \   0000001C   0x.... 0x....      BL       _ZNK13SocketAddress14get_ip_versionEv
   \   00000020   0x42A0             CMP      R0,R4
   \   00000022   0xD001             BEQ      ??gethostbyname_1
     30                      return NSAPI_ERROR_DNS_FAILURE;
   \   00000024   0x....             LDR      R0,??DataTable8  ;; 0xfffff43f
   \   00000026   0xE027             B        ??gethostbyname_2
     31                  }
     32          
     33                  return NSAPI_ERROR_OK;
   \                     ??gethostbyname_1: (+1)
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xE025             B        ??gethostbyname_2
     34              }
     35          
     36              // if the version is unspecified, try to guess the version from the
     37              // ip address of the underlying stack
     38              if (version == NSAPI_UNSPEC) {
   \                     ??gethostbyname_0: (+1)
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0xD11D             BNE      ??gethostbyname_3
     39                  SocketAddress testaddress;
   \   00000030   0x2111             MOVS     R1,#+17
   \   00000032   0xA803             ADD      R0,SP,#+12
   \   00000034   0x.... 0x....      BL       __aeabi_memclr4
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x9002             STR      R0,[SP, #+8]
   \   0000003C   0xA903             ADD      R1,SP,#+12
   \   0000003E   0xB083             SUB      SP,SP,#+12
   \   00000040   0x4668             MOV      R0,SP
   \   00000042   0x2214             MOVS     R2,#+20
   \   00000044   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000048   0xBC0E             POP      {R1-R3}
   \   0000004A   0xA808             ADD      R0,SP,#+32
   \   0000004C   0x.... 0x....      BL       _ZN13SocketAddressC1E10nsapi_addrt
     40                  if (testaddress.set_ip_address(this->get_ip_address())) {
   \   00000050   0x0030             MOVS     R0,R6
   \   00000052   0x6831             LDR      R1,[R6, #+0]
   \   00000054   0x6889             LDR      R1,[R1, #+8]
   \   00000056   0x4788             BLX      R1
   \   00000058   0x0001             MOVS     R1,R0
   \   0000005A   0xA808             ADD      R0,SP,#+32
   \   0000005C   0x.... 0x....      BL       _ZN13SocketAddress14set_ip_addressEPKc
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD003             BEQ      ??gethostbyname_3
     41                      version = testaddress.get_ip_version();
   \   00000064   0xA808             ADD      R0,SP,#+32
   \   00000066   0x.... 0x....      BL       _ZNK13SocketAddress14get_ip_versionEv
   \   0000006A   0x0004             MOVS     R4,R0
     42                  }
     43              }
     44          
     45              return nsapi_dns_query(this, name, address, version);
   \                     ??gethostbyname_3: (+1)
   \   0000006C   0x0023             MOVS     R3,R4
   \   0000006E   0x002A             MOVS     R2,R5
   \   00000070   0x0039             MOVS     R1,R7
   \   00000072   0x0030             MOVS     R0,R6
   \   00000074   0x.... 0x....      BL       _Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version
   \                     ??gethostbyname_2: (+1)
   \   00000078   0xB017             ADD      SP,SP,#+92
   \   0000007A   0xBDF0             POP      {R4-R7,PC}       ;; return
     46          }
     47          

   \                                 In section .text, align 2, keep-with-next
     48          nsapi_error_t NetworkStack::add_dns_server(const SocketAddress &address)
     49          {
   \                     _ZN12NetworkStack14add_dns_serverERK13SocketAddress: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     50              return nsapi_dns_add_server(address);
   \   00000004   0xA801             ADD      R0,SP,#+4
   \   00000006   0x.... 0x....      BL       _ZNK13SocketAddress8get_addrEv
   \   0000000A   0xA901             ADD      R1,SP,#+4
   \   0000000C   0xB084             SUB      SP,SP,#+16
   \   0000000E   0x4668             MOV      R0,SP
   \   00000010   0x2211             MOVS     R2,#+17
   \   00000012   0x.... 0x....      BL       __aeabi_memcpy
   \   00000016   0xBC0F             POP      {R0-R3}
   \   00000018   0x.... 0x....      BL       nsapi_dns_add_server
   \   0000001C   0xB007             ADD      SP,SP,#+28
   \   0000001E   0xBD00             POP      {PC}             ;; return
     51          }
     52          

   \                                 In section .text, align 2, keep-with-next
     53          nsapi_error_t NetworkStack::setstackopt(int level, int optname, const void *optval, unsigned optlen)
     54          {
     55              return NSAPI_ERROR_UNSUPPORTED;
   \                     _ZN12NetworkStack11setstackoptEiiPKvj: (+1)
   \   00000000   0x....             LDR      R0,??DataTable8_1  ;; 0xfffff446
   \   00000002   0x4770             BX       LR               ;; return
     56          }
     57          

   \                                 In section .text, align 2, keep-with-next
     58          nsapi_error_t NetworkStack::getstackopt(int level, int optname, void *optval, unsigned *optlen)
     59          {
     60              return NSAPI_ERROR_UNSUPPORTED;
   \                     _ZN12NetworkStack11getstackoptEiiPvPj: (+1)
   \   00000000   0x....             LDR      R0,??DataTable8_1  ;; 0xfffff446
   \   00000002   0x4770             BX       LR               ;; return
     61          }
     62          

   \                                 In section .text, align 2, keep-with-next
     63          nsapi_error_t NetworkStack::setsockopt(void *handle, int level, int optname, const void *optval, unsigned optlen)
     64          {
     65              return NSAPI_ERROR_UNSUPPORTED;
   \                     _ZN12NetworkStack10setsockoptEPviiPKvj: (+1)
   \   00000000   0x....             LDR      R0,??DataTable8_1  ;; 0xfffff446
   \   00000002   0x4770             BX       LR               ;; return
     66          }
     67          

   \                                 In section .text, align 2, keep-with-next
     68          nsapi_error_t NetworkStack::getsockopt(void *handle, int level, int optname, void *optval, unsigned *optlen)
     69          {
     70              return NSAPI_ERROR_UNSUPPORTED;
   \                     _ZN12NetworkStack10getsockoptEPviiS0_Pj: (+1)
   \   00000000   0x....             LDR      R0,??DataTable8_1  ;; 0xfffff446
   \   00000002   0x4770             BX       LR               ;; return
     71          }
     72          
     73          
     74          // NetworkStackWrapper class for encapsulating the raw nsapi_stack structure

   \                                 In section .text, align 2
     75          class NetworkStackWrapper : public NetworkStack
   \   __code __interwork __softfp NetworkStackWrapper::~NetworkStackWrapper()
   \                     _ZN19NetworkStackWrapperD1Ev: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __code __interwork __softfp NetworkStackWrapper::deleter ~NetworkStackWrapper()
   \                     _ZN19NetworkStackWrapperD0Ev: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZdlPv
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     76          {
     77          private:
     78              inline nsapi_stack_t *_stack()
     79              {
     80                  return reinterpret_cast<nsapi_stack_t *>(
     81                          reinterpret_cast<uint8_t *>(this)
     82                          - offsetof(nsapi_stack_t, _stack_buffer));
     83              }
     84          
     85              inline const nsapi_stack_api_t *_stack_api()
     86              {
     87                  return _stack()->stack_api;
     88              }
     89          
     90          public:

   \                                 In section .text, align 4
     91              virtual const char *get_ip_address()
     92              {
   \                     _ZN19NetworkStackWrapper14get_ip_addressEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
     93                  if (!_stack_api()->get_ip_address) {
   \   00000004   0x3808             SUBS     R0,R0,#+8
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x680A             LDR      R2,[R1, #+0]
   \   0000000A   0x0011             MOVS     R1,R2
   \   0000000C   0xD101             BNE      ??get_ip_address_0
     94                      return 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE012             B        ??get_ip_address_1
     95                  }
     96          
     97                  static uint8_t buffer[sizeof(SocketAddress)];
     98                  SocketAddress *address = new (buffer) SocketAddress(_stack_api()->get_ip_address(_stack()));
   \                     ??get_ip_address_0: (+1)
   \   00000012   0x0001             MOVS     R1,R0
   \   00000014   0xA803             ADD      R0,SP,#+12
   \   00000016   0x4790             BLX      R2
   \   00000018   0x4C08             LDR      R4,??get_ip_address_2
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x9002             STR      R0,[SP, #+8]
   \   0000001E   0xA903             ADD      R1,SP,#+12
   \   00000020   0xB083             SUB      SP,SP,#+12
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x2211             MOVS     R2,#+17
   \   00000026   0x.... 0x....      BL       __aeabi_memcpy
   \   0000002A   0xBC0E             POP      {R1-R3}
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x.... 0x....      BL       _ZN13SocketAddressC1E10nsapi_addrt
     99                  return address->get_ip_address();
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0x.... 0x....      BL       _ZNK13SocketAddress14get_ip_addressEv
   \                     ??get_ip_address_1: (+1)
   \   00000038   0xB008             ADD      SP,SP,#+32
   \   0000003A   0xBD10             POP      {R4,PC}          ;; return
   \                     ??get_ip_address_2:
   \   0000003C   0x........         DC32     _ZZN19NetworkStackWrapper14get_ip_addressEvE6buffer
    100              }

   \                                 In section .bss, align 4
   \                     _ZZN19NetworkStackWrapper14get_ip_addressEvE6buffer:
   \   00000000                      DS8 60
    101          

   \                                 In section .text, align 2
    102              virtual nsapi_error_t gethostbyname(const char *name, SocketAddress *address, nsapi_version_t version)
    103              {
   \                     _ZN19NetworkStackWrapper13gethostbynameEPKcP13SocketAddress13nsapi_version: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0015             MOVS     R5,R2
   \   00000008   0x001F             MOVS     R7,R3
    104                  if (!_stack_api()->gethostbyname) {
   \   0000000A   0x0006             MOVS     R6,R0
   \   0000000C   0x3E08             SUBS     R6,R6,#+8
   \   0000000E   0x6831             LDR      R1,[R6, #+0]
   \   00000010   0x6849             LDR      R1,[R1, #+4]
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xD103             BNE      ??gethostbyname_4
    105                      return NetworkStack::gethostbyname(name, address, version);
   \   00000016   0x0021             MOVS     R1,R4
   \   00000018   0x.... 0x....      BL       _ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version
   \   0000001C   0xE016             B        ??gethostbyname_5
    106                  }
    107          
    108                  nsapi_addr_t addr = {NSAPI_UNSPEC, 0};
   \                     ??gethostbyname_4: (+1)
   \   0000001E   0xA802             ADD      R0,SP,#+8
   \   00000020   0x2114             MOVS     R1,#+20
   \   00000022   0x.... 0x....      BL       __aeabi_memclr4
    109                  nsapi_error_t err = _stack_api()->gethostbyname(_stack(), name, &addr, version);
   \   00000026   0x003B             MOVS     R3,R7
   \   00000028   0xAA02             ADD      R2,SP,#+8
   \   0000002A   0x0021             MOVS     R1,R4
   \   0000002C   0x0030             MOVS     R0,R6
   \   0000002E   0x6834             LDR      R4,[R6, #+0]
   \   00000030   0x6864             LDR      R4,[R4, #+4]
   \   00000032   0x47A0             BLX      R4
   \   00000034   0x0004             MOVS     R4,R0
    110                  address->set_addr(addr);
   \   00000036   0xA902             ADD      R1,SP,#+8
   \   00000038   0xB083             SUB      SP,SP,#+12
   \   0000003A   0x4668             MOV      R0,SP
   \   0000003C   0x2214             MOVS     R2,#+20
   \   0000003E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000042   0xBC0E             POP      {R1-R3}
   \   00000044   0x0028             MOVS     R0,R5
   \   00000046   0x.... 0x....      BL       _ZN13SocketAddress8set_addrE10nsapi_addr
    111                  return err;
   \   0000004A   0x0020             MOVS     R0,R4
   \                     ??gethostbyname_5: (+1)
   \   0000004C   0xB007             ADD      SP,SP,#+28
   \   0000004E   0xBDF0             POP      {R4-R7,PC}       ;; return
    112              }
    113          

   \                                 In section .text, align 2
    114              virtual nsapi_error_t add_dns_server(const SocketAddress &address)
    115              {
   \                     _ZN19NetworkStackWrapper14add_dns_serverERK13SocketAddress: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
    116                  if (!_stack_api()->add_dns_server) {
   \   00000004   0x3808             SUBS     R0,R0,#+8
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x6820             LDR      R0,[R4, #+0]
   \   0000000A   0x6880             LDR      R0,[R0, #+8]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD10C             BNE      ??add_dns_server_0
    117                      return NetworkStack::add_dns_server(address);
   \   00000010   0xA801             ADD      R0,SP,#+4
   \   00000012   0x.... 0x....      BL       _ZNK13SocketAddress8get_addrEv
   \   00000016   0xA901             ADD      R1,SP,#+4
   \   00000018   0xB084             SUB      SP,SP,#+16
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x2211             MOVS     R2,#+17
   \   0000001E   0x.... 0x....      BL       __aeabi_memcpy
   \   00000022   0xBC0F             POP      {R0-R3}
   \   00000024   0x.... 0x....      BL       nsapi_dns_add_server
   \   00000028   0xE00D             B        ??add_dns_server_1
    118                  }
    119          
    120                  return _stack_api()->add_dns_server(_stack(), address.get_addr());
   \                     ??add_dns_server_0: (+1)
   \   0000002A   0xA802             ADD      R0,SP,#+8
   \   0000002C   0x.... 0x....      BL       _ZNK13SocketAddress8get_addrEv
   \   00000030   0xA902             ADD      R1,SP,#+8
   \   00000032   0xB083             SUB      SP,SP,#+12
   \   00000034   0x4668             MOV      R0,SP
   \   00000036   0x2211             MOVS     R2,#+17
   \   00000038   0x.... 0x....      BL       __aeabi_memcpy
   \   0000003C   0xBC0E             POP      {R1-R3}
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x6824             LDR      R4,[R4, #+0]
   \   00000042   0x68A4             LDR      R4,[R4, #+8]
   \   00000044   0x47A0             BLX      R4
   \                     ??add_dns_server_1: (+1)
   \   00000046   0xB008             ADD      SP,SP,#+32
   \   00000048   0xBD10             POP      {R4,PC}          ;; return
    121              }
    122          

   \                                 In section .text, align 4
    123              virtual nsapi_error_t setstackopt(int level, int optname, const void *optval, unsigned optlen)
    124              {
   \                     _ZN19NetworkStackWrapper11setstackoptEiiPKvj: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    125                  if (!_stack_api()->setstackopt) {
   \   00000002   0x3808             SUBS     R0,R0,#+8
   \   00000004   0x6804             LDR      R4,[R0, #+0]
   \   00000006   0x68E4             LDR      R4,[R4, #+12]
   \   00000008   0x0025             MOVS     R5,R4
   \   0000000A   0xD101             BNE      ??setstackopt_0
    126                      return NSAPI_ERROR_UNSUPPORTED;
   \   0000000C   0x4802             LDR      R0,??setstackopt_1  ;; 0xfffff446
   \   0000000E   0xBD32             POP      {R1,R4,R5,PC}
    127                  }
    128          
    129                  return _stack_api()->setstackopt(_stack(), level, optname, optval, optlen);
   \                     ??setstackopt_0: (+1)
   \   00000010   0x9D04             LDR      R5,[SP, #+16]
   \   00000012   0x9500             STR      R5,[SP, #+0]
   \   00000014   0x47A0             BLX      R4
   \   00000016   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \                     ??setstackopt_1:
   \   00000018   0xFFFFF446         DC32     0xfffff446
    130              }
    131          

   \                                 In section .text, align 4
    132              virtual nsapi_error_t getstackopt(int level, int optname, void *optval, unsigned *optlen)
    133              {
   \                     _ZN19NetworkStackWrapper11getstackoptEiiPvPj: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    134                  if (!_stack_api()->getstackopt) {
   \   00000002   0x3808             SUBS     R0,R0,#+8
   \   00000004   0x6804             LDR      R4,[R0, #+0]
   \   00000006   0x6924             LDR      R4,[R4, #+16]
   \   00000008   0x0025             MOVS     R5,R4
   \   0000000A   0xD101             BNE      ??getstackopt_0
    135                      return NSAPI_ERROR_UNSUPPORTED;
   \   0000000C   0x4802             LDR      R0,??getstackopt_1  ;; 0xfffff446
   \   0000000E   0xBD32             POP      {R1,R4,R5,PC}
    136                  }
    137          
    138                  return _stack_api()->getstackopt(_stack(), level, optname, optval, optlen);
   \                     ??getstackopt_0: (+1)
   \   00000010   0x9D04             LDR      R5,[SP, #+16]
   \   00000012   0x9500             STR      R5,[SP, #+0]
   \   00000014   0x47A0             BLX      R4
   \   00000016   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \                     ??getstackopt_1:
   \   00000018   0xFFFFF446         DC32     0xfffff446
    139              }
    140          
    141          protected:

   \                                 In section .text, align 4
    142              virtual nsapi_error_t socket_open(nsapi_socket_t *socket, nsapi_protocol_t proto)
    143              {
   \                     _ZN19NetworkStackWrapper11socket_openEPPv14nsapi_protocol: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    144                  if (!_stack_api()->socket_open) {
   \   00000002   0x3808             SUBS     R0,R0,#+8
   \   00000004   0x6803             LDR      R3,[R0, #+0]
   \   00000006   0x695B             LDR      R3,[R3, #+20]
   \   00000008   0x001C             MOVS     R4,R3
   \   0000000A   0xD101             BNE      ??socket_open_0
    145                      return NSAPI_ERROR_UNSUPPORTED;
   \   0000000C   0x4801             LDR      R0,??socket_open_1  ;; 0xfffff446
   \   0000000E   0xBD10             POP      {R4,PC}
    146                  }
    147          
    148                  return _stack_api()->socket_open(_stack(), socket, proto);
   \                     ??socket_open_0: (+1)
   \   00000010   0x4798             BLX      R3
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
   \                     ??socket_open_1:
   \   00000014   0xFFFFF446         DC32     0xfffff446
    149              }
    150          

   \                                 In section .text, align 4
    151              virtual nsapi_error_t socket_close(nsapi_socket_t socket)
    152              {
   \                     _ZN19NetworkStackWrapper12socket_closeEPv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    153                  if (!_stack_api()->socket_close) {
   \   00000002   0x3808             SUBS     R0,R0,#+8
   \   00000004   0x6802             LDR      R2,[R0, #+0]
   \   00000006   0x6992             LDR      R2,[R2, #+24]
   \   00000008   0x0013             MOVS     R3,R2
   \   0000000A   0xD101             BNE      ??socket_close_0
    154                      return NSAPI_ERROR_UNSUPPORTED;
   \   0000000C   0x4801             LDR      R0,??socket_close_1  ;; 0xfffff446
   \   0000000E   0xBD02             POP      {R1,PC}
    155                  }
    156          
    157                  return _stack_api()->socket_close(_stack(), socket);
   \                     ??socket_close_0: (+1)
   \   00000010   0x4790             BLX      R2
   \   00000012   0xBD02             POP      {R1,PC}          ;; return
   \                     ??socket_close_1:
   \   00000014   0xFFFFF446         DC32     0xfffff446
    158              }
    159          

   \                                 In section .text, align 4
    160              virtual nsapi_error_t socket_bind(nsapi_socket_t socket, const SocketAddress &address)
    161              {
   \                     _ZN19NetworkStackWrapper11socket_bindEPvRK13SocketAddress: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0016             MOVS     R6,R2
    162                  if (!_stack_api()->socket_bind) {
   \   00000008   0x3808             SUBS     R0,R0,#+8
   \   0000000A   0x0007             MOVS     R7,R0
   \   0000000C   0x6838             LDR      R0,[R7, #+0]
   \   0000000E   0x69C0             LDR      R0,[R0, #+28]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD101             BNE      ??socket_bind_0
    163                      return NSAPI_ERROR_UNSUPPORTED;
   \   00000014   0x480C             LDR      R0,??socket_bind_1  ;; 0xfffff446
   \   00000016   0xE014             B        ??socket_bind_2
    164                  }
    165          
    166                  return _stack_api()->socket_bind(_stack(), socket, address.get_addr(), address.get_port());
   \                     ??socket_bind_0: (+1)
   \   00000018   0x0030             MOVS     R0,R6
   \   0000001A   0x.... 0x....      BL       _ZNK13SocketAddress8get_portEv
   \   0000001E   0x0005             MOVS     R5,R0
   \   00000020   0x0031             MOVS     R1,R6
   \   00000022   0xA804             ADD      R0,SP,#+16
   \   00000024   0x.... 0x....      BL       _ZNK13SocketAddress8get_addrEv
   \   00000028   0x9503             STR      R5,[SP, #+12]
   \   0000002A   0xA904             ADD      R1,SP,#+16
   \   0000002C   0xB082             SUB      SP,SP,#+8
   \   0000002E   0x4668             MOV      R0,SP
   \   00000030   0x2211             MOVS     R2,#+17
   \   00000032   0x.... 0x....      BL       __aeabi_memcpy
   \   00000036   0xBC0C             POP      {R2,R3}
   \   00000038   0x0021             MOVS     R1,R4
   \   0000003A   0x0038             MOVS     R0,R7
   \   0000003C   0x683C             LDR      R4,[R7, #+0]
   \   0000003E   0x69E4             LDR      R4,[R4, #+28]
   \   00000040   0x47A0             BLX      R4
   \                     ??socket_bind_2: (+1)
   \   00000042   0xB009             ADD      SP,SP,#+36
   \   00000044   0xBDF0             POP      {R4-R7,PC}       ;; return
   \   00000046   0xBF00             Nop      
   \                     ??socket_bind_1:
   \   00000048   0xFFFFF446         DC32     0xfffff446
    167              }
    168          

   \                                 In section .text, align 4
    169              virtual nsapi_error_t socket_listen(nsapi_socket_t socket, int backlog)
    170              {
   \                     _ZN19NetworkStackWrapper13socket_listenEPvi: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    171                  if (!_stack_api()->socket_listen) {
   \   00000002   0x3808             SUBS     R0,R0,#+8
   \   00000004   0x6803             LDR      R3,[R0, #+0]
   \   00000006   0x6A1B             LDR      R3,[R3, #+32]
   \   00000008   0x001C             MOVS     R4,R3
   \   0000000A   0xD101             BNE      ??socket_listen_0
    172                      return NSAPI_ERROR_UNSUPPORTED;
   \   0000000C   0x4801             LDR      R0,??socket_listen_1  ;; 0xfffff446
   \   0000000E   0xBD10             POP      {R4,PC}
    173                  }
    174          
    175                  return _stack_api()->socket_listen(_stack(), socket, backlog);
   \                     ??socket_listen_0: (+1)
   \   00000010   0x4798             BLX      R3
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
   \                     ??socket_listen_1:
   \   00000014   0xFFFFF446         DC32     0xfffff446
    176              }
    177          

   \                                 In section .text, align 4
    178              virtual nsapi_error_t socket_connect(nsapi_socket_t socket, const SocketAddress &address)
    179              {
   \                     _ZN19NetworkStackWrapper14socket_connectEPvRK13SocketAddress: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0016             MOVS     R6,R2
    180                  if (!_stack_api()->socket_connect) {
   \   00000008   0x3808             SUBS     R0,R0,#+8
   \   0000000A   0x0007             MOVS     R7,R0
   \   0000000C   0x6838             LDR      R0,[R7, #+0]
   \   0000000E   0x6A40             LDR      R0,[R0, #+36]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD101             BNE      ??socket_connect_0
    181                      return NSAPI_ERROR_UNSUPPORTED;
   \   00000014   0x480C             LDR      R0,??socket_connect_1  ;; 0xfffff446
   \   00000016   0xE014             B        ??socket_connect_2
    182                  }
    183          
    184                  return _stack_api()->socket_connect(_stack(), socket, address.get_addr(), address.get_port());
   \                     ??socket_connect_0: (+1)
   \   00000018   0x0030             MOVS     R0,R6
   \   0000001A   0x.... 0x....      BL       _ZNK13SocketAddress8get_portEv
   \   0000001E   0x0005             MOVS     R5,R0
   \   00000020   0x0031             MOVS     R1,R6
   \   00000022   0xA804             ADD      R0,SP,#+16
   \   00000024   0x.... 0x....      BL       _ZNK13SocketAddress8get_addrEv
   \   00000028   0x9503             STR      R5,[SP, #+12]
   \   0000002A   0xA904             ADD      R1,SP,#+16
   \   0000002C   0xB082             SUB      SP,SP,#+8
   \   0000002E   0x4668             MOV      R0,SP
   \   00000030   0x2211             MOVS     R2,#+17
   \   00000032   0x.... 0x....      BL       __aeabi_memcpy
   \   00000036   0xBC0C             POP      {R2,R3}
   \   00000038   0x0021             MOVS     R1,R4
   \   0000003A   0x0038             MOVS     R0,R7
   \   0000003C   0x683C             LDR      R4,[R7, #+0]
   \   0000003E   0x6A64             LDR      R4,[R4, #+36]
   \   00000040   0x47A0             BLX      R4
   \                     ??socket_connect_2: (+1)
   \   00000042   0xB009             ADD      SP,SP,#+36
   \   00000044   0xBDF0             POP      {R4-R7,PC}       ;; return
   \   00000046   0xBF00             Nop      
   \                     ??socket_connect_1:
   \   00000048   0xFFFFF446         DC32     0xfffff446
    185              }
    186          

   \                                 In section .text, align 4
    187              virtual nsapi_error_t socket_accept(nsapi_socket_t server, nsapi_socket_t *socket, SocketAddress *address)
    188              {
   \                     _ZN19NetworkStackWrapper13socket_acceptEPvPS0_P13SocketAddress: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x0017             MOVS     R7,R2
   \   00000008   0x001D             MOVS     R5,R3
    189                  if (!_stack_api()->socket_accept) {
   \   0000000A   0x3808             SUBS     R0,R0,#+8
   \   0000000C   0x0004             MOVS     R4,R0
   \   0000000E   0x6820             LDR      R0,[R4, #+0]
   \   00000010   0x6A80             LDR      R0,[R0, #+40]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD101             BNE      ??socket_accept_0
    190                      return NSAPI_ERROR_UNSUPPORTED;
   \   00000016   0x4814             LDR      R0,??socket_accept_1  ;; 0xfffff446
   \   00000018   0xE023             B        ??socket_accept_2
    191                  }
    192          
    193                  nsapi_addr_t addr = {NSAPI_IPv4, 0};
   \                     ??socket_accept_0: (+1)
   \   0000001A   0xA803             ADD      R0,SP,#+12
   \   0000001C   0x4913             LDR      R1,??socket_accept_1+0x4
   \   0000001E   0x2214             MOVS     R2,#+20
   \   00000020   0x.... 0x....      BL       __aeabi_memcpy4
    194                  uint16_t port = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x4669             MOV      R1,SP
   \   00000028   0x8108             STRH     R0,[R1, #+8]
    195          
    196                  nsapi_error_t err = _stack_api()->socket_accept(_stack(), server, socket, &addr, &port);
   \   0000002A   0xA802             ADD      R0,SP,#+8
   \   0000002C   0x9000             STR      R0,[SP, #+0]
   \   0000002E   0xAB03             ADD      R3,SP,#+12
   \   00000030   0x003A             MOVS     R2,R7
   \   00000032   0x0031             MOVS     R1,R6
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x6824             LDR      R4,[R4, #+0]
   \   00000038   0x6AA4             LDR      R4,[R4, #+40]
   \   0000003A   0x47A0             BLX      R4
   \   0000003C   0x0004             MOVS     R4,R0
    197          
    198                  if (address) {
   \   0000003E   0x2D00             CMP      R5,#+0
   \   00000040   0xD00E             BEQ      ??socket_accept_3
    199                      address->set_addr(addr);
   \   00000042   0xA903             ADD      R1,SP,#+12
   \   00000044   0xB083             SUB      SP,SP,#+12
   \   00000046   0x4668             MOV      R0,SP
   \   00000048   0x2214             MOVS     R2,#+20
   \   0000004A   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000004E   0xBC0E             POP      {R1-R3}
   \   00000050   0x0028             MOVS     R0,R5
   \   00000052   0x.... 0x....      BL       _ZN13SocketAddress8set_addrE10nsapi_addr
    200                      address->set_port(port);
   \   00000056   0x4668             MOV      R0,SP
   \   00000058   0x8901             LDRH     R1,[R0, #+8]
   \   0000005A   0x0028             MOVS     R0,R5
   \   0000005C   0x.... 0x....      BL       _ZN13SocketAddress8set_portEt
    201                  }
    202          
    203                  return err;
   \                     ??socket_accept_3: (+1)
   \   00000060   0x0020             MOVS     R0,R4
   \                     ??socket_accept_2: (+1)
   \   00000062   0xB009             ADD      SP,SP,#+36
   \   00000064   0xBDF0             POP      {R4-R7,PC}       ;; return
   \   00000066   0xBF00             Nop      
   \                     ??socket_accept_1:
   \   00000068   0xFFFFF446         DC32     0xfffff446
   \   0000006C   0x........         DC32     ?_1
    204              }
    205          

   \                                 In section .text, align 4
    206              virtual nsapi_size_or_error_t socket_send(nsapi_socket_t socket, const void *data, nsapi_size_t size)
    207              {
   \                     _ZN19NetworkStackWrapper11socket_sendEPvPKvj: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    208                  if (!_stack_api()->socket_send) {
   \   00000002   0x3808             SUBS     R0,R0,#+8
   \   00000004   0x6804             LDR      R4,[R0, #+0]
   \   00000006   0x6AE4             LDR      R4,[R4, #+44]
   \   00000008   0x0025             MOVS     R5,R4
   \   0000000A   0xD101             BNE      ??socket_send_0
    209                      return NSAPI_ERROR_UNSUPPORTED;
   \   0000000C   0x4801             LDR      R0,??socket_send_1  ;; 0xfffff446
   \   0000000E   0xBD32             POP      {R1,R4,R5,PC}
    210                  }
    211          
    212                  return _stack_api()->socket_send(_stack(), socket, data, size);
   \                     ??socket_send_0: (+1)
   \   00000010   0x47A0             BLX      R4
   \   00000012   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \                     ??socket_send_1:
   \   00000014   0xFFFFF446         DC32     0xfffff446
    213              }
    214          

   \                                 In section .text, align 4
    215              virtual nsapi_size_or_error_t socket_recv(nsapi_socket_t socket, void *data, nsapi_size_t size)
    216              {
   \                     _ZN19NetworkStackWrapper11socket_recvEPvS0_j: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    217                  if (!_stack_api()->socket_recv) {
   \   00000002   0x3808             SUBS     R0,R0,#+8
   \   00000004   0x6804             LDR      R4,[R0, #+0]
   \   00000006   0x6B24             LDR      R4,[R4, #+48]
   \   00000008   0x0025             MOVS     R5,R4
   \   0000000A   0xD101             BNE      ??socket_recv_0
    218                      return NSAPI_ERROR_UNSUPPORTED;
   \   0000000C   0x4801             LDR      R0,??socket_recv_1  ;; 0xfffff446
   \   0000000E   0xBD32             POP      {R1,R4,R5,PC}
    219                  }
    220          
    221                  return _stack_api()->socket_recv(_stack(), socket, data, size);
   \                     ??socket_recv_0: (+1)
   \   00000010   0x47A0             BLX      R4
   \   00000012   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \                     ??socket_recv_1:
   \   00000014   0xFFFFF446         DC32     0xfffff446
    222              }
    223          

   \                                 In section .text, align 4
    224              virtual nsapi_size_or_error_t socket_sendto(nsapi_socket_t socket, const SocketAddress &address, const void *data, nsapi_size_t size)
    225              {
   \                     _ZN19NetworkStackWrapper13socket_sendtoEPvRK13SocketAddressPKvj: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0016             MOVS     R6,R2
    226                  if (!_stack_api()->socket_sendto) {
   \   00000008   0x3808             SUBS     R0,R0,#+8
   \   0000000A   0x0007             MOVS     R7,R0
   \   0000000C   0x6838             LDR      R0,[R7, #+0]
   \   0000000E   0x6B40             LDR      R0,[R0, #+52]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD101             BNE      ??socket_sendto_0
    227                      return NSAPI_ERROR_UNSUPPORTED;
   \   00000014   0x480E             LDR      R0,??socket_sendto_1  ;; 0xfffff446
   \   00000016   0xE018             B        ??socket_sendto_2
    228                  }
    229          
    230                  return _stack_api()->socket_sendto(_stack(), socket, address.get_addr(), address.get_port(), data, size);
   \                     ??socket_sendto_0: (+1)
   \   00000018   0x0030             MOVS     R0,R6
   \   0000001A   0x.... 0x....      BL       _ZNK13SocketAddress8get_portEv
   \   0000001E   0x0005             MOVS     R5,R0
   \   00000020   0x0031             MOVS     R1,R6
   \   00000022   0xA806             ADD      R0,SP,#+24
   \   00000024   0x.... 0x....      BL       _ZNK13SocketAddress8get_addrEv
   \   00000028   0x9812             LDR      R0,[SP, #+72]
   \   0000002A   0x9005             STR      R0,[SP, #+20]
   \   0000002C   0x980C             LDR      R0,[SP, #+48]
   \   0000002E   0x9004             STR      R0,[SP, #+16]
   \   00000030   0x9503             STR      R5,[SP, #+12]
   \   00000032   0xA906             ADD      R1,SP,#+24
   \   00000034   0xB082             SUB      SP,SP,#+8
   \   00000036   0x4668             MOV      R0,SP
   \   00000038   0x2211             MOVS     R2,#+17
   \   0000003A   0x.... 0x....      BL       __aeabi_memcpy
   \   0000003E   0xBC0C             POP      {R2,R3}
   \   00000040   0x0021             MOVS     R1,R4
   \   00000042   0x0038             MOVS     R0,R7
   \   00000044   0x683C             LDR      R4,[R7, #+0]
   \   00000046   0x6B64             LDR      R4,[R4, #+52]
   \   00000048   0x47A0             BLX      R4
   \                     ??socket_sendto_2: (+1)
   \   0000004A   0xB00D             ADD      SP,SP,#+52
   \   0000004C   0xBDF0             POP      {R4-R7,PC}       ;; return
   \   0000004E   0xBF00             Nop      
   \                     ??socket_sendto_1:
   \   00000050   0xFFFFF446         DC32     0xfffff446
    231              }
    232          

   \                                 In section .text, align 4
    233              virtual nsapi_size_or_error_t socket_recvfrom(nsapi_socket_t socket, SocketAddress *address, void *data, nsapi_size_t size)
    234              {
   \                     _ZN19NetworkStackWrapper15socket_recvfromEPvP13SocketAddressS0_j: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x0015             MOVS     R5,R2
   \   00000008   0x001F             MOVS     R7,R3
    235                  if (!_stack_api()->socket_recvfrom) {
   \   0000000A   0x3808             SUBS     R0,R0,#+8
   \   0000000C   0x0004             MOVS     R4,R0
   \   0000000E   0x6820             LDR      R0,[R4, #+0]
   \   00000010   0x6B80             LDR      R0,[R0, #+56]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD101             BNE      ??socket_recvfrom_0
    236                      return NSAPI_ERROR_UNSUPPORTED;
   \   00000016   0x4814             LDR      R0,??socket_recvfrom_1  ;; 0xfffff446
   \   00000018   0xE024             B        ??socket_recvfrom_2
    237                  }
    238          
    239                  nsapi_addr_t addr = {NSAPI_IPv4, 0};
   \                     ??socket_recvfrom_0: (+1)
   \   0000001A   0xA803             ADD      R0,SP,#+12
   \   0000001C   0x4913             LDR      R1,??socket_recvfrom_1+0x4
   \   0000001E   0x2214             MOVS     R2,#+20
   \   00000020   0x.... 0x....      BL       __aeabi_memcpy4
    240                  uint16_t port = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x4669             MOV      R1,SP
   \   00000028   0x8108             STRH     R0,[R1, #+8]
    241          
    242                  nsapi_size_or_error_t err = _stack_api()->socket_recvfrom(_stack(), socket, &addr, &port, data, size);
   \   0000002A   0x980E             LDR      R0,[SP, #+56]
   \   0000002C   0x9001             STR      R0,[SP, #+4]
   \   0000002E   0x9700             STR      R7,[SP, #+0]
   \   00000030   0xAB02             ADD      R3,SP,#+8
   \   00000032   0xAA03             ADD      R2,SP,#+12
   \   00000034   0x0031             MOVS     R1,R6
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0x6824             LDR      R4,[R4, #+0]
   \   0000003A   0x6BA4             LDR      R4,[R4, #+56]
   \   0000003C   0x47A0             BLX      R4
   \   0000003E   0x0004             MOVS     R4,R0
    243          
    244                  if (address) {
   \   00000040   0x2D00             CMP      R5,#+0
   \   00000042   0xD00E             BEQ      ??socket_recvfrom_3
    245                      address->set_addr(addr);
   \   00000044   0xA903             ADD      R1,SP,#+12
   \   00000046   0xB083             SUB      SP,SP,#+12
   \   00000048   0x4668             MOV      R0,SP
   \   0000004A   0x2214             MOVS     R2,#+20
   \   0000004C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000050   0xBC0E             POP      {R1-R3}
   \   00000052   0x0028             MOVS     R0,R5
   \   00000054   0x.... 0x....      BL       _ZN13SocketAddress8set_addrE10nsapi_addr
    246                      address->set_port(port);
   \   00000058   0x4668             MOV      R0,SP
   \   0000005A   0x8901             LDRH     R1,[R0, #+8]
   \   0000005C   0x0028             MOVS     R0,R5
   \   0000005E   0x.... 0x....      BL       _ZN13SocketAddress8set_portEt
    247                  }
    248          
    249                  return err;
   \                     ??socket_recvfrom_3: (+1)
   \   00000062   0x0020             MOVS     R0,R4
   \                     ??socket_recvfrom_2: (+1)
   \   00000064   0xB009             ADD      SP,SP,#+36
   \   00000066   0xBDF0             POP      {R4-R7,PC}       ;; return
   \                     ??socket_recvfrom_1:
   \   00000068   0xFFFFF446         DC32     0xfffff446
   \   0000006C   0x........         DC32     ?_2
    250              }
    251          

   \                                 In section .text, align 2
    252              virtual void socket_attach(nsapi_socket_t socket, void (*callback)(void *), void *data)
    253              {
   \                     _ZN19NetworkStackWrapper13socket_attachEPvPFvS0_ES0_: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    254                  if (!_stack_api()->socket_attach) {
   \   00000002   0x3808             SUBS     R0,R0,#+8
   \   00000004   0x6804             LDR      R4,[R0, #+0]
   \   00000006   0x6BE4             LDR      R4,[R4, #+60]
   \   00000008   0x0025             MOVS     R5,R4
   \   0000000A   0xD000             BEQ      ??socket_attach_0
    255                      return;
    256                  }
    257          
    258                  return _stack_api()->socket_attach(_stack(), socket, callback, data);
   \   0000000C   0x47A0             BLX      R4
   \                     ??socket_attach_0: (+1)
   \   0000000E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    259              }
    260          

   \                                 In section .text, align 4
    261              virtual nsapi_error_t setsockopt(nsapi_socket_t socket, int level, int optname, const void *optval, unsigned optlen)
    262              {
   \                     _ZN19NetworkStackWrapper10setsockoptEPviiPKvj: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    263                  if (!_stack_api()->setsockopt) {
   \   00000004   0x3808             SUBS     R0,R0,#+8
   \   00000006   0x6804             LDR      R4,[R0, #+0]
   \   00000008   0x6C24             LDR      R4,[R4, #+64]
   \   0000000A   0x0025             MOVS     R5,R4
   \   0000000C   0xD101             BNE      ??setsockopt_0
    264                      return NSAPI_ERROR_UNSUPPORTED;
   \   0000000E   0x4804             LDR      R0,??setsockopt_1  ;; 0xfffff446
   \   00000010   0xE004             B        ??setsockopt_2
    265                  }
    266          
    267                  return _stack_api()->setsockopt(_stack(), socket, level, optname, optval, optlen);
   \                     ??setsockopt_0: (+1)
   \   00000012   0x9D07             LDR      R5,[SP, #+28]
   \   00000014   0x9501             STR      R5,[SP, #+4]
   \   00000016   0x9D06             LDR      R5,[SP, #+24]
   \   00000018   0x9500             STR      R5,[SP, #+0]
   \   0000001A   0x47A0             BLX      R4
   \                     ??setsockopt_2: (+1)
   \   0000001C   0xB003             ADD      SP,SP,#+12
   \   0000001E   0xBD30             POP      {R4,R5,PC}       ;; return
   \                     ??setsockopt_1:
   \   00000020   0xFFFFF446         DC32     0xfffff446
    268              }
    269          

   \                                 In section .text, align 4
    270              virtual nsapi_error_t getsockopt(nsapi_socket_t socket, int level, int optname, void *optval, unsigned *optlen)
    271              {
   \                     _ZN19NetworkStackWrapper10getsockoptEPviiS0_Pj: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    272                  if (!_stack_api()->getsockopt) {
   \   00000004   0x3808             SUBS     R0,R0,#+8
   \   00000006   0x6804             LDR      R4,[R0, #+0]
   \   00000008   0x6C64             LDR      R4,[R4, #+68]
   \   0000000A   0x0025             MOVS     R5,R4
   \   0000000C   0xD101             BNE      ??getsockopt_0
    273                      return NSAPI_ERROR_UNSUPPORTED;
   \   0000000E   0x4804             LDR      R0,??getsockopt_1  ;; 0xfffff446
   \   00000010   0xE004             B        ??getsockopt_2
    274                  }
    275          
    276                  return _stack_api()->getsockopt(_stack(), socket, level, optname, optval, optlen);
   \                     ??getsockopt_0: (+1)
   \   00000012   0x9D07             LDR      R5,[SP, #+28]
   \   00000014   0x9501             STR      R5,[SP, #+4]
   \   00000016   0x9D06             LDR      R5,[SP, #+24]
   \   00000018   0x9500             STR      R5,[SP, #+0]
   \   0000001A   0x47A0             BLX      R4
   \                     ??getsockopt_2: (+1)
   \   0000001C   0xB003             ADD      SP,SP,#+12
   \   0000001E   0xBD30             POP      {R4,R5,PC}       ;; return
   \                     ??getsockopt_1:
   \   00000020   0xFFFFF446         DC32     0xfffff446
    277              }
    278          };
    279          
    280          
    281          // Conversion function for network stacks

   \                                 In section .text, align 2, keep-with-next
    282          NetworkStack *nsapi_create_stack(nsapi_stack_t *stack)
    283          {
    284              MBED_STATIC_ASSERT(sizeof stack->_stack_buffer >= sizeof(NetworkStackWrapper),
    285                      "The nsapi_stack_t stack buffer must fit a NetworkStackWrapper");
    286              return new (stack->_stack_buffer) NetworkStackWrapper;
   \                     _Z18nsapi_create_stackP11nsapi_stack: (+1)
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0x3108             ADDS     R1,R1,#+8
   \   00000004   0xD003             BEQ      ??nsapi_create_stack_0
   \   00000006   0x....             LDR      R1,??DataTable8_2
   \   00000008   0x6081             STR      R1,[R0, #+8]
   \   0000000A   0x3008             ADDS     R0,R0,#+8
   \   0000000C   0x4770             BX       LR
   \                     ??nsapi_create_stack_0: (+1)
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x4770             BX       LR               ;; return
    287          }
    288          

   \                                 In section .text, align 2, keep-with-next
    289          NetworkStack *nsapi_create_stack(NetworkStack *stack)
    290          {
    291              return stack;
   \                     _Z18nsapi_create_stackP12NetworkStack: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    292          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0xFFFFF43F         DC32     0xfffff43f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0xFFFFF446         DC32     0xfffff446

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     _ZTV19NetworkStackWrapper+0x8

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x01 0x00          DC8 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x01 0x00          DC8 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    293          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   NetworkStack::add_dns_server(SocketAddress const &)
        32   -> SocketAddress::get_addr() const
        48   -> __aeabi_memcpy
        32   -> nsapi_dns_add_server
       8   NetworkStack::deleter ~NetworkStack()
         8   -> operator delete(void *)
     124   NetworkStack::gethostbyname(char const *, SocketAddress *, nsapi_version)
       112   -- Indirect call
       112   -> SocketAddress::SocketAddress(nsapi_addr, std::uint16_t)
       112   -> SocketAddress::get_ip_version() const
       112   -> SocketAddress::set_ip_address(char const *)
       112   -> __aeabi_memclr4
       124   -> __aeabi_memcpy4
       112   -> nsapi_dns_query(NetworkStack *, char const *, SocketAddress *, nsapi_version)
       0   NetworkStack::getsockopt(void *, int, int, void *, unsigned int *)
       0   NetworkStack::getstackopt(int, int, void *, unsigned int *)
       0   NetworkStack::setsockopt(void *, int, int, void const *, unsigned int)
       0   NetworkStack::setstackopt(int, int, void const *, unsigned int)
       0   NetworkStack::~NetworkStack()
      56   NetworkStackWrapper::add_dns_server(SocketAddress const &)
        40   -- Indirect call
        40   -> SocketAddress::get_addr() const
        52   -> __aeabi_memcpy
        56   -> __aeabi_memcpy
        40   -> nsapi_dns_add_server
       8   NetworkStackWrapper::deleter ~NetworkStackWrapper()
         8   -> operator delete(void *)
      52   NetworkStackWrapper::get_ip_address()
        40   -- Indirect call
        40   -> SocketAddress::SocketAddress(nsapi_addr, std::uint16_t)
        40   -> SocketAddress::get_ip_address() const
        52   -> __aeabi_memcpy
      60   NetworkStackWrapper::gethostbyname(char const *, SocketAddress *, nsapi_version)
        48   -- Indirect call
        48   -> NetworkStack::gethostbyname(char const *, SocketAddress *, nsapi_version)
        48   -> SocketAddress::set_addr(nsapi_addr)
        48   -> __aeabi_memclr4
        60   -> __aeabi_memcpy4
      24   NetworkStackWrapper::getsockopt(void *, int, int, void *, unsigned int *)
        24   -- Indirect call
      16   NetworkStackWrapper::getstackopt(int, int, void *, unsigned int *)
        16   -- Indirect call
      24   NetworkStackWrapper::setsockopt(void *, int, int, void const *, unsigned int)
        24   -- Indirect call
      16   NetworkStackWrapper::setstackopt(int, int, void const *, unsigned int)
        16   -- Indirect call
      68   NetworkStackWrapper::socket_accept(void *, void * *, SocketAddress *)
        56   -- Indirect call
        56   -> SocketAddress::set_addr(nsapi_addr)
        56   -> SocketAddress::set_port(std::uint16_t)
        56   -> __aeabi_memcpy4
        68   -> __aeabi_memcpy4
      16   NetworkStackWrapper::socket_attach(void *, void (*)(void *), void *)
        16   -- Indirect call
      64   NetworkStackWrapper::socket_bind(void *, SocketAddress const &)
        56   -- Indirect call
        56   -> SocketAddress::get_addr() const
        56   -> SocketAddress::get_port() const
        64   -> __aeabi_memcpy
       8   NetworkStackWrapper::socket_close(void *)
         8   -- Indirect call
      64   NetworkStackWrapper::socket_connect(void *, SocketAddress const &)
        56   -- Indirect call
        56   -> SocketAddress::get_addr() const
        56   -> SocketAddress::get_port() const
        64   -> __aeabi_memcpy
       8   NetworkStackWrapper::socket_listen(void *, int)
         8   -- Indirect call
       8   NetworkStackWrapper::socket_open(void * *, nsapi_protocol)
         8   -- Indirect call
      16   NetworkStackWrapper::socket_recv(void *, void *, nsapi_size_t)
        16   -- Indirect call
      68   NetworkStackWrapper::socket_recvfrom(void *, SocketAddress *, void *, nsapi_size_t)
        56   -- Indirect call
        56   -> SocketAddress::set_addr(nsapi_addr)
        56   -> SocketAddress::set_port(std::uint16_t)
        56   -> __aeabi_memcpy4
        68   -> __aeabi_memcpy4
      16   NetworkStackWrapper::socket_send(void *, void const *, nsapi_size_t)
        16   -- Indirect call
      80   NetworkStackWrapper::socket_sendto(void *, SocketAddress const &, void const *, nsapi_size_t)
        72   -- Indirect call
        72   -> SocketAddress::get_addr() const
        72   -> SocketAddress::get_port() const
        80   -> __aeabi_memcpy
       0   NetworkStackWrapper::~NetworkStackWrapper()
       8   mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
         8   -- Indirect call
       0   mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
       0   mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
      12   mbed::callback<>(void (*)(void *), void *)
       0   nsapi_create_stack(NetworkStack *)
       0   nsapi_create_stack(nsapi_stack *)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
      20  ?_0
      20  ?_1
      20  ?_2
      32  NetworkStack::add_dns_server(SocketAddress const &)
       8  NetworkStack::deleter ~NetworkStack()
     124  NetworkStack::gethostbyname(char const *, SocketAddress *, nsapi_version)
       4  NetworkStack::getsockopt(void *, int, int, void *, unsigned int *)
       4  NetworkStack::getstackopt(int, int, void *, unsigned int *)
       4  NetworkStack::setsockopt(void *, int, int, void const *, unsigned int)
       4  NetworkStack::setstackopt(int, int, void const *, unsigned int)
       2  NetworkStack::~NetworkStack()
      74  NetworkStackWrapper::add_dns_server(SocketAddress const &)
       8  NetworkStackWrapper::deleter ~NetworkStackWrapper()
      64  NetworkStackWrapper::get_ip_address()
      80  NetworkStackWrapper::gethostbyname(char const *, SocketAddress *, nsapi_version)
      36  NetworkStackWrapper::getsockopt(void *, int, int, void *, unsigned int *)
      28  NetworkStackWrapper::getstackopt(int, int, void *, unsigned int *)
      36  NetworkStackWrapper::setsockopt(void *, int, int, void const *, unsigned int)
      28  NetworkStackWrapper::setstackopt(int, int, void const *, unsigned int)
     112  NetworkStackWrapper::socket_accept(void *, void * *, SocketAddress *)
      16  NetworkStackWrapper::socket_attach(void *, void (*)(void *), void *)
      76  NetworkStackWrapper::socket_bind(void *, SocketAddress const &)
      24  NetworkStackWrapper::socket_close(void *)
      76  NetworkStackWrapper::socket_connect(void *, SocketAddress const &)
      24  NetworkStackWrapper::socket_listen(void *, int)
      24  NetworkStackWrapper::socket_open(void * *, nsapi_protocol)
      24  NetworkStackWrapper::socket_recv(void *, void *, nsapi_size_t)
     112  NetworkStackWrapper::socket_recvfrom(void *, SocketAddress *, void *, nsapi_size_t)
      24  NetworkStackWrapper::socket_send(void *, void const *, nsapi_size_t)
      84  NetworkStackWrapper::socket_sendto(void *, SocketAddress const &, void const *, nsapi_size_t)
       2  NetworkStackWrapper::~NetworkStackWrapper()
      60  buffer
      12  mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
       2  mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
      10  mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
      32  mbed::callback<>(void (*)(void *), void *)
       2  nsapi_create_stack(NetworkStack *)
      18  nsapi_create_stack(nsapi_stack *)
      12  ops
     528  -- Other

 
    60 bytes in section .bss
   600 bytes in section .rodata
 1 222 bytes in section .text
 
 204 bytes of CODE  memory (+ 1 018 bytes shared)
  60 bytes of CONST memory (+   540 bytes shared)
   0 bytes of DATA  memory (+    60 bytes shared)

Errors: none
Warnings: none
