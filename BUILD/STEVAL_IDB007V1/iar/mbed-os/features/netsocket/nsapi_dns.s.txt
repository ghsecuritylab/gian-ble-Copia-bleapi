###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       16/Mar/2018  12:16:45
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\netsocket\nsapi_dns.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DDEVICE_SERIAL=1 -DTARGET_CORTEX_M -DDEVICE_SPI=1 -DTARGET_LIKE_MBED
#        -DMBED_BUILD_TIMESTAMP=1521198946.13 -DARM_MATH_CM0 -DTARGET_RELEASE
#        -D__CORTEX_M0 -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0
#        -DTOOLCHAIN_object -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -f
#        .\BUILD\STEVAL_IDB007V1\iar\.includes_fc2e77952737cb4522ab0dffe8cfd8aa.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN
#        -I./mbed-os/features/frameworks
#        -I./mbed-os/features/frameworks/greentea-client
#        -I./mbed-os/features/frameworks/greentea-client/greentea-client
#        -I./mbed-os/features/frameworks/greentea-client/source
#        -I./mbed-os/features/frameworks/unity
#        -I./mbed-os/features/frameworks/unity/source
#        -I./mbed-os/features/frameworks/unity/unity
#        -I./mbed-os/features/frameworks/utest
#        -I./mbed-os/features/frameworks/utest/source
#        -I./mbed-os/features/frameworks/utest/utest
#        -I./mbed-os/features/mbedtls -I./mbed-os/features/mbedtls/importer
#        -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/features/netsocket
#        -I./mbed-os/features/netsocket/cellular
#        -I./mbed-os/features/netsocket/cellular/generic_modem_driver
#        -I./mbed-os/features/netsocket/cellular/utils
#        -I./mbed-os/features/storage -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\iar\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\nsapi_dns.d -l
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\nsapi_dns.s.txt
#        -o .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\nsapi_dns.o
#        .\mbed-os\features\netsocket\nsapi_dns.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\nsapi_dns.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\nsapi_dns.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia\mbed-os\features\netsocket\nsapi_dns.cpp
      1          /* nsapi_dns.cpp
      2           * Original work Copyright (c) 2013 Henry Leinen (henry[dot]leinen [at] online [dot] de)
      3           * Modified work Copyright (c) 2015 ARM Limited
      4           *
      5           * Licensed under the Apache License, Version 2.0 (the "License");
      6           * you may not use this file except in compliance with the License.
      7           * You may obtain a copy of the License at
      8           *
      9           *     http://www.apache.org/licenses/LICENSE-2.0
     10           *
     11           * Unless required by applicable law or agreed to in writing, software
     12           * distributed under the License is distributed on an "AS IS" BASIS,
     13           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     14           * See the License for the specific language governing permissions and
     15           * limitations under the License.
     16           */
     17          #include "nsapi_dns.h"
     18          #include "netsocket/UDPSocket.h"
     19          #include <string.h>
     20          #include <stdlib.h>
     21          #include <stdio.h>
     22          
     23          #define CLASS_IN 1
     24          
     25          #define RR_A 1
     26          #define RR_AAAA 28
     27          
     28          // DNS options
     29          #define DNS_BUFFER_SIZE 512
     30          #define DNS_TIMEOUT 5000
     31          #define DNS_SERVERS_SIZE 5
     32          

   \                                 In section .data, align 4
     33          nsapi_addr_t dns_servers[DNS_SERVERS_SIZE] = {
   \                     dns_servers:
   \   00000000   0x01 0x08          DC8 1, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 209, 244, 0
   \              0x08 0x08    
   \              0x08 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x01    
   \              0xD1 0xF4    
   \              0x00         
   \   00000015   0x03 0x00          DC8 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 200, 69, 80, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x01    
   \              0x54 0xC8    
   \              0x45 0x50    
   \              0x00 0x00    
   \              0x00         
   \   0000002A   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 32, 1, 72, 96, 72, 96, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x02    
   \              0x20 0x01    
   \              0x48 0x60    
   \              0x48 0x60    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000003F   0x00 0x00          DC8 0, 0, 0, 136, 136, 2, 32, 1, 22, 8, 0, 16, 0, 37, 0, 0, 0, 0, 28, 4
   \              0x00 0x88    
   \              0x88 0x02    
   \              0x20 0x01    
   \              0x16 0x08    
   \              0x00 0x10    
   \              0x00 0x25    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x1C 0x04    
   \   00000053   0xB1 0x2F          DC8 177, 47, 0, 0, 0
   \              0x00 0x00    
   \              0x00         
     34              {NSAPI_IPv4, {8, 8, 8, 8}},                             // Google
     35              {NSAPI_IPv4, {209, 244, 0, 3}},                         // Level 3
     36              {NSAPI_IPv4, {84, 200, 69, 80}},                        // DNS.WATCH
     37              {NSAPI_IPv6, {0x20,0x01, 0x48,0x60, 0x48,0x60, 0,0,     // Google
     38                            0,0, 0,0, 0,0, 0x88,0x88}},
     39              {NSAPI_IPv6, {0x20,0x01, 0x16,0x08, 0,0x10, 0,0x25,     // DNS.WATCH
     40                            0,0, 0,0, 0x1c,0x04, 0xb1,0x2f}},
     41          };
     42          
     43          // DNS server configuration

   \                                 In section .text, align 2, keep-with-next
     44          extern "C" nsapi_error_t nsapi_dns_add_server(nsapi_addr_t addr)
     45          {
   \                     nsapi_dns_add_server: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB510             PUSH     {R4,LR}
     46              memmove(&dns_servers[1], &dns_servers[0],
     47                      (DNS_SERVERS_SIZE-1)*sizeof(nsapi_addr_t));
   \   00000004   0x....             LDR      R4,??DataTable2
   \   00000006   0x2244             MOVS     R2,#+68
   \   00000008   0x0021             MOVS     R1,R4
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x3011             ADDS     R0,R0,#+17
   \   0000000E   0x.... 0x....      BL       __aeabi_memmove
     48          
     49              dns_servers[0] = addr;
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xA902             ADD      R1,SP,#+8
   \   00000016   0x2211             MOVS     R2,#+17
   \   00000018   0x.... 0x....      BL       __aeabi_memcpy
     50              return NSAPI_ERROR_OK;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x9901             LDR      R1,[SP, #+4]
   \   00000020   0xBC10             POP      {R4}
   \   00000022   0xB005             ADD      SP,SP,#+20
   \   00000024   0x4708             BX       R1               ;; return
     51          }
     52          
     53          
     54          // DNS packet parsing
     55          static void dns_append_byte(uint8_t **p, uint8_t byte)
     56          {
     57              *(*p)++ = byte;
     58          }
     59          
     60          static void dns_append_word(uint8_t **p, uint16_t word)
     61          {
     62          
     63              dns_append_byte(p, 0xff & (word >> 8));
     64              dns_append_byte(p, 0xff & (word >> 0));
     65          }
     66          
     67          static void dns_append_name(uint8_t **p, const char *name, uint8_t len)
     68          {
     69              dns_append_byte(p, len);
     70              memcpy(*p, name, len);
     71              *p += len;
     72          }
     73          
     74          static uint8_t dns_scan_byte(const uint8_t **p)
     75          {
     76              return *(*p)++;
     77          }
     78          

   \                                 In section .text, align 2, keep-with-next
     79          static uint16_t dns_scan_word(const uint8_t **p)
     80          {
     81              uint16_t a = dns_scan_byte(p);
   \                     _Z13dns_scan_wordPPKh: (+1)
   \   00000000   0x6801             LDR      R1,[R0, #+0]
   \   00000002   0x1C4A             ADDS     R2,R1,#+1
   \   00000004   0x6002             STR      R2,[R0, #+0]
   \   00000006   0x7809             LDRB     R1,[R1, #+0]
     82              uint16_t b = dns_scan_byte(p);
   \   00000008   0x1C53             ADDS     R3,R2,#+1
   \   0000000A   0x6003             STR      R3,[R0, #+0]
     83              return (a << 8) | b;
   \   0000000C   0x0208             LSLS     R0,R1,#+8
   \   0000000E   0x7811             LDRB     R1,[R2, #+0]
   \   00000010   0x4308             ORRS     R0,R0,R1
   \   00000012   0x4770             BX       LR               ;; return
     84          }
     85          
     86          

   \                                 In section .text, align 2, keep-with-next
     87          static void dns_append_question(uint8_t **p, const char *host, nsapi_version_t version)
     88          {
   \                     _Z19dns_append_questionPPhPKc13nsapi_version: (+1)
   \   00000000   0xB5F4             PUSH     {R2,R4-R7,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     89              // fill the header
     90              dns_append_word(p, 1);      // id      = 1
   \   00000008   0x6820             LDR      R0,[R4, #+0]
   \   0000000A   0x1C41             ADDS     R1,R0,#+1
   \   0000000C   0x6021             STR      R1,[R4, #+0]
   \   0000000E   0x2600             MOVS     R6,#+0
   \   00000010   0x7006             STRB     R6,[R0, #+0]
   \   00000012   0x6820             LDR      R0,[R4, #+0]
   \   00000014   0x1C41             ADDS     R1,R0,#+1
   \   00000016   0x6021             STR      R1,[R4, #+0]
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x7001             STRB     R1,[R0, #+0]
     91              dns_append_word(p, 0x0100); // flags   = recursion required
   \   0000001C   0x6820             LDR      R0,[R4, #+0]
   \   0000001E   0x1C41             ADDS     R1,R0,#+1
   \   00000020   0x6021             STR      R1,[R4, #+0]
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x7001             STRB     R1,[R0, #+0]
   \   00000026   0x6820             LDR      R0,[R4, #+0]
   \   00000028   0x1C41             ADDS     R1,R0,#+1
   \   0000002A   0x6021             STR      R1,[R4, #+0]
   \   0000002C   0x7006             STRB     R6,[R0, #+0]
     92              dns_append_word(p, 1);      // qdcount = 1
   \   0000002E   0x6820             LDR      R0,[R4, #+0]
   \   00000030   0x1C41             ADDS     R1,R0,#+1
   \   00000032   0x6021             STR      R1,[R4, #+0]
   \   00000034   0x7006             STRB     R6,[R0, #+0]
   \   00000036   0x6820             LDR      R0,[R4, #+0]
   \   00000038   0x1C41             ADDS     R1,R0,#+1
   \   0000003A   0x6021             STR      R1,[R4, #+0]
   \   0000003C   0x2101             MOVS     R1,#+1
   \   0000003E   0x7001             STRB     R1,[R0, #+0]
     93              dns_append_word(p, 0);      // ancount = 0
   \   00000040   0x6820             LDR      R0,[R4, #+0]
   \   00000042   0x1C41             ADDS     R1,R0,#+1
   \   00000044   0x6021             STR      R1,[R4, #+0]
   \   00000046   0x7006             STRB     R6,[R0, #+0]
   \   00000048   0x6820             LDR      R0,[R4, #+0]
   \   0000004A   0x1C41             ADDS     R1,R0,#+1
   \   0000004C   0x6021             STR      R1,[R4, #+0]
   \   0000004E   0x7006             STRB     R6,[R0, #+0]
     94              dns_append_word(p, 0);      // nscount = 0
   \   00000050   0x6820             LDR      R0,[R4, #+0]
   \   00000052   0x1C41             ADDS     R1,R0,#+1
   \   00000054   0x6021             STR      R1,[R4, #+0]
   \   00000056   0x7006             STRB     R6,[R0, #+0]
   \   00000058   0x6820             LDR      R0,[R4, #+0]
   \   0000005A   0x1C41             ADDS     R1,R0,#+1
   \   0000005C   0x6021             STR      R1,[R4, #+0]
   \   0000005E   0x7006             STRB     R6,[R0, #+0]
     95              dns_append_word(p, 0);      // arcount = 0
   \   00000060   0x6820             LDR      R0,[R4, #+0]
   \   00000062   0x1C41             ADDS     R1,R0,#+1
   \   00000064   0x6021             STR      R1,[R4, #+0]
   \   00000066   0x7006             STRB     R6,[R0, #+0]
   \   00000068   0x6820             LDR      R0,[R4, #+0]
   \   0000006A   0x1C41             ADDS     R1,R0,#+1
   \   0000006C   0x6021             STR      R1,[R4, #+0]
   \   0000006E   0x7006             STRB     R6,[R0, #+0]
   \   00000070   0xE002             B        ??dns_append_question_0
     96          
     97              // fill out the question names
     98              while (host[0]) {
     99                  size_t label_len = strcspn(host, ".");
    100                  dns_append_name(p, host, label_len);
    101                  host += label_len + (host[label_len] == '.');
   \                     ??dns_append_question_1: (+1)
   \   00000072   0x2000             MOVS     R0,#+0
   \                     ??dns_append_question_2: (+1)
   \   00000074   0x1838             ADDS     R0,R7,R0
   \   00000076   0x182D             ADDS     R5,R5,R0
   \                     ??dns_append_question_0: (+1)
   \   00000078   0x7828             LDRB     R0,[R5, #+0]
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD01C             BEQ      ??dns_append_question_3
   \   0000007E   0x....             ADR      R1,??DataTable3  ;; "."
   \   00000080   0x0028             MOVS     R0,R5
   \   00000082   0x.... 0x....      BL       strcspn
   \   00000086   0x0007             MOVS     R7,R0
   \   00000088   0x4669             MOV      R1,SP
   \   0000008A   0x7008             STRB     R0,[R1, #+0]
   \   0000008C   0x6820             LDR      R0,[R4, #+0]
   \   0000008E   0x1C41             ADDS     R1,R0,#+1
   \   00000090   0x6021             STR      R1,[R4, #+0]
   \   00000092   0x4669             MOV      R1,SP
   \   00000094   0x7809             LDRB     R1,[R1, #+0]
   \   00000096   0x7001             STRB     R1,[R0, #+0]
   \   00000098   0x4668             MOV      R0,SP
   \   0000009A   0x7802             LDRB     R2,[R0, #+0]
   \   0000009C   0x0029             MOVS     R1,R5
   \   0000009E   0x6820             LDR      R0,[R4, #+0]
   \   000000A0   0x.... 0x....      BL       __aeabi_memcpy
   \   000000A4   0x6820             LDR      R0,[R4, #+0]
   \   000000A6   0x4669             MOV      R1,SP
   \   000000A8   0x7809             LDRB     R1,[R1, #+0]
   \   000000AA   0x1840             ADDS     R0,R0,R1
   \   000000AC   0x6020             STR      R0,[R4, #+0]
   \   000000AE   0x5DE8             LDRB     R0,[R5, R7]
   \   000000B0   0x282E             CMP      R0,#+46
   \   000000B2   0xD1DE             BNE      ??dns_append_question_1
   \   000000B4   0x2001             MOVS     R0,#+1
   \   000000B6   0xE7DD             B        ??dns_append_question_2
    102              }
    103          
    104              dns_append_byte(p, 0);
   \                     ??dns_append_question_3: (+1)
   \   000000B8   0x6820             LDR      R0,[R4, #+0]
   \   000000BA   0x1C41             ADDS     R1,R0,#+1
   \   000000BC   0x6021             STR      R1,[R4, #+0]
   \   000000BE   0x7006             STRB     R6,[R0, #+0]
    105          
    106              // fill out question footer
    107              if (version != NSAPI_IPv6) {
   \   000000C0   0x6820             LDR      R0,[R4, #+0]
   \   000000C2   0x4669             MOV      R1,SP
   \   000000C4   0x7A09             LDRB     R1,[R1, #+8]
   \   000000C6   0x2902             CMP      R1,#+2
   \   000000C8   0xD007             BEQ      ??dns_append_question_4
    108                  dns_append_word(p, RR_A);       // qtype  = ipv4
   \   000000CA   0x1C41             ADDS     R1,R0,#+1
   \   000000CC   0x6021             STR      R1,[R4, #+0]
   \   000000CE   0x7006             STRB     R6,[R0, #+0]
   \   000000D0   0x6820             LDR      R0,[R4, #+0]
   \   000000D2   0x1C41             ADDS     R1,R0,#+1
   \   000000D4   0x6021             STR      R1,[R4, #+0]
   \   000000D6   0x2101             MOVS     R1,#+1
   \   000000D8   0xE006             B        ??dns_append_question_5
    109              } else {
    110                  dns_append_word(p, RR_AAAA);    // qtype  = ipv6
   \                     ??dns_append_question_4: (+1)
   \   000000DA   0x1C41             ADDS     R1,R0,#+1
   \   000000DC   0x6021             STR      R1,[R4, #+0]
   \   000000DE   0x7006             STRB     R6,[R0, #+0]
   \   000000E0   0x6820             LDR      R0,[R4, #+0]
   \   000000E2   0x1C41             ADDS     R1,R0,#+1
   \   000000E4   0x6021             STR      R1,[R4, #+0]
   \   000000E6   0x211C             MOVS     R1,#+28
   \                     ??dns_append_question_5: (+1)
   \   000000E8   0x7001             STRB     R1,[R0, #+0]
    111              }
    112              dns_append_word(p, CLASS_IN);
   \   000000EA   0x6820             LDR      R0,[R4, #+0]
   \   000000EC   0x1C41             ADDS     R1,R0,#+1
   \   000000EE   0x6021             STR      R1,[R4, #+0]
   \   000000F0   0x7006             STRB     R6,[R0, #+0]
   \   000000F2   0x6820             LDR      R0,[R4, #+0]
   \   000000F4   0x1C41             ADDS     R1,R0,#+1
   \   000000F6   0x6021             STR      R1,[R4, #+0]
   \   000000F8   0x2101             MOVS     R1,#+1
   \   000000FA   0x7001             STRB     R1,[R0, #+0]
    113          }
   \   000000FC   0xB003             ADD      SP,SP,#+12
   \   000000FE   0xBDF0             POP      {R4-R7,PC}       ;; return
    114          

   \                                 In section .text, align 2, keep-with-next
    115          static int dns_scan_response(const uint8_t **p, nsapi_addr_t *addr, unsigned addr_count)
    116          {
   \                     _Z17dns_scan_responsePPKhP10nsapi_addrj: (+1)
   \   00000000   0xB5F4             PUSH     {R2,R4-R7,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000C             MOVS     R4,R1
    117              // scan header
    118              uint16_t id    = dns_scan_word(p);
   \   00000008   0x.... 0x....      BL       _Z13dns_scan_wordPPKh
   \   0000000C   0x4669             MOV      R1,SP
   \   0000000E   0x80C8             STRH     R0,[R1, #+6]
    119              uint16_t flags = dns_scan_word(p);
   \   00000010   0x0028             MOVS     R0,R5
   \   00000012   0x.... 0x....      BL       _Z13dns_scan_wordPPKh
   \   00000016   0x0006             MOVS     R6,R0
    120              bool    qr     = 0x1 & (flags >> 15);
    121              uint8_t opcode = 0xf & (flags >> 11);
   \   00000018   0x0AF0             LSRS     R0,R6,#+11
   \   0000001A   0x4669             MOV      R1,SP
   \   0000001C   0x7108             STRB     R0,[R1, #+4]
    122              uint8_t rcode  = 0xf & (flags >>  0);
    123          
    124              uint16_t qdcount = dns_scan_word(p); // qdcount
   \   0000001E   0x0028             MOVS     R0,R5
   \   00000020   0x.... 0x....      BL       _Z13dns_scan_wordPPKh
   \   00000024   0x9002             STR      R0,[SP, #+8]
    125              uint16_t ancount = dns_scan_word(p); // ancount
   \   00000026   0x0028             MOVS     R0,R5
   \   00000028   0x.... 0x....      BL       _Z13dns_scan_wordPPKh
   \   0000002C   0x9000             STR      R0,[SP, #+0]
    126              dns_scan_word(p);                    // nscount
   \   0000002E   0x0028             MOVS     R0,R5
   \   00000030   0x.... 0x....      BL       _Z13dns_scan_wordPPKh
    127              dns_scan_word(p);                    // arcount
   \   00000034   0x6828             LDR      R0,[R5, #+0]
   \   00000036   0x1C80             ADDS     R0,R0,#+2
   \   00000038   0x6028             STR      R0,[R5, #+0]
    128          
    129              // verify header is response to query
    130              if (!(id == 1 && qr && opcode == 0 && rcode == 0)) {
   \   0000003A   0x4668             MOV      R0,SP
   \   0000003C   0x88C0             LDRH     R0,[R0, #+6]
   \   0000003E   0x2801             CMP      R0,#+1
   \   00000040   0xD108             BNE      ??dns_scan_response_0
   \   00000042   0x0430             LSLS     R0,R6,#+16
   \   00000044   0xD506             BPL      ??dns_scan_response_0
   \   00000046   0x200F             MOVS     R0,#+15
   \   00000048   0x4669             MOV      R1,SP
   \   0000004A   0x7909             LDRB     R1,[R1, #+4]
   \   0000004C   0x4201             TST      R1,R0
   \   0000004E   0xD101             BNE      ??dns_scan_response_0
   \   00000050   0x4206             TST      R6,R0
   \   00000052   0xD001             BEQ      ??dns_scan_response_1
    131                  return 0;
   \                     ??dns_scan_response_0: (+1)
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0xE07C             B        ??dns_scan_response_2
    132              }
    133          
    134              // skip questions
    135              for (int i = 0; i < qdcount; i++) {
   \                     ??dns_scan_response_1: (+1)
   \   00000058   0x9802             LDR      R0,[SP, #+8]
   \   0000005A   0x2801             CMP      R0,#+1
   \   0000005C   0xDB0C             BLT      ??dns_scan_response_3
   \   0000005E   0xE001             B        ??dns_scan_response_4
    136                  while (true) {
    137                      uint8_t len = dns_scan_byte(p);
    138                      if (len == 0) {
    139                          break;
    140                      }
    141          
    142                      *p += len;
   \                     ??dns_scan_response_5: (+1)
   \   00000060   0x1851             ADDS     R1,R2,R1
   \   00000062   0x6029             STR      R1,[R5, #+0]
   \                     ??dns_scan_response_4: (+1)
   \   00000064   0x6829             LDR      R1,[R5, #+0]
   \   00000066   0x1C4A             ADDS     R2,R1,#+1
   \   00000068   0x602A             STR      R2,[R5, #+0]
   \   0000006A   0x7809             LDRB     R1,[R1, #+0]
   \   0000006C   0x2900             CMP      R1,#+0
   \   0000006E   0xD1F7             BNE      ??dns_scan_response_5
    143                  }
    144          
    145                  dns_scan_word(p); // qtype
    146                  dns_scan_word(p); // qclass
   \   00000070   0x1D11             ADDS     R1,R2,#+4
   \   00000072   0x6029             STR      R1,[R5, #+0]
    147              }
   \   00000074   0x1E40             SUBS     R0,R0,#+1
   \   00000076   0xD1F5             BNE      ??dns_scan_response_4
    148          
    149              // scan each response
    150              unsigned count = 0;
   \                     ??dns_scan_response_3: (+1)
   \   00000078   0x2000             MOVS     R0,#+0
    151          
    152              for (int i = 0; i < ancount && count < addr_count; i++) {
   \   0000007A   0x9900             LDR      R1,[SP, #+0]
   \   0000007C   0x2901             CMP      R1,#+1
   \   0000007E   0xDB68             BLT      ??dns_scan_response_2
   \                     ??dns_scan_response_6: (+1)
   \   00000080   0x9A04             LDR      R2,[SP, #+16]
   \   00000082   0x4290             CMP      R0,R2
   \   00000084   0xD265             BCS      ??dns_scan_response_2
   \   00000086   0x26C0             MOVS     R6,#+192
   \   00000088   0xE001             B        ??dns_scan_response_7
    153                  while (true) {
    154                      uint8_t len = dns_scan_byte(p);
    155                      if (len == 0) {
    156                          break;
    157                      } else if (len & 0xc0) { // this is link
    158                          dns_scan_byte(p);
    159                          break;
    160                      }
    161          
    162                      *p += len;
   \                     ??dns_scan_response_8: (+1)
   \   0000008A   0x189A             ADDS     R2,R3,R2
   \   0000008C   0x602A             STR      R2,[R5, #+0]
   \                     ??dns_scan_response_7: (+1)
   \   0000008E   0x682A             LDR      R2,[R5, #+0]
   \   00000090   0x1C53             ADDS     R3,R2,#+1
   \   00000092   0x602B             STR      R3,[R5, #+0]
   \   00000094   0x7812             LDRB     R2,[R2, #+0]
   \   00000096   0x2A00             CMP      R2,#+0
   \   00000098   0xD003             BEQ      ??dns_scan_response_9
   \   0000009A   0x4232             TST      R2,R6
   \   0000009C   0xD0F5             BEQ      ??dns_scan_response_8
   \   0000009E   0x1C5A             ADDS     R2,R3,#+1
   \   000000A0   0x602A             STR      R2,[R5, #+0]
    163                  }
    164          
    165                  uint16_t rtype    = dns_scan_word(p); // rtype
   \                     ??dns_scan_response_9: (+1)
   \   000000A2   0x682A             LDR      R2,[R5, #+0]
   \   000000A4   0x1C53             ADDS     R3,R2,#+1
   \   000000A6   0x602B             STR      R3,[R5, #+0]
   \   000000A8   0x7812             LDRB     R2,[R2, #+0]
   \   000000AA   0x1C5E             ADDS     R6,R3,#+1
   \   000000AC   0x602E             STR      R6,[R5, #+0]
   \   000000AE   0x0212             LSLS     R2,R2,#+8
   \   000000B0   0x781B             LDRB     R3,[R3, #+0]
   \   000000B2   0x431A             ORRS     R2,R2,R3
   \   000000B4   0x9200             STR      R2,[SP, #+0]
    166                  uint16_t rclass   = dns_scan_word(p); // rclass
   \   000000B6   0x682A             LDR      R2,[R5, #+0]
   \   000000B8   0x1C53             ADDS     R3,R2,#+1
   \   000000BA   0x602B             STR      R3,[R5, #+0]
   \   000000BC   0x7812             LDRB     R2,[R2, #+0]
   \   000000BE   0x1C5E             ADDS     R6,R3,#+1
   \   000000C0   0x602E             STR      R6,[R5, #+0]
   \   000000C2   0x0212             LSLS     R2,R2,#+8
   \   000000C4   0x781B             LDRB     R3,[R3, #+0]
   \   000000C6   0x431A             ORRS     R2,R2,R3
    167                  *p += 4;                              // ttl
    168                  uint16_t rdlength = dns_scan_word(p); // rdlength
   \   000000C8   0x1D33             ADDS     R3,R6,#+4
   \   000000CA   0x1C5E             ADDS     R6,R3,#+1
   \   000000CC   0x602E             STR      R6,[R5, #+0]
   \   000000CE   0x781E             LDRB     R6,[R3, #+0]
   \   000000D0   0x682B             LDR      R3,[R5, #+0]
   \   000000D2   0x1C5F             ADDS     R7,R3,#+1
   \   000000D4   0x602F             STR      R7,[R5, #+0]
   \   000000D6   0x0236             LSLS     R6,R6,#+8
   \   000000D8   0x781B             LDRB     R3,[R3, #+0]
   \   000000DA   0x431E             ORRS     R6,R6,R3
    169          
    170                  if (rtype == RR_A && rclass == CLASS_IN && rdlength == NSAPI_IPv4_BYTES) {
   \   000000DC   0x9B00             LDR      R3,[SP, #+0]
   \   000000DE   0x2B01             CMP      R3,#+1
   \   000000E0   0xD119             BNE      ??dns_scan_response_10
   \   000000E2   0x2A01             CMP      R2,#+1
   \   000000E4   0xD131             BNE      ??dns_scan_response_11
   \   000000E6   0x2E04             CMP      R6,#+4
   \   000000E8   0xD12F             BNE      ??dns_scan_response_11
    171                      // accept A record
    172                      addr->version = NSAPI_IPv4;
   \   000000EA   0x7022             STRB     R2,[R4, #+0]
    173                      for (int i = 0; i < NSAPI_IPv4_BYTES; i++) {
    174                          addr->bytes[i] = dns_scan_byte(p);
   \   000000EC   0x682A             LDR      R2,[R5, #+0]
   \   000000EE   0x1C53             ADDS     R3,R2,#+1
   \   000000F0   0x602B             STR      R3,[R5, #+0]
   \   000000F2   0x7812             LDRB     R2,[R2, #+0]
   \   000000F4   0x7062             STRB     R2,[R4, #+1]
   \   000000F6   0x682A             LDR      R2,[R5, #+0]
   \   000000F8   0x1C53             ADDS     R3,R2,#+1
   \   000000FA   0x602B             STR      R3,[R5, #+0]
   \   000000FC   0x7812             LDRB     R2,[R2, #+0]
   \   000000FE   0x70A2             STRB     R2,[R4, #+2]
   \   00000100   0x682A             LDR      R2,[R5, #+0]
   \   00000102   0x1C53             ADDS     R3,R2,#+1
   \   00000104   0x602B             STR      R3,[R5, #+0]
   \   00000106   0x7812             LDRB     R2,[R2, #+0]
   \   00000108   0x70E2             STRB     R2,[R4, #+3]
   \   0000010A   0x682A             LDR      R2,[R5, #+0]
   \   0000010C   0x1C53             ADDS     R3,R2,#+1
   \   0000010E   0x602B             STR      R3,[R5, #+0]
    175                      }
   \   00000110   0x7812             LDRB     R2,[R2, #+0]
   \   00000112   0x7122             STRB     R2,[R4, #+4]
   \   00000114   0xE016             B        ??dns_scan_response_12
    176          
    177                      addr += 1;
    178                      count += 1;
    179                  } else if (rtype == RR_AAAA && rclass == CLASS_IN && rdlength == NSAPI_IPv6_BYTES) {
   \                     ??dns_scan_response_10: (+1)
   \   00000116   0x2B1C             CMP      R3,#+28
   \   00000118   0xD117             BNE      ??dns_scan_response_11
   \   0000011A   0x2A01             CMP      R2,#+1
   \   0000011C   0xD115             BNE      ??dns_scan_response_11
   \   0000011E   0x2E10             CMP      R6,#+16
   \   00000120   0xD113             BNE      ??dns_scan_response_11
    180                      // accept AAAA record
    181                      addr->version = NSAPI_IPv6;
   \   00000122   0x2202             MOVS     R2,#+2
   \   00000124   0x7022             STRB     R2,[R4, #+0]
    182                      for (int i = 0; i < NSAPI_IPv6_BYTES; i++) {
   \   00000126   0x1C62             ADDS     R2,R4,#+1
   \   00000128   0x2308             MOVS     R3,#+8
    183                          addr->bytes[i] = dns_scan_byte(p);
   \                     ??dns_scan_response_13: (+1)
   \   0000012A   0x682E             LDR      R6,[R5, #+0]
   \   0000012C   0x1C77             ADDS     R7,R6,#+1
   \   0000012E   0x602F             STR      R7,[R5, #+0]
   \   00000130   0x7836             LDRB     R6,[R6, #+0]
   \   00000132   0x7016             STRB     R6,[R2, #+0]
   \   00000134   0x682E             LDR      R6,[R5, #+0]
   \   00000136   0x1C77             ADDS     R7,R6,#+1
   \   00000138   0x602F             STR      R7,[R5, #+0]
    184                      }
   \   0000013A   0x7836             LDRB     R6,[R6, #+0]
   \   0000013C   0x7056             STRB     R6,[R2, #+1]
   \   0000013E   0x1C92             ADDS     R2,R2,#+2
   \   00000140   0x1E5B             SUBS     R3,R3,#+1
   \   00000142   0xD1F2             BNE      ??dns_scan_response_13
    185          
    186                      addr += 1;
   \                     ??dns_scan_response_12: (+1)
   \   00000144   0x3411             ADDS     R4,R4,#+17
    187                      count += 1;
   \   00000146   0x1C40             ADDS     R0,R0,#+1
   \   00000148   0xE001             B        ??dns_scan_response_14
    188                  } else {
    189                      // skip unrecognized records
    190                      *p += rdlength;
   \                     ??dns_scan_response_11: (+1)
   \   0000014A   0x19BA             ADDS     R2,R7,R6
   \   0000014C   0x602A             STR      R2,[R5, #+0]
    191                  }
    192              }
   \                     ??dns_scan_response_14: (+1)
   \   0000014E   0x1E49             SUBS     R1,R1,#+1
   \   00000150   0xD196             BNE      ??dns_scan_response_6
    193          
    194              return count;
   \                     ??dns_scan_response_2: (+1)
   \   00000152   0xB005             ADD      SP,SP,#+20
   \   00000154   0xBDF0             POP      {R4-R7,PC}       ;; return
    195          }
    196          
    197          // core query function

   \                                 In section .text, align 2, keep-with-next
    198          static nsapi_size_or_error_t nsapi_dns_query_multiple(NetworkStack *stack, const char *host,
    199                  nsapi_addr_t *addr, unsigned addr_count, nsapi_version_t version)
    200          {
   \                     _Z24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0xB0B0             SUB      SP,SP,#+192
   \   00000004   0x0004             MOVS     R4,R0
    201              // check for valid host name
    202              int host_len = host ? strlen(host) : 0;
   \   00000006   0x4608             MOV      R0,R1
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD005             BEQ      ??nsapi_dns_query_multiple_0
   \   0000000C   0x.... 0x....      BL       strlen
    203              if (host_len > 128 || host_len == 0) {
   \   00000010   0x2881             CMP      R0,#+129
   \   00000012   0xDA01             BGE      ??nsapi_dns_query_multiple_0
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD101             BNE      ??nsapi_dns_query_multiple_1
    204                  return NSAPI_ERROR_PARAMETER;
   \                     ??nsapi_dns_query_multiple_0: (+1)
   \   00000018   0x....             LDR      R0,??DataTable3_1  ;; 0xfffff445
   \   0000001A   0xE064             B        ??nsapi_dns_query_multiple_2
    205              }
    206          
    207              // create a udp socket
    208              UDPSocket socket;
   \                     ??nsapi_dns_query_multiple_1: (+1)
   \   0000001C   0xA814             ADD      R0,SP,#+80
   \   0000001E   0x.... 0x....      BL       _ZN9UDPSocketC1Ev
    209              int err = socket.open(stack);
   \   00000022   0x0021             MOVS     R1,R4
   \   00000024   0x.... 0x....      BL       _ZN6Socket4openEP12NetworkStack
   \   00000028   0x0006             MOVS     R6,R0
    210              if (err) {
   \   0000002A   0xD153             BNE      ??nsapi_dns_query_multiple_3
    211                  return err;
    212              }
    213          
    214              socket.set_timeout(DNS_TIMEOUT);
   \   0000002C   0x....             LDR      R1,??DataTable3_2  ;; 0x1388
   \   0000002E   0xA814             ADD      R0,SP,#+80
   \   00000030   0x.... 0x....      BL       _ZN6Socket11set_timeoutEi
   \   00000034   0x2080             MOVS     R0,#+128
   \   00000036   0x0080             LSLS     R0,R0,#+2        ;; #+512
    215          
    216              // create network packet
    217              uint8_t *packet = (uint8_t *)malloc(DNS_BUFFER_SIZE);
   \   00000038   0x.... 0x....      BL       malloc
   \   0000003C   0x0007             MOVS     R7,R0
    218              if (!packet) {
   \   0000003E   0xD104             BNE      ??nsapi_dns_query_multiple_4
    219                  return NSAPI_ERROR_NO_MEMORY;
   \   00000040   0xA814             ADD      R0,SP,#+80
   \   00000042   0x.... 0x....      BL       _ZN9UDPSocketD1Ev
   \   00000046   0x....             LDR      R0,??DataTable3_3  ;; 0xfffff441
   \   00000048   0xE04D             B        ??nsapi_dns_query_multiple_2
    220              }
    221          
    222              nsapi_size_or_error_t result = NSAPI_ERROR_DNS_FAILURE;
   \                     ??nsapi_dns_query_multiple_4: (+1)
   \   0000004A   0x....             LDR      R0,??DataTable3_4  ;; 0xfffff43f
   \   0000004C   0x9003             STR      R0,[SP, #+12]
    223          
    224              // check against each dns server
    225              for (unsigned i = 0; i < DNS_SERVERS_SIZE; i++) {
   \   0000004E   0x....             LDR      R4,??DataTable3_5
   \   00000050   0x2505             MOVS     R5,#+5
    226                  // send the question
    227                  uint8_t *question = packet;
   \                     ??nsapi_dns_query_multiple_5: (+1)
   \   00000052   0x9704             STR      R7,[SP, #+16]
    228                  dns_append_question(&question, host, version);
   \   00000054   0xA838             ADD      R0,SP,#+224
   \   00000056   0x7802             LDRB     R2,[R0, #+0]
   \   00000058   0x9930             LDR      R1,[SP, #+192]
   \   0000005A   0xA804             ADD      R0,SP,#+16
   \   0000005C   0x.... 0x....      BL       _Z19dns_append_questionPPhPKc13nsapi_version
    229          
    230                  err = socket.sendto(SocketAddress(dns_servers[i], 53), packet, question - packet);
    231                  // send may fail for various reasons, including wrong address type - move on
    232                  if (err < 0) {
   \   00000060   0x2035             MOVS     R0,#+53
   \   00000062   0x9002             STR      R0,[SP, #+8]
   \   00000064   0x0021             MOVS     R1,R4
   \   00000066   0xB083             SUB      SP,SP,#+12
   \   00000068   0x4668             MOV      R0,SP
   \   0000006A   0x2211             MOVS     R2,#+17
   \   0000006C   0x.... 0x....      BL       __aeabi_memcpy
   \   00000070   0xBC0E             POP      {R1-R3}
   \   00000072   0xA805             ADD      R0,SP,#+20
   \   00000074   0x.... 0x....      BL       _ZN13SocketAddressC1E10nsapi_addrt
   \   00000078   0x9904             LDR      R1,[SP, #+16]
   \   0000007A   0x1BCB             SUBS     R3,R1,R7
   \   0000007C   0x003A             MOVS     R2,R7
   \   0000007E   0x0001             MOVS     R1,R0
   \   00000080   0xA814             ADD      R0,SP,#+80
   \   00000082   0x.... 0x....      BL       _ZN9UDPSocket6sendtoERK13SocketAddressPKvj
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD419             BMI      ??nsapi_dns_query_multiple_6
    233                      continue;
    234                  }
    235          
    236                  // recv the response
    237                  err = socket.recvfrom(NULL, packet, DNS_BUFFER_SIZE);
   \   0000008A   0x2380             MOVS     R3,#+128
   \   0000008C   0x009B             LSLS     R3,R3,#+2        ;; #+512
   \   0000008E   0x003A             MOVS     R2,R7
   \   00000090   0x2100             MOVS     R1,#+0
   \   00000092   0xA814             ADD      R0,SP,#+80
   \   00000094   0x.... 0x....      BL       _ZN9UDPSocket8recvfromEP13SocketAddressPvj
   \   00000098   0x0006             MOVS     R6,R0
    238                  if (err == NSAPI_ERROR_WOULD_BLOCK) {
   \   0000009A   0x....             LDR      R0,??DataTable3_6  ;; 0xfffff447
   \   0000009C   0x4286             CMP      R6,R0
   \   0000009E   0xD00E             BEQ      ??nsapi_dns_query_multiple_6
    239                      continue;
    240                  } else if (err < 0) {
   \   000000A0   0x2E00             CMP      R6,#+0
   \   000000A2   0xD501             BPL      ??nsapi_dns_query_multiple_7
    241                      result = err;
   \   000000A4   0x9603             STR      R6,[SP, #+12]
    242                      break;
   \   000000A6   0xE00D             B        ??nsapi_dns_query_multiple_8
    243                  }
    244          
    245                  const uint8_t *response = packet;
   \                     ??nsapi_dns_query_multiple_7: (+1)
   \   000000A8   0x9700             STR      R7,[SP, #+0]
    246                  if (dns_scan_response(&response, addr, addr_count) > 0) {
   \   000000AA   0x9A32             LDR      R2,[SP, #+200]
   \   000000AC   0x9931             LDR      R1,[SP, #+196]
   \   000000AE   0x4668             MOV      R0,SP
   \   000000B0   0x.... 0x....      BL       _Z17dns_scan_responsePPKhP10nsapi_addrj
   \   000000B4   0x2801             CMP      R0,#+1
   \   000000B6   0xDB05             BLT      ??nsapi_dns_query_multiple_8
    247                      result = NSAPI_ERROR_OK;
   \   000000B8   0x2000             MOVS     R0,#+0
   \   000000BA   0x9003             STR      R0,[SP, #+12]
   \   000000BC   0xE002             B        ??nsapi_dns_query_multiple_8
    248                  }
    249          
    250                  /* The DNS response is final, no need to check other servers */
    251                  break;
    252              }
   \                     ??nsapi_dns_query_multiple_6: (+1)
   \   000000BE   0x3411             ADDS     R4,R4,#+17
   \   000000C0   0x1E6D             SUBS     R5,R5,#+1
   \   000000C2   0xD1C6             BNE      ??nsapi_dns_query_multiple_5
    253          
    254              // clean up packet
    255              free(packet);
   \                     ??nsapi_dns_query_multiple_8: (+1)
   \   000000C4   0x0038             MOVS     R0,R7
   \   000000C6   0x.... 0x....      BL       free
    256          
    257              // clean up udp
    258              err = socket.close();
   \   000000CA   0xA814             ADD      R0,SP,#+80
   \   000000CC   0x.... 0x....      BL       _ZN6Socket5closeEv
   \   000000D0   0x0006             MOVS     R6,R0
    259              if (err) {
   \   000000D2   0xD004             BEQ      ??nsapi_dns_query_multiple_9
    260                  return err;
   \                     ??nsapi_dns_query_multiple_3: (+1)
   \   000000D4   0xA814             ADD      R0,SP,#+80
   \   000000D6   0x.... 0x....      BL       _ZN9UDPSocketD1Ev
   \   000000DA   0x0030             MOVS     R0,R6
   \   000000DC   0xE003             B        ??nsapi_dns_query_multiple_2
    261              }
    262          
    263              // return result
    264              return result;
   \                     ??nsapi_dns_query_multiple_9: (+1)
   \   000000DE   0xA814             ADD      R0,SP,#+80
   \   000000E0   0x.... 0x....      BL       _ZN9UDPSocketD1Ev
   \   000000E4   0x9803             LDR      R0,[SP, #+12]
   \                     ??nsapi_dns_query_multiple_2: (+1)
   \   000000E6   0xB033             ADD      SP,SP,#+204
   \   000000E8   0xBDF0             POP      {R4-R7,PC}       ;; return
    265          }
    266          
    267          // convenience functions for other forms of queries

   \                                 In section .text, align 2, keep-with-next
    268          extern "C" nsapi_size_or_error_t nsapi_dns_query_multiple(nsapi_stack_t *stack, const char *host,
    269                  nsapi_addr_t *addr, nsapi_size_t addr_count, nsapi_version_t version)
    270          {
   \                     nsapi_dns_query_multiple: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0015             MOVS     R5,R2
   \   00000008   0x001E             MOVS     R6,R3
    271              NetworkStack *nstack = nsapi_create_stack(stack);
   \   0000000A   0x.... 0x....      BL       _Z18nsapi_create_stackP11nsapi_stack
    272              return nsapi_dns_query_multiple(nstack, host, addr, addr_count, version);
   \   0000000E   0x9906             LDR      R1,[SP, #+24]
   \   00000010   0x9100             STR      R1,[SP, #+0]
   \   00000012   0x0033             MOVS     R3,R6
   \   00000014   0x002A             MOVS     R2,R5
   \   00000016   0x0021             MOVS     R1,R4
   \   00000018   0x.... 0x....      BL       _Z24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version
   \   0000001C   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    273          }
    274          

   \                                 In section .text, align 2, keep-with-next
    275          nsapi_size_or_error_t nsapi_dns_query_multiple(NetworkStack *stack, const char *host,
    276                  SocketAddress *addresses, nsapi_size_t addr_count, nsapi_version_t version)
    277          {
   \                     _Z24nsapi_dns_query_multipleP12NetworkStackPKcP13SocketAddressj13nsapi_version: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000F             MOVS     R7,R1
   \   00000008   0x0015             MOVS     R5,R2
   \   0000000A   0x001E             MOVS     R6,R3
    278              nsapi_addr_t *addrs = new nsapi_addr_t[addr_count];
   \   0000000C   0x0130             LSLS     R0,R6,#+4
   \   0000000E   0x1980             ADDS     R0,R0,R6
   \   00000010   0x.... 0x....      BL       _Znaj
   \   00000014   0x9002             STR      R0,[SP, #+8]
    279              nsapi_size_or_error_t result = nsapi_dns_query_multiple(stack, host, addrs, addr_count, version);
   \   00000016   0x9808             LDR      R0,[SP, #+32]
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0x0033             MOVS     R3,R6
   \   0000001C   0x9A02             LDR      R2,[SP, #+8]
   \   0000001E   0x0039             MOVS     R1,R7
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       _Z24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version
   \   00000026   0x0007             MOVS     R7,R0
    280          
    281              if (result > 0) {
   \   00000028   0x2F01             CMP      R7,#+1
   \   0000002A   0xDB0F             BLT      ??nsapi_dns_query_multiple_10
    282                  for (int i = 0; i < result; i++) {
   \   0000002C   0x9C02             LDR      R4,[SP, #+8]
   \   0000002E   0x003E             MOVS     R6,R7
    283                      addresses[i].set_addr(addrs[i]);
   \                     ??nsapi_dns_query_multiple_11: (+1)
   \   00000030   0x0021             MOVS     R1,R4
   \   00000032   0xB083             SUB      SP,SP,#+12
   \   00000034   0x4668             MOV      R0,SP
   \   00000036   0x2211             MOVS     R2,#+17
   \   00000038   0x.... 0x....      BL       __aeabi_memcpy
   \   0000003C   0xBC0E             POP      {R1-R3}
   \   0000003E   0x0028             MOVS     R0,R5
   \   00000040   0x.... 0x....      BL       _ZN13SocketAddress8set_addrE10nsapi_addr
    284                  }
   \   00000044   0x353C             ADDS     R5,R5,#+60
   \   00000046   0x3411             ADDS     R4,R4,#+17
   \   00000048   0x1E76             SUBS     R6,R6,#+1
   \   0000004A   0xD1F1             BNE      ??nsapi_dns_query_multiple_11
    285              }
    286          
    287              delete[] addrs;
   \                     ??nsapi_dns_query_multiple_10: (+1)
   \   0000004C   0x9802             LDR      R0,[SP, #+8]
   \   0000004E   0x.... 0x....      BL       _ZdaPv
    288              return result;
   \   00000052   0x0038             MOVS     R0,R7
   \   00000054   0xB003             ADD      SP,SP,#+12
   \   00000056   0xBDF0             POP      {R4-R7,PC}       ;; return
    289          }
    290          

   \                                 In section .text, align 2, keep-with-next
    291          extern "C" nsapi_error_t nsapi_dns_query(nsapi_stack_t *stack, const char *host,
    292                  nsapi_addr_t *addr, nsapi_version_t version)
    293          {
   \                     nsapi_dns_query: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0015             MOVS     R5,R2
   \   00000008   0x001E             MOVS     R6,R3
    294              NetworkStack *nstack = nsapi_create_stack(stack);
   \   0000000A   0x.... 0x....      BL       _Z18nsapi_create_stackP11nsapi_stack
    295              nsapi_size_or_error_t result = nsapi_dns_query_multiple(nstack, host, addr, 1, version);
   \   0000000E   0x9600             STR      R6,[SP, #+0]
   \   00000010   0x2301             MOVS     R3,#+1
   \   00000012   0x002A             MOVS     R2,R5
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0x.... 0x....      BL       _Z24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version
    296              return (nsapi_error_t)((result > 0) ? 0 : result);
   \   0000001A   0x2801             CMP      R0,#+1
   \   0000001C   0xDB00             BLT      ??nsapi_dns_query_0
   \   0000001E   0x2000             MOVS     R0,#+0
   \                     ??nsapi_dns_query_0: (+1)
   \   00000020   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    297          }
    298          

   \                                 In section .text, align 2, keep-with-next
    299          nsapi_error_t nsapi_dns_query(NetworkStack *stack, const char *host,
    300                  SocketAddress *address, nsapi_version_t version)
    301          {
   \                     _Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0015             MOVS     R5,R2
    302              nsapi_addr_t addr;
    303              nsapi_size_or_error_t result = nsapi_dns_query_multiple(stack, host, &addr, 1, version);
   \   00000006   0x9300             STR      R3,[SP, #+0]
   \   00000008   0x2301             MOVS     R3,#+1
   \   0000000A   0xAA02             ADD      R2,SP,#+8
   \   0000000C   0x.... 0x....      BL       _Z24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version
   \   00000010   0x0004             MOVS     R4,R0
    304              address->set_addr(addr);
   \   00000012   0xA902             ADD      R1,SP,#+8
   \   00000014   0xB083             SUB      SP,SP,#+12
   \   00000016   0x4668             MOV      R0,SP
   \   00000018   0x2214             MOVS     R2,#+20
   \   0000001A   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000001E   0xBC0E             POP      {R1-R3}
   \   00000020   0x0028             MOVS     R0,R5
   \   00000022   0x.... 0x....      BL       _ZN13SocketAddress8set_addrE10nsapi_addr
    305              return (nsapi_error_t)((result > 0) ? 0 : result);
   \   00000026   0x2C01             CMP      R4,#+1
   \   00000028   0xDB01             BLT      ??nsapi_dns_query_1
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xE000             B        ??nsapi_dns_query_2
   \                     ??nsapi_dns_query_1: (+1)
   \   0000002E   0x0020             MOVS     R0,R4
   \                     ??nsapi_dns_query_2: (+1)
   \   00000030   0xB007             ADD      SP,SP,#+28
   \   00000032   0xBD30             POP      {R4,R5,PC}       ;; return
    306          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     dns_servers

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x2E 0x00          DC8      ".",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0xFFFFF445         DC32     0xfffff445

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x00001388         DC32     0x1388

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0xFFFFF441         DC32     0xfffff441

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0xFFFFF43F         DC32     0xfffff43f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     dns_servers

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0xFFFFF447         DC32     0xfffff447

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_0:
   \   00000000   0x2E 0x00          DC8 "."

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   dns_append_question(std::uint8_t **, char const *, nsapi_version)
        32   -> __aeabi_memcpy
        32   -> std::strcspn
      40   dns_scan_response(std::uint8_t const **, nsapi_addr *, unsigned int)
        40   -> dns_scan_word(std::uint8_t const **)
       0   dns_scan_word(std::uint8_t const **)
      24   nsapi_dns_add_server
        24   -> __aeabi_memcpy
        24   -> __aeabi_memmove
      24   nsapi_dns_query
        24   -> nsapi_create_stack(nsapi_stack *)
        24   -> nsapi_dns_query_multiple(NetworkStack *, char const *, nsapi_addr *, unsigned int, nsapi_version)
      52   nsapi_dns_query(NetworkStack *, char const *, SocketAddress *, nsapi_version)
        40   -> SocketAddress::set_addr(nsapi_addr)
        52   -> __aeabi_memcpy4
        40   -> nsapi_dns_query_multiple(NetworkStack *, char const *, nsapi_addr *, unsigned int, nsapi_version)
      24   nsapi_dns_query_multiple
        24   -> nsapi_create_stack(nsapi_stack *)
        24   -> nsapi_dns_query_multiple(NetworkStack *, char const *, nsapi_addr *, unsigned int, nsapi_version)
      44   nsapi_dns_query_multiple(NetworkStack *, char const *, SocketAddress *, nsapi_size_t, nsapi_version)
        32   -> SocketAddress::set_addr(nsapi_addr)
        44   -> __aeabi_memcpy
        32   -> nsapi_dns_query_multiple(NetworkStack *, char const *, nsapi_addr *, unsigned int, nsapi_version)
        32   -> operator delete[](void *)
        32   -> operator new[](std::size_t)
     236   nsapi_dns_query_multiple(NetworkStack *, char const *, nsapi_addr *, unsigned int, nsapi_version)
       224   -> Socket::close()
       224   -> Socket::open(NetworkStack *)
       224   -> Socket::set_timeout(int)
       224   -> SocketAddress::SocketAddress(nsapi_addr, std::uint16_t)
       224   -> UDPSocket::UDPSocket()
       224   -> UDPSocket::recvfrom(SocketAddress *, void *, nsapi_size_t)
       224   -> UDPSocket::sendto(SocketAddress const &, void const *, nsapi_size_t)
       224   -> UDPSocket::~UDPSocket()
       236   -> __aeabi_memcpy
       224   -> dns_append_question(std::uint8_t **, char const *, nsapi_version)
       224   -> dns_scan_response(std::uint8_t const **, nsapi_addr *, unsigned int)
       224   -> std::free
       224   -> std::malloc
       224   -> std::strlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       2  ?_0
     256  dns_append_question(std::uint8_t **, char const *, nsapi_version)
     342  dns_scan_response(std::uint8_t const **, nsapi_addr *, unsigned int)
      20  dns_scan_word(std::uint8_t const **)
      88  dns_servers
      38  nsapi_dns_add_server
      34  nsapi_dns_query
      52  nsapi_dns_query(NetworkStack *, char const *, SocketAddress *, nsapi_version)
      30  nsapi_dns_query_multiple
      88  nsapi_dns_query_multiple(NetworkStack *, char const *, SocketAddress *, nsapi_size_t, nsapi_version)
     234  nsapi_dns_query_multiple(NetworkStack *, char const *, nsapi_addr *, unsigned int, nsapi_version)

 
    88 bytes in section .data
     2 bytes in section .rodata
 1 126 bytes in section .text
 
 1 126 bytes of CODE  memory
     2 bytes of CONST memory
    88 bytes of DATA  memory

Errors: none
Warnings: none
