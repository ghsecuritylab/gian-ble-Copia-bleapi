###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       16/Mar/2018  12:16:42
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\netsocket\TCPSocket.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DDEVICE_SERIAL=1 -DTARGET_CORTEX_M -DDEVICE_SPI=1 -DTARGET_LIKE_MBED
#        -DMBED_BUILD_TIMESTAMP=1521198946.13 -DARM_MATH_CM0 -DTARGET_RELEASE
#        -D__CORTEX_M0 -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0
#        -DTOOLCHAIN_object -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -f
#        .\BUILD\STEVAL_IDB007V1\iar\.includes_fc2e77952737cb4522ab0dffe8cfd8aa.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN
#        -I./mbed-os/features/frameworks
#        -I./mbed-os/features/frameworks/greentea-client
#        -I./mbed-os/features/frameworks/greentea-client/greentea-client
#        -I./mbed-os/features/frameworks/greentea-client/source
#        -I./mbed-os/features/frameworks/unity
#        -I./mbed-os/features/frameworks/unity/source
#        -I./mbed-os/features/frameworks/unity/unity
#        -I./mbed-os/features/frameworks/utest
#        -I./mbed-os/features/frameworks/utest/source
#        -I./mbed-os/features/frameworks/utest/utest
#        -I./mbed-os/features/mbedtls -I./mbed-os/features/mbedtls/importer
#        -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/features/netsocket
#        -I./mbed-os/features/netsocket/cellular
#        -I./mbed-os/features/netsocket/cellular/generic_modem_driver
#        -I./mbed-os/features/netsocket/cellular/utils
#        -I./mbed-os/features/storage -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\iar\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\TCPSocket.d -l
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\TCPSocket.s.txt
#        -o .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\TCPSocket.o
#        .\mbed-os\features\netsocket\TCPSocket.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\TCPSocket.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\TCPSocket.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia\mbed-os\features\netsocket\TCPSocket.cpp
      1          /* Socket
      2           * Copyright (c) 2015 ARM Limited
      3           *
      4           * Licensed under the Apache License, Version 2.0 (the "License");
      5           * you may not use this file except in compliance with the License.
      6           * You may obtain a copy of the License at
      7           *
      8           *     http://www.apache.org/licenses/LICENSE-2.0
      9           *
     10           * Unless required by applicable law or agreed to in writing, software
     11           * distributed under the License is distributed on an "AS IS" BASIS,
     12           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     13           * See the License for the specific language governing permissions and
     14           * limitations under the License.
     15           */
     16          
     17          #include "TCPSocket.h"

   \                                 In section .text, align 4
   \   __code __interwork __softfp Socket::~Socket()
   \                     _ZN6SocketD1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x480A             LDR      R0,`?~Socket_0`
   \   00000006   0x6020             STR      R0,[R4, #+0]
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x3030             ADDS     R0,R0,#+48
   \   0000000C   0x.... 0x....      BL       _ZN4rtos5MutexD1Ev
   \   00000010   0x6AE1             LDR      R1,[R4, #+44]
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xD003             BEQ      `?~Socket_1`
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x3020             ADDS     R0,R0,#+32
   \   0000001A   0x6889             LDR      R1,[R1, #+8]
   \   0000001C   0x4788             BLX      R1
   \                     `?~Socket_1`: (+1)
   \   0000001E   0x69E1             LDR      R1,[R4, #+28]
   \   00000020   0x2900             CMP      R1,#+0
   \   00000022   0xD003             BEQ      `?~Socket_2`
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x3010             ADDS     R0,R0,#+16
   \   00000028   0x6889             LDR      R1,[R1, #+8]
   \   0000002A   0x4788             BLX      R1
   \                     `?~Socket_2`: (+1)
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
   \                     `?~Socket_0`:
   \   00000030   0x........         DC32     _ZTV6Socket+0x8

   \                                 In section .text, align 4
   \   __code __interwork __softfp Socket::deleter ~Socket()
   \                     _ZN6SocketD0Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x480B             LDR      R0,`??deleter ~Socket_0`
   \   00000006   0x6020             STR      R0,[R4, #+0]
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x3030             ADDS     R0,R0,#+48
   \   0000000C   0x.... 0x....      BL       _ZN4rtos5MutexD1Ev
   \   00000010   0x6AE1             LDR      R1,[R4, #+44]
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xD003             BEQ      `??deleter ~Socket_1`
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x3020             ADDS     R0,R0,#+32
   \   0000001A   0x6889             LDR      R1,[R1, #+8]
   \   0000001C   0x4788             BLX      R1
   \                     `??deleter ~Socket_1`: (+1)
   \   0000001E   0x69E1             LDR      R1,[R4, #+28]
   \   00000020   0x2900             CMP      R1,#+0
   \   00000022   0xD003             BEQ      `??deleter ~Socket_2`
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x3010             ADDS     R0,R0,#+16
   \   00000028   0x6889             LDR      R1,[R1, #+8]
   \   0000002A   0x4788             BLX      R1
   \                     `??deleter ~Socket_2`: (+1)
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x.... 0x....      BL       _ZdlPv
   \   00000032   0xBD10             POP      {R4,PC}          ;; return
   \                     `??deleter ~Socket_0`:
   \   00000034   0x........         DC32     _ZTV6Socket+0x8
     18          #include "Timer.h"
     19          #include "mbed_assert.h"
     20          
     21          #define READ_FLAG           0x1u
     22          #define WRITE_FLAG          0x2u
     23          

   \                                 In section .text, align 2, keep-with-next
     24          TCPSocket::TCPSocket()
   \                     _ZN9TCPSocketC1Ev: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002                      REQUIRE ?Subroutine0
   \   00000002                      ;; // Fall through to label ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x0004             MOVS     R4,R0
     25              : _pending(0), _event_flag(),
     26                _read_in_progress(false), _write_in_progress(false)
     27          {
   \   00000002   0x.... 0x....      BL       _ZN6SocketC2Ev
   \   00000006   0x....             LDR      R0,??DataTable8
   \   00000008   0x6020             STR      R0,[R4, #+0]
   \   0000000A   0x2500             MOVS     R5,#+0
   \   0000000C   0x6565             STR      R5,[R4, #+84]
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x3058             ADDS     R0,R0,#+88
   \   00000012   0x.... 0x....      BL       _ZN4rtos10EventFlagsC1Ev
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x306C             ADDS     R0,R0,#+108
   \   0000001A   0x7005             STRB     R5,[R0, #+0]
   \   0000001C   0x7045             STRB     R5,[R0, #+1]
     28          }
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     29          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp TCPSocket::deleter ~TCPSocket()
   \                     _ZN9TCPSocketD0Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x....             LDR      R0,??DataTable8
   \   00000006   0x6020             STR      R0,[R4, #+0]
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       _ZN6Socket5closeEv
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x3058             ADDS     R0,R0,#+88
   \   00000012   0x.... 0x....      BL       _ZN4rtos10EventFlagsD1Ev
   \   00000016   0x....             LDR      R0,??DataTable8_1
   \   00000018   0x6020             STR      R0,[R4, #+0]
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x3030             ADDS     R0,R0,#+48
   \   0000001E   0x.... 0x....      BL       _ZN4rtos5MutexD1Ev
   \   00000022   0x6AE1             LDR      R1,[R4, #+44]
   \   00000024   0x2900             CMP      R1,#+0
   \   00000026   0xD003             BEQ      `??deleter ~TCPSocket_0`
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x3020             ADDS     R0,R0,#+32
   \   0000002C   0x6889             LDR      R1,[R1, #+8]
   \   0000002E   0x4788             BLX      R1
   \                     `??deleter ~TCPSocket_0`: (+1)
   \   00000030   0x69E1             LDR      R1,[R4, #+28]
   \   00000032   0x2900             CMP      R1,#+0
   \   00000034   0xD003             BEQ      `??deleter ~TCPSocket_1`
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0x3010             ADDS     R0,R0,#+16
   \   0000003A   0x6889             LDR      R1,[R1, #+8]
   \   0000003C   0x4788             BLX      R1
   \                     `??deleter ~TCPSocket_1`: (+1)
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x.... 0x....      BL       _ZdlPv
   \   00000044   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     30          TCPSocket::~TCPSocket()
   \                     _ZN9TCPSocketD1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002                      REQUIRE ?Subroutine1
   \   00000002                      ;; // Fall through to label ?Subroutine1

   \                                 In section .text, align 2, keep-with-next
     31          {
   \                     ?Subroutine1: (+1)
   \   00000000   0x0004             MOVS     R4,R0
   \   00000002   0x....             LDR      R0,??DataTable8
   \   00000004   0x6020             STR      R0,[R4, #+0]
     32              close();
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       _ZN6Socket5closeEv
     33          }
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x3058             ADDS     R0,R0,#+88
   \   00000010   0x.... 0x....      BL       _ZN4rtos10EventFlagsD1Ev
   \   00000014   0x....             LDR      R0,??DataTable8_1
   \   00000016   0x6020             STR      R0,[R4, #+0]
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x3030             ADDS     R0,R0,#+48
   \   0000001C   0x.... 0x....      BL       _ZN4rtos5MutexD1Ev
   \   00000020   0x6AE1             LDR      R1,[R4, #+44]
   \   00000022   0x2900             CMP      R1,#+0
   \   00000024   0xD003             BEQ      ??Subroutine1_0
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x3020             ADDS     R0,R0,#+32
   \   0000002A   0x6889             LDR      R1,[R1, #+8]
   \   0000002C   0x4788             BLX      R1
   \                     ??Subroutine1_0: (+1)
   \   0000002E   0x69E1             LDR      R1,[R4, #+28]
   \   00000030   0x2900             CMP      R1,#+0
   \   00000032   0xD003             BEQ      ??Subroutine1_1
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x3010             ADDS     R0,R0,#+16
   \   00000038   0x6889             LDR      R1,[R1, #+8]
   \   0000003A   0x4788             BLX      R1
   \                     ??Subroutine1_1: (+1)
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
     34          

   \                                 In section .text, align 2, keep-with-next
     35          nsapi_protocol_t TCPSocket::get_proto()
     36          {
     37              return NSAPI_TCP;
   \                     _ZN9TCPSocket9get_protoEv: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
     38          }
     39          

   \                                 In section .text, align 4, keep-with-next
     40          nsapi_error_t TCPSocket::connect(const SocketAddress &address)
     41          {
   \                     _ZN9TCPSocket7connectERK13SocketAddress: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x43C9             MVNS     R1,R1            ;; #-1
   \   0000000A   0x3030             ADDS     R0,R0,#+48
     42              _lock.lock();
   \   0000000C   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
     43              nsapi_error_t ret;
     44          
     45              // If this assert is hit then there are two threads
     46              // performing a send at the same time which is undefined
     47              // behavior
     48              MBED_ASSERT(!_write_in_progress);
   \   00000010   0x206D             MOVS     R0,#+109
   \   00000012   0x5C20             LDRB     R0,[R4, R0]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD006             BEQ      ??connect_0
   \   00000018   0x2230             MOVS     R2,#+48
   \   0000001A   0xBF00             Nop      
   \   0000001C   0x....             ADR.N    R1,?_1
   \   0000001E   0xBF00             Nop      
   \   00000020   0x....             ADR.N    R0,?_0
   \   00000022   0x.... 0x....      BL       mbed_assert_internal
   \                     ??connect_0: (+1)
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x216D             MOVS     R1,#+109
   \   0000002A   0x5460             STRB     R0,[R4, R1]
     49              _write_in_progress = true;
     50          
     51              bool blocking_connect_in_progress = false;
   \   0000002C   0x2700             MOVS     R7,#+0
   \   0000002E   0x4669             MOV      R1,SP
   \   00000030   0x700F             STRB     R7,[R1, #+0]
     52          
     53              while (true) {
     54                  if (!_socket) {
   \                     ??connect_1: (+1)
   \   00000032   0x1D20             ADDS     R0,R4,#+4
   \   00000034   0x6841             LDR      R1,[R0, #+4]
   \   00000036   0x2900             CMP      R1,#+0
   \   00000038   0xD103             BNE      ??connect_2
     55                      ret = NSAPI_ERROR_NO_SOCKET;
   \   0000003A   0x....             LDR      R6,??DataTable8_2  ;; 0xfffff443
     56                      break;
   \   0000003C   0x206D             MOVS     R0,#+109
   \   0000003E   0x5427             STRB     R7,[R4, R0]
   \   00000040   0xE032             B        ??connect_3
     57                  }
     58          
     59                  _pending = 0;
   \                     ??connect_2: (+1)
   \   00000042   0x6507             STR      R7,[R0, #+80]
     60                  ret = _stack->socket_connect(_socket, address);
   \   00000044   0x6860             LDR      R0,[R4, #+4]
   \   00000046   0x9A02             LDR      R2,[SP, #+8]
   \   00000048   0x6803             LDR      R3,[R0, #+0]
   \   0000004A   0x6ADB             LDR      R3,[R3, #+44]
   \   0000004C   0x4798             BLX      R3
   \   0000004E   0x0006             MOVS     R6,R0
     61                  if ((_timeout == 0) || !(ret == NSAPI_ERROR_IN_PROGRESS || ret == NSAPI_ERROR_ALREADY)) {
   \   00000050   0x1D20             ADDS     R0,R4,#+4
   \   00000052   0x6880             LDR      R0,[R0, #+8]
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD01D             BEQ      ??connect_4
   \   00000058   0x....             LDR      R0,??DataTable8_3  ;; 0xfffff43b
   \   0000005A   0x4286             CMP      R6,R0
   \   0000005C   0xD002             BEQ      ??connect_5
   \   0000005E   0x....             LDR      R0,??DataTable8_4  ;; 0xfffff43a
   \   00000060   0x4286             CMP      R6,R0
   \   00000062   0xD117             BNE      ??connect_4
     62                      break;
     63                  } else {
     64                      blocking_connect_in_progress = true;
   \                     ??connect_5: (+1)
   \   00000064   0x2001             MOVS     R0,#+1
   \   00000066   0x4669             MOV      R1,SP
   \   00000068   0x7008             STRB     R0,[R1, #+0]
     65          
     66                      uint32_t flag;
     67          
     68                      // Release lock before blocking so other threads
     69                      // accessing this object aren't blocked
     70                      _lock.unlock();
   \   0000006A   0x0020             MOVS     R0,R4
   \   0000006C   0x3030             ADDS     R0,R0,#+48
   \   0000006E   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
     71                      flag = _event_flag.wait_any(WRITE_FLAG, _timeout);
   \   00000072   0x2301             MOVS     R3,#+1
   \   00000074   0x1D20             ADDS     R0,R4,#+4
   \   00000076   0x6882             LDR      R2,[R0, #+8]
   \   00000078   0x2102             MOVS     R1,#+2
   \   0000007A   0x0020             MOVS     R0,R4
   \   0000007C   0x3058             ADDS     R0,R0,#+88
   \   0000007E   0x.... 0x....      BL       _ZN4rtos10EventFlags8wait_anyEjjb
   \   00000082   0x0005             MOVS     R5,R0
     72                      _lock.lock();
   \   00000084   0x2100             MOVS     R1,#+0
   \   00000086   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000088   0x0020             MOVS     R0,R4
   \   0000008A   0x3030             ADDS     R0,R0,#+48
   \   0000008C   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
     73                      if (flag & osFlagsError) {
   \   00000090   0x2D00             CMP      R5,#+0
   \   00000092   0xD5CE             BPL      ??connect_1
     74                          // Timeout break
     75                          break;
     76                      }
     77                  }
     78              }
     79          
     80              _write_in_progress = false;
   \                     ??connect_4: (+1)
   \   00000094   0x216D             MOVS     R1,#+109
   \   00000096   0x5467             STRB     R7,[R4, R1]
     81          
     82              /* Non-blocking connect gives "EISCONN" once done - convert to OK for blocking mode if we became connected during this call */
     83              if (ret == NSAPI_ERROR_IS_CONNECTED && blocking_connect_in_progress) {
   \   00000098   0x....             LDR      R0,??DataTable8_5  ;; 0xfffff439
   \   0000009A   0x4286             CMP      R6,R0
   \   0000009C   0xD104             BNE      ??connect_3
   \   0000009E   0x4668             MOV      R0,SP
   \   000000A0   0x7800             LDRB     R0,[R0, #+0]
   \   000000A2   0x2800             CMP      R0,#+0
   \   000000A4   0xD000             BEQ      ??connect_3
     84                  ret = NSAPI_ERROR_OK;
   \   000000A6   0x2600             MOVS     R6,#+0
     85              }
     86          
     87              _lock.unlock();
   \                     ??connect_3: (+1)
   \   000000A8   0x....             B.N      ??Subroutine2_0
     88              return ret;
     89          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x5427             STRB     R7,[R4, R0]
   \                     ??Subroutine2_0: (+1)
   \   00000002   0x0020             MOVS     R0,R4
   \   00000004   0x3030             ADDS     R0,R0,#+48
   \   00000006   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
   \   0000000A   0x0030             MOVS     R0,R6
   \   0000000C   0xB003             ADD      SP,SP,#+12
   \   0000000E   0xBDF0             POP      {R4-R7,PC}       ;; return
     90          

   \                                 In section .text, align 2, keep-with-next
     91          nsapi_error_t TCPSocket::connect(const char *host, uint16_t port)
     92          {
   \                     _ZN9TCPSocket7connectEPKct: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB098             SUB      SP,SP,#+96
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000E             MOVS     R6,R1
   \   00000008   0x0015             MOVS     R5,R2
     93              SocketAddress address;
   \   0000000A   0x2111             MOVS     R1,#+17
   \   0000000C   0xA803             ADD      R0,SP,#+12
   \   0000000E   0x.... 0x....      BL       __aeabi_memclr4
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x9002             STR      R0,[SP, #+8]
   \   00000016   0xA903             ADD      R1,SP,#+12
   \   00000018   0xB083             SUB      SP,SP,#+12
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x2214             MOVS     R2,#+20
   \   0000001E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000022   0xBC0E             POP      {R1-R3}
   \   00000024   0xA808             ADD      R0,SP,#+32
   \   00000026   0x.... 0x....      BL       _ZN13SocketAddressC1E10nsapi_addrt
   \   0000002A   0x0002             MOVS     R2,R0
     94              nsapi_error_t err = _stack->gethostbyname(host, &address);
     95              if (err) {
   \   0000002C   0x6860             LDR      R0,[R4, #+4]
   \   0000002E   0x2300             MOVS     R3,#+0
   \   00000030   0x0031             MOVS     R1,R6
   \   00000032   0x6806             LDR      R6,[R0, #+0]
   \   00000034   0x68F6             LDR      R6,[R6, #+12]
   \   00000036   0x47B0             BLX      R6
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD001             BEQ      ??connect_6
     96                  return NSAPI_ERROR_DNS_FAILURE;
   \   0000003C   0x....             LDR      R0,??DataTable8_6  ;; 0xfffff43f
   \   0000003E   0xE007             B        ??connect_7
     97              }
     98          
     99              address.set_port(port);
   \                     ??connect_6: (+1)
   \   00000040   0x0029             MOVS     R1,R5
   \   00000042   0xA808             ADD      R0,SP,#+32
   \   00000044   0x.... 0x....      BL       _ZN13SocketAddress8set_portEt
    100          
    101              // connect is thread safe
    102              return connect(address);
   \   00000048   0xA908             ADD      R1,SP,#+32
   \   0000004A   0x0020             MOVS     R0,R4
   \   0000004C   0x.... 0x....      BL       _ZN9TCPSocket7connectERK13SocketAddress
   \                     ??connect_7: (+1)
   \   00000050   0xB018             ADD      SP,SP,#+96
   \   00000052   0xBD70             POP      {R4-R6,PC}       ;; return
    103          }
    104          

   \                                 In section .text, align 4, keep-with-next
    105          nsapi_size_or_error_t TCPSocket::send(const void *data, nsapi_size_t size)
    106          {
   \                     _ZN9TCPSocket4sendEPKvj: (+1)
   \   00000000   0xB5F7             PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000008   0x3030             ADDS     R0,R0,#+48
    107              _lock.lock();
   \   0000000A   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
    108              nsapi_size_or_error_t ret;
    109          
    110              // If this assert is hit then there are two threads
    111              // performing a send at the same time which is undefined
    112              // behavior
    113              MBED_ASSERT(!_write_in_progress);
   \   0000000E   0x206D             MOVS     R0,#+109
   \   00000010   0x5C20             LDRB     R0,[R4, R0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD005             BEQ      ??send_0
   \   00000016   0x2271             MOVS     R2,#+113
   \   00000018   0x....             ADR.N    R1,?_1
   \   0000001A   0xBF00             Nop      
   \   0000001C   0x....             ADR.N    R0,?_0
   \   0000001E   0x.... 0x....      BL       mbed_assert_internal
    114              _write_in_progress = true;
   \                     ??send_0: (+1)
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x216D             MOVS     R1,#+109
   \   00000026   0x5460             STRB     R0,[R4, R1]
   \   00000028   0x2700             MOVS     R7,#+0
    115          
    116              while (true) {
    117                  if (!_socket) {
   \                     ??send_1: (+1)
   \   0000002A   0x1D20             ADDS     R0,R4,#+4
   \   0000002C   0x6841             LDR      R1,[R0, #+4]
   \   0000002E   0x2900             CMP      R1,#+0
   \   00000030   0xD101             BNE      ??send_2
    118                      ret = NSAPI_ERROR_NO_SOCKET;
   \   00000032   0x....             LDR      R6,??DataTable8_2  ;; 0xfffff443
    119                      break;
   \   00000034   0xE023             B        ??send_3
    120                  }
    121          
    122                  _pending = 0;
   \                     ??send_2: (+1)
   \   00000036   0x6507             STR      R7,[R0, #+80]
    123                  ret = _stack->socket_send(_socket, data, size);
   \   00000038   0x6860             LDR      R0,[R4, #+4]
   \   0000003A   0x9B02             LDR      R3,[SP, #+8]
   \   0000003C   0x9A01             LDR      R2,[SP, #+4]
   \   0000003E   0x6805             LDR      R5,[R0, #+0]
   \   00000040   0x6B6D             LDR      R5,[R5, #+52]
   \   00000042   0x47A8             BLX      R5
   \   00000044   0x0006             MOVS     R6,R0
    124                  if ((_timeout == 0) || (ret != NSAPI_ERROR_WOULD_BLOCK)) {
   \   00000046   0x1D20             ADDS     R0,R4,#+4
   \   00000048   0x6880             LDR      R0,[R0, #+8]
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD017             BEQ      ??send_3
   \   0000004E   0x....             LDR      R0,??DataTable8_7  ;; 0xfffff447
   \   00000050   0x4286             CMP      R6,R0
   \   00000052   0xD114             BNE      ??send_3
    125                      break;
    126                  } else {
    127                      uint32_t flag;
    128          
    129                      // Release lock before blocking so other threads
    130                      // accessing this object aren't blocked
    131                      _lock.unlock();
   \   00000054   0x0020             MOVS     R0,R4
   \   00000056   0x3030             ADDS     R0,R0,#+48
   \   00000058   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
    132                      flag = _event_flag.wait_any(WRITE_FLAG, _timeout);
   \   0000005C   0x2301             MOVS     R3,#+1
   \   0000005E   0x1D20             ADDS     R0,R4,#+4
   \   00000060   0x6882             LDR      R2,[R0, #+8]
   \   00000062   0x2102             MOVS     R1,#+2
   \   00000064   0x0020             MOVS     R0,R4
   \   00000066   0x3058             ADDS     R0,R0,#+88
   \   00000068   0x.... 0x....      BL       _ZN4rtos10EventFlags8wait_anyEjjb
   \   0000006C   0x0005             MOVS     R5,R0
    133                      _lock.lock();
   \   0000006E   0x2100             MOVS     R1,#+0
   \   00000070   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000072   0x0020             MOVS     R0,R4
   \   00000074   0x3030             ADDS     R0,R0,#+48
   \   00000076   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
    134          
    135                      if (flag & osFlagsError) {
   \   0000007A   0x2D00             CMP      R5,#+0
   \   0000007C   0xD5D5             BPL      ??send_1
    136                          // Timeout break
    137                          ret = NSAPI_ERROR_WOULD_BLOCK;
    138                          break;
    139                      }
    140                  }
    141              }
    142          
    143              _write_in_progress = false;
   \                     ??send_3: (+1)
   \   0000007E   0x206D             MOVS     R0,#+109
   \   00000080   0x....             B.N      ?Subroutine2
    144              _lock.unlock();
    145              return ret;
    146          }
    147          

   \                                 In section .text, align 4, keep-with-next
    148          nsapi_size_or_error_t TCPSocket::recv(void *data, nsapi_size_t size)
    149          {
   \                     _ZN9TCPSocket4recvEPvj: (+1)
   \   00000000   0xB5F7             PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000008   0x3030             ADDS     R0,R0,#+48
    150              _lock.lock();
   \   0000000A   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
    151              nsapi_size_or_error_t ret;
    152          
    153              // If this assert is hit then there are two threads
    154              // performing a recv at the same time which is undefined
    155              // behavior
    156              MBED_ASSERT(!_read_in_progress);
   \   0000000E   0x206C             MOVS     R0,#+108
   \   00000010   0x5C20             LDRB     R0,[R4, R0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD005             BEQ      ??recv_0
   \   00000016   0x229C             MOVS     R2,#+156
   \   00000018   0x....             ADR.N    R1,?_1
   \   0000001A   0xBF00             Nop      
   \   0000001C   0x....             ADR.N    R0,?_2
   \   0000001E   0x.... 0x....      BL       mbed_assert_internal
    157              _read_in_progress = true;
   \                     ??recv_0: (+1)
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x216C             MOVS     R1,#+108
   \   00000026   0x5460             STRB     R0,[R4, R1]
   \   00000028   0x2700             MOVS     R7,#+0
    158          
    159              while (true) {
    160                  if (!_socket) {
   \                     ??recv_1: (+1)
   \   0000002A   0x1D20             ADDS     R0,R4,#+4
   \   0000002C   0x6841             LDR      R1,[R0, #+4]
   \   0000002E   0x2900             CMP      R1,#+0
   \   00000030   0xD104             BNE      ??recv_2
    161                      ret = NSAPI_ERROR_NO_SOCKET;
   \   00000032   0x4E01             LDR      R6,??recv_3      ;; 0xfffff443
    162                      break;
   \   00000034   0xE029             B        ??recv_4
   \   00000036   0xBF00             Nop      
   \                     ??recv_3:
   \   00000038   0xFFFFF443         DC32     0xfffff443
    163                  }
    164          
    165                  _pending = 0;
   \                     ??recv_2: (+1)
   \   0000003C   0x6507             STR      R7,[R0, #+80]
    166                  ret = _stack->socket_recv(_socket, data, size);
   \   0000003E   0x6860             LDR      R0,[R4, #+4]
   \   00000040   0x9B02             LDR      R3,[SP, #+8]
   \   00000042   0x9A01             LDR      R2,[SP, #+4]
   \   00000044   0x6805             LDR      R5,[R0, #+0]
   \   00000046   0x6BAD             LDR      R5,[R5, #+56]
   \   00000048   0x47A8             BLX      R5
   \   0000004A   0x0006             MOVS     R6,R0
    167                  if ((_timeout == 0) || (ret != NSAPI_ERROR_WOULD_BLOCK)) {
   \   0000004C   0x1D20             ADDS     R0,R4,#+4
   \   0000004E   0x6880             LDR      R0,[R0, #+8]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD01A             BEQ      ??recv_4
   \   00000054   0x4800             LDR      R0,??recv_5      ;; 0xfffff447
   \   00000056   0xE001             B.N      ??recv_6
   \                     ??recv_5:
   \   00000058   0xFFFFF447         DC32     0xfffff447
   \                     ??recv_6: (+1)
   \   0000005C   0x4286             CMP      R6,R0
   \   0000005E   0xD114             BNE      ??recv_4
    168                      break;
    169                  } else {
    170                      uint32_t flag;
    171          
    172                      // Release lock before blocking so other threads
    173                      // accessing this object aren't blocked
    174                      _lock.unlock();
   \   00000060   0x0020             MOVS     R0,R4
   \   00000062   0x3030             ADDS     R0,R0,#+48
   \   00000064   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
    175                      flag = _event_flag.wait_any(READ_FLAG, _timeout);
   \   00000068   0x2301             MOVS     R3,#+1
   \   0000006A   0x1D20             ADDS     R0,R4,#+4
   \   0000006C   0x6882             LDR      R2,[R0, #+8]
   \   0000006E   0x2101             MOVS     R1,#+1
   \   00000070   0x0020             MOVS     R0,R4
   \   00000072   0x3058             ADDS     R0,R0,#+88
   \   00000074   0x.... 0x....      BL       _ZN4rtos10EventFlags8wait_anyEjjb
   \   00000078   0x0005             MOVS     R5,R0
    176                      _lock.lock();
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0x43C9             MVNS     R1,R1            ;; #-1
   \   0000007E   0x0020             MOVS     R0,R4
   \   00000080   0x3030             ADDS     R0,R0,#+48
   \   00000082   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
    177          
    178                      if (flag & osFlagsError) {
   \   00000086   0x2D00             CMP      R5,#+0
   \   00000088   0xD5CF             BPL      ??recv_1
    179                          // Timeout break
    180                          ret = NSAPI_ERROR_WOULD_BLOCK;
    181                          break;
    182                      }
    183                  }
    184              }
    185          
    186              _read_in_progress = false;
   \                     ??recv_4: (+1)
   \   0000008A   0x206C             MOVS     R0,#+108
   \   0000008C                      REQUIRE ?Subroutine2
   \   0000008C                      ;; // Fall through to label ?Subroutine2
    187              _lock.unlock();
    188              return ret;
    189          }
    190          

   \                                 In section .text, align 2, keep-with-next
    191          void TCPSocket::event()
    192          {
   \                     _ZN9TCPSocket5eventEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    193              _event_flag.set(READ_FLAG|WRITE_FLAG);
   \   00000004   0x2103             MOVS     R1,#+3
   \   00000006   0x3058             ADDS     R0,R0,#+88
   \   00000008   0x.... 0x....      BL       _ZN4rtos10EventFlags3setEj
    194          
    195              _pending += 1;
   \   0000000C   0x6D60             LDR      R0,[R4, #+84]
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \   00000010   0x6560             STR      R0,[R4, #+84]
    196              if (_callback && _pending == 1) {
   \   00000012   0x6AE0             LDR      R0,[R4, #+44]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD007             BEQ      ??event_0
   \   00000018   0x6D60             LDR      R0,[R4, #+84]
   \   0000001A   0x2801             CMP      R0,#+1
   \   0000001C   0xD104             BNE      ??event_0
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x3020             ADDS     R0,R0,#+32
   \   00000022   0x6AE1             LDR      R1,[R4, #+44]
   \   00000024   0x6809             LDR      R1,[R1, #+0]
   \   00000026   0x4788             BLX      R1
    197                  _callback();
    198              }
    199          }
   \                     ??event_0: (+1)
   \   00000028   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp TCPSocket::subobject TCPSocket()
   \                     _ZN9TCPSocketC2Ev: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x....             B.N      ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp TCPSocket::subobject ~TCPSocket()
   \                     _ZN9TCPSocketD2Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             B.N      ?Subroutine1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     _ZTV9TCPSocket+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     _ZTV6Socket+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0xFFFFF443         DC32     0xfffff443

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0xFFFFF43B         DC32     0xfffff43b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0xFFFFF43A         DC32     0xfffff43a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0xFFFFF439         DC32     0xfffff439

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0xFFFFF43F         DC32     0xfffff43f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0xFFFFF447         DC32     0xfffff447

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x21 0x5F          DC8 "!_write_in_progress"
   \              0x77 0x72    
   \              0x69 0x74    
   \              0x65 0x5F    
   \              0x69 0x6E    
   \              0x5F 0x70    
   \              0x72 0x6F    
   \              0x67 0x72    
   \              0x65 0x73    
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x2E 0x5C          DC8 ".\\mbed-os\\features\\netsocket\\TCPSocket.cpp"
   \              0x6D 0x62    
   \              0x65 0x64    
   \              0x2D 0x6F    
   \              0x73 0x5C    
   \              0x66 0x65    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x73    
   \              0x5C 0x6E    
   \              0x65 0x74    
   \              0x73 0x6F    
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x5C 0x54    
   \              0x43 0x50    
   \              0x53 0x6F    
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x2E 0x63    
   \              0x70 0x70    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x21 0x5F          DC8 "!_read_in_progress"
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x5F 0x69    
   \              0x6E 0x5F    
   \              0x70 0x72    
   \              0x6F 0x67    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x00         
   \   00000013   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Socket::deleter ~Socket()
         8   -- Indirect call
         8   -> operator delete(void *)
         8   -> rtos::Mutex::~Mutex()
       8   Socket::~Socket()
         8   -- Indirect call
         8   -> rtos::Mutex::~Mutex()
       0   TCPSocket::TCPSocket()
        16   -> Socket::subobject Socket()
        16   -> rtos::EventFlags::EventFlags()
      32   TCPSocket::connect(SocketAddress const &)
        32   -- Indirect call
        32   -> mbed_assert_internal
        32   -> rtos::EventFlags::wait_any(unsigned int, unsigned int, bool)
        32   -> rtos::Mutex::lock(unsigned int)
        32   -> rtos::Mutex::unlock()
     124   TCPSocket::connect(char const *, std::uint16_t)
       112   -- Indirect call
       112   -> SocketAddress::SocketAddress(nsapi_addr, std::uint16_t)
       112   -> SocketAddress::set_port(std::uint16_t)
       112   -> TCPSocket::connect(SocketAddress const &)
       112   -> __aeabi_memclr4
       124   -> __aeabi_memcpy4
       8   TCPSocket::deleter ~TCPSocket()
         8   -- Indirect call
         8   -> Socket::close()
         8   -> operator delete(void *)
         8   -> rtos::EventFlags::~EventFlags()
         8   -> rtos::Mutex::~Mutex()
       8   TCPSocket::event()
         8   -- Indirect call
         8   -> rtos::EventFlags::set(unsigned int)
       0   TCPSocket::get_proto()
      32   TCPSocket::recv(void *, nsapi_size_t)
        32   -- Indirect call
        32   -> mbed_assert_internal
        32   -> rtos::EventFlags::wait_any(unsigned int, unsigned int, bool)
        32   -> rtos::Mutex::lock(unsigned int)
        32   -> rtos::Mutex::unlock()
      32   TCPSocket::send(void const *, nsapi_size_t)
        32   -- Indirect call
        32   -> mbed_assert_internal
        32   -> rtos::EventFlags::wait_any(unsigned int, unsigned int, bool)
        32   -> rtos::Mutex::lock(unsigned int)
        32   -> rtos::Mutex::unlock()
      16   TCPSocket::subobject TCPSocket()
        16   -> Socket::subobject Socket()
        16   -> rtos::EventFlags::EventFlags()
       8   TCPSocket::subobject ~TCPSocket()
         8   -- Indirect call
         8   -> Socket::close()
         8   -> rtos::EventFlags::~EventFlags()
         8   -> rtos::Mutex::~Mutex()
       0   TCPSocket::~TCPSocket()
         8   -- Indirect call
         8   -> Socket::close()
         8   -> rtos::EventFlags::~EventFlags()
         8   -> rtos::Mutex::~Mutex()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
      34  ?Subroutine0
      64  ?Subroutine1
      16  ?Subroutine2
      20  ?_0
      44  ?_1
      20  ?_2
      56  Socket::deleter ~Socket()
      52  Socket::~Socket()
       2  TCPSocket::TCPSocket()
     170  TCPSocket::connect(SocketAddress const &)
      84  TCPSocket::connect(char const *, std::uint16_t)
      70  TCPSocket::deleter ~TCPSocket()
      42  TCPSocket::event()
       4  TCPSocket::get_proto()
     140  TCPSocket::recv(void *, nsapi_size_t)
     130  TCPSocket::send(void const *, nsapi_size_t)
       4  TCPSocket::subobject TCPSocket()
       4  TCPSocket::subobject ~TCPSocket()
       2  TCPSocket::~TCPSocket()
     128  -- Other

 
 128 bytes in section .rodata
 990 bytes in section .text
 
 882 bytes of CODE  memory (+ 108 bytes shared)
   0 bytes of CONST memory (+ 128 bytes shared)

Errors: none
Warnings: none
