###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       16/Mar/2018  12:16:43
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\netsocket\UDPSocket.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DDEVICE_SERIAL=1 -DTARGET_CORTEX_M -DDEVICE_SPI=1 -DTARGET_LIKE_MBED
#        -DMBED_BUILD_TIMESTAMP=1521198946.13 -DARM_MATH_CM0 -DTARGET_RELEASE
#        -D__CORTEX_M0 -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0
#        -DTOOLCHAIN_object -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -f
#        .\BUILD\STEVAL_IDB007V1\iar\.includes_fc2e77952737cb4522ab0dffe8cfd8aa.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN
#        -I./mbed-os/features/frameworks
#        -I./mbed-os/features/frameworks/greentea-client
#        -I./mbed-os/features/frameworks/greentea-client/greentea-client
#        -I./mbed-os/features/frameworks/greentea-client/source
#        -I./mbed-os/features/frameworks/unity
#        -I./mbed-os/features/frameworks/unity/source
#        -I./mbed-os/features/frameworks/unity/unity
#        -I./mbed-os/features/frameworks/utest
#        -I./mbed-os/features/frameworks/utest/source
#        -I./mbed-os/features/frameworks/utest/utest
#        -I./mbed-os/features/mbedtls -I./mbed-os/features/mbedtls/importer
#        -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/features/netsocket
#        -I./mbed-os/features/netsocket/cellular
#        -I./mbed-os/features/netsocket/cellular/generic_modem_driver
#        -I./mbed-os/features/netsocket/cellular/utils
#        -I./mbed-os/features/storage -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\iar\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\UDPSocket.d -l
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\UDPSocket.s.txt
#        -o .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\UDPSocket.o
#        .\mbed-os\features\netsocket\UDPSocket.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\UDPSocket.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\UDPSocket.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia\mbed-os\features\netsocket\UDPSocket.cpp
      1          /* Socket
      2           * Copyright (c) 2015 ARM Limited
      3           *
      4           * Licensed under the Apache License, Version 2.0 (the "License");
      5           * you may not use this file except in compliance with the License.
      6           * You may obtain a copy of the License at
      7           *
      8           *     http://www.apache.org/licenses/LICENSE-2.0
      9           *
     10           * Unless required by applicable law or agreed to in writing, software
     11           * distributed under the License is distributed on an "AS IS" BASIS,
     12           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     13           * See the License for the specific language governing permissions and
     14           * limitations under the License.
     15           */
     16          
     17          #include "UDPSocket.h"

   \                                 In section .text, align 4
   \   __code __interwork __softfp Socket::~Socket()
   \                     _ZN6SocketD1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x480A             LDR      R0,`?~Socket_0`
   \   00000006   0x6020             STR      R0,[R4, #+0]
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x3030             ADDS     R0,R0,#+48
   \   0000000C   0x.... 0x....      BL       _ZN4rtos5MutexD1Ev
   \   00000010   0x6AE1             LDR      R1,[R4, #+44]
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xD003             BEQ      `?~Socket_1`
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x3020             ADDS     R0,R0,#+32
   \   0000001A   0x6889             LDR      R1,[R1, #+8]
   \   0000001C   0x4788             BLX      R1
   \                     `?~Socket_1`: (+1)
   \   0000001E   0x69E1             LDR      R1,[R4, #+28]
   \   00000020   0x2900             CMP      R1,#+0
   \   00000022   0xD003             BEQ      `?~Socket_2`
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x3010             ADDS     R0,R0,#+16
   \   00000028   0x6889             LDR      R1,[R1, #+8]
   \   0000002A   0x4788             BLX      R1
   \                     `?~Socket_2`: (+1)
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
   \                     `?~Socket_0`:
   \   00000030   0x........         DC32     _ZTV6Socket+0x8

   \                                 In section .text, align 4
   \   __code __interwork __softfp Socket::deleter ~Socket()
   \                     _ZN6SocketD0Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x480B             LDR      R0,`??deleter ~Socket_0`
   \   00000006   0x6020             STR      R0,[R4, #+0]
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x3030             ADDS     R0,R0,#+48
   \   0000000C   0x.... 0x....      BL       _ZN4rtos5MutexD1Ev
   \   00000010   0x6AE1             LDR      R1,[R4, #+44]
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xD003             BEQ      `??deleter ~Socket_1`
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x3020             ADDS     R0,R0,#+32
   \   0000001A   0x6889             LDR      R1,[R1, #+8]
   \   0000001C   0x4788             BLX      R1
   \                     `??deleter ~Socket_1`: (+1)
   \   0000001E   0x69E1             LDR      R1,[R4, #+28]
   \   00000020   0x2900             CMP      R1,#+0
   \   00000022   0xD003             BEQ      `??deleter ~Socket_2`
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x3010             ADDS     R0,R0,#+16
   \   00000028   0x6889             LDR      R1,[R1, #+8]
   \   0000002A   0x4788             BLX      R1
   \                     `??deleter ~Socket_2`: (+1)
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x.... 0x....      BL       _ZdlPv
   \   00000032   0xBD10             POP      {R4,PC}          ;; return
   \                     `??deleter ~Socket_0`:
   \   00000034   0x........         DC32     _ZTV6Socket+0x8
     18          #include "Timer.h"
     19          #include "mbed_assert.h"
     20          
     21          #define TCP_EVENT           "UDP_Events"
     22          #define READ_FLAG           0x1u
     23          #define WRITE_FLAG          0x2u
     24          

   \                                 In section .text, align 2, keep-with-next
     25          UDPSocket::UDPSocket()
   \                     _ZN9UDPSocketC1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002                      REQUIRE ?Subroutine1
   \   00000002                      ;; // Fall through to label ?Subroutine1

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x0004             MOVS     R4,R0
     26              : _pending(0), _event_flag()
     27          {
   \   00000002   0x.... 0x....      BL       _ZN6SocketC2Ev
   \   00000006   0x....             LDR      R0,??DataTable3
   \   00000008   0x6020             STR      R0,[R4, #+0]
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x6560             STR      R0,[R4, #+84]
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x3058             ADDS     R0,R0,#+88
   \   00000012   0x.... 0x....      BL       _ZN4rtos10EventFlagsC1Ev
     28          }
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
     29          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp UDPSocket::deleter ~UDPSocket()
   \                     _ZN9UDPSocketD0Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x.... 0x....      BL       _ZN9UDPSocketD1Ev
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       _ZdlPv
   \   0000000E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     30          UDPSocket::~UDPSocket()
   \                     _ZN9UDPSocketD1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002                      REQUIRE ?Subroutine0
   \   00000002                      ;; // Fall through to label ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
     31          {
   \                     ?Subroutine0: (+1)
   \   00000000   0x0004             MOVS     R4,R0
   \   00000002   0x....             LDR      R0,??DataTable3
   \   00000004   0x6020             STR      R0,[R4, #+0]
     32              close();
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       _ZN6Socket5closeEv
     33          }
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x3058             ADDS     R0,R0,#+88
   \   00000010   0x.... 0x....      BL       _ZN4rtos10EventFlagsD1Ev
   \   00000014   0x....             LDR      R0,??DataTable3_1
   \   00000016   0x6020             STR      R0,[R4, #+0]
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x3030             ADDS     R0,R0,#+48
   \   0000001C   0x.... 0x....      BL       _ZN4rtos5MutexD1Ev
   \   00000020   0x6AE1             LDR      R1,[R4, #+44]
   \   00000022   0x2900             CMP      R1,#+0
   \   00000024   0xD003             BEQ      ??Subroutine0_0
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x3020             ADDS     R0,R0,#+32
   \   0000002A   0x6889             LDR      R1,[R1, #+8]
   \   0000002C   0x4788             BLX      R1
   \                     ??Subroutine0_0: (+1)
   \   0000002E   0x69E1             LDR      R1,[R4, #+28]
   \   00000030   0x2900             CMP      R1,#+0
   \   00000032   0xD003             BEQ      ??Subroutine0_1
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x3010             ADDS     R0,R0,#+16
   \   00000038   0x6889             LDR      R1,[R1, #+8]
   \   0000003A   0x4788             BLX      R1
   \                     ??Subroutine0_1: (+1)
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
     34          

   \                                 In section .text, align 2, keep-with-next
     35          nsapi_protocol_t UDPSocket::get_proto()
     36          {
     37              return NSAPI_UDP;
   \                     _ZN9UDPSocket9get_protoEv: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
     38          }
     39          
     40          

   \                                 In section .text, align 2, keep-with-next
     41          nsapi_size_or_error_t UDPSocket::sendto(const char *host, uint16_t port, const void *data, nsapi_size_t size)
     42          {
   \                     _ZN9UDPSocket6sendtoEPKctPKvj: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB097             SUB      SP,SP,#+92
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000F             MOVS     R7,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001D             MOVS     R5,R3
     43              SocketAddress address;
   \   0000000C   0x2111             MOVS     R1,#+17
   \   0000000E   0xA803             ADD      R0,SP,#+12
   \   00000010   0x.... 0x....      BL       __aeabi_memclr4
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x9002             STR      R0,[SP, #+8]
   \   00000018   0xA903             ADD      R1,SP,#+12
   \   0000001A   0xB083             SUB      SP,SP,#+12
   \   0000001C   0x4668             MOV      R0,SP
   \   0000001E   0x2214             MOVS     R2,#+20
   \   00000020   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000024   0xBC0E             POP      {R1-R3}
   \   00000026   0xA808             ADD      R0,SP,#+32
   \   00000028   0x.... 0x....      BL       _ZN13SocketAddressC1E10nsapi_addrt
   \   0000002C   0x0002             MOVS     R2,R0
     44              nsapi_size_or_error_t err = _stack->gethostbyname(host, &address);
     45              if (err) {
   \   0000002E   0x6860             LDR      R0,[R4, #+4]
   \   00000030   0x2300             MOVS     R3,#+0
   \   00000032   0x0039             MOVS     R1,R7
   \   00000034   0x6807             LDR      R7,[R0, #+0]
   \   00000036   0x68FF             LDR      R7,[R7, #+12]
   \   00000038   0x47B8             BLX      R7
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD001             BEQ      ??sendto_0
     46                  return NSAPI_ERROR_DNS_FAILURE;
   \   0000003E   0x....             LDR      R0,??DataTable3_2  ;; 0xfffff43f
   \   00000040   0xE009             B        ??sendto_1
     47              }
     48          
     49              address.set_port(port);
   \                     ??sendto_0: (+1)
   \   00000042   0x0031             MOVS     R1,R6
   \   00000044   0xA808             ADD      R0,SP,#+32
   \   00000046   0x.... 0x....      BL       _ZN13SocketAddress8set_portEt
     50          
     51              // sendto is thread safe
     52              return sendto(address, data, size);
   \   0000004A   0x9B1C             LDR      R3,[SP, #+112]
   \   0000004C   0x002A             MOVS     R2,R5
   \   0000004E   0xA908             ADD      R1,SP,#+32
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0x.... 0x....      BL       _ZN9UDPSocket6sendtoERK13SocketAddressPKvj
   \                     ??sendto_1: (+1)
   \   00000056   0xB017             ADD      SP,SP,#+92
   \   00000058   0xBDF0             POP      {R4-R7,PC}       ;; return
     53          }
     54          

   \                                 In section .text, align 2, keep-with-next
     55          nsapi_size_or_error_t UDPSocket::sendto(const SocketAddress &address, const void *data, nsapi_size_t size)
     56          {
   \                     _ZN9UDPSocket6sendtoERK13SocketAddressPKvj: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
     57              _lock.lock();
   \   00000006   0x2700             MOVS     R7,#+0
   \   00000008   0x43FF             MVNS     R7,R7            ;; #-1
   \   0000000A   0x0039             MOVS     R1,R7
   \   0000000C   0x3030             ADDS     R0,R0,#+48
   \   0000000E   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
   \   00000012   0x....             LDR      R6,??DataTable3_3  ;; 0xfffff447
     58              nsapi_size_or_error_t ret;
     59          
     60              while (true) {
     61                  if (!_socket) {
   \                     ??sendto_2: (+1)
   \   00000014   0x68A1             LDR      R1,[R4, #+8]
   \   00000016   0x2900             CMP      R1,#+0
   \   00000018   0xD101             BNE      ??sendto_3
     62                      ret = NSAPI_ERROR_NO_SOCKET;
   \   0000001A   0x....             LDR      R6,??DataTable3_4  ;; 0xfffff443
     63                      break;
   \   0000001C   0xE023             B        ??sendto_4
     64                  }
     65          
     66                  _pending = 0;
   \                     ??sendto_3: (+1)
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x6560             STR      R0,[R4, #+84]
     67                  nsapi_size_or_error_t sent = _stack->socket_sendto(_socket, address, data, size);
   \   00000022   0x6860             LDR      R0,[R4, #+4]
   \   00000024   0x9A04             LDR      R2,[SP, #+16]
   \   00000026   0x9200             STR      R2,[SP, #+0]
   \   00000028   0x9B03             LDR      R3,[SP, #+12]
   \   0000002A   0x9A02             LDR      R2,[SP, #+8]
   \   0000002C   0x6805             LDR      R5,[R0, #+0]
   \   0000002E   0x6BED             LDR      R5,[R5, #+60]
   \   00000030   0x47A8             BLX      R5
     68                  if ((0 == _timeout) || (NSAPI_ERROR_WOULD_BLOCK != sent)) {
   \   00000032   0x68E1             LDR      R1,[R4, #+12]
   \   00000034   0x2900             CMP      R1,#+0
   \   00000036   0xD001             BEQ      ??sendto_5
   \   00000038   0x42B0             CMP      R0,R6
   \   0000003A   0xD001             BEQ      ??sendto_6
     69                      ret = sent;
   \                     ??sendto_5: (+1)
   \   0000003C   0x0006             MOVS     R6,R0
     70                      break;
   \   0000003E   0xE012             B        ??sendto_4
     71                  } else {
     72                      uint32_t flag;
     73          
     74                      // Release lock before blocking so other threads
     75                      // accessing this object aren't blocked
     76                      _lock.unlock();
   \                     ??sendto_6: (+1)
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0x3030             ADDS     R0,R0,#+48
   \   00000044   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
     77                      flag = _event_flag.wait_any(WRITE_FLAG, _timeout);
   \   00000048   0x2301             MOVS     R3,#+1
   \   0000004A   0x68E2             LDR      R2,[R4, #+12]
   \   0000004C   0x2102             MOVS     R1,#+2
   \   0000004E   0x0020             MOVS     R0,R4
   \   00000050   0x3058             ADDS     R0,R0,#+88
   \   00000052   0x.... 0x....      BL       _ZN4rtos10EventFlags8wait_anyEjjb
   \   00000056   0x0005             MOVS     R5,R0
     78                      _lock.lock();
   \   00000058   0x0039             MOVS     R1,R7
   \   0000005A   0x0020             MOVS     R0,R4
   \   0000005C   0x3030             ADDS     R0,R0,#+48
   \   0000005E   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
     79          
     80                      if (flag & osFlagsError) {
   \   00000062   0x2D00             CMP      R5,#+0
   \   00000064   0xD5D6             BPL      ??sendto_2
     81                          // Timeout break
     82                          ret = NSAPI_ERROR_WOULD_BLOCK;
     83                          break;
     84                      }
     85                  }
     86              }
     87          
     88              _lock.unlock();
   \                     ??sendto_4: (+1)
   \   00000066   0x....             B.N      ?Subroutine2
     89              return ret;
     90          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x0020             MOVS     R0,R4
   \   00000002   0x3030             ADDS     R0,R0,#+48
   \   00000004   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
   \   00000008   0x0030             MOVS     R0,R6
   \   0000000A   0xB005             ADD      SP,SP,#+20
   \   0000000C   0xBDF0             POP      {R4-R7,PC}       ;; return
     91          

   \                                 In section .text, align 4, keep-with-next
     92          nsapi_size_or_error_t UDPSocket::recvfrom(SocketAddress *address, void *buffer, nsapi_size_t size)
     93          {
   \                     _ZN9UDPSocket8recvfromEP13SocketAddressPvj: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
     94              _lock.lock();
   \   00000006   0x2700             MOVS     R7,#+0
   \   00000008   0x43FF             MVNS     R7,R7            ;; #-1
   \   0000000A   0x0039             MOVS     R1,R7
   \   0000000C   0x3030             ADDS     R0,R0,#+48
   \   0000000E   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
   \   00000012   0x4E03             LDR      R6,??recvfrom_0  ;; 0xfffff447
     95              nsapi_size_or_error_t ret;
     96          
     97              while (true) {
     98                  if (!_socket) {
   \                     ??recvfrom_1: (+1)
   \   00000014   0x68A1             LDR      R1,[R4, #+8]
   \   00000016   0x2900             CMP      R1,#+0
   \   00000018   0xD106             BNE      ??recvfrom_2
     99                      ret = NSAPI_ERROR_NO_SOCKET;
   \   0000001A   0x4E02             LDR      R6,??recvfrom_0+0x4  ;; 0xfffff443
    100                      break;
   \   0000001C   0xE028             B        ??recvfrom_3
   \   0000001E   0xBF00             Nop      
   \                     ??recvfrom_0:
   \   00000020   0xFFFFF447         DC32     0xfffff447
   \   00000024   0xFFFFF443         DC32     0xfffff443
    101                  }
    102          
    103                  _pending = 0;
   \                     ??recvfrom_2: (+1)
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x6560             STR      R0,[R4, #+84]
    104                  nsapi_size_or_error_t recv = _stack->socket_recvfrom(_socket, address, buffer, size);
   \   0000002C   0x6860             LDR      R0,[R4, #+4]
   \   0000002E   0x9A04             LDR      R2,[SP, #+16]
   \   00000030   0x9200             STR      R2,[SP, #+0]
   \   00000032   0x9B03             LDR      R3,[SP, #+12]
   \   00000034   0x9A02             LDR      R2,[SP, #+8]
   \   00000036   0x6805             LDR      R5,[R0, #+0]
   \   00000038   0x6C2D             LDR      R5,[R5, #+64]
   \   0000003A   0x47A8             BLX      R5
    105                  if ((0 == _timeout) || (NSAPI_ERROR_WOULD_BLOCK != recv)) {
   \   0000003C   0x68E1             LDR      R1,[R4, #+12]
   \   0000003E   0x2900             CMP      R1,#+0
   \   00000040   0xD001             BEQ      ??recvfrom_4
   \   00000042   0x42B0             CMP      R0,R6
   \   00000044   0xD001             BEQ      ??recvfrom_5
    106                      ret = recv;
   \                     ??recvfrom_4: (+1)
   \   00000046   0x0006             MOVS     R6,R0
    107                      break;
   \   00000048   0xE012             B        ??recvfrom_3
    108                  } else {
    109                      uint32_t flag;
    110          
    111                      // Release lock before blocking so other threads
    112                      // accessing this object aren't blocked
    113                      _lock.unlock();
   \                     ??recvfrom_5: (+1)
   \   0000004A   0x0020             MOVS     R0,R4
   \   0000004C   0x3030             ADDS     R0,R0,#+48
   \   0000004E   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
    114                      flag = _event_flag.wait_any(READ_FLAG, _timeout);
   \   00000052   0x2301             MOVS     R3,#+1
   \   00000054   0x68E2             LDR      R2,[R4, #+12]
   \   00000056   0x2101             MOVS     R1,#+1
   \   00000058   0x0020             MOVS     R0,R4
   \   0000005A   0x3058             ADDS     R0,R0,#+88
   \   0000005C   0x.... 0x....      BL       _ZN4rtos10EventFlags8wait_anyEjjb
   \   00000060   0x0005             MOVS     R5,R0
    115                      _lock.lock();
   \   00000062   0x0039             MOVS     R1,R7
   \   00000064   0x0020             MOVS     R0,R4
   \   00000066   0x3030             ADDS     R0,R0,#+48
   \   00000068   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
    116          
    117                      if (flag & osFlagsError) {
   \   0000006C   0x2D00             CMP      R5,#+0
   \   0000006E   0xD5D1             BPL      ??recvfrom_1
    118                          // Timeout break
    119                          ret = NSAPI_ERROR_WOULD_BLOCK;
    120                          break;
    121                      }
    122                  }
    123              }
    124          
    125              _lock.unlock();
   \                     ??recvfrom_3: (+1)
   \   00000070                      REQUIRE ?Subroutine2
   \   00000070                      ;; // Fall through to label ?Subroutine2
    126              return ret;
    127          }
    128          

   \                                 In section .text, align 2, keep-with-next
    129          void UDPSocket::event()
    130          {
   \                     _ZN9UDPSocket5eventEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    131              _event_flag.set(READ_FLAG|WRITE_FLAG);
   \   00000004   0x2103             MOVS     R1,#+3
   \   00000006   0x3058             ADDS     R0,R0,#+88
   \   00000008   0x.... 0x....      BL       _ZN4rtos10EventFlags3setEj
    132          
    133              _pending += 1;
   \   0000000C   0x6D60             LDR      R0,[R4, #+84]
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \   00000010   0x6560             STR      R0,[R4, #+84]
    134              if (_callback && _pending == 1) {
   \   00000012   0x6AE0             LDR      R0,[R4, #+44]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD007             BEQ      ??event_0
   \   00000018   0x6D60             LDR      R0,[R4, #+84]
   \   0000001A   0x2801             CMP      R0,#+1
   \   0000001C   0xD104             BNE      ??event_0
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x3020             ADDS     R0,R0,#+32
   \   00000022   0x6AE1             LDR      R1,[R4, #+44]
   \   00000024   0x6809             LDR      R1,[R1, #+0]
   \   00000026   0x4788             BLX      R1
    135                  _callback();
    136              }
    137          }
   \                     ??event_0: (+1)
   \   00000028   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp UDPSocket::subobject UDPSocket()
   \                     _ZN9UDPSocketC2Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             B.N      ?Subroutine1

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp UDPSocket::subobject ~UDPSocket()
   \                     _ZN9UDPSocketD2Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             B.N      ?Subroutine0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     _ZTV9UDPSocket+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     _ZTV6Socket+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0xFFFFF43F         DC32     0xfffff43f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0xFFFFF447         DC32     0xfffff447

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0xFFFFF443         DC32     0xfffff443

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Socket::deleter ~Socket()
         8   -- Indirect call
         8   -> operator delete(void *)
         8   -> rtos::Mutex::~Mutex()
       8   Socket::~Socket()
         8   -- Indirect call
         8   -> rtos::Mutex::~Mutex()
       0   UDPSocket::UDPSocket()
         8   -> Socket::subobject Socket()
         8   -> rtos::EventFlags::EventFlags()
       8   UDPSocket::deleter ~UDPSocket()
         8   -> UDPSocket::~UDPSocket()
         8   -> operator delete(void *)
       8   UDPSocket::event()
         8   -- Indirect call
         8   -> rtos::EventFlags::set(unsigned int)
       0   UDPSocket::get_proto()
      40   UDPSocket::recvfrom(SocketAddress *, void *, nsapi_size_t)
        40   -- Indirect call
        40   -> rtos::EventFlags::wait_any(unsigned int, unsigned int, bool)
        40   -> rtos::Mutex::lock(unsigned int)
        40   -> rtos::Mutex::unlock()
      40   UDPSocket::sendto(SocketAddress const &, void const *, nsapi_size_t)
        40   -- Indirect call
        40   -> rtos::EventFlags::wait_any(unsigned int, unsigned int, bool)
        40   -> rtos::Mutex::lock(unsigned int)
        40   -> rtos::Mutex::unlock()
     124   UDPSocket::sendto(char const *, std::uint16_t, void const *, nsapi_size_t)
       112   -- Indirect call
       112   -> SocketAddress::SocketAddress(nsapi_addr, std::uint16_t)
       112   -> SocketAddress::set_port(std::uint16_t)
       112   -> UDPSocket::sendto(SocketAddress const &, void const *, nsapi_size_t)
       112   -> __aeabi_memclr4
       124   -> __aeabi_memcpy4
       8   UDPSocket::subobject UDPSocket()
         8   -> Socket::subobject Socket()
         8   -> rtos::EventFlags::EventFlags()
       8   UDPSocket::subobject ~UDPSocket()
         8   -- Indirect call
         8   -> Socket::close()
         8   -> rtos::EventFlags::~EventFlags()
         8   -> rtos::Mutex::~Mutex()
       0   UDPSocket::~UDPSocket()
         8   -- Indirect call
         8   -> Socket::close()
         8   -> rtos::EventFlags::~EventFlags()
         8   -> rtos::Mutex::~Mutex()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
      64  ?Subroutine0
      26  ?Subroutine1
      14  ?Subroutine2
      56  Socket::deleter ~Socket()
      52  Socket::~Socket()
       2  UDPSocket::UDPSocket()
      16  UDPSocket::deleter ~UDPSocket()
      42  UDPSocket::event()
       4  UDPSocket::get_proto()
     112  UDPSocket::recvfrom(SocketAddress *, void *, nsapi_size_t)
     104  UDPSocket::sendto(SocketAddress const &, void const *, nsapi_size_t)
      90  UDPSocket::sendto(char const *, std::uint16_t, void const *, nsapi_size_t)
       4  UDPSocket::subobject UDPSocket()
       4  UDPSocket::subobject ~UDPSocket()
       2  UDPSocket::~UDPSocket()
     128  -- Other

 
 128 bytes in section .rodata
 612 bytes in section .text
 
 504 bytes of CODE  memory (+ 108 bytes shared)
   0 bytes of CONST memory (+ 128 bytes shared)

Errors: none
Warnings: none
