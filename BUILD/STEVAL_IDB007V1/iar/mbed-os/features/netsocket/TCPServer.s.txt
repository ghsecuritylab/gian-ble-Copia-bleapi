###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       16/Mar/2018  12:16:41
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\netsocket\TCPServer.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DDEVICE_SERIAL=1 -DTARGET_CORTEX_M -DDEVICE_SPI=1 -DTARGET_LIKE_MBED
#        -DMBED_BUILD_TIMESTAMP=1521198946.13 -DARM_MATH_CM0 -DTARGET_RELEASE
#        -D__CORTEX_M0 -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0
#        -DTOOLCHAIN_object -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -f
#        .\BUILD\STEVAL_IDB007V1\iar\.includes_fc2e77952737cb4522ab0dffe8cfd8aa.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN
#        -I./mbed-os/features/frameworks
#        -I./mbed-os/features/frameworks/greentea-client
#        -I./mbed-os/features/frameworks/greentea-client/greentea-client
#        -I./mbed-os/features/frameworks/greentea-client/source
#        -I./mbed-os/features/frameworks/unity
#        -I./mbed-os/features/frameworks/unity/source
#        -I./mbed-os/features/frameworks/unity/unity
#        -I./mbed-os/features/frameworks/utest
#        -I./mbed-os/features/frameworks/utest/source
#        -I./mbed-os/features/frameworks/utest/utest
#        -I./mbed-os/features/mbedtls -I./mbed-os/features/mbedtls/importer
#        -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/features/netsocket
#        -I./mbed-os/features/netsocket/cellular
#        -I./mbed-os/features/netsocket/cellular/generic_modem_driver
#        -I./mbed-os/features/netsocket/cellular/utils
#        -I./mbed-os/features/storage -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\iar\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\TCPServer.d -l
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\TCPServer.s.txt
#        -o .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\TCPServer.o
#        .\mbed-os\features\netsocket\TCPServer.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\TCPServer.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\iar\mbed-os\features\netsocket\TCPServer.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia\mbed-os\features\netsocket\TCPServer.cpp
      1          /* Socket
      2           * Copyright (c) 2015 ARM Limited
      3           *
      4           * Licensed under the Apache License, Version 2.0 (the "License");
      5           * you may not use this file except in compliance with the License.
      6           * You may obtain a copy of the License at
      7           *
      8           *     http://www.apache.org/licenses/LICENSE-2.0
      9           *
     10           * Unless required by applicable law or agreed to in writing, software
     11           * distributed under the License is distributed on an "AS IS" BASIS,
     12           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     13           * See the License for the specific language governing permissions and
     14           * limitations under the License.
     15           */
     16          
     17          #include "TCPServer.h"

   \                                 In section .text, align 2
   \   __code __interwork __softfp mbed::Callback<void ()>::Callback(mbed::Callback<void ()> const &)
   \                     _ZN4mbed8CallbackIFvvEEC1ERKS2_: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x68E2             LDR      R2,[R4, #+12]
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xD001             BEQ      ??Callback_0
   \   0000000C   0x6852             LDR      R2,[R2, #+4]
   \   0000000E   0x4790             BLX      R2
   \                     ??Callback_0: (+1)
   \   00000010   0x68E0             LDR      R0,[R4, #+12]
   \   00000012   0x60E8             STR      R0,[R5, #+12]
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0xBD32             POP      {R1,R4,R5,PC}    ;; return

   \                                 In section .text, align 4
   \   __code __interwork __softfp mbed::Callback<void ()>::Callback<>(TCPSocket *, void (TCPSocket::*)())
   \                     _ZN4mbed8CallbackIFvvEEC1I9TCPSocketS4_EEPT0_MT_FvvE: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEE14method_contextI9TCPSocketMS4_FvvEEC1EPS4_S6_
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0x2300             MOVS     R3,#+0
   \   00000014   0xC40F             STM      R4!,{R0-R3}
   \   00000016   0x3C10             SUBS     R4,R4,#+16
   \   00000018   0xD003             BEQ      ??Callback_1
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0xC80E             LDM      R0!,{R1-R3}
   \   0000001E   0xC40E             STM      R4!,{R1-R3}
   \   00000020   0x3C0C             SUBS     R4,R4,#+12
   \                     ??Callback_1: (+1)
   \   00000022   0x4802             LDR      R0,??Callback_2
   \   00000024   0x60E0             STR      R0,[R4, #+12]
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0xB004             ADD      SP,SP,#+16
   \   0000002A   0xBD10             POP      {R4,PC}          ;; return
   \                     ??Callback_2:
   \   0000002C   0x........         DC32     _ZZN4mbed8CallbackIFvvEE8generateINS2_14method_contextI9TCPSocketMS5_FvvEEEEEvRKT_E3ops

   \                                 In section .text, align 4
   \   __code __interwork __softfp mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
   \                     _ZN4mbed8CallbackIFvvEEC1IvvEEPFvPT_EPT0_: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0xC078             STM      R0!,{R3-R6}
   \   0000000C   0x3810             SUBS     R0,R0,#+16
   \   0000000E   0xD001             BEQ      ??Callback_3
   \   00000010   0x6001             STR      R1,[R0, #+0]
   \   00000012   0x6042             STR      R2,[R0, #+4]
   \                     ??Callback_3: (+1)
   \   00000014   0x4901             LDR      R1,??Callback_4
   \   00000016   0x60C1             STR      R1,[R0, #+12]
   \   00000018   0xBC70             POP      {R4-R6}
   \   0000001A   0x4770             BX       LR               ;; return
   \                     ??Callback_4:
   \   0000001C   0x........         DC32     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops

   \                                 In section .text, align 4
   \   __interwork __softfp void mbed::Callback<void ()>::thunk(void *)
   \                     _ZN4mbed8CallbackIFvvEE5thunkEPv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x68E0             LDR      R0,[R4, #+12]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD105             BNE      ??thunk_0
   \   0000000A   0x2284             MOVS     R2,#+132
   \   0000000C   0x0092             LSLS     R2,R2,#+2        ;; #+528
   \   0000000E   0x4904             LDR      R1,??thunk_1
   \   00000010   0x4804             LDR      R0,??thunk_1+0x4
   \   00000012   0x.... 0x....      BL       mbed_assert_internal
   \                     ??thunk_0: (+1)
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x68E1             LDR      R1,[R4, #+12]
   \   0000001A   0x6809             LDR      R1,[R1, #+0]
   \   0000001C   0x4788             BLX      R1
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
   \                     ??thunk_1:
   \   00000020   0x........         DC32     _ZZNK4mbed8CallbackIFvvEE4callEvEs_0
   \   00000024   0x........         DC32     _ZZNK4mbed8CallbackIFvvEE4callEvEs

   \                                 In section .rodata, align 4
   \   __absolute mbed::Callback<void ()>::ops const mbed::Callback<void ()>::generate<>(mbed::Callback<void ()>::method_context<TCPSocket, void (TCPSocket::*)()> const &)::ops
   \                     _ZZN4mbed8CallbackIFvvEE8generateINS2_14method_contextI9TCPSocketMS5_FvvEEEEEvRKT_E3ops:
   \   00000000   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI9TCPSocketMS5_FvvEEEEEvPKv
   \   00000004   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI9TCPSocketMS5_FvvEEEEEvPvPKv
   \   00000008   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI9TCPSocketMS5_FvvEEEEEvPv

   \                                 In section .rodata, align 4
   \   __absolute mbed::Callback<void ()>::ops const mbed::Callback<void ()>::generate<>(mbed::Callback<void ()>::function_context<void (*)(void *), void> const &)::ops
   \                     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops:
   \   00000000   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv
   \   00000004   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv
   \   00000008   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::method_context<TCPSocket, void (TCPSocket::*)()>>(void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI9TCPSocketMS5_FvvEEEEEvPKv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0x684A             LDR      R2,[R1, #+4]
   \   00000006   0x6888             LDR      R0,[R1, #+8]
   \   00000008   0x1053             ASRS     R3,R2,#+1
   \   0000000A   0x18C0             ADDS     R0,R0,R3
   \   0000000C   0x07D2             LSLS     R2,R2,#+31
   \   0000000E   0xD401             BMI      ??function_call_0
   \   00000010   0x6809             LDR      R1,[R1, #+0]
   \   00000012   0xE002             B        ??function_call_1
   \                     ??function_call_0: (+1)
   \   00000014   0x6802             LDR      R2,[R0, #+0]
   \   00000016   0x6809             LDR      R1,[R1, #+0]
   \   00000018   0x5851             LDR      R1,[R2, R1]
   \                     ??function_call_1: (+1)
   \   0000001A   0x4788             BLX      R1
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0x6848             LDR      R0,[R1, #+4]
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x4788             BLX      R1
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::method_context<TCPSocket, void (TCPSocket::*)()>>(void *, void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI9TCPSocketMS5_FvvEEEEEvPvPKv: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD100             BNE      ??function_move_0
   \   00000004   0x4770             BX       LR
   \                     ??function_move_0: (+1)
   \   00000006   0xB410             PUSH     {R4}
   \   00000008   0xC91C             LDM      R1!,{R2-R4}
   \   0000000A   0xC01C             STM      R0!,{R2-R4}
   \   0000000C   0xBC10             POP      {R4}
   \   0000000E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??function_move_1
   \   00000004   0xC90C             LDM      R1!,{R2,R3}
   \   00000006   0xC00C             STM      R0!,{R2,R3}
   \                     ??function_move_1: (+1)
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::method_context<TCPSocket, void (TCPSocket::*)()>>(void *)
   \                     _ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI9TCPSocketMS5_FvvEEEEEvPv: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
   \                     _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __code __interwork __softfp mbed::Callback<void ()>::method_context<TCPSocket, void (TCPSocket::*)()>::method_context(TCPSocket *, void (TCPSocket::*)())
   \                     _ZN4mbed8CallbackIFvvEE14method_contextI9TCPSocketMS4_FvvEEC1EPS4_S6_: (+1)
   \   00000000   0xC00C             STM      R0!,{R2,R3}
   \   00000002   0x3808             SUBS     R0,R0,#+8
   \   00000004   0x6081             STR      R1,[R0, #+8]
   \   00000006   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::callback<>(void (*)(void *), void *)
   \                     _ZN4mbed8callbackIvvvEENS_8CallbackIFT1_vEEEPFS2_PT_EPT0_: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEEC1IvvEEPFvPT_EPT0_
   \   00000006   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4
   \   __code __interwork __softfp Socket::~Socket()
   \                     _ZN6SocketD1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x480A             LDR      R0,`?~Socket_0`
   \   00000006   0x6020             STR      R0,[R4, #+0]
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x3030             ADDS     R0,R0,#+48
   \   0000000C   0x.... 0x....      BL       _ZN4rtos5MutexD1Ev
   \   00000010   0x6AE1             LDR      R1,[R4, #+44]
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xD003             BEQ      `?~Socket_1`
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x3020             ADDS     R0,R0,#+32
   \   0000001A   0x6889             LDR      R1,[R1, #+8]
   \   0000001C   0x4788             BLX      R1
   \                     `?~Socket_1`: (+1)
   \   0000001E   0x69E1             LDR      R1,[R4, #+28]
   \   00000020   0x2900             CMP      R1,#+0
   \   00000022   0xD003             BEQ      `?~Socket_2`
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x3010             ADDS     R0,R0,#+16
   \   00000028   0x6889             LDR      R1,[R1, #+8]
   \   0000002A   0x4788             BLX      R1
   \                     `?~Socket_2`: (+1)
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
   \                     `?~Socket_0`:
   \   00000030   0x........         DC32     _ZTV6Socket+0x8

   \                                 In section .text, align 4
   \   __code __interwork __softfp Socket::deleter ~Socket()
   \                     _ZN6SocketD0Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x480B             LDR      R0,`??deleter ~Socket_0`
   \   00000006   0x6020             STR      R0,[R4, #+0]
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x3030             ADDS     R0,R0,#+48
   \   0000000C   0x.... 0x....      BL       _ZN4rtos5MutexD1Ev
   \   00000010   0x6AE1             LDR      R1,[R4, #+44]
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xD003             BEQ      `??deleter ~Socket_1`
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x3020             ADDS     R0,R0,#+32
   \   0000001A   0x6889             LDR      R1,[R1, #+8]
   \   0000001C   0x4788             BLX      R1
   \                     `??deleter ~Socket_1`: (+1)
   \   0000001E   0x69E1             LDR      R1,[R4, #+28]
   \   00000020   0x2900             CMP      R1,#+0
   \   00000022   0xD003             BEQ      `??deleter ~Socket_2`
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x3010             ADDS     R0,R0,#+16
   \   00000028   0x6889             LDR      R1,[R1, #+8]
   \   0000002A   0x4788             BLX      R1
   \                     `??deleter ~Socket_2`: (+1)
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x.... 0x....      BL       _ZdlPv
   \   00000032   0xBD10             POP      {R4,PC}          ;; return
   \                     `??deleter ~Socket_0`:
   \   00000034   0x........         DC32     _ZTV6Socket+0x8
     18          #include "mbed.h"
     19          

   \                                 In section .text, align 2, keep-with-next
     20          TCPServer::TCPServer()
   \                     _ZN9TCPServerC1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002                      REQUIRE ?Subroutine0
   \   00000002                      ;; // Fall through to label ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x0004             MOVS     R4,R0
     21              : _pending(0), _accept_sem(0)
     22          {
   \   00000002   0x.... 0x....      BL       _ZN6SocketC2Ev
   \   00000006   0x....             LDR      R0,??DataTable4
   \   00000008   0x6020             STR      R0,[R4, #+0]
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x6560             STR      R0,[R4, #+84]
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x3058             ADDS     R0,R0,#+88
   \   00000014   0x.... 0x....      BL       _ZN4rtos9SemaphoreC1Ei
     23          }
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
     24          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp TCPServer::deleter ~TCPServer()
   \                     _ZN9TCPServerD0Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x.... 0x....      BL       _ZN9TCPServerD1Ev
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       _ZdlPv
   \   0000000E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp TCPServer::subobject ~TCPServer()
   \                     _ZN9TCPServerD2Ev: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZN9TCPServerD1Ev
   \   00000006   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     25          TCPServer::~TCPServer()
     26          {
   \                     _ZN9TCPServerD1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x....             LDR      R0,??DataTable4
   \   00000006   0x6020             STR      R0,[R4, #+0]
     27              close();
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       _ZN6Socket5closeEv
     28          }
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x3058             ADDS     R0,R0,#+88
   \   00000012   0x.... 0x....      BL       _ZN4rtos9SemaphoreD1Ev
   \   00000016   0x....             LDR      R0,??DataTable4_1
   \   00000018   0x6020             STR      R0,[R4, #+0]
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x3030             ADDS     R0,R0,#+48
   \   0000001E   0x.... 0x....      BL       _ZN4rtos5MutexD1Ev
   \   00000022   0x6AE1             LDR      R1,[R4, #+44]
   \   00000024   0x2900             CMP      R1,#+0
   \   00000026   0xD003             BEQ      `?~TCPServer_0`
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x3020             ADDS     R0,R0,#+32
   \   0000002C   0x6889             LDR      R1,[R1, #+8]
   \   0000002E   0x4788             BLX      R1
   \                     `?~TCPServer_0`: (+1)
   \   00000030   0x69E1             LDR      R1,[R4, #+28]
   \   00000032   0x2900             CMP      R1,#+0
   \   00000034   0xD003             BEQ      `?~TCPServer_1`
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0x3010             ADDS     R0,R0,#+16
   \   0000003A   0x6889             LDR      R1,[R1, #+8]
   \   0000003C   0x4788             BLX      R1
   \                     `?~TCPServer_1`: (+1)
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0xBD10             POP      {R4,PC}          ;; return
     29          

   \                                 In section .text, align 2, keep-with-next
     30          nsapi_protocol_t TCPServer::get_proto()
     31          {
     32              return NSAPI_TCP;
   \                     _ZN9TCPServer9get_protoEv: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
     33          }
     34          

   \                                 In section .text, align 2, keep-with-next
     35          nsapi_error_t TCPServer::listen(int backlog)
     36          {
   \                     _ZN9TCPServer6listenEi: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     37              _lock.lock();
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x43C9             MVNS     R1,R1            ;; #-1
   \   0000000A   0x3030             ADDS     R0,R0,#+48
   \   0000000C   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
     38              nsapi_error_t ret;
     39          
     40              if (!_socket) {
   \   00000010   0x68A1             LDR      R1,[R4, #+8]
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xD101             BNE      ??listen_0
     41                  ret = NSAPI_ERROR_NO_SOCKET;
   \   00000016   0x....             LDR      R5,??DataTable4_2  ;; 0xfffff443
   \   00000018   0xE005             B        ??listen_1
     42              } else {
     43                  ret = _stack->socket_listen(_socket, backlog);
   \                     ??listen_0: (+1)
   \   0000001A   0x6860             LDR      R0,[R4, #+4]
   \   0000001C   0x002A             MOVS     R2,R5
   \   0000001E   0x6803             LDR      R3,[R0, #+0]
   \   00000020   0x6A9B             LDR      R3,[R3, #+40]
   \   00000022   0x4798             BLX      R3
   \   00000024   0x0005             MOVS     R5,R0
     44              }
     45          
     46              _lock.unlock();
   \                     ??listen_1: (+1)
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x3030             ADDS     R0,R0,#+48
   \   0000002A   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
     47              return ret;
   \   0000002E   0x0028             MOVS     R0,R5
   \   00000030   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     48          }
     49          

   \                                 In section .text, align 4, keep-with-next
     50          nsapi_error_t TCPServer::accept(TCPSocket *connection, SocketAddress *address)
     51          {
   \                     _ZN9TCPServer6acceptEP9TCPSocketP13SocketAddress: (+1)
   \   00000000   0xB5F4             PUSH     {R2,R4-R7,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000F             MOVS     R7,R1
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x43C9             MVNS     R1,R1            ;; #-1
   \   0000000C   0x3030             ADDS     R0,R0,#+48
     52              _lock.lock();
   \   0000000E   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
     53              nsapi_error_t ret;
     54          
     55              while (true) {
     56                  if (!_socket) {
   \                     ??accept_0: (+1)
   \   00000012   0x68A1             LDR      R1,[R4, #+8]
   \   00000014   0x2900             CMP      R1,#+0
   \   00000016   0xD101             BNE      ??accept_1
     57                      ret = NSAPI_ERROR_NO_SOCKET;
   \   00000018   0x....             LDR      R6,??DataTable4_2  ;; 0xfffff443
     58                      break;
   \   0000001A   0xE05B             B        ??accept_2
     59                  } 
     60          
     61                  _pending = 0;
   \                     ??accept_1: (+1)
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x6560             STR      R0,[R4, #+84]
     62                  void *socket;
     63                  ret = _stack->socket_accept(_socket, &socket, address);
   \   00000020   0x6860             LDR      R0,[R4, #+4]
   \   00000022   0x9B06             LDR      R3,[SP, #+24]
   \   00000024   0x466A             MOV      R2,SP
   \   00000026   0x6805             LDR      R5,[R0, #+0]
   \   00000028   0x6B2D             LDR      R5,[R5, #+48]
   \   0000002A   0x47A8             BLX      R5
   \   0000002C   0x0006             MOVS     R6,R0
     64          
     65                  if (0 == ret) {
   \   0000002E   0xD13C             BNE      ??accept_3
     66                      connection->_lock.lock();
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000034   0x0038             MOVS     R0,R7
   \   00000036   0x3030             ADDS     R0,R0,#+48
   \   00000038   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
     67          
     68                      if (connection->_socket) {
   \   0000003C   0x68B8             LDR      R0,[R7, #+8]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD002             BEQ      ??accept_4
     69                          connection->close();
   \   00000042   0x0038             MOVS     R0,R7
   \   00000044   0x.... 0x....      BL       _ZN6Socket5closeEv
     70                      }
     71          
     72                      connection->_stack = _stack;
   \                     ??accept_4: (+1)
   \   00000048   0x6860             LDR      R0,[R4, #+4]
   \   0000004A   0x6078             STR      R0,[R7, #+4]
     73                      connection->_socket = socket;
   \   0000004C   0x9800             LDR      R0,[SP, #+0]
   \   0000004E   0x60B8             STR      R0,[R7, #+8]
     74                      connection->_event = Callback<void()>(connection, &TCPSocket::event);
   \   00000050   0x....             ADR.N    R0,?_0
   \   00000052   0xC80C             LDM      R0!,{R2,R3}
   \   00000054   0x0039             MOVS     R1,R7
   \   00000056   0xA801             ADD      R0,SP,#+4
   \   00000058   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEEC1I9TCPSocketS4_EEPT0_MT_FvvE
   \   0000005C   0x0038             MOVS     R0,R7
   \   0000005E   0x3010             ADDS     R0,R0,#+16
   \   00000060   0xA901             ADD      R1,SP,#+4
   \   00000062   0x4288             CMP      R0,R1
   \   00000064   0xD00E             BEQ      ??accept_5
   \   00000066   0x69F9             LDR      R1,[R7, #+28]
   \   00000068   0x2900             CMP      R1,#+0
   \   0000006A   0xD003             BEQ      ??accept_6
   \   0000006C   0x0038             MOVS     R0,R7
   \   0000006E   0x3010             ADDS     R0,R0,#+16
   \   00000070   0x6889             LDR      R1,[R1, #+8]
   \   00000072   0x4788             BLX      R1
   \                     ??accept_6: (+1)
   \   00000074   0x0038             MOVS     R0,R7
   \   00000076   0x3010             ADDS     R0,R0,#+16
   \   00000078   0xD004             BEQ      ??accept_5
   \   0000007A   0xA901             ADD      R1,SP,#+4
   \   0000007C   0x0038             MOVS     R0,R7
   \   0000007E   0x3010             ADDS     R0,R0,#+16
   \   00000080   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEEC1ERKS2_
   \                     ??accept_5: (+1)
   \   00000084   0x9904             LDR      R1,[SP, #+16]
   \   00000086   0x2900             CMP      R1,#+0
   \   00000088   0xD002             BEQ      ??accept_7
   \   0000008A   0xA801             ADD      R0,SP,#+4
   \   0000008C   0x6889             LDR      R1,[R1, #+8]
   \   0000008E   0x4788             BLX      R1
     75                      _stack->socket_attach(socket, &Callback<void()>::thunk, &connection->_event);
   \                     ??accept_7: (+1)
   \   00000090   0x6860             LDR      R0,[R4, #+4]
   \   00000092   0x003B             MOVS     R3,R7
   \   00000094   0x3310             ADDS     R3,R3,#+16
   \   00000096   0x....             LDR      R2,??DataTable4_3
   \   00000098   0x9900             LDR      R1,[SP, #+0]
   \   0000009A   0x6805             LDR      R5,[R0, #+0]
   \   0000009C   0x6C6D             LDR      R5,[R5, #+68]
   \   0000009E   0x47A8             BLX      R5
     76          
     77                      connection->_lock.unlock();
   \   000000A0   0x0038             MOVS     R0,R7
   \   000000A2   0x3030             ADDS     R0,R0,#+48
   \   000000A4   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
     78                      break;
   \   000000A8   0xE014             B        ??accept_2
     79                  } else if (NSAPI_ERROR_WOULD_BLOCK != ret) {
   \                     ??accept_3: (+1)
   \   000000AA   0x....             LDR      R0,??DataTable4_4  ;; 0xfffff447
   \   000000AC   0x4286             CMP      R6,R0
   \   000000AE   0xD111             BNE      ??accept_2
     80                      break;
     81                  } else {
     82                      int32_t count;
     83          
     84                      // Release lock before blocking so other threads
     85                      // accessing this object aren't blocked
     86                      _lock.unlock();
   \   000000B0   0x0020             MOVS     R0,R4
   \   000000B2   0x3030             ADDS     R0,R0,#+48
   \   000000B4   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
     87                      count = _accept_sem.wait(_timeout);
   \   000000B8   0x68E1             LDR      R1,[R4, #+12]
   \   000000BA   0x0020             MOVS     R0,R4
   \   000000BC   0x3058             ADDS     R0,R0,#+88
   \   000000BE   0x.... 0x....      BL       _ZN4rtos9Semaphore4waitEj
   \   000000C2   0x0005             MOVS     R5,R0
     88                      _lock.lock();
   \   000000C4   0x2100             MOVS     R1,#+0
   \   000000C6   0x43C9             MVNS     R1,R1            ;; #-1
   \   000000C8   0x0020             MOVS     R0,R4
   \   000000CA   0x3030             ADDS     R0,R0,#+48
   \   000000CC   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
     89          
     90                      if (count < 1) {
   \   000000D0   0x2D01             CMP      R5,#+1
   \   000000D2   0xDA9E             BGE      ??accept_0
     91                          // Semaphore wait timed out so break out and return
     92                          ret = NSAPI_ERROR_WOULD_BLOCK;
     93                          break;
     94                      }
     95                  }
     96              }
     97          
     98              _lock.unlock();
   \                     ??accept_2: (+1)
   \   000000D4   0x0020             MOVS     R0,R4
   \   000000D6   0x3030             ADDS     R0,R0,#+48
   \   000000D8   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
     99              return ret;
   \   000000DC   0x0030             MOVS     R0,R6
   \   000000DE   0xB007             ADD      SP,SP,#+28
   \   000000E0   0xBDF0             POP      {R4-R7,PC}       ;; return
    100          }
    101          

   \                                 In section .text, align 2, keep-with-next
    102          void TCPServer::event()
    103          {
   \                     _ZN9TCPServer5eventEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    104              int32_t acount = _accept_sem.wait(0);
    105              if (acount <= 1) {
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x3058             ADDS     R0,R0,#+88
   \   00000008   0x.... 0x....      BL       _ZN4rtos9Semaphore4waitEj
   \   0000000C   0x2802             CMP      R0,#+2
   \   0000000E   0xDA03             BGE      ??event_0
    106                  _accept_sem.release();
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x3058             ADDS     R0,R0,#+88
   \   00000014   0x.... 0x....      BL       _ZN4rtos9Semaphore7releaseEv
    107              }
    108          
    109              _pending += 1;
   \                     ??event_0: (+1)
   \   00000018   0x6D60             LDR      R0,[R4, #+84]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x6560             STR      R0,[R4, #+84]
    110              if (_callback && _pending == 1) {
   \   0000001E   0x6AE0             LDR      R0,[R4, #+44]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD007             BEQ      ??event_1
   \   00000024   0x6D60             LDR      R0,[R4, #+84]
   \   00000026   0x2801             CMP      R0,#+1
   \   00000028   0xD104             BNE      ??event_1
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x3020             ADDS     R0,R0,#+32
   \   0000002E   0x6AE1             LDR      R1,[R4, #+44]
   \   00000030   0x6809             LDR      R1,[R1, #+0]
   \   00000032   0x4788             BLX      R1
    111                  _callback();
    112              }
    113          }
   \                     ??event_1: (+1)
   \   00000034   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp TCPServer::subobject TCPServer()
   \                     _ZN9TCPServerC2Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             B.N      ?Subroutine0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     _ZTV9TCPServer+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     _ZTV6Socket+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0xFFFFF443         DC32     0xfffff443

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     _ZN4mbed8CallbackIFvvEE5thunkEPv

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0xFFFFF447         DC32     0xfffff447

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Socket::deleter ~Socket()
         8   -- Indirect call
         8   -> operator delete(void *)
         8   -> rtos::Mutex::~Mutex()
       8   Socket::~Socket()
         8   -- Indirect call
         8   -> rtos::Mutex::~Mutex()
       0   TCPServer::TCPServer()
         8   -> Socket::subobject Socket()
         8   -> rtos::Semaphore::Semaphore(signed int)
      48   TCPServer::accept(TCPSocket *, SocketAddress *)
        48   -- Indirect call
        48   -> Socket::close()
        48   -> mbed::Callback<void ()>::Callback(mbed::Callback<void ()> const &)
        48   -> mbed::Callback<void ()>::Callback<>(TCPSocket *, void (TCPSocket::*)())
        48   -> rtos::Mutex::lock(unsigned int)
        48   -> rtos::Mutex::unlock()
        48   -> rtos::Semaphore::wait(unsigned int)
       8   TCPServer::deleter ~TCPServer()
         8   -> TCPServer::~TCPServer()
         8   -> operator delete(void *)
       8   TCPServer::event()
         8   -- Indirect call
         8   -> rtos::Semaphore::release()
         8   -> rtos::Semaphore::wait(unsigned int)
       0   TCPServer::get_proto()
      16   TCPServer::listen(int)
        16   -- Indirect call
        16   -> rtos::Mutex::lock(unsigned int)
        16   -> rtos::Mutex::unlock()
       8   TCPServer::subobject TCPServer()
         8   -> Socket::subobject Socket()
         8   -> rtos::Semaphore::Semaphore(signed int)
       8   TCPServer::subobject ~TCPServer()
         8   -> TCPServer::~TCPServer()
       8   TCPServer::~TCPServer()
         8   -- Indirect call
         8   -> Socket::close()
         8   -> rtos::Mutex::~Mutex()
         8   -> rtos::Semaphore::~Semaphore()
      16   mbed::Callback<void ()>::Callback(mbed::Callback<void ()> const &)
        16   -- Indirect call
      24   mbed::Callback<void ()>::Callback<>(TCPSocket *, void (TCPSocket::*)())
        24   -> mbed::Callback<void ()>::method_context<TCPSocket, void (TCPSocket::*)()>::method_context(TCPSocket *, void (TCPSocket::*)())
      12   mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
       8   mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
         8   -- Indirect call
       8   mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::method_context<TCPSocket, void (TCPSocket::*)()>>(void const *)
         8   -- Indirect call
       0   mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
       0   mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::method_context<TCPSocket, void (TCPSocket::*)()>>(void *)
       0   mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
       4   mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::method_context<TCPSocket, void (TCPSocket::*)()>>(void *, void const *)
       0   mbed::Callback<void ()>::method_context<TCPSocket, void (TCPSocket::*)()>::method_context(TCPSocket *, void (TCPSocket::*)())
       8   mbed::Callback<void ()>::thunk(void *)
         8   -- Indirect call
         8   -> mbed_assert_internal
       8   mbed::callback<>(void (*)(void *), void *)
         8   -> mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
      28  ?Subroutine0
      56  Socket::deleter ~Socket()
      52  Socket::~Socket()
       2  TCPServer::TCPServer()
     226  TCPServer::accept(TCPSocket *, SocketAddress *)
      16  TCPServer::deleter ~TCPServer()
      54  TCPServer::event()
       4  TCPServer::get_proto()
      50  TCPServer::listen(int)
       4  TCPServer::subobject TCPServer()
       8  TCPServer::subobject ~TCPServer()
      66  TCPServer::~TCPServer()
      24  mbed::Callback<void ()>::Callback(mbed::Callback<void ()> const &)
      48  mbed::Callback<void ()>::Callback<>(TCPSocket *, void (TCPSocket::*)())
      32  mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
      12  mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
      30  mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::method_context<TCPSocket, void (TCPSocket::*)()>>(void const *)
       2  mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
       2  mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::method_context<TCPSocket, void (TCPSocket::*)()>>(void *)
      10  mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
      16  mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::method_context<TCPSocket, void (TCPSocket::*)()>>(void *, void const *)
       8  mbed::Callback<void ()>::method_context<TCPSocket, void (TCPSocket::*)()>::method_context(TCPSocket *, void (TCPSocket::*)())
      40  mbed::Callback<void ()>::thunk(void *)
       8  mbed::callback<>(void (*)(void *), void *)
      12  ops
      12  ops
     428  -- Other

 
 444 bytes in section .rodata
 826 bytes in section .text
 
 486 bytes of CODE  memory (+ 340 bytes shared)
   0 bytes of CONST memory (+ 444 bytes shared)

Errors: none
Warnings: none
