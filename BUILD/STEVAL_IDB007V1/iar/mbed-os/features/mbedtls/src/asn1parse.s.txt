###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:21
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\mbedtls\src\asn1parse.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\asn1parse.d
#        -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\asn1parse.s.txt
#        -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\asn1parse.o
#        .\mbed-os\features\mbedtls\src\asn1parse.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\asn1parse.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\asn1parse.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\mbedtls\src\asn1parse.c
      1          /*
      2           *  Generic ASN.1 parsing
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          #if !defined(MBEDTLS_CONFIG_FILE)
     23          #include "mbedtls/config.h"
     24          #else
     25          #include MBEDTLS_CONFIG_FILE
     26          #endif
     27          
     28          #if defined(MBEDTLS_ASN1_PARSE_C)
     29          
     30          #include "mbedtls/asn1.h"
     31          
     32          #include <string.h>
     33          
     34          #if defined(MBEDTLS_BIGNUM_C)
     35          #include "mbedtls/bignum.h"
     36          #endif
     37          
     38          #if defined(MBEDTLS_PLATFORM_C)
     39          #include "mbedtls/platform.h"
     40          #else
     41          #include <stdlib.h>
     42          #define mbedtls_calloc    calloc
     43          #define mbedtls_free       free
     44          #endif
     45          
     46          /* Implementation that should never be optimized out by the compiler */
     47          static void mbedtls_zeroize( void *v, size_t n ) {
     48              volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
     49          }
     50          
     51          /*
     52           * ASN.1 DER decoding routines
     53           */

   \                                 In section .text, align 2, keep-with-next
     54          int mbedtls_asn1_get_len( unsigned char **p,
     55                            const unsigned char *end,
     56                            size_t *len )
     57          {
   \                     mbedtls_asn1_get_len: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
     58              if( ( end - *p ) < 1 )
   \   00000002   0x6803             LDR      R3,[R0, #+0]
   \   00000004   0x1ACC             SUBS     R4,R1,R3
   \   00000006   0x2C01             CMP      R4,#+1
   \   00000008   0xDA01             BGE      ??mbedtls_asn1_get_len_0
     59                  return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   \   0000000A   0x205F             MOVS     R0,#+95
   \   0000000C   0xE04C             B.N      ??mbedtls_asn1_get_len_1
     60          
     61              if( ( **p & 0x80 ) == 0 )
   \                     ??mbedtls_asn1_get_len_0: (+1)
   \   0000000E   0x781D             LDRB     R5,[R3, #+0]
   \   00000010   0x062E             LSLS     R6,R5,#+24
   \   00000012   0xD40A             BMI      ??mbedtls_asn1_get_len_2
     62                  *len = *(*p)++;
   \   00000014   0x1C5C             ADDS     R4,R3,#+1
   \   00000016   0x6004             STR      R4,[R0, #+0]
   \   00000018   0x781B             LDRB     R3,[R3, #+0]
   \   0000001A   0x6013             STR      R3,[R2, #+0]
     63              else
     64              {
     65                  switch( **p & 0x7F )
     66                  {
     67                  case 1:
     68                      if( ( end - *p ) < 2 )
     69                          return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
     70          
     71                      *len = (*p)[1];
     72                      (*p) += 2;
     73                      break;
     74          
     75                  case 2:
     76                      if( ( end - *p ) < 3 )
     77                          return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
     78          
     79                      *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
     80                      (*p) += 3;
     81                      break;
     82          
     83                  case 3:
     84                      if( ( end - *p ) < 4 )
     85                          return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
     86          
     87                      *len = ( (size_t)(*p)[1] << 16 ) |
     88                             ( (size_t)(*p)[2] << 8  ) | (*p)[3];
     89                      (*p) += 4;
     90                      break;
     91          
     92                  case 4:
     93                      if( ( end - *p ) < 5 )
     94                          return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
     95          
     96                      *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
     97                             ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
     98                      (*p) += 5;
     99                      break;
    100          
    101                  default:
    102                      return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    103                  }
    104              }
    105          
    106              if( *len > (size_t) ( end - *p ) )
   \                     ??mbedtls_asn1_get_len_3: (+1)
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x1A08             SUBS     R0,R1,R0
   \   00000020   0x6811             LDR      R1,[R2, #+0]
   \   00000022   0x4288             CMP      R0,R1
   \   00000024   0xD242             BCS      ??mbedtls_asn1_get_len_4
    107                  return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   \   00000026   0x205F             MOVS     R0,#+95
   \   00000028   0xE03E             B.N      ??mbedtls_asn1_get_len_1
   \                     ??mbedtls_asn1_get_len_2: (+1)
   \   0000002A   0x066D             LSLS     R5,R5,#+25
   \   0000002C   0x0E6D             LSRS     R5,R5,#+25
   \   0000002E   0x2D01             CMP      R5,#+1
   \   00000030   0xD006             BEQ      ??mbedtls_asn1_get_len_5
   \   00000032   0xD338             BCC      ??mbedtls_asn1_get_len_6
   \   00000034   0x2D03             CMP      R5,#+3
   \   00000036   0xD017             BEQ      ??mbedtls_asn1_get_len_7
   \   00000038   0xD30B             BCC      ??mbedtls_asn1_get_len_8
   \   0000003A   0x2D04             CMP      R5,#+4
   \   0000003C   0xD022             BEQ      ??mbedtls_asn1_get_len_9
   \   0000003E   0xE032             B        ??mbedtls_asn1_get_len_6
   \                     ??mbedtls_asn1_get_len_5: (+1)
   \   00000040   0x2C02             CMP      R4,#+2
   \   00000042   0xDA01             BGE      ??mbedtls_asn1_get_len_10
   \   00000044   0x205F             MOVS     R0,#+95
   \   00000046   0xE02F             B.N      ??mbedtls_asn1_get_len_1
   \                     ??mbedtls_asn1_get_len_10: (+1)
   \   00000048   0x785C             LDRB     R4,[R3, #+1]
   \   0000004A   0x6014             STR      R4,[R2, #+0]
   \   0000004C   0x1C9B             ADDS     R3,R3,#+2
   \                     ??mbedtls_asn1_get_len_11: (+1)
   \   0000004E   0x6003             STR      R3,[R0, #+0]
   \   00000050   0xE7E4             B        ??mbedtls_asn1_get_len_3
   \                     ??mbedtls_asn1_get_len_8: (+1)
   \   00000052   0x2C03             CMP      R4,#+3
   \   00000054   0xDA01             BGE      ??mbedtls_asn1_get_len_12
   \   00000056   0x205F             MOVS     R0,#+95
   \   00000058   0xE026             B.N      ??mbedtls_asn1_get_len_1
   \                     ??mbedtls_asn1_get_len_12: (+1)
   \   0000005A   0x785C             LDRB     R4,[R3, #+1]
   \   0000005C   0x0224             LSLS     R4,R4,#+8
   \   0000005E   0x789D             LDRB     R5,[R3, #+2]
   \   00000060   0x4325             ORRS     R5,R5,R4
   \   00000062   0x6015             STR      R5,[R2, #+0]
   \   00000064   0x1CDB             ADDS     R3,R3,#+3
   \   00000066   0xE7F2             B.N      ??mbedtls_asn1_get_len_11
   \                     ??mbedtls_asn1_get_len_7: (+1)
   \   00000068   0x2C04             CMP      R4,#+4
   \   0000006A   0xDA01             BGE      ??mbedtls_asn1_get_len_13
   \   0000006C   0x205F             MOVS     R0,#+95
   \   0000006E   0xE01B             B.N      ??mbedtls_asn1_get_len_1
   \                     ??mbedtls_asn1_get_len_13: (+1)
   \   00000070   0x785C             LDRB     R4,[R3, #+1]
   \   00000072   0x0424             LSLS     R4,R4,#+16
   \   00000074   0x789D             LDRB     R5,[R3, #+2]
   \   00000076   0x022D             LSLS     R5,R5,#+8
   \   00000078   0x4325             ORRS     R5,R5,R4
   \   0000007A   0x78DC             LDRB     R4,[R3, #+3]
   \   0000007C   0x432C             ORRS     R4,R4,R5
   \   0000007E   0x6014             STR      R4,[R2, #+0]
   \   00000080   0x1D1B             ADDS     R3,R3,#+4
   \   00000082   0xE7E4             B.N      ??mbedtls_asn1_get_len_11
   \                     ??mbedtls_asn1_get_len_9: (+1)
   \   00000084   0x2C05             CMP      R4,#+5
   \   00000086   0xDA01             BGE      ??mbedtls_asn1_get_len_14
   \   00000088   0x205F             MOVS     R0,#+95
   \   0000008A   0xE00D             B.N      ??mbedtls_asn1_get_len_1
   \                     ??mbedtls_asn1_get_len_14: (+1)
   \   0000008C   0x785C             LDRB     R4,[R3, #+1]
   \   0000008E   0x0624             LSLS     R4,R4,#+24
   \   00000090   0x789D             LDRB     R5,[R3, #+2]
   \   00000092   0x042D             LSLS     R5,R5,#+16
   \   00000094   0x4325             ORRS     R5,R5,R4
   \   00000096   0x78DC             LDRB     R4,[R3, #+3]
   \   00000098   0x0224             LSLS     R4,R4,#+8
   \   0000009A   0x432C             ORRS     R4,R4,R5
   \   0000009C   0x791D             LDRB     R5,[R3, #+4]
   \   0000009E   0x4325             ORRS     R5,R5,R4
   \   000000A0   0x6015             STR      R5,[R2, #+0]
   \   000000A2   0x1D5B             ADDS     R3,R3,#+5
   \   000000A4   0xE7D3             B.N      ??mbedtls_asn1_get_len_11
   \                     ??mbedtls_asn1_get_len_6: (+1)
   \   000000A6   0x2063             MOVS     R0,#+99
   \                     ??mbedtls_asn1_get_len_1: (+1)
   \   000000A8   0x43C0             MVNS     R0,R0            ;; #-100
   \   000000AA   0xE000             B        ??mbedtls_asn1_get_len_15
    108          
    109              return( 0 );
   \                     ??mbedtls_asn1_get_len_4: (+1)
   \   000000AC   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_asn1_get_len_15: (+1)
   \   000000AE   0xBC70             POP      {R4-R6}
   \   000000B0   0x4770             BX       LR               ;; return
    110          }
    111          

   \                                 In section .text, align 2, keep-with-next
    112          int mbedtls_asn1_get_tag( unsigned char **p,
    113                            const unsigned char *end,
    114                            size_t *len, int tag )
    115          {
   \                     mbedtls_asn1_get_tag: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    116              if( ( end - *p ) < 1 )
   \   00000002   0x6804             LDR      R4,[R0, #+0]
   \   00000004   0x1B0D             SUBS     R5,R1,R4
   \   00000006   0x2D01             CMP      R5,#+1
   \   00000008   0xDA01             BGE      ??mbedtls_asn1_get_tag_0
    117                  return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   \   0000000A   0x205F             MOVS     R0,#+95
   \   0000000C   0xE003             B.N      ??mbedtls_asn1_get_tag_1
    118          
    119              if( **p != tag )
   \                     ??mbedtls_asn1_get_tag_0: (+1)
   \   0000000E   0x7825             LDRB     R5,[R4, #+0]
   \   00000010   0x429D             CMP      R5,R3
   \   00000012   0xD002             BEQ      ??mbedtls_asn1_get_tag_2
    120                  return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
   \   00000014   0x2061             MOVS     R0,#+97
   \                     ??mbedtls_asn1_get_tag_1: (+1)
   \   00000016   0x43C0             MVNS     R0,R0            ;; #-98
   \   00000018   0xBD32             POP      {R1,R4,R5,PC}
    121          
    122              (*p)++;
   \                     ??mbedtls_asn1_get_tag_2: (+1)
   \   0000001A   0x1C63             ADDS     R3,R4,#+1
   \   0000001C   0x6003             STR      R3,[R0, #+0]
    123          
    124              return( mbedtls_asn1_get_len( p, end, len ) );
   \   0000001E   0x.... 0x....      BL       mbedtls_asn1_get_len
   \   00000022   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    125          }
    126          

   \                                 In section .text, align 2, keep-with-next
    127          int mbedtls_asn1_get_bool( unsigned char **p,
    128                             const unsigned char *end,
    129                             int *val )
    130          {
   \                     mbedtls_asn1_get_bool: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0015             MOVS     R5,R2
    131              int ret;
    132              size_t len;
    133          
    134              if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
   \   00000006   0x2301             MOVS     R3,#+1
   \   00000008   0x466A             MOV      R2,SP
   \   0000000A   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD10F             BNE      ??mbedtls_asn1_get_bool_0
    135                  return( ret );
    136          
    137              if( len != 1 )
   \   00000012   0x9800             LDR      R0,[SP, #+0]
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD002             BEQ      ??mbedtls_asn1_get_bool_1
    138                  return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   \   00000018   0x2063             MOVS     R0,#+99
   \   0000001A   0x43C0             MVNS     R0,R0            ;; #-100
   \   0000001C   0xBD32             POP      {R1,R4,R5,PC}
    139          
    140              *val = ( **p != 0 ) ? 1 : 0;
   \                     ??mbedtls_asn1_get_bool_1: (+1)
   \   0000001E   0x6820             LDR      R0,[R4, #+0]
   \   00000020   0x7802             LDRB     R2,[R0, #+0]
   \   00000022   0x1E51             SUBS     R1,R2,#+1
   \   00000024   0x4189             SBCS     R1,R1,R1
   \   00000026   0x43C9             MVNS     R1,R1
   \   00000028   0x0FC9             LSRS     R1,R1,#+31
   \   0000002A   0x6029             STR      R1,[R5, #+0]
    141              (*p)++;
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \   0000002E   0x6020             STR      R0,[R4, #+0]
    142          
    143              return( 0 );
   \   00000030   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_asn1_get_bool_0: (+1)
   \   00000032   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    144          }
    145          

   \                                 In section .text, align 2, keep-with-next
    146          int mbedtls_asn1_get_int( unsigned char **p,
    147                            const unsigned char *end,
    148                            int *val )
    149          {
   \                     mbedtls_asn1_get_int: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0015             MOVS     R5,R2
    150              int ret;
    151              size_t len;
    152          
    153              if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   \   00000006   0x2302             MOVS     R3,#+2
   \   00000008   0x466A             MOV      R2,SP
   \   0000000A   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD11F             BNE      ??mbedtls_asn1_get_int_0
    154                  return( ret );
    155          
    156              if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
   \   00000012   0x9800             LDR      R0,[SP, #+0]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD005             BEQ      ??mbedtls_asn1_get_int_1
   \   00000018   0x2805             CMP      R0,#+5
   \   0000001A   0xD203             BCS      ??mbedtls_asn1_get_int_1
   \   0000001C   0x6820             LDR      R0,[R4, #+0]
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x0600             LSLS     R0,R0,#+24
   \   00000022   0xD502             BPL      ??mbedtls_asn1_get_int_2
    157                  return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   \                     ??mbedtls_asn1_get_int_1: (+1)
   \   00000024   0x2063             MOVS     R0,#+99
   \   00000026   0x43C0             MVNS     R0,R0            ;; #-100
   \   00000028   0xBD32             POP      {R1,R4,R5,PC}
    158          
    159              *val = 0;
   \                     ??mbedtls_asn1_get_int_2: (+1)
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x6028             STR      R0,[R5, #+0]
   \   0000002E   0xE009             B        ??mbedtls_asn1_get_int_3
    160          
    161              while( len-- > 0 )
   \                     ??mbedtls_asn1_get_int_4: (+1)
   \   00000030   0x1E40             SUBS     R0,R0,#+1
   \   00000032   0x9000             STR      R0,[SP, #+0]
    162              {
    163                  *val = ( *val << 8 ) | **p;
   \   00000034   0x6820             LDR      R0,[R4, #+0]
   \   00000036   0x6829             LDR      R1,[R5, #+0]
   \   00000038   0x0209             LSLS     R1,R1,#+8
   \   0000003A   0x7802             LDRB     R2,[R0, #+0]
   \   0000003C   0x430A             ORRS     R2,R2,R1
   \   0000003E   0x602A             STR      R2,[R5, #+0]
    164                  (*p)++;
   \   00000040   0x1C40             ADDS     R0,R0,#+1
   \   00000042   0x6020             STR      R0,[R4, #+0]
    165              }
   \                     ??mbedtls_asn1_get_int_3: (+1)
   \   00000044   0x9800             LDR      R0,[SP, #+0]
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD1F2             BNE      ??mbedtls_asn1_get_int_4
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x43C0             MVNS     R0,R0            ;; #-1
   \   0000004E   0x9000             STR      R0,[SP, #+0]
    166          
    167              return( 0 );
   \   00000050   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_asn1_get_int_0: (+1)
   \   00000052   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    168          }
    169          
    170          #if defined(MBEDTLS_BIGNUM_C)

   \                                 In section .text, align 2, keep-with-next
    171          int mbedtls_asn1_get_mpi( unsigned char **p,
    172                            const unsigned char *end,
    173                            mbedtls_mpi *X )
    174          {
   \                     mbedtls_asn1_get_mpi: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0015             MOVS     R5,R2
    175              int ret;
    176              size_t len;
    177          
    178              if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
   \   00000006   0x2302             MOVS     R3,#+2
   \   00000008   0x466A             MOV      R2,SP
   \   0000000A   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD108             BNE      ??mbedtls_asn1_get_mpi_0
    179                  return( ret );
    180          
    181              ret = mbedtls_mpi_read_binary( X, *p, len );
   \   00000012   0x9A00             LDR      R2,[SP, #+0]
   \   00000014   0x6821             LDR      R1,[R4, #+0]
   \   00000016   0x0028             MOVS     R0,R5
   \   00000018   0x.... 0x....      BL       mbedtls_mpi_read_binary
    182          
    183              *p += len;
   \   0000001C   0x6821             LDR      R1,[R4, #+0]
   \   0000001E   0x9A00             LDR      R2,[SP, #+0]
   \   00000020   0x1889             ADDS     R1,R1,R2
   \   00000022   0x6021             STR      R1,[R4, #+0]
    184          
    185              return( ret );
   \                     ??mbedtls_asn1_get_mpi_0: (+1)
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    186          }
    187          #endif /* MBEDTLS_BIGNUM_C */
    188          

   \                                 In section .text, align 2, keep-with-next
    189          int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
    190                                  mbedtls_asn1_bitstring *bs)
    191          {
   \                     mbedtls_asn1_get_bitstring: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x0015             MOVS     R5,R2
    192              int ret;
    193          
    194              /* Certificate type is a single byte bitstring */
    195              if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   \   00000008   0x6820             LDR      R0,[R4, #+0]
   \   0000000A   0x1A31             SUBS     R1,R6,R0
   \   0000000C   0x2901             CMP      R1,#+1
   \   0000000E   0xDA01             BGE      ??mbedtls_asn1_get_bitstring_0
   \   00000010   0x205F             MOVS     R0,#+95
   \   00000012   0xE024             B.N      ??mbedtls_asn1_get_bitstring_1
   \                     ??mbedtls_asn1_get_bitstring_0: (+1)
   \   00000014   0x7801             LDRB     R1,[R0, #+0]
   \   00000016   0x2903             CMP      R1,#+3
   \   00000018   0xD001             BEQ      ??mbedtls_asn1_get_bitstring_2
   \   0000001A   0x2061             MOVS     R0,#+97
   \   0000001C   0xE01F             B.N      ??mbedtls_asn1_get_bitstring_1
   \                     ??mbedtls_asn1_get_bitstring_2: (+1)
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \   00000020   0x6020             STR      R0,[R4, #+0]
   \   00000022   0x0031             MOVS     R1,R6
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       mbedtls_asn1_get_len
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD11A             BNE      ??mbedtls_asn1_get_bitstring_3
    196                  return( ret );
    197          
    198              /* Check length, subtract one for actual bit string length */
    199              if( bs->len < 1 )
   \   0000002E   0x6828             LDR      R0,[R5, #+0]
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD101             BNE      ??mbedtls_asn1_get_bitstring_4
    200                  return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   \   00000034   0x205F             MOVS     R0,#+95
   \   00000036   0xE012             B.N      ??mbedtls_asn1_get_bitstring_1
    201              bs->len -= 1;
   \                     ??mbedtls_asn1_get_bitstring_4: (+1)
   \   00000038   0x1E40             SUBS     R0,R0,#+1
   \   0000003A   0x6028             STR      R0,[R5, #+0]
    202          
    203              /* Get number of unused bits, ensure unused bits <= 7 */
    204              bs->unused_bits = **p;
   \   0000003C   0x6821             LDR      R1,[R4, #+0]
   \   0000003E   0x7809             LDRB     R1,[R1, #+0]
   \   00000040   0x7129             STRB     R1,[R5, #+4]
    205              if( bs->unused_bits > 7 )
   \   00000042   0x2908             CMP      R1,#+8
   \   00000044   0xDB01             BLT      ??mbedtls_asn1_get_bitstring_5
    206                  return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
   \   00000046   0x2063             MOVS     R0,#+99
   \   00000048   0xE009             B.N      ??mbedtls_asn1_get_bitstring_1
    207              (*p)++;
   \                     ??mbedtls_asn1_get_bitstring_5: (+1)
   \   0000004A   0x6821             LDR      R1,[R4, #+0]
   \   0000004C   0x1C49             ADDS     R1,R1,#+1
   \   0000004E   0x6021             STR      R1,[R4, #+0]
    208          
    209              /* Get actual bitstring */
    210              bs->p = *p;
   \   00000050   0x60A9             STR      R1,[R5, #+8]
    211              *p += bs->len;
   \   00000052   0x6821             LDR      R1,[R4, #+0]
   \   00000054   0x1808             ADDS     R0,R1,R0
   \   00000056   0x6020             STR      R0,[R4, #+0]
    212          
    213              if( *p != end )
   \   00000058   0x42B0             CMP      R0,R6
   \   0000005A   0xD002             BEQ      ??mbedtls_asn1_get_bitstring_6
    214                  return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \   0000005C   0x2065             MOVS     R0,#+101
   \                     ??mbedtls_asn1_get_bitstring_1: (+1)
   \   0000005E   0x43C0             MVNS     R0,R0            ;; #-102
   \   00000060   0xBD70             POP      {R4-R6,PC}
    215          
    216              return( 0 );
   \                     ??mbedtls_asn1_get_bitstring_6: (+1)
   \   00000062   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_asn1_get_bitstring_3: (+1)
   \   00000064   0xBD70             POP      {R4-R6,PC}       ;; return
    217          }
    218          
    219          /*
    220           * Get a bit string without unused bits
    221           */

   \                                 In section .text, align 2, keep-with-next
    222          int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
    223                                       size_t *len )
    224          {
   \                     mbedtls_asn1_get_bitstring_null: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0015             MOVS     R5,R2
    225              int ret;
    226          
    227              if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x1A0A             SUBS     R2,R1,R0
   \   0000000A   0x2A01             CMP      R2,#+1
   \   0000000C   0xDA01             BGE      ??mbedtls_asn1_get_bitstring_null_0
   \   0000000E   0x205F             MOVS     R0,#+95
   \   00000010   0xE018             B        ??mbedtls_asn1_get_bitstring_null_1
   \                     ??mbedtls_asn1_get_bitstring_null_0: (+1)
   \   00000012   0x7802             LDRB     R2,[R0, #+0]
   \   00000014   0x2A03             CMP      R2,#+3
   \   00000016   0xD001             BEQ      ??mbedtls_asn1_get_bitstring_null_2
   \   00000018   0x2061             MOVS     R0,#+97
   \   0000001A   0xE013             B        ??mbedtls_asn1_get_bitstring_null_1
   \                     ??mbedtls_asn1_get_bitstring_null_2: (+1)
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0x6020             STR      R0,[R4, #+0]
   \   00000020   0x002A             MOVS     R2,R5
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x.... 0x....      BL       mbedtls_asn1_get_len
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD10C             BNE      ??mbedtls_asn1_get_bitstring_null_3
    228                  return( ret );
    229          
    230              if( (*len)-- < 2 || *(*p)++ != 0 )
   \   0000002C   0x6828             LDR      R0,[R5, #+0]
   \   0000002E   0x1E41             SUBS     R1,R0,#+1
   \   00000030   0x6029             STR      R1,[R5, #+0]
   \   00000032   0x2802             CMP      R0,#+2
   \   00000034   0xD305             BCC      ??mbedtls_asn1_get_bitstring_null_4
   \   00000036   0x6820             LDR      R0,[R4, #+0]
   \   00000038   0x1C41             ADDS     R1,R0,#+1
   \   0000003A   0x6021             STR      R1,[R4, #+0]
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD001             BEQ      ??mbedtls_asn1_get_bitstring_null_3
    231                  return( MBEDTLS_ERR_ASN1_INVALID_DATA );
   \                     ??mbedtls_asn1_get_bitstring_null_4: (+1)
   \   00000042   0x2067             MOVS     R0,#+103
   \                     ??mbedtls_asn1_get_bitstring_null_1: (+1)
   \   00000044   0x43C0             MVNS     R0,R0            ;; #-104
    232          
    233              return( 0 );
   \                     ??mbedtls_asn1_get_bitstring_null_3: (+1)
   \   00000046   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    234          }
    235          
    236          
    237          
    238          /*
    239           *  Parses and splits an ASN.1 "SEQUENCE OF <tag>"
    240           */

   \                                 In section .text, align 2, keep-with-next
    241          int mbedtls_asn1_get_sequence_of( unsigned char **p,
    242                                    const unsigned char *end,
    243                                    mbedtls_asn1_sequence *cur,
    244                                    int tag)
    245          {
   \                     mbedtls_asn1_get_sequence_of: (+1)
   \   00000000   0xB578             PUSH     {R3-R6,LR}
   \   00000002   0xB408             PUSH     {R3}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0005             MOVS     R5,R0
   \   00000008   0x000E             MOVS     R6,R1
   \   0000000A   0x0014             MOVS     R4,R2
    246              int ret;
    247              size_t len;
    248              mbedtls_asn1_buf *buf;
    249          
    250              /* Get main sequence tag */
    251              if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    252                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \   0000000C   0x6828             LDR      R0,[R5, #+0]
   \   0000000E   0x1A31             SUBS     R1,R6,R0
   \   00000010   0x2901             CMP      R1,#+1
   \   00000012   0xDA01             BGE      ??mbedtls_asn1_get_sequence_of_0
   \   00000014   0x205F             MOVS     R0,#+95
   \   00000016   0xE043             B.N      ??mbedtls_asn1_get_sequence_of_1
   \                     ??mbedtls_asn1_get_sequence_of_0: (+1)
   \   00000018   0x7801             LDRB     R1,[R0, #+0]
   \   0000001A   0x2930             CMP      R1,#+48
   \   0000001C   0xD001             BEQ      ??mbedtls_asn1_get_sequence_of_2
   \   0000001E   0x2061             MOVS     R0,#+97
   \   00000020   0xE03E             B.N      ??mbedtls_asn1_get_sequence_of_1
   \                     ??mbedtls_asn1_get_sequence_of_2: (+1)
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \   00000024   0x6028             STR      R0,[R5, #+0]
   \   00000026   0x466A             MOV      R2,SP
   \   00000028   0x0031             MOVS     R1,R6
   \   0000002A   0x0028             MOVS     R0,R5
   \   0000002C   0x.... 0x....      BL       mbedtls_asn1_get_len
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD138             BNE      ??mbedtls_asn1_get_sequence_of_3
    253                  return( ret );
    254          
    255              if( *p + len != end )
   \   00000034   0x6828             LDR      R0,[R5, #+0]
   \   00000036   0x9900             LDR      R1,[SP, #+0]
   \   00000038   0x1840             ADDS     R0,R0,R1
   \   0000003A   0x42B0             CMP      R0,R6
   \   0000003C   0xD001             BEQ      ??mbedtls_asn1_get_sequence_of_4
    256                  return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \   0000003E   0xE02E             B.N      ??mbedtls_asn1_get_sequence_of_5
    257          
    258              while( *p < end )
    259              {
    260                  buf = &(cur->buf);
    261                  buf->tag = **p;
    262          
    263                  if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
    264                      return( ret );
    265          
    266                  buf->p = *p;
    267                  *p += buf->len;
    268          
    269                  /* Allocate and assign next pointer */
    270                  if( *p < end )
    271                  {
    272                      cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
    273                                                      sizeof( mbedtls_asn1_sequence ) );
    274          
    275                      if( cur->next == NULL )
    276                          return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
    277          
    278                      cur = cur->next;
   \                     ??mbedtls_asn1_get_sequence_of_6: (+1)
   \   00000040   0x0004             MOVS     R4,R0
   \                     ??mbedtls_asn1_get_sequence_of_4: (+1)
   \   00000042   0x6828             LDR      R0,[R5, #+0]
   \   00000044   0x42B0             CMP      R0,R6
   \   00000046   0xD226             BCS      ??mbedtls_asn1_get_sequence_of_7
   \   00000048   0x7802             LDRB     R2,[R0, #+0]
   \   0000004A   0x6022             STR      R2,[R4, #+0]
   \   0000004C   0x1A31             SUBS     R1,R6,R0
   \   0000004E   0x2901             CMP      R1,#+1
   \   00000050   0xDA01             BGE      ??mbedtls_asn1_get_sequence_of_8
   \   00000052   0x205F             MOVS     R0,#+95
   \   00000054   0xE024             B.N      ??mbedtls_asn1_get_sequence_of_1
   \                     ??mbedtls_asn1_get_sequence_of_8: (+1)
   \   00000056   0x7801             LDRB     R1,[R0, #+0]
   \   00000058   0x9A02             LDR      R2,[SP, #+8]
   \   0000005A   0x4291             CMP      R1,R2
   \   0000005C   0xD001             BEQ      ??mbedtls_asn1_get_sequence_of_9
   \   0000005E   0x2061             MOVS     R0,#+97
   \   00000060   0xE01E             B.N      ??mbedtls_asn1_get_sequence_of_1
   \                     ??mbedtls_asn1_get_sequence_of_9: (+1)
   \   00000062   0x1C40             ADDS     R0,R0,#+1
   \   00000064   0x6028             STR      R0,[R5, #+0]
   \   00000066   0x1D22             ADDS     R2,R4,#+4
   \   00000068   0x0031             MOVS     R1,R6
   \   0000006A   0x0028             MOVS     R0,R5
   \   0000006C   0x.... 0x....      BL       mbedtls_asn1_get_len
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD118             BNE      ??mbedtls_asn1_get_sequence_of_3
   \   00000074   0x6828             LDR      R0,[R5, #+0]
   \   00000076   0x60A0             STR      R0,[R4, #+8]
   \   00000078   0x6828             LDR      R0,[R5, #+0]
   \   0000007A   0x6861             LDR      R1,[R4, #+4]
   \   0000007C   0x1840             ADDS     R0,R0,R1
   \   0000007E   0x6028             STR      R0,[R5, #+0]
   \   00000080   0x42B0             CMP      R0,R6
   \   00000082   0xD2DE             BCS      ??mbedtls_asn1_get_sequence_of_4
   \   00000084   0x2110             MOVS     R1,#+16
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0x.... 0x....      BL       calloc
   \   0000008C   0x60E0             STR      R0,[R4, #+12]
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD1D6             BNE      ??mbedtls_asn1_get_sequence_of_6
   \   00000092   0x2069             MOVS     R0,#+105
   \   00000094   0xE004             B.N      ??mbedtls_asn1_get_sequence_of_1
    279                  }
    280              }
    281          
    282              /* Set final sequence entry's next pointer to NULL */
    283              cur->next = NULL;
   \                     ??mbedtls_asn1_get_sequence_of_7: (+1)
   \   00000096   0x2100             MOVS     R1,#+0
   \   00000098   0x60E1             STR      R1,[R4, #+12]
    284          
    285              if( *p != end )
   \   0000009A   0x42B0             CMP      R0,R6
   \   0000009C   0xD002             BEQ      ??mbedtls_asn1_get_sequence_of_10
    286                  return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \                     ??mbedtls_asn1_get_sequence_of_5: (+1)
   \   0000009E   0x2065             MOVS     R0,#+101
   \                     ??mbedtls_asn1_get_sequence_of_1: (+1)
   \   000000A0   0x43C0             MVNS     R0,R0            ;; #-102
   \   000000A2   0xE000             B        ??mbedtls_asn1_get_sequence_of_3
    287          
    288              return( 0 );
   \                     ??mbedtls_asn1_get_sequence_of_10: (+1)
   \   000000A4   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_asn1_get_sequence_of_3: (+1)
   \   000000A6   0xB004             ADD      SP,SP,#+16
   \   000000A8   0xBD70             POP      {R4-R6,PC}       ;; return
    289          }
    290          

   \                                 In section .text, align 2, keep-with-next
    291          int mbedtls_asn1_get_alg( unsigned char **p,
    292                            const unsigned char *end,
    293                            mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
    294          {
   \                     mbedtls_asn1_get_alg: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    295              int ret;
    296              size_t len;
    297          
    298              if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    299                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \   0000000A   0x6828             LDR      R0,[R5, #+0]
   \   0000000C   0x1A21             SUBS     R1,R4,R0
   \   0000000E   0x2901             CMP      R1,#+1
   \   00000010   0xDA01             BGE      ??mbedtls_asn1_get_alg_0
   \   00000012   0x205F             MOVS     R0,#+95
   \   00000014   0xE04B             B.N      ??mbedtls_asn1_get_alg_1
   \                     ??mbedtls_asn1_get_alg_0: (+1)
   \   00000016   0x7801             LDRB     R1,[R0, #+0]
   \   00000018   0x2930             CMP      R1,#+48
   \   0000001A   0xD001             BEQ      ??mbedtls_asn1_get_alg_2
   \   0000001C   0x2061             MOVS     R0,#+97
   \   0000001E   0xE046             B.N      ??mbedtls_asn1_get_alg_1
   \                     ??mbedtls_asn1_get_alg_2: (+1)
   \   00000020   0x1C40             ADDS     R0,R0,#+1
   \   00000022   0x6028             STR      R0,[R5, #+0]
   \   00000024   0x466A             MOV      R2,SP
   \   00000026   0x0021             MOVS     R1,R4
   \   00000028   0x0028             MOVS     R0,R5
   \   0000002A   0x.... 0x....      BL       mbedtls_asn1_get_len
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD140             BNE      ??mbedtls_asn1_get_alg_3
    300                  return( ret );
    301          
    302              if( ( end - *p ) < 1 )
   \   00000032   0x6828             LDR      R0,[R5, #+0]
   \   00000034   0x1A22             SUBS     R2,R4,R0
   \   00000036   0x2A01             CMP      R2,#+1
   \   00000038   0xDA01             BGE      ??mbedtls_asn1_get_alg_4
    303                  return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
   \   0000003A   0x205F             MOVS     R0,#+95
   \   0000003C   0xE037             B.N      ??mbedtls_asn1_get_alg_1
    304          
    305              alg->tag = **p;
   \                     ??mbedtls_asn1_get_alg_4: (+1)
   \   0000003E   0x7802             LDRB     R2,[R0, #+0]
   \   00000040   0x6032             STR      R2,[R6, #+0]
    306              end = *p + len;
   \   00000042   0x9A00             LDR      R2,[SP, #+0]
   \   00000044   0x1884             ADDS     R4,R0,R2
    307          
    308              if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
   \   00000046   0x1A21             SUBS     R1,R4,R0
   \   00000048   0x2901             CMP      R1,#+1
   \   0000004A   0xDA01             BGE      ??mbedtls_asn1_get_alg_5
   \   0000004C   0x205F             MOVS     R0,#+95
   \   0000004E   0xE02E             B.N      ??mbedtls_asn1_get_alg_1
   \                     ??mbedtls_asn1_get_alg_5: (+1)
   \   00000050   0x7801             LDRB     R1,[R0, #+0]
   \   00000052   0x2906             CMP      R1,#+6
   \   00000054   0xD001             BEQ      ??mbedtls_asn1_get_alg_6
   \   00000056   0x2061             MOVS     R0,#+97
   \   00000058   0xE029             B.N      ??mbedtls_asn1_get_alg_1
   \                     ??mbedtls_asn1_get_alg_6: (+1)
   \   0000005A   0x1C40             ADDS     R0,R0,#+1
   \   0000005C   0x6028             STR      R0,[R5, #+0]
   \   0000005E   0x1D32             ADDS     R2,R6,#+4
   \   00000060   0x0021             MOVS     R1,R4
   \   00000062   0x0028             MOVS     R0,R5
   \   00000064   0x.... 0x....      BL       mbedtls_asn1_get_len
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD123             BNE      ??mbedtls_asn1_get_alg_3
    309                  return( ret );
    310          
    311              alg->p = *p;
   \   0000006C   0x6828             LDR      R0,[R5, #+0]
   \   0000006E   0x60B0             STR      R0,[R6, #+8]
    312              *p += alg->len;
   \   00000070   0x6828             LDR      R0,[R5, #+0]
   \   00000072   0x6871             LDR      R1,[R6, #+4]
   \   00000074   0x1840             ADDS     R0,R0,R1
   \   00000076   0x6028             STR      R0,[R5, #+0]
    313          
    314              if( *p == end )
   \   00000078   0x42A0             CMP      R0,R4
   \   0000007A   0xD104             BNE      ??mbedtls_asn1_get_alg_7
    315              {
    316                  mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );
   \   0000007C   0x210C             MOVS     R1,#+12
   \   0000007E   0x0038             MOVS     R0,R7
   \   00000080   0x.... 0x....      BL       __aeabi_memclr
    317                  return( 0 );
   \   00000084   0xE015             B        ??mbedtls_asn1_get_alg_8
    318              }
    319          
    320              params->tag = **p;
   \                     ??mbedtls_asn1_get_alg_7: (+1)
   \   00000086   0x7801             LDRB     R1,[R0, #+0]
   \   00000088   0x6039             STR      R1,[R7, #+0]
    321              (*p)++;
   \   0000008A   0x1C40             ADDS     R0,R0,#+1
   \   0000008C   0x6028             STR      R0,[R5, #+0]
    322          
    323              if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
   \   0000008E   0x1D3A             ADDS     R2,R7,#+4
   \   00000090   0x0021             MOVS     R1,R4
   \   00000092   0x0028             MOVS     R0,R5
   \   00000094   0x.... 0x....      BL       mbedtls_asn1_get_len
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xD10B             BNE      ??mbedtls_asn1_get_alg_3
    324                  return( ret );
    325          
    326              params->p = *p;
   \   0000009C   0x6828             LDR      R0,[R5, #+0]
   \   0000009E   0x60B8             STR      R0,[R7, #+8]
    327              *p += params->len;
   \   000000A0   0x6828             LDR      R0,[R5, #+0]
   \   000000A2   0x6879             LDR      R1,[R7, #+4]
   \   000000A4   0x1840             ADDS     R0,R0,R1
   \   000000A6   0x6028             STR      R0,[R5, #+0]
    328          
    329              if( *p != end )
   \   000000A8   0x42A0             CMP      R0,R4
   \   000000AA   0xD002             BEQ      ??mbedtls_asn1_get_alg_8
    330                  return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \   000000AC   0x2065             MOVS     R0,#+101
   \                     ??mbedtls_asn1_get_alg_1: (+1)
   \   000000AE   0x43C0             MVNS     R0,R0            ;; #-102
   \   000000B0   0xBDF2             POP      {R1,R4-R7,PC}
    331          
    332              return( 0 );
   \                     ??mbedtls_asn1_get_alg_8: (+1)
   \   000000B2   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_asn1_get_alg_3: (+1)
   \   000000B4   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    333          }
    334          

   \                                 In section .text, align 2, keep-with-next
    335          int mbedtls_asn1_get_alg_null( unsigned char **p,
    336                                 const unsigned char *end,
    337                                 mbedtls_asn1_buf *alg )
    338          {
   \                     mbedtls_asn1_get_alg_null: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
    339              int ret;
    340              mbedtls_asn1_buf params;
    341          
    342              memset( &params, 0, sizeof(mbedtls_asn1_buf) );
   \   00000004   0x466B             MOV      R3,SP
   \   00000006   0x2400             MOVS     R4,#+0
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0x2600             MOVS     R6,#+0
   \   0000000C   0xC370             STM      R3!,{R4-R6}
    343          
    344              if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
   \   0000000E   0x466B             MOV      R3,SP
   \   00000010   0x.... 0x....      BL       mbedtls_asn1_get_alg
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD109             BNE      ??mbedtls_asn1_get_alg_null_0
    345                  return( ret );
    346          
    347              if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
   \   00000018   0x9800             LDR      R0,[SP, #+0]
   \   0000001A   0x2805             CMP      R0,#+5
   \   0000001C   0xD001             BEQ      ??mbedtls_asn1_get_alg_null_1
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD102             BNE      ??mbedtls_asn1_get_alg_null_2
   \                     ??mbedtls_asn1_get_alg_null_1: (+1)
   \   00000022   0x9801             LDR      R0,[SP, #+4]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD001             BEQ      ??mbedtls_asn1_get_alg_null_0
    348                  return( MBEDTLS_ERR_ASN1_INVALID_DATA );
   \                     ??mbedtls_asn1_get_alg_null_2: (+1)
   \   00000028   0x2067             MOVS     R0,#+103
   \   0000002A   0x43C0             MVNS     R0,R0            ;; #-104
    349          
    350              return( 0 );
   \                     ??mbedtls_asn1_get_alg_null_0: (+1)
   \   0000002C   0xB004             ADD      SP,SP,#+16
   \   0000002E   0xBD70             POP      {R4-R6,PC}       ;; return
    351          }
    352          

   \                                 In section .text, align 2, keep-with-next
    353          void mbedtls_asn1_free_named_data( mbedtls_asn1_named_data *cur )
    354          {
   \                     mbedtls_asn1_free_named_data: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    355              if( cur == NULL )
   \   00000004   0xD009             BEQ      ??mbedtls_asn1_free_named_data_0
    356                  return;
    357          
    358              mbedtls_free( cur->oid.p );
   \   00000006   0x68A0             LDR      R0,[R4, #+8]
   \   00000008   0x.... 0x....      BL       free
    359              mbedtls_free( cur->val.p );
   \   0000000C   0x6960             LDR      R0,[R4, #+20]
   \   0000000E   0x.... 0x....      BL       free
    360          
    361              mbedtls_zeroize( cur, sizeof( mbedtls_asn1_named_data ) );
   \   00000012   0x2120             MOVS     R1,#+32
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x.... 0x....      BL       __aeabi_memclr
    362          }
   \                     ??mbedtls_asn1_free_named_data_0: (+1)
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
    363          

   \                                 In section .text, align 2, keep-with-next
    364          void mbedtls_asn1_free_named_data_list( mbedtls_asn1_named_data **head )
    365          {
   \                     mbedtls_asn1_free_named_data_list: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0xE00E             B        ??mbedtls_asn1_free_named_data_list_0
    366              mbedtls_asn1_named_data *cur;
    367          
    368              while( ( cur = *head ) != NULL )
    369              {
    370                  *head = cur->next;
   \                     ??mbedtls_asn1_free_named_data_list_1: (+1)
   \   00000006   0x69A0             LDR      R0,[R4, #+24]
   \   00000008   0x6028             STR      R0,[R5, #+0]
    371                  mbedtls_asn1_free_named_data( cur );
   \   0000000A   0x68A0             LDR      R0,[R4, #+8]
   \   0000000C   0x.... 0x....      BL       free
   \   00000010   0x6960             LDR      R0,[R4, #+20]
   \   00000012   0x.... 0x....      BL       free
   \   00000016   0x2120             MOVS     R1,#+32
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x.... 0x....      BL       __aeabi_memclr
    372                  mbedtls_free( cur );
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x.... 0x....      BL       free
    373              }
   \                     ??mbedtls_asn1_free_named_data_list_0: (+1)
   \   00000024   0x682C             LDR      R4,[R5, #+0]
   \   00000026   0x2C00             CMP      R4,#+0
   \   00000028   0xD1ED             BNE      ??mbedtls_asn1_free_named_data_list_1
    374          }
   \   0000002A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    375          

   \                                 In section .text, align 2, keep-with-next
    376          mbedtls_asn1_named_data *mbedtls_asn1_find_named_data( mbedtls_asn1_named_data *list,
    377                                                 const char *oid, size_t len )
    378          {
   \                     mbedtls_asn1_find_named_data: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x0015             MOVS     R5,R2
   \   00000008   0xE000             B        ??mbedtls_asn1_find_named_data_0
    379              while( list != NULL )
    380              {
    381                  if( list->oid.len == len &&
    382                      memcmp( list->oid.p, oid, len ) == 0 )
    383                  {
    384                      break;
    385                  }
    386          
    387                  list = list->next;
   \                     ??mbedtls_asn1_find_named_data_1: (+1)
   \   0000000A   0x69A4             LDR      R4,[R4, #+24]
   \                     ??mbedtls_asn1_find_named_data_0: (+1)
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD009             BEQ      ??mbedtls_asn1_find_named_data_2
   \   00000010   0x6860             LDR      R0,[R4, #+4]
   \   00000012   0x42A8             CMP      R0,R5
   \   00000014   0xD1F9             BNE      ??mbedtls_asn1_find_named_data_1
   \   00000016   0x002A             MOVS     R2,R5
   \   00000018   0x0031             MOVS     R1,R6
   \   0000001A   0x68A0             LDR      R0,[R4, #+8]
   \   0000001C   0x.... 0x....      BL       memcmp
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD1F2             BNE      ??mbedtls_asn1_find_named_data_1
    388              }
    389          
    390              return( list );
   \                     ??mbedtls_asn1_find_named_data_2: (+1)
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0xBD70             POP      {R4-R6,PC}       ;; return
    391          }
    392          
    393          #endif /* MBEDTLS_ASN1_PARSE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   mbedtls_asn1_find_named_data
        16   -> memcmp
       8   mbedtls_asn1_free_named_data
         8   -> __aeabi_memclr
         8   -> free
      16   mbedtls_asn1_free_named_data_list
        16   -> __aeabi_memclr
        16   -> free
      24   mbedtls_asn1_get_alg
        24   -> __aeabi_memclr
        24   -> mbedtls_asn1_get_len
      32   mbedtls_asn1_get_alg_null
        32   -> mbedtls_asn1_get_alg
      16   mbedtls_asn1_get_bitstring
        16   -> mbedtls_asn1_get_len
      16   mbedtls_asn1_get_bitstring_null
        16   -> mbedtls_asn1_get_len
      16   mbedtls_asn1_get_bool
        16   -> mbedtls_asn1_get_tag
      16   mbedtls_asn1_get_int
        16   -> mbedtls_asn1_get_tag
      12   mbedtls_asn1_get_len
      16   mbedtls_asn1_get_mpi
        16   -> mbedtls_asn1_get_tag
        16   -> mbedtls_mpi_read_binary
      32   mbedtls_asn1_get_sequence_of
        32   -> calloc
        32   -> mbedtls_asn1_get_len
      16   mbedtls_asn1_get_tag
        16   -> mbedtls_asn1_get_len


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      40  mbedtls_asn1_find_named_data
      28  mbedtls_asn1_free_named_data
      44  mbedtls_asn1_free_named_data_list
     182  mbedtls_asn1_get_alg
      48  mbedtls_asn1_get_alg_null
     102  mbedtls_asn1_get_bitstring
      72  mbedtls_asn1_get_bitstring_null
      52  mbedtls_asn1_get_bool
      84  mbedtls_asn1_get_int
     178  mbedtls_asn1_get_len
      38  mbedtls_asn1_get_mpi
     170  mbedtls_asn1_get_sequence_of
      36  mbedtls_asn1_get_tag

 
 1 074 bytes in section .text
 
 1 074 bytes of CODE memory

Errors: none
Warnings: none
