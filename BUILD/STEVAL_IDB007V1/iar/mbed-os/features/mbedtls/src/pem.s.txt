###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:30
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\mbedtls\src\pem.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\pem.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\pem.s.txt -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\pem.o
#        .\mbed-os\features\mbedtls\src\pem.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\pem.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\pem.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\mbedtls\src\pem.c
      1          /*
      2           *  Privacy Enhanced Mail (PEM) decoding
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          #if !defined(MBEDTLS_CONFIG_FILE)
     23          #include "mbedtls/config.h"
     24          #else
     25          #include MBEDTLS_CONFIG_FILE
     26          #endif
     27          
     28          #if defined(MBEDTLS_PEM_PARSE_C) || defined(MBEDTLS_PEM_WRITE_C)
     29          
     30          #include "mbedtls/pem.h"
     31          #include "mbedtls/base64.h"
     32          #include "mbedtls/des.h"
     33          #include "mbedtls/aes.h"
     34          #include "mbedtls/md5.h"
     35          #include "mbedtls/cipher.h"
     36          
     37          #include <string.h>
     38          
     39          #if defined(MBEDTLS_PLATFORM_C)
     40          #include "mbedtls/platform.h"
     41          #else
     42          #include <stdlib.h>
     43          #define mbedtls_calloc    calloc
     44          #define mbedtls_free       free
     45          #endif
     46          
     47          #if defined(MBEDTLS_PEM_PARSE_C)
     48          /* Implementation that should never be optimized out by the compiler */
     49          static void mbedtls_zeroize( void *v, size_t n ) {
     50              volatile unsigned char *p = v; while( n-- ) *p++ = 0;
     51          }
     52          

   \                                 In section .text, align 2, keep-with-next
     53          void mbedtls_pem_init( mbedtls_pem_context *ctx )
     54          {
     55              memset( ctx, 0, sizeof( mbedtls_pem_context ) );
   \                     mbedtls_pem_init: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0xC00E             STM      R0!,{R1-R3}
     56          }
   \   00000008   0x4770             BX       LR               ;; return
     57          
     58          #if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \
     59              ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )
     60          /*
     61           * Read a 16-byte hex string and convert it to binary
     62           */
     63          static int pem_get_iv( const unsigned char *s, unsigned char *iv,
     64                                 size_t iv_len )
     65          {
     66              size_t i, j, k;
     67          
     68              memset( iv, 0, iv_len );
     69          
     70              for( i = 0; i < iv_len * 2; i++, s++ )
     71              {
     72                  if( *s >= '0' && *s <= '9' ) j = *s - '0'; else
     73                  if( *s >= 'A' && *s <= 'F' ) j = *s - '7'; else
     74                  if( *s >= 'a' && *s <= 'f' ) j = *s - 'W'; else
     75                      return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );
     76          
     77                  k = ( ( i & 1 ) != 0 ) ? j : j << 4;
     78          
     79                  iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );
     80              }
     81          
     82              return( 0 );
     83          }
     84          
     85          static void pem_pbkdf1( unsigned char *key, size_t keylen,
     86                                  unsigned char *iv,
     87                                  const unsigned char *pwd, size_t pwdlen )
     88          {
     89              mbedtls_md5_context md5_ctx;
     90              unsigned char md5sum[16];
     91              size_t use_len;
     92          
     93              mbedtls_md5_init( &md5_ctx );
     94          
     95              /*
     96               * key[ 0..15] = MD5(pwd || IV)
     97               */
     98              mbedtls_md5_starts( &md5_ctx );
     99              mbedtls_md5_update( &md5_ctx, pwd, pwdlen );
    100              mbedtls_md5_update( &md5_ctx, iv,  8 );
    101              mbedtls_md5_finish( &md5_ctx, md5sum );
    102          
    103              if( keylen <= 16 )
    104              {
    105                  memcpy( key, md5sum, keylen );
    106          
    107                  mbedtls_md5_free( &md5_ctx );
    108                  mbedtls_zeroize( md5sum, 16 );
    109                  return;
    110              }
    111          
    112              memcpy( key, md5sum, 16 );
    113          
    114              /*
    115               * key[16..23] = MD5(key[ 0..15] || pwd || IV])
    116               */
    117              mbedtls_md5_starts( &md5_ctx );
    118              mbedtls_md5_update( &md5_ctx, md5sum,  16 );
    119              mbedtls_md5_update( &md5_ctx, pwd, pwdlen );
    120              mbedtls_md5_update( &md5_ctx, iv,  8 );
    121              mbedtls_md5_finish( &md5_ctx, md5sum );
    122          
    123              use_len = 16;
    124              if( keylen < 32 )
    125                  use_len = keylen - 16;
    126          
    127              memcpy( key + 16, md5sum, use_len );
    128          
    129              mbedtls_md5_free( &md5_ctx );
    130              mbedtls_zeroize( md5sum, 16 );
    131          }
    132          
    133          #if defined(MBEDTLS_DES_C)
    134          /*
    135           * Decrypt with DES-CBC, using PBKDF1 for key derivation
    136           */
    137          static void pem_des_decrypt( unsigned char des_iv[8],
    138                                         unsigned char *buf, size_t buflen,
    139                                         const unsigned char *pwd, size_t pwdlen )
    140          {
    141              mbedtls_des_context des_ctx;
    142              unsigned char des_key[8];
    143          
    144              mbedtls_des_init( &des_ctx );
    145          
    146              pem_pbkdf1( des_key, 8, des_iv, pwd, pwdlen );
    147          
    148              mbedtls_des_setkey_dec( &des_ctx, des_key );
    149              mbedtls_des_crypt_cbc( &des_ctx, MBEDTLS_DES_DECRYPT, buflen,
    150                               des_iv, buf, buf );
    151          
    152              mbedtls_des_free( &des_ctx );
    153              mbedtls_zeroize( des_key, 8 );
    154          }
    155          
    156          /*
    157           * Decrypt with 3DES-CBC, using PBKDF1 for key derivation
    158           */
    159          static void pem_des3_decrypt( unsigned char des3_iv[8],
    160                                         unsigned char *buf, size_t buflen,
    161                                         const unsigned char *pwd, size_t pwdlen )
    162          {
    163              mbedtls_des3_context des3_ctx;
    164              unsigned char des3_key[24];
    165          
    166              mbedtls_des3_init( &des3_ctx );
    167          
    168              pem_pbkdf1( des3_key, 24, des3_iv, pwd, pwdlen );
    169          
    170              mbedtls_des3_set3key_dec( &des3_ctx, des3_key );
    171              mbedtls_des3_crypt_cbc( &des3_ctx, MBEDTLS_DES_DECRYPT, buflen,
    172                               des3_iv, buf, buf );
    173          
    174              mbedtls_des3_free( &des3_ctx );
    175              mbedtls_zeroize( des3_key, 24 );
    176          }
    177          #endif /* MBEDTLS_DES_C */
    178          
    179          #if defined(MBEDTLS_AES_C)
    180          /*
    181           * Decrypt with AES-XXX-CBC, using PBKDF1 for key derivation
    182           */
    183          static void pem_aes_decrypt( unsigned char aes_iv[16], unsigned int keylen,
    184                                         unsigned char *buf, size_t buflen,
    185                                         const unsigned char *pwd, size_t pwdlen )
    186          {
    187              mbedtls_aes_context aes_ctx;
    188              unsigned char aes_key[32];
    189          
    190              mbedtls_aes_init( &aes_ctx );
    191          
    192              pem_pbkdf1( aes_key, keylen, aes_iv, pwd, pwdlen );
    193          
    194              mbedtls_aes_setkey_dec( &aes_ctx, aes_key, keylen * 8 );
    195              mbedtls_aes_crypt_cbc( &aes_ctx, MBEDTLS_AES_DECRYPT, buflen,
    196                               aes_iv, buf, buf );
    197          
    198              mbedtls_aes_free( &aes_ctx );
    199              mbedtls_zeroize( aes_key, keylen );
    200          }
    201          #endif /* MBEDTLS_AES_C */
    202          
    203          #endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
    204                    ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    205          

   \                                 In section .text, align 4, keep-with-next
    206          int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
    207                               const unsigned char *data, const unsigned char *pwd,
    208                               size_t pwdlen, size_t *use_len )
    209          {
   \                     mbedtls_pem_read_buffer: (+1)
   \   00000000   0xB5FC             PUSH     {R2-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0007             MOVS     R7,R0
   \   00000006   0x000C             MOVS     R4,R1
    210              int ret, enc;
    211              size_t len;
    212              unsigned char *buf;
    213              const unsigned char *s1, *s2, *end;
    214          #if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \
    215              ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )
    216              unsigned char pem_iv[16];
    217              mbedtls_cipher_type_t enc_alg = MBEDTLS_CIPHER_NONE;
    218          #else
    219              ((void) pwd);
    220              ((void) pwdlen);
    221          #endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
    222                    ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    223          
    224              if( ctx == NULL )
   \   00000008   0x2F00             CMP      R7,#+0
   \   0000000A   0xD101             BNE      ??mbedtls_pem_read_buffer_0
    225                  return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
   \   0000000C   0x....             LDR      R0,??DataTable1  ;; 0xffffeb80
   \   0000000E   0xE06D             B        ??mbedtls_pem_read_buffer_1
    226          
    227              s1 = (unsigned char *) strstr( (const char *) data, header );
   \                     ??mbedtls_pem_read_buffer_0: (+1)
   \   00000010   0x4618             MOV      R0,R3
   \   00000012   0x.... 0x....      BL       __iar_Strstr
   \   00000016   0x0005             MOVS     R5,R0
    228          
    229              if( s1 == NULL )
   \   00000018   0xD038             BEQ      ??mbedtls_pem_read_buffer_2
    230                  return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
    231          
    232              s2 = (unsigned char *) strstr( (const char *) data, footer );
   \   0000001A   0x9903             LDR      R1,[SP, #+12]
   \   0000001C   0x9804             LDR      R0,[SP, #+16]
   \   0000001E   0x.... 0x....      BL       __iar_Strstr
   \   00000022   0x0006             MOVS     R6,R0
    233          
    234              if( s2 == NULL || s2 <= s1 )
   \   00000024   0xD032             BEQ      ??mbedtls_pem_read_buffer_2
   \   00000026   0x42B5             CMP      R5,R6
   \   00000028   0xD230             BCS      ??mbedtls_pem_read_buffer_2
    235                  return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
    236          
    237              s1 += strlen( header );
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x.... 0x....      BL       strlen
   \   00000030   0x182C             ADDS     R4,R5,R0
    238              if( *s1 == ' '  ) s1++;
   \   00000032   0x7820             LDRB     R0,[R4, #+0]
   \   00000034   0x2820             CMP      R0,#+32
   \   00000036   0xD100             BNE      ??mbedtls_pem_read_buffer_3
   \   00000038   0x1C64             ADDS     R4,R4,#+1
    239              if( *s1 == '\r' ) s1++;
   \                     ??mbedtls_pem_read_buffer_3: (+1)
   \   0000003A   0x7820             LDRB     R0,[R4, #+0]
   \   0000003C   0x280D             CMP      R0,#+13
   \   0000003E   0xD100             BNE      ??mbedtls_pem_read_buffer_4
   \   00000040   0x1C64             ADDS     R4,R4,#+1
    240              if( *s1 == '\n' ) s1++;
   \                     ??mbedtls_pem_read_buffer_4: (+1)
   \   00000042   0x7820             LDRB     R0,[R4, #+0]
   \   00000044   0x280A             CMP      R0,#+10
   \   00000046   0xD121             BNE      ??mbedtls_pem_read_buffer_2
   \   00000048   0x1C64             ADDS     R4,R4,#+1
    241              else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
    242          
    243              end = s2;
    244              end += strlen( footer );
   \   0000004A   0x9803             LDR      R0,[SP, #+12]
   \   0000004C   0x.... 0x....      BL       strlen
   \   00000050   0x1830             ADDS     R0,R6,R0
    245              if( *end == ' '  ) end++;
   \   00000052   0x7801             LDRB     R1,[R0, #+0]
   \   00000054   0x2920             CMP      R1,#+32
   \   00000056   0xD100             BNE      ??mbedtls_pem_read_buffer_5
   \   00000058   0x1C40             ADDS     R0,R0,#+1
    246              if( *end == '\r' ) end++;
   \                     ??mbedtls_pem_read_buffer_5: (+1)
   \   0000005A   0x7801             LDRB     R1,[R0, #+0]
   \   0000005C   0x290D             CMP      R1,#+13
   \   0000005E   0xD100             BNE      ??mbedtls_pem_read_buffer_6
   \   00000060   0x1C40             ADDS     R0,R0,#+1
    247              if( *end == '\n' ) end++;
   \                     ??mbedtls_pem_read_buffer_6: (+1)
   \   00000062   0x7801             LDRB     R1,[R0, #+0]
   \   00000064   0x290A             CMP      R1,#+10
   \   00000066   0xD100             BNE      ??mbedtls_pem_read_buffer_7
   \   00000068   0x1C40             ADDS     R0,R0,#+1
    248              *use_len = end - data;
   \                     ??mbedtls_pem_read_buffer_7: (+1)
   \   0000006A   0x9904             LDR      R1,[SP, #+16]
   \   0000006C   0x1A40             SUBS     R0,R0,R1
   \   0000006E   0x990C             LDR      R1,[SP, #+48]
   \   00000070   0x6008             STR      R0,[R1, #+0]
    249          
    250              enc = 0;
    251          
    252              if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
   \   00000072   0x1B30             SUBS     R0,R6,R4
   \   00000074   0x9002             STR      R0,[SP, #+8]
   \   00000076   0x2816             CMP      R0,#+22
   \   00000078   0xDB0A             BLT      ??mbedtls_pem_read_buffer_8
   \   0000007A   0x2216             MOVS     R2,#+22
   \   0000007C   0x....             ADR.N    R1,?_0
   \   0000007E   0x0020             MOVS     R0,R4
   \   00000080   0x.... 0x....      BL       memcmp
   \   00000084   0x2800             CMP      R0,#+0
   \   00000086   0xD103             BNE      ??mbedtls_pem_read_buffer_8
    253              {
    254          #if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \
    255              ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )
    256                  enc++;
    257          
    258                  s1 += 22;
    259                  if( *s1 == '\r' ) s1++;
    260                  if( *s1 == '\n' ) s1++;
    261                  else return( MBEDTLS_ERR_PEM_INVALID_DATA );
    262          
    263          
    264          #if defined(MBEDTLS_DES_C)
    265                  if( s2 - s1 >= 23 && memcmp( s1, "DEK-Info: DES-EDE3-CBC,", 23 ) == 0 )
    266                  {
    267                      enc_alg = MBEDTLS_CIPHER_DES_EDE3_CBC;
    268          
    269                      s1 += 23;
    270                      if( s2 - s1 < 16 || pem_get_iv( s1, pem_iv, 8 ) != 0 )
    271                          return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );
    272          
    273                      s1 += 16;
    274                  }
    275                  else if( s2 - s1 >= 18 && memcmp( s1, "DEK-Info: DES-CBC,", 18 ) == 0 )
    276                  {
    277                      enc_alg = MBEDTLS_CIPHER_DES_CBC;
    278          
    279                      s1 += 18;
    280                      if( s2 - s1 < 16 || pem_get_iv( s1, pem_iv, 8) != 0 )
    281                          return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );
    282          
    283                      s1 += 16;
    284                  }
    285          #endif /* MBEDTLS_DES_C */
    286          
    287          #if defined(MBEDTLS_AES_C)
    288                  if( s2 - s1 >= 14 && memcmp( s1, "DEK-Info: AES-", 14 ) == 0 )
    289                  {
    290                      if( s2 - s1 < 22 )
    291                          return( MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG );
    292                      else if( memcmp( s1, "DEK-Info: AES-128-CBC,", 22 ) == 0 )
    293                          enc_alg = MBEDTLS_CIPHER_AES_128_CBC;
    294                      else if( memcmp( s1, "DEK-Info: AES-192-CBC,", 22 ) == 0 )
    295                          enc_alg = MBEDTLS_CIPHER_AES_192_CBC;
    296                      else if( memcmp( s1, "DEK-Info: AES-256-CBC,", 22 ) == 0 )
    297                          enc_alg = MBEDTLS_CIPHER_AES_256_CBC;
    298                      else
    299                          return( MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG );
    300          
    301                      s1 += 22;
    302                      if( s2 - s1 < 32 || pem_get_iv( s1, pem_iv, 16 ) != 0 )
    303                          return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );
    304          
    305                      s1 += 32;
    306                  }
    307          #endif /* MBEDTLS_AES_C */
    308          
    309                  if( enc_alg == MBEDTLS_CIPHER_NONE )
    310                      return( MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG );
    311          
    312                  if( *s1 == '\r' ) s1++;
    313                  if( *s1 == '\n' ) s1++;
    314                  else return( MBEDTLS_ERR_PEM_INVALID_DATA );
    315          #else
    316                  return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
   \   00000088   0x....             LDR      R0,??DataTable1_1  ;; 0xffffec00
   \   0000008A   0xE02F             B        ??mbedtls_pem_read_buffer_1
    317          #endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
    318                    ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    319              }
   \                     ??mbedtls_pem_read_buffer_2: (+1)
   \   0000008C   0x....             LDR      R0,??DataTable1_2  ;; 0xffffef80
   \   0000008E   0xE02D             B        ??mbedtls_pem_read_buffer_1
    320          
    321              if( s1 >= s2 )
   \                     ??mbedtls_pem_read_buffer_8: (+1)
   \   00000090   0x42B4             CMP      R4,R6
   \   00000092   0xD301             BCC      ??mbedtls_pem_read_buffer_9
    322                  return( MBEDTLS_ERR_PEM_INVALID_DATA );
   \   00000094   0x....             LDR      R0,??DataTable1_3  ;; 0xffffef00
   \   00000096   0xE029             B        ??mbedtls_pem_read_buffer_1
    323          
    324              ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
    325          
    326              if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
   \                     ??mbedtls_pem_read_buffer_9: (+1)
   \   00000098   0x9802             LDR      R0,[SP, #+8]
   \   0000009A   0x9000             STR      R0,[SP, #+0]
   \   0000009C   0x0023             MOVS     R3,R4
   \   0000009E   0xAA01             ADD      R2,SP,#+4
   \   000000A0   0x2100             MOVS     R1,#+0
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x.... 0x....      BL       mbedtls_base64_decode
   \   000000A8   0x212B             MOVS     R1,#+43
   \   000000AA   0x43C9             MVNS     R1,R1            ;; #-44
   \   000000AC   0x4288             CMP      R0,R1
   \   000000AE   0xD101             BNE      ??mbedtls_pem_read_buffer_10
    327                  return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
   \   000000B0   0x....             LDR      R0,??DataTable1_4  ;; 0xffffeed4
   \   000000B2   0xE01B             B        ??mbedtls_pem_read_buffer_1
    328          
    329              if( ( buf = mbedtls_calloc( 1, len ) ) == NULL )
   \                     ??mbedtls_pem_read_buffer_10: (+1)
   \   000000B4   0x9901             LDR      R1,[SP, #+4]
   \   000000B6   0x2001             MOVS     R0,#+1
   \   000000B8   0x.... 0x....      BL       calloc
   \   000000BC   0x0005             MOVS     R5,R0
   \   000000BE   0xD101             BNE      ??mbedtls_pem_read_buffer_11
    330                  return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
   \   000000C0   0x....             LDR      R0,??DataTable1_5  ;; 0xffffee80
   \   000000C2   0xE013             B        ??mbedtls_pem_read_buffer_1
    331          
    332              if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
   \                     ??mbedtls_pem_read_buffer_11: (+1)
   \   000000C4   0x9802             LDR      R0,[SP, #+8]
   \   000000C6   0x9000             STR      R0,[SP, #+0]
   \   000000C8   0x0023             MOVS     R3,R4
   \   000000CA   0xAA01             ADD      R2,SP,#+4
   \   000000CC   0x9901             LDR      R1,[SP, #+4]
   \   000000CE   0x0028             MOVS     R0,R5
   \   000000D0   0x.... 0x....      BL       mbedtls_base64_decode
   \   000000D4   0x0004             MOVS     R4,R0
   \   000000D6   0xD005             BEQ      ??mbedtls_pem_read_buffer_12
    333              {
    334                  mbedtls_free( buf );
   \   000000D8   0x0028             MOVS     R0,R5
   \   000000DA   0x.... 0x....      BL       free
    335                  return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
   \   000000DE   0x....             LDR      R0,??DataTable1_3  ;; 0xffffef00
   \   000000E0   0x1820             ADDS     R0,R4,R0
   \   000000E2   0xE003             B        ??mbedtls_pem_read_buffer_1
    336              }
    337          
    338              if( enc != 0 )
    339              {
    340          #if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \
    341              ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )
    342                  if( pwd == NULL )
    343                  {
    344                      mbedtls_free( buf );
    345                      return( MBEDTLS_ERR_PEM_PASSWORD_REQUIRED );
    346                  }
    347          
    348          #if defined(MBEDTLS_DES_C)
    349                  if( enc_alg == MBEDTLS_CIPHER_DES_EDE3_CBC )
    350                      pem_des3_decrypt( pem_iv, buf, len, pwd, pwdlen );
    351                  else if( enc_alg == MBEDTLS_CIPHER_DES_CBC )
    352                      pem_des_decrypt( pem_iv, buf, len, pwd, pwdlen );
    353          #endif /* MBEDTLS_DES_C */
    354          
    355          #if defined(MBEDTLS_AES_C)
    356                  if( enc_alg == MBEDTLS_CIPHER_AES_128_CBC )
    357                      pem_aes_decrypt( pem_iv, 16, buf, len, pwd, pwdlen );
    358                  else if( enc_alg == MBEDTLS_CIPHER_AES_192_CBC )
    359                      pem_aes_decrypt( pem_iv, 24, buf, len, pwd, pwdlen );
    360                  else if( enc_alg == MBEDTLS_CIPHER_AES_256_CBC )
    361                      pem_aes_decrypt( pem_iv, 32, buf, len, pwd, pwdlen );
    362          #endif /* MBEDTLS_AES_C */
    363          
    364                  /*
    365                   * The result will be ASN.1 starting with a SEQUENCE tag, with 1 to 3
    366                   * length bytes (allow 4 to be sure) in all known use cases.
    367                   *
    368                   * Use that as heurisitic to try detecting password mismatchs.
    369                   */
    370                  if( len <= 2 || buf[0] != 0x30 || buf[1] > 0x83 )
    371                  {
    372                      mbedtls_free( buf );
    373                      return( MBEDTLS_ERR_PEM_PASSWORD_MISMATCH );
    374                  }
    375          #else
    376                  mbedtls_free( buf );
    377                  return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
    378          #endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
    379                    ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    380              }
    381          
    382              ctx->buf = buf;
   \                     ??mbedtls_pem_read_buffer_12: (+1)
   \   000000E4   0x603D             STR      R5,[R7, #+0]
    383              ctx->buflen = len;
   \   000000E6   0x9801             LDR      R0,[SP, #+4]
   \   000000E8   0x6078             STR      R0,[R7, #+4]
    384          
    385              return( 0 );
   \   000000EA   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_pem_read_buffer_1: (+1)
   \   000000EC   0xB005             ADD      SP,SP,#+20
   \   000000EE   0xBDF0             POP      {R4-R7,PC}       ;; return
    386          }
    387          

   \                                 In section .text, align 2, keep-with-next
    388          void mbedtls_pem_free( mbedtls_pem_context *ctx )
    389          {
   \                     mbedtls_pem_free: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    390              mbedtls_free( ctx->buf );
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x.... 0x....      BL       free
    391              mbedtls_free( ctx->info );
   \   0000000A   0x68A0             LDR      R0,[R4, #+8]
   \   0000000C   0x.... 0x....      BL       free
    392          
    393              mbedtls_zeroize( ctx, sizeof( mbedtls_pem_context ) );
   \   00000010   0x210C             MOVS     R1,#+12
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       __aeabi_memclr
    394          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0xFFFFEB80         DC32     0xffffeb80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0xFFFFEC00         DC32     0xffffec00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0xFFFFEF80         DC32     0xffffef80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0xFFFFEF00         DC32     0xffffef00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0xFFFFEED4         DC32     0xffffeed4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0xFFFFEE80         DC32     0xffffee80

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x50 0x72          DC8 "Proc-Type: 4,ENCRYPTED"
   \              0x6F 0x63    
   \              0x2D 0x54    
   \              0x79 0x70    
   \              0x65 0x3A    
   \              0x20 0x34    
   \              0x2C 0x45    
   \              0x4E 0x43    
   \              0x52 0x59    
   \              0x50 0x54    
   \              0x45 0x44    
   \              0x00         
   \   00000017   0x00               DC8 0
    395          #endif /* MBEDTLS_PEM_PARSE_C */
    396          
    397          #if defined(MBEDTLS_PEM_WRITE_C)
    398          int mbedtls_pem_write_buffer( const char *header, const char *footer,
    399                                const unsigned char *der_data, size_t der_len,
    400                                unsigned char *buf, size_t buf_len, size_t *olen )
    401          {
    402              int ret;
    403              unsigned char *encode_buf, *c, *p = buf;
    404              size_t len = 0, use_len, add_len = 0;
    405          
    406              mbedtls_base64_encode( NULL, 0, &use_len, der_data, der_len );
    407              add_len = strlen( header ) + strlen( footer ) + ( use_len / 64 ) + 1;
    408          
    409              if( use_len + add_len > buf_len )
    410              {
    411                  *olen = use_len + add_len;
    412                  return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    413              }
    414          
    415              if( ( encode_buf = mbedtls_calloc( 1, use_len ) ) == NULL )
    416                  return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
    417          
    418              if( ( ret = mbedtls_base64_encode( encode_buf, use_len, &use_len, der_data,
    419                                         der_len ) ) != 0 )
    420              {
    421                  mbedtls_free( encode_buf );
    422                  return( ret );
    423              }
    424          
    425              memcpy( p, header, strlen( header ) );
    426              p += strlen( header );
    427              c = encode_buf;
    428          
    429              while( use_len )
    430              {
    431                  len = ( use_len > 64 ) ? 64 : use_len;
    432                  memcpy( p, c, len );
    433                  use_len -= len;
    434                  p += len;
    435                  c += len;
    436                  *p++ = '\n';
    437              }
    438          
    439              memcpy( p, footer, strlen( footer ) );
    440              p += strlen( footer );
    441          
    442              *p++ = '\0';
    443              *olen = p - buf;
    444          
    445              mbedtls_free( encode_buf );
    446              return( 0 );
    447          }
    448          #endif /* MBEDTLS_PEM_WRITE_C */
    449          #endif /* MBEDTLS_PEM_PARSE_C || MBEDTLS_PEM_WRITE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   mbedtls_pem_free
         8   -> __aeabi_memclr
         8   -> free
       0   mbedtls_pem_init
      40   mbedtls_pem_read_buffer
        40   -> __iar_Strstr
        40   -> calloc
        40   -> free
        40   -> mbedtls_base64_decode
        40   -> memcmp
        40   -> strlen


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
      24  ?_0
      26  mbedtls_pem_free
      10  mbedtls_pem_init
     240  mbedtls_pem_read_buffer

 
 324 bytes in section .text
 
 324 bytes of CODE memory

Errors: none
Warnings: none
