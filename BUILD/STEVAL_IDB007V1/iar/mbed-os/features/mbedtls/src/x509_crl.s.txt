###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:37
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\mbedtls\src\x509_crl.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\x509_crl.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\x509_crl.s.txt
#        -o .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\x509_crl.o
#        .\mbed-os\features\mbedtls\src\x509_crl.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\x509_crl.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\x509_crl.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\mbedtls\src\x509_crl.c
      1          /*
      2           *  X.509 Certidicate Revocation List (CRL) parsing
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          /*
     22           *  The ITU-T X.509 standard defines a certificate format for PKI.
     23           *
     24           *  http://www.ietf.org/rfc/rfc5280.txt (Certificates and CRLs)
     25           *  http://www.ietf.org/rfc/rfc3279.txt (Alg IDs for CRLs)
     26           *  http://www.ietf.org/rfc/rfc2986.txt (CSRs, aka PKCS#10)
     27           *
     28           *  http://www.itu.int/ITU-T/studygroups/com17/languages/X.680-0207.pdf
     29           *  http://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf
     30           */
     31          
     32          #if !defined(MBEDTLS_CONFIG_FILE)
     33          #include "mbedtls/config.h"
     34          #else
     35          #include MBEDTLS_CONFIG_FILE
     36          #endif
     37          
     38          #if defined(MBEDTLS_X509_CRL_PARSE_C)
     39          
     40          #include "mbedtls/x509_crl.h"
     41          #include "mbedtls/oid.h"
     42          
     43          #include <string.h>
     44          
     45          #if defined(MBEDTLS_PEM_PARSE_C)
     46          #include "mbedtls/pem.h"
     47          #endif
     48          
     49          #if defined(MBEDTLS_PLATFORM_C)
     50          #include "mbedtls/platform.h"
     51          #else
     52          #include <stdlib.h>
     53          #include <stdio.h>
     54          #define mbedtls_free       free
     55          #define mbedtls_calloc    calloc
     56          #define mbedtls_snprintf   snprintf
     57          #endif
     58          
     59          #if defined(_WIN32) && !defined(EFIX64) && !defined(EFI32)
     60          #include <windows.h>
     61          #else
     62          #include <time.h>
     63          #endif
     64          
     65          #if defined(MBEDTLS_FS_IO) || defined(EFIX64) || defined(EFI32)
     66          #include <stdio.h>
     67          #endif
     68          
     69          /* Implementation that should never be optimized out by the compiler */
     70          static void mbedtls_zeroize( void *v, size_t n ) {
     71              volatile unsigned char *p = v; while( n-- ) *p++ = 0;
     72          }
     73          
     74          /*
     75           *  Version  ::=  INTEGER  {  v1(0), v2(1)  }
     76           */
     77          static int x509_crl_get_version( unsigned char **p,
     78                                       const unsigned char *end,
     79                                       int *ver )
     80          {
     81              int ret;
     82          
     83              if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
     84              {
     85                  if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
     86                  {
     87                      *ver = 0;
     88                      return( 0 );
     89                  }
     90          
     91                  return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
     92              }
     93          
     94              return( 0 );
     95          }
     96          
     97          /*
     98           * X.509 CRL v2 extensions (no extensions parsed yet.)
     99           */
    100          static int x509_get_crl_ext( unsigned char **p,
    101                                       const unsigned char *end,
    102                                       mbedtls_x509_buf *ext )
    103          {
    104              int ret;
    105              size_t len = 0;
    106          
    107              /* Get explicit tag */
    108              if( ( ret = mbedtls_x509_get_ext( p, end, ext, 0) ) != 0 )
    109              {
    110                  if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
    111                      return( 0 );
    112          
    113                  return( ret );
    114              }
    115          
    116              while( *p < end )
    117              {
    118                  if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    119                          MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    120                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    121          
    122                  *p += len;
    123              }
    124          
    125              if( *p != end )
    126                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    127                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    128          
    129              return( 0 );
    130          }
    131          
    132          /*
    133           * X.509 CRL v2 entry extensions (no extensions parsed yet.)
    134           */
    135          static int x509_get_crl_entry_ext( unsigned char **p,
    136                                       const unsigned char *end,
    137                                       mbedtls_x509_buf *ext )
    138          {
    139              int ret;
    140              size_t len = 0;
    141          
    142              /* OPTIONAL */
    143              if( end <= *p )
    144                  return( 0 );
    145          
    146              ext->tag = **p;
    147              ext->p = *p;
    148          
    149              /*
    150               * Get CRL-entry extension sequence header
    151               * crlEntryExtensions      Extensions OPTIONAL  -- if present, MUST be v2
    152               */
    153              if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
    154                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    155              {
    156                  if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
    157                  {
    158                      ext->p = NULL;
    159                      return( 0 );
    160                  }
    161                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    162              }
    163          
    164              end = *p + ext->len;
    165          
    166              if( end != *p + ext->len )
    167                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    168                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    169          
    170              while( *p < end )
    171              {
    172                  if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    173                          MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    174                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    175          
    176                  *p += len;
    177              }
    178          
    179              if( *p != end )
    180                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    181                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    182          
    183              return( 0 );
    184          }
    185          
    186          /*
    187           * X.509 CRL Entries
    188           */

   \                                 In section .text, align 2, keep-with-next
    189          static int x509_get_entries( unsigned char **p,
    190                                       const unsigned char *end,
    191                                       mbedtls_x509_crl_entry *entry )
    192          {
   \                     x509_get_entries: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x0005             MOVS     R5,R0
    193              int ret;
    194              size_t entry_len;
    195              mbedtls_x509_crl_entry *cur_entry = entry;
   \   00000006   0x0014             MOVS     R4,R2
    196          
    197              if( *p == end )
   \   00000008   0x6828             LDR      R0,[R5, #+0]
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD073             BEQ      ??x509_get_entries_0
    198                  return( 0 );
    199          
    200              if( ( ret = mbedtls_asn1_get_tag( p, end, &entry_len,
    201                      MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED ) ) != 0 )
   \   0000000E   0x2330             MOVS     R3,#+48
   \   00000010   0xAA02             ADD      R2,SP,#+8
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD004             BEQ      ??x509_get_entries_1
    202              {
    203                  if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   \   0000001C   0x2161             MOVS     R1,#+97
   \   0000001E   0x43C9             MVNS     R1,R1            ;; #-98
   \   00000020   0x4288             CMP      R0,R1
   \   00000022   0xD169             BNE      ??x509_get_entries_2
    204                      return( 0 );
   \   00000024   0xE067             B        ??x509_get_entries_0
    205          
    206                  return( ret );
    207              }
    208          
    209              end = *p + entry_len;
   \                     ??x509_get_entries_1: (+1)
   \   00000026   0x6828             LDR      R0,[R5, #+0]
   \   00000028   0x9902             LDR      R1,[SP, #+8]
   \   0000002A   0x1840             ADDS     R0,R0,R1
   \   0000002C   0x9004             STR      R0,[SP, #+16]
   \   0000002E   0xE000             B        ??x509_get_entries_3
    210          
    211              while( *p < end )
    212              {
    213                  size_t len2;
    214                  const unsigned char *end2;
    215          
    216                  if( ( ret = mbedtls_asn1_get_tag( p, end, &len2,
    217                          MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED ) ) != 0 )
    218                  {
    219                      return( ret );
    220                  }
    221          
    222                  cur_entry->raw.tag = **p;
    223                  cur_entry->raw.p = *p;
    224                  cur_entry->raw.len = len2;
    225                  end2 = *p + len2;
    226          
    227                  if( ( ret = mbedtls_x509_get_serial( p, end2, &cur_entry->serial ) ) != 0 )
    228                      return( ret );
    229          
    230                  if( ( ret = mbedtls_x509_get_time( p, end2,
    231                                             &cur_entry->revocation_date ) ) != 0 )
    232                      return( ret );
    233          
    234                  if( ( ret = x509_get_crl_entry_ext( p, end2,
    235                                                      &cur_entry->entry_ext ) ) != 0 )
    236                      return( ret );
    237          
    238                  if( *p < end )
    239                  {
    240                      cur_entry->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crl_entry ) );
    241          
    242                      if( cur_entry->next == NULL )
    243                          return( MBEDTLS_ERR_X509_ALLOC_FAILED );
    244          
    245                      cur_entry = cur_entry->next;
   \                     ??x509_get_entries_4: (+1)
   \   00000030   0x0004             MOVS     R4,R0
   \                     ??x509_get_entries_3: (+1)
   \   00000032   0x6828             LDR      R0,[R5, #+0]
   \   00000034   0x9904             LDR      R1,[SP, #+16]
   \   00000036   0x4288             CMP      R0,R1
   \   00000038   0xD25D             BCS      ??x509_get_entries_0
   \   0000003A   0x2330             MOVS     R3,#+48
   \   0000003C   0x466A             MOV      R2,SP
   \   0000003E   0x0028             MOVS     R0,R5
   \   00000040   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD157             BNE      ??x509_get_entries_2
   \   00000048   0x6828             LDR      R0,[R5, #+0]
   \   0000004A   0x7801             LDRB     R1,[R0, #+0]
   \   0000004C   0x6021             STR      R1,[R4, #+0]
   \   0000004E   0x60A0             STR      R0,[R4, #+8]
   \   00000050   0x9800             LDR      R0,[SP, #+0]
   \   00000052   0x6060             STR      R0,[R4, #+4]
   \   00000054   0x6828             LDR      R0,[R5, #+0]
   \   00000056   0x9900             LDR      R1,[SP, #+0]
   \   00000058   0x1847             ADDS     R7,R0,R1
   \   0000005A   0x0022             MOVS     R2,R4
   \   0000005C   0x320C             ADDS     R2,R2,#+12
   \   0000005E   0x0039             MOVS     R1,R7
   \   00000060   0x0028             MOVS     R0,R5
   \   00000062   0x.... 0x....      BL       mbedtls_x509_get_serial
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD146             BNE      ??x509_get_entries_2
   \   0000006A   0x0022             MOVS     R2,R4
   \   0000006C   0x3218             ADDS     R2,R2,#+24
   \   0000006E   0x0039             MOVS     R1,R7
   \   00000070   0x0028             MOVS     R0,R5
   \   00000072   0x.... 0x....      BL       mbedtls_x509_get_time
   \   00000076   0x2800             CMP      R0,#+0
   \   00000078   0xD13E             BNE      ??x509_get_entries_2
   \   0000007A   0x2600             MOVS     R6,#+0
   \   0000007C   0x9601             STR      R6,[SP, #+4]
   \   0000007E   0x6828             LDR      R0,[R5, #+0]
   \   00000080   0x42B8             CMP      R0,R7
   \   00000082   0xD210             BCS      ??x509_get_entries_5
   \   00000084   0x7801             LDRB     R1,[R0, #+0]
   \   00000086   0x6321             STR      R1,[R4, #+48]
   \   00000088   0x63A0             STR      R0,[R4, #+56]
   \   0000008A   0x2330             MOVS     R3,#+48
   \   0000008C   0x0022             MOVS     R2,R4
   \   0000008E   0x3234             ADDS     R2,R2,#+52
   \   00000090   0x0039             MOVS     R1,R7
   \   00000092   0x0028             MOVS     R0,R5
   \   00000094   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xD015             BEQ      ??x509_get_entries_6
   \   0000009C   0x2161             MOVS     R1,#+97
   \   0000009E   0x43C9             MVNS     R1,R1            ;; #-98
   \   000000A0   0x4288             CMP      R0,R1
   \   000000A2   0xD10D             BNE      ??x509_get_entries_7
   \   000000A4   0x63A6             STR      R6,[R4, #+56]
   \                     ??x509_get_entries_5: (+1)
   \   000000A6   0x6828             LDR      R0,[R5, #+0]
   \   000000A8   0x9904             LDR      R1,[SP, #+16]
   \   000000AA   0x4288             CMP      R0,R1
   \   000000AC   0xD2C1             BCS      ??x509_get_entries_3
   \   000000AE   0x2140             MOVS     R1,#+64
   \   000000B0   0x2001             MOVS     R0,#+1
   \   000000B2   0x.... 0x....      BL       calloc
   \   000000B6   0x63E0             STR      R0,[R4, #+60]
   \   000000B8   0x2800             CMP      R0,#+0
   \   000000BA   0xD1B9             BNE      ??x509_get_entries_4
   \   000000BC   0x....             LDR      R0,??DataTable12  ;; 0xffffd780
   \   000000BE   0xE01B             B        ??x509_get_entries_2
   \                     ??x509_get_entries_7: (+1)
   \   000000C0   0x....             LDR      R1,??DataTable12_1  ;; 0xffffdb00
   \   000000C2   0x1840             ADDS     R0,R0,R1
   \   000000C4   0xD0EF             BEQ      ??x509_get_entries_5
   \   000000C6   0xE017             B        ??x509_get_entries_2
   \                     ??x509_get_entries_6: (+1)
   \   000000C8   0x6828             LDR      R0,[R5, #+0]
   \   000000CA   0x6B61             LDR      R1,[R4, #+52]
   \   000000CC   0x1846             ADDS     R6,R0,R1
   \   000000CE   0xE003             B        ??x509_get_entries_8
   \                     ??x509_get_entries_9: (+1)
   \   000000D0   0x6828             LDR      R0,[R5, #+0]
   \   000000D2   0x9901             LDR      R1,[SP, #+4]
   \   000000D4   0x1840             ADDS     R0,R0,R1
   \   000000D6   0x6028             STR      R0,[R5, #+0]
   \                     ??x509_get_entries_8: (+1)
   \   000000D8   0x6828             LDR      R0,[R5, #+0]
   \   000000DA   0x42B0             CMP      R0,R6
   \   000000DC   0xD208             BCS      ??x509_get_entries_10
   \   000000DE   0x2330             MOVS     R3,#+48
   \   000000E0   0xAA01             ADD      R2,SP,#+4
   \   000000E2   0x0031             MOVS     R1,R6
   \   000000E4   0x0028             MOVS     R0,R5
   \   000000E6   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   000000EA   0x2800             CMP      R0,#+0
   \   000000EC   0xD0F0             BEQ      ??x509_get_entries_9
   \   000000EE   0xE7E7             B        ??x509_get_entries_7
   \                     ??x509_get_entries_10: (+1)
   \   000000F0   0xD0D9             BEQ      ??x509_get_entries_5
   \   000000F2   0x....             LDR      R0,??DataTable12_2  ;; 0xffffda9a
   \   000000F4   0xE000             B        ??x509_get_entries_2
    246                  }
    247              }
    248          
    249              return( 0 );
   \                     ??x509_get_entries_0: (+1)
   \   000000F6   0x2000             MOVS     R0,#+0
   \                     ??x509_get_entries_2: (+1)
   \   000000F8   0xB005             ADD      SP,SP,#+20
   \   000000FA   0xBDF0             POP      {R4-R7,PC}       ;; return
    250          }
    251          
    252          /*
    253           * Parse one  CRLs in DER format and append it to the chained list
    254           */

   \                                 In section .text, align 2, keep-with-next
    255          int mbedtls_x509_crl_parse_der( mbedtls_x509_crl *chain,
    256                                  const unsigned char *buf, size_t buflen )
    257          {
   \                     mbedtls_x509_crl_parse_der: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
   \   00000004   0x000F             MOVS     R7,R1
   \   00000006   0x0016             MOVS     R6,R2
    258              int ret;
    259              size_t len;
    260              unsigned char *p, *end;
    261              mbedtls_x509_buf sig_params1, sig_params2, sig_oid2;
    262              mbedtls_x509_crl *crl = chain;
   \   00000008   0x0004             MOVS     R4,R0
    263          
    264              /*
    265               * Check for valid input
    266               */
    267              if( crl == NULL || buf == NULL )
   \   0000000A   0xD001             BEQ      ??mbedtls_x509_crl_parse_der_0
   \   0000000C   0x2F00             CMP      R7,#+0
   \   0000000E   0xD101             BNE      ??mbedtls_x509_crl_parse_der_1
    268                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   \                     ??mbedtls_x509_crl_parse_der_0: (+1)
   \   00000010   0x....             LDR      R0,??DataTable12_3  ;; 0xffffd800
   \   00000012   0xE143             B        ??mbedtls_x509_crl_parse_der_2
    269          
    270              memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
   \                     ??mbedtls_x509_crl_parse_der_1: (+1)
   \   00000014   0xA803             ADD      R0,SP,#+12
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x2300             MOVS     R3,#+0
   \   0000001C   0xC00E             STM      R0!,{R1-R3}
    271              memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
   \   0000001E   0xA809             ADD      R0,SP,#+36
   \   00000020   0xC00E             STM      R0!,{R1-R3}
    272              memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
   \   00000022   0xA806             ADD      R0,SP,#+24
   \   00000024   0xC00E             STM      R0!,{R1-R3}
   \   00000026   0xE000             B        ??mbedtls_x509_crl_parse_der_3
    273          
    274              /*
    275               * Add new CRL on the end of the chain if needed.
    276               */
    277              while( crl->version != 0 && crl->next != NULL )
    278                  crl = crl->next;
   \                     ??mbedtls_x509_crl_parse_der_4: (+1)
   \   00000028   0x0004             MOVS     R4,R0
   \                     ??mbedtls_x509_crl_parse_der_3: (+1)
   \   0000002A   0x69A0             LDR      R0,[R4, #+24]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD004             BEQ      ??mbedtls_x509_crl_parse_der_5
   \   00000030   0x0025             MOVS     R5,R4
   \   00000032   0x35F0             ADDS     R5,R5,#+240
   \   00000034   0x6828             LDR      R0,[R5, #+0]
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD1F6             BNE      ??mbedtls_x509_crl_parse_der_4
    279          
    280              if( crl->version != 0 && crl->next == NULL )
   \                     ??mbedtls_x509_crl_parse_der_5: (+1)
   \   0000003A   0x69A0             LDR      R0,[R4, #+24]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD013             BEQ      ??mbedtls_x509_crl_parse_der_6
   \   00000040   0x0025             MOVS     R5,R4
   \   00000042   0x35F0             ADDS     R5,R5,#+240
   \   00000044   0x6828             LDR      R0,[R5, #+0]
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD10E             BNE      ??mbedtls_x509_crl_parse_der_6
    281              {
    282                  crl->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crl ) );
   \   0000004A   0x21F4             MOVS     R1,#+244
   \   0000004C   0x2001             MOVS     R0,#+1
   \   0000004E   0x.... 0x....      BL       calloc
   \   00000052   0x6028             STR      R0,[R5, #+0]
    283          
    284                  if( crl->next == NULL )
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD103             BNE      ??mbedtls_x509_crl_parse_der_7
    285                  {
    286                      mbedtls_x509_crl_free( crl );
   \   00000058   0x0020             MOVS     R0,R4
   \   0000005A   0x.... 0x....      BL       mbedtls_x509_crl_free
    287                      return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   \   0000005E   0xE00A             B.N      ??mbedtls_x509_crl_parse_der_8
    288                  }
    289          
    290                  mbedtls_x509_crl_init( crl->next );
   \                     ??mbedtls_x509_crl_parse_der_7: (+1)
   \   00000060   0x21F4             MOVS     R1,#+244
   \   00000062   0x.... 0x....      BL       __aeabi_memclr4
    291                  crl = crl->next;
   \   00000066   0x682C             LDR      R4,[R5, #+0]
    292              }
    293          
    294              /*
    295               * Copy raw DER-encoded CRL
    296               */
    297              if( ( p = mbedtls_calloc( 1, buflen ) ) == NULL )
   \                     ??mbedtls_x509_crl_parse_der_6: (+1)
   \   00000068   0x0031             MOVS     R1,R6
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0x.... 0x....      BL       calloc
   \   00000070   0x9001             STR      R0,[SP, #+4]
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD101             BNE      ??mbedtls_x509_crl_parse_der_9
    298                  return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   \                     ??mbedtls_x509_crl_parse_der_8: (+1)
   \   00000076   0x....             LDR      R0,??DataTable12  ;; 0xffffd780
   \   00000078   0xE110             B        ??mbedtls_x509_crl_parse_der_2
    299          
    300              memcpy( p, buf, buflen );
   \                     ??mbedtls_x509_crl_parse_der_9: (+1)
   \   0000007A   0x0032             MOVS     R2,R6
   \   0000007C   0x0039             MOVS     R1,R7
   \   0000007E   0x.... 0x....      BL       __aeabi_memcpy
    301          
    302              crl->raw.p = p;
   \   00000082   0x9801             LDR      R0,[SP, #+4]
   \   00000084   0x60A0             STR      R0,[R4, #+8]
    303              crl->raw.len = buflen;
   \   00000086   0x6066             STR      R6,[R4, #+4]
    304          
    305              end = p + buflen;
   \   00000088   0x9801             LDR      R0,[SP, #+4]
   \   0000008A   0x1985             ADDS     R5,R0,R6
    306          
    307              /*
    308               * CertificateList  ::=  SEQUENCE  {
    309               *      tbsCertList          TBSCertList,
    310               *      signatureAlgorithm   AlgorithmIdentifier,
    311               *      signatureValue       BIT STRING  }
    312               */
    313              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    314                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \   0000008C   0x2330             MOVS     R3,#+48
   \   0000008E   0xAA02             ADD      R2,SP,#+8
   \   00000090   0x0029             MOVS     R1,R5
   \   00000092   0xA801             ADD      R0,SP,#+4
   \   00000094   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xD004             BEQ      ??mbedtls_x509_crl_parse_der_10
    315              {
    316                  mbedtls_x509_crl_free( crl );
   \   0000009C   0x0020             MOVS     R0,R4
   \   0000009E   0x.... 0x....      BL       mbedtls_x509_crl_free
    317                  return( MBEDTLS_ERR_X509_INVALID_FORMAT );
   \   000000A2   0x....             LDR      R0,??DataTable13  ;; 0xffffde80
   \   000000A4   0xE0FA             B        ??mbedtls_x509_crl_parse_der_2
    318              }
    319          
    320              if( len != (size_t) ( end - p ) )
   \                     ??mbedtls_x509_crl_parse_der_10: (+1)
   \   000000A6   0x9802             LDR      R0,[SP, #+8]
   \   000000A8   0x9901             LDR      R1,[SP, #+4]
   \   000000AA   0x1A69             SUBS     R1,R5,R1
   \   000000AC   0x4288             CMP      R0,R1
   \   000000AE   0xD000             BEQ      .+4
   \   000000B0   0xE0EE             B        ??mbedtls_x509_crl_parse_der_11
    321              {
    322                  mbedtls_x509_crl_free( crl );
    323                  return( MBEDTLS_ERR_X509_INVALID_FORMAT +
    324                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    325              }
    326          
    327              /*
    328               * TBSCertList  ::=  SEQUENCE  {
    329               */
    330              crl->tbs.p = p;
   \   000000B2   0x9801             LDR      R0,[SP, #+4]
   \   000000B4   0x6160             STR      R0,[R4, #+20]
    331          
    332              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    333                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \   000000B6   0x2330             MOVS     R3,#+48
   \   000000B8   0xAA02             ADD      R2,SP,#+8
   \   000000BA   0x0029             MOVS     R1,R5
   \   000000BC   0xA801             ADD      R0,SP,#+4
   \   000000BE   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   000000C2   0x0005             MOVS     R5,R0
   \   000000C4   0xD005             BEQ      ??mbedtls_x509_crl_parse_der_12
    334              {
    335                  mbedtls_x509_crl_free( crl );
   \   000000C6   0x0020             MOVS     R0,R4
   \   000000C8   0x.... 0x....      BL       mbedtls_x509_crl_free
    336                  return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   \   000000CC   0x....             LDR      R0,??DataTable13  ;; 0xffffde80
   \   000000CE   0x1828             ADDS     R0,R5,R0
   \   000000D0   0xE0E4             B        ??mbedtls_x509_crl_parse_der_2
    337              }
    338          
    339              end = p + len;
   \                     ??mbedtls_x509_crl_parse_der_12: (+1)
   \   000000D2   0x9801             LDR      R0,[SP, #+4]
   \   000000D4   0x9902             LDR      R1,[SP, #+8]
   \   000000D6   0x1845             ADDS     R5,R0,R1
    340              crl->tbs.len = end - crl->tbs.p;
   \   000000D8   0x6960             LDR      R0,[R4, #+20]
   \   000000DA   0x1A28             SUBS     R0,R5,R0
   \   000000DC   0x6120             STR      R0,[R4, #+16]
    341          
    342              /*
    343               * Version  ::=  INTEGER  OPTIONAL {  v1(0), v2(1)  }
    344               *               -- if present, MUST be v2
    345               *
    346               * signature            AlgorithmIdentifier
    347               */
    348              if( ( ret = x509_crl_get_version( &p, end, &crl->version ) ) != 0 ||
    349                  ( ret = mbedtls_x509_get_alg( &p, end, &crl->sig_oid, &sig_params1 ) ) != 0 )
   \   000000DE   0x0022             MOVS     R2,R4
   \   000000E0   0x3218             ADDS     R2,R2,#+24
   \   000000E2   0x0029             MOVS     R1,R5
   \   000000E4   0xA801             ADD      R0,SP,#+4
   \   000000E6   0x.... 0x....      BL       mbedtls_asn1_get_int
   \   000000EA   0x2800             CMP      R0,#+0
   \   000000EC   0xD00A             BEQ      ??mbedtls_x509_crl_parse_der_13
   \   000000EE   0x2161             MOVS     R1,#+97
   \   000000F0   0x43C9             MVNS     R1,R1            ;; #-98
   \   000000F2   0x4288             CMP      R0,R1
   \   000000F4   0xD102             BNE      ??mbedtls_x509_crl_parse_der_14
   \   000000F6   0x2000             MOVS     R0,#+0
   \   000000F8   0x61A0             STR      R0,[R4, #+24]
   \   000000FA   0xE003             B        ??mbedtls_x509_crl_parse_der_13
   \                     ??mbedtls_x509_crl_parse_der_14: (+1)
   \   000000FC   0x....             LDR      R1,??DataTable13_1  ;; 0xffffde00
   \   000000FE   0x1846             ADDS     R6,R0,R1
   \   00000100   0xD000             BEQ      .+4
   \   00000102   0xE0BD             B        ??mbedtls_x509_crl_parse_der_15
   \                     ??mbedtls_x509_crl_parse_der_13: (+1)
   \   00000104   0xAB03             ADD      R3,SP,#+12
   \   00000106   0x0022             MOVS     R2,R4
   \   00000108   0x321C             ADDS     R2,R2,#+28
   \   0000010A   0x0029             MOVS     R1,R5
   \   0000010C   0xA801             ADD      R0,SP,#+4
   \   0000010E   0x.... 0x....      BL       mbedtls_x509_get_alg
   \   00000112   0x0006             MOVS     R6,R0
   \   00000114   0xD000             BEQ      .+4
   \   00000116   0xE0B3             B        ??mbedtls_x509_crl_parse_der_15
    350              {
    351                  mbedtls_x509_crl_free( crl );
    352                  return( ret );
    353              }
    354          
    355              if( crl->version < 0 || crl->version > 1 )
   \   00000118   0x69A0             LDR      R0,[R4, #+24]
   \   0000011A   0x2802             CMP      R0,#+2
   \   0000011C   0xD304             BCC      ??mbedtls_x509_crl_parse_der_16
    356              {
    357                  mbedtls_x509_crl_free( crl );
   \   0000011E   0x0020             MOVS     R0,R4
   \   00000120   0x.... 0x....      BL       mbedtls_x509_crl_free
    358                  return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
   \   00000124   0x....             LDR      R0,??DataTable13_2  ;; 0xffffda80
   \   00000126   0xE0B9             B        ??mbedtls_x509_crl_parse_der_2
    359              }
    360          
    361              crl->version++;
   \                     ??mbedtls_x509_crl_parse_der_16: (+1)
   \   00000128   0x1C40             ADDS     R0,R0,#+1
   \   0000012A   0x61A0             STR      R0,[R4, #+24]
    362          
    363              if( ( ret = mbedtls_x509_get_sig_alg( &crl->sig_oid, &sig_params1,
    364                                            &crl->sig_md, &crl->sig_pk,
    365                                            &crl->sig_opts ) ) != 0 )
   \   0000012C   0x0020             MOVS     R0,R4
   \   0000012E   0x30EC             ADDS     R0,R0,#+236
   \   00000130   0x9000             STR      R0,[SP, #+0]
   \   00000132   0x0023             MOVS     R3,R4
   \   00000134   0x33E9             ADDS     R3,R3,#+233
   \   00000136   0x0022             MOVS     R2,R4
   \   00000138   0x32E8             ADDS     R2,R2,#+232
   \   0000013A   0xA903             ADD      R1,SP,#+12
   \   0000013C   0x0020             MOVS     R0,R4
   \   0000013E   0x301C             ADDS     R0,R0,#+28
   \   00000140   0x.... 0x....      BL       mbedtls_x509_get_sig_alg
   \   00000144   0x2800             CMP      R0,#+0
   \   00000146   0xD004             BEQ      ??mbedtls_x509_crl_parse_der_17
    366              {
    367                  mbedtls_x509_crl_free( crl );
   \   00000148   0x0020             MOVS     R0,R4
   \   0000014A   0x.... 0x....      BL       mbedtls_x509_crl_free
    368                  return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG );
   \   0000014E   0x....             LDR      R0,??DataTable13_3  ;; 0xffffda00
   \   00000150   0xE0A4             B        ??mbedtls_x509_crl_parse_der_2
    369              }
    370          
    371              /*
    372               * issuer               Name
    373               */
    374              crl->issuer_raw.p = p;
   \                     ??mbedtls_x509_crl_parse_der_17: (+1)
   \   00000152   0x9801             LDR      R0,[SP, #+4]
   \   00000154   0x6320             STR      R0,[R4, #+48]
    375          
    376              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    377                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \   00000156   0x2330             MOVS     R3,#+48
   \   00000158   0xAA02             ADD      R2,SP,#+8
   \   0000015A   0x0029             MOVS     R1,R5
   \   0000015C   0xA801             ADD      R0,SP,#+4
   \   0000015E   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   00000162   0x0006             MOVS     R6,R0
   \   00000164   0xD005             BEQ      ??mbedtls_x509_crl_parse_der_18
    378              {
    379                  mbedtls_x509_crl_free( crl );
   \   00000166   0x0020             MOVS     R0,R4
   \   00000168   0x.... 0x....      BL       mbedtls_x509_crl_free
    380                  return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   \   0000016C   0x....             LDR      R0,??DataTable13  ;; 0xffffde80
   \   0000016E   0x1830             ADDS     R0,R6,R0
   \   00000170   0xE094             B        ??mbedtls_x509_crl_parse_der_2
    381              }
    382          
    383              if( ( ret = mbedtls_x509_get_name( &p, p + len, &crl->issuer ) ) != 0 )
   \                     ??mbedtls_x509_crl_parse_der_18: (+1)
   \   00000172   0x0022             MOVS     R2,R4
   \   00000174   0x3234             ADDS     R2,R2,#+52
   \   00000176   0x9801             LDR      R0,[SP, #+4]
   \   00000178   0x9902             LDR      R1,[SP, #+8]
   \   0000017A   0x1841             ADDS     R1,R0,R1
   \   0000017C   0xA801             ADD      R0,SP,#+4
   \   0000017E   0x.... 0x....      BL       mbedtls_x509_get_name
   \   00000182   0x0006             MOVS     R6,R0
   \   00000184   0xD17C             BNE      ??mbedtls_x509_crl_parse_der_15
    384              {
    385                  mbedtls_x509_crl_free( crl );
    386                  return( ret );
    387              }
    388          
    389              crl->issuer_raw.len = p - crl->issuer_raw.p;
   \   00000186   0x9801             LDR      R0,[SP, #+4]
   \   00000188   0x6B21             LDR      R1,[R4, #+48]
   \   0000018A   0x1A40             SUBS     R0,R0,R1
   \   0000018C   0x62E0             STR      R0,[R4, #+44]
    390          
    391              /*
    392               * thisUpdate          Time
    393               * nextUpdate          Time OPTIONAL
    394               */
    395              if( ( ret = mbedtls_x509_get_time( &p, end, &crl->this_update ) ) != 0 )
   \   0000018E   0x0022             MOVS     R2,R4
   \   00000190   0x3254             ADDS     R2,R2,#+84
   \   00000192   0x0029             MOVS     R1,R5
   \   00000194   0xA801             ADD      R0,SP,#+4
   \   00000196   0x.... 0x....      BL       mbedtls_x509_get_time
   \   0000019A   0x0006             MOVS     R6,R0
   \   0000019C   0xD170             BNE      ??mbedtls_x509_crl_parse_der_15
    396              {
    397                  mbedtls_x509_crl_free( crl );
    398                  return( ret );
    399              }
    400          
    401              if( ( ret = mbedtls_x509_get_time( &p, end, &crl->next_update ) ) != 0 )
   \   0000019E   0x0022             MOVS     R2,R4
   \   000001A0   0x326C             ADDS     R2,R2,#+108
   \   000001A2   0x0029             MOVS     R1,R5
   \   000001A4   0xA801             ADD      R0,SP,#+4
   \   000001A6   0x.... 0x....      BL       mbedtls_x509_get_time
   \   000001AA   0x0006             MOVS     R6,R0
   \   000001AC   0xD005             BEQ      ??mbedtls_x509_crl_parse_der_19
    402              {
    403                  if( ret != ( MBEDTLS_ERR_X509_INVALID_DATE +
    404                                  MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) &&
    405                      ret != ( MBEDTLS_ERR_X509_INVALID_DATE +
    406                                  MBEDTLS_ERR_ASN1_OUT_OF_DATA ) )
   \   000001AE   0x....             LDR      R0,??DataTable13_4  ;; 0xffffdb9e
   \   000001B0   0x4286             CMP      R6,R0
   \   000001B2   0xD002             BEQ      ??mbedtls_x509_crl_parse_der_19
   \   000001B4   0x....             LDR      R0,??DataTable13_5  ;; 0xffffdba0
   \   000001B6   0x4286             CMP      R6,R0
   \   000001B8   0xD162             BNE      ??mbedtls_x509_crl_parse_der_15
    407                  {
    408                      mbedtls_x509_crl_free( crl );
    409                      return( ret );
    410                  }
    411              }
    412          
    413              /*
    414               * revokedCertificates    SEQUENCE OF SEQUENCE   {
    415               *      userCertificate        CertificateSerialNumber,
    416               *      revocationDate         Time,
    417               *      crlEntryExtensions     Extensions OPTIONAL
    418               *                                   -- if present, MUST be v2
    419               *                        } OPTIONAL
    420               */
    421              if( ( ret = x509_get_entries( &p, end, &crl->entry ) ) != 0 )
   \                     ??mbedtls_x509_crl_parse_der_19: (+1)
   \   000001BA   0x0022             MOVS     R2,R4
   \   000001BC   0x3284             ADDS     R2,R2,#+132
   \   000001BE   0x0029             MOVS     R1,R5
   \   000001C0   0xA801             ADD      R0,SP,#+4
   \   000001C2   0x.... 0x....      BL       x509_get_entries
   \   000001C6   0x0006             MOVS     R6,R0
   \   000001C8   0xD15A             BNE      ??mbedtls_x509_crl_parse_der_15
    422              {
    423                  mbedtls_x509_crl_free( crl );
    424                  return( ret );
    425              }
    426          
    427              /*
    428               * crlExtensions          EXPLICIT Extensions OPTIONAL
    429               *                              -- if present, MUST be v2
    430               */
    431              if( crl->version == 2 )
   \   000001CA   0x69A0             LDR      R0,[R4, #+24]
   \   000001CC   0x2802             CMP      R0,#+2
   \   000001CE   0xD122             BNE      ??mbedtls_x509_crl_parse_der_20
    432              {
    433                  ret = x509_get_crl_ext( &p, end, &crl->crl_ext );
   \   000001D0   0x2000             MOVS     R0,#+0
   \   000001D2   0x9000             STR      R0,[SP, #+0]
   \   000001D4   0x2300             MOVS     R3,#+0
   \   000001D6   0x0022             MOVS     R2,R4
   \   000001D8   0x32C4             ADDS     R2,R2,#+196
   \   000001DA   0x0029             MOVS     R1,R5
   \   000001DC   0xA801             ADD      R0,SP,#+4
   \   000001DE   0x.... 0x....      BL       mbedtls_x509_get_ext
   \   000001E2   0x2800             CMP      R0,#+0
   \   000001E4   0xD009             BEQ      ??mbedtls_x509_crl_parse_der_21
   \   000001E6   0x2161             MOVS     R1,#+97
   \   000001E8   0x43C9             MVNS     R1,R1            ;; #-98
   \   000001EA   0x4288             CMP      R0,R1
   \   000001EC   0xD013             BEQ      ??mbedtls_x509_crl_parse_der_20
   \   000001EE   0x0006             MOVS     R6,R0
   \   000001F0   0xE046             B        ??mbedtls_x509_crl_parse_der_15
   \                     ??mbedtls_x509_crl_parse_der_22: (+1)
   \   000001F2   0x9801             LDR      R0,[SP, #+4]
   \   000001F4   0x9900             LDR      R1,[SP, #+0]
   \   000001F6   0x1840             ADDS     R0,R0,R1
   \   000001F8   0x9001             STR      R0,[SP, #+4]
   \                     ??mbedtls_x509_crl_parse_der_21: (+1)
   \   000001FA   0x9801             LDR      R0,[SP, #+4]
   \   000001FC   0x42A8             CMP      R0,R5
   \   000001FE   0xD219             BCS      ??mbedtls_x509_crl_parse_der_23
   \   00000200   0x2330             MOVS     R3,#+48
   \   00000202   0x466A             MOV      R2,SP
   \   00000204   0x0029             MOVS     R1,R5
   \   00000206   0xA801             ADD      R0,SP,#+4
   \   00000208   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   0000020C   0x2800             CMP      R0,#+0
   \   0000020E   0xD0F0             BEQ      ??mbedtls_x509_crl_parse_der_22
   \   00000210   0x....             LDR      R1,??DataTable12_1  ;; 0xffffdb00
   \   00000212   0x1846             ADDS     R6,R0,R1
    434          
    435                  if( ret != 0 )
   \   00000214   0xD134             BNE      ??mbedtls_x509_crl_parse_der_15
    436                  {
    437                      mbedtls_x509_crl_free( crl );
    438                      return( ret );
    439                  }
    440              }
    441          
    442              if( p != end )
   \                     ??mbedtls_x509_crl_parse_der_20: (+1)
   \   00000216   0x9801             LDR      R0,[SP, #+4]
   \   00000218   0x42A8             CMP      R0,R5
   \   0000021A   0xD139             BNE      ??mbedtls_x509_crl_parse_der_11
    443              {
    444                  mbedtls_x509_crl_free( crl );
    445                  return( MBEDTLS_ERR_X509_INVALID_FORMAT +
    446                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    447              }
    448          
    449              end = crl->raw.p + crl->raw.len;
   \   0000021C   0x68A0             LDR      R0,[R4, #+8]
   \   0000021E   0x6861             LDR      R1,[R4, #+4]
   \   00000220   0x1845             ADDS     R5,R0,R1
    450          
    451              /*
    452               *  signatureAlgorithm   AlgorithmIdentifier,
    453               *  signatureValue       BIT STRING
    454               */
    455              if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
   \   00000222   0xAB09             ADD      R3,SP,#+36
   \   00000224   0xAA06             ADD      R2,SP,#+24
   \   00000226   0x0029             MOVS     R1,R5
   \   00000228   0xA801             ADD      R0,SP,#+4
   \   0000022A   0x.... 0x....      BL       mbedtls_x509_get_alg
   \   0000022E   0x0006             MOVS     R6,R0
   \   00000230   0xD003             BEQ      ??mbedtls_x509_crl_parse_der_24
    456              {
    457                  mbedtls_x509_crl_free( crl );
   \   00000232   0xE025             B.N      ??mbedtls_x509_crl_parse_der_15
   \                     ??mbedtls_x509_crl_parse_der_23: (+1)
   \   00000234   0xD0EF             BEQ      ??mbedtls_x509_crl_parse_der_20
   \   00000236   0x....             LDR      R6,??DataTable12_2  ;; 0xffffda9a
    458                  return( ret );
    459              }
   \   00000238   0xE022             B.N      ??mbedtls_x509_crl_parse_der_15
    460          
    461              if( crl->sig_oid.len != sig_oid2.len ||
    462                  memcmp( crl->sig_oid.p, sig_oid2.p, crl->sig_oid.len ) != 0 ||
    463                  sig_params1.len != sig_params2.len ||
    464                  ( sig_params1.len != 0 &&
    465                    memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
   \                     ??mbedtls_x509_crl_parse_der_24: (+1)
   \   0000023A   0x6A22             LDR      R2,[R4, #+32]
   \   0000023C   0x9807             LDR      R0,[SP, #+28]
   \   0000023E   0x4282             CMP      R2,R0
   \   00000240   0xD111             BNE      ??mbedtls_x509_crl_parse_der_25
   \   00000242   0x9908             LDR      R1,[SP, #+32]
   \   00000244   0x6A60             LDR      R0,[R4, #+36]
   \   00000246   0x.... 0x....      BL       memcmp
   \   0000024A   0x2800             CMP      R0,#+0
   \   0000024C   0xD10B             BNE      ??mbedtls_x509_crl_parse_der_25
   \   0000024E   0x9A04             LDR      R2,[SP, #+16]
   \   00000250   0x980A             LDR      R0,[SP, #+40]
   \   00000252   0x4282             CMP      R2,R0
   \   00000254   0xD107             BNE      ??mbedtls_x509_crl_parse_der_25
   \   00000256   0x2A00             CMP      R2,#+0
   \   00000258   0xD00A             BEQ      ??mbedtls_x509_crl_parse_der_26
   \   0000025A   0x990B             LDR      R1,[SP, #+44]
   \   0000025C   0x9805             LDR      R0,[SP, #+20]
   \   0000025E   0x.... 0x....      BL       memcmp
   \   00000262   0x2800             CMP      R0,#+0
   \   00000264   0xD004             BEQ      ??mbedtls_x509_crl_parse_der_26
    466              {
    467                  mbedtls_x509_crl_free( crl );
   \                     ??mbedtls_x509_crl_parse_der_25: (+1)
   \   00000266   0x0020             MOVS     R0,R4
   \   00000268   0x.... 0x....      BL       mbedtls_x509_crl_free
    468                  return( MBEDTLS_ERR_X509_SIG_MISMATCH );
   \   0000026C   0x....             LDR      R0,??DataTable14  ;; 0xffffd980
   \   0000026E   0xE015             B        ??mbedtls_x509_crl_parse_der_2
    469              }
    470          
    471              if( ( ret = mbedtls_x509_get_sig( &p, end, &crl->sig ) ) != 0 )
   \                     ??mbedtls_x509_crl_parse_der_26: (+1)
   \   00000270   0x0022             MOVS     R2,R4
   \   00000272   0x32DC             ADDS     R2,R2,#+220
   \   00000274   0x0029             MOVS     R1,R5
   \   00000276   0xA801             ADD      R0,SP,#+4
   \   00000278   0x.... 0x....      BL       mbedtls_x509_get_sig
   \   0000027C   0x0006             MOVS     R6,R0
   \   0000027E   0xD004             BEQ      ??mbedtls_x509_crl_parse_der_27
    472              {
    473                  mbedtls_x509_crl_free( crl );
   \                     ??mbedtls_x509_crl_parse_der_15: (+1)
   \   00000280   0x0020             MOVS     R0,R4
   \   00000282   0x.... 0x....      BL       mbedtls_x509_crl_free
    474                  return( ret );
   \   00000286   0x0030             MOVS     R0,R6
   \   00000288   0xE008             B        ??mbedtls_x509_crl_parse_der_2
    475              }
    476          
    477              if( p != end )
   \                     ??mbedtls_x509_crl_parse_der_27: (+1)
   \   0000028A   0x9801             LDR      R0,[SP, #+4]
   \   0000028C   0x42A8             CMP      R0,R5
   \   0000028E   0xD004             BEQ      ??mbedtls_x509_crl_parse_der_28
    478              {
    479                  mbedtls_x509_crl_free( crl );
   \                     ??mbedtls_x509_crl_parse_der_11: (+1)
   \   00000290   0x0020             MOVS     R0,R4
   \   00000292   0x.... 0x....      BL       mbedtls_x509_crl_free
    480                  return( MBEDTLS_ERR_X509_INVALID_FORMAT +
    481                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \   00000296   0x....             LDR      R0,??DataTable14_1  ;; 0xffffde1a
   \   00000298   0xE000             B        ??mbedtls_x509_crl_parse_der_2
    482              }
    483          
    484              return( 0 );
   \                     ??mbedtls_x509_crl_parse_der_28: (+1)
   \   0000029A   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_x509_crl_parse_der_2: (+1)
   \   0000029C   0xB00D             ADD      SP,SP,#+52
   \   0000029E   0xBDF0             POP      {R4-R7,PC}       ;; return
    485          }
    486          
    487          /*
    488           * Parse one or more CRLs and add them to the chained list
    489           */

   \                                 In section .text, align 4, keep-with-next
    490          int mbedtls_x509_crl_parse( mbedtls_x509_crl *chain, const unsigned char *buf, size_t buflen )
    491          {
   \                     mbedtls_x509_crl_parse: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0015             MOVS     R5,R2
    492          #if defined(MBEDTLS_PEM_PARSE_C)
    493              int ret;
    494              size_t use_len;
    495              mbedtls_pem_context pem;
    496              int is_pem = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    497          
    498              if( chain == NULL || buf == NULL )
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD001             BEQ      ??mbedtls_x509_crl_parse_0
   \   0000000E   0x2C00             CMP      R4,#+0
   \   00000010   0xD101             BNE      ??mbedtls_x509_crl_parse_1
    499                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   \                     ??mbedtls_x509_crl_parse_0: (+1)
   \   00000012   0x....             LDR      R0,??DataTable14_2  ;; 0xffffd800
   \   00000014   0xE038             B        ??mbedtls_x509_crl_parse_2
    500          
    501              do
    502              {
    503                  mbedtls_pem_init( &pem );
   \                     ??mbedtls_x509_crl_parse_1: (+1)
   \   00000016   0xA804             ADD      R0,SP,#+16
   \   00000018   0x.... 0x....      BL       mbedtls_pem_init
    504          
    505                  // Avoid calling mbedtls_pem_read_buffer() on non-null-terminated
    506                  // string
    507                  if( buflen == 0 || buf[buflen - 1] != '\0' )
   \   0000001C   0x2D00             CMP      R5,#+0
   \   0000001E   0xD004             BEQ      ??mbedtls_x509_crl_parse_3
   \   00000020   0x1960             ADDS     R0,R4,R5
   \   00000022   0x1E40             SUBS     R0,R0,#+1
   \   00000024   0x7800             LDRB     R0,[R0, #+0]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD002             BEQ      ??mbedtls_x509_crl_parse_4
    508                      ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
   \                     ??mbedtls_x509_crl_parse_3: (+1)
   \   0000002A   0x....             LDR      R6,??DataTable14_3  ;; 0xffffef80
    509                  else
    510                      ret = mbedtls_pem_read_buffer( &pem,
    511                                                     "-----BEGIN X509 CRL-----",
    512                                                     "-----END X509 CRL-----",
    513                                                      buf, NULL, 0, &use_len );
    514          
    515                  if( ret == 0 )
    516                  {
    517                      /*
    518                       * Was PEM encoded
    519                       */
    520                      is_pem = 1;
    521          
    522                      buflen -= use_len;
    523                      buf += use_len;
    524          
    525                      if( ( ret = mbedtls_x509_crl_parse_der( chain,
    526                                                      pem.buf, pem.buflen ) ) != 0 )
    527                      {
    528                          mbedtls_pem_free( &pem );
    529                          return( ret );
    530                      }
    531                  }
    532                  else if( is_pem )
   \                     ??mbedtls_x509_crl_parse_5: (+1)
   \   0000002C   0x2F00             CMP      R7,#+0
   \   0000002E   0xE017             B.N      ??mbedtls_x509_crl_parse_6
   \                     ??mbedtls_x509_crl_parse_4: (+1)
   \   00000030   0xA803             ADD      R0,SP,#+12
   \   00000032   0x9002             STR      R0,[SP, #+8]
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x9001             STR      R0,[SP, #+4]
   \   00000038   0x9000             STR      R0,[SP, #+0]
   \   0000003A   0x0023             MOVS     R3,R4
   \   0000003C   0x....             ADR.N    R2,?_1
   \   0000003E   0xBF00             Nop      
   \   00000040   0x....             ADR.N    R1,?_0
   \   00000042   0xA804             ADD      R0,SP,#+16
   \   00000044   0x.... 0x....      BL       mbedtls_pem_read_buffer
   \   00000048   0x0006             MOVS     R6,R0
   \   0000004A   0xD1EF             BNE      ??mbedtls_x509_crl_parse_5
   \   0000004C   0x2701             MOVS     R7,#+1
   \   0000004E   0x9803             LDR      R0,[SP, #+12]
   \   00000050   0x1A2D             SUBS     R5,R5,R0
   \   00000052   0x1824             ADDS     R4,R4,R0
   \   00000054   0x9A05             LDR      R2,[SP, #+20]
   \   00000056   0x9904             LDR      R1,[SP, #+16]
   \   00000058   0x9808             LDR      R0,[SP, #+32]
   \   0000005A   0x.... 0x....      BL       mbedtls_x509_crl_parse_der
   \   0000005E   0x0006             MOVS     R6,R0
   \                     ??mbedtls_x509_crl_parse_6: (+1)
   \   00000060   0xD004             BEQ      ??mbedtls_x509_crl_parse_7
   \   00000062   0xA804             ADD      R0,SP,#+16
   \   00000064   0x.... 0x....      BL       mbedtls_pem_free
   \   00000068   0x0030             MOVS     R0,R6
   \   0000006A   0xE00D             B        ??mbedtls_x509_crl_parse_2
    533                  {
    534                      mbedtls_pem_free( &pem );
    535                      return( ret );
    536                  }
    537          
    538                  mbedtls_pem_free( &pem );
   \                     ??mbedtls_x509_crl_parse_7: (+1)
   \   0000006C   0xA804             ADD      R0,SP,#+16
   \   0000006E   0x.... 0x....      BL       mbedtls_pem_free
    539              }
    540              /* In the PEM case, buflen is 1 at the end, for the terminated NULL byte.
    541               * And a valid CRL cannot be less than 1 byte anyway. */
    542              while( is_pem && buflen > 1 );
   \   00000072   0x2F00             CMP      R7,#+0
   \   00000074   0xD003             BEQ      ??mbedtls_x509_crl_parse_8
   \   00000076   0x2D02             CMP      R5,#+2
   \   00000078   0xD2CD             BCS      ??mbedtls_x509_crl_parse_1
    543          
    544              if( is_pem )
    545                  return( 0 );
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0xE004             B        ??mbedtls_x509_crl_parse_2
    546              else
    547          #endif /* MBEDTLS_PEM_PARSE_C */
    548                  return( mbedtls_x509_crl_parse_der( chain, buf, buflen ) );
   \                     ??mbedtls_x509_crl_parse_8: (+1)
   \   0000007E   0x002A             MOVS     R2,R5
   \   00000080   0x0021             MOVS     R1,R4
   \   00000082   0x9808             LDR      R0,[SP, #+32]
   \   00000084   0x.... 0x....      BL       mbedtls_x509_crl_parse_der
   \                     ??mbedtls_x509_crl_parse_2: (+1)
   \   00000088   0xB009             ADD      SP,SP,#+36
   \   0000008A   0xBDF0             POP      {R4-R7,PC}       ;; return
    549          }
    550          
    551          #if defined(MBEDTLS_FS_IO)
    552          /*
    553           * Load one or more CRLs and add them to the chained list
    554           */
    555          int mbedtls_x509_crl_parse_file( mbedtls_x509_crl *chain, const char *path )
    556          {
    557              int ret;
    558              size_t n;
    559              unsigned char *buf;
    560          
    561              if( ( ret = mbedtls_pk_load_file( path, &buf, &n ) ) != 0 )
    562                  return( ret );
    563          
    564              ret = mbedtls_x509_crl_parse( chain, buf, n );
    565          
    566              mbedtls_zeroize( buf, n );
    567              mbedtls_free( buf );
    568          
    569              return( ret );
    570          }
    571          #endif /* MBEDTLS_FS_IO */
    572          
    573          /*
    574           * Return an informational string about the certificate.
    575           */
    576          #define BEFORE_COLON    14
    577          #define BC              "14"
    578          /*
    579           * Return an informational string about the CRL.
    580           */

   \                                 In section .text, align 4, keep-with-next
    581          int mbedtls_x509_crl_info( char *buf, size_t size, const char *prefix,
    582                             const mbedtls_x509_crl *crl )
    583          {
   \                     mbedtls_x509_crl_info: (+1)
   \   00000000   0xB5F6             PUSH     {R1,R2,R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x001F             MOVS     R7,R3
    584              int ret;
    585              size_t n;
    586              char *p;
    587              const mbedtls_x509_crl_entry *entry;
    588          
    589              p = buf;
    590              n = size;
    591          
    592              ret = mbedtls_snprintf( p, n, "%sCRL version   : %d",
    593                                         prefix, crl->version );
   \   00000008   0x003E             MOVS     R6,R7
   \   0000000A   0x3618             ADDS     R6,R6,#+24
   \   0000000C   0x6830             LDR      R0,[R6, #+0]
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0x9B08             LDR      R3,[SP, #+32]
   \   00000012   0xBF00             Nop      
   \   00000014   0x....             ADR.N    R2,?_2
   \   00000016   0x9907             LDR      R1,[SP, #+28]
   \   00000018   0x0028             MOVS     R0,R5
   \   0000001A   0x.... 0x....      BL       snprintf
    594              MBEDTLS_X509_SAFE_SNPRINTF;
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD500             BPL      .+4
   \   00000022   0xE0BF             B        ??mbedtls_x509_crl_info_0
   \   00000024   0x9907             LDR      R1,[SP, #+28]
   \   00000026   0x4288             CMP      R0,R1
   \   00000028   0xD300             BCC      .+4
   \   0000002A   0xE0BB             B        ??mbedtls_x509_crl_info_0
   \   0000002C   0x1A0C             SUBS     R4,R1,R0
   \   0000002E   0x182D             ADDS     R5,R5,R0
    595          
    596              ret = mbedtls_snprintf( p, n, "\n%sissuer name   : ", prefix );
   \   00000030   0x9B08             LDR      R3,[SP, #+32]
   \   00000032   0xBF00             Nop      
   \   00000034   0x....             ADR.N    R2,?_3
   \   00000036   0x0021             MOVS     R1,R4
   \   00000038   0x0028             MOVS     R0,R5
   \   0000003A   0x.... 0x....      BL       snprintf
    597              MBEDTLS_X509_SAFE_SNPRINTF;
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD500             BPL      .+4
   \   00000042   0xE0AF             B        ??mbedtls_x509_crl_info_0
   \   00000044   0x42A0             CMP      R0,R4
   \   00000046   0xD300             BCC      .+4
   \   00000048   0xE0AC             B        ??mbedtls_x509_crl_info_0
   \   0000004A   0x1A24             SUBS     R4,R4,R0
   \   0000004C   0x182D             ADDS     R5,R5,R0
    598              ret = mbedtls_x509_dn_gets( p, n, &crl->issuer );
   \   0000004E   0x003A             MOVS     R2,R7
   \   00000050   0x3234             ADDS     R2,R2,#+52
   \   00000052   0x0021             MOVS     R1,R4
   \   00000054   0x0028             MOVS     R0,R5
   \   00000056   0x.... 0x....      BL       mbedtls_x509_dn_gets
    599              MBEDTLS_X509_SAFE_SNPRINTF;
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD500             BPL      .+4
   \   0000005E   0xE0A1             B        ??mbedtls_x509_crl_info_0
   \   00000060   0x42A0             CMP      R0,R4
   \   00000062   0xD300             BCC      .+4
   \   00000064   0xE09E             B        ??mbedtls_x509_crl_info_0
   \   00000066   0x1A24             SUBS     R4,R4,R0
   \   00000068   0x182D             ADDS     R5,R5,R0
    600          
    601              ret = mbedtls_snprintf( p, n, "\n%sthis update   : " \
    602                             "%04d-%02d-%02d %02d:%02d:%02d", prefix,
    603                             crl->this_update.year, crl->this_update.mon,
    604                             crl->this_update.day,  crl->this_update.hour,
    605                             crl->this_update.min,  crl->this_update.sec );
   \   0000006A   0x6D30             LDR      R0,[R6, #+80]
   \   0000006C   0x9005             STR      R0,[SP, #+20]
   \   0000006E   0x6CF0             LDR      R0,[R6, #+76]
   \   00000070   0x9004             STR      R0,[SP, #+16]
   \   00000072   0x6CB0             LDR      R0,[R6, #+72]
   \   00000074   0x9003             STR      R0,[SP, #+12]
   \   00000076   0x6C70             LDR      R0,[R6, #+68]
   \   00000078   0x9002             STR      R0,[SP, #+8]
   \   0000007A   0x6C30             LDR      R0,[R6, #+64]
   \   0000007C   0x9001             STR      R0,[SP, #+4]
   \   0000007E   0x6BF0             LDR      R0,[R6, #+60]
   \   00000080   0x9000             STR      R0,[SP, #+0]
   \   00000082   0x9B08             LDR      R3,[SP, #+32]
   \   00000084   0x....             ADR.N    R2,?_4
   \   00000086   0x0021             MOVS     R1,R4
   \   00000088   0x0028             MOVS     R0,R5
   \   0000008A   0x.... 0x....      BL       snprintf
    606              MBEDTLS_X509_SAFE_SNPRINTF;
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD500             BPL      .+4
   \   00000092   0xE087             B        ??mbedtls_x509_crl_info_0
   \   00000094   0x42A0             CMP      R0,R4
   \   00000096   0xD300             BCC      .+4
   \   00000098   0xE084             B        ??mbedtls_x509_crl_info_0
   \   0000009A   0x1A24             SUBS     R4,R4,R0
   \   0000009C   0x182D             ADDS     R5,R5,R0
    607          
    608              ret = mbedtls_snprintf( p, n, "\n%snext update   : " \
    609                             "%04d-%02d-%02d %02d:%02d:%02d", prefix,
    610                             crl->next_update.year, crl->next_update.mon,
    611                             crl->next_update.day,  crl->next_update.hour,
    612                             crl->next_update.min,  crl->next_update.sec );
   \   0000009E   0x6EB0             LDR      R0,[R6, #+104]
   \   000000A0   0x9005             STR      R0,[SP, #+20]
   \   000000A2   0x6E70             LDR      R0,[R6, #+100]
   \   000000A4   0x9004             STR      R0,[SP, #+16]
   \   000000A6   0x6E30             LDR      R0,[R6, #+96]
   \   000000A8   0x9003             STR      R0,[SP, #+12]
   \   000000AA   0x6DF0             LDR      R0,[R6, #+92]
   \   000000AC   0x9002             STR      R0,[SP, #+8]
   \   000000AE   0x6DB0             LDR      R0,[R6, #+88]
   \   000000B0   0x9001             STR      R0,[SP, #+4]
   \   000000B2   0x6D70             LDR      R0,[R6, #+84]
   \   000000B4   0x9000             STR      R0,[SP, #+0]
   \   000000B6   0x9B08             LDR      R3,[SP, #+32]
   \   000000B8   0x....             ADR.N    R2,?_5
   \   000000BA   0x0021             MOVS     R1,R4
   \   000000BC   0x0028             MOVS     R0,R5
   \   000000BE   0x.... 0x....      BL       snprintf
    613              MBEDTLS_X509_SAFE_SNPRINTF;
   \   000000C2   0x2800             CMP      R0,#+0
   \   000000C4   0xD46E             BMI      ??mbedtls_x509_crl_info_0
   \   000000C6   0x42A0             CMP      R0,R4
   \   000000C8   0xD26C             BCS      ??mbedtls_x509_crl_info_0
   \   000000CA   0x1A24             SUBS     R4,R4,R0
   \   000000CC   0x182D             ADDS     R5,R5,R0
    614          
    615              entry = &crl->entry;
   \   000000CE   0x003E             MOVS     R6,R7
   \   000000D0   0x3684             ADDS     R6,R6,#+132
    616          
    617              ret = mbedtls_snprintf( p, n, "\n%sRevoked certificates:",
    618                                         prefix );
   \   000000D2   0x9B08             LDR      R3,[SP, #+32]
   \   000000D4   0x....             ADR.N    R2,?_6
   \   000000D6   0x0021             MOVS     R1,R4
   \   000000D8   0x0028             MOVS     R0,R5
   \   000000DA   0x.... 0x....      BL       snprintf
    619              MBEDTLS_X509_SAFE_SNPRINTF;
   \   000000DE   0x2800             CMP      R0,#+0
   \   000000E0   0xD460             BMI      ??mbedtls_x509_crl_info_0
   \   000000E2   0x42A0             CMP      R0,R4
   \   000000E4   0xD25E             BCS      ??mbedtls_x509_crl_info_0
   \   000000E6   0x1A24             SUBS     R4,R4,R0
   \   000000E8   0x182D             ADDS     R5,R5,R0
   \   000000EA   0xE02F             B        ??mbedtls_x509_crl_info_1
    620          
    621              while( entry != NULL && entry->raw.len != 0 )
    622              {
    623                  ret = mbedtls_snprintf( p, n, "\n%sserial number: ",
    624                                         prefix );
   \                     ??mbedtls_x509_crl_info_2: (+1)
   \   000000EC   0x9B08             LDR      R3,[SP, #+32]
   \   000000EE   0xBF00             Nop      
   \   000000F0   0x....             ADR.N    R2,?_7
   \   000000F2   0x0021             MOVS     R1,R4
   \   000000F4   0x0028             MOVS     R0,R5
   \   000000F6   0x.... 0x....      BL       snprintf
    625                  MBEDTLS_X509_SAFE_SNPRINTF;
   \   000000FA   0x2800             CMP      R0,#+0
   \   000000FC   0xD452             BMI      ??mbedtls_x509_crl_info_0
   \   000000FE   0x42A0             CMP      R0,R4
   \   00000100   0xD250             BCS      ??mbedtls_x509_crl_info_0
   \   00000102   0x1A24             SUBS     R4,R4,R0
   \   00000104   0x182D             ADDS     R5,R5,R0
    626          
    627                  ret = mbedtls_x509_serial_gets( p, n, &entry->serial );
   \   00000106   0x0032             MOVS     R2,R6
   \   00000108   0x320C             ADDS     R2,R2,#+12
   \   0000010A   0x0021             MOVS     R1,R4
   \   0000010C   0x0028             MOVS     R0,R5
   \   0000010E   0x.... 0x....      BL       mbedtls_x509_serial_gets
    628                  MBEDTLS_X509_SAFE_SNPRINTF;
   \   00000112   0x2800             CMP      R0,#+0
   \   00000114   0xD446             BMI      ??mbedtls_x509_crl_info_0
   \   00000116   0x42A0             CMP      R0,R4
   \   00000118   0xD244             BCS      ??mbedtls_x509_crl_info_0
   \   0000011A   0x1A24             SUBS     R4,R4,R0
   \   0000011C   0x182D             ADDS     R5,R5,R0
    629          
    630                  ret = mbedtls_snprintf( p, n, " revocation date: " \
    631                             "%04d-%02d-%02d %02d:%02d:%02d",
    632                             entry->revocation_date.year, entry->revocation_date.mon,
    633                             entry->revocation_date.day,  entry->revocation_date.hour,
    634                             entry->revocation_date.min,  entry->revocation_date.sec );
   \   0000011E   0x6AF0             LDR      R0,[R6, #+44]
   \   00000120   0x9004             STR      R0,[SP, #+16]
   \   00000122   0x6AB0             LDR      R0,[R6, #+40]
   \   00000124   0x9003             STR      R0,[SP, #+12]
   \   00000126   0x6A70             LDR      R0,[R6, #+36]
   \   00000128   0x9002             STR      R0,[SP, #+8]
   \   0000012A   0x6A30             LDR      R0,[R6, #+32]
   \   0000012C   0x9001             STR      R0,[SP, #+4]
   \   0000012E   0x69F0             LDR      R0,[R6, #+28]
   \   00000130   0x9000             STR      R0,[SP, #+0]
   \   00000132   0x69B3             LDR      R3,[R6, #+24]
   \   00000134   0x....             ADR.N    R2,?_8
   \   00000136   0x0021             MOVS     R1,R4
   \   00000138   0x0028             MOVS     R0,R5
   \   0000013A   0x.... 0x....      BL       snprintf
    635                  MBEDTLS_X509_SAFE_SNPRINTF;
   \   0000013E   0x2800             CMP      R0,#+0
   \   00000140   0xD430             BMI      ??mbedtls_x509_crl_info_0
   \   00000142   0x42A0             CMP      R0,R4
   \   00000144   0xD22E             BCS      ??mbedtls_x509_crl_info_0
   \   00000146   0x1A24             SUBS     R4,R4,R0
   \   00000148   0x182D             ADDS     R5,R5,R0
    636          
    637                  entry = entry->next;
   \   0000014A   0x6BF6             LDR      R6,[R6, #+60]
    638              }
   \                     ??mbedtls_x509_crl_info_1: (+1)
   \   0000014C   0x2E00             CMP      R6,#+0
   \   0000014E   0xD002             BEQ      ??mbedtls_x509_crl_info_3
   \   00000150   0x6870             LDR      R0,[R6, #+4]
   \   00000152   0x2800             CMP      R0,#+0
   \   00000154   0xD1CA             BNE      ??mbedtls_x509_crl_info_2
    639          
    640              ret = mbedtls_snprintf( p, n, "\n%ssigned using  : ", prefix );
   \                     ??mbedtls_x509_crl_info_3: (+1)
   \   00000156   0x9B08             LDR      R3,[SP, #+32]
   \   00000158   0x....             ADR.N    R2,?_9
   \   0000015A   0x0021             MOVS     R1,R4
   \   0000015C   0x0028             MOVS     R0,R5
   \   0000015E   0x.... 0x....      BL       snprintf
    641              MBEDTLS_X509_SAFE_SNPRINTF;
   \   00000162   0x2800             CMP      R0,#+0
   \   00000164   0xD41E             BMI      ??mbedtls_x509_crl_info_0
   \   00000166   0x42A0             CMP      R0,R4
   \   00000168   0xD21C             BCS      ??mbedtls_x509_crl_info_0
   \   0000016A   0x1A24             SUBS     R4,R4,R0
   \   0000016C   0x182D             ADDS     R5,R5,R0
    642          
    643              ret = mbedtls_x509_sig_alg_gets( p, n, &crl->sig_oid, crl->sig_pk, crl->sig_md,
    644                                       crl->sig_opts );
   \   0000016E   0x0038             MOVS     R0,R7
   \   00000170   0x30E8             ADDS     R0,R0,#+232
   \   00000172   0x6841             LDR      R1,[R0, #+4]
   \   00000174   0x9101             STR      R1,[SP, #+4]
   \   00000176   0x7801             LDRB     R1,[R0, #+0]
   \   00000178   0x9100             STR      R1,[SP, #+0]
   \   0000017A   0x7843             LDRB     R3,[R0, #+1]
   \   0000017C   0x003A             MOVS     R2,R7
   \   0000017E   0x321C             ADDS     R2,R2,#+28
   \   00000180   0x0021             MOVS     R1,R4
   \   00000182   0x0028             MOVS     R0,R5
   \   00000184   0x.... 0x....      BL       mbedtls_x509_sig_alg_gets
    645              MBEDTLS_X509_SAFE_SNPRINTF;
   \   00000188   0x2800             CMP      R0,#+0
   \   0000018A   0xD40B             BMI      ??mbedtls_x509_crl_info_0
   \   0000018C   0x42A0             CMP      R0,R4
   \   0000018E   0xD209             BCS      ??mbedtls_x509_crl_info_0
   \   00000190   0x1A24             SUBS     R4,R4,R0
    646          
    647              ret = mbedtls_snprintf( p, n, "\n" );
   \   00000192   0x....             ADR      R2,??DataTable14_4  ;; "\n"
   \   00000194   0x0021             MOVS     R1,R4
   \   00000196   0x1828             ADDS     R0,R5,R0
   \   00000198   0x.... 0x....      BL       snprintf
    648              MBEDTLS_X509_SAFE_SNPRINTF;
   \   0000019C   0x2800             CMP      R0,#+0
   \   0000019E   0xD401             BMI      ??mbedtls_x509_crl_info_0
   \   000001A0   0x42A0             CMP      R0,R4
   \   000001A2   0xD301             BCC      ??mbedtls_x509_crl_info_4
   \                     ??mbedtls_x509_crl_info_0: (+1)
   \   000001A4   0x....             LDR      R0,??DataTable14_5  ;; 0xffffd680
   \   000001A6   0xE002             B        ??mbedtls_x509_crl_info_5
    649          
    650              return( (int) ( size - n ) );
   \                     ??mbedtls_x509_crl_info_4: (+1)
   \   000001A8   0x9907             LDR      R1,[SP, #+28]
   \   000001AA   0x1B09             SUBS     R1,R1,R4
   \   000001AC   0x1808             ADDS     R0,R1,R0
   \                     ??mbedtls_x509_crl_info_5: (+1)
   \   000001AE   0xB009             ADD      SP,SP,#+36
   \   000001B0   0xBDF0             POP      {R4-R7,PC}       ;; return
    651          }
    652          
    653          /*
    654           * Initialize a CRL chain
    655           */

   \                                 In section .text, align 2, keep-with-next
    656          void mbedtls_x509_crl_init( mbedtls_x509_crl *crl )
    657          {
   \                     mbedtls_x509_crl_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    658              memset( crl, 0, sizeof(mbedtls_x509_crl) );
   \   00000002   0x21F4             MOVS     R1,#+244
   \   00000004   0x.... 0x....      BL       __aeabi_memclr4
    659          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    660          
    661          /*
    662           * Unallocate all CRL data
    663           */

   \                                 In section .text, align 2, keep-with-next
    664          void mbedtls_x509_crl_free( mbedtls_x509_crl *crl )
    665          {
   \                     mbedtls_x509_crl_free: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
    666              mbedtls_x509_crl *crl_cur = crl;
   \   00000002   0x4604             MOV      R4,R0
    667              mbedtls_x509_crl *crl_prv;
    668              mbedtls_x509_name *name_cur;
    669              mbedtls_x509_name *name_prv;
    670              mbedtls_x509_crl_entry *entry_cur;
    671              mbedtls_x509_crl_entry *entry_prv;
    672          
    673              if( crl == NULL )
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD03A             BEQ      ??mbedtls_x509_crl_free_0
    674                  return;
    675          
    676              do
    677              {
    678          #if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
    679                  mbedtls_free( crl_cur->sig_opts );
    680          #endif
    681          
    682                  name_cur = crl_cur->issuer.next;
   \                     ??mbedtls_x509_crl_free_1: (+1)
   \   00000008   0x1D26             ADDS     R6,R4,#+4
   \   0000000A   0x6CB5             LDR      R5,[R6, #+72]
   \   0000000C   0xE008             B        ??mbedtls_x509_crl_free_2
    683                  while( name_cur != NULL )
    684                  {
    685                      name_prv = name_cur;
   \                     ??mbedtls_x509_crl_free_3: (+1)
   \   0000000E   0x002F             MOVS     R7,R5
    686                      name_cur = name_cur->next;
   \   00000010   0x69AD             LDR      R5,[R5, #+24]
    687                      mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   \   00000012   0x2120             MOVS     R1,#+32
   \   00000014   0x0038             MOVS     R0,R7
   \   00000016   0x.... 0x....      BL       __aeabi_memclr
    688                      mbedtls_free( name_prv );
   \   0000001A   0x0038             MOVS     R0,R7
   \   0000001C   0x.... 0x....      BL       free
    689                  }
   \                     ??mbedtls_x509_crl_free_2: (+1)
   \   00000020   0x2D00             CMP      R5,#+0
   \   00000022   0xD1F4             BNE      ??mbedtls_x509_crl_free_3
    690          
    691                  entry_cur = crl_cur->entry.next;
   \   00000024   0x0025             MOVS     R5,R4
   \   00000026   0x35C0             ADDS     R5,R5,#+192
   \   00000028   0x682C             LDR      R4,[R5, #+0]
   \   0000002A   0xE008             B        ??mbedtls_x509_crl_free_4
    692                  while( entry_cur != NULL )
    693                  {
    694                      entry_prv = entry_cur;
   \                     ??mbedtls_x509_crl_free_5: (+1)
   \   0000002C   0x0027             MOVS     R7,R4
    695                      entry_cur = entry_cur->next;
   \   0000002E   0x6BE4             LDR      R4,[R4, #+60]
    696                      mbedtls_zeroize( entry_prv, sizeof( mbedtls_x509_crl_entry ) );
   \   00000030   0x2140             MOVS     R1,#+64
   \   00000032   0x0038             MOVS     R0,R7
   \   00000034   0x.... 0x....      BL       __aeabi_memclr
    697                      mbedtls_free( entry_prv );
   \   00000038   0x0038             MOVS     R0,R7
   \   0000003A   0x.... 0x....      BL       free
    698                  }
   \                     ??mbedtls_x509_crl_free_4: (+1)
   \   0000003E   0x2C00             CMP      R4,#+0
   \   00000040   0xD1F4             BNE      ??mbedtls_x509_crl_free_5
    699          
    700                  if( crl_cur->raw.p != NULL )
   \   00000042   0x6870             LDR      R0,[R6, #+4]
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD007             BEQ      ??mbedtls_x509_crl_free_6
    701                  {
    702                      mbedtls_zeroize( crl_cur->raw.p, crl_cur->raw.len );
   \   00000048   0x6831             LDR      R1,[R6, #+0]
   \   0000004A   0x2900             CMP      R1,#+0
   \   0000004C   0xD001             BEQ      ??mbedtls_x509_crl_free_7
   \   0000004E   0x.... 0x....      BL       __aeabi_memclr
    703                      mbedtls_free( crl_cur->raw.p );
   \                     ??mbedtls_x509_crl_free_7: (+1)
   \   00000052   0x6870             LDR      R0,[R6, #+4]
   \   00000054   0x.... 0x....      BL       free
    704                  }
    705          
    706                  crl_cur = crl_cur->next;
   \                     ??mbedtls_x509_crl_free_6: (+1)
   \   00000058   0x6B2C             LDR      R4,[R5, #+48]
    707              }
    708              while( crl_cur != NULL );
   \   0000005A   0x2C00             CMP      R4,#+0
   \   0000005C   0xD1D4             BNE      ??mbedtls_x509_crl_free_1
    709          
    710              crl_cur = crl;
   \   0000005E   0x9C00             LDR      R4,[SP, #+0]
    711              do
    712              {
    713                  crl_prv = crl_cur;
   \                     ??mbedtls_x509_crl_free_8: (+1)
   \   00000060   0x0025             MOVS     R5,R4
    714                  crl_cur = crl_cur->next;
   \   00000062   0x20F0             MOVS     R0,#+240
   \   00000064   0x5824             LDR      R4,[R4, R0]
    715          
    716                  mbedtls_zeroize( crl_prv, sizeof( mbedtls_x509_crl ) );
   \   00000066   0x21F4             MOVS     R1,#+244
   \   00000068   0x0028             MOVS     R0,R5
   \   0000006A   0x.... 0x....      BL       __aeabi_memclr
    717                  if( crl_prv != crl )
   \   0000006E   0x9800             LDR      R0,[SP, #+0]
   \   00000070   0x4285             CMP      R5,R0
   \   00000072   0xD002             BEQ      ??mbedtls_x509_crl_free_9
    718                      mbedtls_free( crl_prv );
   \   00000074   0x0028             MOVS     R0,R5
   \   00000076   0x.... 0x....      BL       free
    719              }
    720              while( crl_cur != NULL );
   \                     ??mbedtls_x509_crl_free_9: (+1)
   \   0000007A   0x2C00             CMP      R4,#+0
   \   0000007C   0xD1F0             BNE      ??mbedtls_x509_crl_free_8
    721          }
   \                     ??mbedtls_x509_crl_free_0: (+1)
   \   0000007E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0xFFFFD780         DC32     0xffffd780

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0xFFFFDB00         DC32     0xffffdb00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0xFFFFDA9A         DC32     0xffffda9a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0xFFFFD800         DC32     0xffffd800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0xFFFFDE80         DC32     0xffffde80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0xFFFFDE00         DC32     0xffffde00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0xFFFFDA80         DC32     0xffffda80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0xFFFFDA00         DC32     0xffffda00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \   00000000   0xFFFFDB9E         DC32     0xffffdb9e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \   00000000   0xFFFFDBA0         DC32     0xffffdba0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0xFFFFD980         DC32     0xffffd980

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0xFFFFDE1A         DC32     0xffffde1a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0xFFFFD800         DC32     0xffffd800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   0xFFFFEF80         DC32     0xffffef80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \   00000000   0xFFFFD680         DC32     0xffffd680

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x2D 0x2D          DC8 "-----BEGIN X509 CRL-----"
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x58    
   \              0x35 0x30    
   \              0x39 0x20    
   \              0x43 0x52    
   \              0x4C 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x2D 0x2D          DC8 "-----END X509 CRL-----"
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \              0x4E 0x44    
   \              0x20 0x58    
   \              0x35 0x30    
   \              0x39 0x20    
   \              0x43 0x52    
   \              0x4C 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x25 0x73          DC8 "%sCRL version   : %d"
   \              0x43 0x52    
   \              0x4C 0x20    
   \              0x76 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x20 0x20    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_10:
   \   00000000   0x0A 0x00          DC8 "\012"

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x0A 0x25          DC8 "\012%sissuer name   : "
   \              0x73 0x69    
   \              0x73 0x73    
   \              0x75 0x65    
   \              0x72 0x20    
   \              0x6E 0x61    
   \              0x6D 0x65    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x0A 0x25          DC8 "\012%sthis update   : %04d-%02d-%02d %02d:%02d:%02d"
   \              0x73 0x74    
   \              0x68 0x69    
   \              0x73 0x20    
   \              0x75 0x70    
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x30 0x34    
   \              0x64 0x2D    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x64 0x20    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x64 0x3A    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x0A 0x25          DC8 "\012%snext update   : %04d-%02d-%02d %02d:%02d:%02d"
   \              0x73 0x6E    
   \              0x65 0x78    
   \              0x74 0x20    
   \              0x75 0x70    
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x30 0x34    
   \              0x64 0x2D    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x64 0x20    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x64 0x3A    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x0A 0x25          DC8 "\012%sRevoked certificates:"
   \              0x73 0x52    
   \              0x65 0x76    
   \              0x6F 0x6B    
   \              0x65 0x64    
   \              0x20 0x63    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x73 0x3A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x0A 0x25          DC8 "\012%sserial number: "
   \              0x73 0x73    
   \              0x65 0x72    
   \              0x69 0x61    
   \              0x6C 0x20    
   \              0x6E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x3A 0x20    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x20 0x72          DC8 " revocation date: %04d-%02d-%02d %02d:%02d:%02d"
   \              0x65 0x76    
   \              0x6F 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x64 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x30    
   \              0x34 0x64    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x64 0x2D    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x64 0x3A    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x0A 0x25          DC8 "\012%ssigned using  : "
   \              0x73 0x73    
   \              0x69 0x67    
   \              0x6E 0x65    
   \              0x64 0x20    
   \              0x75 0x73    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    
    722          
    723          #endif /* MBEDTLS_X509_CRL_PARSE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   mbedtls_x509_crl_free
        24   -> __aeabi_memclr
        24   -> free
      56   mbedtls_x509_crl_info
        56   -> mbedtls_x509_dn_gets
        56   -> mbedtls_x509_serial_gets
        56   -> mbedtls_x509_sig_alg_gets
        56   -> snprintf
       8   mbedtls_x509_crl_init
         8   -> __aeabi_memclr4
      56   mbedtls_x509_crl_parse
        56   -> mbedtls_pem_free
        56   -> mbedtls_pem_init
        56   -> mbedtls_pem_read_buffer
        56   -> mbedtls_x509_crl_parse_der
      72   mbedtls_x509_crl_parse_der
        72   -> __aeabi_memclr4
        72   -> __aeabi_memcpy
        72   -> calloc
        72   -> mbedtls_asn1_get_int
        72   -> mbedtls_asn1_get_tag
        72   -> mbedtls_x509_crl_free
        72   -> mbedtls_x509_get_alg
        72   -> mbedtls_x509_get_ext
        72   -> mbedtls_x509_get_name
        72   -> mbedtls_x509_get_sig
        72   -> mbedtls_x509_get_sig_alg
        72   -> mbedtls_x509_get_time
        72   -> memcmp
        72   -> x509_get_entries
      40   x509_get_entries
        40   -> calloc
        40   -> mbedtls_asn1_get_tag
        40   -> mbedtls_x509_get_serial
        40   -> mbedtls_x509_get_time


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_2
       4  ??DataTable12_3
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_2
       4  ??DataTable13_3
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_2
       4  ??DataTable14_3
       4  ??DataTable14_4
       4  ??DataTable14_5
      28  ?_0
      24  ?_1
       2  ?_10
      24  ?_2
      20  ?_3
      52  ?_4
      52  ?_5
      28  ?_6
      20  ?_7
      48  ?_8
      20  ?_9
     128  mbedtls_x509_crl_free
     434  mbedtls_x509_crl_info
      10  mbedtls_x509_crl_init
     140  mbedtls_x509_crl_parse
     672  mbedtls_x509_crl_parse_der
     252  x509_get_entries

 
     2 bytes in section .rodata
 2 016 bytes in section .text
 
 2 016 bytes of CODE  memory
     2 bytes of CONST memory

Errors: none
Warnings: none
