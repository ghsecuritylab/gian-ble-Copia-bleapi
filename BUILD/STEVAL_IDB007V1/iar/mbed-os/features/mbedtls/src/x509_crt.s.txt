###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:39
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\mbedtls\src\x509_crt.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\x509_crt.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\x509_crt.s.txt
#        -o .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\x509_crt.o
#        .\mbed-os\features\mbedtls\src\x509_crt.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\x509_crt.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\x509_crt.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\mbedtls\src\x509_crt.c
      1          /*
      2           *  X.509 certificate parsing and verification
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          /*
     22           *  The ITU-T X.509 standard defines a certificate format for PKI.
     23           *
     24           *  http://www.ietf.org/rfc/rfc5280.txt (Certificates and CRLs)
     25           *  http://www.ietf.org/rfc/rfc3279.txt (Alg IDs for CRLs)
     26           *  http://www.ietf.org/rfc/rfc2986.txt (CSRs, aka PKCS#10)
     27           *
     28           *  http://www.itu.int/ITU-T/studygroups/com17/languages/X.680-0207.pdf
     29           *  http://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf
     30           */
     31          
     32          #if !defined(MBEDTLS_CONFIG_FILE)
     33          #include "mbedtls/config.h"
     34          #else
     35          #include MBEDTLS_CONFIG_FILE
     36          #endif
     37          
     38          #if defined(MBEDTLS_X509_CRT_PARSE_C)
     39          
     40          #include "mbedtls/x509_crt.h"
     41          #include "mbedtls/oid.h"
     42          
     43          #include <stdio.h>
     44          #include <string.h>
     45          
     46          #if defined(MBEDTLS_PEM_PARSE_C)
     47          #include "mbedtls/pem.h"
     48          #endif
     49          
     50          #if defined(MBEDTLS_PLATFORM_C)
     51          #include "mbedtls/platform.h"
     52          #else
     53          #include <stdlib.h>
     54          #define mbedtls_free       free
     55          #define mbedtls_calloc    calloc
     56          #define mbedtls_snprintf   snprintf
     57          #endif
     58          
     59          #if defined(MBEDTLS_THREADING_C)
     60          #include "mbedtls/threading.h"
     61          #endif
     62          
     63          #if defined(_WIN32) && !defined(EFIX64) && !defined(EFI32)
     64          #include <windows.h>
     65          #else
     66          #include <time.h>
     67          #endif
     68          
     69          #if defined(MBEDTLS_FS_IO)
     70          #include <stdio.h>
     71          #if !defined(_WIN32) || defined(EFIX64) || defined(EFI32)
     72          #include <sys/types.h>
     73          #include <sys/stat.h>
     74          #include <dirent.h>
     75          #endif /* !_WIN32 || EFIX64 || EFI32 */
     76          #endif
     77          
     78          /* Implementation that should never be optimized out by the compiler */
     79          static void mbedtls_zeroize( void *v, size_t n ) {
     80              volatile unsigned char *p = v; while( n-- ) *p++ = 0;
     81          }
     82          
     83          /*
     84           * Default profile
     85           */

   \                                 In section .text, align 4, keep-with-next
     86          const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_default =
   \                     mbedtls_x509_crt_profile_default:
   \   00000000   0x000000F0         DC32 240, 268435455, 268435455, 2048
   \              0x0FFFFFFF   
   \              0x0FFFFFFF   
   \              0x00000800   
     87          {
     88          #if defined(MBEDTLS_TLS_DEFAULT_ALLOW_SHA1_IN_CERTIFICATES)
     89              /* Allow SHA-1 (weak, but still safe in controlled environments) */
     90              MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA1 ) |
     91          #endif
     92              /* Only SHA-2 hashes */
     93              MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA224 ) |
     94              MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA256 ) |
     95              MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA384 ) |
     96              MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA512 ),
     97              0xFFFFFFF, /* Any PK alg    */
     98              0xFFFFFFF, /* Any curve     */
     99              2048,
    100          };
    101          
    102          /*
    103           * Next-default profile
    104           */

   \                                 In section .rodata, align 4, keep-with-next
    105          const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_next =
   \                     mbedtls_x509_crt_profile_next:
   \   00000000   0x000000E0         DC32 224, 268435455, 2300, 2048
   \              0x0FFFFFFF   
   \              0x000008FC   
   \              0x00000800   
    106          {
    107              /* Hashes from SHA-256 and above */
    108              MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA256 ) |
    109              MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA384 ) |
    110              MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA512 ),
    111              0xFFFFFFF, /* Any PK alg    */
    112          #if defined(MBEDTLS_ECP_C)
    113              /* Curves at or above 128-bit security level */
    114              MBEDTLS_X509_ID_FLAG( MBEDTLS_ECP_DP_SECP256R1 ) |
    115              MBEDTLS_X509_ID_FLAG( MBEDTLS_ECP_DP_SECP384R1 ) |
    116              MBEDTLS_X509_ID_FLAG( MBEDTLS_ECP_DP_SECP521R1 ) |
    117              MBEDTLS_X509_ID_FLAG( MBEDTLS_ECP_DP_BP256R1 ) |
    118              MBEDTLS_X509_ID_FLAG( MBEDTLS_ECP_DP_BP384R1 ) |
    119              MBEDTLS_X509_ID_FLAG( MBEDTLS_ECP_DP_BP512R1 ) |
    120              MBEDTLS_X509_ID_FLAG( MBEDTLS_ECP_DP_SECP256K1 ),
    121          #else
    122              0,
    123          #endif
    124              2048,
    125          };
    126          
    127          /*
    128           * NSA Suite B Profile
    129           */

   \                                 In section .rodata, align 4, keep-with-next
    130          const mbedtls_x509_crt_profile mbedtls_x509_crt_profile_suiteb =
   \                     mbedtls_x509_crt_profile_suiteb:
   \   00000000   0x00000060         DC32 96, 8, 12, 0
   \              0x00000008   
   \              0x0000000C   
   \              0x00000000   
    131          {
    132              /* Only SHA-256 and 384 */
    133              MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA256 ) |
    134              MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA384 ),
    135              /* Only ECDSA */
    136              MBEDTLS_X509_ID_FLAG( MBEDTLS_PK_ECDSA ),
    137          #if defined(MBEDTLS_ECP_C)
    138              /* Only NIST P-256 and P-384 */
    139              MBEDTLS_X509_ID_FLAG( MBEDTLS_ECP_DP_SECP256R1 ) |
    140              MBEDTLS_X509_ID_FLAG( MBEDTLS_ECP_DP_SECP384R1 ),
    141          #else
    142              0,
    143          #endif
    144              0,
    145          };
    146          
    147          /*
    148           * Check md_alg against profile
    149           * Return 0 if md_alg acceptable for this profile, -1 otherwise
    150           */
    151          static int x509_profile_check_md_alg( const mbedtls_x509_crt_profile *profile,
    152                                                mbedtls_md_type_t md_alg )
    153          {
    154              if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
    155                  return( 0 );
    156          
    157              return( -1 );
    158          }
    159          
    160          /*
    161           * Check pk_alg against profile
    162           * Return 0 if pk_alg acceptable for this profile, -1 otherwise
    163           */
    164          static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
    165                                                mbedtls_pk_type_t pk_alg )
    166          {
    167              if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
    168                  return( 0 );
    169          
    170              return( -1 );
    171          }
    172          
    173          /*
    174           * Check key against profile
    175           * Return 0 if pk_alg acceptable for this profile, -1 otherwise
    176           */
    177          static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
    178                                             mbedtls_pk_type_t pk_alg,
    179                                             const mbedtls_pk_context *pk )
    180          {
    181          #if defined(MBEDTLS_RSA_C)
    182              if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
    183              {
    184                  if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
    185                      return( 0 );
    186          
    187                  return( -1 );
    188              }
    189          #endif
    190          
    191          #if defined(MBEDTLS_ECP_C)
    192              if( pk_alg == MBEDTLS_PK_ECDSA ||
    193                  pk_alg == MBEDTLS_PK_ECKEY ||
    194                  pk_alg == MBEDTLS_PK_ECKEY_DH )
    195              {
    196                  mbedtls_ecp_group_id gid = mbedtls_pk_ec( *pk )->grp.id;
    197          
    198                  if( ( profile->allowed_curves & MBEDTLS_X509_ID_FLAG( gid ) ) != 0 )
    199                      return( 0 );
    200          
    201                  return( -1 );
    202              }
    203          #endif
    204          
    205              return( -1 );
    206          }
    207          
    208          /*
    209           *  Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
    210           */
    211          static int x509_get_version( unsigned char **p,
    212                                       const unsigned char *end,
    213                                       int *ver )
    214          {
    215              int ret;
    216              size_t len;
    217          
    218              if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    219                      MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) != 0 )
    220              {
    221                  if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
    222                  {
    223                      *ver = 0;
    224                      return( 0 );
    225                  }
    226          
    227                  return( ret );
    228              }
    229          
    230              end = *p + len;
    231          
    232              if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
    233                  return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
    234          
    235              if( *p != end )
    236                  return( MBEDTLS_ERR_X509_INVALID_VERSION +
    237                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    238          
    239              return( 0 );
    240          }
    241          
    242          /*
    243           *  Validity ::= SEQUENCE {
    244           *       notBefore      Time,
    245           *       notAfter       Time }
    246           */
    247          static int x509_get_dates( unsigned char **p,
    248                                     const unsigned char *end,
    249                                     mbedtls_x509_time *from,
    250                                     mbedtls_x509_time *to )
    251          {
    252              int ret;
    253              size_t len;
    254          
    255              if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    256                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    257                  return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
    258          
    259              end = *p + len;
    260          
    261              if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
    262                  return( ret );
    263          
    264              if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
    265                  return( ret );
    266          
    267              if( *p != end )
    268                  return( MBEDTLS_ERR_X509_INVALID_DATE +
    269                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    270          
    271              return( 0 );
    272          }
    273          
    274          /*
    275           * X.509 v2/v3 unique identifier (not parsed)
    276           */
    277          static int x509_get_uid( unsigned char **p,
    278                                   const unsigned char *end,
    279                                   mbedtls_x509_buf *uid, int n )
    280          {
    281              int ret;
    282          
    283              if( *p == end )
    284                  return( 0 );
    285          
    286              uid->tag = **p;
    287          
    288              if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
    289                      MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | n ) ) != 0 )
    290              {
    291                  if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
    292                      return( 0 );
    293          
    294                  return( ret );
    295              }
    296          
    297              uid->p = *p;
    298              *p += uid->len;
    299          
    300              return( 0 );
    301          }
    302          
    303          static int x509_get_basic_constraints( unsigned char **p,
    304                                                 const unsigned char *end,
    305                                                 int *ca_istrue,
    306                                                 int *max_pathlen )
    307          {
    308              int ret;
    309              size_t len;
    310          
    311              /*
    312               * BasicConstraints ::= SEQUENCE {
    313               *      cA                      BOOLEAN DEFAULT FALSE,
    314               *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
    315               */
    316              *ca_istrue = 0; /* DEFAULT FALSE */
    317              *max_pathlen = 0; /* endless */
    318          
    319              if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    320                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    321                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    322          
    323              if( *p == end )
    324                  return( 0 );
    325          
    326              if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
    327              {
    328                  if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
    329                      ret = mbedtls_asn1_get_int( p, end, ca_istrue );
    330          
    331                  if( ret != 0 )
    332                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    333          
    334                  if( *ca_istrue != 0 )
    335                      *ca_istrue = 1;
    336              }
    337          
    338              if( *p == end )
    339                  return( 0 );
    340          
    341              if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
    342                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    343          
    344              if( *p != end )
    345                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    346                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    347          
    348              (*max_pathlen)++;
    349          
    350              return( 0 );
    351          }
    352          
    353          static int x509_get_ns_cert_type( unsigned char **p,
    354                                                 const unsigned char *end,
    355                                                 unsigned char *ns_cert_type)
    356          {
    357              int ret;

   \                                 In section .rodata, align 4, keep-with-next
    358              mbedtls_x509_bitstring bs = { 0, 0, NULL };
   \                     ?_66:
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000008   0x00000000         DC32 0H
    359          
    360              if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
    361                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    362          
    363              if( bs.len != 1 )
    364                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    365                          MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    366          
    367              /* Get actual bitstring */
    368              *ns_cert_type = *bs.p;
    369              return( 0 );
    370          }
    371          
    372          static int x509_get_key_usage( unsigned char **p,
    373                                         const unsigned char *end,
    374                                         unsigned int *key_usage)
    375          {
    376              int ret;
    377              size_t i;

   \                                 In section .rodata, align 4, keep-with-next
    378              mbedtls_x509_bitstring bs = { 0, 0, NULL };
   \                     ?_67:
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000008   0x00000000         DC32 0H
    379          
    380              if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
    381                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    382          
    383              if( bs.len < 1 )
    384                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    385                          MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    386          
    387              /* Get actual bitstring */
    388              *key_usage = 0;
    389              for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
    390              {
    391                  *key_usage |= (unsigned int) bs.p[i] << (8*i);
    392              }
    393          
    394              return( 0 );
    395          }
    396          
    397          /*
    398           * ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId
    399           *
    400           * KeyPurposeId ::= OBJECT IDENTIFIER
    401           */
    402          static int x509_get_ext_key_usage( unsigned char **p,
    403                                         const unsigned char *end,
    404                                         mbedtls_x509_sequence *ext_key_usage)
    405          {
    406              int ret;
    407          
    408              if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
    409                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    410          
    411              /* Sequence length must be >= 1 */
    412              if( ext_key_usage->buf.p == NULL )
    413                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    414                          MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    415          
    416              return( 0 );
    417          }
    418          
    419          /*
    420           * SubjectAltName ::= GeneralNames
    421           *
    422           * GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName
    423           *
    424           * GeneralName ::= CHOICE {
    425           *      otherName                       [0]     OtherName,
    426           *      rfc822Name                      [1]     IA5String,
    427           *      dNSName                         [2]     IA5String,
    428           *      x400Address                     [3]     ORAddress,
    429           *      directoryName                   [4]     Name,
    430           *      ediPartyName                    [5]     EDIPartyName,
    431           *      uniformResourceIdentifier       [6]     IA5String,
    432           *      iPAddress                       [7]     OCTET STRING,
    433           *      registeredID                    [8]     OBJECT IDENTIFIER }
    434           *
    435           * OtherName ::= SEQUENCE {
    436           *      type-id    OBJECT IDENTIFIER,
    437           *      value      [0] EXPLICIT ANY DEFINED BY type-id }
    438           *
    439           * EDIPartyName ::= SEQUENCE {
    440           *      nameAssigner            [0]     DirectoryString OPTIONAL,
    441           *      partyName               [1]     DirectoryString }
    442           *
    443           * NOTE: we only parse and use dNSName at this point.
    444           */

   \                                 In section .text, align 2, keep-with-next
    445          static int x509_get_subject_alt_name( unsigned char **p,
    446                                                const unsigned char *end,
    447                                                mbedtls_x509_sequence *subject_alt_name )
    448          {
   \                     x509_get_subject_alt_name: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x000F             MOVS     R7,R1
    449              int ret;
    450              size_t len, tag_len;
    451              mbedtls_asn1_buf *buf;
    452              unsigned char tag;
    453              mbedtls_asn1_sequence *cur = subject_alt_name;
   \   00000008   0x0014             MOVS     R4,R2
    454          
    455              /* Get main sequence tag */
    456              if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    457                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \   0000000A   0x2330             MOVS     R3,#+48
   \   0000000C   0xAA01             ADD      R2,SP,#+4
   \   0000000E   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD11B             BNE      ??x509_get_subject_alt_name_0
    458                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    459          
    460              if( *p + len != end )
   \   00000016   0x6830             LDR      R0,[R6, #+0]
   \   00000018   0x9901             LDR      R1,[SP, #+4]
   \   0000001A   0x1840             ADDS     R0,R0,R1
   \   0000001C   0x42B8             CMP      R0,R7
   \   0000001E   0xD004             BEQ      ??x509_get_subject_alt_name_1
    461                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    462                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \   00000020   0xE03C             B.N      ??x509_get_subject_alt_name_2
    463          
    464              while( *p < end )
    465              {
    466                  if( ( end - *p ) < 1 )
    467                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    468                              MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    469          
    470                  tag = **p;
    471                  (*p)++;
    472                  if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
    473                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    474          
    475                  if( ( tag & MBEDTLS_ASN1_CONTEXT_SPECIFIC ) != MBEDTLS_ASN1_CONTEXT_SPECIFIC )
    476                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    477                              MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    478          
    479                  /* Skip everything but DNS name */
    480                  if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
    481                  {
    482                      *p += tag_len;
   \                     ??x509_get_subject_alt_name_3: (+1)
   \   00000022   0x6830             LDR      R0,[R6, #+0]
   \   00000024   0x9900             LDR      R1,[SP, #+0]
   \                     ??x509_get_subject_alt_name_4: (+1)
   \   00000026   0x1840             ADDS     R0,R0,R1
   \   00000028   0x6030             STR      R0,[R6, #+0]
    483                      continue;
    484                  }
   \                     ??x509_get_subject_alt_name_1: (+1)
   \   0000002A   0x6830             LDR      R0,[R6, #+0]
   \   0000002C   0x42B8             CMP      R0,R7
   \   0000002E   0xD231             BCS      ??x509_get_subject_alt_name_5
   \   00000030   0x1A39             SUBS     R1,R7,R0
   \   00000032   0x2901             CMP      R1,#+1
   \   00000034   0xDA01             BGE      ??x509_get_subject_alt_name_6
   \   00000036   0x....             LDR      R0,??DataTable74  ;; 0xffffdaa0
   \   00000038   0xE033             B        ??x509_get_subject_alt_name_7
   \                     ??x509_get_subject_alt_name_6: (+1)
   \   0000003A   0x7805             LDRB     R5,[R0, #+0]
   \   0000003C   0x1C40             ADDS     R0,R0,#+1
   \   0000003E   0x6030             STR      R0,[R6, #+0]
   \   00000040   0x466A             MOV      R2,SP
   \   00000042   0x0039             MOVS     R1,R7
   \   00000044   0x0030             MOVS     R0,R6
   \   00000046   0x.... 0x....      BL       mbedtls_asn1_get_len
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD002             BEQ      ??x509_get_subject_alt_name_8
   \                     ??x509_get_subject_alt_name_0: (+1)
   \   0000004E   0x....             LDR      R1,??DataTable74_1  ;; 0xffffdb00
   \   00000050   0x1840             ADDS     R0,R0,R1
   \   00000052   0xE026             B        ??x509_get_subject_alt_name_7
   \                     ??x509_get_subject_alt_name_8: (+1)
   \   00000054   0x0628             LSLS     R0,R5,#+24
   \   00000056   0xD401             BMI      ??x509_get_subject_alt_name_9
   \   00000058   0x....             LDR      R0,??DataTable74_2  ;; 0xffffda9e
   \   0000005A   0xE022             B        ??x509_get_subject_alt_name_7
   \                     ??x509_get_subject_alt_name_9: (+1)
   \   0000005C   0x2D82             CMP      R5,#+130
   \   0000005E   0xD1E0             BNE      ??x509_get_subject_alt_name_3
    485          
    486                  /* Allocate and assign next pointer */
    487                  if( cur->buf.p != NULL )
   \   00000060   0x68A0             LDR      R0,[R4, #+8]
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD00E             BEQ      ??x509_get_subject_alt_name_10
    488                  {
    489                      if( cur->next != NULL )
   \   00000066   0x68E0             LDR      R0,[R4, #+12]
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD001             BEQ      ??x509_get_subject_alt_name_11
    490                          return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
   \   0000006C   0x....             LDR      R0,??DataTable74_1  ;; 0xffffdb00
   \   0000006E   0xE018             B        ??x509_get_subject_alt_name_7
    491          
    492                      cur->next = mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
   \                     ??x509_get_subject_alt_name_11: (+1)
   \   00000070   0x2110             MOVS     R1,#+16
   \   00000072   0x2001             MOVS     R0,#+1
   \   00000074   0x.... 0x....      BL       calloc
   \   00000078   0x60E0             STR      R0,[R4, #+12]
    493          
    494                      if( cur->next == NULL )
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD101             BNE      ??x509_get_subject_alt_name_12
    495                          return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    496                                  MBEDTLS_ERR_ASN1_ALLOC_FAILED );
   \   0000007E   0x....             LDR      R0,??DataTable74_3  ;; 0xffffda96
   \   00000080   0xE00F             B        ??x509_get_subject_alt_name_7
    497          
    498                      cur = cur->next;
   \                     ??x509_get_subject_alt_name_12: (+1)
   \   00000082   0x0004             MOVS     R4,R0
    499                  }
    500          
    501                  buf = &(cur->buf);
    502                  buf->tag = tag;
   \                     ??x509_get_subject_alt_name_10: (+1)
   \   00000084   0x6025             STR      R5,[R4, #+0]
    503                  buf->p = *p;
   \   00000086   0x6830             LDR      R0,[R6, #+0]
   \   00000088   0x60A0             STR      R0,[R4, #+8]
    504                  buf->len = tag_len;
   \   0000008A   0x9800             LDR      R0,[SP, #+0]
   \   0000008C   0x6060             STR      R0,[R4, #+4]
    505                  *p += buf->len;
   \   0000008E   0x6830             LDR      R0,[R6, #+0]
   \   00000090   0x6861             LDR      R1,[R4, #+4]
   \   00000092   0xE7C8             B        ??x509_get_subject_alt_name_4
    506              }
    507          
    508              /* Set final sequence entry's next pointer to NULL */
    509              cur->next = NULL;
   \                     ??x509_get_subject_alt_name_5: (+1)
   \   00000094   0x2100             MOVS     R1,#+0
   \   00000096   0x60E1             STR      R1,[R4, #+12]
    510          
    511              if( *p != end )
   \   00000098   0x42B8             CMP      R0,R7
   \   0000009A   0xD001             BEQ      ??x509_get_subject_alt_name_13
    512                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    513                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \                     ??x509_get_subject_alt_name_2: (+1)
   \   0000009C   0x....             LDR      R0,??DataTable74_4  ;; 0xffffda9a
   \   0000009E   0xE000             B        ??x509_get_subject_alt_name_7
    514          
    515              return( 0 );
   \                     ??x509_get_subject_alt_name_13: (+1)
   \   000000A0   0x2000             MOVS     R0,#+0
   \                     ??x509_get_subject_alt_name_7: (+1)
   \   000000A2   0xB003             ADD      SP,SP,#+12
   \   000000A4   0xBDF0             POP      {R4-R7,PC}       ;; return
    516          }
    517          
    518          /*
    519           * X.509 v3 extensions
    520           *
    521           */

   \                                 In section .text, align 2, keep-with-next
    522          static int x509_get_crt_ext( unsigned char **p,
    523                                       const unsigned char *end,
    524                                       mbedtls_x509_crt *crt )
    525          {
   \                     x509_get_crt_ext: (+1)
   \   00000000   0xB5F6             PUSH     {R1,R2,R4-R7,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
   \   00000004   0x0006             MOVS     R6,R0
    526              int ret;
    527              size_t len;
    528              unsigned char *end_ext_data, *end_ext_octet;
    529          
    530              if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
   \   00000006   0x2303             MOVS     R3,#+3
   \   00000008   0x32DC             ADDS     R2,R2,#+220
   \   0000000A   0x.... 0x....      BL       mbedtls_x509_get_ext
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD008             BEQ      ??x509_get_crt_ext_0
    531              {
    532                  if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
   \   00000012   0x2161             MOVS     R1,#+97
   \   00000014   0x43C9             MVNS     R1,R1            ;; #-98
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xD000             BEQ      .+4
   \   0000001A   0xE115             B        ??x509_get_crt_ext_1
    533                      return( 0 );
   \   0000001C   0xE113             B        ??x509_get_crt_ext_2
    534          
    535                  return( ret );
    536              }
    537          
    538              while( *p < end )
    539              {
    540                  /*
    541                   * Extension  ::=  SEQUENCE  {
    542                   *      extnID      OBJECT IDENTIFIER,
    543                   *      critical    BOOLEAN DEFAULT FALSE,
    544                   *      extnValue   OCTET STRING  }
    545                   */
    546                  mbedtls_x509_buf extn_oid = {0, 0, NULL};
    547                  int is_critical = 0; /* DEFAULT FALSE */
    548                  int ext_type = 0;
    549          
    550                  if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    551                          MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    552                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    553          
    554                  end_ext_data = *p + len;
    555          
    556                  /* Get extension ID */
    557                  extn_oid.tag = **p;
    558          
    559                  if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
    560                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    561          
    562                  extn_oid.p = *p;
    563                  *p += extn_oid.len;
    564          
    565                  if( ( end - *p ) < 1 )
    566                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    567                              MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    568          
    569                  /* Get optional critical */
    570                  if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
    571                      ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
    572                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    573          
    574                  /* Data should be octet string type */
    575                  if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
    576                          MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
    577                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
    578          
    579                  end_ext_octet = *p + len;
    580          
    581                  if( end_ext_octet != end_ext_data )
    582                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    583                              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    584          
    585                  /*
    586                   * Detect supported extensions
    587                   */
    588                  ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
    589          
    590                  if( ret != 0 )
    591                  {
    592                      /* No parser found, skip extension */
    593                      *p = end_ext_octet;
    594          
    595          #if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
    596                      if( is_critical )
    597                      {
    598                          /* Data is marked as critical: fail */
    599                          return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    600                                  MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    601                      }
    602          #endif
    603                      continue;
    604                  }
    605          
    606                  /* Forbid repeated extensions */
    607                  if( ( crt->ext_types & ext_type ) != 0 )
    608                      return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
    609          
    610                  crt->ext_types |= ext_type;
    611          
    612                  switch( ext_type )
    613                  {
   \                     ??x509_get_crt_ext_3: (+1)
   \   0000001E   0x68A0             LDR      R0,[R4, #+8]
   \   00000020   0x1C40             ADDS     R0,R0,#+1
   \   00000022   0x60A0             STR      R0,[R4, #+8]
   \                     ??x509_get_crt_ext_0: (+1)
   \   00000024   0x9C0B             LDR      R4,[SP, #+44]
   \   00000026   0x6830             LDR      R0,[R6, #+0]
   \   00000028   0x42A0             CMP      R0,R4
   \   0000002A   0xD300             BCC      .+4
   \   0000002C   0xE108             B        ??x509_get_crt_ext_4
   \   0000002E   0xA808             ADD      R0,SP,#+32
   \   00000030   0x210C             MOVS     R1,#+12
   \   00000032   0x.... 0x....      BL       __aeabi_memclr4
   \   00000036   0x2700             MOVS     R7,#+0
   \   00000038   0x9706             STR      R7,[SP, #+24]
   \   0000003A   0x9700             STR      R7,[SP, #+0]
   \   0000003C   0x2330             MOVS     R3,#+48
   \   0000003E   0xAA01             ADD      R2,SP,#+4
   \   00000040   0x990B             LDR      R1,[SP, #+44]
   \   00000042   0x0030             MOVS     R0,R6
   \   00000044   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD12C             BNE      ??x509_get_crt_ext_5
   \   0000004C   0x6830             LDR      R0,[R6, #+0]
   \   0000004E   0x9901             LDR      R1,[SP, #+4]
   \   00000050   0x1841             ADDS     R1,R0,R1
   \   00000052   0x9102             STR      R1,[SP, #+8]
   \   00000054   0x7800             LDRB     R0,[R0, #+0]
   \   00000056   0x9008             STR      R0,[SP, #+32]
   \   00000058   0x2306             MOVS     R3,#+6
   \   0000005A   0xA808             ADD      R0,SP,#+32
   \   0000005C   0x1D02             ADDS     R2,R0,#+4
   \   0000005E   0x990B             LDR      R1,[SP, #+44]
   \   00000060   0x0030             MOVS     R0,R6
   \   00000062   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD11D             BNE      ??x509_get_crt_ext_5
   \   0000006A   0x6830             LDR      R0,[R6, #+0]
   \   0000006C   0x900A             STR      R0,[SP, #+40]
   \   0000006E   0x6830             LDR      R0,[R6, #+0]
   \   00000070   0x9909             LDR      R1,[SP, #+36]
   \   00000072   0x1840             ADDS     R0,R0,R1
   \   00000074   0x6030             STR      R0,[R6, #+0]
   \   00000076   0x1A20             SUBS     R0,R4,R0
   \   00000078   0x2801             CMP      R0,#+1
   \   0000007A   0xDA01             BGE      ??x509_get_crt_ext_6
   \   0000007C   0x....             LDR      R0,??DataTable74  ;; 0xffffdaa0
   \   0000007E   0xE0E3             B        ??x509_get_crt_ext_1
   \                     ??x509_get_crt_ext_6: (+1)
   \   00000080   0xAA06             ADD      R2,SP,#+24
   \   00000082   0x9902             LDR      R1,[SP, #+8]
   \   00000084   0x0030             MOVS     R0,R6
   \   00000086   0x.... 0x....      BL       mbedtls_asn1_get_bool
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD003             BEQ      ??x509_get_crt_ext_7
   \   0000008E   0x2161             MOVS     R1,#+97
   \   00000090   0x43C9             MVNS     R1,R1            ;; #-98
   \   00000092   0x4288             CMP      R0,R1
   \   00000094   0xD107             BNE      ??x509_get_crt_ext_5
   \                     ??x509_get_crt_ext_7: (+1)
   \   00000096   0x2304             MOVS     R3,#+4
   \   00000098   0xAA01             ADD      R2,SP,#+4
   \   0000009A   0x9902             LDR      R1,[SP, #+8]
   \   0000009C   0x0030             MOVS     R0,R6
   \   0000009E   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   000000A2   0x2800             CMP      R0,#+0
   \   000000A4   0xD002             BEQ      ??x509_get_crt_ext_8
   \                     ??x509_get_crt_ext_5: (+1)
   \   000000A6   0x....             LDR      R1,??DataTable74_1  ;; 0xffffdb00
   \   000000A8   0x1840             ADDS     R0,R0,R1
   \   000000AA   0xE0CD             B        ??x509_get_crt_ext_1
   \                     ??x509_get_crt_ext_8: (+1)
   \   000000AC   0x6830             LDR      R0,[R6, #+0]
   \   000000AE   0x9901             LDR      R1,[SP, #+4]
   \   000000B0   0x1845             ADDS     R5,R0,R1
   \   000000B2   0x9802             LDR      R0,[SP, #+8]
   \   000000B4   0x4285             CMP      R5,R0
   \   000000B6   0xD000             BEQ      .+4
   \   000000B8   0xE0C3             B        ??x509_get_crt_ext_9
   \   000000BA   0x4669             MOV      R1,SP
   \   000000BC   0xA808             ADD      R0,SP,#+32
   \   000000BE   0x.... 0x....      BL       mbedtls_oid_get_x509_ext_type
   \   000000C2   0x2800             CMP      R0,#+0
   \   000000C4   0xD005             BEQ      ??x509_get_crt_ext_10
   \   000000C6   0x6035             STR      R5,[R6, #+0]
   \   000000C8   0x9806             LDR      R0,[SP, #+24]
   \   000000CA   0x2800             CMP      R0,#+0
   \   000000CC   0xD0AA             BEQ      ??x509_get_crt_ext_0
   \   000000CE   0x....             LDR      R0,??DataTable74_2  ;; 0xffffda9e
   \   000000D0   0xE0BA             B        ??x509_get_crt_ext_1
   \                     ??x509_get_crt_ext_10: (+1)
   \   000000D2   0x9C0C             LDR      R4,[SP, #+48]
   \   000000D4   0x34F8             ADDS     R4,R4,#+248
   \   000000D6   0x6820             LDR      R0,[R4, #+0]
   \   000000D8   0x9900             LDR      R1,[SP, #+0]
   \   000000DA   0x4001             ANDS     R1,R1,R0
   \   000000DC   0xD001             BEQ      ??x509_get_crt_ext_11
   \   000000DE   0x....             LDR      R0,??DataTable74_1  ;; 0xffffdb00
   \   000000E0   0xE0B2             B        ??x509_get_crt_ext_1
   \                     ??x509_get_crt_ext_11: (+1)
   \   000000E2   0x9900             LDR      R1,[SP, #+0]
   \   000000E4   0x4301             ORRS     R1,R1,R0
   \   000000E6   0x6021             STR      R1,[R4, #+0]
   \   000000E8   0x9800             LDR      R0,[SP, #+0]
   \   000000EA   0x1F00             SUBS     R0,R0,#+4
   \   000000EC   0xD04D             BEQ      ??x509_get_crt_ext_12
   \   000000EE   0x381C             SUBS     R0,R0,#+28
   \   000000F0   0xD100             BNE      .+4
   \   000000F2   0xE081             B        ??x509_get_crt_ext_13
   \   000000F4   0x38E0             SUBS     R0,R0,#+224
   \   000000F6   0xD009             BEQ      ??x509_get_crt_ext_14
   \   000000F8   0x21E0             MOVS     R1,#+224
   \   000000FA   0x00C9             LSLS     R1,R1,#+3        ;; #+1792
   \   000000FC   0x1A40             SUBS     R0,R0,R1
   \   000000FE   0xD067             BEQ      ??x509_get_crt_ext_15
   \   00000100   0x21F8             MOVS     R1,#+248
   \   00000102   0x0209             LSLS     R1,R1,#+8        ;; #+63488
   \   00000104   0x1A40             SUBS     R0,R0,R1
   \   00000106   0xD100             BNE      .+4
   \   00000108   0xE080             B        ??x509_get_crt_ext_16
   \   0000010A   0xE097             B        ??x509_get_crt_ext_17
    614                  case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
    615                      /* Parse basic constraints */
    616                      if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
    617                              &crt->ca_istrue, &crt->max_pathlen ) ) != 0 )
   \                     ??x509_get_crt_ext_14: (+1)
   \   0000010C   0x6067             STR      R7,[R4, #+4]
   \   0000010E   0x60A7             STR      R7,[R4, #+8]
   \   00000110   0x2330             MOVS     R3,#+48
   \   00000112   0xAA07             ADD      R2,SP,#+28
   \   00000114   0x0029             MOVS     R1,R5
   \   00000116   0x0030             MOVS     R0,R6
   \   00000118   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   0000011C   0x2800             CMP      R0,#+0
   \   0000011E   0xD004             BEQ      ??x509_get_crt_ext_18
   \                     ??x509_get_crt_ext_19: (+1)
   \   00000120   0x....             LDR      R1,??DataTable74_1  ;; 0xffffdb00
   \   00000122   0x1840             ADDS     R0,R0,R1
   \                     ??x509_get_crt_ext_20: (+1)
   \   00000124   0xD000             BEQ      .+4
   \   00000126   0xE08F             B        ??x509_get_crt_ext_1
   \   00000128   0xE77C             B        ??x509_get_crt_ext_0
   \                     ??x509_get_crt_ext_18: (+1)
   \   0000012A   0x6830             LDR      R0,[R6, #+0]
   \   0000012C   0x42A8             CMP      R0,R5
   \   0000012E   0xD100             BNE      .+4
   \   00000130   0xE778             B        ??x509_get_crt_ext_0
   \   00000132   0x9F0C             LDR      R7,[SP, #+48]
   \   00000134   0x37FC             ADDS     R7,R7,#+252
   \   00000136   0x003A             MOVS     R2,R7
   \   00000138   0x0029             MOVS     R1,R5
   \   0000013A   0x0030             MOVS     R0,R6
   \   0000013C   0x.... 0x....      BL       mbedtls_asn1_get_bool
   \   00000140   0x2800             CMP      R0,#+0
   \   00000142   0xD00F             BEQ      ??x509_get_crt_ext_21
   \   00000144   0x2161             MOVS     R1,#+97
   \   00000146   0x43C9             MVNS     R1,R1            ;; #-98
   \   00000148   0x4288             CMP      R0,R1
   \   0000014A   0xD1E9             BNE      ??x509_get_crt_ext_19
   \   0000014C   0x003A             MOVS     R2,R7
   \   0000014E   0x0029             MOVS     R1,R5
   \   00000150   0x0030             MOVS     R0,R6
   \   00000152   0x.... 0x....      BL       mbedtls_asn1_get_int
   \   00000156   0x2800             CMP      R0,#+0
   \   00000158   0xD1E2             BNE      ??x509_get_crt_ext_19
   \   0000015A   0x6860             LDR      R0,[R4, #+4]
   \   0000015C   0x2800             CMP      R0,#+0
   \   0000015E   0xD001             BEQ      ??x509_get_crt_ext_21
   \   00000160   0x2001             MOVS     R0,#+1
   \   00000162   0x6060             STR      R0,[R4, #+4]
   \                     ??x509_get_crt_ext_21: (+1)
   \   00000164   0x6830             LDR      R0,[R6, #+0]
   \   00000166   0x42A8             CMP      R0,R5
   \   00000168   0xD100             BNE      .+4
   \   0000016A   0xE75B             B        ??x509_get_crt_ext_0
   \   0000016C   0x980C             LDR      R0,[SP, #+48]
   \   0000016E   0x2180             MOVS     R1,#+128
   \   00000170   0x0049             LSLS     R1,R1,#+1        ;; #+256
   \   00000172   0x1842             ADDS     R2,R0,R1
   \   00000174   0x0029             MOVS     R1,R5
   \   00000176   0x0030             MOVS     R0,R6
   \   00000178   0x.... 0x....      BL       mbedtls_asn1_get_int
   \   0000017C   0x2800             CMP      R0,#+0
   \   0000017E   0xD1CF             BNE      ??x509_get_crt_ext_19
   \   00000180   0x6830             LDR      R0,[R6, #+0]
   \   00000182   0x42A8             CMP      R0,R5
   \   00000184   0xD100             BNE      .+4
   \   00000186   0xE74A             B        ??x509_get_crt_ext_3
   \   00000188   0xE05B             B.N      ??x509_get_crt_ext_9
    618                          return( ret );
    619                      break;
    620          
    621                  case MBEDTLS_X509_EXT_KEY_USAGE:
    622                      /* Parse key usage */
    623                      if( ( ret = x509_get_key_usage( p, end_ext_octet,
    624                              &crt->key_usage ) ) != 0 )
   \                     ??x509_get_crt_ext_12: (+1)
   \   0000018A   0xA803             ADD      R0,SP,#+12
   \   0000018C   0x210C             MOVS     R1,#+12
   \   0000018E   0x.... 0x....      BL       __aeabi_memclr4
   \   00000192   0xAA03             ADD      R2,SP,#+12
   \   00000194   0x0029             MOVS     R1,R5
   \   00000196   0x0030             MOVS     R0,R6
   \   00000198   0x.... 0x....      BL       mbedtls_asn1_get_bitstring
   \   0000019C   0x2800             CMP      R0,#+0
   \   0000019E   0xD002             BEQ      ??x509_get_crt_ext_22
   \   000001A0   0x....             LDR      R1,??DataTable74_1  ;; 0xffffdb00
   \   000001A2   0x1840             ADDS     R0,R0,R1
   \   000001A4   0xE7BE             B.N      ??x509_get_crt_ext_20
   \                     ??x509_get_crt_ext_22: (+1)
   \   000001A6   0x9803             LDR      R0,[SP, #+12]
   \   000001A8   0x2800             CMP      R0,#+0
   \   000001AA   0xD023             BEQ      ??x509_get_crt_ext_23
   \   000001AC   0x60E7             STR      R7,[R4, #+12]
   \   000001AE   0x9805             LDR      R0,[SP, #+20]
   \                     ??x509_get_crt_ext_24: (+1)
   \   000001B0   0x9903             LDR      R1,[SP, #+12]
   \   000001B2   0x428F             CMP      R7,R1
   \   000001B4   0xD300             BCC      .+4
   \   000001B6   0xE735             B        ??x509_get_crt_ext_0
   \   000001B8   0x2F04             CMP      R7,#+4
   \   000001BA   0xD300             BCC      .+4
   \   000001BC   0xE732             B        ??x509_get_crt_ext_0
   \   000001BE   0x68E1             LDR      R1,[R4, #+12]
   \   000001C0   0x7802             LDRB     R2,[R0, #+0]
   \   000001C2   0x00FB             LSLS     R3,R7,#+3
   \   000001C4   0x409A             LSLS     R2,R2,R3
   \   000001C6   0x430A             ORRS     R2,R2,R1
   \   000001C8   0x60E2             STR      R2,[R4, #+12]
   \   000001CA   0x1C7F             ADDS     R7,R7,#+1
   \   000001CC   0x1C40             ADDS     R0,R0,#+1
   \   000001CE   0xE7EF             B        ??x509_get_crt_ext_24
    625                          return( ret );
    626                      break;
    627          
    628                  case MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE:
    629                      /* Parse extended key usage */
    630                      if( ( ret = x509_get_ext_key_usage( p, end_ext_octet,
    631                              &crt->ext_key_usage ) ) != 0 )
   \                     ??x509_get_crt_ext_15: (+1)
   \   000001D0   0x2306             MOVS     R3,#+6
   \   000001D2   0x980C             LDR      R0,[SP, #+48]
   \   000001D4   0x2184             MOVS     R1,#+132
   \   000001D6   0x0049             LSLS     R1,R1,#+1        ;; #+264
   \   000001D8   0x1842             ADDS     R2,R0,R1
   \   000001DA   0x0029             MOVS     R1,R5
   \   000001DC   0x0030             MOVS     R0,R6
   \   000001DE   0x.... 0x....      BL       mbedtls_asn1_get_sequence_of
   \   000001E2   0x2800             CMP      R0,#+0
   \   000001E4   0xD002             BEQ      ??x509_get_crt_ext_25
   \   000001E6   0x....             LDR      R1,??DataTable74_1  ;; 0xffffdb00
   \   000001E8   0x1840             ADDS     R0,R0,R1
   \   000001EA   0xE79B             B.N      ??x509_get_crt_ext_20
   \                     ??x509_get_crt_ext_25: (+1)
   \   000001EC   0x69A0             LDR      R0,[R4, #+24]
   \   000001EE   0x2800             CMP      R0,#+0
   \   000001F0   0xD000             BEQ      .+4
   \   000001F2   0xE717             B        ??x509_get_crt_ext_0
   \                     ??x509_get_crt_ext_23: (+1)
   \   000001F4   0x....             LDR      R0,??DataTable74_5  ;; 0xffffda9c
   \   000001F6   0xE027             B        ??x509_get_crt_ext_1
    632                          return( ret );
    633                      break;
    634          
    635                  case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
    636                      /* Parse subject alt name */
    637                      if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
    638                              &crt->subject_alt_names ) ) != 0 )
   \                     ??x509_get_crt_ext_13: (+1)
   \   000001F8   0x9A0C             LDR      R2,[SP, #+48]
   \   000001FA   0x32E8             ADDS     R2,R2,#+232
   \   000001FC   0x0029             MOVS     R1,R5
   \   000001FE   0x0030             MOVS     R0,R6
   \   00000200   0x.... 0x....      BL       x509_get_subject_alt_name
   \   00000204   0x2800             CMP      R0,#+0
   \   00000206   0xD100             BNE      .+4
   \   00000208   0xE70C             B        ??x509_get_crt_ext_0
    639                          return( ret );
   \   0000020A   0xE01D             B        ??x509_get_crt_ext_1
    640                      break;
    641          
    642                  case MBEDTLS_X509_EXT_NS_CERT_TYPE:
    643                      /* Parse netscape certificate type */
    644                      if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
    645                              &crt->ns_cert_type ) ) != 0 )
   \                     ??x509_get_crt_ext_16: (+1)
   \   0000020C   0xA803             ADD      R0,SP,#+12
   \   0000020E   0x210C             MOVS     R1,#+12
   \   00000210   0x.... 0x....      BL       __aeabi_memclr4
   \   00000214   0xAA03             ADD      R2,SP,#+12
   \   00000216   0x0029             MOVS     R1,R5
   \   00000218   0x0030             MOVS     R0,R6
   \   0000021A   0x.... 0x....      BL       mbedtls_asn1_get_bitstring
   \   0000021E   0x2800             CMP      R0,#+0
   \   00000220   0xD002             BEQ      ??x509_get_crt_ext_26
   \   00000222   0x....             LDR      R1,??DataTable74_1  ;; 0xffffdb00
   \   00000224   0x1840             ADDS     R0,R0,R1
   \   00000226   0xE77D             B.N      ??x509_get_crt_ext_20
   \                     ??x509_get_crt_ext_26: (+1)
   \   00000228   0x9803             LDR      R0,[SP, #+12]
   \   0000022A   0x2801             CMP      R0,#+1
   \   0000022C   0xD1E2             BNE      ??x509_get_crt_ext_23
   \   0000022E   0x9805             LDR      R0,[SP, #+20]
   \   00000230   0x7800             LDRB     R0,[R0, #+0]
   \   00000232   0x990C             LDR      R1,[SP, #+48]
   \   00000234   0x228C             MOVS     R2,#+140
   \   00000236   0x0052             LSLS     R2,R2,#+1        ;; #+280
   \   00000238   0x5488             STRB     R0,[R1, R2]
   \   0000023A   0xE6F3             B        ??x509_get_crt_ext_0
    646                          return( ret );
    647                      break;
    648          
    649                  default:
    650                      return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
   \                     ??x509_get_crt_ext_17: (+1)
   \   0000023C   0x....             LDR      R0,??DataTable74_6  ;; 0xffffdf80
   \   0000023E   0xE003             B        ??x509_get_crt_ext_1
    651                  }
    652              }
    653          
    654              if( *p != end )
   \                     ??x509_get_crt_ext_4: (+1)
   \   00000240   0xD001             BEQ      ??x509_get_crt_ext_2
    655                  return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
    656                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \                     ??x509_get_crt_ext_9: (+1)
   \   00000242   0x....             LDR      R0,??DataTable74_4  ;; 0xffffda9a
   \   00000244   0xE000             B        ??x509_get_crt_ext_1
    657          
    658              return( 0 );
   \                     ??x509_get_crt_ext_2: (+1)
   \   00000246   0x2000             MOVS     R0,#+0
   \                     ??x509_get_crt_ext_1: (+1)
   \   00000248   0xB00D             ADD      SP,SP,#+52
   \   0000024A   0xBDF0             POP      {R4-R7,PC}       ;; return
    659          }

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_68:
   \   00000000   0x00000000         DC32 0, 0, 0H
   \              0x00000000   
   \              0x00000000   
    660          
    661          /*
    662           * Parse and fill a single X.509 certificate in DER format
    663           */

   \                                 In section .text, align 4, keep-with-next
    664          static int x509_crt_parse_der_core( mbedtls_x509_crt *crt, const unsigned char *buf,
    665                                              size_t buflen )
    666          {
   \                     x509_crt_parse_der_core: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000E             MOVS     R6,R1
    667              int ret;
    668              size_t len;
    669              unsigned char *p, *end, *crt_end;
    670              mbedtls_x509_buf sig_params1, sig_params2, sig_oid2;
    671          
    672              memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
   \   00000008   0xA804             ADD      R0,SP,#+16
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0x2500             MOVS     R5,#+0
   \   00000010   0xC02A             STM      R0!,{R1,R3,R5}
    673              memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
   \   00000012   0xA80A             ADD      R0,SP,#+40
   \   00000014   0xC02A             STM      R0!,{R1,R3,R5}
    674              memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
   \   00000016   0xA807             ADD      R0,SP,#+28
   \   00000018   0xC02A             STM      R0!,{R1,R3,R5}
    675          
    676              /*
    677               * Check for valid input
    678               */
    679              if( crt == NULL || buf == NULL )
   \   0000001A   0x2C00             CMP      R4,#+0
   \   0000001C   0xD001             BEQ      ??x509_crt_parse_der_core_0
   \   0000001E   0x2E00             CMP      R6,#+0
   \   00000020   0xD101             BNE      ??x509_crt_parse_der_core_1
    680                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   \                     ??x509_crt_parse_der_core_0: (+1)
   \   00000022   0x48BA             LDR      R0,??x509_crt_parse_der_core_2  ;; 0xffffd800
   \   00000024   0xE18C             B        ??x509_crt_parse_der_core_3
    681          
    682              // Use the original buffer until we figure out actual length
    683              p = (unsigned char*) buf;
   \                     ??x509_crt_parse_der_core_1: (+1)
   \   00000026   0x9601             STR      R6,[SP, #+4]
    684              len = buflen;
   \   00000028   0x9202             STR      R2,[SP, #+8]
    685              end = p + len;
   \   0000002A   0x9801             LDR      R0,[SP, #+4]
   \   0000002C   0x1887             ADDS     R7,R0,R2
    686          
    687              /*
    688               * Certificate  ::=  SEQUENCE  {
    689               *      tbsCertificate       TBSCertificate,
    690               *      signatureAlgorithm   AlgorithmIdentifier,
    691               *      signatureValue       BIT STRING  }
    692               */
    693              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    694                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \   0000002E   0x2330             MOVS     R3,#+48
   \   00000030   0xAA02             ADD      R2,SP,#+8
   \   00000032   0x0039             MOVS     R1,R7
   \   00000034   0xA801             ADD      R0,SP,#+4
   \   00000036   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD004             BEQ      ??x509_crt_parse_der_core_4
    695              {
    696                  mbedtls_x509_crt_free( crt );
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x.... 0x....      BL       mbedtls_x509_crt_free
    697                  return( MBEDTLS_ERR_X509_INVALID_FORMAT );
   \   00000044   0x....             LDR      R0,??DataTable75  ;; 0xffffde80
   \   00000046   0xE17B             B        ??x509_crt_parse_der_core_3
    698              }
    699          
    700              if( len > (size_t) ( end - p ) )
   \                     ??x509_crt_parse_der_core_4: (+1)
   \   00000048   0x9801             LDR      R0,[SP, #+4]
   \   0000004A   0x1A38             SUBS     R0,R7,R0
   \   0000004C   0x9902             LDR      R1,[SP, #+8]
   \   0000004E   0x4288             CMP      R0,R1
   \   00000050   0xD200             BCS      .+4
   \   00000052   0xE16F             B        ??x509_crt_parse_der_core_5
    701              {
    702                  mbedtls_x509_crt_free( crt );
    703                  return( MBEDTLS_ERR_X509_INVALID_FORMAT +
    704                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    705              }
    706              crt_end = p + len;
    707          
    708              // Create and populate a new buffer for the raw field
    709              crt->raw.len = crt_end - buf;
   \   00000054   0x9801             LDR      R0,[SP, #+4]
   \   00000056   0x1840             ADDS     R0,R0,R1
   \   00000058   0x1B81             SUBS     R1,R0,R6
   \   0000005A   0x1D25             ADDS     R5,R4,#+4
   \   0000005C   0x6029             STR      R1,[R5, #+0]
    710              crt->raw.p = p = mbedtls_calloc( 1, crt->raw.len );
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0x.... 0x....      BL       calloc
   \   00000064   0x9001             STR      R0,[SP, #+4]
   \   00000066   0x6068             STR      R0,[R5, #+4]
    711              if( p == NULL )
   \   00000068   0x9801             LDR      R0,[SP, #+4]
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xD101             BNE      ??x509_crt_parse_der_core_6
    712                  return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   \   0000006E   0x....             LDR      R0,??DataTable75_1  ;; 0xffffd780
   \   00000070   0xE166             B        ??x509_crt_parse_der_core_3
    713          
    714              memcpy( p, buf, crt->raw.len );
   \                     ??x509_crt_parse_der_core_6: (+1)
   \   00000072   0x682A             LDR      R2,[R5, #+0]
   \   00000074   0x0031             MOVS     R1,R6
   \   00000076   0x.... 0x....      BL       __aeabi_memcpy
    715          
    716              // Direct pointers to the new buffer 
    717              p += crt->raw.len - len;
   \   0000007A   0x9801             LDR      R0,[SP, #+4]
   \   0000007C   0x6829             LDR      R1,[R5, #+0]
   \   0000007E   0x9A02             LDR      R2,[SP, #+8]
   \   00000080   0x1A89             SUBS     R1,R1,R2
   \   00000082   0x1840             ADDS     R0,R0,R1
   \   00000084   0x9001             STR      R0,[SP, #+4]
    718              end = crt_end = p + len;
   \   00000086   0x9902             LDR      R1,[SP, #+8]
   \   00000088   0x1840             ADDS     R0,R0,R1
   \   0000008A   0x9003             STR      R0,[SP, #+12]
    719          
    720              /*
    721               * TBSCertificate  ::=  SEQUENCE  {
    722               */
    723              crt->tbs.p = p;
   \   0000008C   0x9801             LDR      R0,[SP, #+4]
   \   0000008E   0x6128             STR      R0,[R5, #+16]
    724          
    725              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    726                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \   00000090   0x2330             MOVS     R3,#+48
   \   00000092   0xAA02             ADD      R2,SP,#+8
   \   00000094   0x9903             LDR      R1,[SP, #+12]
   \   00000096   0xA801             ADD      R0,SP,#+4
   \   00000098   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   0000009C   0x0006             MOVS     R6,R0
   \   0000009E   0xD000             BEQ      .+4
   \   000000A0   0xE086             B        ??x509_crt_parse_der_core_7
    727              {
    728                  mbedtls_x509_crt_free( crt );
    729                  return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    730              }
    731          
    732              end = p + len;
   \   000000A2   0x9801             LDR      R0,[SP, #+4]
   \   000000A4   0x9902             LDR      R1,[SP, #+8]
   \   000000A6   0x1847             ADDS     R7,R0,R1
    733              crt->tbs.len = end - crt->tbs.p;
   \   000000A8   0x6928             LDR      R0,[R5, #+16]
   \   000000AA   0x1A38             SUBS     R0,R7,R0
   \   000000AC   0x60E8             STR      R0,[R5, #+12]
    734          
    735              /*
    736               * Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
    737               *
    738               * CertificateSerialNumber  ::=  INTEGER
    739               *
    740               * signature            AlgorithmIdentifier
    741               */
    742              if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
    743                  ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
    744                  ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
    745                                                      &sig_params1 ) ) != 0 )
   \   000000AE   0x23A0             MOVS     R3,#+160
   \   000000B0   0x466A             MOV      R2,SP
   \   000000B2   0x0039             MOVS     R1,R7
   \   000000B4   0xA801             ADD      R0,SP,#+4
   \   000000B6   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   000000BA   0x2800             CMP      R0,#+0
   \   000000BC   0xD021             BEQ      ??x509_crt_parse_der_core_8
   \   000000BE   0x2161             MOVS     R1,#+97
   \   000000C0   0x43C9             MVNS     R1,R1            ;; #-98
   \   000000C2   0x4288             CMP      R0,R1
   \   000000C4   0xD000             BEQ      .+4
   \   000000C6   0xE0E4             B        ??x509_crt_parse_der_core_9
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0x6168             STR      R0,[R5, #+20]
   \                     ??x509_crt_parse_der_core_10: (+1)
   \   000000CC   0x0022             MOVS     R2,R4
   \   000000CE   0x321C             ADDS     R2,R2,#+28
   \   000000D0   0x0039             MOVS     R1,R7
   \   000000D2   0xA801             ADD      R0,SP,#+4
   \   000000D4   0x.... 0x....      BL       mbedtls_x509_get_serial
   \   000000D8   0x0006             MOVS     R6,R0
   \   000000DA   0xD000             BEQ      .+4
   \   000000DC   0xE0F6             B        ??x509_crt_parse_der_core_11
   \   000000DE   0xAB04             ADD      R3,SP,#+16
   \   000000E0   0x0022             MOVS     R2,R4
   \   000000E2   0x3228             ADDS     R2,R2,#+40
   \   000000E4   0x0039             MOVS     R1,R7
   \   000000E6   0xA801             ADD      R0,SP,#+4
   \   000000E8   0x.... 0x....      BL       mbedtls_x509_get_alg
   \   000000EC   0x0006             MOVS     R6,R0
   \   000000EE   0xD000             BEQ      .+4
   \   000000F0   0xE0EC             B        ??x509_crt_parse_der_core_11
    746              {
    747                  mbedtls_x509_crt_free( crt );
    748                  return( ret );
    749              }
    750          
    751              if( crt->version < 0 || crt->version > 2 )
   \   000000F2   0x6968             LDR      R0,[R5, #+20]
   \   000000F4   0x2803             CMP      R0,#+3
   \   000000F6   0xD319             BCC      ??x509_crt_parse_der_core_12
    752              {
    753                  mbedtls_x509_crt_free( crt );
   \   000000F8   0x0020             MOVS     R0,R4
   \   000000FA   0x.... 0x....      BL       mbedtls_x509_crt_free
    754                  return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
   \   000000FE   0x....             LDR      R0,??DataTable75_2  ;; 0xffffda80
   \   00000100   0xE11E             B        ??x509_crt_parse_der_core_3
   \                     ??x509_crt_parse_der_core_8: (+1)
   \   00000102   0x9801             LDR      R0,[SP, #+4]
   \   00000104   0x9900             LDR      R1,[SP, #+0]
   \   00000106   0x1846             ADDS     R6,R0,R1
   \   00000108   0x0022             MOVS     R2,R4
   \   0000010A   0x3218             ADDS     R2,R2,#+24
   \   0000010C   0x0031             MOVS     R1,R6
   \   0000010E   0xA801             ADD      R0,SP,#+4
   \   00000110   0x.... 0x....      BL       mbedtls_asn1_get_int
   \   00000114   0x2800             CMP      R0,#+0
   \   00000116   0xD004             BEQ      ??x509_crt_parse_der_core_13
   \   00000118   0x....             LDR      R1,??DataTable76  ;; 0xffffde00
   \   0000011A   0x1846             ADDS     R6,R0,R1
    755              }
   \   0000011C   0xD000             BEQ      .+4
   \   0000011E   0xE0D5             B        ??x509_crt_parse_der_core_11
   \   00000120   0xE7D4             B        ??x509_crt_parse_der_core_10
   \                     ??x509_crt_parse_der_core_13: (+1)
   \   00000122   0x9801             LDR      R0,[SP, #+4]
   \   00000124   0x42B0             CMP      R0,R6
   \   00000126   0xD0D1             BEQ      ??x509_crt_parse_der_core_10
   \   00000128   0x....             LDR      R6,??DataTable76_1  ;; 0xffffdd9a
   \   0000012A   0xE0CF             B        ??x509_crt_parse_der_core_11
    756          
    757              crt->version++;
   \                     ??x509_crt_parse_der_core_12: (+1)
   \   0000012C   0x1C40             ADDS     R0,R0,#+1
   \   0000012E   0x6168             STR      R0,[R5, #+20]
    758          
    759              if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
    760                                            &crt->sig_md, &crt->sig_pk,
    761                                            &crt->sig_opts ) ) != 0 )
   \   00000130   0x2096             MOVS     R0,#+150
   \   00000132   0x0040             LSLS     R0,R0,#+1        ;; #+300
   \   00000134   0x1820             ADDS     R0,R4,R0
   \   00000136   0x9000             STR      R0,[SP, #+0]
   \   00000138   0x20FF             MOVS     R0,#+255
   \   0000013A   0x302A             ADDS     R0,R0,#+42       ;; #+297
   \   0000013C   0x1823             ADDS     R3,R4,R0
   \   0000013E   0x1E40             SUBS     R0,R0,#+1
   \   00000140   0x1822             ADDS     R2,R4,R0
   \   00000142   0xA904             ADD      R1,SP,#+16
   \   00000144   0x0020             MOVS     R0,R4
   \   00000146   0x3028             ADDS     R0,R0,#+40
   \   00000148   0x.... 0x....      BL       mbedtls_x509_get_sig_alg
   \   0000014C   0x0006             MOVS     R6,R0
   \   0000014E   0xD000             BEQ      .+4
   \   00000150   0xE0BC             B        ??x509_crt_parse_der_core_11
    762              {
    763                  mbedtls_x509_crt_free( crt );
    764                  return( ret );
    765              }
    766          
    767              /*
    768               * issuer               Name
    769               */
    770              crt->issuer_raw.p = p;
   \   00000152   0x9801             LDR      R0,[SP, #+4]
   \   00000154   0x63A8             STR      R0,[R5, #+56]
    771          
    772              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    773                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \   00000156   0x2330             MOVS     R3,#+48
   \   00000158   0xAA02             ADD      R2,SP,#+8
   \   0000015A   0x0039             MOVS     R1,R7
   \   0000015C   0xA801             ADD      R0,SP,#+4
   \   0000015E   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   00000162   0x0006             MOVS     R6,R0
   \   00000164   0xD124             BNE      ??x509_crt_parse_der_core_7
    774              {
    775                  mbedtls_x509_crt_free( crt );
    776                  return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    777              }
    778          
    779              if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
   \   00000166   0x0022             MOVS     R2,R4
   \   00000168   0x324C             ADDS     R2,R2,#+76
   \   0000016A   0x9801             LDR      R0,[SP, #+4]
   \   0000016C   0x9902             LDR      R1,[SP, #+8]
   \   0000016E   0x1841             ADDS     R1,R0,R1
   \   00000170   0xA801             ADD      R0,SP,#+4
   \   00000172   0x.... 0x....      BL       mbedtls_x509_get_name
   \   00000176   0x0006             MOVS     R6,R0
   \   00000178   0xD000             BEQ      .+4
   \   0000017A   0xE0A7             B        ??x509_crt_parse_der_core_11
    780              {
    781                  mbedtls_x509_crt_free( crt );
    782                  return( ret );
    783              }
    784          
    785              crt->issuer_raw.len = p - crt->issuer_raw.p;
   \   0000017C   0x9801             LDR      R0,[SP, #+4]
   \   0000017E   0x6BA9             LDR      R1,[R5, #+56]
   \   00000180   0x1A40             SUBS     R0,R0,R1
   \   00000182   0x6368             STR      R0,[R5, #+52]
    786          
    787              /*
    788               * Validity ::= SEQUENCE {
    789               *      notBefore      Time,
    790               *      notAfter       Time }
    791               *
    792               */
    793              if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
    794                                                   &crt->valid_to ) ) != 0 )
   \   00000184   0x2330             MOVS     R3,#+48
   \   00000186   0x466A             MOV      R2,SP
   \   00000188   0x0039             MOVS     R1,R7
   \   0000018A   0xA801             ADD      R0,SP,#+4
   \   0000018C   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   00000190   0x2800             CMP      R0,#+0
   \   00000192   0xD013             BEQ      ??x509_crt_parse_der_core_14
   \   00000194   0x....             LDR      R1,??DataTable76_2  ;; 0xffffdc00
   \   00000196   0x1846             ADDS     R6,R0,R1
   \   00000198   0xD000             BEQ      .+4
   \   0000019A   0xE097             B        ??x509_crt_parse_der_core_11
    795              {
    796                  mbedtls_x509_crt_free( crt );
    797                  return( ret );
    798              }
    799          
    800              /*
    801               * subject              Name
    802               */
    803              crt->subject_raw.p = p;
   \                     ??x509_crt_parse_der_core_15: (+1)
   \   0000019C   0x9801             LDR      R0,[SP, #+4]
   \   0000019E   0x6468             STR      R0,[R5, #+68]
    804          
    805              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    806                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \   000001A0   0x2330             MOVS     R3,#+48
   \   000001A2   0xAA02             ADD      R2,SP,#+8
   \   000001A4   0x0039             MOVS     R1,R7
   \   000001A6   0xA801             ADD      R0,SP,#+4
   \   000001A8   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   000001AC   0x0006             MOVS     R6,R0
   \   000001AE   0xD01D             BEQ      ??x509_crt_parse_der_core_16
    807              {
    808                  mbedtls_x509_crt_free( crt );
   \                     ??x509_crt_parse_der_core_7: (+1)
   \   000001B0   0x0020             MOVS     R0,R4
   \   000001B2   0x.... 0x....      BL       mbedtls_x509_crt_free
    809                  return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
   \   000001B6   0x....             LDR      R0,??DataTable75  ;; 0xffffde80
   \   000001B8   0x1830             ADDS     R0,R6,R0
   \   000001BA   0xE0C1             B        ??x509_crt_parse_der_core_3
   \                     ??x509_crt_parse_der_core_14: (+1)
   \   000001BC   0x9801             LDR      R0,[SP, #+4]
   \   000001BE   0x9900             LDR      R1,[SP, #+0]
   \   000001C0   0x1846             ADDS     R6,R0,R1
   \   000001C2   0x0022             MOVS     R2,R4
   \   000001C4   0x328C             ADDS     R2,R2,#+140
   \   000001C6   0x0031             MOVS     R1,R6
   \   000001C8   0xA801             ADD      R0,SP,#+4
   \   000001CA   0x.... 0x....      BL       mbedtls_x509_get_time
   \   000001CE   0x2800             CMP      R0,#+0
   \   000001D0   0xD15F             BNE      ??x509_crt_parse_der_core_9
   \   000001D2   0x0022             MOVS     R2,R4
   \   000001D4   0x32A4             ADDS     R2,R2,#+164
   \   000001D6   0x0031             MOVS     R1,R6
   \   000001D8   0xA801             ADD      R0,SP,#+4
   \   000001DA   0x.... 0x....      BL       mbedtls_x509_get_time
   \   000001DE   0x2800             CMP      R0,#+0
   \   000001E0   0xD157             BNE      ??x509_crt_parse_der_core_9
   \   000001E2   0x9801             LDR      R0,[SP, #+4]
   \   000001E4   0x42B0             CMP      R0,R6
   \   000001E6   0xD0D9             BEQ      ??x509_crt_parse_der_core_15
   \   000001E8   0x....             LDR      R6,??DataTable76_3  ;; 0xffffdb9a
   \   000001EA   0xE06F             B        ??x509_crt_parse_der_core_11
    810              }
    811          
    812              if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
   \                     ??x509_crt_parse_der_core_16: (+1)
   \   000001EC   0x9802             LDR      R0,[SP, #+8]
   \   000001EE   0x2800             CMP      R0,#+0
   \   000001F0   0xD009             BEQ      ??x509_crt_parse_der_core_17
   \   000001F2   0x0022             MOVS     R2,R4
   \   000001F4   0x326C             ADDS     R2,R2,#+108
   \   000001F6   0x9801             LDR      R0,[SP, #+4]
   \   000001F8   0x9902             LDR      R1,[SP, #+8]
   \   000001FA   0x1841             ADDS     R1,R0,R1
   \   000001FC   0xA801             ADD      R0,SP,#+4
   \   000001FE   0x.... 0x....      BL       mbedtls_x509_get_name
   \   00000202   0x0006             MOVS     R6,R0
   \   00000204   0xD162             BNE      ??x509_crt_parse_der_core_11
    813              {
    814                  mbedtls_x509_crt_free( crt );
    815                  return( ret );
    816              }
    817          
    818              crt->subject_raw.len = p - crt->subject_raw.p;
   \                     ??x509_crt_parse_der_core_17: (+1)
   \   00000206   0x9801             LDR      R0,[SP, #+4]
   \   00000208   0x6C69             LDR      R1,[R5, #+68]
   \   0000020A   0x1A40             SUBS     R0,R0,R1
   \   0000020C   0x6428             STR      R0,[R5, #+64]
    819          
    820              /*
    821               * SubjectPublicKeyInfo
    822               */
    823              if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
   \   0000020E   0x0022             MOVS     R2,R4
   \   00000210   0x32BC             ADDS     R2,R2,#+188
   \   00000212   0x0039             MOVS     R1,R7
   \   00000214   0xA801             ADD      R0,SP,#+4
   \   00000216   0x.... 0x....      BL       mbedtls_pk_parse_subpubkey
   \   0000021A   0x0006             MOVS     R6,R0
   \   0000021C   0xD156             BNE      ??x509_crt_parse_der_core_11
    824              {
    825                  mbedtls_x509_crt_free( crt );
    826                  return( ret );
    827              }
    828          
    829              /*
    830               *  issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
    831               *                       -- If present, version shall be v2 or v3
    832               *  subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
    833               *                       -- If present, version shall be v2 or v3
    834               *  extensions      [3]  EXPLICIT Extensions OPTIONAL
    835               *                       -- If present, version shall be v3
    836               */
    837              if( crt->version == 2 || crt->version == 3 )
   \   0000021E   0x6968             LDR      R0,[R5, #+20]
   \   00000220   0x2802             CMP      R0,#+2
   \   00000222   0xD001             BEQ      ??x509_crt_parse_der_core_18
   \   00000224   0x2803             CMP      R0,#+3
   \   00000226   0xD11D             BNE      ??x509_crt_parse_der_core_19
    838              {
    839                  ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
   \                     ??x509_crt_parse_der_core_18: (+1)
   \   00000228   0x9801             LDR      R0,[SP, #+4]
   \   0000022A   0x42B8             CMP      R0,R7
   \   0000022C   0xD017             BEQ      ??x509_crt_parse_der_core_20
   \   0000022E   0x0026             MOVS     R6,R4
   \   00000230   0x36C4             ADDS     R6,R6,#+196
   \   00000232   0x7800             LDRB     R0,[R0, #+0]
   \   00000234   0x6030             STR      R0,[R6, #+0]
   \   00000236   0x23A1             MOVS     R3,#+161
   \   00000238   0x0022             MOVS     R2,R4
   \   0000023A   0x32C8             ADDS     R2,R2,#+200
   \   0000023C   0x0039             MOVS     R1,R7
   \   0000023E   0xA801             ADD      R0,SP,#+4
   \   00000240   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   00000244   0x2800             CMP      R0,#+0
   \   00000246   0xD004             BEQ      ??x509_crt_parse_der_core_21
   \   00000248   0x2161             MOVS     R1,#+97
   \   0000024A   0x43C9             MVNS     R1,R1            ;; #-98
   \   0000024C   0x4288             CMP      R0,R1
   \   0000024E   0xD006             BEQ      ??x509_crt_parse_der_core_20
   \   00000250   0xE01F             B.N      ??x509_crt_parse_der_core_9
   \                     ??x509_crt_parse_der_core_21: (+1)
   \   00000252   0x9801             LDR      R0,[SP, #+4]
   \   00000254   0x60B0             STR      R0,[R6, #+8]
   \   00000256   0x9801             LDR      R0,[SP, #+4]
   \   00000258   0x6871             LDR      R1,[R6, #+4]
   \   0000025A   0x1840             ADDS     R0,R0,R1
   \   0000025C   0x9001             STR      R0,[SP, #+4]
    840                  if( ret != 0 )
    841                  {
    842                      mbedtls_x509_crt_free( crt );
    843                      return( ret );
    844                  }
    845              }
    846          
    847              if( crt->version == 2 || crt->version == 3 )
   \                     ??x509_crt_parse_der_core_20: (+1)
   \   0000025E   0x6968             LDR      R0,[R5, #+20]
   \   00000260   0x2802             CMP      R0,#+2
   \   00000262   0xD002             BEQ      ??x509_crt_parse_der_core_22
   \                     ??x509_crt_parse_der_core_19: (+1)
   \   00000264   0x6968             LDR      R0,[R5, #+20]
   \   00000266   0x2803             CMP      R0,#+3
   \   00000268   0xD11B             BNE      ??x509_crt_parse_der_core_23
    848              {
    849                  ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
   \                     ??x509_crt_parse_der_core_22: (+1)
   \   0000026A   0x9801             LDR      R0,[SP, #+4]
   \   0000026C   0x42B8             CMP      R0,R7
   \   0000026E   0xD018             BEQ      ??x509_crt_parse_der_core_23
   \   00000270   0x0026             MOVS     R6,R4
   \   00000272   0x36C4             ADDS     R6,R6,#+196
   \   00000274   0x7800             LDRB     R0,[R0, #+0]
   \   00000276   0x60F0             STR      R0,[R6, #+12]
   \   00000278   0x23A2             MOVS     R3,#+162
   \   0000027A   0x0022             MOVS     R2,R4
   \   0000027C   0x32D4             ADDS     R2,R2,#+212
   \   0000027E   0x0039             MOVS     R1,R7
   \   00000280   0xA801             ADD      R0,SP,#+4
   \   00000282   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   00000286   0x2800             CMP      R0,#+0
   \   00000288   0xD005             BEQ      ??x509_crt_parse_der_core_24
   \   0000028A   0x2161             MOVS     R1,#+97
   \   0000028C   0x43C9             MVNS     R1,R1            ;; #-98
   \   0000028E   0x4288             CMP      R0,R1
   \   00000290   0xD007             BEQ      ??x509_crt_parse_der_core_23
   \                     ??x509_crt_parse_der_core_9: (+1)
   \   00000292   0x0006             MOVS     R6,R0
   \   00000294   0xE01A             B        ??x509_crt_parse_der_core_11
   \                     ??x509_crt_parse_der_core_24: (+1)
   \   00000296   0x9801             LDR      R0,[SP, #+4]
   \   00000298   0x6170             STR      R0,[R6, #+20]
   \   0000029A   0x9801             LDR      R0,[SP, #+4]
   \   0000029C   0x6931             LDR      R1,[R6, #+16]
   \   0000029E   0x1840             ADDS     R0,R0,R1
   \   000002A0   0x9001             STR      R0,[SP, #+4]
    850                  if( ret != 0 )
    851                  {
    852                      mbedtls_x509_crt_free( crt );
    853                      return( ret );
    854                  }
    855              }
    856          
    857          #if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    858              if( crt->version == 3 )
   \                     ??x509_crt_parse_der_core_23: (+1)
   \   000002A2   0x6968             LDR      R0,[R5, #+20]
   \   000002A4   0x2803             CMP      R0,#+3
   \   000002A6   0xD106             BNE      ??x509_crt_parse_der_core_25
    859          #endif
    860              {
    861                  ret = x509_get_crt_ext( &p, end, crt );
   \   000002A8   0x0022             MOVS     R2,R4
   \   000002AA   0x0039             MOVS     R1,R7
   \   000002AC   0xA801             ADD      R0,SP,#+4
   \   000002AE   0x.... 0x....      BL       x509_get_crt_ext
   \   000002B2   0x0006             MOVS     R6,R0
    862                  if( ret != 0 )
   \   000002B4   0xD10A             BNE      ??x509_crt_parse_der_core_11
    863                  {
    864                      mbedtls_x509_crt_free( crt );
    865                      return( ret );
    866                  }
    867              }
    868          
    869              if( p != end )
   \                     ??x509_crt_parse_der_core_25: (+1)
   \   000002B6   0x9801             LDR      R0,[SP, #+4]
   \   000002B8   0x42B8             CMP      R0,R7
   \   000002BA   0xD13B             BNE      ??x509_crt_parse_der_core_5
    870              {
    871                  mbedtls_x509_crt_free( crt );
    872                  return( MBEDTLS_ERR_X509_INVALID_FORMAT +
    873                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    874              }
    875          
    876              end = crt_end;
    877          
    878              /*
    879               *  }
    880               *  -- end of TBSCertificate
    881               *
    882               *  signatureAlgorithm   AlgorithmIdentifier,
    883               *  signatureValue       BIT STRING
    884               */
    885              if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
   \   000002BC   0xAB0A             ADD      R3,SP,#+40
   \   000002BE   0xAA07             ADD      R2,SP,#+28
   \   000002C0   0x9903             LDR      R1,[SP, #+12]
   \   000002C2   0xA801             ADD      R0,SP,#+4
   \   000002C4   0x.... 0x....      BL       mbedtls_x509_get_alg
   \   000002C8   0x0006             MOVS     R6,R0
   \   000002CA   0xD004             BEQ      ??x509_crt_parse_der_core_26
    886              {
    887                  mbedtls_x509_crt_free( crt );
   \                     ??x509_crt_parse_der_core_11: (+1)
   \   000002CC   0x0020             MOVS     R0,R4
   \   000002CE   0x.... 0x....      BL       mbedtls_x509_crt_free
    888                  return( ret );
   \   000002D2   0x0030             MOVS     R0,R6
   \   000002D4   0xE034             B        ??x509_crt_parse_der_core_3
    889              }
    890          
    891              if( crt->sig_oid.len != sig_oid2.len ||
    892                  memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
    893                  sig_params1.len != sig_params2.len ||
    894                  ( sig_params1.len != 0 &&
    895                    memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
   \                     ??x509_crt_parse_der_core_26: (+1)
   \   000002D6   0x6AAA             LDR      R2,[R5, #+40]
   \   000002D8   0x9808             LDR      R0,[SP, #+32]
   \   000002DA   0x4282             CMP      R2,R0
   \   000002DC   0xD111             BNE      ??x509_crt_parse_der_core_27
   \   000002DE   0x9909             LDR      R1,[SP, #+36]
   \   000002E0   0x6AE8             LDR      R0,[R5, #+44]
   \   000002E2   0x.... 0x....      BL       memcmp
   \   000002E6   0x2800             CMP      R0,#+0
   \   000002E8   0xD10B             BNE      ??x509_crt_parse_der_core_27
   \   000002EA   0x9A05             LDR      R2,[SP, #+20]
   \   000002EC   0x980B             LDR      R0,[SP, #+44]
   \   000002EE   0x4282             CMP      R2,R0
   \   000002F0   0xD107             BNE      ??x509_crt_parse_der_core_27
   \   000002F2   0x2A00             CMP      R2,#+0
   \   000002F4   0xD00C             BEQ      ??x509_crt_parse_der_core_28
   \   000002F6   0x990C             LDR      R1,[SP, #+48]
   \   000002F8   0x9806             LDR      R0,[SP, #+24]
   \   000002FA   0x.... 0x....      BL       memcmp
   \   000002FE   0x2800             CMP      R0,#+0
   \   00000300   0xD006             BEQ      ??x509_crt_parse_der_core_28
    896              {
    897                  mbedtls_x509_crt_free( crt );
   \                     ??x509_crt_parse_der_core_27: (+1)
   \   00000302   0x0020             MOVS     R0,R4
   \   00000304   0x.... 0x....      BL       mbedtls_x509_crt_free
    898                  return( MBEDTLS_ERR_X509_SIG_MISMATCH );
   \   00000308   0x....             LDR      R0,??DataTable77  ;; 0xffffd980
   \   0000030A   0xE019             B        ??x509_crt_parse_der_core_3
   \                     ??x509_crt_parse_der_core_2:
   \   0000030C   0xFFFFD800         DC32     0xffffd800
    899              }
    900          
    901              if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
   \                     ??x509_crt_parse_der_core_28: (+1)
   \   00000310   0x208E             MOVS     R0,#+142
   \   00000312   0x0040             LSLS     R0,R0,#+1        ;; #+284
   \   00000314   0x1822             ADDS     R2,R4,R0
   \   00000316   0x9903             LDR      R1,[SP, #+12]
   \   00000318   0xA801             ADD      R0,SP,#+4
   \   0000031A   0x.... 0x....      BL       mbedtls_x509_get_sig
   \   0000031E   0x0005             MOVS     R5,R0
   \   00000320   0xD004             BEQ      ??x509_crt_parse_der_core_29
    902              {
    903                  mbedtls_x509_crt_free( crt );
   \   00000322   0x0020             MOVS     R0,R4
   \   00000324   0x.... 0x....      BL       mbedtls_x509_crt_free
    904                  return( ret );
   \   00000328   0x0028             MOVS     R0,R5
   \   0000032A   0xE009             B        ??x509_crt_parse_der_core_3
    905              }
    906          
    907              if( p != end )
   \                     ??x509_crt_parse_der_core_29: (+1)
   \   0000032C   0x9801             LDR      R0,[SP, #+4]
   \   0000032E   0x9903             LDR      R1,[SP, #+12]
   \   00000330   0x4288             CMP      R0,R1
   \   00000332   0xD004             BEQ      ??x509_crt_parse_der_core_30
    908              {
    909                  mbedtls_x509_crt_free( crt );
   \                     ??x509_crt_parse_der_core_5: (+1)
   \   00000334   0x0020             MOVS     R0,R4
   \   00000336   0x.... 0x....      BL       mbedtls_x509_crt_free
    910                  return( MBEDTLS_ERR_X509_INVALID_FORMAT +
    911                          MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
   \   0000033A   0x....             LDR      R0,??DataTable77_1  ;; 0xffffde1a
   \   0000033C   0xE000             B        ??x509_crt_parse_der_core_3
    912              }
    913          
    914              return( 0 );
   \                     ??x509_crt_parse_der_core_30: (+1)
   \   0000033E   0x2000             MOVS     R0,#+0
   \                     ??x509_crt_parse_der_core_3: (+1)
   \   00000340   0xB00D             ADD      SP,SP,#+52
   \   00000342   0xBDF0             POP      {R4-R7,PC}       ;; return
    915          }
    916          
    917          /*
    918           * Parse one X.509 certificate in DER format from a buffer and add them to a
    919           * chained list
    920           */

   \                                 In section .text, align 2, keep-with-next
    921          int mbedtls_x509_crt_parse_der( mbedtls_x509_crt *chain, const unsigned char *buf,
    922                                  size_t buflen )
    923          {
   \                     mbedtls_x509_crt_parse_der: (+1)
   \   00000000   0xB5F7             PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    924              int ret;
    925              mbedtls_x509_crt *crt = chain, *prev = NULL;
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x9500             STR      R5,[SP, #+0]
    926          
    927              /*
    928               * Check for valid input
    929               */
    930              if( crt == NULL || buf == NULL )
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD002             BEQ      ??mbedtls_x509_crt_parse_der_0
   \   0000000E   0x9803             LDR      R0,[SP, #+12]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD103             BNE      ??mbedtls_x509_crt_parse_der_1
    931                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   \                     ??mbedtls_x509_crt_parse_der_0: (+1)
   \   00000014   0x....             LDR      R0,??DataTable78  ;; 0xffffd800
   \   00000016   0xE039             B        ??mbedtls_x509_crt_parse_der_2
    932          
    933              while( crt->version != 0 && crt->next != NULL )
    934              {
    935                  prev = crt;
   \                     ??mbedtls_x509_crt_parse_der_3: (+1)
   \   00000018   0x9400             STR      R4,[SP, #+0]
    936                  crt = crt->next;
   \   0000001A   0x0004             MOVS     R4,R0
    937              }
   \                     ??mbedtls_x509_crt_parse_der_1: (+1)
   \   0000001C   0x69A0             LDR      R0,[R4, #+24]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD005             BEQ      ??mbedtls_x509_crt_parse_der_4
   \   00000022   0x2098             MOVS     R0,#+152
   \   00000024   0x0040             LSLS     R0,R0,#+1        ;; #+304
   \   00000026   0x1827             ADDS     R7,R4,R0
   \   00000028   0x6838             LDR      R0,[R7, #+0]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD1F4             BNE      ??mbedtls_x509_crt_parse_der_3
    938          
    939              /*
    940               * Add new certificate on the end of the chain if needed.
    941               */
    942              if( crt->version != 0 && crt->next == NULL )
   \                     ??mbedtls_x509_crt_parse_der_4: (+1)
   \   0000002E   0x69A0             LDR      R0,[R4, #+24]
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD015             BEQ      ??mbedtls_x509_crt_parse_der_5
   \   00000034   0x2098             MOVS     R0,#+152
   \   00000036   0x0040             LSLS     R0,R0,#+1        ;; #+304
   \   00000038   0x1827             ADDS     R7,R4,R0
   \   0000003A   0x6838             LDR      R0,[R7, #+0]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD10F             BNE      ??mbedtls_x509_crt_parse_der_5
    943              {
    944                  crt->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
   \   00000040   0x269A             MOVS     R6,#+154
   \   00000042   0x0076             LSLS     R6,R6,#+1        ;; #+308
   \   00000044   0x0031             MOVS     R1,R6
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x.... 0x....      BL       calloc
   \   0000004C   0x6038             STR      R0,[R7, #+0]
    945          
    946                  if( crt->next == NULL )
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD101             BNE      ??mbedtls_x509_crt_parse_der_6
    947                      return( MBEDTLS_ERR_X509_ALLOC_FAILED );
   \   00000052   0x....             LDR      R0,??DataTable78_1  ;; 0xffffd780
   \   00000054   0xE01A             B        ??mbedtls_x509_crt_parse_der_2
    948          
    949                  prev = crt;
   \                     ??mbedtls_x509_crt_parse_der_6: (+1)
   \   00000056   0x9400             STR      R4,[SP, #+0]
    950                  mbedtls_x509_crt_init( crt->next );
   \   00000058   0x0031             MOVS     R1,R6
   \   0000005A   0x.... 0x....      BL       __aeabi_memclr4
    951                  crt = crt->next;
   \   0000005E   0x683C             LDR      R4,[R7, #+0]
    952              }
    953          
    954              if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
   \                     ??mbedtls_x509_crt_parse_der_5: (+1)
   \   00000060   0x9A04             LDR      R2,[SP, #+16]
   \   00000062   0x9903             LDR      R1,[SP, #+12]
   \   00000064   0x0020             MOVS     R0,R4
   \   00000066   0x.... 0x....      BL       x509_crt_parse_der_core
   \   0000006A   0x0006             MOVS     R6,R0
   \   0000006C   0xD00D             BEQ      ??mbedtls_x509_crt_parse_der_7
    955              {
    956                  if( prev )
   \   0000006E   0x9800             LDR      R0,[SP, #+0]
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD002             BEQ      ??mbedtls_x509_crt_parse_der_8
    957                      prev->next = NULL;
   \   00000074   0x2198             MOVS     R1,#+152
   \   00000076   0x0049             LSLS     R1,R1,#+1        ;; #+304
   \   00000078   0x5045             STR      R5,[R0, R1]
    958          
    959                  if( crt != chain )
   \                     ??mbedtls_x509_crt_parse_der_8: (+1)
   \   0000007A   0x9802             LDR      R0,[SP, #+8]
   \   0000007C   0x4284             CMP      R4,R0
   \   0000007E   0xD002             BEQ      ??mbedtls_x509_crt_parse_der_9
    960                      mbedtls_free( crt );
   \   00000080   0x0020             MOVS     R0,R4
   \   00000082   0x.... 0x....      BL       free
    961          
    962                  return( ret );
   \                     ??mbedtls_x509_crt_parse_der_9: (+1)
   \   00000086   0x0030             MOVS     R0,R6
   \   00000088   0xE000             B        ??mbedtls_x509_crt_parse_der_2
    963              }
    964          
    965              return( 0 );
   \                     ??mbedtls_x509_crt_parse_der_7: (+1)
   \   0000008A   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_x509_crt_parse_der_2: (+1)
   \   0000008C   0xB005             ADD      SP,SP,#+20
   \   0000008E   0xBDF0             POP      {R4-R7,PC}       ;; return
    966          }
    967          
    968          /*
    969           * Parse one or more PEM certificates from a buffer and add them to the chained
    970           * list
    971           */

   \                                 In section .text, align 4, keep-with-next
    972          int mbedtls_x509_crt_parse( mbedtls_x509_crt *chain, const unsigned char *buf, size_t buflen )
    973          {
   \                     mbedtls_x509_crt_parse: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0015             MOVS     R5,R2
    974          #if defined(MBEDTLS_PEM_PARSE_C)
    975              int success = 0, first_error = 0, total_failed = 0;
   \   00000008   0x2700             MOVS     R7,#+0
   \   0000000A   0x9705             STR      R7,[SP, #+20]
   \   0000000C   0x9704             STR      R7,[SP, #+16]
    976              int buf_format = MBEDTLS_X509_FORMAT_DER;
    977          #endif
    978          
    979              /*
    980               * Check for valid input
    981               */
    982              if( chain == NULL || buf == NULL )
   \   0000000E   0x980A             LDR      R0,[SP, #+40]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD001             BEQ      ??mbedtls_x509_crt_parse_0
   \   00000014   0x2C00             CMP      R4,#+0
   \   00000016   0xD101             BNE      ??mbedtls_x509_crt_parse_1
    983                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   \                     ??mbedtls_x509_crt_parse_0: (+1)
   \   00000018   0x....             LDR      R0,??DataTable78  ;; 0xffffd800
   \   0000001A   0xE05A             B        ??mbedtls_x509_crt_parse_2
    984          
    985              /*
    986               * Determine buffer content. Buffer contains either one DER certificate or
    987               * one or more PEM certificates.
    988               */
    989          #if defined(MBEDTLS_PEM_PARSE_C)
    990              if( buflen != 0 && buf[buflen - 1] == '\0' &&
    991                  strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
   \                     ??mbedtls_x509_crt_parse_1: (+1)
   \   0000001C   0x2D00             CMP      R5,#+0
   \   0000001E   0xD00B             BEQ      ??mbedtls_x509_crt_parse_3
   \   00000020   0x1960             ADDS     R0,R4,R5
   \   00000022   0x1E40             SUBS     R0,R0,#+1
   \   00000024   0x7800             LDRB     R0,[R0, #+0]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD106             BNE      ??mbedtls_x509_crt_parse_3
   \   0000002A   0xBF00             Nop      
   \   0000002C   0x....             ADR.N    R1,?_20
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0x.... 0x....      BL       __iar_Strstr
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD10B             BNE      ??mbedtls_x509_crt_parse_4
    992              {
    993                  buf_format = MBEDTLS_X509_FORMAT_PEM;
    994              }
    995          
    996              if( buf_format == MBEDTLS_X509_FORMAT_DER )
    997                  return mbedtls_x509_crt_parse_der( chain, buf, buflen );
   \                     ??mbedtls_x509_crt_parse_3: (+1)
   \   00000038   0x002A             MOVS     R2,R5
   \   0000003A   0x0021             MOVS     R1,R4
   \   0000003C   0x980A             LDR      R0,[SP, #+40]
   \   0000003E   0x.... 0x....      BL       mbedtls_x509_crt_parse_der
   \   00000042   0xE046             B        ??mbedtls_x509_crt_parse_2
    998          #else
    999              return mbedtls_x509_crt_parse_der( chain, buf, buflen );
   1000          #endif
   1001          
   1002          #if defined(MBEDTLS_PEM_PARSE_C)
   1003              if( buf_format == MBEDTLS_X509_FORMAT_PEM )
   1004              {
   1005                  int ret;
   1006                  mbedtls_pem_context pem;
   1007          
   1008                  /* 1 rather than 0 since the terminating NULL byte is counted in */
   1009                  while( buflen > 1 )
   1010                  {
   1011                      size_t use_len;
   1012                      mbedtls_pem_init( &pem );
   1013          
   1014                      /* If we get there, we know the string is null-terminated */
   1015                      ret = mbedtls_pem_read_buffer( &pem,
   1016                                     "-----BEGIN CERTIFICATE-----",
   1017                                     "-----END CERTIFICATE-----",
   1018                                     buf, NULL, 0, &use_len );
   1019          
   1020                      if( ret == 0 )
   1021                      {
   1022                          /*
   1023                           * Was PEM encoded
   1024                           */
   1025                          buflen -= use_len;
   1026                          buf += use_len;
   1027                      }
   1028                      else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
   1029                      {
   1030                          return( ret );
   1031                      }
   1032                      else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
   1033                      {
   1034                          mbedtls_pem_free( &pem );
   1035          
   1036                          /*
   1037                           * PEM header and footer were found
   1038                           */
   1039                          buflen -= use_len;
   1040                          buf += use_len;
   1041          
   1042                          if( first_error == 0 )
   1043                              first_error = ret;
   1044          
   1045                          total_failed++;
   1046                          continue;
   1047                      }
   1048                      else
   1049                          break;
   1050          
   1051                      ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
   1052          
   1053                      mbedtls_pem_free( &pem );
   1054          
   1055                      if( ret != 0 )
   1056                      {
   1057                          /*
   1058                           * Quit parsing on a memory error
   1059                           */
   1060                          if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
   1061                              return( ret );
   1062          
   1063                          if( first_error == 0 )
   \                     ??mbedtls_x509_crt_parse_5: (+1)
   \   00000044   0x2F00             CMP      R7,#+0
   \   00000046   0xD100             BNE      ??mbedtls_x509_crt_parse_6
   1064                              first_error = ret;
   \   00000048   0x0037             MOVS     R7,R6
   1065          
   1066                          total_failed++;
   \                     ??mbedtls_x509_crt_parse_6: (+1)
   \   0000004A   0x9804             LDR      R0,[SP, #+16]
   \   0000004C   0x1C40             ADDS     R0,R0,#+1
   \   0000004E   0x9004             STR      R0,[SP, #+16]
   1067                          continue;
   \                     ??mbedtls_x509_crt_parse_4: (+1)
   \   00000050   0x2D02             CMP      R5,#+2
   \   00000052   0xD334             BCC      ??mbedtls_x509_crt_parse_7
   \   00000054   0xA806             ADD      R0,SP,#+24
   \   00000056   0x.... 0x....      BL       mbedtls_pem_init
   \   0000005A   0xA803             ADD      R0,SP,#+12
   \   0000005C   0x9002             STR      R0,[SP, #+8]
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x9001             STR      R0,[SP, #+4]
   \   00000062   0x9000             STR      R0,[SP, #+0]
   \   00000064   0x0023             MOVS     R3,R4
   \   00000066   0xBF00             Nop      
   \   00000068   0x....             ADR.N    R2,?_21
   \   0000006A   0xBF00             Nop      
   \   0000006C   0x....             ADR.N    R1,?_20
   \   0000006E   0xA806             ADD      R0,SP,#+24
   \   00000070   0x.... 0x....      BL       mbedtls_pem_read_buffer
   \   00000074   0x0006             MOVS     R6,R0
   \   00000076   0xD110             BNE      ??mbedtls_x509_crt_parse_8
   \   00000078   0x9803             LDR      R0,[SP, #+12]
   \   0000007A   0x1A2D             SUBS     R5,R5,R0
   \   0000007C   0x1824             ADDS     R4,R4,R0
   \   0000007E   0x9A07             LDR      R2,[SP, #+28]
   \   00000080   0x9906             LDR      R1,[SP, #+24]
   \   00000082   0x980A             LDR      R0,[SP, #+40]
   \   00000084   0x.... 0x....      BL       mbedtls_x509_crt_parse_der
   \   00000088   0x0006             MOVS     R6,R0
   \   0000008A   0xA806             ADD      R0,SP,#+24
   \   0000008C   0x.... 0x....      BL       mbedtls_pem_free
   \   00000090   0x2E00             CMP      R6,#+0
   \   00000092   0xD10F             BNE      ??mbedtls_x509_crt_parse_9
   1068                      }
   1069          
   1070                      success = 1;
   \   00000094   0x2001             MOVS     R0,#+1
   \   00000096   0x9005             STR      R0,[SP, #+20]
   \   00000098   0xE7DA             B        ??mbedtls_x509_crt_parse_4
   \                     ??mbedtls_x509_crt_parse_8: (+1)
   \   0000009A   0x....             LDR      R0,??DataTable78_2  ;; 0xffffeb80
   \   0000009C   0x4286             CMP      R6,R0
   \   0000009E   0xD00C             BEQ      ??mbedtls_x509_crt_parse_10
   \   000000A0   0x....             LDR      R0,??DataTable78_3  ;; 0xffffef80
   \   000000A2   0x4286             CMP      R6,R0
   \   000000A4   0xD00B             BEQ      ??mbedtls_x509_crt_parse_7
   \   000000A6   0xA806             ADD      R0,SP,#+24
   \   000000A8   0x.... 0x....      BL       mbedtls_pem_free
   \   000000AC   0x9803             LDR      R0,[SP, #+12]
   \   000000AE   0x1A2D             SUBS     R5,R5,R0
   \   000000B0   0x1824             ADDS     R4,R4,R0
   \   000000B2   0xE7C7             B        ??mbedtls_x509_crt_parse_5
   \                     ??mbedtls_x509_crt_parse_9: (+1)
   \   000000B4   0x....             LDR      R0,??DataTable78_1  ;; 0xffffd780
   \   000000B6   0x4286             CMP      R6,R0
   \   000000B8   0xD1C4             BNE      ??mbedtls_x509_crt_parse_5
   \                     ??mbedtls_x509_crt_parse_10: (+1)
   \   000000BA   0x0030             MOVS     R0,R6
   \   000000BC   0xE009             B        ??mbedtls_x509_crt_parse_2
   1071                  }
   1072              }
   1073          
   1074              if( success )
   \                     ??mbedtls_x509_crt_parse_7: (+1)
   \   000000BE   0x9805             LDR      R0,[SP, #+20]
   \   000000C0   0x2800             CMP      R0,#+0
   \   000000C2   0xD001             BEQ      ??mbedtls_x509_crt_parse_11
   1075                  return( total_failed );
   \   000000C4   0x9804             LDR      R0,[SP, #+16]
   \   000000C6   0xE004             B        ??mbedtls_x509_crt_parse_2
   1076              else if( first_error )
   \                     ??mbedtls_x509_crt_parse_11: (+1)
   \   000000C8   0x2F00             CMP      R7,#+0
   \   000000CA   0xD001             BEQ      ??mbedtls_x509_crt_parse_12
   1077                  return( first_error );
   \   000000CC   0x0038             MOVS     R0,R7
   \   000000CE   0xE000             B        ??mbedtls_x509_crt_parse_2
   1078              else
   1079                  return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
   \                     ??mbedtls_x509_crt_parse_12: (+1)
   \   000000D0   0x....             LDR      R0,??DataTable78_4  ;; 0xffffd880
   \                     ??mbedtls_x509_crt_parse_2: (+1)
   \   000000D2   0xB00B             ADD      SP,SP,#+44
   \   000000D4   0xBDF0             POP      {R4-R7,PC}       ;; return
   1080          #endif /* MBEDTLS_PEM_PARSE_C */
   1081          }
   1082          
   1083          #if defined(MBEDTLS_FS_IO)
   1084          /*
   1085           * Load one or more certificates and add them to the chained list
   1086           */
   1087          int mbedtls_x509_crt_parse_file( mbedtls_x509_crt *chain, const char *path )
   1088          {
   1089              int ret;
   1090              size_t n;
   1091              unsigned char *buf;
   1092          
   1093              if( ( ret = mbedtls_pk_load_file( path, &buf, &n ) ) != 0 )
   1094                  return( ret );
   1095          
   1096              ret = mbedtls_x509_crt_parse( chain, buf, n );
   1097          
   1098              mbedtls_zeroize( buf, n );
   1099              mbedtls_free( buf );
   1100          
   1101              return( ret );
   1102          }
   1103          
   1104          int mbedtls_x509_crt_parse_path( mbedtls_x509_crt *chain, const char *path )
   1105          {
   1106              int ret = 0;
   1107          #if defined(_WIN32) && !defined(EFIX64) && !defined(EFI32)
   1108              int w_ret;
   1109              WCHAR szDir[MAX_PATH];
   1110              char filename[MAX_PATH];
   1111              char *p;
   1112              size_t len = strlen( path );
   1113          
   1114              WIN32_FIND_DATAW file_data;
   1115              HANDLE hFind;
   1116          
   1117              if( len > MAX_PATH - 3 )
   1118                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   1119          
   1120              memset( szDir, 0, sizeof(szDir) );
   1121              memset( filename, 0, MAX_PATH );
   1122              memcpy( filename, path, len );
   1123              filename[len++] = '\\';
   1124              p = filename + len;
   1125              filename[len++] = '*';
   1126          
   1127              w_ret = MultiByteToWideChar( CP_ACP, 0, filename, (int)len, szDir,
   1128                                           MAX_PATH - 3 );
   1129              if( w_ret == 0 )
   1130                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   1131          
   1132              hFind = FindFirstFileW( szDir, &file_data );
   1133              if( hFind == INVALID_HANDLE_VALUE )
   1134                  return( MBEDTLS_ERR_X509_FILE_IO_ERROR );
   1135          
   1136              len = MAX_PATH - len;
   1137              do
   1138              {
   1139                  memset( p, 0, len );
   1140          
   1141                  if( file_data.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY )
   1142                      continue;
   1143          
   1144                  w_ret = WideCharToMultiByte( CP_ACP, 0, file_data.cFileName,
   1145                                               lstrlenW( file_data.cFileName ),
   1146                                               p, (int) len - 1,
   1147                                               NULL, NULL );
   1148                  if( w_ret == 0 )
   1149                  {
   1150                      ret = MBEDTLS_ERR_X509_FILE_IO_ERROR;
   1151                      goto cleanup;
   1152                  }
   1153          
   1154                  w_ret = mbedtls_x509_crt_parse_file( chain, filename );
   1155                  if( w_ret < 0 )
   1156                      ret++;
   1157                  else
   1158                      ret += w_ret;
   1159              }
   1160              while( FindNextFileW( hFind, &file_data ) != 0 );
   1161          
   1162              if( GetLastError() != ERROR_NO_MORE_FILES )
   1163                  ret = MBEDTLS_ERR_X509_FILE_IO_ERROR;
   1164          
   1165          cleanup:
   1166              FindClose( hFind );
   1167          #else /* _WIN32 */
   1168              int t_ret;
   1169              int snp_ret;
   1170              struct stat sb;
   1171              struct dirent *entry;
   1172              char entry_name[MBEDTLS_X509_MAX_FILE_PATH_LEN];
   1173              DIR *dir = opendir( path );
   1174          
   1175              if( dir == NULL )
   1176                  return( MBEDTLS_ERR_X509_FILE_IO_ERROR );
   1177          
   1178          #if defined(MBEDTLS_THREADING_C)
   1179              if( ( ret = mbedtls_mutex_lock( &mbedtls_threading_readdir_mutex ) ) != 0 )
   1180              {
   1181                  closedir( dir );
   1182                  return( ret );
   1183              }
   1184          #endif /* MBEDTLS_THREADING_C */
   1185          
   1186              while( ( entry = readdir( dir ) ) != NULL )
   1187              {
   1188                  snp_ret = mbedtls_snprintf( entry_name, sizeof entry_name,
   1189                                              "%s/%s", path, entry->d_name );
   1190          
   1191                  if( snp_ret < 0 || (size_t)snp_ret >= sizeof entry_name )
   1192                  {
   1193                      ret = MBEDTLS_ERR_X509_BUFFER_TOO_SMALL;
   1194                      goto cleanup;
   1195                  }
   1196                  else if( stat( entry_name, &sb ) == -1 )
   1197                  {
   1198                      ret = MBEDTLS_ERR_X509_FILE_IO_ERROR;
   1199                      goto cleanup;
   1200                  }
   1201          
   1202                  if( !S_ISREG( sb.st_mode ) )
   1203                      continue;
   1204          
   1205                  // Ignore parse errors
   1206                  //
   1207                  t_ret = mbedtls_x509_crt_parse_file( chain, entry_name );
   1208                  if( t_ret < 0 )
   1209                      ret++;
   1210                  else
   1211                      ret += t_ret;
   1212              }
   1213          
   1214          cleanup:
   1215              closedir( dir );
   1216          
   1217          #if defined(MBEDTLS_THREADING_C)
   1218              if( mbedtls_mutex_unlock( &mbedtls_threading_readdir_mutex ) != 0 )
   1219                  ret = MBEDTLS_ERR_THREADING_MUTEX_ERROR;
   1220          #endif /* MBEDTLS_THREADING_C */
   1221          
   1222          #endif /* _WIN32 */
   1223          
   1224              return( ret );
   1225          }
   1226          #endif /* MBEDTLS_FS_IO */
   1227          
   1228          static int x509_info_subject_alt_name( char **buf, size_t *size,
   1229                                                 const mbedtls_x509_sequence *subject_alt_name )
   1230          {
   1231              size_t i;
   1232              size_t n = *size;
   1233              char *p = *buf;
   1234              const mbedtls_x509_sequence *cur = subject_alt_name;
   1235              const char *sep = "";
   1236              size_t sep_len = 0;
   1237          
   1238              while( cur != NULL )
   1239              {
   1240                  if( cur->buf.len + sep_len >= n )
   1241                  {
   1242                      *p = '\0';
   1243                      return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
   1244                  }
   1245          
   1246                  n -= cur->buf.len + sep_len;
   1247                  for( i = 0; i < sep_len; i++ )
   1248                      *p++ = sep[i];
   1249                  for( i = 0; i < cur->buf.len; i++ )
   1250                      *p++ = cur->buf.p[i];
   1251          
   1252                  sep = ", ";
   1253                  sep_len = 2;
   1254          
   1255                  cur = cur->next;
   1256              }
   1257          
   1258              *p = '\0';
   1259          
   1260              *size = n;
   1261              *buf = p;
   1262          
   1263              return( 0 );
   1264          }
   1265          
   1266          #define PRINT_ITEM(i)                           \
   1267              {                                           \
   1268                  ret = mbedtls_snprintf( p, n, "%s" i, sep );    \
   1269                  MBEDTLS_X509_SAFE_SNPRINTF;                        \
   1270                  sep = ", ";                             \
   1271              }
   1272          
   1273          #define CERT_TYPE(type,name)                    \
   1274              if( ns_cert_type & type )                   \
   1275                  PRINT_ITEM( name );
   1276          

   \                                 In section .text, align 4, keep-with-next
   1277          static int x509_info_cert_type( char **buf, size_t *size,
   1278                                          unsigned char ns_cert_type )
   1279          {
   \                     x509_info_cert_type: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0x000F             MOVS     R7,R1
   \   00000004   0x0016             MOVS     R6,R2
   1280              int ret;
   1281              size_t n = *size;
   \   00000006   0x683C             LDR      R4,[R7, #+0]
   1282              char *p = *buf;
   \   00000008   0x6805             LDR      R5,[R0, #+0]
   1283              const char *sep = "";
   \   0000000A   0x....             ADR      R3,??x509_info_key_usage_0  ;; ""
   1284          
   1285              CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
   \   0000000C   0x0630             LSLS     R0,R6,#+24
   \   0000000E   0xD50B             BPL      ??x509_info_cert_type_0
   \   00000010   0x....             ADR.N    R2,?_24
   \   00000012   0x0021             MOVS     R1,R4
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0x.... 0x....      BL       snprintf
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD463             BMI      ??x509_info_cert_type_1
   \   0000001E   0x42A0             CMP      R0,R4
   \   00000020   0xD261             BCS      ??x509_info_cert_type_1
   \   00000022   0x1A24             SUBS     R4,R4,R0
   \   00000024   0x182D             ADDS     R5,R5,R0
   \   00000026   0x....             ADR      R3,??x509_info_key_usage_0+0x4  ;; 0x2C, 0x20, 0x00, 0x00
   1286              CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
   \                     ??x509_info_cert_type_0: (+1)
   \   00000028   0x0670             LSLS     R0,R6,#+25
   \   0000002A   0xD50B             BPL      ??x509_info_cert_type_2
   \   0000002C   0x....             ADR.N    R2,?_25
   \   0000002E   0x0021             MOVS     R1,R4
   \   00000030   0x0028             MOVS     R0,R5
   \   00000032   0x.... 0x....      BL       snprintf
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD455             BMI      ??x509_info_cert_type_1
   \   0000003A   0x42A0             CMP      R0,R4
   \   0000003C   0xD253             BCS      ??x509_info_cert_type_1
   \   0000003E   0x1A24             SUBS     R4,R4,R0
   \   00000040   0x182D             ADDS     R5,R5,R0
   \   00000042   0x....             ADR      R3,??x509_info_key_usage_0+0x4  ;; 0x2C, 0x20, 0x00, 0x00
   1287              CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
   \                     ??x509_info_cert_type_2: (+1)
   \   00000044   0x06B0             LSLS     R0,R6,#+26
   \   00000046   0xD50B             BPL      ??x509_info_cert_type_3
   \   00000048   0x....             ADR.N    R2,?_26
   \   0000004A   0x0021             MOVS     R1,R4
   \   0000004C   0x0028             MOVS     R0,R5
   \   0000004E   0x.... 0x....      BL       snprintf
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD447             BMI      ??x509_info_cert_type_1
   \   00000056   0x42A0             CMP      R0,R4
   \   00000058   0xD245             BCS      ??x509_info_cert_type_1
   \   0000005A   0x1A24             SUBS     R4,R4,R0
   \   0000005C   0x182D             ADDS     R5,R5,R0
   \   0000005E   0x....             ADR      R3,??x509_info_key_usage_0+0x4  ;; 0x2C, 0x20, 0x00, 0x00
   1288              CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
   \                     ??x509_info_cert_type_3: (+1)
   \   00000060   0x06F0             LSLS     R0,R6,#+27
   \   00000062   0xD50B             BPL      ??x509_info_cert_type_4
   \   00000064   0x....             ADR.N    R2,?_27
   \   00000066   0x0021             MOVS     R1,R4
   \   00000068   0x0028             MOVS     R0,R5
   \   0000006A   0x.... 0x....      BL       snprintf
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD439             BMI      ??x509_info_cert_type_1
   \   00000072   0x42A0             CMP      R0,R4
   \   00000074   0xD237             BCS      ??x509_info_cert_type_1
   \   00000076   0x1A24             SUBS     R4,R4,R0
   \   00000078   0x182D             ADDS     R5,R5,R0
   \   0000007A   0x....             ADR      R3,??x509_info_key_usage_0+0x4  ;; 0x2C, 0x20, 0x00, 0x00
   1289              CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
   \                     ??x509_info_cert_type_4: (+1)
   \   0000007C   0x0730             LSLS     R0,R6,#+28
   \   0000007E   0xD50B             BPL      ??x509_info_cert_type_5
   \   00000080   0x....             ADR.N    R2,?_28
   \   00000082   0x0021             MOVS     R1,R4
   \   00000084   0x0028             MOVS     R0,R5
   \   00000086   0x.... 0x....      BL       snprintf
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD42B             BMI      ??x509_info_cert_type_1
   \   0000008E   0x42A0             CMP      R0,R4
   \   00000090   0xD229             BCS      ??x509_info_cert_type_1
   \   00000092   0x1A24             SUBS     R4,R4,R0
   \   00000094   0x182D             ADDS     R5,R5,R0
   \   00000096   0x....             ADR      R3,??x509_info_key_usage_0+0x4  ;; 0x2C, 0x20, 0x00, 0x00
   1290              CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
   \                     ??x509_info_cert_type_5: (+1)
   \   00000098   0x0770             LSLS     R0,R6,#+29
   \   0000009A   0xD50B             BPL      ??x509_info_cert_type_6
   \   0000009C   0x....             ADR.N    R2,?_29
   \   0000009E   0x0021             MOVS     R1,R4
   \   000000A0   0x0028             MOVS     R0,R5
   \   000000A2   0x.... 0x....      BL       snprintf
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD41D             BMI      ??x509_info_cert_type_1
   \   000000AA   0x42A0             CMP      R0,R4
   \   000000AC   0xD21B             BCS      ??x509_info_cert_type_1
   \   000000AE   0x1A24             SUBS     R4,R4,R0
   \   000000B0   0x182D             ADDS     R5,R5,R0
   \   000000B2   0x....             ADR      R3,??x509_info_key_usage_0+0x4  ;; 0x2C, 0x20, 0x00, 0x00
   1291              CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
   \                     ??x509_info_cert_type_6: (+1)
   \   000000B4   0x07B0             LSLS     R0,R6,#+30
   \   000000B6   0xD50B             BPL      ??x509_info_cert_type_7
   \   000000B8   0x....             ADR.N    R2,?_30
   \   000000BA   0x0021             MOVS     R1,R4
   \   000000BC   0x0028             MOVS     R0,R5
   \   000000BE   0x.... 0x....      BL       snprintf
   \   000000C2   0x2800             CMP      R0,#+0
   \   000000C4   0xD40F             BMI      ??x509_info_cert_type_1
   \   000000C6   0x42A0             CMP      R0,R4
   \   000000C8   0xD20D             BCS      ??x509_info_cert_type_1
   \   000000CA   0x1A24             SUBS     R4,R4,R0
   \   000000CC   0x182D             ADDS     R5,R5,R0
   \   000000CE   0x....             ADR      R3,??x509_info_key_usage_0+0x4  ;; 0x2C, 0x20, 0x00, 0x00
   1292              CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
   \                     ??x509_info_cert_type_7: (+1)
   \   000000D0   0x07F0             LSLS     R0,R6,#+31
   \   000000D2   0xD50C             BPL      ??x509_info_cert_type_8
   \   000000D4   0x....             ADR.N    R2,?_31
   \   000000D6   0x0021             MOVS     R1,R4
   \   000000D8   0x0028             MOVS     R0,R5
   \   000000DA   0x.... 0x....      BL       snprintf
   \   000000DE   0x2800             CMP      R0,#+0
   \   000000E0   0xD401             BMI      ??x509_info_cert_type_1
   \   000000E2   0x42A0             CMP      R0,R4
   \   000000E4   0xD301             BCC      ??x509_info_cert_type_9
   \                     ??x509_info_cert_type_1: (+1)
   \   000000E6   0x....             LDR      R0,??DataTable78_5  ;; 0xffffd680
   \   000000E8   0xBDF2             POP      {R1,R4-R7,PC}
   \                     ??x509_info_cert_type_9: (+1)
   \   000000EA   0x1A24             SUBS     R4,R4,R0
   \   000000EC   0x182D             ADDS     R5,R5,R0
   1293          
   1294              *size = n;
   \                     ??x509_info_cert_type_8: (+1)
   \   000000EE   0x....             B.N      ?Subroutine0
   1295              *buf = p;
   1296          
   1297              return( 0 );
   1298          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x603C             STR      R4,[R7, #+0]
   \   00000002   0x9800             LDR      R0,[SP, #+0]
   \   00000004   0x6005             STR      R5,[R0, #+0]
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   1299          
   1300          #define KEY_USAGE(code,name)    \
   1301              if( key_usage & code )      \
   1302                  PRINT_ITEM( name );
   1303          

   \                                 In section .text, align 4, keep-with-next
   1304          static int x509_info_key_usage( char **buf, size_t *size,
   1305                                          unsigned int key_usage )
   1306          {
   \                     x509_info_key_usage: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0x000F             MOVS     R7,R1
   \   00000004   0x0016             MOVS     R6,R2
   1307              int ret;
   1308              size_t n = *size;
   \   00000006   0x683C             LDR      R4,[R7, #+0]
   1309              char *p = *buf;
   \   00000008   0x6805             LDR      R5,[R0, #+0]
   1310              const char *sep = "";
   \   0000000A   0xA340             ADR      R3,??x509_info_key_usage_0  ;; ""
   1311          
   1312              KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
   \   0000000C   0x0630             LSLS     R0,R6,#+24
   \   0000000E   0xD50D             BPL      ??x509_info_key_usage_1
   \   00000010   0x....             ADR.N    R2,?_32
   \   00000012   0x0021             MOVS     R1,R4
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0x.... 0x....      BL       snprintf
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD500             BPL      .+4
   \   0000001E   0xE072             B        ??x509_info_key_usage_2
   \   00000020   0x42A0             CMP      R0,R4
   \   00000022   0xD300             BCC      .+4
   \   00000024   0xE06F             B        ??x509_info_key_usage_2
   \   00000026   0x1A24             SUBS     R4,R4,R0
   \   00000028   0x182D             ADDS     R5,R5,R0
   \   0000002A   0xA339             ADR      R3,??x509_info_key_usage_0+0x4  ;; 0x2C, 0x20, 0x00, 0x00
   1313              KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
   \                     ??x509_info_key_usage_1: (+1)
   \   0000002C   0x0670             LSLS     R0,R6,#+25
   \   0000002E   0xD50B             BPL      ??x509_info_key_usage_3
   \   00000030   0x....             ADR.N    R2,?_33
   \   00000032   0x0021             MOVS     R1,R4
   \   00000034   0x0028             MOVS     R0,R5
   \   00000036   0x.... 0x....      BL       snprintf
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD463             BMI      ??x509_info_key_usage_2
   \   0000003E   0x42A0             CMP      R0,R4
   \   00000040   0xD261             BCS      ??x509_info_key_usage_2
   \   00000042   0x1A24             SUBS     R4,R4,R0
   \   00000044   0x182D             ADDS     R5,R5,R0
   \   00000046   0xA332             ADR      R3,??x509_info_key_usage_0+0x4  ;; 0x2C, 0x20, 0x00, 0x00
   1314              KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
   \                     ??x509_info_key_usage_3: (+1)
   \   00000048   0x06B0             LSLS     R0,R6,#+26
   \   0000004A   0xD50B             BPL      ??x509_info_key_usage_4
   \   0000004C   0x....             ADR.N    R2,?_34
   \   0000004E   0x0021             MOVS     R1,R4
   \   00000050   0x0028             MOVS     R0,R5
   \   00000052   0x.... 0x....      BL       snprintf
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD455             BMI      ??x509_info_key_usage_2
   \   0000005A   0x42A0             CMP      R0,R4
   \   0000005C   0xD253             BCS      ??x509_info_key_usage_2
   \   0000005E   0x1A24             SUBS     R4,R4,R0
   \   00000060   0x182D             ADDS     R5,R5,R0
   \   00000062   0xA32B             ADR      R3,??x509_info_key_usage_0+0x4  ;; 0x2C, 0x20, 0x00, 0x00
   1315              KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
   \                     ??x509_info_key_usage_4: (+1)
   \   00000064   0x06F0             LSLS     R0,R6,#+27
   \   00000066   0xD50B             BPL      ??x509_info_key_usage_5
   \   00000068   0x....             ADR.N    R2,?_35
   \   0000006A   0x0021             MOVS     R1,R4
   \   0000006C   0x0028             MOVS     R0,R5
   \   0000006E   0x.... 0x....      BL       snprintf
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD447             BMI      ??x509_info_key_usage_2
   \   00000076   0x42A0             CMP      R0,R4
   \   00000078   0xD245             BCS      ??x509_info_key_usage_2
   \   0000007A   0x1A24             SUBS     R4,R4,R0
   \   0000007C   0x182D             ADDS     R5,R5,R0
   \   0000007E   0xA324             ADR      R3,??x509_info_key_usage_0+0x4  ;; 0x2C, 0x20, 0x00, 0x00
   1316              KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
   \                     ??x509_info_key_usage_5: (+1)
   \   00000080   0x0730             LSLS     R0,R6,#+28
   \   00000082   0xD50B             BPL      ??x509_info_key_usage_6
   \   00000084   0x....             ADR.N    R2,?_36
   \   00000086   0x0021             MOVS     R1,R4
   \   00000088   0x0028             MOVS     R0,R5
   \   0000008A   0x.... 0x....      BL       snprintf
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD439             BMI      ??x509_info_key_usage_2
   \   00000092   0x42A0             CMP      R0,R4
   \   00000094   0xD237             BCS      ??x509_info_key_usage_2
   \   00000096   0x1A24             SUBS     R4,R4,R0
   \   00000098   0x182D             ADDS     R5,R5,R0
   \   0000009A   0xA31D             ADR      R3,??x509_info_key_usage_0+0x4  ;; 0x2C, 0x20, 0x00, 0x00
   1317              KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
   \                     ??x509_info_key_usage_6: (+1)
   \   0000009C   0x0770             LSLS     R0,R6,#+29
   \   0000009E   0xD50B             BPL      ??x509_info_key_usage_7
   \   000000A0   0x....             ADR.N    R2,?_37
   \   000000A2   0x0021             MOVS     R1,R4
   \   000000A4   0x0028             MOVS     R0,R5
   \   000000A6   0x.... 0x....      BL       snprintf
   \   000000AA   0x2800             CMP      R0,#+0
   \   000000AC   0xD42B             BMI      ??x509_info_key_usage_2
   \   000000AE   0x42A0             CMP      R0,R4
   \   000000B0   0xD229             BCS      ??x509_info_key_usage_2
   \   000000B2   0x1A24             SUBS     R4,R4,R0
   \   000000B4   0x182D             ADDS     R5,R5,R0
   \   000000B6   0xA316             ADR      R3,??x509_info_key_usage_0+0x4  ;; 0x2C, 0x20, 0x00, 0x00
   1318              KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
   \                     ??x509_info_key_usage_7: (+1)
   \   000000B8   0x07B0             LSLS     R0,R6,#+30
   \   000000BA   0xD50B             BPL      ??x509_info_key_usage_8
   \   000000BC   0x....             ADR.N    R2,?_38
   \   000000BE   0x0021             MOVS     R1,R4
   \   000000C0   0x0028             MOVS     R0,R5
   \   000000C2   0x.... 0x....      BL       snprintf
   \   000000C6   0x2800             CMP      R0,#+0
   \   000000C8   0xD41D             BMI      ??x509_info_key_usage_2
   \   000000CA   0x42A0             CMP      R0,R4
   \   000000CC   0xD21B             BCS      ??x509_info_key_usage_2
   \   000000CE   0x1A24             SUBS     R4,R4,R0
   \   000000D0   0x182D             ADDS     R5,R5,R0
   \   000000D2   0xA30F             ADR      R3,??x509_info_key_usage_0+0x4  ;; 0x2C, 0x20, 0x00, 0x00
   1319              KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
   \                     ??x509_info_key_usage_8: (+1)
   \   000000D4   0x07F0             LSLS     R0,R6,#+31
   \   000000D6   0xD50B             BPL      ??x509_info_key_usage_9
   \   000000D8   0x....             ADR.N    R2,?_39
   \   000000DA   0x0021             MOVS     R1,R4
   \   000000DC   0x0028             MOVS     R0,R5
   \   000000DE   0x.... 0x....      BL       snprintf
   \   000000E2   0x2800             CMP      R0,#+0
   \   000000E4   0xD40F             BMI      ??x509_info_key_usage_2
   \   000000E6   0x42A0             CMP      R0,R4
   \   000000E8   0xD20D             BCS      ??x509_info_key_usage_2
   \   000000EA   0x1A24             SUBS     R4,R4,R0
   \   000000EC   0x182D             ADDS     R5,R5,R0
   \   000000EE   0xA308             ADR      R3,??x509_info_key_usage_0+0x4  ;; 0x2C, 0x20, 0x00, 0x00
   1320              KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
   \                     ??x509_info_key_usage_9: (+1)
   \   000000F0   0x0430             LSLS     R0,R6,#+16
   \   000000F2   0xD511             BPL      ??x509_info_key_usage_10
   \   000000F4   0x....             ADR.N    R2,?_40
   \   000000F6   0x0021             MOVS     R1,R4
   \   000000F8   0x0028             MOVS     R0,R5
   \   000000FA   0x.... 0x....      BL       snprintf
   \   000000FE   0x2800             CMP      R0,#+0
   \   00000100   0xD401             BMI      ??x509_info_key_usage_2
   \   00000102   0x42A0             CMP      R0,R4
   \   00000104   0xD306             BCC      ??x509_info_key_usage_11
   \                     ??x509_info_key_usage_2: (+1)
   \   00000106   0x....             LDR      R0,??mbedtls_x509_crt_info_0  ;; 0xffffd680
   \   00000108   0xBDF2             POP      {R1,R4-R7,PC}
   \   0000010A   0xBF00             Nop      
   \                     ??x509_info_key_usage_0:
   \   0000010C   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    
   \   00000110   0x2C 0x20          DC8      0x2C, 0x20, 0x00, 0x00
   \              0x00 0x00    
   \                     ??x509_info_key_usage_11: (+1)
   \   00000114   0x1A24             SUBS     R4,R4,R0
   \   00000116   0x182D             ADDS     R5,R5,R0
   1321          
   1322              *size = n;
   \                     ??x509_info_key_usage_10: (+1)
   \   00000118                      REQUIRE ?Subroutine0
   \   00000118                      ;; // Fall through to label ?Subroutine0
   1323              *buf = p;
   1324          
   1325              return( 0 );
   1326          }
   1327          
   1328          static int x509_info_ext_key_usage( char **buf, size_t *size,
   1329                                              const mbedtls_x509_sequence *extended_key_usage )
   1330          {
   1331              int ret;
   1332              const char *desc;
   1333              size_t n = *size;
   1334              char *p = *buf;
   1335              const mbedtls_x509_sequence *cur = extended_key_usage;
   1336              const char *sep = "";
   1337          
   1338              while( cur != NULL )
   1339              {
   1340                  if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
   1341                      desc = "???";
   1342          
   1343                  ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
   1344                  MBEDTLS_X509_SAFE_SNPRINTF;
   1345          
   1346                  sep = ", ";
   1347          
   1348                  cur = cur->next;
   1349              }
   1350          
   1351              *size = n;
   1352              *buf = p;
   1353          
   1354              return( 0 );
   1355          }
   1356          
   1357          /*
   1358           * Return an informational string about the certificate.
   1359           */
   1360          #define BEFORE_COLON    18
   1361          #define BC              "18"

   \                                 In section .text, align 4, keep-with-next
   1362          int mbedtls_x509_crt_info( char *buf, size_t size, const char *prefix,
   1363                             const mbedtls_x509_crt *crt )
   1364          {
   \                     mbedtls_x509_crt_info: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0xB08E             SUB      SP,SP,#+56
   1365              int ret;
   1366              size_t n;
   1367              char *p;
   1368              char key_size_str[BEFORE_COLON];
   1369          
   1370              p = buf;
   \   00000004   0x9007             STR      R0,[SP, #+28]
   1371              n = size;
   \   00000006   0x980E             LDR      R0,[SP, #+56]
   \   00000008   0x9006             STR      R0,[SP, #+24]
   1372          
   1373              if( NULL == crt )
   \   0000000A   0x9810             LDR      R0,[SP, #+64]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD108             BNE      ??mbedtls_x509_crt_info_1
   1374              {
   1375                  ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
   \   00000010   0x4AC3             LDR      R2,??mbedtls_x509_crt_info_2
   \   00000012   0x9906             LDR      R1,[SP, #+24]
   \   00000014   0x9807             LDR      R0,[SP, #+28]
   \   00000016   0x.... 0x....      BL       snprintf
   1376                  MBEDTLS_X509_SAFE_SNPRINTF;
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD500             BPL      .+4
   \   0000001E   0xE206             B        ??mbedtls_x509_crt_info_3
   \   00000020   0xE202             B        ??mbedtls_x509_crt_info_4
   1377          
   1378                  return( (int) ( size - n ) );
   1379              }
   1380          
   1381              ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
   1382                                         prefix, crt->version );
   \                     ??mbedtls_x509_crt_info_1: (+1)
   \   00000022   0x4605             MOV      R5,R0
   \   00000024   0x3518             ADDS     R5,R5,#+24
   \   00000026   0x6828             LDR      R0,[R5, #+0]
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0x9B0F             LDR      R3,[SP, #+60]
   \   0000002C   0x4ABD             LDR      R2,??mbedtls_x509_crt_info_2+0x4
   \   0000002E   0x9906             LDR      R1,[SP, #+24]
   \   00000030   0x9807             LDR      R0,[SP, #+28]
   \   00000032   0x.... 0x....      BL       snprintf
   1383              MBEDTLS_X509_SAFE_SNPRINTF;
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD500             BPL      .+4
   \   0000003A   0xE1F8             B        ??mbedtls_x509_crt_info_3
   \   0000003C   0x9906             LDR      R1,[SP, #+24]
   \   0000003E   0x4288             CMP      R0,R1
   \   00000040   0xD300             BCC      .+4
   \   00000042   0xE1F4             B        ??mbedtls_x509_crt_info_3
   \   00000044   0x1A09             SUBS     R1,R1,R0
   \   00000046   0x9106             STR      R1,[SP, #+24]
   \   00000048   0x9907             LDR      R1,[SP, #+28]
   \   0000004A   0x1808             ADDS     R0,R1,R0
   \   0000004C   0x9007             STR      R0,[SP, #+28]
   1384              ret = mbedtls_snprintf( p, n, "%sserial number     : ",
   1385                                         prefix );
   \   0000004E   0x9B0F             LDR      R3,[SP, #+60]
   \   00000050   0x4AB5             LDR      R2,??mbedtls_x509_crt_info_2+0x8
   \   00000052   0x9906             LDR      R1,[SP, #+24]
   \   00000054   0x.... 0x....      BL       snprintf
   1386              MBEDTLS_X509_SAFE_SNPRINTF;
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD500             BPL      .+4
   \   0000005C   0xE1E7             B        ??mbedtls_x509_crt_info_3
   \   0000005E   0x9906             LDR      R1,[SP, #+24]
   \   00000060   0x4288             CMP      R0,R1
   \   00000062   0xD300             BCC      .+4
   \   00000064   0xE1E3             B        ??mbedtls_x509_crt_info_3
   \   00000066   0x1A09             SUBS     R1,R1,R0
   \   00000068   0x9106             STR      R1,[SP, #+24]
   \   0000006A   0x9907             LDR      R1,[SP, #+28]
   \   0000006C   0x1808             ADDS     R0,R1,R0
   \   0000006E   0x9007             STR      R0,[SP, #+28]
   1387          
   1388              ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
   \   00000070   0x9A10             LDR      R2,[SP, #+64]
   \   00000072   0x321C             ADDS     R2,R2,#+28
   \   00000074   0x9906             LDR      R1,[SP, #+24]
   \   00000076   0x.... 0x....      BL       mbedtls_x509_serial_gets
   1389              MBEDTLS_X509_SAFE_SNPRINTF;
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD500             BPL      .+4
   \   0000007E   0xE1D6             B        ??mbedtls_x509_crt_info_3
   \   00000080   0x9906             LDR      R1,[SP, #+24]
   \   00000082   0x4288             CMP      R0,R1
   \   00000084   0xD300             BCC      .+4
   \   00000086   0xE1D2             B        ??mbedtls_x509_crt_info_3
   \   00000088   0x1A09             SUBS     R1,R1,R0
   \   0000008A   0x9106             STR      R1,[SP, #+24]
   \   0000008C   0x9907             LDR      R1,[SP, #+28]
   \   0000008E   0x1808             ADDS     R0,R1,R0
   \   00000090   0x9007             STR      R0,[SP, #+28]
   1390          
   1391              ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
   \   00000092   0x9B0F             LDR      R3,[SP, #+60]
   \   00000094   0x4AA5             LDR      R2,??mbedtls_x509_crt_info_2+0xC
   \   00000096   0x9906             LDR      R1,[SP, #+24]
   \   00000098   0x.... 0x....      BL       snprintf
   1392              MBEDTLS_X509_SAFE_SNPRINTF;
   \   0000009C   0x2800             CMP      R0,#+0
   \   0000009E   0xD500             BPL      .+4
   \   000000A0   0xE1C5             B        ??mbedtls_x509_crt_info_3
   \   000000A2   0x9906             LDR      R1,[SP, #+24]
   \   000000A4   0x4288             CMP      R0,R1
   \   000000A6   0xD300             BCC      .+4
   \   000000A8   0xE1C1             B        ??mbedtls_x509_crt_info_3
   \   000000AA   0x1A09             SUBS     R1,R1,R0
   \   000000AC   0x9106             STR      R1,[SP, #+24]
   \   000000AE   0x9907             LDR      R1,[SP, #+28]
   \   000000B0   0x1808             ADDS     R0,R1,R0
   \   000000B2   0x9007             STR      R0,[SP, #+28]
   1393              ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
   \   000000B4   0x9A10             LDR      R2,[SP, #+64]
   \   000000B6   0x324C             ADDS     R2,R2,#+76
   \   000000B8   0x9906             LDR      R1,[SP, #+24]
   \   000000BA   0x.... 0x....      BL       mbedtls_x509_dn_gets
   1394              MBEDTLS_X509_SAFE_SNPRINTF;
   \   000000BE   0x2800             CMP      R0,#+0
   \   000000C0   0xD500             BPL      .+4
   \   000000C2   0xE1B4             B        ??mbedtls_x509_crt_info_3
   \   000000C4   0x9906             LDR      R1,[SP, #+24]
   \   000000C6   0x4288             CMP      R0,R1
   \   000000C8   0xD300             BCC      .+4
   \   000000CA   0xE1B0             B        ??mbedtls_x509_crt_info_3
   \   000000CC   0x1A09             SUBS     R1,R1,R0
   \   000000CE   0x9106             STR      R1,[SP, #+24]
   \   000000D0   0x9907             LDR      R1,[SP, #+28]
   \   000000D2   0x1808             ADDS     R0,R1,R0
   \   000000D4   0x9007             STR      R0,[SP, #+28]
   1395          
   1396              ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
   \   000000D6   0x9B0F             LDR      R3,[SP, #+60]
   \   000000D8   0x4A95             LDR      R2,??mbedtls_x509_crt_info_2+0x10
   \   000000DA   0x9906             LDR      R1,[SP, #+24]
   \   000000DC   0x.... 0x....      BL       snprintf
   1397              MBEDTLS_X509_SAFE_SNPRINTF;
   \   000000E0   0x2800             CMP      R0,#+0
   \   000000E2   0xD500             BPL      .+4
   \   000000E4   0xE1A3             B        ??mbedtls_x509_crt_info_3
   \   000000E6   0x9906             LDR      R1,[SP, #+24]
   \   000000E8   0x4288             CMP      R0,R1
   \   000000EA   0xD300             BCC      .+4
   \   000000EC   0xE19F             B        ??mbedtls_x509_crt_info_3
   \   000000EE   0x1A09             SUBS     R1,R1,R0
   \   000000F0   0x9106             STR      R1,[SP, #+24]
   \   000000F2   0x9907             LDR      R1,[SP, #+28]
   \   000000F4   0x1808             ADDS     R0,R1,R0
   \   000000F6   0x9007             STR      R0,[SP, #+28]
   1398              ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
   \   000000F8   0x9A10             LDR      R2,[SP, #+64]
   \   000000FA   0x326C             ADDS     R2,R2,#+108
   \   000000FC   0x9906             LDR      R1,[SP, #+24]
   \   000000FE   0x.... 0x....      BL       mbedtls_x509_dn_gets
   1399              MBEDTLS_X509_SAFE_SNPRINTF;
   \   00000102   0x2800             CMP      R0,#+0
   \   00000104   0xD500             BPL      .+4
   \   00000106   0xE192             B        ??mbedtls_x509_crt_info_3
   \   00000108   0x9906             LDR      R1,[SP, #+24]
   \   0000010A   0x4288             CMP      R0,R1
   \   0000010C   0xD300             BCC      .+4
   \   0000010E   0xE18E             B        ??mbedtls_x509_crt_info_3
   \   00000110   0x1A09             SUBS     R1,R1,R0
   \   00000112   0x9106             STR      R1,[SP, #+24]
   \   00000114   0x9907             LDR      R1,[SP, #+28]
   \   00000116   0x1808             ADDS     R0,R1,R0
   \   00000118   0x9007             STR      R0,[SP, #+28]
   1400          
   1401              ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
   1402                             "%04d-%02d-%02d %02d:%02d:%02d", prefix,
   1403                             crt->valid_from.year, crt->valid_from.mon,
   1404                             crt->valid_from.day,  crt->valid_from.hour,
   1405                             crt->valid_from.min,  crt->valid_from.sec );
   \   0000011A   0x9C10             LDR      R4,[SP, #+64]
   \   0000011C   0x3498             ADDS     R4,R4,#+152
   \   0000011E   0x68A0             LDR      R0,[R4, #+8]
   \   00000120   0x9005             STR      R0,[SP, #+20]
   \   00000122   0x6860             LDR      R0,[R4, #+4]
   \   00000124   0x9004             STR      R0,[SP, #+16]
   \   00000126   0x6820             LDR      R0,[R4, #+0]
   \   00000128   0x9003             STR      R0,[SP, #+12]
   \   0000012A   0x6FE8             LDR      R0,[R5, #+124]
   \   0000012C   0x9002             STR      R0,[SP, #+8]
   \   0000012E   0x6FA8             LDR      R0,[R5, #+120]
   \   00000130   0x9001             STR      R0,[SP, #+4]
   \   00000132   0x6F68             LDR      R0,[R5, #+116]
   \   00000134   0x9000             STR      R0,[SP, #+0]
   \   00000136   0x9B0F             LDR      R3,[SP, #+60]
   \   00000138   0x....             LDR      R2,??DataTable79
   \   0000013A   0x9906             LDR      R1,[SP, #+24]
   \   0000013C   0x9807             LDR      R0,[SP, #+28]
   \   0000013E   0x.... 0x....      BL       snprintf
   1406              MBEDTLS_X509_SAFE_SNPRINTF;
   \   00000142   0x2800             CMP      R0,#+0
   \   00000144   0xD500             BPL      .+4
   \   00000146   0xE172             B        ??mbedtls_x509_crt_info_3
   \   00000148   0x9906             LDR      R1,[SP, #+24]
   \   0000014A   0x4288             CMP      R0,R1
   \   0000014C   0xD300             BCC      .+4
   \   0000014E   0xE16E             B        ??mbedtls_x509_crt_info_3
   \   00000150   0x1A09             SUBS     R1,R1,R0
   \   00000152   0x9106             STR      R1,[SP, #+24]
   \   00000154   0x9907             LDR      R1,[SP, #+28]
   \   00000156   0x1808             ADDS     R0,R1,R0
   \   00000158   0x9007             STR      R0,[SP, #+28]
   1407          
   1408              ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
   1409                             "%04d-%02d-%02d %02d:%02d:%02d", prefix,
   1410                             crt->valid_to.year, crt->valid_to.mon,
   1411                             crt->valid_to.day,  crt->valid_to.hour,
   1412                             crt->valid_to.min,  crt->valid_to.sec );
   \   0000015A   0x6A20             LDR      R0,[R4, #+32]
   \   0000015C   0x9005             STR      R0,[SP, #+20]
   \   0000015E   0x69E0             LDR      R0,[R4, #+28]
   \   00000160   0x9004             STR      R0,[SP, #+16]
   \   00000162   0x69A0             LDR      R0,[R4, #+24]
   \   00000164   0x9003             STR      R0,[SP, #+12]
   \   00000166   0x6960             LDR      R0,[R4, #+20]
   \   00000168   0x9002             STR      R0,[SP, #+8]
   \   0000016A   0x6920             LDR      R0,[R4, #+16]
   \   0000016C   0x9001             STR      R0,[SP, #+4]
   \   0000016E   0x68E0             LDR      R0,[R4, #+12]
   \   00000170   0x9000             STR      R0,[SP, #+0]
   \   00000172   0x9B0F             LDR      R3,[SP, #+60]
   \   00000174   0x....             LDR      R2,??DataTable79_1
   \   00000176   0x9906             LDR      R1,[SP, #+24]
   \   00000178   0x9807             LDR      R0,[SP, #+28]
   \   0000017A   0x.... 0x....      BL       snprintf
   1413              MBEDTLS_X509_SAFE_SNPRINTF;
   \   0000017E   0x2800             CMP      R0,#+0
   \   00000180   0xD500             BPL      .+4
   \   00000182   0xE154             B        ??mbedtls_x509_crt_info_3
   \   00000184   0x9906             LDR      R1,[SP, #+24]
   \   00000186   0x4288             CMP      R0,R1
   \   00000188   0xD300             BCC      .+4
   \   0000018A   0xE150             B        ??mbedtls_x509_crt_info_3
   \   0000018C   0x1A09             SUBS     R1,R1,R0
   \   0000018E   0x9106             STR      R1,[SP, #+24]
   \   00000190   0x9907             LDR      R1,[SP, #+28]
   \   00000192   0x1808             ADDS     R0,R1,R0
   \   00000194   0x9007             STR      R0,[SP, #+28]
   1414          
   1415              ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
   \   00000196   0x9B0F             LDR      R3,[SP, #+60]
   \   00000198   0x....             LDR      R2,??DataTable79_2
   \   0000019A   0x9906             LDR      R1,[SP, #+24]
   \   0000019C   0x.... 0x....      BL       snprintf
   1416              MBEDTLS_X509_SAFE_SNPRINTF;
   \   000001A0   0x2800             CMP      R0,#+0
   \   000001A2   0xD500             BPL      .+4
   \   000001A4   0xE143             B        ??mbedtls_x509_crt_info_3
   \   000001A6   0x9906             LDR      R1,[SP, #+24]
   \   000001A8   0x4288             CMP      R0,R1
   \   000001AA   0xD300             BCC      .+4
   \   000001AC   0xE13F             B        ??mbedtls_x509_crt_info_3
   \   000001AE   0x1A09             SUBS     R1,R1,R0
   \   000001B0   0x9106             STR      R1,[SP, #+24]
   \   000001B2   0x9907             LDR      R1,[SP, #+28]
   \   000001B4   0x1808             ADDS     R0,R1,R0
   \   000001B6   0x9007             STR      R0,[SP, #+28]
   1417          
   1418              ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
   1419                                       crt->sig_md, crt->sig_opts );
   \   000001B8   0x9810             LDR      R0,[SP, #+64]
   \   000001BA   0x218C             MOVS     R1,#+140
   \   000001BC   0x0049             LSLS     R1,R1,#+1        ;; #+280
   \   000001BE   0x1840             ADDS     R0,R0,R1
   \   000001C0   0x9002             STR      R0,[SP, #+8]
   \   000001C2   0x6940             LDR      R0,[R0, #+20]
   \   000001C4   0x9001             STR      R0,[SP, #+4]
   \   000001C6   0x9802             LDR      R0,[SP, #+8]
   \   000001C8   0x7C00             LDRB     R0,[R0, #+16]
   \   000001CA   0x9000             STR      R0,[SP, #+0]
   \   000001CC   0x9802             LDR      R0,[SP, #+8]
   \   000001CE   0x7C43             LDRB     R3,[R0, #+17]
   \   000001D0   0x9A10             LDR      R2,[SP, #+64]
   \   000001D2   0x3228             ADDS     R2,R2,#+40
   \   000001D4   0x9906             LDR      R1,[SP, #+24]
   \   000001D6   0x9807             LDR      R0,[SP, #+28]
   \   000001D8   0x.... 0x....      BL       mbedtls_x509_sig_alg_gets
   1420              MBEDTLS_X509_SAFE_SNPRINTF;
   \   000001DC   0x2800             CMP      R0,#+0
   \   000001DE   0xD500             BPL      .+4
   \   000001E0   0xE125             B        ??mbedtls_x509_crt_info_3
   \   000001E2   0x9906             LDR      R1,[SP, #+24]
   \   000001E4   0x4288             CMP      R0,R1
   \   000001E6   0xD300             BCC      .+4
   \   000001E8   0xE121             B        ??mbedtls_x509_crt_info_3
   \   000001EA   0x1A09             SUBS     R1,R1,R0
   \   000001EC   0x9106             STR      R1,[SP, #+24]
   \   000001EE   0x9907             LDR      R1,[SP, #+28]
   \   000001F0   0x1808             ADDS     R0,R1,R0
   \   000001F2   0x9007             STR      R0,[SP, #+28]
   1421          
   1422              /* Key size */
   1423              if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
   1424                                                mbedtls_pk_get_name( &crt->pk ) ) ) != 0 )
   \   000001F4   0x9D10             LDR      R5,[SP, #+64]
   \   000001F6   0x35BC             ADDS     R5,R5,#+188
   \   000001F8   0x0028             MOVS     R0,R5
   \   000001FA   0x.... 0x....      BL       mbedtls_pk_get_name
   \   000001FE   0x0002             MOVS     R2,R0
   \   00000200   0x2112             MOVS     R1,#+18
   \   00000202   0xA808             ADD      R0,SP,#+32
   \   00000204   0x.... 0x....      BL       mbedtls_x509_key_size_helper
   \   00000208   0x2800             CMP      R0,#+0
   \   0000020A   0xD000             BEQ      .+4
   \   0000020C   0xE115             B        ??mbedtls_x509_crt_info_5
   1425              {
   1426                  return( ret );
   1427              }
   1428          
   1429              ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
   1430                                    (int) mbedtls_pk_get_bitlen( &crt->pk ) );
   \   0000020E   0x0028             MOVS     R0,R5
   \   00000210   0x.... 0x....      BL       mbedtls_pk_get_bitlen
   \   00000214   0x9001             STR      R0,[SP, #+4]
   \   00000216   0xA808             ADD      R0,SP,#+32
   \   00000218   0x9000             STR      R0,[SP, #+0]
   \   0000021A   0x9B0F             LDR      R3,[SP, #+60]
   \   0000021C   0x....             LDR      R2,??DataTable79_3
   \   0000021E   0x9906             LDR      R1,[SP, #+24]
   \   00000220   0x9807             LDR      R0,[SP, #+28]
   \   00000222   0x.... 0x....      BL       snprintf
   1431              MBEDTLS_X509_SAFE_SNPRINTF;
   \   00000226   0x2800             CMP      R0,#+0
   \   00000228   0xD500             BPL      .+4
   \   0000022A   0xE100             B        ??mbedtls_x509_crt_info_3
   \   0000022C   0x9906             LDR      R1,[SP, #+24]
   \   0000022E   0x4288             CMP      R0,R1
   \   00000230   0xD300             BCC      .+4
   \   00000232   0xE0FC             B        ??mbedtls_x509_crt_info_3
   \   00000234   0x1A09             SUBS     R1,R1,R0
   \   00000236   0x9106             STR      R1,[SP, #+24]
   \   00000238   0x9907             LDR      R1,[SP, #+28]
   \   0000023A   0x1808             ADDS     R0,R1,R0
   \   0000023C   0x9007             STR      R0,[SP, #+28]
   1432          
   1433              /*
   1434               * Optional extensions
   1435               */
   1436          
   1437              if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
   \   0000023E   0x6E20             LDR      R0,[R4, #+96]
   \   00000240   0x05C0             LSLS     R0,R0,#+23
   \   00000242   0xD52F             BPL      ??mbedtls_x509_crt_info_6
   1438              {
   1439                  ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
   1440                                  crt->ca_istrue ? "true" : "false" );
   \   00000244   0x6E60             LDR      R0,[R4, #+100]
   \   00000246   0x2800             CMP      R0,#+0
   \   00000248   0xD004             BEQ      ??mbedtls_x509_crt_info_7
   \   0000024A   0x....             LDR      R0,??DataTable80
   \   0000024C   0xE003             B        ??mbedtls_x509_crt_info_8
   \   0000024E   0xBF00             Nop      
   \                     ??mbedtls_x509_crt_info_0:
   \   00000250   0xFFFFD680         DC32     0xffffd680
   \                     ??mbedtls_x509_crt_info_7: (+1)
   \   00000254   0x....             LDR      R0,??DataTable80_1
   \                     ??mbedtls_x509_crt_info_8: (+1)
   \   00000256   0x9000             STR      R0,[SP, #+0]
   \   00000258   0x9B0F             LDR      R3,[SP, #+60]
   \   0000025A   0x....             LDR      R2,??DataTable80_2
   \   0000025C   0x9906             LDR      R1,[SP, #+24]
   \   0000025E   0x9807             LDR      R0,[SP, #+28]
   \   00000260   0x.... 0x....      BL       snprintf
   1441                  MBEDTLS_X509_SAFE_SNPRINTF;
   \   00000264   0x2800             CMP      R0,#+0
   \   00000266   0xD500             BPL      .+4
   \   00000268   0xE0E1             B        ??mbedtls_x509_crt_info_3
   \   0000026A   0x9906             LDR      R1,[SP, #+24]
   \   0000026C   0x4288             CMP      R0,R1
   \   0000026E   0xD300             BCC      .+4
   \   00000270   0xE0DD             B        ??mbedtls_x509_crt_info_3
   \   00000272   0x1A09             SUBS     R1,R1,R0
   \   00000274   0x9106             STR      R1,[SP, #+24]
   \   00000276   0x9907             LDR      R1,[SP, #+28]
   \   00000278   0x1808             ADDS     R0,R1,R0
   \   0000027A   0x9007             STR      R0,[SP, #+28]
   1442          
   1443                  if( crt->max_pathlen > 0 )
   \   0000027C   0x6EA3             LDR      R3,[R4, #+104]
   \   0000027E   0x2B01             CMP      R3,#+1
   \   00000280   0xDB10             BLT      ??mbedtls_x509_crt_info_6
   1444                  {
   1445                      ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
   \   00000282   0x1E5B             SUBS     R3,R3,#+1
   \   00000284   0x....             LDR      R2,??DataTable80_3
   \   00000286   0x9906             LDR      R1,[SP, #+24]
   \   00000288   0x.... 0x....      BL       snprintf
   1446                      MBEDTLS_X509_SAFE_SNPRINTF;
   \   0000028C   0x2800             CMP      R0,#+0
   \   0000028E   0xD500             BPL      .+4
   \   00000290   0xE0CD             B        ??mbedtls_x509_crt_info_3
   \   00000292   0x9906             LDR      R1,[SP, #+24]
   \   00000294   0x4288             CMP      R0,R1
   \   00000296   0xD300             BCC      .+4
   \   00000298   0xE0C9             B        ??mbedtls_x509_crt_info_3
   \   0000029A   0x1A09             SUBS     R1,R1,R0
   \   0000029C   0x9106             STR      R1,[SP, #+24]
   \   0000029E   0x9907             LDR      R1,[SP, #+28]
   \   000002A0   0x1808             ADDS     R0,R1,R0
   \   000002A2   0x9007             STR      R0,[SP, #+28]
   1447                  }
   1448              }
   1449          
   1450              if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
   \                     ??mbedtls_x509_crt_info_6: (+1)
   \   000002A4   0x2060             MOVS     R0,#+96
   \   000002A6   0x5C20             LDRB     R0,[R4, R0]
   \   000002A8   0x0680             LSLS     R0,R0,#+26
   \   000002AA   0xD548             BPL      ??mbedtls_x509_crt_info_9
   1451              {
   1452                  ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
   \   000002AC   0x9B0F             LDR      R3,[SP, #+60]
   \   000002AE   0xBF00             Nop      
   \   000002B0   0x....             ADR.N    R2,?_56
   \   000002B2   0x9906             LDR      R1,[SP, #+24]
   \   000002B4   0x9807             LDR      R0,[SP, #+28]
   \   000002B6   0x.... 0x....      BL       snprintf
   1453                  MBEDTLS_X509_SAFE_SNPRINTF;
   \   000002BA   0x2800             CMP      R0,#+0
   \   000002BC   0xD500             BPL      .+4
   \   000002BE   0xE0B6             B        ??mbedtls_x509_crt_info_3
   \   000002C0   0x9906             LDR      R1,[SP, #+24]
   \   000002C2   0x4288             CMP      R0,R1
   \   000002C4   0xD300             BCC      .+4
   \   000002C6   0xE0B2             B        ??mbedtls_x509_crt_info_3
   \   000002C8   0x1A09             SUBS     R1,R1,R0
   \   000002CA   0x9106             STR      R1,[SP, #+24]
   \   000002CC   0x9907             LDR      R1,[SP, #+28]
   \   000002CE   0x1808             ADDS     R0,R1,R0
   \   000002D0   0x9007             STR      R0,[SP, #+28]
   1454          
   1455                  if( ( ret = x509_info_subject_alt_name( &p, &n,
   1456                                                      &crt->subject_alt_names ) ) != 0 )
   \   000002D2   0x9806             LDR      R0,[SP, #+24]
   \   000002D4   0x9A07             LDR      R2,[SP, #+28]
   \   000002D6   0x9E10             LDR      R6,[SP, #+64]
   \   000002D8   0x36E8             ADDS     R6,R6,#+232
   \   000002DA   0x....             ADR      R3,??DataTable80_4  ;; ""
   \   000002DC   0x2100             MOVS     R1,#+0
   \   000002DE   0x2500             MOVS     R5,#+0
   \   000002E0   0xE00A             B        ??mbedtls_x509_crt_info_10
   \                     ??mbedtls_x509_crt_info_11: (+1)
   \   000002E2   0x68B5             LDR      R5,[R6, #+8]
   \   000002E4   0x5CED             LDRB     R5,[R5, R3]
   \   000002E6   0x7015             STRB     R5,[R2, #+0]
   \   000002E8   0x1C52             ADDS     R2,R2,#+1
   \   000002EA   0x1C5B             ADDS     R3,R3,#+1
   \                     ??mbedtls_x509_crt_info_12: (+1)
   \   000002EC   0x6875             LDR      R5,[R6, #+4]
   \   000002EE   0x42AB             CMP      R3,R5
   \   000002F0   0xD3F7             BCC      ??mbedtls_x509_crt_info_11
   \   000002F2   0x....             ADR      R3,??DataTable80_5  ;; 0x2C, 0x20, 0x00, 0x00
   \   000002F4   0x2502             MOVS     R5,#+2
   \   000002F6   0x68F6             LDR      R6,[R6, #+12]
   \                     ??mbedtls_x509_crt_info_10: (+1)
   \   000002F8   0x2E00             CMP      R6,#+0
   \   000002FA   0xD01D             BEQ      ??mbedtls_x509_crt_info_13
   \   000002FC   0x6877             LDR      R7,[R6, #+4]
   \   000002FE   0x9700             STR      R7,[SP, #+0]
   \   00000300   0x197F             ADDS     R7,R7,R5
   \   00000302   0x4287             CMP      R7,R0
   \   00000304   0xD216             BCS      ??mbedtls_x509_crt_info_14
   \   00000306   0x9F00             LDR      R7,[SP, #+0]
   \   00000308   0x1BC0             SUBS     R0,R0,R7
   \   0000030A   0x1B40             SUBS     R0,R0,R5
   \   0000030C   0x2D00             CMP      R5,#+0
   \   0000030E   0xD005             BEQ      ??mbedtls_x509_crt_info_15
   \                     ??mbedtls_x509_crt_info_16: (+1)
   \   00000310   0x781F             LDRB     R7,[R3, #+0]
   \   00000312   0x7017             STRB     R7,[R2, #+0]
   \   00000314   0x1C52             ADDS     R2,R2,#+1
   \   00000316   0x1C5B             ADDS     R3,R3,#+1
   \   00000318   0x1E6D             SUBS     R5,R5,#+1
   \   0000031A   0xD1F9             BNE      ??mbedtls_x509_crt_info_16
   \                     ??mbedtls_x509_crt_info_15: (+1)
   \   0000031C   0x2300             MOVS     R3,#+0
   \   0000031E   0xE7E5             B        ??mbedtls_x509_crt_info_12
   \                     ??mbedtls_x509_crt_info_2:
   \   00000320   0x........         DC32     ?_43
   \   00000324   0x........         DC32     ?_44
   \   00000328   0x........         DC32     ?_45
   \   0000032C   0x........         DC32     ?_46
   \   00000330   0x........         DC32     ?_47
   \                     ??mbedtls_x509_crt_info_14: (+1)
   \   00000334   0x7011             STRB     R1,[R2, #+0]
   1457                      return( ret );
   1458              }
   1459          
   1460              if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
   1461              {
   1462                  ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
   1463                  MBEDTLS_X509_SAFE_SNPRINTF;
   1464          
   1465                  if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
   1466                      return( ret );
   1467              }
   1468          
   1469              if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
   1470              {
   1471                  ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
   1472                  MBEDTLS_X509_SAFE_SNPRINTF;
   1473          
   1474                  if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
   1475                      return( ret );
   1476              }
   1477          
   1478              if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
   1479              {
   1480                  ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
   1481                  MBEDTLS_X509_SAFE_SNPRINTF;
   1482          
   1483                  if( ( ret = x509_info_ext_key_usage( &p, &n,
   1484                                                       &crt->ext_key_usage ) ) != 0 )
   1485                      return( ret );
   \   00000336   0xE07A             B.N      ??mbedtls_x509_crt_info_3
   \                     ??mbedtls_x509_crt_info_13: (+1)
   \   00000338   0x7011             STRB     R1,[R2, #+0]
   \   0000033A   0x9006             STR      R0,[SP, #+24]
   \   0000033C   0x9207             STR      R2,[SP, #+28]
   \                     ??mbedtls_x509_crt_info_9: (+1)
   \   0000033E   0x6E20             LDR      R0,[R4, #+96]
   \   00000340   0x03C0             LSLS     R0,R0,#+15
   \   00000342   0xD518             BPL      ??mbedtls_x509_crt_info_17
   \   00000344   0x9B0F             LDR      R3,[SP, #+60]
   \   00000346   0xBF00             Nop      
   \   00000348   0x....             ADR.N    R2,?_57
   \   0000034A   0x9906             LDR      R1,[SP, #+24]
   \   0000034C   0x9807             LDR      R0,[SP, #+28]
   \   0000034E   0x.... 0x....      BL       snprintf
   \   00000352   0x2800             CMP      R0,#+0
   \   00000354   0xD46B             BMI      ??mbedtls_x509_crt_info_3
   \   00000356   0x9906             LDR      R1,[SP, #+24]
   \   00000358   0x4288             CMP      R0,R1
   \   0000035A   0xD268             BCS      ??mbedtls_x509_crt_info_3
   \   0000035C   0x1A09             SUBS     R1,R1,R0
   \   0000035E   0x9106             STR      R1,[SP, #+24]
   \   00000360   0x9907             LDR      R1,[SP, #+28]
   \   00000362   0x1808             ADDS     R0,R1,R0
   \   00000364   0x9007             STR      R0,[SP, #+28]
   \   00000366   0x9802             LDR      R0,[SP, #+8]
   \   00000368   0x7802             LDRB     R2,[R0, #+0]
   \   0000036A   0xA906             ADD      R1,SP,#+24
   \   0000036C   0xA807             ADD      R0,SP,#+28
   \   0000036E   0x.... 0x....      BL       x509_info_cert_type
   \   00000372   0x2800             CMP      R0,#+0
   \   00000374   0xD161             BNE      ??mbedtls_x509_crt_info_5
   \                     ??mbedtls_x509_crt_info_17: (+1)
   \   00000376   0x2060             MOVS     R0,#+96
   \   00000378   0x5C20             LDRB     R0,[R4, R0]
   \   0000037A   0x0740             LSLS     R0,R0,#+29
   \   0000037C   0xD516             BPL      ??mbedtls_x509_crt_info_18
   \   0000037E   0x9B0F             LDR      R3,[SP, #+60]
   \   00000380   0x....             ADR.N    R2,?_58
   \   00000382   0x9906             LDR      R1,[SP, #+24]
   \   00000384   0x9807             LDR      R0,[SP, #+28]
   \   00000386   0x.... 0x....      BL       snprintf
   \   0000038A   0x2800             CMP      R0,#+0
   \   0000038C   0xD44F             BMI      ??mbedtls_x509_crt_info_3
   \   0000038E   0x9906             LDR      R1,[SP, #+24]
   \   00000390   0x4288             CMP      R0,R1
   \   00000392   0xD24C             BCS      ??mbedtls_x509_crt_info_3
   \   00000394   0x1A09             SUBS     R1,R1,R0
   \   00000396   0x9106             STR      R1,[SP, #+24]
   \   00000398   0x9907             LDR      R1,[SP, #+28]
   \   0000039A   0x1808             ADDS     R0,R1,R0
   \   0000039C   0x9007             STR      R0,[SP, #+28]
   \   0000039E   0x6EE2             LDR      R2,[R4, #+108]
   \   000003A0   0xA906             ADD      R1,SP,#+24
   \   000003A2   0xA807             ADD      R0,SP,#+28
   \   000003A4   0x.... 0x....      BL       x509_info_key_usage
   \   000003A8   0x2800             CMP      R0,#+0
   \   000003AA   0xD146             BNE      ??mbedtls_x509_crt_info_5
   \                     ??mbedtls_x509_crt_info_18: (+1)
   \   000003AC   0x6E20             LDR      R0,[R4, #+96]
   \   000003AE   0x0500             LSLS     R0,R0,#+20
   \   000003B0   0xD533             BPL      ??mbedtls_x509_crt_info_19
   \   000003B2   0x9B0F             LDR      R3,[SP, #+60]
   \   000003B4   0x....             ADR.N    R2,?_59
   \   000003B6   0x9906             LDR      R1,[SP, #+24]
   \   000003B8   0x9807             LDR      R0,[SP, #+28]
   \   000003BA   0x.... 0x....      BL       snprintf
   \   000003BE   0x2800             CMP      R0,#+0
   \   000003C0   0xD435             BMI      ??mbedtls_x509_crt_info_3
   \   000003C2   0x9906             LDR      R1,[SP, #+24]
   \   000003C4   0x4288             CMP      R0,R1
   \   000003C6   0xD232             BCS      ??mbedtls_x509_crt_info_3
   \   000003C8   0x1A09             SUBS     R1,R1,R0
   \   000003CA   0x9106             STR      R1,[SP, #+24]
   \   000003CC   0x9907             LDR      R1,[SP, #+28]
   \   000003CE   0x1808             ADDS     R0,R1,R0
   \   000003D0   0x9007             STR      R0,[SP, #+28]
   \   000003D2   0x9C06             LDR      R4,[SP, #+24]
   \   000003D4   0x4606             MOV      R6,R0
   \   000003D6   0x9810             LDR      R0,[SP, #+64]
   \   000003D8   0x2184             MOVS     R1,#+132
   \   000003DA   0x0049             LSLS     R1,R1,#+1        ;; #+264
   \   000003DC   0x1847             ADDS     R7,R0,R1
   \   000003DE   0x....             ADR      R5,??DataTable80_4  ;; ""
   \   000003E0   0xE017             B        ??mbedtls_x509_crt_info_20
   \                     ??mbedtls_x509_crt_info_21: (+1)
   \   000003E2   0xA901             ADD      R1,SP,#+4
   \   000003E4   0x0038             MOVS     R0,R7
   \   000003E6   0x.... 0x....      BL       mbedtls_oid_get_extended_key_usage
   \   000003EA   0x2800             CMP      R0,#+0
   \   000003EC   0xD001             BEQ      ??mbedtls_x509_crt_info_22
   \   000003EE   0x....             ADR      R0,??DataTable82  ;; "\?\?\?"
   \   000003F0   0x9001             STR      R0,[SP, #+4]
   \                     ??mbedtls_x509_crt_info_22: (+1)
   \   000003F2   0x9801             LDR      R0,[SP, #+4]
   \   000003F4   0x9000             STR      R0,[SP, #+0]
   \   000003F6   0x002B             MOVS     R3,R5
   \   000003F8   0x....             ADR.N    R2,?_42
   \   000003FA   0x0021             MOVS     R1,R4
   \   000003FC   0x0030             MOVS     R0,R6
   \   000003FE   0x.... 0x....      BL       snprintf
   \   00000402   0x2800             CMP      R0,#+0
   \   00000404   0xD413             BMI      ??mbedtls_x509_crt_info_3
   \   00000406   0x42A0             CMP      R0,R4
   \   00000408   0xD211             BCS      ??mbedtls_x509_crt_info_3
   \   0000040A   0x1A24             SUBS     R4,R4,R0
   \   0000040C   0x1836             ADDS     R6,R6,R0
   \   0000040E   0x....             ADR      R5,??DataTable80_5  ;; 0x2C, 0x20, 0x00, 0x00
   \   00000410   0x68FF             LDR      R7,[R7, #+12]
   \                     ??mbedtls_x509_crt_info_20: (+1)
   \   00000412   0x2F00             CMP      R7,#+0
   \   00000414   0xD1E5             BNE      ??mbedtls_x509_crt_info_21
   \   00000416   0x9406             STR      R4,[SP, #+24]
   \   00000418   0x9607             STR      R6,[SP, #+28]
   1486              }
   1487          
   1488              ret = mbedtls_snprintf( p, n, "\n" );
   \                     ??mbedtls_x509_crt_info_19: (+1)
   \   0000041A   0x....             ADR      R2,??DataTable82_1  ;; "\n"
   \   0000041C   0x9906             LDR      R1,[SP, #+24]
   \   0000041E   0x9807             LDR      R0,[SP, #+28]
   \   00000420   0x.... 0x....      BL       snprintf
   1489              MBEDTLS_X509_SAFE_SNPRINTF;
   \   00000424   0x2800             CMP      R0,#+0
   \   00000426   0xD402             BMI      ??mbedtls_x509_crt_info_3
   \                     ??mbedtls_x509_crt_info_4: (+1)
   \   00000428   0x9906             LDR      R1,[SP, #+24]
   \   0000042A   0x4288             CMP      R0,R1
   \   0000042C   0xD301             BCC      ??mbedtls_x509_crt_info_23
   \                     ??mbedtls_x509_crt_info_3: (+1)
   \   0000042E   0x....             LDR      R0,??DataTable82_2  ;; 0xffffd680
   \   00000430   0xE003             B        ??mbedtls_x509_crt_info_5
   1490          
   1491              return( (int) ( size - n ) );
   \                     ??mbedtls_x509_crt_info_23: (+1)
   \   00000432   0x990E             LDR      R1,[SP, #+56]
   \   00000434   0x9A06             LDR      R2,[SP, #+24]
   \   00000436   0x1A89             SUBS     R1,R1,R2
   \   00000438   0x1808             ADDS     R0,R1,R0
   \                     ??mbedtls_x509_crt_info_5: (+1)
   \   0000043A   0xB011             ADD      SP,SP,#+68
   \   0000043C   0xBDF0             POP      {R4-R7,PC}       ;; return
   1492          }
   1493          
   1494          struct x509_crt_verify_string {
   1495              int code;
   1496              const char *string;
   1497          };
   1498          

   \                                 In section .text, align 4, keep-with-next
   1499          static const struct x509_crt_verify_string x509_crt_verify_strings[] = {
   \                     x509_crt_verify_strings:
   \   00000000   0x00000001         DC32 1, ?_0, 2, ?_1, 4, ?_2, 8, ?_3, 16, ?_4, 32, ?_5, 64, ?_6, 128
   \              0x........   
   \              0x00000002   
   \              0x........   
   \              0x00000004   
   \              0x........   
   \              0x00000008   
   \              0x........   
   \              0x00000010   
   \              0x........   
   \              0x00000020   
   \              0x........   
   \              0x00000040   
   \              0x........   
   \              0x00000080   
   \   0000003C   0x........         DC32 ?_7, 256, ?_8, 512, ?_9, 1024, ?_10, 2048, ?_11, 4096, ?_12, 8192
   \              0x00000100   
   \              0x........   
   \              0x00000200   
   \              0x........   
   \              0x00000400   
   \              0x........   
   \              0x00000800   
   \              0x........   
   \              0x00001000   
   \              0x........   
   \              0x00002000   
   \   0000006C   0x........         DC32 ?_13, 16384, ?_14, 32768, ?_15, 65536, ?_16, 131072, ?_17, 262144
   \              0x00004000   
   \              0x........   
   \              0x00008000   
   \              0x........   
   \              0x00010000   
   \              0x........   
   \              0x00020000   
   \              0x........   
   \              0x00040000   
   \   00000094   0x........         DC32 ?_18, 524288, ?_19, 0, 0H
   \              0x00080000   
   \              0x........   
   \              0x00000000   
   \              0x00000000   
   1500              { MBEDTLS_X509_BADCERT_EXPIRED,       "The certificate validity has expired" },
   1501              { MBEDTLS_X509_BADCERT_REVOKED,       "The certificate has been revoked (is on a CRL)" },
   1502              { MBEDTLS_X509_BADCERT_CN_MISMATCH,   "The certificate Common Name (CN) does not match with the expected CN" },
   1503              { MBEDTLS_X509_BADCERT_NOT_TRUSTED,   "The certificate is not correctly signed by the trusted CA" },
   1504              { MBEDTLS_X509_BADCRL_NOT_TRUSTED,    "The CRL is not correctly signed by the trusted CA" },
   1505              { MBEDTLS_X509_BADCRL_EXPIRED,        "The CRL is expired" },
   1506              { MBEDTLS_X509_BADCERT_MISSING,       "Certificate was missing" },
   1507              { MBEDTLS_X509_BADCERT_SKIP_VERIFY,   "Certificate verification was skipped" },
   1508              { MBEDTLS_X509_BADCERT_OTHER,         "Other reason (can be used by verify callback)" },
   1509              { MBEDTLS_X509_BADCERT_FUTURE,        "The certificate validity starts in the future" },
   1510              { MBEDTLS_X509_BADCRL_FUTURE,         "The CRL is from the future" },
   1511              { MBEDTLS_X509_BADCERT_KEY_USAGE,     "Usage does not match the keyUsage extension" },
   1512              { MBEDTLS_X509_BADCERT_EXT_KEY_USAGE, "Usage does not match the extendedKeyUsage extension" },
   1513              { MBEDTLS_X509_BADCERT_NS_CERT_TYPE,  "Usage does not match the nsCertType extension" },
   1514              { MBEDTLS_X509_BADCERT_BAD_MD,        "The certificate is signed with an unacceptable hash." },
   1515              { MBEDTLS_X509_BADCERT_BAD_PK,        "The certificate is signed with an unacceptable PK alg (eg RSA vs ECDSA)." },
   1516              { MBEDTLS_X509_BADCERT_BAD_KEY,       "The certificate is signed with an unacceptable key (eg bad curve, RSA too short)." },
   1517              { MBEDTLS_X509_BADCRL_BAD_MD,         "The CRL is signed with an unacceptable hash." },
   1518              { MBEDTLS_X509_BADCRL_BAD_PK,         "The CRL is signed with an unacceptable PK alg (eg RSA vs ECDSA)." },
   1519              { MBEDTLS_X509_BADCRL_BAD_KEY,        "The CRL is signed with an unacceptable key (eg bad curve, RSA too short)." },
   1520              { 0, NULL }
   1521          };
   1522          

   \                                 In section .text, align 4, keep-with-next
   1523          int mbedtls_x509_crt_verify_info( char *buf, size_t size, const char *prefix,
   1524                                    uint32_t flags )
   1525          {
   \                     mbedtls_x509_crt_verify_info: (+1)
   \   00000000   0xB5F7             PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0x001E             MOVS     R6,R3
   1526              int ret;
   1527              const struct x509_crt_verify_string *cur;
   1528              char *p = buf;
   \   00000004   0x0007             MOVS     R7,R0
   1529              size_t n = size;
   \   00000006   0x460C             MOV      R4,R1
   1530          
   1531              for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
   \   00000008   0x....             ADR.N    R5,x509_crt_verify_strings
   \   0000000A   0xE014             B        ??mbedtls_x509_crt_verify_info_0
   1532              {
   1533                  if( ( flags & cur->code ) == 0 )
   \                     ??mbedtls_x509_crt_verify_info_1: (+1)
   \   0000000C   0x6829             LDR      R1,[R5, #+0]
   \   0000000E   0x4031             ANDS     R1,R1,R6
   \   00000010   0xD010             BEQ      ??mbedtls_x509_crt_verify_info_2
   1534                      continue;
   1535          
   1536                  ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
   \   00000012   0x9000             STR      R0,[SP, #+0]
   \   00000014   0x9B02             LDR      R3,[SP, #+8]
   \   00000016   0xBF00             Nop      
   \   00000018   0x....             ADR.N    R2,?_61
   \   0000001A   0x0021             MOVS     R1,R4
   \   0000001C   0x0038             MOVS     R0,R7
   \   0000001E   0x.... 0x....      BL       snprintf
   1537                  MBEDTLS_X509_SAFE_SNPRINTF;
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD417             BMI      ??mbedtls_x509_crt_verify_info_3
   \   00000026   0x42A0             CMP      R0,R4
   \   00000028   0xD215             BCS      ??mbedtls_x509_crt_verify_info_3
   \   0000002A   0x1A24             SUBS     R4,R4,R0
   \   0000002C   0x183F             ADDS     R7,R7,R0
   1538                  flags ^= cur->code;
   \   0000002E   0x0030             MOVS     R0,R6
   \   00000030   0x682E             LDR      R6,[R5, #+0]
   \   00000032   0x4046             EORS     R6,R6,R0
   1539              }
   \                     ??mbedtls_x509_crt_verify_info_2: (+1)
   \   00000034   0x3508             ADDS     R5,R5,#+8
   \                     ??mbedtls_x509_crt_verify_info_0: (+1)
   \   00000036   0x6868             LDR      R0,[R5, #+4]
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD1E7             BNE      ??mbedtls_x509_crt_verify_info_1
   1540          
   1541              if( flags != 0 )
   \   0000003C   0x2E00             CMP      R6,#+0
   \   0000003E   0xD00D             BEQ      ??mbedtls_x509_crt_verify_info_4
   1542              {
   1543                  ret = mbedtls_snprintf( p, n, "%sUnknown reason "
   1544                                                 "(this should not happen)\n", prefix );
   \   00000040   0x9B02             LDR      R3,[SP, #+8]
   \   00000042   0xBF00             Nop      
   \   00000044   0x....             ADR.N    R2,?_62
   \   00000046   0x0021             MOVS     R1,R4
   \   00000048   0x0038             MOVS     R0,R7
   \   0000004A   0x.... 0x....      BL       snprintf
   1545                  MBEDTLS_X509_SAFE_SNPRINTF;
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD401             BMI      ??mbedtls_x509_crt_verify_info_3
   \   00000052   0x42A0             CMP      R0,R4
   \   00000054   0xD301             BCC      ??mbedtls_x509_crt_verify_info_5
   \                     ??mbedtls_x509_crt_verify_info_3: (+1)
   \   00000056   0x....             LDR      R0,??DataTable82_2  ;; 0xffffd680
   \   00000058   0xE002             B        ??mbedtls_x509_crt_verify_info_6
   \                     ??mbedtls_x509_crt_verify_info_5: (+1)
   \   0000005A   0x1A24             SUBS     R4,R4,R0
   1546              }
   1547          
   1548              return( (int) ( size - n ) );
   \                     ??mbedtls_x509_crt_verify_info_4: (+1)
   \   0000005C   0x9801             LDR      R0,[SP, #+4]
   \   0000005E   0x1B00             SUBS     R0,R0,R4
   \                     ??mbedtls_x509_crt_verify_info_6: (+1)
   \   00000060   0xB003             ADD      SP,SP,#+12
   \   00000062   0xBDF0             POP      {R4-R7,PC}       ;; return
   1549          }
   1550          
   1551          #if defined(MBEDTLS_X509_CHECK_KEY_USAGE)

   \                                 In section .text, align 2, keep-with-next
   1552          int mbedtls_x509_crt_check_key_usage( const mbedtls_x509_crt *crt,
   1553                                                unsigned int usage )
   1554          {
   1555              unsigned int usage_must, usage_may;
   1556              unsigned int may_mask = MBEDTLS_X509_KU_ENCIPHER_ONLY
   1557                                    | MBEDTLS_X509_KU_DECIPHER_ONLY;
   1558          
   1559              if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
   \                     mbedtls_x509_crt_check_key_usage: (+1)
   \   00000000   0x30F8             ADDS     R0,R0,#+248
   \   00000002   0x7802             LDRB     R2,[R0, #+0]
   \   00000004   0x0752             LSLS     R2,R2,#+29
   \   00000006   0xD50E             BPL      ??mbedtls_x509_crt_check_key_usage_0
   1560                  return( 0 );
   1561          
   1562              usage_must = usage & ~may_mask;
   \   00000008   0x....             LDR      R2,??DataTable83  ;; 0xffff7ffe
   \   0000000A   0x400A             ANDS     R2,R2,R1
   1563          
   1564              if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
   \   0000000C   0x68C0             LDR      R0,[R0, #+12]
   \   0000000E   0x0013             MOVS     R3,R2
   \   00000010   0x4003             ANDS     R3,R3,R0
   \   00000012   0x4293             CMP      R3,R2
   \   00000014   0xD105             BNE      ??mbedtls_x509_crt_check_key_usage_1
   1565                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   1566          
   1567              usage_may = usage & may_mask;
   \   00000016   0x....             LDR      R2,??DataTable83_1  ;; 0x8001
   \   00000018   0x4011             ANDS     R1,R1,R2
   1568          
   1569              if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
   \   0000001A   0x4002             ANDS     R2,R2,R0
   \   0000001C   0x430A             ORRS     R2,R2,R1
   \   0000001E   0x428A             CMP      R2,R1
   \   00000020   0xD001             BEQ      ??mbedtls_x509_crt_check_key_usage_0
   1570                  return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   \                     ??mbedtls_x509_crt_check_key_usage_1: (+1)
   \   00000022   0x....             LDR      R0,??DataTable83_2  ;; 0xffffd800
   \   00000024   0x4770             BX       LR
   1571          
   1572              return( 0 );
   \                     ??mbedtls_x509_crt_check_key_usage_0: (+1)
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x4770             BX       LR               ;; return
   1573          }
   1574          #endif
   1575          
   1576          #if defined(MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE)

   \                                 In section .text, align 4, keep-with-next
   1577          int mbedtls_x509_crt_check_extended_key_usage( const mbedtls_x509_crt *crt,
   1578                                                 const char *usage_oid,
   1579                                                 size_t usage_len )
   1580          {
   \                     mbedtls_x509_crt_check_extended_key_usage: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0x0016             MOVS     R6,R2
   1581              const mbedtls_x509_sequence *cur;
   1582          
   1583              /* Extension is not mandatory, absent means no restriction */
   1584              if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
   \   00000004   0x21F8             MOVS     R1,#+248
   \   00000006   0x5841             LDR      R1,[R0, R1]
   \   00000008   0x0509             LSLS     R1,R1,#+20
   \   0000000A   0xD51B             BPL      ??mbedtls_x509_crt_check_extended_key_usage_0
   1585                  return( 0 );
   1586          
   1587              /*
   1588               * Look for the requested usage (or wildcard ANY) in our list
   1589               */
   1590              for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
   \   0000000C   0x2184             MOVS     R1,#+132
   \   0000000E   0x0049             LSLS     R1,R1,#+1        ;; #+264
   \   00000010   0x1844             ADDS     R4,R0,R1
   \   00000012   0xBF00             Nop      
   \   00000014   0x....             ADR.N    R7,?_63
   \   00000016   0xE000             B        ??mbedtls_x509_crt_check_extended_key_usage_1
   \                     ??mbedtls_x509_crt_check_extended_key_usage_2: (+1)
   \   00000018   0x68E4             LDR      R4,[R4, #+12]
   \                     ??mbedtls_x509_crt_check_extended_key_usage_1: (+1)
   \   0000001A   0x2C00             CMP      R4,#+0
   \   0000001C   0xD014             BEQ      ??mbedtls_x509_crt_check_extended_key_usage_3
   1591              {
   1592                  const mbedtls_x509_buf *cur_oid = &cur->buf;
   1593          
   1594                  if( cur_oid->len == usage_len &&
   1595                      memcmp( cur_oid->p, usage_oid, usage_len ) == 0 )
   \   0000001E   0x6865             LDR      R5,[R4, #+4]
   \   00000020   0x42B5             CMP      R5,R6
   \   00000022   0xD106             BNE      ??mbedtls_x509_crt_check_extended_key_usage_4
   \   00000024   0x0032             MOVS     R2,R6
   \   00000026   0x9900             LDR      R1,[SP, #+0]
   \   00000028   0x68A0             LDR      R0,[R4, #+8]
   \   0000002A   0x.... 0x....      BL       memcmp
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD008             BEQ      ??mbedtls_x509_crt_check_extended_key_usage_0
   1596                  {
   1597                      return( 0 );
   1598                  }
   1599          
   1600                  if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE, cur_oid ) == 0 )
   \                     ??mbedtls_x509_crt_check_extended_key_usage_4: (+1)
   \   00000032   0x2D04             CMP      R5,#+4
   \   00000034   0xD1F0             BNE      ??mbedtls_x509_crt_check_extended_key_usage_2
   \   00000036   0x2204             MOVS     R2,#+4
   \   00000038   0x68A1             LDR      R1,[R4, #+8]
   \   0000003A   0x0038             MOVS     R0,R7
   \   0000003C   0x.... 0x....      BL       memcmp
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD1E9             BNE      ??mbedtls_x509_crt_check_extended_key_usage_2
   1601                      return( 0 );
   \                     ??mbedtls_x509_crt_check_extended_key_usage_0: (+1)
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0xBDF2             POP      {R1,R4-R7,PC}
   1602              }
   1603          
   1604              return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
   \                     ??mbedtls_x509_crt_check_extended_key_usage_3: (+1)
   \   00000048   0x....             LDR      R0,??DataTable83_2  ;; 0xffffd800
   \   0000004A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   1605          }
   1606          #endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */
   1607          
   1608          #if defined(MBEDTLS_X509_CRL_PARSE_C)
   1609          /*
   1610           * Return 1 if the certificate is revoked, or 0 otherwise.
   1611           */

   \                                 In section .text, align 2, keep-with-next
   1612          int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
   1613          {
   \                     mbedtls_x509_crt_is_revoked: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   1614              const mbedtls_x509_crl_entry *cur = &crl->entry;
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x3484             ADDS     R4,R4,#+132
   \   00000008   0xE000             B        ??mbedtls_x509_crt_is_revoked_0
   1615          
   1616              while( cur != NULL && cur->serial.len != 0 )
   1617              {
   1618                  if( crt->serial.len == cur->serial.len &&
   1619                      memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
   1620                  {
   1621                      if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
   1622                          return( 1 );
   1623                  }
   1624          
   1625                  cur = cur->next;
   \                     ??mbedtls_x509_crt_is_revoked_1: (+1)
   \   0000000A   0x6BE4             LDR      R4,[R4, #+60]
   \                     ??mbedtls_x509_crt_is_revoked_0: (+1)
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD013             BEQ      ??mbedtls_x509_crt_is_revoked_2
   \   00000010   0x6920             LDR      R0,[R4, #+16]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD010             BEQ      ??mbedtls_x509_crt_is_revoked_2
   \   00000016   0x6A2A             LDR      R2,[R5, #+32]
   \   00000018   0x4282             CMP      R2,R0
   \   0000001A   0xD1F6             BNE      ??mbedtls_x509_crt_is_revoked_1
   \   0000001C   0x6961             LDR      R1,[R4, #+20]
   \   0000001E   0x6A68             LDR      R0,[R5, #+36]
   \   00000020   0x.... 0x....      BL       memcmp
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD1F0             BNE      ??mbedtls_x509_crt_is_revoked_1
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x3018             ADDS     R0,R0,#+24
   \   0000002C   0x.... 0x....      BL       mbedtls_x509_time_is_past
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD0EA             BEQ      ??mbedtls_x509_crt_is_revoked_1
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0xBD32             POP      {R1,R4,R5,PC}
   1626              }
   1627          
   1628              return( 0 );
   \                     ??mbedtls_x509_crt_is_revoked_2: (+1)
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1629          }
   1630          
   1631          /*
   1632           * Check that the given certificate is not revoked according to the CRL.
   1633           * Skip validation is no CRL for the given CA is present.
   1634           */

   \                                 In section .text, align 2, keep-with-next
   1635          static int x509_crt_verifycrl( mbedtls_x509_crt *crt, mbedtls_x509_crt *ca,
   1636                                         mbedtls_x509_crl *crl_list,
   1637                                         const mbedtls_x509_crt_profile *profile )
   1638          {
   \                     x509_crt_verifycrl: (+1)
   \   00000000   0xB5FB             PUSH     {R0,R1,R3-R7,LR}
   \   00000002   0xB094             SUB      SP,SP,#+80
   \   00000004   0x0016             MOVS     R6,R2
   1639              int flags = 0;
   \   00000006   0x2500             MOVS     R5,#+0
   1640              unsigned char hash[MBEDTLS_MD_MAX_SIZE];
   1641              const mbedtls_md_info_t *md_info;
   1642          
   1643              if( ca == NULL )
   \   00000008   0x4608             MOV      R0,R1
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD103             BNE      ??x509_crt_verifycrl_0
   1644                  return( flags );
   \   0000000E   0xE0AF             B        ??x509_crt_verifycrl_1
   1645          
   1646              while( crl_list != NULL )
   1647              {
   1648                  if( crl_list->version == 0 ||
   1649                      crl_list->issuer_raw.len != ca->subject_raw.len ||
   1650                      memcmp( crl_list->issuer_raw.p, ca->subject_raw.p,
   1651                              crl_list->issuer_raw.len ) != 0 )
   1652                  {
   1653                      crl_list = crl_list->next;
   1654                      continue;
   1655                  }
   1656          
   1657                  /*
   1658                   * Check if the CA is configured to sign CRLs
   1659                   */
   1660          #if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
   1661                  if( mbedtls_x509_crt_check_key_usage( ca, MBEDTLS_X509_KU_CRL_SIGN ) != 0 )
   1662                  {
   1663                      flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
   1664                      break;
   1665                  }
   1666          #endif
   1667          
   1668                  /*
   1669                   * Check if CRL is correctly signed by the trusted CA
   1670                   */
   1671                  if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
   1672                      flags |= MBEDTLS_X509_BADCRL_BAD_MD;
   1673          
   1674                  if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
   1675                      flags |= MBEDTLS_X509_BADCRL_BAD_PK;
   1676          
   1677                  md_info = mbedtls_md_info_from_type( crl_list->sig_md );
   1678                  if( md_info == NULL )
   1679                  {
   1680                      /*
   1681                       * Cannot check 'unknown' hash
   1682                       */
   1683                      flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
   1684                      break;
   1685                  }
   1686          
   1687                  mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash );
   1688          
   1689                  if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
   1690                      flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   1691          
   1692                  if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
   1693                                     crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
   1694                                     crl_list->sig.p, crl_list->sig.len ) != 0 )
   1695                  {
   1696                      flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
   1697                      break;
   1698                  }
   1699          
   1700                  /*
   1701                   * Check for validity of CRL (Do not drop out)
   1702                   */
   1703                  if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
   1704                      flags |= MBEDTLS_X509_BADCRL_EXPIRED;
   1705          
   1706                  if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
   1707                      flags |= MBEDTLS_X509_BADCRL_FUTURE;
   1708          
   1709                  /*
   1710                   * Check if certificate is revoked
   1711                   */
   1712                  if( mbedtls_x509_crt_is_revoked( crt, crl_list ) )
   1713                  {
   1714                      flags |= MBEDTLS_X509_BADCERT_REVOKED;
   1715                      break;
   1716                  }
   1717          
   1718                  crl_list = crl_list->next;
   \                     ??x509_crt_verifycrl_2: (+1)
   \   00000010   0x0030             MOVS     R0,R6
   \   00000012   0x30E0             ADDS     R0,R0,#+224
   \   00000014   0x6906             LDR      R6,[R0, #+16]
   \                     ??x509_crt_verifycrl_0: (+1)
   \   00000016   0x2E00             CMP      R6,#+0
   \   00000018   0xD100             BNE      .+4
   \   0000001A   0xE0A8             B        ??x509_crt_verifycrl_3
   \   0000001C   0x0037             MOVS     R7,R6
   \   0000001E   0x3710             ADDS     R7,R7,#+16
   \   00000020   0x68B8             LDR      R0,[R7, #+8]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD0F4             BEQ      ??x509_crt_verifycrl_2
   \   00000026   0x69FA             LDR      R2,[R7, #+28]
   \   00000028   0x9815             LDR      R0,[SP, #+84]
   \   0000002A   0x3044             ADDS     R0,R0,#+68
   \   0000002C   0x9001             STR      R0,[SP, #+4]
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x4282             CMP      R2,R0
   \   00000032   0xD1ED             BNE      ??x509_crt_verifycrl_2
   \   00000034   0x9801             LDR      R0,[SP, #+4]
   \   00000036   0x6841             LDR      R1,[R0, #+4]
   \   00000038   0x6A38             LDR      R0,[R7, #+32]
   \   0000003A   0x.... 0x....      BL       memcmp
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD1E6             BNE      ??x509_crt_verifycrl_2
   \   00000042   0x9815             LDR      R0,[SP, #+84]
   \   00000044   0x30F8             ADDS     R0,R0,#+248
   \   00000046   0x7801             LDRB     R1,[R0, #+0]
   \   00000048   0x0749             LSLS     R1,R1,#+29
   \   0000004A   0xD505             BPL      ??x509_crt_verifycrl_4
   \   0000004C   0x68C0             LDR      R0,[R0, #+12]
   \   0000004E   0x0781             LSLS     R1,R0,#+30
   \   00000050   0xD558             BPL      ??x509_crt_verifycrl_5
   \   00000052   0x....             LDR      R1,??DataTable83_1  ;; 0x8001
   \   00000054   0x4001             ANDS     R1,R1,R0
   \   00000056   0xD155             BNE      ??x509_crt_verifycrl_5
   \                     ??x509_crt_verifycrl_4: (+1)
   \   00000058   0x0034             MOVS     R4,R6
   \   0000005A   0x34E0             ADDS     R4,R4,#+224
   \   0000005C   0x7A20             LDRB     R0,[R4, #+8]
   \   0000005E   0x9916             LDR      R1,[SP, #+88]
   \   00000060   0x6809             LDR      R1,[R1, #+0]
   \   00000062   0x1E42             SUBS     R2,R0,#+1
   \   00000064   0x40D1             LSRS     R1,R1,R2
   \   00000066   0x07C9             LSLS     R1,R1,#+31
   \   00000068   0xD403             BMI      ??x509_crt_verifycrl_6
   \   0000006A   0x0029             MOVS     R1,R5
   \   0000006C   0x2580             MOVS     R5,#+128
   \   0000006E   0x02AD             LSLS     R5,R5,#+10       ;; #+131072
   \   00000070   0x430D             ORRS     R5,R5,R1
   \                     ??x509_crt_verifycrl_6: (+1)
   \   00000072   0x9916             LDR      R1,[SP, #+88]
   \   00000074   0x6849             LDR      R1,[R1, #+4]
   \   00000076   0x7A62             LDRB     R2,[R4, #+9]
   \   00000078   0x1E52             SUBS     R2,R2,#+1
   \   0000007A   0x40D1             LSRS     R1,R1,R2
   \   0000007C   0x07C9             LSLS     R1,R1,#+31
   \   0000007E   0xD403             BMI      ??x509_crt_verifycrl_7
   \   00000080   0x0029             MOVS     R1,R5
   \   00000082   0x2580             MOVS     R5,#+128
   \   00000084   0x02ED             LSLS     R5,R5,#+11       ;; #+262144
   \   00000086   0x430D             ORRS     R5,R5,R1
   \                     ??x509_crt_verifycrl_7: (+1)
   \   00000088   0x.... 0x....      BL       mbedtls_md_info_from_type
   \   0000008C   0x9000             STR      R0,[SP, #+0]
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD038             BEQ      ??x509_crt_verifycrl_5
   \   00000092   0xAB04             ADD      R3,SP,#+16
   \   00000094   0x683A             LDR      R2,[R7, #+0]
   \   00000096   0x6879             LDR      R1,[R7, #+4]
   \   00000098   0x.... 0x....      BL       mbedtls_md
   \   0000009C   0x7A60             LDRB     R0,[R4, #+9]
   \   0000009E   0x2801             CMP      R0,#+1
   \   000000A0   0xD011             BEQ      ??x509_crt_verifycrl_8
   \   000000A2   0x2806             CMP      R0,#+6
   \   000000A4   0xD00F             BEQ      ??x509_crt_verifycrl_8
   \   000000A6   0x2804             CMP      R0,#+4
   \   000000A8   0xD003             BEQ      ??x509_crt_verifycrl_9
   \   000000AA   0x2802             CMP      R0,#+2
   \   000000AC   0xD001             BEQ      ??x509_crt_verifycrl_9
   \   000000AE   0x2803             CMP      R0,#+3
   \   000000B0   0xD111             BNE      ??x509_crt_verifycrl_10
   \                     ??x509_crt_verifycrl_9: (+1)
   \   000000B2   0x9816             LDR      R0,[SP, #+88]
   \   000000B4   0x6880             LDR      R0,[R0, #+8]
   \   000000B6   0x9901             LDR      R1,[SP, #+4]
   \   000000B8   0x6FC9             LDR      R1,[R1, #+124]
   \   000000BA   0x7809             LDRB     R1,[R1, #+0]
   \   000000BC   0x1E49             SUBS     R1,R1,#+1
   \   000000BE   0x40C8             LSRS     R0,R0,R1
   \   000000C0   0x07C0             LSLS     R0,R0,#+31
   \   000000C2   0xD40C             BMI      ??x509_crt_verifycrl_11
   \   000000C4   0xE007             B        ??x509_crt_verifycrl_10
   \                     ??x509_crt_verifycrl_8: (+1)
   \   000000C6   0x9815             LDR      R0,[SP, #+84]
   \   000000C8   0x30BC             ADDS     R0,R0,#+188
   \   000000CA   0x.... 0x....      BL       mbedtls_pk_get_bitlen
   \   000000CE   0x9916             LDR      R1,[SP, #+88]
   \   000000D0   0x68C9             LDR      R1,[R1, #+12]
   \   000000D2   0x4288             CMP      R0,R1
   \   000000D4   0xD203             BCS      ??x509_crt_verifycrl_11
   \                     ??x509_crt_verifycrl_10: (+1)
   \   000000D6   0x0028             MOVS     R0,R5
   \   000000D8   0x2580             MOVS     R5,#+128
   \   000000DA   0x026D             LSLS     R5,R5,#+9        ;; #+65536
   \   000000DC   0x4305             ORRS     R5,R5,R0
   \                     ??x509_crt_verifycrl_11: (+1)
   \   000000DE   0x9800             LDR      R0,[SP, #+0]
   \   000000E0   0x.... 0x....      BL       mbedtls_md_get_size
   \   000000E4   0x6821             LDR      R1,[R4, #+0]
   \   000000E6   0x9103             STR      R1,[SP, #+12]
   \   000000E8   0x6861             LDR      R1,[R4, #+4]
   \   000000EA   0x9102             STR      R1,[SP, #+8]
   \   000000EC   0x9001             STR      R0,[SP, #+4]
   \   000000EE   0xA804             ADD      R0,SP,#+16
   \   000000F0   0x9000             STR      R0,[SP, #+0]
   \   000000F2   0x7A23             LDRB     R3,[R4, #+8]
   \   000000F4   0x9A15             LDR      R2,[SP, #+84]
   \   000000F6   0x32BC             ADDS     R2,R2,#+188
   \   000000F8   0x68E1             LDR      R1,[R4, #+12]
   \   000000FA   0x7A60             LDRB     R0,[R4, #+9]
   \   000000FC   0x.... 0x....      BL       mbedtls_pk_verify_ext
   \   00000100   0x2800             CMP      R0,#+0
   \   00000102   0xD002             BEQ      ??x509_crt_verifycrl_12
   \                     ??x509_crt_verifycrl_5: (+1)
   \   00000104   0x0028             MOVS     R0,R5
   \   00000106   0x2510             MOVS     R5,#+16
   \   00000108   0xE030             B        ??x509_crt_verifycrl_13
   \                     ??x509_crt_verifycrl_12: (+1)
   \   0000010A   0x0030             MOVS     R0,R6
   \   0000010C   0x306C             ADDS     R0,R0,#+108
   \   0000010E   0x.... 0x....      BL       mbedtls_x509_time_is_past
   \   00000112   0x2800             CMP      R0,#+0
   \   00000114   0xD002             BEQ      ??x509_crt_verifycrl_14
   \   00000116   0x0028             MOVS     R0,R5
   \   00000118   0x2520             MOVS     R5,#+32
   \   0000011A   0x4305             ORRS     R5,R5,R0
   \                     ??x509_crt_verifycrl_14: (+1)
   \   0000011C   0x0030             MOVS     R0,R6
   \   0000011E   0x3054             ADDS     R0,R0,#+84
   \   00000120   0x.... 0x....      BL       mbedtls_x509_time_is_future
   \   00000124   0x2800             CMP      R0,#+0
   \   00000126   0xD003             BEQ      ??x509_crt_verifycrl_15
   \   00000128   0x0028             MOVS     R0,R5
   \   0000012A   0x2580             MOVS     R5,#+128
   \   0000012C   0x00ED             LSLS     R5,R5,#+3        ;; #+1024
   \   0000012E   0x4305             ORRS     R5,R5,R0
   \                     ??x509_crt_verifycrl_15: (+1)
   \   00000130   0x0034             MOVS     R4,R6
   \   00000132   0x3484             ADDS     R4,R4,#+132
   \   00000134   0xE000             B        ??x509_crt_verifycrl_16
   \                     ??x509_crt_verifycrl_17: (+1)
   \   00000136   0x6BE4             LDR      R4,[R4, #+60]
   \                     ??x509_crt_verifycrl_16: (+1)
   \   00000138   0x2C00             CMP      R4,#+0
   \   0000013A   0xD100             BNE      .+4
   \   0000013C   0xE768             B        ??x509_crt_verifycrl_2
   \   0000013E   0x6920             LDR      R0,[R4, #+16]
   \   00000140   0x2800             CMP      R0,#+0
   \   00000142   0xD100             BNE      .+4
   \   00000144   0xE764             B        ??x509_crt_verifycrl_2
   \   00000146   0x9914             LDR      R1,[SP, #+80]
   \   00000148   0x6A0A             LDR      R2,[R1, #+32]
   \   0000014A   0x4282             CMP      R2,R0
   \   0000014C   0xD1F3             BNE      ??x509_crt_verifycrl_17
   \   0000014E   0x6961             LDR      R1,[R4, #+20]
   \   00000150   0x9814             LDR      R0,[SP, #+80]
   \   00000152   0x6A40             LDR      R0,[R0, #+36]
   \   00000154   0x.... 0x....      BL       memcmp
   \   00000158   0x2800             CMP      R0,#+0
   \   0000015A   0xD1EC             BNE      ??x509_crt_verifycrl_17
   \   0000015C   0x0020             MOVS     R0,R4
   \   0000015E   0x3018             ADDS     R0,R0,#+24
   \   00000160   0x.... 0x....      BL       mbedtls_x509_time_is_past
   \   00000164   0x2800             CMP      R0,#+0
   \   00000166   0xD0E6             BEQ      ??x509_crt_verifycrl_17
   \   00000168   0x0028             MOVS     R0,R5
   \   0000016A   0x2502             MOVS     R5,#+2
   \                     ??x509_crt_verifycrl_13: (+1)
   \   0000016C   0x4305             ORRS     R5,R5,R0
   1719              }
   1720          
   1721              return( flags );
   \                     ??x509_crt_verifycrl_3: (+1)
   \   0000016E   0x0028             MOVS     R0,R5
   \                     ??x509_crt_verifycrl_1: (+1)
   \   00000170   0xB017             ADD      SP,SP,#+92
   \   00000172   0xBDF0             POP      {R4-R7,PC}       ;; return
   1722          }
   1723          #endif /* MBEDTLS_X509_CRL_PARSE_C */
   1724          
   1725          /*
   1726           * Like memcmp, but case-insensitive and always returns -1 if different
   1727           */

   \                                 In section .text, align 2, keep-with-next
   1728          static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
   1729          {
   \                     x509_memcasecmp: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
   1730              size_t i;
   1731              unsigned char diff;
   1732              const unsigned char *n1 = s1, *n2 = s2;
   1733          
   1734              for( i = 0; i < len; i++ )
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0xE002             B        ??x509_memcasecmp_0
   \                     ??x509_memcasecmp_1: (+1)
   \   00000006   0x1C5B             ADDS     R3,R3,#+1
   \   00000008   0x1C49             ADDS     R1,R1,#+1
   \   0000000A   0x1C40             ADDS     R0,R0,#+1
   \                     ??x509_memcasecmp_0: (+1)
   \   0000000C   0x4293             CMP      R3,R2
   \   0000000E   0xD20F             BCS      ??x509_memcasecmp_2
   1735              {
   1736                  diff = n1[i] ^ n2[i];
   \   00000010   0x7804             LDRB     R4,[R0, #+0]
   \   00000012   0x780D             LDRB     R5,[R1, #+0]
   \   00000014   0x4065             EORS     R5,R5,R4
   1737          
   1738                  if( diff == 0 )
   \   00000016   0xD0F6             BEQ      ??x509_memcasecmp_1
   1739                      continue;
   1740          
   1741                  if( diff == 32 &&
   1742                      ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
   1743                        ( n1[i] >= 'A' && n1[i] <= 'Z' ) ) )
   \   00000018   0x2D20             CMP      R5,#+32
   \   0000001A   0xD106             BNE      ??x509_memcasecmp_3
   \   0000001C   0x0025             MOVS     R5,R4
   \   0000001E   0x3D61             SUBS     R5,R5,#+97
   \   00000020   0x2D1A             CMP      R5,#+26
   \   00000022   0xD3F0             BCC      ??x509_memcasecmp_1
   \   00000024   0x3C41             SUBS     R4,R4,#+65
   \   00000026   0x2C1A             CMP      R4,#+26
   \   00000028   0xD3ED             BCC      ??x509_memcasecmp_1
   1744                  {
   1745                      continue;
   1746                  }
   1747          
   1748                  return( -1 );
   \                     ??x509_memcasecmp_3: (+1)
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x43C0             MVNS     R0,R0            ;; #-1
   \   0000002E   0xE000             B        ??x509_memcasecmp_4
   1749              }
   1750          
   1751              return( 0 );
   \                     ??x509_memcasecmp_2: (+1)
   \   00000030   0x2000             MOVS     R0,#+0
   \                     ??x509_memcasecmp_4: (+1)
   \   00000032   0xBC30             POP      {R4,R5}
   \   00000034   0x4770             BX       LR               ;; return
   1752          }
   1753          
   1754          /*
   1755           * Return 0 if name matches wildcard, -1 otherwise
   1756           */
   1757          static int x509_check_wildcard( const char *cn, mbedtls_x509_buf *name )
   1758          {
   1759              size_t i;
   1760              size_t cn_idx = 0, cn_len = strlen( cn );
   1761          
   1762              if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
   1763                  return( 0 );
   1764          
   1765              for( i = 0; i < cn_len; ++i )
   1766              {
   1767                  if( cn[i] == '.' )
   1768                  {
   1769                      cn_idx = i;
   1770                      break;
   1771                  }
   1772              }
   1773          
   1774              if( cn_idx == 0 )
   1775                  return( -1 );
   1776          
   1777              if( cn_len - cn_idx == name->len - 1 &&
   1778                  x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
   1779              {
   1780                  return( 0 );
   1781              }
   1782          
   1783              return( -1 );
   1784          }
   1785          
   1786          /*
   1787           * Compare two X.509 strings, case-insensitive, and allowing for some encoding
   1788           * variations (but not all).
   1789           *
   1790           * Return 0 if equal, -1 otherwise.
   1791           */
   1792          static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
   1793          {
   1794              if( a->tag == b->tag &&
   1795                  a->len == b->len &&
   1796                  memcmp( a->p, b->p, b->len ) == 0 )
   1797              {
   1798                  return( 0 );
   1799              }
   1800          
   1801              if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
   1802                  ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
   1803                  a->len == b->len &&
   1804                  x509_memcasecmp( a->p, b->p, b->len ) == 0 )
   1805              {
   1806                  return( 0 );
   1807              }
   1808          
   1809              return( -1 );
   1810          }
   1811          
   1812          /*
   1813           * Compare two X.509 Names (aka rdnSequence).
   1814           *
   1815           * See RFC 5280 section 7.1, though we don't implement the whole algorithm:
   1816           * we sometimes return unequal when the full algorithm would return equal,
   1817           * but never the other way. (In particular, we don't do Unicode normalisation
   1818           * or space folding.)
   1819           *
   1820           * Return 0 if equal, -1 otherwise.
   1821           */

   \                                 In section .text, align 2, keep-with-next
   1822          static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
   1823          {
   \                     x509_name_cmp: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0xE001             B        ??x509_name_cmp_0
   1824              /* Avoid recursion, it might not be optimised by the compiler */
   1825              while( a != NULL || b != NULL )
   1826              {
   1827                  if( a == NULL || b == NULL )
   1828                      return( -1 );
   1829          
   1830                  /* type */
   1831                  if( a->oid.tag != b->oid.tag ||
   1832                      a->oid.len != b->oid.len ||
   1833                      memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
   1834                  {
   1835                      return( -1 );
   1836                  }
   1837          
   1838                  /* value */
   1839                  if( x509_string_cmp( &a->val, &b->val ) != 0 )
   1840                      return( -1 );
   1841          
   1842                  /* structure of the list of sets */
   1843                  if( a->next_merged != b->next_merged )
   1844                      return( -1 );
   1845          
   1846                  a = a->next;
   \                     ??x509_name_cmp_1: (+1)
   \   00000008   0x69AD             LDR      R5,[R5, #+24]
   1847                  b = b->next;
   \   0000000A   0x69A4             LDR      R4,[R4, #+24]
   \                     ??x509_name_cmp_0: (+1)
   \   0000000C   0x2D00             CMP      R5,#+0
   \   0000000E   0xD103             BNE      ??x509_name_cmp_2
   \   00000010   0x2C00             CMP      R4,#+0
   \   00000012   0xD145             BNE      ??x509_name_cmp_3
   1848              }
   1849          
   1850              /* a == NULL == b */
   1851              return( 0 );
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   \                     ??x509_name_cmp_2: (+1)
   \   00000018   0x2C00             CMP      R4,#+0
   \   0000001A   0xD041             BEQ      ??x509_name_cmp_3
   \   0000001C   0x6828             LDR      R0,[R5, #+0]
   \   0000001E   0x6821             LDR      R1,[R4, #+0]
   \   00000020   0x4288             CMP      R0,R1
   \   00000022   0xD13D             BNE      ??x509_name_cmp_3
   \   00000024   0x6862             LDR      R2,[R4, #+4]
   \   00000026   0x6868             LDR      R0,[R5, #+4]
   \   00000028   0x4290             CMP      R0,R2
   \   0000002A   0xD139             BNE      ??x509_name_cmp_3
   \   0000002C   0x68A1             LDR      R1,[R4, #+8]
   \   0000002E   0x68A8             LDR      R0,[R5, #+8]
   \   00000030   0x.... 0x....      BL       memcmp
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD133             BNE      ??x509_name_cmp_3
   \   00000038   0x68E7             LDR      R7,[R4, #+12]
   \   0000003A   0x68EE             LDR      R6,[R5, #+12]
   \   0000003C   0x42BE             CMP      R6,R7
   \   0000003E   0xD109             BNE      ??x509_name_cmp_4
   \   00000040   0x6922             LDR      R2,[R4, #+16]
   \   00000042   0x6928             LDR      R0,[R5, #+16]
   \   00000044   0x4290             CMP      R0,R2
   \   00000046   0xD105             BNE      ??x509_name_cmp_4
   \   00000048   0x6961             LDR      R1,[R4, #+20]
   \   0000004A   0x6968             LDR      R0,[R5, #+20]
   \   0000004C   0x.... 0x....      BL       memcmp
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD021             BEQ      ??x509_name_cmp_5
   \                     ??x509_name_cmp_4: (+1)
   \   00000054   0x2E0C             CMP      R6,#+12
   \   00000056   0xD001             BEQ      ??x509_name_cmp_6
   \   00000058   0x2E13             CMP      R6,#+19
   \   0000005A   0xD121             BNE      ??x509_name_cmp_3
   \                     ??x509_name_cmp_6: (+1)
   \   0000005C   0x2F0C             CMP      R7,#+12
   \   0000005E   0xD001             BEQ      ??x509_name_cmp_7
   \   00000060   0x2F13             CMP      R7,#+19
   \   00000062   0xD11D             BNE      ??x509_name_cmp_3
   \                     ??x509_name_cmp_7: (+1)
   \   00000064   0x6922             LDR      R2,[R4, #+16]
   \   00000066   0x6928             LDR      R0,[R5, #+16]
   \   00000068   0x4290             CMP      R0,R2
   \   0000006A   0xD119             BNE      ??x509_name_cmp_3
   \   0000006C   0x6963             LDR      R3,[R4, #+20]
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x6969             LDR      R1,[R5, #+20]
   \   00000072   0xE00F             B        ??x509_name_cmp_8
   \                     ??x509_name_cmp_9: (+1)
   \   00000074   0x780E             LDRB     R6,[R1, #+0]
   \   00000076   0x781F             LDRB     R7,[R3, #+0]
   \   00000078   0x4077             EORS     R7,R7,R6
   \   0000007A   0xD008             BEQ      ??x509_name_cmp_10
   \   0000007C   0x2F20             CMP      R7,#+32
   \   0000007E   0xD10F             BNE      ??x509_name_cmp_3
   \   00000080   0x0037             MOVS     R7,R6
   \   00000082   0x3F61             SUBS     R7,R7,#+97
   \   00000084   0x2F1A             CMP      R7,#+26
   \   00000086   0xD302             BCC      ??x509_name_cmp_10
   \   00000088   0x3E41             SUBS     R6,R6,#+65
   \   0000008A   0x2E1A             CMP      R6,#+26
   \   0000008C   0xD208             BCS      ??x509_name_cmp_3
   \                     ??x509_name_cmp_10: (+1)
   \   0000008E   0x1C40             ADDS     R0,R0,#+1
   \   00000090   0x1C5B             ADDS     R3,R3,#+1
   \   00000092   0x1C49             ADDS     R1,R1,#+1
   \                     ??x509_name_cmp_8: (+1)
   \   00000094   0x4290             CMP      R0,R2
   \   00000096   0xD3ED             BCC      ??x509_name_cmp_9
   \                     ??x509_name_cmp_5: (+1)
   \   00000098   0x7F28             LDRB     R0,[R5, #+28]
   \   0000009A   0x7F21             LDRB     R1,[R4, #+28]
   \   0000009C   0x4288             CMP      R0,R1
   \   0000009E   0xD0B3             BEQ      ??x509_name_cmp_1
   \                     ??x509_name_cmp_3: (+1)
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0x43C0             MVNS     R0,R0            ;; #-1
   \   000000A4   0xBDF2             POP      {R1,R4-R7,PC}
   1852          }
   1853          
   1854          /*
   1855           * Check if 'parent' is a suitable parent (signing CA) for 'child'.
   1856           * Return 0 if yes, -1 if not.
   1857           *
   1858           * top means parent is a locally-trusted certificate
   1859           * bottom means child is the end entity cert
   1860           */
   1861          static int x509_crt_check_parent( const mbedtls_x509_crt *child,
   1862                                            const mbedtls_x509_crt *parent,
   1863                                            int top, int bottom )
   1864          {
   1865              int need_ca_bit;
   1866          
   1867              /* Parent must be the issuer */
   1868              if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
   1869                  return( -1 );
   1870          
   1871              /* Parent must have the basicConstraints CA bit set as a general rule */
   1872              need_ca_bit = 1;
   1873          
   1874              /* Exception: v1/v2 certificates that are locally trusted. */
   1875              if( top && parent->version < 3 )
   1876                  need_ca_bit = 0;
   1877          
   1878              /* Exception: self-signed end-entity certs that are locally trusted. */
   1879              if( top && bottom &&
   1880                  child->raw.len == parent->raw.len &&
   1881                  memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
   1882              {
   1883                  need_ca_bit = 0;
   1884              }
   1885          
   1886              if( need_ca_bit && ! parent->ca_istrue )
   1887                  return( -1 );
   1888          
   1889          #if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
   1890              if( need_ca_bit &&
   1891                  mbedtls_x509_crt_check_key_usage( parent, MBEDTLS_X509_KU_KEY_CERT_SIGN ) != 0 )
   1892              {
   1893                  return( -1 );
   1894              }
   1895          #endif
   1896          
   1897              return( 0 );
   1898          }
   1899          

   \                                 In section .text, align 2, keep-with-next
   1900          static int x509_crt_verify_top(
   1901                          mbedtls_x509_crt *child, mbedtls_x509_crt *trust_ca,
   1902                          mbedtls_x509_crl *ca_crl,
   1903                          const mbedtls_x509_crt_profile *profile,
   1904                          int path_cnt, int self_cnt, uint32_t *flags,
   1905                          int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
   1906                          void *p_vrfy )
   1907          {
   \                     x509_crt_verify_top: (+1)
   \   00000000   0xB5FD             PUSH     {R0,R2-R7,LR}
   \   00000002   0xB09A             SUB      SP,SP,#+104
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9006             STR      R0,[SP, #+24]
   1908              int ret;
   1909              uint32_t ca_flags = 0;
   1910              int check_path_cnt;
   1911              unsigned char hash[MBEDTLS_MD_MAX_SIZE];
   1912              const mbedtls_md_info_t *md_info;
   1913              mbedtls_x509_crt *future_past_ca = NULL;
   \   0000000A   0x9008             STR      R0,[SP, #+32]
   \   0000000C   0x9F24             LDR      R7,[SP, #+144]
   \   0000000E   0x981A             LDR      R0,[SP, #+104]
   \   00000010   0x30A4             ADDS     R0,R0,#+164
   1914          
   1915              if( mbedtls_x509_time_is_past( &child->valid_to ) )
   \   00000012   0x.... 0x....      BL       mbedtls_x509_time_is_past
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD003             BEQ      ??x509_crt_verify_top_0
   1916                  *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
   \   0000001A   0x6838             LDR      R0,[R7, #+0]
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x4301             ORRS     R1,R1,R0
   \   00000020   0x6039             STR      R1,[R7, #+0]
   1917          
   1918              if( mbedtls_x509_time_is_future( &child->valid_from ) )
   \                     ??x509_crt_verify_top_0: (+1)
   \   00000022   0x981A             LDR      R0,[SP, #+104]
   \   00000024   0x308C             ADDS     R0,R0,#+140
   \   00000026   0x.... 0x....      BL       mbedtls_x509_time_is_future
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD004             BEQ      ??x509_crt_verify_top_1
   1919                  *flags |= MBEDTLS_X509_BADCERT_FUTURE;
   \   0000002E   0x6838             LDR      R0,[R7, #+0]
   \   00000030   0x2180             MOVS     R1,#+128
   \   00000032   0x0089             LSLS     R1,R1,#+2        ;; #+512
   \   00000034   0x4301             ORRS     R1,R1,R0
   \   00000036   0x6039             STR      R1,[R7, #+0]
   1920          
   1921              if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
   \                     ??x509_crt_verify_top_1: (+1)
   \   00000038   0x981A             LDR      R0,[SP, #+104]
   \   0000003A   0x2190             MOVS     R1,#+144
   \   0000003C   0x0049             LSLS     R1,R1,#+1        ;; #+288
   \   0000003E   0x1840             ADDS     R0,R0,R1
   \   00000040   0x9005             STR      R0,[SP, #+20]
   \   00000042   0x981C             LDR      R0,[SP, #+112]
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x9905             LDR      R1,[SP, #+20]
   \   00000048   0x7A09             LDRB     R1,[R1, #+8]
   \   0000004A   0x1E49             SUBS     R1,R1,#+1
   \   0000004C   0x40C8             LSRS     R0,R0,R1
   \   0000004E   0x07C0             LSLS     R0,R0,#+31
   \   00000050   0xD404             BMI      ??x509_crt_verify_top_2
   1922                  *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
   \   00000052   0x6838             LDR      R0,[R7, #+0]
   \   00000054   0x2180             MOVS     R1,#+128
   \   00000056   0x01C9             LSLS     R1,R1,#+7        ;; #+16384
   \   00000058   0x4301             ORRS     R1,R1,R0
   \   0000005A   0x6039             STR      R1,[R7, #+0]
   1923          
   1924              if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
   \                     ??x509_crt_verify_top_2: (+1)
   \   0000005C   0x981C             LDR      R0,[SP, #+112]
   \   0000005E   0x6840             LDR      R0,[R0, #+4]
   \   00000060   0x9905             LDR      R1,[SP, #+20]
   \   00000062   0x7A49             LDRB     R1,[R1, #+9]
   \   00000064   0x1E49             SUBS     R1,R1,#+1
   \   00000066   0x40C8             LSRS     R0,R0,R1
   \   00000068   0x07C0             LSLS     R0,R0,#+31
   \   0000006A   0xD404             BMI      ??x509_crt_verify_top_3
   1925                  *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
   \   0000006C   0x6838             LDR      R0,[R7, #+0]
   \   0000006E   0x2180             MOVS     R1,#+128
   \   00000070   0x0209             LSLS     R1,R1,#+8        ;; #+32768
   \   00000072   0x4301             ORRS     R1,R1,R0
   \   00000074   0x6039             STR      R1,[R7, #+0]
   1926          
   1927              /*
   1928               * Child is the top of the chain. Check against the trust_ca list.
   1929               */
   1930              *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
   \                     ??x509_crt_verify_top_3: (+1)
   \   00000076   0x6838             LDR      R0,[R7, #+0]
   \   00000078   0x2108             MOVS     R1,#+8
   \   0000007A   0x4301             ORRS     R1,R1,R0
   \   0000007C   0x6039             STR      R1,[R7, #+0]
   1931          
   1932              md_info = mbedtls_md_info_from_type( child->sig_md );
   \   0000007E   0x9805             LDR      R0,[SP, #+20]
   \   00000080   0x7A00             LDRB     R0,[R0, #+8]
   \   00000082   0x.... 0x....      BL       mbedtls_md_info_from_type
   \   00000086   0x9007             STR      R0,[SP, #+28]
   1933              if( md_info == NULL )
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD100             BNE      .+4
   \   0000008C   0xE07E             B        ??x509_crt_verify_top_4
   1934              {
   1935                  /*
   1936                   * Cannot check 'unknown', no need to try any CA
   1937                   */
   1938                  trust_ca = NULL;
   1939              }
   1940              else
   1941                  mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
   \   0000008E   0x981A             LDR      R0,[SP, #+104]
   \   00000090   0x1D00             ADDS     R0,R0,#+4
   \   00000092   0x9004             STR      R0,[SP, #+16]
   \   00000094   0xAB09             ADD      R3,SP,#+36
   \   00000096   0x68C2             LDR      R2,[R0, #+12]
   \   00000098   0x6901             LDR      R1,[R0, #+16]
   \   0000009A   0x9807             LDR      R0,[SP, #+28]
   \   0000009C   0x.... 0x....      BL       mbedtls_md
   \   000000A0   0xE072             B        ??x509_crt_verify_top_5
   1942          
   1943              for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
   1944              {
   1945                  if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
   \                     ??x509_crt_verify_top_6: (+1)
   \   000000A2   0x9822             LDR      R0,[SP, #+136]
   \   000000A4   0x1E45             SUBS     R5,R0,#+1
   \   000000A6   0x41AD             SBCS     R5,R5,R5
   \   000000A8   0x0FED             LSRS     R5,R5,#+31
   \   000000AA   0x0021             MOVS     R1,R4
   \   000000AC   0x316C             ADDS     R1,R1,#+108
   \   000000AE   0x981A             LDR      R0,[SP, #+104]
   \   000000B0   0x304C             ADDS     R0,R0,#+76
   \   000000B2   0x.... 0x....      BL       x509_name_cmp
   \   000000B6   0x2800             CMP      R0,#+0
   \   000000B8   0xD163             BNE      ??x509_crt_verify_top_7
   \   000000BA   0x2001             MOVS     R0,#+1
   \   000000BC   0x9000             STR      R0,[SP, #+0]
   \   000000BE   0x69A0             LDR      R0,[R4, #+24]
   \   000000C0   0x2803             CMP      R0,#+3
   \   000000C2   0xDA01             BGE      ??x509_crt_verify_top_8
   \   000000C4   0x2000             MOVS     R0,#+0
   \   000000C6   0x9000             STR      R0,[SP, #+0]
   \                     ??x509_crt_verify_top_8: (+1)
   \   000000C8   0x0026             MOVS     R6,R4
   \   000000CA   0x36F8             ADDS     R6,R6,#+248
   \   000000CC   0x2D00             CMP      R5,#+0
   \   000000CE   0xD00B             BEQ      ??x509_crt_verify_top_9
   \   000000D0   0x9804             LDR      R0,[SP, #+16]
   \   000000D2   0x6802             LDR      R2,[R0, #+0]
   \   000000D4   0x6860             LDR      R0,[R4, #+4]
   \   000000D6   0x4282             CMP      R2,R0
   \   000000D8   0xD106             BNE      ??x509_crt_verify_top_9
   \   000000DA   0x68A1             LDR      R1,[R4, #+8]
   \   000000DC   0x9804             LDR      R0,[SP, #+16]
   \   000000DE   0x6840             LDR      R0,[R0, #+4]
   \   000000E0   0x.... 0x....      BL       memcmp
   \   000000E4   0x2800             CMP      R0,#+0
   \   000000E6   0xD00F             BEQ      ??x509_crt_verify_top_10
   \                     ??x509_crt_verify_top_9: (+1)
   \   000000E8   0x9800             LDR      R0,[SP, #+0]
   \   000000EA   0x2800             CMP      R0,#+0
   \   000000EC   0xD00C             BEQ      ??x509_crt_verify_top_10
   \   000000EE   0x6870             LDR      R0,[R6, #+4]
   \   000000F0   0x2800             CMP      R0,#+0
   \   000000F2   0xD046             BEQ      ??x509_crt_verify_top_7
   \   000000F4   0x2004             MOVS     R0,#+4
   \   000000F6   0x6831             LDR      R1,[R6, #+0]
   \   000000F8   0x4001             ANDS     R1,R1,R0
   \   000000FA   0xD005             BEQ      ??x509_crt_verify_top_10
   \   000000FC   0x68F1             LDR      R1,[R6, #+12]
   \   000000FE   0x4008             ANDS     R0,R0,R1
   \   00000100   0xD03F             BEQ      ??x509_crt_verify_top_7
   \   00000102   0x....             LDR      R0,??DataTable84  ;; 0x8001
   \   00000104   0x4008             ANDS     R0,R0,R1
   \   00000106   0xD13C             BNE      ??x509_crt_verify_top_7
   1946                      continue;
   1947          
   1948                  check_path_cnt = path_cnt + 1;
   \                     ??x509_crt_verify_top_10: (+1)
   \   00000108   0x9D22             LDR      R5,[SP, #+136]
   \   0000010A   0x1C6D             ADDS     R5,R5,#+1
   1949          
   1950                  /*
   1951                   * Reduce check_path_cnt to check against if top of the chain is
   1952                   * the same as the trusted CA
   1953                   */
   1954                  if( child->subject_raw.len == trust_ca->subject_raw.len &&
   1955                      memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
   1956                                      child->issuer_raw.len ) == 0 )
   \   0000010C   0x9804             LDR      R0,[SP, #+16]
   \   0000010E   0x6C00             LDR      R0,[R0, #+64]
   \   00000110   0x6C61             LDR      R1,[R4, #+68]
   \   00000112   0x4288             CMP      R0,R1
   \   00000114   0xD108             BNE      ??x509_crt_verify_top_11
   \   00000116   0x9804             LDR      R0,[SP, #+16]
   \   00000118   0x6B42             LDR      R2,[R0, #+52]
   \   0000011A   0x6CA1             LDR      R1,[R4, #+72]
   \   0000011C   0x6C40             LDR      R0,[R0, #+68]
   \   0000011E   0x.... 0x....      BL       memcmp
   \   00000122   0x2800             CMP      R0,#+0
   \   00000124   0xD100             BNE      ??x509_crt_verify_top_11
   1957                  {
   1958                      check_path_cnt--;
   \   00000126   0x1E6D             SUBS     R5,R5,#+1
   1959                  }
   1960          
   1961                  /* Self signed certificates do not count towards the limit */
   1962                  if( trust_ca->max_pathlen > 0 &&
   1963                      trust_ca->max_pathlen < check_path_cnt - self_cnt )
   \                     ??x509_crt_verify_top_11: (+1)
   \   00000128   0x68B0             LDR      R0,[R6, #+8]
   \   0000012A   0x2801             CMP      R0,#+1
   \   0000012C   0xDB03             BLT      ??x509_crt_verify_top_12
   \   0000012E   0x9923             LDR      R1,[SP, #+140]
   \   00000130   0x1A69             SUBS     R1,R5,R1
   \   00000132   0x4288             CMP      R0,R1
   \   00000134   0xDB25             BLT      ??x509_crt_verify_top_7
   1964                  {
   1965                      continue;
   1966                  }
   1967          
   1968                  if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
   1969                                     child->sig_md, hash, mbedtls_md_get_size( md_info ),
   1970                                     child->sig.p, child->sig.len ) != 0 )
   \                     ??x509_crt_verify_top_12: (+1)
   \   00000136   0x9807             LDR      R0,[SP, #+28]
   \   00000138   0x.... 0x....      BL       mbedtls_md_get_size
   \   0000013C   0x9905             LDR      R1,[SP, #+20]
   \   0000013E   0x6809             LDR      R1,[R1, #+0]
   \   00000140   0x9103             STR      R1,[SP, #+12]
   \   00000142   0x9905             LDR      R1,[SP, #+20]
   \   00000144   0x6849             LDR      R1,[R1, #+4]
   \   00000146   0x9102             STR      R1,[SP, #+8]
   \   00000148   0x9001             STR      R0,[SP, #+4]
   \   0000014A   0xA809             ADD      R0,SP,#+36
   \   0000014C   0x9000             STR      R0,[SP, #+0]
   \   0000014E   0x9805             LDR      R0,[SP, #+20]
   \   00000150   0x7A03             LDRB     R3,[R0, #+8]
   \   00000152   0x0022             MOVS     R2,R4
   \   00000154   0x32BC             ADDS     R2,R2,#+188
   \   00000156   0x68C1             LDR      R1,[R0, #+12]
   \   00000158   0x7A40             LDRB     R0,[R0, #+9]
   \   0000015A   0x.... 0x....      BL       mbedtls_pk_verify_ext
   \   0000015E   0x2800             CMP      R0,#+0
   \   00000160   0xD10F             BNE      ??x509_crt_verify_top_7
   1971                  {
   1972                      continue;
   1973                  }
   1974          
   1975                  if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
   1976                      mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
   \   00000162   0x0020             MOVS     R0,R4
   \   00000164   0x30A4             ADDS     R0,R0,#+164
   \   00000166   0x.... 0x....      BL       mbedtls_x509_time_is_past
   \   0000016A   0x2800             CMP      R0,#+0
   \   0000016C   0xD105             BNE      ??x509_crt_verify_top_13
   \   0000016E   0x0020             MOVS     R0,R4
   \   00000170   0x308C             ADDS     R0,R0,#+140
   \   00000172   0x.... 0x....      BL       mbedtls_x509_time_is_future
   \   00000176   0x2800             CMP      R0,#+0
   \   00000178   0xD00B             BEQ      ??x509_crt_verify_top_14
   1977                  {
   1978                      if ( future_past_ca == NULL )
   \                     ??x509_crt_verify_top_13: (+1)
   \   0000017A   0x9808             LDR      R0,[SP, #+32]
   \   0000017C   0x2800             CMP      R0,#+0
   \   0000017E   0xD100             BNE      ??x509_crt_verify_top_7
   1979                          future_past_ca = trust_ca;
   \   00000180   0x9408             STR      R4,[SP, #+32]
   1980          
   1981                      continue;
   1982                  }
   1983          
   1984                  break;
   1985              }
   \                     ??x509_crt_verify_top_7: (+1)
   \   00000182   0x0020             MOVS     R0,R4
   \   00000184   0x30F8             ADDS     R0,R0,#+248
   \   00000186   0x6B84             LDR      R4,[R0, #+56]
   \                     ??x509_crt_verify_top_5: (+1)
   \   00000188   0x2C00             CMP      R4,#+0
   \   0000018A   0xD18A             BNE      ??x509_crt_verify_top_6
   \                     ??x509_crt_verify_top_4: (+1)
   \   0000018C   0x9C08             LDR      R4,[SP, #+32]
   \   0000018E   0x2C00             CMP      R4,#+0
   \   00000190   0xD066             BEQ      ??x509_crt_verify_top_15
   1986          
   1987              if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
   1988              {
   1989                  /*
   1990                   * Top of chain is signed by a trusted CA
   1991                   */
   1992                  *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
   \                     ??x509_crt_verify_top_14: (+1)
   \   00000192   0x6838             LDR      R0,[R7, #+0]
   \   00000194   0x2108             MOVS     R1,#+8
   \   00000196   0x4388             BICS     R0,R0,R1
   \   00000198   0x6038             STR      R0,[R7, #+0]
   1993          
   1994                  if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
   \   0000019A   0x9805             LDR      R0,[SP, #+20]
   \   0000019C   0x7A40             LDRB     R0,[R0, #+9]
   \   0000019E   0x2801             CMP      R0,#+1
   \   000001A0   0xD012             BEQ      ??x509_crt_verify_top_16
   \   000001A2   0x2806             CMP      R0,#+6
   \   000001A4   0xD010             BEQ      ??x509_crt_verify_top_16
   \   000001A6   0x2804             CMP      R0,#+4
   \   000001A8   0xD003             BEQ      ??x509_crt_verify_top_17
   \   000001AA   0x2802             CMP      R0,#+2
   \   000001AC   0xD001             BEQ      ??x509_crt_verify_top_17
   \   000001AE   0x2803             CMP      R0,#+3
   \   000001B0   0xD112             BNE      ??x509_crt_verify_top_18
   \                     ??x509_crt_verify_top_17: (+1)
   \   000001B2   0x981C             LDR      R0,[SP, #+112]
   \   000001B4   0x6880             LDR      R0,[R0, #+8]
   \   000001B6   0x0021             MOVS     R1,R4
   \   000001B8   0x3144             ADDS     R1,R1,#+68
   \   000001BA   0x6FC9             LDR      R1,[R1, #+124]
   \   000001BC   0x7809             LDRB     R1,[R1, #+0]
   \   000001BE   0x1E49             SUBS     R1,R1,#+1
   \   000001C0   0x40C8             LSRS     R0,R0,R1
   \   000001C2   0x07C0             LSLS     R0,R0,#+31
   \   000001C4   0xD40D             BMI      ??x509_crt_verify_top_19
   \   000001C6   0xE007             B        ??x509_crt_verify_top_18
   \                     ??x509_crt_verify_top_16: (+1)
   \   000001C8   0x0020             MOVS     R0,R4
   \   000001CA   0x30BC             ADDS     R0,R0,#+188
   \   000001CC   0x.... 0x....      BL       mbedtls_pk_get_bitlen
   \   000001D0   0x991C             LDR      R1,[SP, #+112]
   \   000001D2   0x68C9             LDR      R1,[R1, #+12]
   \   000001D4   0x4288             CMP      R0,R1
   \   000001D6   0xD204             BCS      ??x509_crt_verify_top_19
   1995                      *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   \                     ??x509_crt_verify_top_18: (+1)
   \   000001D8   0x6838             LDR      R0,[R7, #+0]
   \   000001DA   0x2180             MOVS     R1,#+128
   \   000001DC   0x0249             LSLS     R1,R1,#+9        ;; #+65536
   \   000001DE   0x4301             ORRS     R1,R1,R0
   \   000001E0   0x6039             STR      R1,[R7, #+0]
   1996              }
   1997          
   1998              /*
   1999               * If top of chain is not the same as the trusted CA send a verify request
   2000               * to the callback for any issues with validity and CRL presence for the
   2001               * trusted CA certificate.
   2002               */
   2003              if( trust_ca != NULL &&
   2004                  ( child->subject_raw.len != trust_ca->subject_raw.len ||
   2005                    memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
   2006                                      child->issuer_raw.len ) != 0 ) )
   \                     ??x509_crt_verify_top_19: (+1)
   \   000001E2   0x2C00             CMP      R4,#+0
   \   000001E4   0xD03C             BEQ      ??x509_crt_verify_top_15
   \   000001E6   0x0020             MOVS     R0,R4
   \   000001E8   0x3044             ADDS     R0,R0,#+68
   \   000001EA   0x991A             LDR      R1,[SP, #+104]
   \   000001EC   0x1D09             ADDS     R1,R1,#+4
   \   000001EE   0x9104             STR      R1,[SP, #+16]
   \   000001F0   0x6C09             LDR      R1,[R1, #+64]
   \   000001F2   0x6802             LDR      R2,[R0, #+0]
   \   000001F4   0x4291             CMP      R1,R2
   \   000001F6   0xD108             BNE      ??x509_crt_verify_top_20
   \   000001F8   0x9904             LDR      R1,[SP, #+16]
   \   000001FA   0x6B4A             LDR      R2,[R1, #+52]
   \   000001FC   0x6841             LDR      R1,[R0, #+4]
   \   000001FE   0x9804             LDR      R0,[SP, #+16]
   \   00000200   0x6C40             LDR      R0,[R0, #+68]
   \   00000202   0x.... 0x....      BL       memcmp
   \   00000206   0x2800             CMP      R0,#+0
   \   00000208   0xD02A             BEQ      ??x509_crt_verify_top_15
   2007              {
   2008          #if defined(MBEDTLS_X509_CRL_PARSE_C)
   2009                  /* Check trusted CA's CRL for the chain's top crt */
   2010                  *flags |= x509_crt_verifycrl( child, trust_ca, ca_crl, profile );
   \                     ??x509_crt_verify_top_20: (+1)
   \   0000020A   0x9B1C             LDR      R3,[SP, #+112]
   \   0000020C   0x9A1B             LDR      R2,[SP, #+108]
   \   0000020E   0x0021             MOVS     R1,R4
   \   00000210   0x981A             LDR      R0,[SP, #+104]
   \   00000212   0x.... 0x....      BL       x509_crt_verifycrl
   \   00000216   0x6839             LDR      R1,[R7, #+0]
   \   00000218   0x4308             ORRS     R0,R0,R1
   \   0000021A   0x6038             STR      R0,[R7, #+0]
   2011          #else
   2012                  ((void) ca_crl);
   2013          #endif
   2014          
   2015                  if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) )
   \   0000021C   0x0020             MOVS     R0,R4
   \   0000021E   0x30A4             ADDS     R0,R0,#+164
   \   00000220   0x.... 0x....      BL       mbedtls_x509_time_is_past
   \   00000224   0x2800             CMP      R0,#+0
   \   00000226   0xD003             BEQ      ??x509_crt_verify_top_21
   2016                      ca_flags |= MBEDTLS_X509_BADCERT_EXPIRED;
   \   00000228   0x9806             LDR      R0,[SP, #+24]
   \   0000022A   0x2101             MOVS     R1,#+1
   \   0000022C   0x4301             ORRS     R1,R1,R0
   \   0000022E   0x9106             STR      R1,[SP, #+24]
   2017          
   2018                  if( mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
   \                     ??x509_crt_verify_top_21: (+1)
   \   00000230   0x0020             MOVS     R0,R4
   \   00000232   0x308C             ADDS     R0,R0,#+140
   \   00000234   0x.... 0x....      BL       mbedtls_x509_time_is_future
   \   00000238   0x2800             CMP      R0,#+0
   \   0000023A   0xD004             BEQ      ??x509_crt_verify_top_22
   2019                      ca_flags |= MBEDTLS_X509_BADCERT_FUTURE;
   \   0000023C   0x9806             LDR      R0,[SP, #+24]
   \   0000023E   0x2180             MOVS     R1,#+128
   \   00000240   0x0089             LSLS     R1,R1,#+2        ;; #+512
   \   00000242   0x4301             ORRS     R1,R1,R0
   \   00000244   0x9106             STR      R1,[SP, #+24]
   2020          
   2021                  if( NULL != f_vrfy )
   \                     ??x509_crt_verify_top_22: (+1)
   \   00000246   0x9825             LDR      R0,[SP, #+148]
   \   00000248   0x2800             CMP      R0,#+0
   \   0000024A   0xD014             BEQ      ??x509_crt_verify_top_23
   2022                  {
   2023                      if( ( ret = f_vrfy( p_vrfy, trust_ca, path_cnt + 1,
   2024                                          &ca_flags ) ) != 0 )
   \   0000024C   0xAB06             ADD      R3,SP,#+24
   \   0000024E   0x9A22             LDR      R2,[SP, #+136]
   \   00000250   0x1C52             ADDS     R2,R2,#+1
   \   00000252   0x0021             MOVS     R1,R4
   \   00000254   0x9826             LDR      R0,[SP, #+152]
   \   00000256   0x9C25             LDR      R4,[SP, #+148]
   \   00000258   0x47A0             BLX      R4
   \   0000025A   0x2800             CMP      R0,#+0
   \   0000025C   0xD003             BEQ      ??x509_crt_verify_top_24
   2025                      {
   2026                          return( ret );
   \   0000025E   0xE00F             B        ??x509_crt_verify_top_25
   2027                      }
   2028                  }
   2029              }
   2030          
   2031              /* Call callback on top cert */
   2032              if( NULL != f_vrfy )
   \                     ??x509_crt_verify_top_15: (+1)
   \   00000260   0x9825             LDR      R0,[SP, #+148]
   \   00000262   0x2800             CMP      R0,#+0
   \   00000264   0xD007             BEQ      ??x509_crt_verify_top_23
   2033              {
   2034                  if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
   \                     ??x509_crt_verify_top_24: (+1)
   \   00000266   0x003B             MOVS     R3,R7
   \   00000268   0x9A22             LDR      R2,[SP, #+136]
   \   0000026A   0x991A             LDR      R1,[SP, #+104]
   \   0000026C   0x9826             LDR      R0,[SP, #+152]
   \   0000026E   0x9C25             LDR      R4,[SP, #+148]
   \   00000270   0x47A0             BLX      R4
   \   00000272   0x2800             CMP      R0,#+0
   \   00000274   0xD104             BNE      ??x509_crt_verify_top_25
   2035                      return( ret );
   2036              }
   2037          
   2038              *flags |= ca_flags;
   \                     ??x509_crt_verify_top_23: (+1)
   \   00000276   0x6838             LDR      R0,[R7, #+0]
   \   00000278   0x9906             LDR      R1,[SP, #+24]
   \   0000027A   0x4301             ORRS     R1,R1,R0
   \   0000027C   0x6039             STR      R1,[R7, #+0]
   2039          
   2040              return( 0 );
   \   0000027E   0x2000             MOVS     R0,#+0
   \                     ??x509_crt_verify_top_25: (+1)
   \   00000280   0xB01D             ADD      SP,SP,#+116
   \   00000282   0xBDF0             POP      {R4-R7,PC}       ;; return
   2041          }
   2042          

   \                                 In section .text, align 2, keep-with-next
   2043          static int x509_crt_verify_child(
   2044                          mbedtls_x509_crt *child, mbedtls_x509_crt *parent,
   2045                          mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
   2046                          const mbedtls_x509_crt_profile *profile,
   2047                          int path_cnt, int self_cnt, uint32_t *flags,
   2048                          int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
   2049                          void *p_vrfy )
   2050          {
   \                     x509_crt_verify_child: (+1)
   \   00000000   0xB5FF             PUSH     {R0-R7,LR}
   \   00000002   0xB099             SUB      SP,SP,#+100
   2051              int ret;
   2052              uint32_t parent_flags = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9007             STR      R0,[SP, #+28]
   2053              unsigned char hash[MBEDTLS_MD_MAX_SIZE];
   2054              mbedtls_x509_crt *grandparent;
   2055              const mbedtls_md_info_t *md_info;
   2056          
   2057              /* Counting intermediate self signed certificates */
   2058              if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
   \   00000008   0x9823             LDR      R0,[SP, #+140]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD00A             BEQ      ??x509_crt_verify_child_0
   \   0000000E   0x9919             LDR      R1,[SP, #+100]
   \   00000010   0x316C             ADDS     R1,R1,#+108
   \   00000012   0x9819             LDR      R0,[SP, #+100]
   \   00000014   0x304C             ADDS     R0,R0,#+76
   \   00000016   0x.... 0x....      BL       x509_name_cmp
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD102             BNE      ??x509_crt_verify_child_0
   2059                  self_cnt++;
   \   0000001E   0x9824             LDR      R0,[SP, #+144]
   \   00000020   0x1C40             ADDS     R0,R0,#+1
   \   00000022   0x9024             STR      R0,[SP, #+144]
   2060          
   2061              /* path_cnt is 0 for the first intermediate CA */
   2062              if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
   \                     ??x509_crt_verify_child_0: (+1)
   \   00000024   0x9823             LDR      R0,[SP, #+140]
   \   00000026   0x1C40             ADDS     R0,R0,#+1
   \   00000028   0x9006             STR      R0,[SP, #+24]
   \   0000002A   0x2809             CMP      R0,#+9
   \   0000002C   0xDB01             BLT      ??x509_crt_verify_child_1
   2063              {
   2064                  /* return immediately as the goal is to avoid unbounded recursion */
   2065                  return( MBEDTLS_ERR_X509_FATAL_ERROR );
   \   0000002E   0x....             LDR      R0,??DataTable85  ;; 0xffffd000
   \   00000030   0xE10D             B        ??x509_crt_verify_child_2
   2066              }
   2067          
   2068              if( mbedtls_x509_time_is_past( &child->valid_to ) )
   \                     ??x509_crt_verify_child_1: (+1)
   \   00000032   0x2501             MOVS     R5,#+1
   \   00000034   0x9F25             LDR      R7,[SP, #+148]
   \   00000036   0x9819             LDR      R0,[SP, #+100]
   \   00000038   0x30A4             ADDS     R0,R0,#+164
   \   0000003A   0x.... 0x....      BL       mbedtls_x509_time_is_past
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD002             BEQ      ??x509_crt_verify_child_3
   2069                  *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
   \   00000042   0x6838             LDR      R0,[R7, #+0]
   \   00000044   0x4328             ORRS     R0,R0,R5
   \   00000046   0x6038             STR      R0,[R7, #+0]
   2070          
   2071              if( mbedtls_x509_time_is_future( &child->valid_from ) )
   \                     ??x509_crt_verify_child_3: (+1)
   \   00000048   0x9819             LDR      R0,[SP, #+100]
   \   0000004A   0x308C             ADDS     R0,R0,#+140
   \   0000004C   0x.... 0x....      BL       mbedtls_x509_time_is_future
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD003             BEQ      ??x509_crt_verify_child_4
   2072                  *flags |= MBEDTLS_X509_BADCERT_FUTURE;
   \   00000054   0x6838             LDR      R0,[R7, #+0]
   \   00000056   0x0269             LSLS     R1,R5,#+9
   \   00000058   0x4301             ORRS     R1,R1,R0
   \   0000005A   0x6039             STR      R1,[R7, #+0]
   2073          
   2074              if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
   \                     ??x509_crt_verify_child_4: (+1)
   \   0000005C   0x9819             LDR      R0,[SP, #+100]
   \   0000005E   0x2190             MOVS     R1,#+144
   \   00000060   0x0049             LSLS     R1,R1,#+1        ;; #+288
   \   00000062   0x1844             ADDS     R4,R0,R1
   \   00000064   0x9822             LDR      R0,[SP, #+136]
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x7A21             LDRB     R1,[R4, #+8]
   \   0000006A   0x1E49             SUBS     R1,R1,#+1
   \   0000006C   0x40C8             LSRS     R0,R0,R1
   \   0000006E   0x4028             ANDS     R0,R0,R5
   \   00000070   0xD103             BNE      ??x509_crt_verify_child_5
   2075                  *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
   \   00000072   0x6838             LDR      R0,[R7, #+0]
   \   00000074   0x03A9             LSLS     R1,R5,#+14
   \   00000076   0x4301             ORRS     R1,R1,R0
   \   00000078   0x6039             STR      R1,[R7, #+0]
   2076          
   2077              if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
   \                     ??x509_crt_verify_child_5: (+1)
   \   0000007A   0x9822             LDR      R0,[SP, #+136]
   \   0000007C   0x6840             LDR      R0,[R0, #+4]
   \   0000007E   0x7A61             LDRB     R1,[R4, #+9]
   \   00000080   0x1E49             SUBS     R1,R1,#+1
   \   00000082   0x40C8             LSRS     R0,R0,R1
   \   00000084   0x4028             ANDS     R0,R0,R5
   \   00000086   0xD103             BNE      ??x509_crt_verify_child_6
   2078                  *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
   \   00000088   0x6838             LDR      R0,[R7, #+0]
   \   0000008A   0x03E9             LSLS     R1,R5,#+15
   \   0000008C   0x4301             ORRS     R1,R1,R0
   \   0000008E   0x6039             STR      R1,[R7, #+0]
   2079          
   2080              md_info = mbedtls_md_info_from_type( child->sig_md );
   \                     ??x509_crt_verify_child_6: (+1)
   \   00000090   0x7A20             LDRB     R0,[R4, #+8]
   \   00000092   0x.... 0x....      BL       mbedtls_md_info_from_type
   \   00000096   0x0006             MOVS     R6,R0
   2081              if( md_info == NULL )
   \   00000098   0xD03D             BEQ      ??x509_crt_verify_child_7
   2082              {
   2083                  /*
   2084                   * Cannot check 'unknown' hash
   2085                   */
   2086                  *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
   2087              }
   2088              else
   2089              {
   2090                  mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
   \   0000009A   0x9819             LDR      R0,[SP, #+100]
   \   0000009C   0x3010             ADDS     R0,R0,#+16
   \   0000009E   0xAB08             ADD      R3,SP,#+32
   \   000000A0   0x6802             LDR      R2,[R0, #+0]
   \   000000A2   0x6841             LDR      R1,[R0, #+4]
   \   000000A4   0x0030             MOVS     R0,R6
   \   000000A6   0x.... 0x....      BL       mbedtls_md
   2091          
   2092                  if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
   \   000000AA   0x7A60             LDRB     R0,[R4, #+9]
   \   000000AC   0x2801             CMP      R0,#+1
   \   000000AE   0xD012             BEQ      ??x509_crt_verify_child_8
   \   000000B0   0x2806             CMP      R0,#+6
   \   000000B2   0xD010             BEQ      ??x509_crt_verify_child_8
   \   000000B4   0x2804             CMP      R0,#+4
   \   000000B6   0xD003             BEQ      ??x509_crt_verify_child_9
   \   000000B8   0x2802             CMP      R0,#+2
   \   000000BA   0xD001             BEQ      ??x509_crt_verify_child_9
   \   000000BC   0x2803             CMP      R0,#+3
   \   000000BE   0xD112             BNE      ??x509_crt_verify_child_10
   \                     ??x509_crt_verify_child_9: (+1)
   \   000000C0   0x9822             LDR      R0,[SP, #+136]
   \   000000C2   0x6880             LDR      R0,[R0, #+8]
   \   000000C4   0x991A             LDR      R1,[SP, #+104]
   \   000000C6   0x22C0             MOVS     R2,#+192
   \   000000C8   0x5889             LDR      R1,[R1, R2]
   \   000000CA   0x7809             LDRB     R1,[R1, #+0]
   \   000000CC   0x1E49             SUBS     R1,R1,#+1
   \   000000CE   0x40C8             LSRS     R0,R0,R1
   \   000000D0   0x4005             ANDS     R5,R5,R0
   \   000000D2   0xD10D             BNE      ??x509_crt_verify_child_11
   \   000000D4   0xE007             B        ??x509_crt_verify_child_10
   \                     ??x509_crt_verify_child_8: (+1)
   \   000000D6   0x981A             LDR      R0,[SP, #+104]
   \   000000D8   0x30BC             ADDS     R0,R0,#+188
   \   000000DA   0x.... 0x....      BL       mbedtls_pk_get_bitlen
   \   000000DE   0x9922             LDR      R1,[SP, #+136]
   \   000000E0   0x68C9             LDR      R1,[R1, #+12]
   \   000000E2   0x4288             CMP      R0,R1
   \   000000E4   0xD204             BCS      ??x509_crt_verify_child_11
   2093                      *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   \                     ??x509_crt_verify_child_10: (+1)
   \   000000E6   0x6838             LDR      R0,[R7, #+0]
   \   000000E8   0x2180             MOVS     R1,#+128
   \   000000EA   0x0249             LSLS     R1,R1,#+9        ;; #+65536
   \   000000EC   0x4301             ORRS     R1,R1,R0
   \   000000EE   0x6039             STR      R1,[R7, #+0]
   2094          
   2095                  if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
   2096                                     child->sig_md, hash, mbedtls_md_get_size( md_info ),
   2097                                     child->sig.p, child->sig.len ) != 0 )
   \                     ??x509_crt_verify_child_11: (+1)
   \   000000F0   0x0030             MOVS     R0,R6
   \   000000F2   0x.... 0x....      BL       mbedtls_md_get_size
   \   000000F6   0x6821             LDR      R1,[R4, #+0]
   \   000000F8   0x9103             STR      R1,[SP, #+12]
   \   000000FA   0x6861             LDR      R1,[R4, #+4]
   \   000000FC   0x9102             STR      R1,[SP, #+8]
   \   000000FE   0x9001             STR      R0,[SP, #+4]
   \   00000100   0xA808             ADD      R0,SP,#+32
   \   00000102   0x9000             STR      R0,[SP, #+0]
   \   00000104   0x7A23             LDRB     R3,[R4, #+8]
   \   00000106   0x9A1A             LDR      R2,[SP, #+104]
   \   00000108   0x32BC             ADDS     R2,R2,#+188
   \   0000010A   0x68E1             LDR      R1,[R4, #+12]
   \   0000010C   0x7A60             LDRB     R0,[R4, #+9]
   \   0000010E   0x.... 0x....      BL       mbedtls_pk_verify_ext
   \   00000112   0x2800             CMP      R0,#+0
   \   00000114   0xD003             BEQ      ??x509_crt_verify_child_12
   2098                  {
   2099                      *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
   \                     ??x509_crt_verify_child_7: (+1)
   \   00000116   0x6838             LDR      R0,[R7, #+0]
   \   00000118   0x2108             MOVS     R1,#+8
   \   0000011A   0x4301             ORRS     R1,R1,R0
   \   0000011C   0x6039             STR      R1,[R7, #+0]
   2100                  }
   2101              }
   2102          
   2103          #if defined(MBEDTLS_X509_CRL_PARSE_C)
   2104              /* Check trusted CA's CRL for the given crt */
   2105              *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
   \                     ??x509_crt_verify_child_12: (+1)
   \   0000011E   0x9B22             LDR      R3,[SP, #+136]
   \   00000120   0x9A1C             LDR      R2,[SP, #+112]
   \   00000122   0x991A             LDR      R1,[SP, #+104]
   \   00000124   0x9819             LDR      R0,[SP, #+100]
   \   00000126   0x.... 0x....      BL       x509_crt_verifycrl
   \   0000012A   0x6839             LDR      R1,[R7, #+0]
   \   0000012C   0x4308             ORRS     R0,R0,R1
   \   0000012E   0x6038             STR      R0,[R7, #+0]
   2106          #endif
   2107          
   2108              /* Look for a grandparent in trusted CAs */
   2109              for( grandparent = trust_ca;
   \   00000130   0x9C1B             LDR      R4,[SP, #+108]
   \   00000132   0x2604             MOVS     R6,#+4
   \   00000134   0xE000             B        ??x509_crt_verify_child_13
   2110                   grandparent != NULL;
   2111                   grandparent = grandparent->next )
   \                     ??x509_crt_verify_child_14: (+1)
   \   00000136   0x6BAC             LDR      R4,[R5, #+56]
   \                     ??x509_crt_verify_child_13: (+1)
   \   00000138   0x2C00             CMP      R4,#+0
   \   0000013A   0xD033             BEQ      ??x509_crt_verify_child_15
   \   0000013C   0x0025             MOVS     R5,R4
   \   0000013E   0x35F8             ADDS     R5,R5,#+248
   \   00000140   0x0021             MOVS     R1,R4
   \   00000142   0x316C             ADDS     R1,R1,#+108
   \   00000144   0x981A             LDR      R0,[SP, #+104]
   \   00000146   0x304C             ADDS     R0,R0,#+76
   \   00000148   0x.... 0x....      BL       x509_name_cmp
   \   0000014C   0x2800             CMP      R0,#+0
   \   0000014E   0xD1F2             BNE      ??x509_crt_verify_child_14
   \   00000150   0x6868             LDR      R0,[R5, #+4]
   \   00000152   0x2800             CMP      R0,#+0
   \   00000154   0xD0EF             BEQ      ??x509_crt_verify_child_14
   \   00000156   0x6828             LDR      R0,[R5, #+0]
   \   00000158   0x4030             ANDS     R0,R0,R6
   \   0000015A   0xD005             BEQ      ??x509_crt_verify_child_16
   \   0000015C   0x68E8             LDR      R0,[R5, #+12]
   \   0000015E   0x4230             TST      R0,R6
   \   00000160   0xD0E9             BEQ      ??x509_crt_verify_child_14
   \   00000162   0x....             LDR      R1,??DataTable85_1  ;; 0x8001
   \   00000164   0x4001             ANDS     R1,R1,R0
   \   00000166   0xD1E6             BNE      ??x509_crt_verify_child_14
   2112              {
   2113                  if( x509_crt_check_parent( parent, grandparent,
   2114                                             0, path_cnt == 0 ) == 0 )
   2115                      break;
   2116              }
   2117          
   2118              if( grandparent != NULL )
   2119              {
   2120                  ret = x509_crt_verify_top( parent, grandparent, ca_crl, profile,
   2121                                          path_cnt + 1, self_cnt, &parent_flags, f_vrfy, p_vrfy );
   \                     ??x509_crt_verify_child_16: (+1)
   \   00000168   0x9827             LDR      R0,[SP, #+156]
   \   0000016A   0x9004             STR      R0,[SP, #+16]
   \   0000016C   0x9826             LDR      R0,[SP, #+152]
   \   0000016E   0x9003             STR      R0,[SP, #+12]
   \   00000170   0xA807             ADD      R0,SP,#+28
   \   00000172   0x9002             STR      R0,[SP, #+8]
   \   00000174   0x9824             LDR      R0,[SP, #+144]
   \   00000176   0x9001             STR      R0,[SP, #+4]
   \   00000178   0x9806             LDR      R0,[SP, #+24]
   \   0000017A   0x9000             STR      R0,[SP, #+0]
   \   0000017C   0x9B22             LDR      R3,[SP, #+136]
   \   0000017E   0x9A1C             LDR      R2,[SP, #+112]
   \   00000180   0x0021             MOVS     R1,R4
   \   00000182   0x981A             LDR      R0,[SP, #+104]
   \   00000184   0x.... 0x....      BL       x509_crt_verify_top
   2122                  if( ret != 0 )
   \   00000188   0x2800             CMP      R0,#+0
   \   0000018A   0xD160             BNE      ??x509_crt_verify_child_2
   2123                      return( ret );
   2124              }
   2125              else
   2126              {
   2127                  /* Look for a grandparent upwards the chain */
   2128                  for( grandparent = parent->next;
   2129                       grandparent != NULL;
   2130                       grandparent = grandparent->next )
   2131                  {
   2132                      /* +2 because the current step is not yet accounted for
   2133                       * and because max_pathlen is one higher than it should be.
   2134                       * Also self signed certificates do not count to the limit. */
   2135                      if( grandparent->max_pathlen > 0 &&
   2136                          grandparent->max_pathlen < 2 + path_cnt - self_cnt )
   2137                      {
   2138                          continue;
   2139                      }
   2140          
   2141                      if( x509_crt_check_parent( parent, grandparent,
   2142                                                 0, path_cnt == 0 ) == 0 )
   2143                          break;
   2144                  }
   2145          
   2146                  /* Is our parent part of the chain or at the top? */
   2147                  if( grandparent != NULL )
   2148                  {
   2149                      ret = x509_crt_verify_child( parent, grandparent, trust_ca, ca_crl,
   2150                                                   profile, path_cnt + 1, self_cnt, &parent_flags,
   2151                                                   f_vrfy, p_vrfy );
   2152                      if( ret != 0 )
   2153                          return( ret );
   2154                  }
   2155                  else
   2156                  {
   2157                      ret = x509_crt_verify_top( parent, trust_ca, ca_crl, profile,
   2158                                                 path_cnt + 1, self_cnt, &parent_flags,
   2159                                                 f_vrfy, p_vrfy );
   2160                      if( ret != 0 )
   2161                          return( ret );
   2162                  }
   2163              }
   2164          
   2165              /* child is verified to be a child of the parent, call verify callback */
   2166              if( NULL != f_vrfy )
   \                     ??x509_crt_verify_child_17: (+1)
   \   0000018C   0x9826             LDR      R0,[SP, #+152]
   \   0000018E   0x2800             CMP      R0,#+0
   \   00000190   0xD058             BEQ      ??x509_crt_verify_child_18
   2167                  if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
   \   00000192   0x003B             MOVS     R3,R7
   \   00000194   0x9A23             LDR      R2,[SP, #+140]
   \   00000196   0x9919             LDR      R1,[SP, #+100]
   \   00000198   0x9827             LDR      R0,[SP, #+156]
   \   0000019A   0x9C26             LDR      R4,[SP, #+152]
   \   0000019C   0x47A0             BLX      R4
   \   0000019E   0x2800             CMP      R0,#+0
   \   000001A0   0xD050             BEQ      ??x509_crt_verify_child_18
   2168                      return( ret );
   \   000001A2   0xE054             B        ??x509_crt_verify_child_2
   \                     ??x509_crt_verify_child_15: (+1)
   \   000001A4   0x981A             LDR      R0,[SP, #+104]
   \   000001A6   0x30C0             ADDS     R0,R0,#+192
   \   000001A8   0x6F04             LDR      R4,[R0, #+112]
   \   000001AA   0x9823             LDR      R0,[SP, #+140]
   \   000001AC   0x1C80             ADDS     R0,R0,#+2
   \   000001AE   0x9924             LDR      R1,[SP, #+144]
   \   000001B0   0x1A40             SUBS     R0,R0,R1
   \   000001B2   0x9000             STR      R0,[SP, #+0]
   \   000001B4   0xE000             B        ??x509_crt_verify_child_19
   \                     ??x509_crt_verify_child_20: (+1)
   \   000001B6   0x6BAC             LDR      R4,[R5, #+56]
   \                     ??x509_crt_verify_child_19: (+1)
   \   000001B8   0x2C00             CMP      R4,#+0
   \   000001BA   0xD030             BEQ      ??x509_crt_verify_child_21
   \   000001BC   0x0025             MOVS     R5,R4
   \   000001BE   0x35F8             ADDS     R5,R5,#+248
   \   000001C0   0x68A8             LDR      R0,[R5, #+8]
   \   000001C2   0x2801             CMP      R0,#+1
   \   000001C4   0xDB02             BLT      ??x509_crt_verify_child_22
   \   000001C6   0x9900             LDR      R1,[SP, #+0]
   \   000001C8   0x4288             CMP      R0,R1
   \   000001CA   0xDBF4             BLT      ??x509_crt_verify_child_20
   \                     ??x509_crt_verify_child_22: (+1)
   \   000001CC   0x0021             MOVS     R1,R4
   \   000001CE   0x316C             ADDS     R1,R1,#+108
   \   000001D0   0x981A             LDR      R0,[SP, #+104]
   \   000001D2   0x304C             ADDS     R0,R0,#+76
   \   000001D4   0x.... 0x....      BL       x509_name_cmp
   \   000001D8   0x2800             CMP      R0,#+0
   \   000001DA   0xD1EC             BNE      ??x509_crt_verify_child_20
   \   000001DC   0x6868             LDR      R0,[R5, #+4]
   \   000001DE   0x2800             CMP      R0,#+0
   \   000001E0   0xD0E9             BEQ      ??x509_crt_verify_child_20
   \   000001E2   0x6828             LDR      R0,[R5, #+0]
   \   000001E4   0x4030             ANDS     R0,R0,R6
   \   000001E6   0xD005             BEQ      ??x509_crt_verify_child_23
   \   000001E8   0x68E8             LDR      R0,[R5, #+12]
   \   000001EA   0x4230             TST      R0,R6
   \   000001EC   0xD0E3             BEQ      ??x509_crt_verify_child_20
   \   000001EE   0x....             LDR      R1,??DataTable85_1  ;; 0x8001
   \   000001F0   0x4001             ANDS     R1,R1,R0
   \   000001F2   0xD1E0             BNE      ??x509_crt_verify_child_20
   \                     ??x509_crt_verify_child_23: (+1)
   \   000001F4   0x9827             LDR      R0,[SP, #+156]
   \   000001F6   0x9005             STR      R0,[SP, #+20]
   \   000001F8   0x9826             LDR      R0,[SP, #+152]
   \   000001FA   0x9004             STR      R0,[SP, #+16]
   \   000001FC   0xA807             ADD      R0,SP,#+28
   \   000001FE   0x9003             STR      R0,[SP, #+12]
   \   00000200   0x9824             LDR      R0,[SP, #+144]
   \   00000202   0x9002             STR      R0,[SP, #+8]
   \   00000204   0x9806             LDR      R0,[SP, #+24]
   \   00000206   0x9001             STR      R0,[SP, #+4]
   \   00000208   0x9822             LDR      R0,[SP, #+136]
   \   0000020A   0x9000             STR      R0,[SP, #+0]
   \   0000020C   0x9B1C             LDR      R3,[SP, #+112]
   \   0000020E   0x9A1B             LDR      R2,[SP, #+108]
   \   00000210   0x0021             MOVS     R1,R4
   \   00000212   0x981A             LDR      R0,[SP, #+104]
   \   00000214   0xF7FF 0xFEF4      BL       x509_crt_verify_child
   \   00000218   0x2800             CMP      R0,#+0
   \   0000021A   0xD118             BNE      ??x509_crt_verify_child_2
   \   0000021C   0xE7B6             B        ??x509_crt_verify_child_17
   \                     ??x509_crt_verify_child_21: (+1)
   \   0000021E   0x9827             LDR      R0,[SP, #+156]
   \   00000220   0x9004             STR      R0,[SP, #+16]
   \   00000222   0x9826             LDR      R0,[SP, #+152]
   \   00000224   0x9003             STR      R0,[SP, #+12]
   \   00000226   0xA807             ADD      R0,SP,#+28
   \   00000228   0x9002             STR      R0,[SP, #+8]
   \   0000022A   0x9824             LDR      R0,[SP, #+144]
   \   0000022C   0x9001             STR      R0,[SP, #+4]
   \   0000022E   0x9806             LDR      R0,[SP, #+24]
   \   00000230   0x9000             STR      R0,[SP, #+0]
   \   00000232   0x9B22             LDR      R3,[SP, #+136]
   \   00000234   0x9A1C             LDR      R2,[SP, #+112]
   \   00000236   0x991B             LDR      R1,[SP, #+108]
   \   00000238   0x981A             LDR      R0,[SP, #+104]
   \   0000023A   0x.... 0x....      BL       x509_crt_verify_top
   \   0000023E   0x2800             CMP      R0,#+0
   \   00000240   0xD0A4             BEQ      ??x509_crt_verify_child_17
   \   00000242   0xE004             B        ??x509_crt_verify_child_2
   2169          
   2170              *flags |= parent_flags;
   \                     ??x509_crt_verify_child_18: (+1)
   \   00000244   0x6838             LDR      R0,[R7, #+0]
   \   00000246   0x9907             LDR      R1,[SP, #+28]
   \   00000248   0x4301             ORRS     R1,R1,R0
   \   0000024A   0x6039             STR      R1,[R7, #+0]
   2171          
   2172              return( 0 );
   \   0000024C   0x2000             MOVS     R0,#+0
   \                     ??x509_crt_verify_child_2: (+1)
   \   0000024E   0xB01D             ADD      SP,SP,#+116
   \   00000250   0xBDF0             POP      {R4-R7,PC}       ;; return
   2173          }
   2174          
   2175          /*
   2176           * Verify the certificate validity
   2177           */

   \                                 In section .text, align 4, keep-with-next
   2178          int mbedtls_x509_crt_verify( mbedtls_x509_crt *crt,
   2179                               mbedtls_x509_crt *trust_ca,
   2180                               mbedtls_x509_crl *ca_crl,
   2181                               const char *cn, uint32_t *flags,
   2182                               int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
   2183                               void *p_vrfy )
   2184          {
   \                     mbedtls_x509_crt_verify: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   2185              return( mbedtls_x509_crt_verify_with_profile( crt, trust_ca, ca_crl,
   2186                          &mbedtls_x509_crt_profile_default, cn, flags, f_vrfy, p_vrfy ) );
   \   00000004   0x9C08             LDR      R4,[SP, #+32]
   \   00000006   0x9403             STR      R4,[SP, #+12]
   \   00000008   0x9C07             LDR      R4,[SP, #+28]
   \   0000000A   0x9402             STR      R4,[SP, #+8]
   \   0000000C   0x9C06             LDR      R4,[SP, #+24]
   \   0000000E   0x9401             STR      R4,[SP, #+4]
   \   00000010   0x9300             STR      R3,[SP, #+0]
   \   00000012   0xBF00             Nop      
   \   00000014   0x....             ADR.N    R3,mbedtls_x509_crt_profile_default
   \   00000016   0x.... 0x....      BL       mbedtls_x509_crt_verify_with_profile
   \   0000001A   0xB004             ADD      SP,SP,#+16
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
   2187          }
   2188          
   2189          
   2190          /*
   2191           * Verify the certificate validity, with profile
   2192           */

   \                                 In section .text, align 4, keep-with-next
   2193          int mbedtls_x509_crt_verify_with_profile( mbedtls_x509_crt *crt,
   2194                               mbedtls_x509_crt *trust_ca,
   2195                               mbedtls_x509_crl *ca_crl,
   2196                               const mbedtls_x509_crt_profile *profile,
   2197                               const char *cn, uint32_t *flags,
   2198                               int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
   2199                               void *p_vrfy )
   2200          {
   \                     mbedtls_x509_crt_verify_with_profile: (+1)
   \   00000000   0xB5FF             PUSH     {R0-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9911             LDR      R1,[SP, #+68]
   \   00000008   0x6008             STR      R0,[R1, #+0]
   2201              size_t cn_len;
   2202              int ret;
   2203              int pathlen = 0, selfsigned = 0;
   2204              mbedtls_x509_crt *parent;
   2205              mbedtls_x509_name *name;
   2206              mbedtls_x509_sequence *cur = NULL;
   2207              mbedtls_pk_type_t pk_type;
   2208          
   2209              *flags = 0;
   2210          
   2211              if( profile == NULL )
   \   0000000A   0x980A             LDR      R0,[SP, #+40]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD101             BNE      ??mbedtls_x509_crt_verify_with_profile_0
   2212              {
   2213                  ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
   \   00000010   0x49B3             LDR      R1,??mbedtls_x509_crt_verify_with_profile_1  ;; 0xffffd800
   2214                  goto exit;
   \   00000012   0xE157             B        ??mbedtls_x509_crt_verify_with_profile_2
   2215              }
   \                     ??mbedtls_x509_crt_verify_with_profile_0: (+1)
   \   00000014   0x9E10             LDR      R6,[SP, #+64]
   2216          
   2217              if( cn != NULL )
   \   00000016   0x2E00             CMP      R6,#+0
   \   00000018   0xD100             BNE      .+4
   \   0000001A   0xE0B0             B        ??mbedtls_x509_crt_verify_with_profile_3
   2218              {
   2219                  name = &crt->subject;
   \   0000001C   0x9C07             LDR      R4,[SP, #+28]
   \   0000001E   0x346C             ADDS     R4,R4,#+108
   2220                  cn_len = strlen( cn );
   \   00000020   0x0030             MOVS     R0,R6
   \   00000022   0x.... 0x....      BL       strlen
   \   00000026   0x0007             MOVS     R7,R0
   2221          
   2222                  if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
   \   00000028   0x9807             LDR      R0,[SP, #+28]
   \   0000002A   0x30C0             ADDS     R0,R0,#+192
   \   0000002C   0x2138             MOVS     R1,#+56
   \   0000002E   0x5C40             LDRB     R0,[R0, R1]
   \   00000030   0x0680             LSLS     R0,R0,#+26
   \   00000032   0xD561             BPL      ??mbedtls_x509_crt_verify_with_profile_4
   2223                  {
   2224                      cur = &crt->subject_alt_names;
   \   00000034   0x9C07             LDR      R4,[SP, #+28]
   \   00000036   0x34E8             ADDS     R4,R4,#+232
   \   00000038   0xE015             B        ??mbedtls_x509_crt_verify_with_profile_5
   2225          
   2226                      while( cur != NULL )
   2227                      {
   2228                          if( cur->buf.len == cn_len &&
   2229                              x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
   2230                              break;
   2231          
   2232                          if( cur->buf.len > 2 &&
   2233                              memcmp( cur->buf.p, "*.", 2 ) == 0 &&
   2234                              x509_check_wildcard( cn, &cur->buf ) == 0 )
   \                     ??mbedtls_x509_crt_verify_with_profile_6: (+1)
   \   0000003A   0x1C49             ADDS     R1,R1,#+1
   \   0000003C   0x1C52             ADDS     R2,R2,#+1
   \                     ??mbedtls_x509_crt_verify_with_profile_7: (+1)
   \   0000003E   0x4281             CMP      R1,R0
   \   00000040   0xD210             BCS      ??mbedtls_x509_crt_verify_with_profile_8
   \   00000042   0x7813             LDRB     R3,[R2, #+0]
   \   00000044   0x2B2E             CMP      R3,#+46
   \   00000046   0xD1F8             BNE      ??mbedtls_x509_crt_verify_with_profile_6
   \   00000048   0x2900             CMP      R1,#+0
   \   0000004A   0xD00B             BEQ      ??mbedtls_x509_crt_verify_with_profile_8
   \   0000004C   0x9A00             LDR      R2,[SP, #+0]
   \   0000004E   0x1E52             SUBS     R2,R2,#+1
   \   00000050   0x1A40             SUBS     R0,R0,R1
   \   00000052   0x4290             CMP      R0,R2
   \   00000054   0xD106             BNE      ??mbedtls_x509_crt_verify_with_profile_8
   \   00000056   0x1871             ADDS     R1,R6,R1
   \   00000058   0x1C68             ADDS     R0,R5,#+1
   \   0000005A   0x.... 0x....      BL       x509_memcasecmp
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD100             BNE      .+4
   \   00000062   0xE08C             B        ??mbedtls_x509_crt_verify_with_profile_3
   2235                          {
   2236                              break;
   2237                          }
   2238          
   2239                          cur = cur->next;
   \                     ??mbedtls_x509_crt_verify_with_profile_8: (+1)
   \   00000064   0x68E4             LDR      R4,[R4, #+12]
   \                     ??mbedtls_x509_crt_verify_with_profile_5: (+1)
   \   00000066   0x2C00             CMP      R4,#+0
   \   00000068   0xD100             BNE      .+4
   \   0000006A   0xE082             B        ??mbedtls_x509_crt_verify_with_profile_9
   \   0000006C   0x6860             LDR      R0,[R4, #+4]
   \   0000006E   0x9000             STR      R0,[SP, #+0]
   \   00000070   0x42B8             CMP      R0,R7
   \   00000072   0xD115             BNE      ??mbedtls_x509_crt_verify_with_profile_10
   \   00000074   0x68A2             LDR      R2,[R4, #+8]
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x0031             MOVS     R1,R6
   \   0000007A   0xE002             B        ??mbedtls_x509_crt_verify_with_profile_11
   \                     ??mbedtls_x509_crt_verify_with_profile_12: (+1)
   \   0000007C   0x1C40             ADDS     R0,R0,#+1
   \   0000007E   0x1C52             ADDS     R2,R2,#+1
   \   00000080   0x1C49             ADDS     R1,R1,#+1
   \                     ??mbedtls_x509_crt_verify_with_profile_11: (+1)
   \   00000082   0x42B8             CMP      R0,R7
   \   00000084   0xD27B             BCS      ??mbedtls_x509_crt_verify_with_profile_3
   \   00000086   0x780B             LDRB     R3,[R1, #+0]
   \   00000088   0x7815             LDRB     R5,[R2, #+0]
   \   0000008A   0x405D             EORS     R5,R5,R3
   \   0000008C   0xD0F6             BEQ      ??mbedtls_x509_crt_verify_with_profile_12
   \   0000008E   0x2D20             CMP      R5,#+32
   \   00000090   0xD106             BNE      ??mbedtls_x509_crt_verify_with_profile_10
   \   00000092   0x001D             MOVS     R5,R3
   \   00000094   0x3D61             SUBS     R5,R5,#+97
   \   00000096   0x2D1A             CMP      R5,#+26
   \   00000098   0xD3F0             BCC      ??mbedtls_x509_crt_verify_with_profile_12
   \   0000009A   0x3B41             SUBS     R3,R3,#+65
   \   0000009C   0x2B1A             CMP      R3,#+26
   \   0000009E   0xD3ED             BCC      ??mbedtls_x509_crt_verify_with_profile_12
   \                     ??mbedtls_x509_crt_verify_with_profile_10: (+1)
   \   000000A0   0x9800             LDR      R0,[SP, #+0]
   \   000000A2   0x2803             CMP      R0,#+3
   \   000000A4   0xD3DE             BCC      ??mbedtls_x509_crt_verify_with_profile_8
   \   000000A6   0x68A5             LDR      R5,[R4, #+8]
   \   000000A8   0x2202             MOVS     R2,#+2
   \   000000AA   0x....             ADR      R1,??DataTable86  ;; 0x2A, 0x2E, 0x00, 0x00
   \   000000AC   0x0028             MOVS     R0,R5
   \   000000AE   0x.... 0x....      BL       memcmp
   \   000000B2   0x2800             CMP      R0,#+0
   \   000000B4   0xD1D6             BNE      ??mbedtls_x509_crt_verify_with_profile_8
   \   000000B6   0x0030             MOVS     R0,R6
   \   000000B8   0x.... 0x....      BL       strlen
   \   000000BC   0x7829             LDRB     R1,[R5, #+0]
   \   000000BE   0x292A             CMP      R1,#+42
   \   000000C0   0xD15D             BNE      ??mbedtls_x509_crt_verify_with_profile_3
   \   000000C2   0x7869             LDRB     R1,[R5, #+1]
   \   000000C4   0x292E             CMP      R1,#+46
   \   000000C6   0xD15A             BNE      ??mbedtls_x509_crt_verify_with_profile_3
   \   000000C8   0x2100             MOVS     R1,#+0
   \   000000CA   0x0032             MOVS     R2,R6
   \   000000CC   0xE7B7             B        ??mbedtls_x509_crt_verify_with_profile_7
   2240                      }
   2241          
   2242                      if( cur == NULL )
   2243                          *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
   2244                  }
   2245                  else
   2246                  {
   2247                      while( name != NULL )
   2248                      {
   2249                          if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
   2250                          {
   2251                              if( name->val.len == cn_len &&
   2252                                  x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
   2253                                  break;
   2254          
   2255                              if( name->val.len > 2 &&
   2256                                  memcmp( name->val.p, "*.", 2 ) == 0 &&
   2257                                  x509_check_wildcard( cn, &name->val ) == 0 )
   \                     ??mbedtls_x509_crt_verify_with_profile_13: (+1)
   \   000000CE   0x1C49             ADDS     R1,R1,#+1
   \   000000D0   0x1C52             ADDS     R2,R2,#+1
   \                     ??mbedtls_x509_crt_verify_with_profile_14: (+1)
   \   000000D2   0x4281             CMP      R1,R0
   \   000000D4   0xD20F             BCS      ??mbedtls_x509_crt_verify_with_profile_15
   \   000000D6   0x7813             LDRB     R3,[R2, #+0]
   \   000000D8   0x2B2E             CMP      R3,#+46
   \   000000DA   0xD1F8             BNE      ??mbedtls_x509_crt_verify_with_profile_13
   \   000000DC   0x2900             CMP      R1,#+0
   \   000000DE   0xD00A             BEQ      ??mbedtls_x509_crt_verify_with_profile_15
   \   000000E0   0x9A00             LDR      R2,[SP, #+0]
   \   000000E2   0x1E52             SUBS     R2,R2,#+1
   \   000000E4   0x1A40             SUBS     R0,R0,R1
   \   000000E6   0x4290             CMP      R0,R2
   \   000000E8   0xD105             BNE      ??mbedtls_x509_crt_verify_with_profile_15
   \   000000EA   0x1871             ADDS     R1,R6,R1
   \   000000EC   0x1C68             ADDS     R0,R5,#+1
   \   000000EE   0x.... 0x....      BL       x509_memcasecmp
   \   000000F2   0x2800             CMP      R0,#+0
   \   000000F4   0xD043             BEQ      ??mbedtls_x509_crt_verify_with_profile_3
   2258                                  break;
   2259                          }
   2260          
   2261                          name = name->next;
   \                     ??mbedtls_x509_crt_verify_with_profile_15: (+1)
   \   000000F6   0x69A4             LDR      R4,[R4, #+24]
   \                     ??mbedtls_x509_crt_verify_with_profile_4: (+1)
   \   000000F8   0x2C00             CMP      R4,#+0
   \   000000FA   0xD03A             BEQ      ??mbedtls_x509_crt_verify_with_profile_9
   \   000000FC   0x6860             LDR      R0,[R4, #+4]
   \   000000FE   0x2803             CMP      R0,#+3
   \   00000100   0xD1F9             BNE      ??mbedtls_x509_crt_verify_with_profile_15
   \   00000102   0x2203             MOVS     R2,#+3
   \   00000104   0x68A1             LDR      R1,[R4, #+8]
   \   00000106   0x....             ADR      R0,??DataTable86_1  ;; "U\004\003"
   \   00000108   0x.... 0x....      BL       memcmp
   \   0000010C   0x2800             CMP      R0,#+0
   \   0000010E   0xD1F2             BNE      ??mbedtls_x509_crt_verify_with_profile_15
   \   00000110   0x6920             LDR      R0,[R4, #+16]
   \   00000112   0x9000             STR      R0,[SP, #+0]
   \   00000114   0x42B8             CMP      R0,R7
   \   00000116   0xD115             BNE      ??mbedtls_x509_crt_verify_with_profile_16
   \   00000118   0x2000             MOVS     R0,#+0
   \   0000011A   0x6962             LDR      R2,[R4, #+20]
   \   0000011C   0x0031             MOVS     R1,R6
   \   0000011E   0xE002             B        ??mbedtls_x509_crt_verify_with_profile_17
   \                     ??mbedtls_x509_crt_verify_with_profile_18: (+1)
   \   00000120   0x1C40             ADDS     R0,R0,#+1
   \   00000122   0x1C49             ADDS     R1,R1,#+1
   \   00000124   0x1C52             ADDS     R2,R2,#+1
   \                     ??mbedtls_x509_crt_verify_with_profile_17: (+1)
   \   00000126   0x42B8             CMP      R0,R7
   \   00000128   0xD229             BCS      ??mbedtls_x509_crt_verify_with_profile_3
   \   0000012A   0x7813             LDRB     R3,[R2, #+0]
   \   0000012C   0x780D             LDRB     R5,[R1, #+0]
   \   0000012E   0x405D             EORS     R5,R5,R3
   \   00000130   0xD0F6             BEQ      ??mbedtls_x509_crt_verify_with_profile_18
   \   00000132   0x2D20             CMP      R5,#+32
   \   00000134   0xD106             BNE      ??mbedtls_x509_crt_verify_with_profile_16
   \   00000136   0x001D             MOVS     R5,R3
   \   00000138   0x3D61             SUBS     R5,R5,#+97
   \   0000013A   0x2D1A             CMP      R5,#+26
   \   0000013C   0xD3F0             BCC      ??mbedtls_x509_crt_verify_with_profile_18
   \   0000013E   0x3B41             SUBS     R3,R3,#+65
   \   00000140   0x2B1A             CMP      R3,#+26
   \   00000142   0xD3ED             BCC      ??mbedtls_x509_crt_verify_with_profile_18
   \                     ??mbedtls_x509_crt_verify_with_profile_16: (+1)
   \   00000144   0x9800             LDR      R0,[SP, #+0]
   \   00000146   0x2803             CMP      R0,#+3
   \   00000148   0xD3D5             BCC      ??mbedtls_x509_crt_verify_with_profile_15
   \   0000014A   0x6965             LDR      R5,[R4, #+20]
   \   0000014C   0x2202             MOVS     R2,#+2
   \   0000014E   0x....             ADR      R1,??DataTable86  ;; 0x2A, 0x2E, 0x00, 0x00
   \   00000150   0x0028             MOVS     R0,R5
   \   00000152   0x.... 0x....      BL       memcmp
   \   00000156   0x2800             CMP      R0,#+0
   \   00000158   0xD1CD             BNE      ??mbedtls_x509_crt_verify_with_profile_15
   \   0000015A   0x0030             MOVS     R0,R6
   \   0000015C   0x.... 0x....      BL       strlen
   \   00000160   0x7829             LDRB     R1,[R5, #+0]
   \   00000162   0x292A             CMP      R1,#+42
   \   00000164   0xD10B             BNE      ??mbedtls_x509_crt_verify_with_profile_3
   \   00000166   0x7869             LDRB     R1,[R5, #+1]
   \   00000168   0x292E             CMP      R1,#+46
   \   0000016A   0xD108             BNE      ??mbedtls_x509_crt_verify_with_profile_3
   \   0000016C   0x2100             MOVS     R1,#+0
   \   0000016E   0x0032             MOVS     R2,R6
   \   00000170   0xE7AF             B        ??mbedtls_x509_crt_verify_with_profile_14
   2262                      }
   2263          
   2264                      if( name == NULL )
   2265                          *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
   \                     ??mbedtls_x509_crt_verify_with_profile_9: (+1)
   \   00000172   0x9811             LDR      R0,[SP, #+68]
   \   00000174   0x6800             LDR      R0,[R0, #+0]
   \   00000176   0x2104             MOVS     R1,#+4
   \   00000178   0x4301             ORRS     R1,R1,R0
   \   0000017A   0x9811             LDR      R0,[SP, #+68]
   \   0000017C   0x6001             STR      R1,[R0, #+0]
   2266                  }
   2267              }
   2268          
   2269              /* Check the type and size of the key */
   2270              pk_type = mbedtls_pk_get_type( &crt->pk );
   \                     ??mbedtls_x509_crt_verify_with_profile_3: (+1)
   \   0000017E   0x9C07             LDR      R4,[SP, #+28]
   \   00000180   0x34BC             ADDS     R4,R4,#+188
   \   00000182   0x0020             MOVS     R0,R4
   \   00000184   0x.... 0x....      BL       mbedtls_pk_get_type
   2271          
   2272              if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
   \   00000188   0x2101             MOVS     R1,#+1
   \   0000018A   0x9A0A             LDR      R2,[SP, #+40]
   \   0000018C   0x6852             LDR      R2,[R2, #+4]
   \   0000018E   0x1E43             SUBS     R3,R0,#+1
   \   00000190   0x40DA             LSRS     R2,R2,R3
   \   00000192   0x400A             ANDS     R2,R2,R1
   \   00000194   0xD105             BNE      ??mbedtls_x509_crt_verify_with_profile_19
   2273                  *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
   \   00000196   0x9A11             LDR      R2,[SP, #+68]
   \   00000198   0x6812             LDR      R2,[R2, #+0]
   \   0000019A   0x03CB             LSLS     R3,R1,#+15
   \   0000019C   0x4313             ORRS     R3,R3,R2
   \   0000019E   0x9A11             LDR      R2,[SP, #+68]
   \   000001A0   0x6013             STR      R3,[R2, #+0]
   2274          
   2275              if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
   \                     ??mbedtls_x509_crt_verify_with_profile_19: (+1)
   \   000001A2   0x2801             CMP      R0,#+1
   \   000001A4   0xD012             BEQ      ??mbedtls_x509_crt_verify_with_profile_20
   \   000001A6   0x2806             CMP      R0,#+6
   \   000001A8   0xD010             BEQ      ??mbedtls_x509_crt_verify_with_profile_20
   \   000001AA   0x2804             CMP      R0,#+4
   \   000001AC   0xD003             BEQ      ??mbedtls_x509_crt_verify_with_profile_21
   \   000001AE   0x2802             CMP      R0,#+2
   \   000001B0   0xD001             BEQ      ??mbedtls_x509_crt_verify_with_profile_21
   \   000001B2   0x2803             CMP      R0,#+3
   \   000001B4   0xD111             BNE      ??mbedtls_x509_crt_verify_with_profile_22
   \                     ??mbedtls_x509_crt_verify_with_profile_21: (+1)
   \   000001B6   0x980A             LDR      R0,[SP, #+40]
   \   000001B8   0x6880             LDR      R0,[R0, #+8]
   \   000001BA   0x9A07             LDR      R2,[SP, #+28]
   \   000001BC   0x23C0             MOVS     R3,#+192
   \   000001BE   0x58D2             LDR      R2,[R2, R3]
   \   000001C0   0x7812             LDRB     R2,[R2, #+0]
   \   000001C2   0x1E52             SUBS     R2,R2,#+1
   \   000001C4   0x40D0             LSRS     R0,R0,R2
   \   000001C6   0x4001             ANDS     R1,R1,R0
   \   000001C8   0xD10E             BNE      ??mbedtls_x509_crt_verify_with_profile_23
   \   000001CA   0xE006             B        ??mbedtls_x509_crt_verify_with_profile_22
   \                     ??mbedtls_x509_crt_verify_with_profile_20: (+1)
   \   000001CC   0x0020             MOVS     R0,R4
   \   000001CE   0x.... 0x....      BL       mbedtls_pk_get_bitlen
   \   000001D2   0x990A             LDR      R1,[SP, #+40]
   \   000001D4   0x68C9             LDR      R1,[R1, #+12]
   \   000001D6   0x4288             CMP      R0,R1
   \   000001D8   0xD206             BCS      ??mbedtls_x509_crt_verify_with_profile_23
   2276                  *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
   \                     ??mbedtls_x509_crt_verify_with_profile_22: (+1)
   \   000001DA   0x9811             LDR      R0,[SP, #+68]
   \   000001DC   0x6800             LDR      R0,[R0, #+0]
   \   000001DE   0x2180             MOVS     R1,#+128
   \   000001E0   0x0249             LSLS     R1,R1,#+9        ;; #+65536
   \   000001E2   0x4301             ORRS     R1,R1,R0
   \   000001E4   0x9811             LDR      R0,[SP, #+68]
   \   000001E6   0x6001             STR      R1,[R0, #+0]
   2277          
   2278              /* Look for a parent in trusted CAs */
   2279              for( parent = trust_ca; parent != NULL; parent = parent->next )
   \                     ??mbedtls_x509_crt_verify_with_profile_23: (+1)
   \   000001E8   0x9C08             LDR      R4,[SP, #+32]
   \   000001EA   0x....             LDR      R7,??DataTable86_2  ;; 0x8001
   \   000001EC   0x2604             MOVS     R6,#+4
   \   000001EE   0xE000             B        ??mbedtls_x509_crt_verify_with_profile_24
   \                     ??mbedtls_x509_crt_verify_with_profile_25: (+1)
   \   000001F0   0x6BAC             LDR      R4,[R5, #+56]
   \                     ??mbedtls_x509_crt_verify_with_profile_24: (+1)
   \   000001F2   0x2C00             CMP      R4,#+0
   \   000001F4   0xD021             BEQ      ??mbedtls_x509_crt_verify_with_profile_26
   2280              {
   2281                  if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
   \   000001F6   0x0025             MOVS     R5,R4
   \   000001F8   0x35F8             ADDS     R5,R5,#+248
   \   000001FA   0x0021             MOVS     R1,R4
   \   000001FC   0x316C             ADDS     R1,R1,#+108
   \   000001FE   0x9807             LDR      R0,[SP, #+28]
   \   00000200   0x304C             ADDS     R0,R0,#+76
   \   00000202   0x.... 0x....      BL       x509_name_cmp
   \   00000206   0x2800             CMP      R0,#+0
   \   00000208   0xD1F2             BNE      ??mbedtls_x509_crt_verify_with_profile_25
   \   0000020A   0x6868             LDR      R0,[R5, #+4]
   \   0000020C   0x2800             CMP      R0,#+0
   \   0000020E   0xD0EF             BEQ      ??mbedtls_x509_crt_verify_with_profile_25
   \   00000210   0x6828             LDR      R0,[R5, #+0]
   \   00000212   0x4030             ANDS     R0,R0,R6
   \   00000214   0xD004             BEQ      ??mbedtls_x509_crt_verify_with_profile_27
   \   00000216   0x68E8             LDR      R0,[R5, #+12]
   \   00000218   0x4230             TST      R0,R6
   \   0000021A   0xD0E9             BEQ      ??mbedtls_x509_crt_verify_with_profile_25
   \   0000021C   0x4038             ANDS     R0,R0,R7
   \   0000021E   0xD1E7             BNE      ??mbedtls_x509_crt_verify_with_profile_25
   2282                      break;
   2283              }
   2284          
   2285              if( parent != NULL )
   2286              {
   2287                  ret = x509_crt_verify_top( crt, parent, ca_crl, profile,
   2288                                             pathlen, selfsigned, flags, f_vrfy, p_vrfy );
   \                     ??mbedtls_x509_crt_verify_with_profile_27: (+1)
   \   00000220   0x9813             LDR      R0,[SP, #+76]
   \   00000222   0x9004             STR      R0,[SP, #+16]
   \   00000224   0x9812             LDR      R0,[SP, #+72]
   \   00000226   0x9003             STR      R0,[SP, #+12]
   \   00000228   0x9811             LDR      R0,[SP, #+68]
   \   0000022A   0x9002             STR      R0,[SP, #+8]
   \   0000022C   0x2000             MOVS     R0,#+0
   \   0000022E   0x9001             STR      R0,[SP, #+4]
   \   00000230   0x9000             STR      R0,[SP, #+0]
   \   00000232   0x9B0A             LDR      R3,[SP, #+40]
   \   00000234   0x9A09             LDR      R2,[SP, #+36]
   \   00000236   0x0021             MOVS     R1,R4
   \   00000238   0xE039             B        ??mbedtls_x509_crt_verify_with_profile_28
   2289                  if( ret != 0 )
   2290                      goto exit;
   2291              }
   2292              else
   2293              {
   2294                  /* Look for a parent upwards the chain */
   2295                  for( parent = crt->next; parent != NULL; parent = parent->next )
   \                     ??mbedtls_x509_crt_verify_with_profile_26: (+1)
   \   0000023A   0x9807             LDR      R0,[SP, #+28]
   \   0000023C   0x30C0             ADDS     R0,R0,#+192
   \   0000023E   0x6F04             LDR      R4,[R0, #+112]
   \   00000240   0xE000             B        ??mbedtls_x509_crt_verify_with_profile_29
   \                     ??mbedtls_x509_crt_verify_with_profile_30: (+1)
   \   00000242   0x6BAC             LDR      R4,[R5, #+56]
   \                     ??mbedtls_x509_crt_verify_with_profile_29: (+1)
   \   00000244   0x2C00             CMP      R4,#+0
   \   00000246   0xD026             BEQ      ??mbedtls_x509_crt_verify_with_profile_31
   2296                      if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
   \   00000248   0x0025             MOVS     R5,R4
   \   0000024A   0x35F8             ADDS     R5,R5,#+248
   \   0000024C   0x0021             MOVS     R1,R4
   \   0000024E   0x316C             ADDS     R1,R1,#+108
   \   00000250   0x9807             LDR      R0,[SP, #+28]
   \   00000252   0x304C             ADDS     R0,R0,#+76
   \   00000254   0x.... 0x....      BL       x509_name_cmp
   \   00000258   0x2800             CMP      R0,#+0
   \   0000025A   0xD1F2             BNE      ??mbedtls_x509_crt_verify_with_profile_30
   \   0000025C   0x6868             LDR      R0,[R5, #+4]
   \   0000025E   0x2800             CMP      R0,#+0
   \   00000260   0xD0EF             BEQ      ??mbedtls_x509_crt_verify_with_profile_30
   \   00000262   0x6828             LDR      R0,[R5, #+0]
   \   00000264   0x4030             ANDS     R0,R0,R6
   \   00000266   0xD004             BEQ      ??mbedtls_x509_crt_verify_with_profile_32
   \   00000268   0x68E8             LDR      R0,[R5, #+12]
   \   0000026A   0x4230             TST      R0,R6
   \   0000026C   0xD0E9             BEQ      ??mbedtls_x509_crt_verify_with_profile_30
   \   0000026E   0x4038             ANDS     R0,R0,R7
   \   00000270   0xD1E7             BNE      ??mbedtls_x509_crt_verify_with_profile_30
   2297                          break;
   2298          
   2299                  /* Are we part of the chain or at the top? */
   2300                  if( parent != NULL )
   2301                  {
   2302                      ret = x509_crt_verify_child( crt, parent, trust_ca, ca_crl, profile,
   2303                                                   pathlen, selfsigned, flags, f_vrfy, p_vrfy );
   \                     ??mbedtls_x509_crt_verify_with_profile_32: (+1)
   \   00000272   0x9813             LDR      R0,[SP, #+76]
   \   00000274   0x9005             STR      R0,[SP, #+20]
   \   00000276   0x9812             LDR      R0,[SP, #+72]
   \   00000278   0x9004             STR      R0,[SP, #+16]
   \   0000027A   0x9811             LDR      R0,[SP, #+68]
   \   0000027C   0x9003             STR      R0,[SP, #+12]
   \   0000027E   0x2000             MOVS     R0,#+0
   \   00000280   0x9002             STR      R0,[SP, #+8]
   \   00000282   0x9001             STR      R0,[SP, #+4]
   \   00000284   0x980A             LDR      R0,[SP, #+40]
   \   00000286   0x9000             STR      R0,[SP, #+0]
   \   00000288   0x9B09             LDR      R3,[SP, #+36]
   \   0000028A   0x9A08             LDR      R2,[SP, #+32]
   \   0000028C   0x0021             MOVS     R1,R4
   \   0000028E   0x9807             LDR      R0,[SP, #+28]
   \   00000290   0x.... 0x....      BL       x509_crt_verify_child
   \   00000294   0xE00E             B        ??mbedtls_x509_crt_verify_with_profile_33
   2304                      if( ret != 0 )
   2305                          goto exit;
   2306                  }
   2307                  else
   2308                  {
   2309                      ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,
   2310                                                 pathlen, selfsigned, flags, f_vrfy, p_vrfy );
   \                     ??mbedtls_x509_crt_verify_with_profile_31: (+1)
   \   00000296   0x9813             LDR      R0,[SP, #+76]
   \   00000298   0x9004             STR      R0,[SP, #+16]
   \   0000029A   0x9812             LDR      R0,[SP, #+72]
   \   0000029C   0x9003             STR      R0,[SP, #+12]
   \   0000029E   0x9811             LDR      R0,[SP, #+68]
   \   000002A0   0x9002             STR      R0,[SP, #+8]
   \   000002A2   0x2000             MOVS     R0,#+0
   \   000002A4   0x9001             STR      R0,[SP, #+4]
   \   000002A6   0x9000             STR      R0,[SP, #+0]
   \   000002A8   0x9B0A             LDR      R3,[SP, #+40]
   \   000002AA   0x9A09             LDR      R2,[SP, #+36]
   \   000002AC   0x9908             LDR      R1,[SP, #+32]
   \                     ??mbedtls_x509_crt_verify_with_profile_28: (+1)
   \   000002AE   0x9807             LDR      R0,[SP, #+28]
   \   000002B0   0x.... 0x....      BL       x509_crt_verify_top
   \                     ??mbedtls_x509_crt_verify_with_profile_33: (+1)
   \   000002B4   0x0001             MOVS     R1,R0
   2311                      if( ret != 0 )
   2312                          goto exit;
   2313                  }
   2314              }
   2315          
   2316          exit:
   2317              /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
   2318               * the SSL module for authmode optional, but non-zero return from the
   2319               * callback means a fatal error so it shouldn't be ignored */
   2320              if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
   \   000002B6   0x....             LDR      R0,??DataTable86_3  ;; 0xffffd900
   \   000002B8   0x4281             CMP      R1,R0
   \   000002BA   0xD101             BNE      ??mbedtls_x509_crt_verify_with_profile_34
   2321                  ret = MBEDTLS_ERR_X509_FATAL_ERROR;
   \   000002BC   0x....             LDR      R1,??DataTable86_4  ;; 0xffffd000
   \   000002BE   0xE001             B        ??mbedtls_x509_crt_verify_with_profile_2
   2322          
   2323              if( ret != 0 )
   \                     ??mbedtls_x509_crt_verify_with_profile_34: (+1)
   \   000002C0   0x2900             CMP      R1,#+0
   \   000002C2   0xD005             BEQ      ??mbedtls_x509_crt_verify_with_profile_35
   2324              {
   2325                  *flags = (uint32_t) -1;
   \                     ??mbedtls_x509_crt_verify_with_profile_2: (+1)
   \   000002C4   0x2000             MOVS     R0,#+0
   \   000002C6   0x43C0             MVNS     R0,R0            ;; #-1
   \   000002C8   0x9A11             LDR      R2,[SP, #+68]
   \   000002CA   0x6010             STR      R0,[R2, #+0]
   2326                  return( ret );
   \   000002CC   0x0008             MOVS     R0,R1
   \   000002CE   0xE004             B        ??mbedtls_x509_crt_verify_with_profile_36
   2327              }
   2328          
   2329              if( *flags != 0 )
   \                     ??mbedtls_x509_crt_verify_with_profile_35: (+1)
   \   000002D0   0x9911             LDR      R1,[SP, #+68]
   \   000002D2   0x6809             LDR      R1,[R1, #+0]
   \   000002D4   0x2900             CMP      R1,#+0
   \   000002D6   0xD100             BNE      ??mbedtls_x509_crt_verify_with_profile_36
   2330                  return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
   2331          
   2332              return( 0 );
   \   000002D8   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_x509_crt_verify_with_profile_36: (+1)
   \   000002DA   0xB00B             ADD      SP,SP,#+44
   \   000002DC   0xBDF0             POP      {R4-R7,PC}       ;; return
   \   000002DE   0xBF00             Nop      
   \                     ??mbedtls_x509_crt_verify_with_profile_1:
   \   000002E0   0xFFFFD800         DC32     0xffffd800
   2333          }
   2334          
   2335          /*
   2336           * Initialize a certificate chain
   2337           */

   \                                 In section .text, align 2, keep-with-next
   2338          void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
   2339          {
   \                     mbedtls_x509_crt_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   2340              memset( crt, 0, sizeof(mbedtls_x509_crt) );
   \   00000002   0x219A             MOVS     R1,#+154
   \   00000004   0x0049             LSLS     R1,R1,#+1        ;; #+308
   \   00000006   0x.... 0x....      BL       __aeabi_memclr4
   2341          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
   2342          
   2343          /*
   2344           * Unallocate all certificate data
   2345           */

   \                                 In section .text, align 2, keep-with-next
   2346          void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
   2347          {
   \                     mbedtls_x509_crt_free: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   2348              mbedtls_x509_crt *cert_cur = crt;
   \   00000002   0x4605             MOV      R5,R0
   2349              mbedtls_x509_crt *cert_prv;
   2350              mbedtls_x509_name *name_cur;
   2351              mbedtls_x509_name *name_prv;
   2352              mbedtls_x509_sequence *seq_cur;
   2353              mbedtls_x509_sequence *seq_prv;
   2354          
   2355              if( crt == NULL )
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD060             BEQ      ??mbedtls_x509_crt_free_0
   2356                  return;
   2357          
   2358              do
   2359              {
   2360                  mbedtls_pk_free( &cert_cur->pk );
   \                     ??mbedtls_x509_crt_free_1: (+1)
   \   00000008   0x0028             MOVS     R0,R5
   \   0000000A   0x30BC             ADDS     R0,R0,#+188
   \   0000000C   0x.... 0x....      BL       mbedtls_pk_free
   \   00000010   0x1D28             ADDS     R0,R5,#+4
   \   00000012   0x6E04             LDR      R4,[R0, #+96]
   \   00000014   0xE008             B        ??mbedtls_x509_crt_free_2
   2361          
   2362          #if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
   2363                  mbedtls_free( cert_cur->sig_opts );
   2364          #endif
   2365          
   2366                  name_cur = cert_cur->issuer.next;
   2367                  while( name_cur != NULL )
   2368                  {
   2369                      name_prv = name_cur;
   \                     ??mbedtls_x509_crt_free_3: (+1)
   \   00000016   0x0026             MOVS     R6,R4
   2370                      name_cur = name_cur->next;
   \   00000018   0x69A4             LDR      R4,[R4, #+24]
   2371                      mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   \   0000001A   0x2120             MOVS     R1,#+32
   \   0000001C   0x0030             MOVS     R0,R6
   \   0000001E   0x.... 0x....      BL       __aeabi_memclr
   2372                      mbedtls_free( name_prv );
   \   00000022   0x0030             MOVS     R0,R6
   \   00000024   0x.... 0x....      BL       free
   2373                  }
   \                     ??mbedtls_x509_crt_free_2: (+1)
   \   00000028   0x2C00             CMP      R4,#+0
   \   0000002A   0xD1F4             BNE      ??mbedtls_x509_crt_free_3
   \   0000002C   0x2084             MOVS     R0,#+132
   \   0000002E   0x582C             LDR      R4,[R5, R0]
   \   00000030   0xE008             B        ??mbedtls_x509_crt_free_4
   2374          
   2375                  name_cur = cert_cur->subject.next;
   2376                  while( name_cur != NULL )
   2377                  {
   2378                      name_prv = name_cur;
   \                     ??mbedtls_x509_crt_free_5: (+1)
   \   00000032   0x0026             MOVS     R6,R4
   2379                      name_cur = name_cur->next;
   \   00000034   0x69A4             LDR      R4,[R4, #+24]
   2380                      mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
   \   00000036   0x2120             MOVS     R1,#+32
   \   00000038   0x0030             MOVS     R0,R6
   \   0000003A   0x.... 0x....      BL       __aeabi_memclr
   2381                      mbedtls_free( name_prv );
   \   0000003E   0x0030             MOVS     R0,R6
   \   00000040   0x.... 0x....      BL       free
   2382                  }
   \                     ??mbedtls_x509_crt_free_4: (+1)
   \   00000044   0x2C00             CMP      R4,#+0
   \   00000046   0xD1F4             BNE      ??mbedtls_x509_crt_free_5
   2383          
   2384                  seq_cur = cert_cur->ext_key_usage.next;
   \   00000048   0x208A             MOVS     R0,#+138
   \   0000004A   0x0040             LSLS     R0,R0,#+1        ;; #+276
   \   0000004C   0x182F             ADDS     R7,R5,R0
   \   0000004E   0x683C             LDR      R4,[R7, #+0]
   \   00000050   0xE008             B        ??mbedtls_x509_crt_free_6
   2385                  while( seq_cur != NULL )
   2386                  {
   2387                      seq_prv = seq_cur;
   \                     ??mbedtls_x509_crt_free_7: (+1)
   \   00000052   0x0026             MOVS     R6,R4
   2388                      seq_cur = seq_cur->next;
   \   00000054   0x68E4             LDR      R4,[R4, #+12]
   2389                      mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
   \   00000056   0x2110             MOVS     R1,#+16
   \   00000058   0x0030             MOVS     R0,R6
   \   0000005A   0x.... 0x....      BL       __aeabi_memclr
   2390                      mbedtls_free( seq_prv );
   \   0000005E   0x0030             MOVS     R0,R6
   \   00000060   0x.... 0x....      BL       free
   2391                  }
   \                     ??mbedtls_x509_crt_free_6: (+1)
   \   00000064   0x2C00             CMP      R4,#+0
   \   00000066   0xD1F4             BNE      ??mbedtls_x509_crt_free_7
   2392          
   2393                  seq_cur = cert_cur->subject_alt_names.next;
   \   00000068   0x0028             MOVS     R0,R5
   \   0000006A   0x3084             ADDS     R0,R0,#+132
   \   0000006C   0x6F04             LDR      R4,[R0, #+112]
   \   0000006E   0xE008             B        ??mbedtls_x509_crt_free_8
   2394                  while( seq_cur != NULL )
   2395                  {
   2396                      seq_prv = seq_cur;
   \                     ??mbedtls_x509_crt_free_9: (+1)
   \   00000070   0x0026             MOVS     R6,R4
   2397                      seq_cur = seq_cur->next;
   \   00000072   0x68E4             LDR      R4,[R4, #+12]
   2398                      mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
   \   00000074   0x2110             MOVS     R1,#+16
   \   00000076   0x0030             MOVS     R0,R6
   \   00000078   0x.... 0x....      BL       __aeabi_memclr
   2399                      mbedtls_free( seq_prv );
   \   0000007C   0x0030             MOVS     R0,R6
   \   0000007E   0x.... 0x....      BL       free
   2400                  }
   \                     ??mbedtls_x509_crt_free_8: (+1)
   \   00000082   0x2C00             CMP      R4,#+0
   \   00000084   0xD1F4             BNE      ??mbedtls_x509_crt_free_9
   2401          
   2402                  if( cert_cur->raw.p != NULL )
   \   00000086   0x1D28             ADDS     R0,R5,#+4
   \   00000088   0x6840             LDR      R0,[R0, #+4]
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD008             BEQ      ??mbedtls_x509_crt_free_10
   2403                  {
   2404                      mbedtls_zeroize( cert_cur->raw.p, cert_cur->raw.len );
   \   0000008E   0x6869             LDR      R1,[R5, #+4]
   \   00000090   0x2900             CMP      R1,#+0
   \   00000092   0xD001             BEQ      ??mbedtls_x509_crt_free_11
   \   00000094   0x.... 0x....      BL       __aeabi_memclr
   2405                      mbedtls_free( cert_cur->raw.p );
   \                     ??mbedtls_x509_crt_free_11: (+1)
   \   00000098   0x1D28             ADDS     R0,R5,#+4
   \   0000009A   0x6840             LDR      R0,[R0, #+4]
   \   0000009C   0x.... 0x....      BL       free
   2406                  }
   2407          
   2408                  cert_cur = cert_cur->next;
   \                     ??mbedtls_x509_crt_free_10: (+1)
   \   000000A0   0x69FD             LDR      R5,[R7, #+28]
   2409              }
   2410              while( cert_cur != NULL );
   \   000000A2   0x2D00             CMP      R5,#+0
   \   000000A4   0xD1B0             BNE      ??mbedtls_x509_crt_free_1
   2411          
   2412              cert_cur = crt;
   \   000000A6   0x9D00             LDR      R5,[SP, #+0]
   2413              do
   2414              {
   2415                  cert_prv = cert_cur;
   \                     ??mbedtls_x509_crt_free_12: (+1)
   \   000000A8   0x002C             MOVS     R4,R5
   2416                  cert_cur = cert_cur->next;
   \   000000AA   0x2098             MOVS     R0,#+152
   \   000000AC   0x0040             LSLS     R0,R0,#+1        ;; #+304
   \   000000AE   0x582D             LDR      R5,[R5, R0]
   2417          
   2418                  mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
   \   000000B0   0x219A             MOVS     R1,#+154
   \   000000B2   0x0049             LSLS     R1,R1,#+1        ;; #+308
   \   000000B4   0x0020             MOVS     R0,R4
   \   000000B6   0x.... 0x....      BL       __aeabi_memclr
   2419                  if( cert_prv != crt )
   \   000000BA   0x9800             LDR      R0,[SP, #+0]
   \   000000BC   0x4284             CMP      R4,R0
   \   000000BE   0xD002             BEQ      ??mbedtls_x509_crt_free_13
   2420                      mbedtls_free( cert_prv );
   \   000000C0   0x0020             MOVS     R0,R4
   \   000000C2   0x.... 0x....      BL       free
   2421              }
   2422              while( cert_cur != NULL );
   \                     ??mbedtls_x509_crt_free_13: (+1)
   \   000000C6   0x2D00             CMP      R5,#+0
   \   000000C8   0xD1EE             BNE      ??mbedtls_x509_crt_free_12
   2423          }
   \                     ??mbedtls_x509_crt_free_0: (+1)
   \   000000CA   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74:
   \   00000000   0xFFFFDAA0         DC32     0xffffdaa0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_1:
   \   00000000   0xFFFFDB00         DC32     0xffffdb00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_2:
   \   00000000   0xFFFFDA9E         DC32     0xffffda9e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_3:
   \   00000000   0xFFFFDA96         DC32     0xffffda96

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_4:
   \   00000000   0xFFFFDA9A         DC32     0xffffda9a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_5:
   \   00000000   0xFFFFDA9C         DC32     0xffffda9c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_6:
   \   00000000   0xFFFFDF80         DC32     0xffffdf80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable75:
   \   00000000   0xFFFFDE80         DC32     0xffffde80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable75_1:
   \   00000000   0xFFFFD780         DC32     0xffffd780

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable75_2:
   \   00000000   0xFFFFDA80         DC32     0xffffda80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable76:
   \   00000000   0xFFFFDE00         DC32     0xffffde00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable76_1:
   \   00000000   0xFFFFDD9A         DC32     0xffffdd9a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable76_2:
   \   00000000   0xFFFFDC00         DC32     0xffffdc00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable76_3:
   \   00000000   0xFFFFDB9A         DC32     0xffffdb9a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable77:
   \   00000000   0xFFFFD980         DC32     0xffffd980

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable77_1:
   \   00000000   0xFFFFDE1A         DC32     0xffffde1a

   \                                 In section .text, align 4, keep-with-next
   \                     ?_21:
   \   00000000   0x2D 0x2D          DC8 "-----END CERTIFICATE-----"
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \              0x4E 0x44    
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46 0x49    
   \              0x43 0x41    
   \              0x54 0x45    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_20:
   \   00000000   0x2D 0x2D          DC8 "-----BEGIN CERTIFICATE-----"
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46 0x49    
   \              0x43 0x41    
   \              0x54 0x45    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78:
   \   00000000   0xFFFFD800         DC32     0xffffd800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_1:
   \   00000000   0xFFFFD780         DC32     0xffffd780

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_2:
   \   00000000   0xFFFFEB80         DC32     0xffffeb80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_3:
   \   00000000   0xFFFFEF80         DC32     0xffffef80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_4:
   \   00000000   0xFFFFD880         DC32     0xffffd880

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_5:
   \   00000000   0xFFFFD680         DC32     0xffffd680

   \                                 In section .text, align 4, keep-with-next
   \                     ?_24:
   \   00000000   0x25 0x73          DC8 "%sSSL Client"
   \              0x53 0x53    
   \              0x4C 0x20    
   \              0x43 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_25:
   \   00000000   0x25 0x73          DC8 "%sSSL Server"
   \              0x53 0x53    
   \              0x4C 0x20    
   \              0x53 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_26:
   \   00000000   0x25 0x73          DC8 "%sEmail"
   \              0x45 0x6D    
   \              0x61 0x69    
   \              0x6C 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_27:
   \   00000000   0x25 0x73          DC8 "%sObject Signing"
   \              0x4F 0x62    
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x20 0x53    
   \              0x69 0x67    
   \              0x6E 0x69    
   \              0x6E 0x67    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_28:
   \   00000000   0x25 0x73          DC8 "%sReserved"
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x72 0x76    
   \              0x65 0x64    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_29:
   \   00000000   0x25 0x73          DC8 "%sSSL CA"
   \              0x53 0x53    
   \              0x4C 0x20    
   \              0x43 0x41    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_30:
   \   00000000   0x25 0x73          DC8 "%sEmail CA"
   \              0x45 0x6D    
   \              0x61 0x69    
   \              0x6C 0x20    
   \              0x43 0x41    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_31:
   \   00000000   0x25 0x73          DC8 "%sObject Signing CA"
   \              0x4F 0x62    
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x20 0x53    
   \              0x69 0x67    
   \              0x6E 0x69    
   \              0x6E 0x67    
   \              0x20 0x43    
   \              0x41 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_32:
   \   00000000   0x25 0x73          DC8 "%sDigital Signature"
   \              0x44 0x69    
   \              0x67 0x69    
   \              0x74 0x61    
   \              0x6C 0x20    
   \              0x53 0x69    
   \              0x67 0x6E    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_33:
   \   00000000   0x25 0x73          DC8 "%sNon Repudiation"
   \              0x4E 0x6F    
   \              0x6E 0x20    
   \              0x52 0x65    
   \              0x70 0x75    
   \              0x64 0x69    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_34:
   \   00000000   0x25 0x73          DC8 "%sKey Encipherment"
   \              0x4B 0x65    
   \              0x79 0x20    
   \              0x45 0x6E    
   \              0x63 0x69    
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_35:
   \   00000000   0x25 0x73          DC8 "%sData Encipherment"
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x20 0x45    
   \              0x6E 0x63    
   \              0x69 0x70    
   \              0x68 0x65    
   \              0x72 0x6D    
   \              0x65 0x6E    
   \              0x74 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_36:
   \   00000000   0x25 0x73          DC8 "%sKey Agreement"
   \              0x4B 0x65    
   \              0x79 0x20    
   \              0x41 0x67    
   \              0x72 0x65    
   \              0x65 0x6D    
   \              0x65 0x6E    
   \              0x74 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_37:
   \   00000000   0x25 0x73          DC8 "%sKey Cert Sign"
   \              0x4B 0x65    
   \              0x79 0x20    
   \              0x43 0x65    
   \              0x72 0x74    
   \              0x20 0x53    
   \              0x69 0x67    
   \              0x6E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_38:
   \   00000000   0x25 0x73          DC8 "%sCRL Sign"
   \              0x43 0x52    
   \              0x4C 0x20    
   \              0x53 0x69    
   \              0x67 0x6E    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_39:
   \   00000000   0x25 0x73          DC8 "%sEncipher Only"
   \              0x45 0x6E    
   \              0x63 0x69    
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x20 0x4F    
   \              0x6E 0x6C    
   \              0x79 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_40:
   \   00000000   0x25 0x73          DC8 "%sDecipher Only"
   \              0x44 0x65    
   \              0x63 0x69    
   \              0x70 0x68    
   \              0x65 0x72    
   \              0x20 0x4F    
   \              0x6E 0x6C    
   \              0x79 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79:
   \   00000000   0x........         DC32     ?_48

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_1:
   \   00000000   0x........         DC32     ?_49

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_2:
   \   00000000   0x........         DC32     ?_50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable79_3:
   \   00000000   0x........         DC32     ?_51

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x54 0x68          DC8 "The certificate validity has expired"
   \              0x65 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x68    
   \              0x61 0x73    
   \              0x20 0x65    
   \              0x78 0x70    
   \              0x69 0x72    
   \              0x65 0x64    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x54 0x68          DC8 "The certificate has been revoked (is on a CRL)"
   \              0x65 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x68 0x61    
   \              0x73 0x20    
   \              0x62 0x65    
   \              0x65 0x6E    
   \              0x20 0x72    
   \              0x65 0x76    
   \              0x6F 0x6B    
   \              0x65 0x64    
   \              0x20 0x28    
   \              0x69 0x73    
   \              0x20 0x6F    
   \              0x6E 0x20    
   \              0x61 0x20    
   \              0x43 0x52    
   \              0x4C 0x29    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x54 0x68          DC8 54H, 68H, 65H, 20H, 63H, 65H, 72H, 74H
   \              0x65 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \   00000008   0x69 0x66          DC8 69H, 66H, 69H, 63H, 61H, 74H, 65H, 20H
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \   00000010   0x43 0x6F          DC8 43H, 6FH, 6DH, 6DH, 6FH, 6EH, 20H, 4EH
   \              0x6D 0x6D    
   \              0x6F 0x6E    
   \              0x20 0x4E    
   \   00000018   0x61 0x6D          DC8 61H, 6DH, 65H, 20H, 28H, 43H, 4EH, 29H
   \              0x65 0x20    
   \              0x28 0x43    
   \              0x4E 0x29    
   \   00000020   0x20 0x64          DC8 20H, 64H, 6FH, 65H, 73H, 20H, 6EH, 6FH
   \              0x6F 0x65    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \   00000028   0x74 0x20          DC8 74H, 20H, 6DH, 61H, 74H, 63H, 68H, 20H
   \              0x6D 0x61    
   \              0x74 0x63    
   \              0x68 0x20    
   \   00000030   0x77 0x69          DC8 77H, 69H, 74H, 68H, 20H, 74H, 68H, 65H
   \              0x74 0x68    
   \              0x20 0x74    
   \              0x68 0x65    
   \   00000038   0x20 0x65          DC8 20H, 65H, 78H, 70H, 65H, 63H, 74H, 65H
   \              0x78 0x70    
   \              0x65 0x63    
   \              0x74 0x65    
   \   00000040   0x64 0x20          DC8 64H, 20H, 43H, 4EH, 0
   \              0x43 0x4E    
   \              0x00         
   \   00000045   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x54 0x68          DC8 54H, 68H, 65H, 20H, 63H, 65H, 72H, 74H
   \              0x65 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \   00000008   0x69 0x66          DC8 69H, 66H, 69H, 63H, 61H, 74H, 65H, 20H
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \   00000010   0x69 0x73          DC8 69H, 73H, 20H, 6EH, 6FH, 74H, 20H, 63H
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \   00000018   0x6F 0x72          DC8 6FH, 72H, 72H, 65H, 63H, 74H, 6CH, 79H
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x6C 0x79    
   \   00000020   0x20 0x73          DC8 20H, 73H, 69H, 67H, 6EH, 65H, 64H, 20H
   \              0x69 0x67    
   \              0x6E 0x65    
   \              0x64 0x20    
   \   00000028   0x62 0x79          DC8 62H, 79H, 20H, 74H, 68H, 65H, 20H, 74H
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x74    
   \   00000030   0x72 0x75          DC8 72H, 75H, 73H, 74H, 65H, 64H, 20H, 43H
   \              0x73 0x74    
   \              0x65 0x64    
   \              0x20 0x43    
   \   00000038   0x41 0x00          DC8 41H, 0
   \   0000003A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x54 0x68          DC8 "The CRL is not correctly signed by the trusted CA"
   \              0x65 0x20    
   \              0x43 0x52    
   \              0x4C 0x20    
   \              0x69 0x73    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \              0x6F 0x72    
   \              0x72 0x65    
   \              0x63 0x74    
   \              0x6C 0x79    
   \              0x20 0x73    
   \              0x69 0x67    
   \              0x6E 0x65    
   \              0x64 0x20    
   \              0x62 0x79    
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x74    
   \              0x72 0x75    
   \              0x73 0x74    
   \              0x65 0x64    
   \              0x20 0x43    
   \              0x41 0x00    
   \   00000032   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x54 0x68          DC8 "The CRL is expired"
   \              0x65 0x20    
   \              0x43 0x52    
   \              0x4C 0x20    
   \              0x69 0x73    
   \              0x20 0x65    
   \              0x78 0x70    
   \              0x69 0x72    
   \              0x65 0x64    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x43 0x65          DC8 "Certificate was missing"
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x77 0x61    
   \              0x73 0x20    
   \              0x6D 0x69    
   \              0x73 0x73    
   \              0x69 0x6E    
   \              0x67 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x43 0x65          DC8 "Certificate verification was skipped"
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x76 0x65    
   \              0x72 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x77    
   \              0x61 0x73    
   \              0x20 0x73    
   \              0x6B 0x69    
   \              0x70 0x70    
   \              0x65 0x64    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x4F 0x74          DC8 "Other reason (can be used by verify callback)"
   \              0x68 0x65    
   \              0x72 0x20    
   \              0x72 0x65    
   \              0x61 0x73    
   \              0x6F 0x6E    
   \              0x20 0x28    
   \              0x63 0x61    
   \              0x6E 0x20    
   \              0x62 0x65    
   \              0x20 0x75    
   \              0x73 0x65    
   \              0x64 0x20    
   \              0x62 0x79    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x63 0x61    
   \              0x6C 0x6C    
   \              0x62 0x61    
   \              0x63 0x6B    
   \              0x29 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x54 0x68          DC8 "The certificate validity starts in the future"
   \              0x65 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x69    
   \              0x74 0x79    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x73 0x20    
   \              0x69 0x6E    
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x66    
   \              0x75 0x74    
   \              0x75 0x72    
   \              0x65 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x54 0x68          DC8 "The CRL is from the future"
   \              0x65 0x20    
   \              0x43 0x52    
   \              0x4C 0x20    
   \              0x69 0x73    
   \              0x20 0x66    
   \              0x72 0x6F    
   \              0x6D 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x66 0x75    
   \              0x74 0x75    
   \              0x72 0x65    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_11:
   \   00000000   0x55 0x73          DC8 "Usage does not match the keyUsage extension"
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x64 0x6F    
   \              0x65 0x73    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x55 0x73    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x6E 0x73    
   \              0x69 0x6F    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_12:
   \   00000000   0x55 0x73          DC8 55H, 73H, 61H, 67H, 65H, 20H, 64H, 6FH
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x64 0x6F    
   \   00000008   0x65 0x73          DC8 65H, 73H, 20H, 6EH, 6FH, 74H, 20H, 6DH
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x6D    
   \   00000010   0x61 0x74          DC8 61H, 74H, 63H, 68H, 20H, 74H, 68H, 65H
   \              0x63 0x68    
   \              0x20 0x74    
   \              0x68 0x65    
   \   00000018   0x20 0x65          DC8 20H, 65H, 78H, 74H, 65H, 6EH, 64H, 65H
   \              0x78 0x74    
   \              0x65 0x6E    
   \              0x64 0x65    
   \   00000020   0x64 0x4B          DC8 64H, 4BH, 65H, 79H, 55H, 73H, 61H, 67H
   \              0x65 0x79    
   \              0x55 0x73    
   \              0x61 0x67    
   \   00000028   0x65 0x20          DC8 65H, 20H, 65H, 78H, 74H, 65H, 6EH, 73H
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x6E 0x73    
   \   00000030   0x69 0x6F          DC8 69H, 6FH, 6EH, 0
   \              0x6E 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_13:
   \   00000000   0x55 0x73          DC8 "Usage does not match the nsCertType extension"
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x64 0x6F    
   \              0x65 0x73    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x6E    
   \              0x73 0x43    
   \              0x65 0x72    
   \              0x74 0x54    
   \              0x79 0x70    
   \              0x65 0x20    
   \              0x65 0x78    
   \              0x74 0x65    
   \              0x6E 0x73    
   \              0x69 0x6F    
   \              0x6E 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_14:
   \   00000000   0x54 0x68          DC8 54H, 68H, 65H, 20H, 63H, 65H, 72H, 74H
   \              0x65 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \   00000008   0x69 0x66          DC8 69H, 66H, 69H, 63H, 61H, 74H, 65H, 20H
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \   00000010   0x69 0x73          DC8 69H, 73H, 20H, 73H, 69H, 67H, 6EH, 65H
   \              0x20 0x73    
   \              0x69 0x67    
   \              0x6E 0x65    
   \   00000018   0x64 0x20          DC8 64H, 20H, 77H, 69H, 74H, 68H, 20H, 61H
   \              0x77 0x69    
   \              0x74 0x68    
   \              0x20 0x61    
   \   00000020   0x6E 0x20          DC8 6EH, 20H, 75H, 6EH, 61H, 63H, 63H, 65H
   \              0x75 0x6E    
   \              0x61 0x63    
   \              0x63 0x65    
   \   00000028   0x70 0x74          DC8 70H, 74H, 61H, 62H, 6CH, 65H, 20H, 68H
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x68    
   \   00000030   0x61 0x73          DC8 61H, 73H, 68H, 2EH, 0
   \              0x68 0x2E    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_15:
   \   00000000   0x54 0x68          DC8 54H, 68H, 65H, 20H, 63H, 65H, 72H, 74H
   \              0x65 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \   00000008   0x69 0x66          DC8 69H, 66H, 69H, 63H, 61H, 74H, 65H, 20H
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \   00000010   0x69 0x73          DC8 69H, 73H, 20H, 73H, 69H, 67H, 6EH, 65H
   \              0x20 0x73    
   \              0x69 0x67    
   \              0x6E 0x65    
   \   00000018   0x64 0x20          DC8 64H, 20H, 77H, 69H, 74H, 68H, 20H, 61H
   \              0x77 0x69    
   \              0x74 0x68    
   \              0x20 0x61    
   \   00000020   0x6E 0x20          DC8 6EH, 20H, 75H, 6EH, 61H, 63H, 63H, 65H
   \              0x75 0x6E    
   \              0x61 0x63    
   \              0x63 0x65    
   \   00000028   0x70 0x74          DC8 70H, 74H, 61H, 62H, 6CH, 65H, 20H, 50H
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x50    
   \   00000030   0x4B 0x20          DC8 4BH, 20H, 61H, 6CH, 67H, 20H, 28H, 65H
   \              0x61 0x6C    
   \              0x67 0x20    
   \              0x28 0x65    
   \   00000038   0x67 0x20          DC8 67H, 20H, 52H, 53H, 41H, 20H, 76H, 73H
   \              0x52 0x53    
   \              0x41 0x20    
   \              0x76 0x73    
   \   00000040   0x20 0x45          DC8 20H, 45H, 43H, 44H, 53H, 41H, 29H, 2EH
   \              0x43 0x44    
   \              0x53 0x41    
   \              0x29 0x2E    
   \   00000048   0x00               DC8 0
   \   00000049   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_16:
   \   00000000   0x54 0x68          DC8 54H, 68H, 65H, 20H, 63H, 65H, 72H, 74H
   \              0x65 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \   00000008   0x69 0x66          DC8 69H, 66H, 69H, 63H, 61H, 74H, 65H, 20H
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \   00000010   0x69 0x73          DC8 69H, 73H, 20H, 73H, 69H, 67H, 6EH, 65H
   \              0x20 0x73    
   \              0x69 0x67    
   \              0x6E 0x65    
   \   00000018   0x64 0x20          DC8 64H, 20H, 77H, 69H, 74H, 68H, 20H, 61H
   \              0x77 0x69    
   \              0x74 0x68    
   \              0x20 0x61    
   \   00000020   0x6E 0x20          DC8 6EH, 20H, 75H, 6EH, 61H, 63H, 63H, 65H
   \              0x75 0x6E    
   \              0x61 0x63    
   \              0x63 0x65    
   \   00000028   0x70 0x74          DC8 70H, 74H, 61H, 62H, 6CH, 65H, 20H, 6BH
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x6B    
   \   00000030   0x65 0x79          DC8 65H, 79H, 20H, 28H, 65H, 67H, 20H, 62H
   \              0x20 0x28    
   \              0x65 0x67    
   \              0x20 0x62    
   \   00000038   0x61 0x64          DC8 61H, 64H, 20H, 63H, 75H, 72H, 76H, 65H
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x76 0x65    
   \   00000040   0x2C 0x20          DC8 2CH, 20H, 52H, 53H, 41H, 20H, 74H, 6FH
   \              0x52 0x53    
   \              0x41 0x20    
   \              0x74 0x6F    
   \   00000048   0x6F 0x20          DC8 6FH, 20H, 73H, 68H, 6FH, 72H, 74H, 29H
   \              0x73 0x68    
   \              0x6F 0x72    
   \              0x74 0x29    
   \   00000050   0x2E 0x00          DC8 2EH, 0
   \   00000052   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_17:
   \   00000000   0x54 0x68          DC8 "The CRL is signed with an unacceptable hash."
   \              0x65 0x20    
   \              0x43 0x52    
   \              0x4C 0x20    
   \              0x69 0x73    
   \              0x20 0x73    
   \              0x69 0x67    
   \              0x6E 0x65    
   \              0x64 0x20    
   \              0x77 0x69    
   \              0x74 0x68    
   \              0x20 0x61    
   \              0x6E 0x20    
   \              0x75 0x6E    
   \              0x61 0x63    
   \              0x63 0x65    
   \              0x70 0x74    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x68    
   \              0x61 0x73    
   \              0x68 0x2E    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_18:
   \   00000000   0x54 0x68          DC8 54H, 68H, 65H, 20H, 43H, 52H, 4CH, 20H
   \              0x65 0x20    
   \              0x43 0x52    
   \              0x4C 0x20    
   \   00000008   0x69 0x73          DC8 69H, 73H, 20H, 73H, 69H, 67H, 6EH, 65H
   \              0x20 0x73    
   \              0x69 0x67    
   \              0x6E 0x65    
   \   00000010   0x64 0x20          DC8 64H, 20H, 77H, 69H, 74H, 68H, 20H, 61H
   \              0x77 0x69    
   \              0x74 0x68    
   \              0x20 0x61    
   \   00000018   0x6E 0x20          DC8 6EH, 20H, 75H, 6EH, 61H, 63H, 63H, 65H
   \              0x75 0x6E    
   \              0x61 0x63    
   \              0x63 0x65    
   \   00000020   0x70 0x74          DC8 70H, 74H, 61H, 62H, 6CH, 65H, 20H, 50H
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x50    
   \   00000028   0x4B 0x20          DC8 4BH, 20H, 61H, 6CH, 67H, 20H, 28H, 65H
   \              0x61 0x6C    
   \              0x67 0x20    
   \              0x28 0x65    
   \   00000030   0x67 0x20          DC8 67H, 20H, 52H, 53H, 41H, 20H, 76H, 73H
   \              0x52 0x53    
   \              0x41 0x20    
   \              0x76 0x73    
   \   00000038   0x20 0x45          DC8 20H, 45H, 43H, 44H, 53H, 41H, 29H, 2EH
   \              0x43 0x44    
   \              0x53 0x41    
   \              0x29 0x2E    
   \   00000040   0x00               DC8 0
   \   00000041   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_19:
   \   00000000   0x54 0x68          DC8 54H, 68H, 65H, 20H, 43H, 52H, 4CH, 20H
   \              0x65 0x20    
   \              0x43 0x52    
   \              0x4C 0x20    
   \   00000008   0x69 0x73          DC8 69H, 73H, 20H, 73H, 69H, 67H, 6EH, 65H
   \              0x20 0x73    
   \              0x69 0x67    
   \              0x6E 0x65    
   \   00000010   0x64 0x20          DC8 64H, 20H, 77H, 69H, 74H, 68H, 20H, 61H
   \              0x77 0x69    
   \              0x74 0x68    
   \              0x20 0x61    
   \   00000018   0x6E 0x20          DC8 6EH, 20H, 75H, 6EH, 61H, 63H, 63H, 65H
   \              0x75 0x6E    
   \              0x61 0x63    
   \              0x63 0x65    
   \   00000020   0x70 0x74          DC8 70H, 74H, 61H, 62H, 6CH, 65H, 20H, 6BH
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x6B    
   \   00000028   0x65 0x79          DC8 65H, 79H, 20H, 28H, 65H, 67H, 20H, 62H
   \              0x20 0x28    
   \              0x65 0x67    
   \              0x20 0x62    
   \   00000030   0x61 0x64          DC8 61H, 64H, 20H, 63H, 75H, 72H, 76H, 65H
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x76 0x65    
   \   00000038   0x2C 0x20          DC8 2CH, 20H, 52H, 53H, 41H, 20H, 74H, 6FH
   \              0x52 0x53    
   \              0x41 0x20    
   \              0x74 0x6F    
   \   00000040   0x6F 0x20          DC8 6FH, 20H, 73H, 68H, 6FH, 72H, 74H, 29H
   \              0x73 0x68    
   \              0x6F 0x72    
   \              0x74 0x29    
   \   00000048   0x2E 0x00          DC8 2EH, 0
   \   0000004A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 1, keep-with-next
   \                     ?_22:
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_23:
   \   00000000   0x2C 0x20          DC8 ", "
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_41:
   \   00000000   0x3F 0x3F          DC8 "???"
   \              0x3F 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_56:
   \   00000000   0x0A 0x25          DC8 "\012%ssubject alt name  : "
   \              0x73 0x73    
   \              0x75 0x62    
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x20 0x61    
   \              0x6C 0x74    
   \              0x20 0x6E    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_57:
   \   00000000   0x0A 0x25          DC8 "\012%scert. type        : "
   \              0x73 0x63    
   \              0x65 0x72    
   \              0x74 0x2E    
   \              0x20 0x74    
   \              0x79 0x70    
   \              0x65 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_58:
   \   00000000   0x0A 0x25          DC8 "\012%skey usage         : "
   \              0x73 0x6B    
   \              0x65 0x79    
   \              0x20 0x75    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_59:
   \   00000000   0x0A 0x25          DC8 "\012%sext key usage     : "
   \              0x73 0x65    
   \              0x78 0x74    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x20 0x75    
   \              0x73 0x61    
   \              0x67 0x65    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_42:
   \   00000000   0x25 0x73          DC8 "%s%s"
   \              0x25 0x73    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable80:
   \   00000000   0x........         DC32     ?_53

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable80_1:
   \   00000000   0x........         DC32     ?_54

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable80_2:
   \   00000000   0x........         DC32     ?_52

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable80_3:
   \   00000000   0x........         DC32     ?_55

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable80_4:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable80_5:
   \   00000000   0x2C 0x20          DC8      0x2C, 0x20, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_61:
   \   00000000   0x25 0x73          DC8 "%s%s\012"
   \              0x25 0x73    
   \              0x0A 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_62:
   \   00000000   0x25 0x73          DC8 "%sUnknown reason (this should not happen)\012"
   \              0x55 0x6E    
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x72 0x65    
   \              0x61 0x73    
   \              0x6F 0x6E    
   \              0x20 0x28    
   \              0x74 0x68    
   \              0x69 0x73    
   \              0x20 0x73    
   \              0x68 0x6F    
   \              0x75 0x6C    
   \              0x64 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x68 0x61    
   \              0x70 0x70    
   \              0x65 0x6E    
   \              0x29 0x0A    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable82:
   \   00000000   0x3F 0x3F          DC8      "\?\?\?"
   \              0x3F 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable82_1:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable82_2:
   \   00000000   0xFFFFD680         DC32     0xffffd680

   \                                 In section .text, align 4, keep-with-next
   \                     ?_63:
   \   00000000   0x55 0x1D          DC8 55H, 1DH, 25H, 0, 0
   \              0x25 0x00    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83:
   \   00000000   0xFFFF7FFE         DC32     0xffff7ffe

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_1:
   \   00000000   0x00008001         DC32     0x8001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable83_2:
   \   00000000   0xFFFFD800         DC32     0xffffd800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable84:
   \   00000000   0x00008001         DC32     0x8001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable85:
   \   00000000   0xFFFFD000         DC32     0xffffd000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable85_1:
   \   00000000   0x00008001         DC32     0x8001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable86:
   \   00000000   0x2A 0x2E          DC8      0x2A, 0x2E, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable86_1:
   \   00000000   0x55 0x04          DC8      "U\004\003"
   \              0x03 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable86_2:
   \   00000000   0x00008001         DC32     0x8001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable86_3:
   \   00000000   0xFFFFD900         DC32     0xffffd900

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable86_4:
   \   00000000   0xFFFFD000         DC32     0xffffd000

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_43:
   \   00000000   0x0A 0x43          DC8 "\012Certificate is uninitialised!\012"
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x75 0x6E    
   \              0x69 0x6E    
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x73 0x65    
   \              0x64 0x21    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_44:
   \   00000000   0x25 0x73          DC8 "%scert. version     : %d\012"
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x2E 0x20    
   \              0x76 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_45:
   \   00000000   0x25 0x73          DC8 "%sserial number     : "
   \              0x73 0x65    
   \              0x72 0x69    
   \              0x61 0x6C    
   \              0x20 0x6E    
   \              0x75 0x6D    
   \              0x62 0x65    
   \              0x72 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x3A 0x20    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_46:
   \   00000000   0x0A 0x25          DC8 "\012%sissuer name       : "
   \              0x73 0x69    
   \              0x73 0x73    
   \              0x75 0x65    
   \              0x72 0x20    
   \              0x6E 0x61    
   \              0x6D 0x65    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_47:
   \   00000000   0x0A 0x25          DC8 "\012%ssubject name      : "
   \              0x73 0x73    
   \              0x75 0x62    
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x20 0x6E    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_48:
   \   00000000   0x0A 0x25          DC8 0AH, 25H, 73H, 69H, 73H, 73H, 75H, 65H
   \              0x73 0x69    
   \              0x73 0x73    
   \              0x75 0x65    
   \   00000008   0x64 0x20          DC8 64H, 20H, 20H, 6FH, 6EH, 20H, 20H, 20H
   \              0x20 0x6F    
   \              0x6E 0x20    
   \              0x20 0x20    
   \   00000010   0x20 0x20          DC8 20H, 20H, 20H, 20H, 20H, 3AH, 20H, 25H
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x25    
   \   00000018   0x30 0x34          DC8 30H, 34H, 64H, 2DH, 25H, 30H, 32H, 64H
   \              0x64 0x2D    
   \              0x25 0x30    
   \              0x32 0x64    
   \   00000020   0x2D 0x25          DC8 2DH, 25H, 30H, 32H, 64H, 20H, 25H, 30H
   \              0x30 0x32    
   \              0x64 0x20    
   \              0x25 0x30    
   \   00000028   0x32 0x64          DC8 32H, 64H, 3AH, 25H, 30H, 32H, 64H, 3AH
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x64 0x3A    
   \   00000030   0x25 0x30          DC8 25H, 30H, 32H, 64H, 0
   \              0x32 0x64    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_49:
   \   00000000   0x0A 0x25          DC8 0AH, 25H, 73H, 65H, 78H, 70H, 69H, 72H
   \              0x73 0x65    
   \              0x78 0x70    
   \              0x69 0x72    
   \   00000008   0x65 0x73          DC8 65H, 73H, 20H, 6FH, 6EH, 20H, 20H, 20H
   \              0x20 0x6F    
   \              0x6E 0x20    
   \              0x20 0x20    
   \   00000010   0x20 0x20          DC8 20H, 20H, 20H, 20H, 20H, 3AH, 20H, 25H
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x25    
   \   00000018   0x30 0x34          DC8 30H, 34H, 64H, 2DH, 25H, 30H, 32H, 64H
   \              0x64 0x2D    
   \              0x25 0x30    
   \              0x32 0x64    
   \   00000020   0x2D 0x25          DC8 2DH, 25H, 30H, 32H, 64H, 20H, 25H, 30H
   \              0x30 0x32    
   \              0x64 0x20    
   \              0x25 0x30    
   \   00000028   0x32 0x64          DC8 32H, 64H, 3AH, 25H, 30H, 32H, 64H, 3AH
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x64 0x3A    
   \   00000030   0x25 0x30          DC8 25H, 30H, 32H, 64H, 0
   \              0x32 0x64    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_50:
   \   00000000   0x0A 0x25          DC8 "\012%ssigned using      : "
   \              0x73 0x73    
   \              0x69 0x67    
   \              0x6E 0x65    
   \              0x64 0x20    
   \              0x75 0x73    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_51:
   \   00000000   0x0A 0x25          DC8 "\012%s%-18s: %d bits"
   \              0x73 0x25    
   \              0x2D 0x31    
   \              0x38 0x73    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x62    
   \              0x69 0x74    
   \              0x73 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_52:
   \   00000000   0x0A 0x25          DC8 "\012%sbasic constraints : CA=%s"
   \              0x73 0x62    
   \              0x61 0x73    
   \              0x69 0x63    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x73 0x74    
   \              0x72 0x61    
   \              0x69 0x6E    
   \              0x74 0x73    
   \              0x20 0x3A    
   \              0x20 0x43    
   \              0x41 0x3D    
   \              0x25 0x73    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_53:
   \   00000000   0x74 0x72          DC8 "true"
   \              0x75 0x65    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_54:
   \   00000000   0x66 0x61          DC8 "false"
   \              0x6C 0x73    
   \              0x65 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_55:
   \   00000000   0x2C 0x20          DC8 ", max_pathlen=%d"
   \              0x6D 0x61    
   \              0x78 0x5F    
   \              0x70 0x61    
   \              0x74 0x68    
   \              0x6C 0x65    
   \              0x6E 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_60:
   \   00000000   0x0A 0x00          DC8 "\012"

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_64:
   \   00000000   0x2A 0x2E          DC8 "*."
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_65:
   \   00000000   0x55 0x04          DC8 "U\004\003"
   \              0x03 0x00    
   2424          
   2425          #endif /* MBEDTLS_X509_CRT_PARSE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   mbedtls_x509_crt_check_extended_key_usage
        24   -> memcmp
       0   mbedtls_x509_crt_check_key_usage
      24   mbedtls_x509_crt_free
        24   -> __aeabi_memclr
        24   -> free
        24   -> mbedtls_pk_free
      88   mbedtls_x509_crt_info
        88   -> mbedtls_oid_get_extended_key_usage
        88   -> mbedtls_pk_get_bitlen
        88   -> mbedtls_pk_get_name
        88   -> mbedtls_x509_dn_gets
        88   -> mbedtls_x509_key_size_helper
        88   -> mbedtls_x509_serial_gets
        88   -> mbedtls_x509_sig_alg_gets
        88   -> snprintf
        88   -> x509_info_cert_type
        88   -> x509_info_key_usage
       8   mbedtls_x509_crt_init
         8   -> __aeabi_memclr4
      16   mbedtls_x509_crt_is_revoked
        16   -> mbedtls_x509_time_is_past
        16   -> memcmp
      64   mbedtls_x509_crt_parse
        64   -> __iar_Strstr
        64   -> mbedtls_pem_free
        64   -> mbedtls_pem_init
        64   -> mbedtls_pem_read_buffer
        64   -> mbedtls_x509_crt_parse_der
      40   mbedtls_x509_crt_parse_der
        40   -> __aeabi_memclr4
        40   -> calloc
        40   -> free
        40   -> x509_crt_parse_der_core
      24   mbedtls_x509_crt_verify
        24   -> mbedtls_x509_crt_verify_with_profile
      32   mbedtls_x509_crt_verify_info
        32   -> snprintf
      64   mbedtls_x509_crt_verify_with_profile
        64   -> mbedtls_pk_get_bitlen
        64   -> mbedtls_pk_get_type
        64   -> memcmp
        64   -> strlen
        64   -> x509_crt_verify_child
        64   -> x509_crt_verify_top
        64   -> x509_memcasecmp
        64   -> x509_name_cmp
      72   x509_crt_parse_der_core
        72   -> __aeabi_memcpy
        72   -> calloc
        72   -> mbedtls_asn1_get_int
        72   -> mbedtls_asn1_get_tag
        72   -> mbedtls_pk_parse_subpubkey
        72   -> mbedtls_x509_crt_free
        72   -> mbedtls_x509_get_alg
        72   -> mbedtls_x509_get_name
        72   -> mbedtls_x509_get_serial
        72   -> mbedtls_x509_get_sig
        72   -> mbedtls_x509_get_sig_alg
        72   -> mbedtls_x509_get_time
        72   -> memcmp
        72   -> x509_get_crt_ext
     136   x509_crt_verify_child
       136   -- Indirect call
       136   -> mbedtls_md
       136   -> mbedtls_md_get_size
       136   -> mbedtls_md_info_from_type
       136   -> mbedtls_pk_get_bitlen
       136   -> mbedtls_pk_verify_ext
       136   -> mbedtls_x509_time_is_future
       136   -> mbedtls_x509_time_is_past
       136   -> x509_crt_verify_child
       136   -> x509_crt_verify_top
       136   -> x509_crt_verifycrl
       136   -> x509_name_cmp
     136   x509_crt_verify_top
       136   -- Indirect call
       136   -> mbedtls_md
       136   -> mbedtls_md_get_size
       136   -> mbedtls_md_info_from_type
       136   -> mbedtls_pk_get_bitlen
       136   -> mbedtls_pk_verify_ext
       136   -> mbedtls_x509_time_is_future
       136   -> mbedtls_x509_time_is_past
       136   -> memcmp
       136   -> x509_crt_verifycrl
       136   -> x509_name_cmp
     112   x509_crt_verifycrl
       112   -> mbedtls_md
       112   -> mbedtls_md_get_size
       112   -> mbedtls_md_info_from_type
       112   -> mbedtls_pk_get_bitlen
       112   -> mbedtls_pk_verify_ext
       112   -> mbedtls_x509_time_is_future
       112   -> mbedtls_x509_time_is_past
       112   -> memcmp
      72   x509_get_crt_ext
        72   -> __aeabi_memclr4
        72   -> mbedtls_asn1_get_bitstring
        72   -> mbedtls_asn1_get_bool
        72   -> mbedtls_asn1_get_int
        72   -> mbedtls_asn1_get_sequence_of
        72   -> mbedtls_asn1_get_tag
        72   -> mbedtls_oid_get_x509_ext_type
        72   -> mbedtls_x509_get_ext
        72   -> x509_get_subject_alt_name
      32   x509_get_subject_alt_name
        32   -> calloc
        32   -> mbedtls_asn1_get_len
        32   -> mbedtls_asn1_get_tag
      24   x509_info_cert_type
        24   -> snprintf
      24   x509_info_key_usage
        24   -> snprintf
       8   x509_memcasecmp
      24   x509_name_cmp
        24   -> memcmp


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable74
       4  ??DataTable74_1
       4  ??DataTable74_2
       4  ??DataTable74_3
       4  ??DataTable74_4
       4  ??DataTable74_5
       4  ??DataTable74_6
       4  ??DataTable75
       4  ??DataTable75_1
       4  ??DataTable75_2
       4  ??DataTable76
       4  ??DataTable76_1
       4  ??DataTable76_2
       4  ??DataTable76_3
       4  ??DataTable77
       4  ??DataTable77_1
       4  ??DataTable78
       4  ??DataTable78_1
       4  ??DataTable78_2
       4  ??DataTable78_3
       4  ??DataTable78_4
       4  ??DataTable78_5
       4  ??DataTable79
       4  ??DataTable79_1
       4  ??DataTable79_2
       4  ??DataTable79_3
       4  ??DataTable80
       4  ??DataTable80_1
       4  ??DataTable80_2
       4  ??DataTable80_3
       4  ??DataTable80_4
       4  ??DataTable80_5
       4  ??DataTable82
       4  ??DataTable82_1
       4  ??DataTable82_2
       4  ??DataTable83
       4  ??DataTable83_1
       4  ??DataTable83_2
       4  ??DataTable84
       4  ??DataTable85
       4  ??DataTable85_1
       4  ??DataTable86
       4  ??DataTable86_1
       4  ??DataTable86_2
       4  ??DataTable86_3
       4  ??DataTable86_4
      10  ?Subroutine0
      40  ?_0
      48  ?_1
      28  ?_10
      44  ?_11
      52  ?_12
      48  ?_13
      56  ?_14
      76  ?_15
      84  ?_16
      48  ?_17
      68  ?_18
      76  ?_19
      72  ?_2
      28  ?_20
      28  ?_21
       1  ?_22
       4  ?_23
      16  ?_24
      16  ?_25
       8  ?_26
      20  ?_27
      12  ?_28
      12  ?_29
      60  ?_3
      12  ?_30
      20  ?_31
      20  ?_32
      20  ?_33
      20  ?_34
      20  ?_35
      16  ?_36
      16  ?_37
      12  ?_38
      16  ?_39
      52  ?_4
      16  ?_40
       4  ?_41
       8  ?_42
      32  ?_43
      28  ?_44
      24  ?_45
      24  ?_46
      24  ?_47
      56  ?_48
      56  ?_49
      20  ?_5
      24  ?_50
      20  ?_51
      32  ?_52
       8  ?_53
       8  ?_54
      20  ?_55
      24  ?_56
      24  ?_57
      24  ?_58
      24  ?_59
      24  ?_6
       2  ?_60
       8  ?_61
      44  ?_62
       8  ?_63
       4  ?_64
       4  ?_65
      12  ?_66
      12  ?_67
      12  ?_68
      40  ?_7
      48  ?_8
      48  ?_9
      76  mbedtls_x509_crt_check_extended_key_usage
      42  mbedtls_x509_crt_check_key_usage
     204  mbedtls_x509_crt_free
    1086  mbedtls_x509_crt_info
      12  mbedtls_x509_crt_init
      60  mbedtls_x509_crt_is_revoked
     214  mbedtls_x509_crt_parse
     144  mbedtls_x509_crt_parse_der
      16  mbedtls_x509_crt_profile_default
      16  mbedtls_x509_crt_profile_next
      16  mbedtls_x509_crt_profile_suiteb
      30  mbedtls_x509_crt_verify
     100  mbedtls_x509_crt_verify_info
     740  mbedtls_x509_crt_verify_with_profile
     836  x509_crt_parse_der_core
     594  x509_crt_verify_child
     168  x509_crt_verify_strings
     644  x509_crt_verify_top
     372  x509_crt_verifycrl
     588  x509_get_crt_ext
     166  x509_get_subject_alt_name
     240  x509_info_cert_type
     280  x509_info_key_usage
      54  x509_memcasecmp
     166  x509_name_cmp

 
 1 475 bytes in section .rodata
 7 518 bytes in section .text
 
 7 518 bytes of CODE  memory
 1 475 bytes of CONST memory

Errors: none
Warnings: none
