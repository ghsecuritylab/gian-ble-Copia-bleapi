###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:34
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\mbedtls\src\sha256.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\sha256.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\sha256.s.txt
#        -o .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\sha256.o
#        .\mbed-os\features\mbedtls\src\sha256.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\sha256.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\sha256.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\mbedtls\src\sha256.c
      1          /*
      2           *  FIPS-180-2 compliant SHA-256 implementation
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          /*
     22           *  The SHA-256 Secure Hash Standard was published by NIST in 2002.
     23           *
     24           *  http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf
     25           */
     26          
     27          #if !defined(MBEDTLS_CONFIG_FILE)
     28          #include "mbedtls/config.h"
     29          #else
     30          #include MBEDTLS_CONFIG_FILE
     31          #endif
     32          
     33          #if defined(MBEDTLS_SHA256_C)
     34          
     35          #include "mbedtls/sha256.h"
     36          
     37          #include <string.h>
     38          
     39          #if defined(MBEDTLS_SELF_TEST)
     40          #if defined(MBEDTLS_PLATFORM_C)
     41          #include "mbedtls/platform.h"
     42          #else
     43          #include <stdio.h>
     44          #include <stdlib.h>
     45          #define mbedtls_printf printf
     46          #define mbedtls_calloc    calloc
     47          #define mbedtls_free       free
     48          #endif /* MBEDTLS_PLATFORM_C */
     49          #endif /* MBEDTLS_SELF_TEST */
     50          
     51          #if !defined(MBEDTLS_SHA256_ALT)
     52          
     53          /* Implementation that should never be optimized out by the compiler */
     54          static void mbedtls_zeroize( void *v, size_t n ) {
     55              volatile unsigned char *p = v; while( n-- ) *p++ = 0;
     56          }
     57          
     58          /*
     59           * 32-bit integer manipulation macros (big endian)
     60           */
     61          #ifndef GET_UINT32_BE
     62          #define GET_UINT32_BE(n,b,i)                            \
     63          do {                                                    \
     64              (n) = ( (uint32_t) (b)[(i)    ] << 24 )             \
     65                  | ( (uint32_t) (b)[(i) + 1] << 16 )             \
     66                  | ( (uint32_t) (b)[(i) + 2] <<  8 )             \
     67                  | ( (uint32_t) (b)[(i) + 3]       );            \
     68          } while( 0 )
     69          #endif
     70          
     71          #ifndef PUT_UINT32_BE
     72          #define PUT_UINT32_BE(n,b,i)                            \
     73          do {                                                    \
     74              (b)[(i)    ] = (unsigned char) ( (n) >> 24 );       \
     75              (b)[(i) + 1] = (unsigned char) ( (n) >> 16 );       \
     76              (b)[(i) + 2] = (unsigned char) ( (n) >>  8 );       \
     77              (b)[(i) + 3] = (unsigned char) ( (n)       );       \
     78          } while( 0 )
     79          #endif
     80          

   \                                 In section .text, align 2, keep-with-next
     81          void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
     82          {
   \                     mbedtls_sha256_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     83              memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
   \   00000002   0x216C             MOVS     R1,#+108
   \   00000004   0x.... 0x....      BL       __aeabi_memclr4
     84          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
     85          

   \                                 In section .text, align 2, keep-with-next
     86          void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
     87          {
     88              if( ctx == NULL )
   \                     mbedtls_sha256_free: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD100             BNE      ??mbedtls_sha256_free_0
   \   00000004   0x4770             BX       LR
     89                  return;
     90          
     91              mbedtls_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
   \                     ??mbedtls_sha256_free_0: (+1)
   \   00000006   0xB580             PUSH     {R7,LR}
   \   00000008   0x216C             MOVS     R1,#+108
   \   0000000A   0x.... 0x....      BL       __aeabi_memclr
     92          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
     93          

   \                                 In section .text, align 2, keep-with-next
     94          void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
     95                                     const mbedtls_sha256_context *src )
     96          {
   \                     mbedtls_sha256_clone: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     97              *dst = *src;
   \   00000002   0x226C             MOVS     R2,#+108
   \   00000004   0x.... 0x....      BL       __aeabi_memcpy4
     98          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
     99          
    100          /*
    101           * SHA-256 context setup
    102           */

   \                                 In section .text, align 2, keep-with-next
    103          void mbedtls_sha256_starts( mbedtls_sha256_context *ctx, int is224 )
    104          {
    105              ctx->total[0] = 0;
   \                     mbedtls_sha256_starts: (+1)
   \   00000000   0x2200             MOVS     R2,#+0
   \   00000002   0x6002             STR      R2,[R0, #+0]
    106              ctx->total[1] = 0;
   \   00000004   0x6042             STR      R2,[R0, #+4]
    107          
    108              if( is224 == 0 )
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD10F             BNE      ??mbedtls_sha256_starts_0
    109              {
    110                  /* SHA-256 */
    111                  ctx->state[0] = 0x6A09E667;
   \   0000000A   0x....             LDR      R2,??DataTable10  ;; 0x6a09e667
   \   0000000C   0x6082             STR      R2,[R0, #+8]
    112                  ctx->state[1] = 0xBB67AE85;
   \   0000000E   0x....             LDR      R2,??DataTable10_1  ;; 0xbb67ae85
   \   00000010   0x60C2             STR      R2,[R0, #+12]
    113                  ctx->state[2] = 0x3C6EF372;
   \   00000012   0x....             LDR      R2,??DataTable10_2  ;; 0x3c6ef372
   \   00000014   0x6102             STR      R2,[R0, #+16]
    114                  ctx->state[3] = 0xA54FF53A;
   \   00000016   0x....             LDR      R2,??DataTable10_3  ;; 0xa54ff53a
   \   00000018   0x6142             STR      R2,[R0, #+20]
    115                  ctx->state[4] = 0x510E527F;
   \   0000001A   0x....             LDR      R2,??DataTable10_4  ;; 0x510e527f
   \   0000001C   0x6182             STR      R2,[R0, #+24]
    116                  ctx->state[5] = 0x9B05688C;
   \   0000001E   0x....             LDR      R2,??DataTable10_5  ;; 0x9b05688c
   \   00000020   0x61C2             STR      R2,[R0, #+28]
    117                  ctx->state[6] = 0x1F83D9AB;
   \   00000022   0x....             LDR      R2,??DataTable10_6  ;; 0x1f83d9ab
   \   00000024   0x6202             STR      R2,[R0, #+32]
    118                  ctx->state[7] = 0x5BE0CD19;
   \   00000026   0x....             LDR      R2,??DataTable10_7  ;; 0x5be0cd19
   \   00000028   0xE00E             B        ??mbedtls_sha256_starts_1
    119              }
    120              else
    121              {
    122                  /* SHA-224 */
    123                  ctx->state[0] = 0xC1059ED8;
   \                     ??mbedtls_sha256_starts_0: (+1)
   \   0000002A   0x....             LDR      R2,??DataTable10_8  ;; 0xc1059ed8
   \   0000002C   0x6082             STR      R2,[R0, #+8]
    124                  ctx->state[1] = 0x367CD507;
   \   0000002E   0x....             LDR      R2,??DataTable10_9  ;; 0x367cd507
   \   00000030   0x60C2             STR      R2,[R0, #+12]
    125                  ctx->state[2] = 0x3070DD17;
   \   00000032   0x....             LDR      R2,??DataTable10_10  ;; 0x3070dd17
   \   00000034   0x6102             STR      R2,[R0, #+16]
    126                  ctx->state[3] = 0xF70E5939;
   \   00000036   0x....             LDR      R2,??DataTable10_11  ;; 0xf70e5939
   \   00000038   0x6142             STR      R2,[R0, #+20]
    127                  ctx->state[4] = 0xFFC00B31;
   \   0000003A   0x....             LDR      R2,??DataTable10_12  ;; 0xffc00b31
   \   0000003C   0x6182             STR      R2,[R0, #+24]
    128                  ctx->state[5] = 0x68581511;
   \   0000003E   0x....             LDR      R2,??DataTable10_13  ;; 0x68581511
   \   00000040   0x61C2             STR      R2,[R0, #+28]
    129                  ctx->state[6] = 0x64F98FA7;
   \   00000042   0x....             LDR      R2,??DataTable10_14  ;; 0x64f98fa7
   \   00000044   0x6202             STR      R2,[R0, #+32]
    130                  ctx->state[7] = 0xBEFA4FA4;
   \   00000046   0x....             LDR      R2,??DataTable10_15  ;; 0xbefa4fa4
   \                     ??mbedtls_sha256_starts_1: (+1)
   \   00000048   0x6242             STR      R2,[R0, #+36]
    131              }
    132          
    133              ctx->is224 = is224;
   \   0000004A   0x6681             STR      R1,[R0, #+104]
    134          }
   \   0000004C   0x4770             BX       LR               ;; return
    135          
    136          #if !defined(MBEDTLS_SHA256_PROCESS_ALT)

   \                                 In section .rodata, align 4, keep-with-next
    137          static const uint32_t K[] =
   \                     K:
   \   00000000   0x428A2F98         DC32 1116352408, 1899447441, 3049323471, 3921009573, 961987163
   \              0x71374491   
   \              0xB5C0FBCF   
   \              0xE9B5DBA5   
   \              0x3956C25B   
   \   00000014   0x59F111F1         DC32 1508970993, 2453635748, 2870763221, 3624381080, 310598401
   \              0x923F82A4   
   \              0xAB1C5ED5   
   \              0xD807AA98   
   \              0x12835B01   
   \   00000028   0x243185BE         DC32 607225278, 1426881987, 1925078388, 2162078206, 2614888103
   \              0x550C7DC3   
   \              0x72BE5D74   
   \              0x80DEB1FE   
   \              0x9BDC06A7   
   \   0000003C   0xC19BF174         DC32 3248222580, 3835390401, 4022224774, 264347078, 604807628
   \              0xE49B69C1   
   \              0xEFBE4786   
   \              0x0FC19DC6   
   \              0x240CA1CC   
   \   00000050   0x2DE92C6F         DC32 770255983, 1249150122, 1555081692, 1996064986, 2554220882
   \              0x4A7484AA   
   \              0x5CB0A9DC   
   \              0x76F988DA   
   \              0x983E5152   
   \   00000064   0xA831C66D         DC32 2821834349, 2952996808, 3210313671, 3336571891, 3584528711
   \              0xB00327C8   
   \              0xBF597FC7   
   \              0xC6E00BF3   
   \              0xD5A79147   
   \   00000078   0x06CA6351         DC32 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291
   \              0x14292967   
   \              0x27B70A85   
   \              0x2E1B2138   
   \              0x4D2C6DFC   
   \              0x53380D13   
   \   00000090   0x650A7354         DC32 1695183700, 1986661051, 2177026350, 2456956037, 2730485921
   \              0x766A0ABB   
   \              0x81C2C92E   
   \              0x92722C85   
   \              0xA2BFE8A1   
   \   000000A4   0xA81A664B         DC32 2820302411, 3259730800, 3345764771, 3516065817, 3600352804
   \              0xC24B8B70   
   \              0xC76C51A3   
   \              0xD192E819   
   \              0xD6990624   
   \   000000B8   0xF40E3585         DC32 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877
   \              0x106AA070   
   \              0x19A4C116   
   \              0x1E376C08   
   \              0x2748774C   
   \              0x34B0BCB5   
   \   000000D0   0x391C0CB3         DC32 958139571, 1322822218, 1537002063, 1747873779, 1955562222
   \              0x4ED8AA4A   
   \              0x5B9CCA4F   
   \              0x682E6FF3   
   \              0x748F82EE   
   \   000000E4   0x78A5636F         DC32 2024104815, 2227730452, 2361852424, 2428436474, 2756734187
   \              0x84C87814   
   \              0x8CC70208   
   \              0x90BEFFFA   
   \              0xA4506CEB   
   \   000000F8   0xBEF9A3F7         DC32 3204031479, 3329325298
   \              0xC67178F2   
    138          {
    139              0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
    140              0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
    141              0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
    142              0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
    143              0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
    144              0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
    145              0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
    146              0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
    147              0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
    148              0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
    149              0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
    150              0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
    151              0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
    152              0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
    153              0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
    154              0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2,
    155          };
    156          
    157          #define  SHR(x,n) ((x & 0xFFFFFFFF) >> n)
    158          #define ROTR(x,n) (SHR(x,n) | (x << (32 - n)))
    159          
    160          #define S0(x) (ROTR(x, 7) ^ ROTR(x,18) ^  SHR(x, 3))
    161          #define S1(x) (ROTR(x,17) ^ ROTR(x,19) ^  SHR(x,10))
    162          
    163          #define S2(x) (ROTR(x, 2) ^ ROTR(x,13) ^ ROTR(x,22))
    164          #define S3(x) (ROTR(x, 6) ^ ROTR(x,11) ^ ROTR(x,25))
    165          
    166          #define F0(x,y,z) ((x & y) | (z & (x | y)))
    167          #define F1(x,y,z) (z ^ (x & (y ^ z)))
    168          
    169          #define R(t)                                    \
    170          (                                               \
    171              W[t] = S1(W[t -  2]) + W[t -  7] +          \
    172                     S0(W[t - 15]) + W[t - 16]            \
    173          )
    174          
    175          #define P(a,b,c,d,e,f,g,h,x,K)                  \
    176          {                                               \
    177              temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    178              temp2 = S2(a) + F0(a,b,c);                  \
    179              d += temp1; h = temp1 + temp2;              \
    180          }
    181          

   \                                 In section .text, align 4, keep-with-next
    182          void mbedtls_sha256_process( mbedtls_sha256_context *ctx, const unsigned char data[64] )
    183          {
   \                     mbedtls_sha256_process: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB0CE             SUB      SP,SP,#+312
    184              uint32_t temp1, temp2, W[64];
    185              uint32_t A[8];
    186              unsigned int i;
    187          
    188              for( i = 0; i < 8; i++ )
    189                  A[i] = ctx->state[i];
   \   00000004   0x6880             LDR      R0,[R0, #+8]
   \   00000006   0x9A4E             LDR      R2,[SP, #+312]
   \   00000008   0x68D2             LDR      R2,[R2, #+12]
   \   0000000A   0x9B4E             LDR      R3,[SP, #+312]
   \   0000000C   0x691B             LDR      R3,[R3, #+16]
   \   0000000E   0x9C4E             LDR      R4,[SP, #+312]
   \   00000010   0x6964             LDR      R4,[R4, #+20]
   \   00000012   0x9D4E             LDR      R5,[SP, #+312]
   \   00000014   0x69AD             LDR      R5,[R5, #+24]
   \   00000016   0x9504             STR      R5,[SP, #+16]
   \   00000018   0x9D4E             LDR      R5,[SP, #+312]
   \   0000001A   0x69ED             LDR      R5,[R5, #+28]
   \   0000001C   0x9503             STR      R5,[SP, #+12]
   \   0000001E   0x9D4E             LDR      R5,[SP, #+312]
   \   00000020   0x6A2D             LDR      R5,[R5, #+32]
   \   00000022   0x9502             STR      R5,[SP, #+8]
   \   00000024   0x9D4E             LDR      R5,[SP, #+312]
   \   00000026   0x6A6D             LDR      R5,[R5, #+36]
   \   00000028   0x9501             STR      R5,[SP, #+4]
    190          
    191          #if defined(MBEDTLS_SHA256_SMALLER)
    192              for( i = 0; i < 64; i++ )
    193              {
    194                  if( i < 16 )
    195                      GET_UINT32_BE( W[i], data, 4 * i );
    196                  else
    197                      R( i );
    198          
    199                  P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    200          
    201                  temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
    202                  A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    203              }
    204          #else /* MBEDTLS_SHA256_SMALLER */
    205              for( i = 0; i < 16; i++ )
   \   0000002A   0xAD0E             ADD      R5,SP,#+56
   \   0000002C   0x000E             MOVS     R6,R1
   \   0000002E   0x2108             MOVS     R1,#+8
   \   00000030   0x9100             STR      R1,[SP, #+0]
    206                  GET_UINT32_BE( W[i], data, 4 * i );
   \                     ??mbedtls_sha256_process_0: (+1)
   \   00000032   0x7831             LDRB     R1,[R6, #+0]
   \   00000034   0x060F             LSLS     R7,R1,#+24
   \   00000036   0x7871             LDRB     R1,[R6, #+1]
   \   00000038   0x0409             LSLS     R1,R1,#+16
   \   0000003A   0x4339             ORRS     R1,R1,R7
   \   0000003C   0x78B7             LDRB     R7,[R6, #+2]
   \   0000003E   0x023F             LSLS     R7,R7,#+8
   \   00000040   0x430F             ORRS     R7,R7,R1
   \   00000042   0x78F1             LDRB     R1,[R6, #+3]
   \   00000044   0x4339             ORRS     R1,R1,R7
   \   00000046   0x6029             STR      R1,[R5, #+0]
   \   00000048   0x7931             LDRB     R1,[R6, #+4]
   \   0000004A   0x060F             LSLS     R7,R1,#+24
   \   0000004C   0x7971             LDRB     R1,[R6, #+5]
   \   0000004E   0x0409             LSLS     R1,R1,#+16
   \   00000050   0x4339             ORRS     R1,R1,R7
   \   00000052   0x79B7             LDRB     R7,[R6, #+6]
   \   00000054   0x023F             LSLS     R7,R7,#+8
   \   00000056   0x430F             ORRS     R7,R7,R1
   \   00000058   0x79F1             LDRB     R1,[R6, #+7]
   \   0000005A   0x4339             ORRS     R1,R1,R7
   \   0000005C   0x6069             STR      R1,[R5, #+4]
   \   0000005E   0x3608             ADDS     R6,R6,#+8
   \   00000060   0x3508             ADDS     R5,R5,#+8
   \   00000062   0x9900             LDR      R1,[SP, #+0]
   \   00000064   0x1E49             SUBS     R1,R1,#+1
   \   00000066   0x9100             STR      R1,[SP, #+0]
   \   00000068   0xD1E3             BNE      ??mbedtls_sha256_process_0
   \   0000006A   0x49D7             LDR      R1,??mbedtls_sha256_process_1
   \   0000006C   0x9106             STR      R1,[SP, #+24]
   \   0000006E   0xA90E             ADD      R1,SP,#+56
   \   00000070   0x9105             STR      R1,[SP, #+20]
   \   00000072   0x2102             MOVS     R1,#+2
   \   00000074   0x9107             STR      R1,[SP, #+28]
    207          
    208              for( i = 0; i < 16; i += 8 )
    209              {
    210                  P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
   \                     ??mbedtls_sha256_process_2: (+1)
   \   00000076   0x9F01             LDR      R7,[SP, #+4]
   \   00000078   0x9904             LDR      R1,[SP, #+16]
   \   0000007A   0x2506             MOVS     R5,#+6
   \   0000007C   0x41E9             RORS     R1,R1,R5
   \   0000007E   0x9D04             LDR      R5,[SP, #+16]
   \   00000080   0x260B             MOVS     R6,#+11
   \   00000082   0x41F5             RORS     R5,R5,R6
   \   00000084   0x404D             EORS     R5,R5,R1
   \   00000086   0x4629             MOV      R1,R5
   \   00000088   0x9D04             LDR      R5,[SP, #+16]
   \   0000008A   0x2619             MOVS     R6,#+25
   \   0000008C   0x41F5             RORS     R5,R5,R6
   \   0000008E   0x404D             EORS     R5,R5,R1
   \   00000090   0x197E             ADDS     R6,R7,R5
   \   00000092   0x9F02             LDR      R7,[SP, #+8]
   \   00000094   0x9D04             LDR      R5,[SP, #+16]
   \   00000096   0x46AC             MOV      R12,R5
   \   00000098   0x9D03             LDR      R5,[SP, #+12]
   \   0000009A   0x4639             MOV      R1,R7
   \   0000009C   0x4069             EORS     R1,R1,R5
   \   0000009E   0x4665             MOV      R5,R12
   \   000000A0   0x4029             ANDS     R1,R1,R5
   \   000000A2   0x4079             EORS     R1,R1,R7
   \   000000A4   0x1871             ADDS     R1,R6,R1
   \   000000A6   0x9D06             LDR      R5,[SP, #+24]
   \   000000A8   0x682D             LDR      R5,[R5, #+0]
   \   000000AA   0x1949             ADDS     R1,R1,R5
   \   000000AC   0x9D05             LDR      R5,[SP, #+20]
   \   000000AE   0x682D             LDR      R5,[R5, #+0]
   \   000000B0   0x1949             ADDS     R1,R1,R5
   \   000000B2   0x1864             ADDS     R4,R4,R1
   \   000000B4   0x2602             MOVS     R6,#+2
   \   000000B6   0x0005             MOVS     R5,R0
   \   000000B8   0x41F5             RORS     R5,R5,R6
   \   000000BA   0x270D             MOVS     R7,#+13
   \   000000BC   0x0006             MOVS     R6,R0
   \   000000BE   0x41FE             RORS     R6,R6,R7
   \   000000C0   0x406E             EORS     R6,R6,R5
   \   000000C2   0x2516             MOVS     R5,#+22
   \   000000C4   0x0007             MOVS     R7,R0
   \   000000C6   0x41EF             RORS     R7,R7,R5
   \   000000C8   0x4077             EORS     R7,R7,R6
   \   000000CA   0x19C9             ADDS     R1,R1,R7
   \   000000CC   0x0015             MOVS     R5,R2
   \   000000CE   0x4005             ANDS     R5,R5,R0
   \   000000D0   0x0016             MOVS     R6,R2
   \   000000D2   0x4306             ORRS     R6,R6,R0
   \   000000D4   0x401E             ANDS     R6,R6,R3
   \   000000D6   0x432E             ORRS     R6,R6,R5
   \   000000D8   0x198D             ADDS     R5,R1,R6
    211                  P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
   \   000000DA   0x9E02             LDR      R6,[SP, #+8]
   \   000000DC   0x2706             MOVS     R7,#+6
   \   000000DE   0x0021             MOVS     R1,R4
   \   000000E0   0x41F9             RORS     R1,R1,R7
   \   000000E2   0x468C             MOV      R12,R1
   \   000000E4   0x210B             MOVS     R1,#+11
   \   000000E6   0x0027             MOVS     R7,R4
   \   000000E8   0x41CF             RORS     R7,R7,R1
   \   000000EA   0x4661             MOV      R1,R12
   \   000000EC   0x404F             EORS     R7,R7,R1
   \   000000EE   0x46BC             MOV      R12,R7
   \   000000F0   0x2719             MOVS     R7,#+25
   \   000000F2   0x0021             MOVS     R1,R4
   \   000000F4   0x41F9             RORS     R1,R1,R7
   \   000000F6   0x4667             MOV      R7,R12
   \   000000F8   0x4079             EORS     R1,R1,R7
   \   000000FA   0x1877             ADDS     R7,R6,R1
   \   000000FC   0x9E03             LDR      R6,[SP, #+12]
   \   000000FE   0x46B4             MOV      R12,R6
   \   00000100   0x9E04             LDR      R6,[SP, #+16]
   \   00000102   0x4661             MOV      R1,R12
   \   00000104   0x4071             EORS     R1,R1,R6
   \   00000106   0x4021             ANDS     R1,R1,R4
   \   00000108   0x4666             MOV      R6,R12
   \   0000010A   0x4071             EORS     R1,R1,R6
   \   0000010C   0x1879             ADDS     R1,R7,R1
   \   0000010E   0x9E06             LDR      R6,[SP, #+24]
   \   00000110   0x6876             LDR      R6,[R6, #+4]
   \   00000112   0x1989             ADDS     R1,R1,R6
   \   00000114   0x9E05             LDR      R6,[SP, #+20]
   \   00000116   0x6876             LDR      R6,[R6, #+4]
   \   00000118   0x1989             ADDS     R1,R1,R6
   \   0000011A   0x185B             ADDS     R3,R3,R1
   \   0000011C   0x9302             STR      R3,[SP, #+8]
   \   0000011E   0x2602             MOVS     R6,#+2
   \   00000120   0x002B             MOVS     R3,R5
   \   00000122   0x41F3             RORS     R3,R3,R6
   \   00000124   0x270D             MOVS     R7,#+13
   \   00000126   0x002E             MOVS     R6,R5
   \   00000128   0x41FE             RORS     R6,R6,R7
   \   0000012A   0x405E             EORS     R6,R6,R3
   \   0000012C   0x2316             MOVS     R3,#+22
   \   0000012E   0x002F             MOVS     R7,R5
   \   00000130   0x41DF             RORS     R7,R7,R3
   \   00000132   0x4077             EORS     R7,R7,R6
   \   00000134   0x19C9             ADDS     R1,R1,R7
   \   00000136   0x0003             MOVS     R3,R0
   \   00000138   0x402B             ANDS     R3,R3,R5
   \   0000013A   0x0006             MOVS     R6,R0
   \   0000013C   0x432E             ORRS     R6,R6,R5
   \   0000013E   0x4016             ANDS     R6,R6,R2
   \   00000140   0x431E             ORRS     R6,R6,R3
   \   00000142   0x198B             ADDS     R3,R1,R6
    212                  P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
   \   00000144   0x9903             LDR      R1,[SP, #+12]
   \   00000146   0x9100             STR      R1,[SP, #+0]
   \   00000148   0x9902             LDR      R1,[SP, #+8]
   \   0000014A   0x2706             MOVS     R7,#+6
   \   0000014C   0x41F9             RORS     R1,R1,R7
   \   0000014E   0x9E02             LDR      R6,[SP, #+8]
   \   00000150   0x270B             MOVS     R7,#+11
   \   00000152   0x41FE             RORS     R6,R6,R7
   \   00000154   0x404E             EORS     R6,R6,R1
   \   00000156   0x4631             MOV      R1,R6
   \   00000158   0x9E02             LDR      R6,[SP, #+8]
   \   0000015A   0x2719             MOVS     R7,#+25
   \   0000015C   0x41FE             RORS     R6,R6,R7
   \   0000015E   0x404E             EORS     R6,R6,R1
   \   00000160   0x9900             LDR      R1,[SP, #+0]
   \   00000162   0x198F             ADDS     R7,R1,R6
   \   00000164   0x9E04             LDR      R6,[SP, #+16]
   \   00000166   0x46B4             MOV      R12,R6
   \   00000168   0x9E02             LDR      R6,[SP, #+8]
   \   0000016A   0x4661             MOV      R1,R12
   \   0000016C   0x4061             EORS     R1,R1,R4
   \   0000016E   0x4031             ANDS     R1,R1,R6
   \   00000170   0x4666             MOV      R6,R12
   \   00000172   0x4071             EORS     R1,R1,R6
   \   00000174   0x1879             ADDS     R1,R7,R1
   \   00000176   0x9E06             LDR      R6,[SP, #+24]
   \   00000178   0x68B6             LDR      R6,[R6, #+8]
   \   0000017A   0x1989             ADDS     R1,R1,R6
   \   0000017C   0x9E05             LDR      R6,[SP, #+20]
   \   0000017E   0x68B6             LDR      R6,[R6, #+8]
   \   00000180   0x1989             ADDS     R1,R1,R6
   \   00000182   0x1852             ADDS     R2,R2,R1
   \   00000184   0x9203             STR      R2,[SP, #+12]
   \   00000186   0x2602             MOVS     R6,#+2
   \   00000188   0x001A             MOVS     R2,R3
   \   0000018A   0x41F2             RORS     R2,R2,R6
   \   0000018C   0x270D             MOVS     R7,#+13
   \   0000018E   0x001E             MOVS     R6,R3
   \   00000190   0x41FE             RORS     R6,R6,R7
   \   00000192   0x4056             EORS     R6,R6,R2
   \   00000194   0x2216             MOVS     R2,#+22
   \   00000196   0x001F             MOVS     R7,R3
   \   00000198   0x41D7             RORS     R7,R7,R2
   \   0000019A   0x4077             EORS     R7,R7,R6
   \   0000019C   0x19C9             ADDS     R1,R1,R7
   \   0000019E   0x002A             MOVS     R2,R5
   \   000001A0   0x401A             ANDS     R2,R2,R3
   \   000001A2   0x002E             MOVS     R6,R5
   \   000001A4   0x431E             ORRS     R6,R6,R3
   \   000001A6   0x4006             ANDS     R6,R6,R0
   \   000001A8   0x4316             ORRS     R6,R6,R2
   \   000001AA   0x198A             ADDS     R2,R1,R6
    213                  P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
   \   000001AC   0x9904             LDR      R1,[SP, #+16]
   \   000001AE   0x9100             STR      R1,[SP, #+0]
   \   000001B0   0x9903             LDR      R1,[SP, #+12]
   \   000001B2   0x2706             MOVS     R7,#+6
   \   000001B4   0x41F9             RORS     R1,R1,R7
   \   000001B6   0x9E03             LDR      R6,[SP, #+12]
   \   000001B8   0x270B             MOVS     R7,#+11
   \   000001BA   0x41FE             RORS     R6,R6,R7
   \   000001BC   0x404E             EORS     R6,R6,R1
   \   000001BE   0x4631             MOV      R1,R6
   \   000001C0   0x9E03             LDR      R6,[SP, #+12]
   \   000001C2   0x2719             MOVS     R7,#+25
   \   000001C4   0x41FE             RORS     R6,R6,R7
   \   000001C6   0x404E             EORS     R6,R6,R1
   \   000001C8   0x9900             LDR      R1,[SP, #+0]
   \   000001CA   0x1989             ADDS     R1,R1,R6
   \   000001CC   0x9E03             LDR      R6,[SP, #+12]
   \   000001CE   0x9F02             LDR      R7,[SP, #+8]
   \   000001D0   0x4067             EORS     R7,R7,R4
   \   000001D2   0x4037             ANDS     R7,R7,R6
   \   000001D4   0x4067             EORS     R7,R7,R4
   \   000001D6   0x19C9             ADDS     R1,R1,R7
   \   000001D8   0x9E06             LDR      R6,[SP, #+24]
   \   000001DA   0x68F6             LDR      R6,[R6, #+12]
   \   000001DC   0x1989             ADDS     R1,R1,R6
   \   000001DE   0x9E05             LDR      R6,[SP, #+20]
   \   000001E0   0x68F6             LDR      R6,[R6, #+12]
   \   000001E2   0x198E             ADDS     R6,R1,R6
   \   000001E4   0x1980             ADDS     R0,R0,R6
   \   000001E6   0x2702             MOVS     R7,#+2
   \   000001E8   0x0011             MOVS     R1,R2
   \   000001EA   0x41F9             RORS     R1,R1,R7
   \   000001EC   0x468C             MOV      R12,R1
   \   000001EE   0x210D             MOVS     R1,#+13
   \   000001F0   0x0017             MOVS     R7,R2
   \   000001F2   0x41CF             RORS     R7,R7,R1
   \   000001F4   0x4661             MOV      R1,R12
   \   000001F6   0x404F             EORS     R7,R7,R1
   \   000001F8   0x46BC             MOV      R12,R7
   \   000001FA   0x2716             MOVS     R7,#+22
   \   000001FC   0x0011             MOVS     R1,R2
   \   000001FE   0x41F9             RORS     R1,R1,R7
   \   00000200   0x4667             MOV      R7,R12
   \   00000202   0x4079             EORS     R1,R1,R7
   \   00000204   0x1871             ADDS     R1,R6,R1
   \   00000206   0x001E             MOVS     R6,R3
   \   00000208   0x4016             ANDS     R6,R6,R2
   \   0000020A   0x001F             MOVS     R7,R3
   \   0000020C   0x4317             ORRS     R7,R7,R2
   \   0000020E   0x402F             ANDS     R7,R7,R5
   \   00000210   0x4337             ORRS     R7,R7,R6
   \   00000212   0x19C9             ADDS     R1,R1,R7
    214                  P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
   \   00000214   0x2706             MOVS     R7,#+6
   \   00000216   0x0006             MOVS     R6,R0
   \   00000218   0x41FE             RORS     R6,R6,R7
   \   0000021A   0x46B4             MOV      R12,R6
   \   0000021C   0x260B             MOVS     R6,#+11
   \   0000021E   0x0007             MOVS     R7,R0
   \   00000220   0x41F7             RORS     R7,R7,R6
   \   00000222   0x4666             MOV      R6,R12
   \   00000224   0x4077             EORS     R7,R7,R6
   \   00000226   0x46BC             MOV      R12,R7
   \   00000228   0x2719             MOVS     R7,#+25
   \   0000022A   0x0006             MOVS     R6,R0
   \   0000022C   0x41FE             RORS     R6,R6,R7
   \   0000022E   0x4667             MOV      R7,R12
   \   00000230   0x407E             EORS     R6,R6,R7
   \   00000232   0x19A7             ADDS     R7,R4,R6
   \   00000234   0x9E02             LDR      R6,[SP, #+8]
   \   00000236   0x46B4             MOV      R12,R6
   \   00000238   0x9E03             LDR      R6,[SP, #+12]
   \   0000023A   0x4664             MOV      R4,R12
   \   0000023C   0x4074             EORS     R4,R4,R6
   \   0000023E   0x4004             ANDS     R4,R4,R0
   \   00000240   0x4666             MOV      R6,R12
   \   00000242   0x4074             EORS     R4,R4,R6
   \   00000244   0x193C             ADDS     R4,R7,R4
   \   00000246   0x9E06             LDR      R6,[SP, #+24]
   \   00000248   0x6936             LDR      R6,[R6, #+16]
   \   0000024A   0x19A4             ADDS     R4,R4,R6
   \   0000024C   0x9E05             LDR      R6,[SP, #+20]
   \   0000024E   0x6936             LDR      R6,[R6, #+16]
   \   00000250   0x19A4             ADDS     R4,R4,R6
   \   00000252   0x192D             ADDS     R5,R5,R4
   \   00000254   0x9501             STR      R5,[SP, #+4]
   \   00000256   0x2602             MOVS     R6,#+2
   \   00000258   0x000D             MOVS     R5,R1
   \   0000025A   0x41F5             RORS     R5,R5,R6
   \   0000025C   0x270D             MOVS     R7,#+13
   \   0000025E   0x000E             MOVS     R6,R1
   \   00000260   0x41FE             RORS     R6,R6,R7
   \   00000262   0x406E             EORS     R6,R6,R5
   \   00000264   0x2516             MOVS     R5,#+22
   \   00000266   0x000F             MOVS     R7,R1
   \   00000268   0x41EF             RORS     R7,R7,R5
   \   0000026A   0x4077             EORS     R7,R7,R6
   \   0000026C   0x19E4             ADDS     R4,R4,R7
   \   0000026E   0x0015             MOVS     R5,R2
   \   00000270   0x400D             ANDS     R5,R5,R1
   \   00000272   0x0016             MOVS     R6,R2
   \   00000274   0x430E             ORRS     R6,R6,R1
   \   00000276   0x401E             ANDS     R6,R6,R3
   \   00000278   0x432E             ORRS     R6,R6,R5
   \   0000027A   0x19A4             ADDS     R4,R4,R6
    215                  P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
   \   0000027C   0x9D02             LDR      R5,[SP, #+8]
   \   0000027E   0x9500             STR      R5,[SP, #+0]
   \   00000280   0x9D01             LDR      R5,[SP, #+4]
   \   00000282   0x2706             MOVS     R7,#+6
   \   00000284   0x41FD             RORS     R5,R5,R7
   \   00000286   0x9E01             LDR      R6,[SP, #+4]
   \   00000288   0x270B             MOVS     R7,#+11
   \   0000028A   0x41FE             RORS     R6,R6,R7
   \   0000028C   0x406E             EORS     R6,R6,R5
   \   0000028E   0x4635             MOV      R5,R6
   \   00000290   0x9E01             LDR      R6,[SP, #+4]
   \   00000292   0x2719             MOVS     R7,#+25
   \   00000294   0x41FE             RORS     R6,R6,R7
   \   00000296   0x406E             EORS     R6,R6,R5
   \   00000298   0x9D00             LDR      R5,[SP, #+0]
   \   0000029A   0x19AF             ADDS     R7,R5,R6
   \   0000029C   0x9E03             LDR      R6,[SP, #+12]
   \   0000029E   0x46B4             MOV      R12,R6
   \   000002A0   0x9E01             LDR      R6,[SP, #+4]
   \   000002A2   0x4665             MOV      R5,R12
   \   000002A4   0x4045             EORS     R5,R5,R0
   \   000002A6   0x4035             ANDS     R5,R5,R6
   \   000002A8   0x4666             MOV      R6,R12
   \   000002AA   0x4075             EORS     R5,R5,R6
   \   000002AC   0x197D             ADDS     R5,R7,R5
   \   000002AE   0x9E06             LDR      R6,[SP, #+24]
   \   000002B0   0x6976             LDR      R6,[R6, #+20]
   \   000002B2   0x19AD             ADDS     R5,R5,R6
   \   000002B4   0x9E05             LDR      R6,[SP, #+20]
   \   000002B6   0x6976             LDR      R6,[R6, #+20]
   \   000002B8   0x19AD             ADDS     R5,R5,R6
   \   000002BA   0x195B             ADDS     R3,R3,R5
   \   000002BC   0x9302             STR      R3,[SP, #+8]
   \   000002BE   0x2602             MOVS     R6,#+2
   \   000002C0   0x0023             MOVS     R3,R4
   \   000002C2   0x41F3             RORS     R3,R3,R6
   \   000002C4   0x270D             MOVS     R7,#+13
   \   000002C6   0x0026             MOVS     R6,R4
   \   000002C8   0x41FE             RORS     R6,R6,R7
   \   000002CA   0x405E             EORS     R6,R6,R3
   \   000002CC   0x2316             MOVS     R3,#+22
   \   000002CE   0x0027             MOVS     R7,R4
   \   000002D0   0x41DF             RORS     R7,R7,R3
   \   000002D2   0x4077             EORS     R7,R7,R6
   \   000002D4   0x19EB             ADDS     R3,R5,R7
   \   000002D6   0x000D             MOVS     R5,R1
   \   000002D8   0x4025             ANDS     R5,R5,R4
   \   000002DA   0x000E             MOVS     R6,R1
   \   000002DC   0x4326             ORRS     R6,R6,R4
   \   000002DE   0x4016             ANDS     R6,R6,R2
   \   000002E0   0x432E             ORRS     R6,R6,R5
   \   000002E2   0x199B             ADDS     R3,R3,R6
    216                  P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
   \   000002E4   0x9D03             LDR      R5,[SP, #+12]
   \   000002E6   0x9500             STR      R5,[SP, #+0]
   \   000002E8   0x9D02             LDR      R5,[SP, #+8]
   \   000002EA   0x2706             MOVS     R7,#+6
   \   000002EC   0x41FD             RORS     R5,R5,R7
   \   000002EE   0x9E02             LDR      R6,[SP, #+8]
   \   000002F0   0x270B             MOVS     R7,#+11
   \   000002F2   0x41FE             RORS     R6,R6,R7
   \   000002F4   0x406E             EORS     R6,R6,R5
   \   000002F6   0x4635             MOV      R5,R6
   \   000002F8   0x9E02             LDR      R6,[SP, #+8]
   \   000002FA   0x2719             MOVS     R7,#+25
   \   000002FC   0x41FE             RORS     R6,R6,R7
   \   000002FE   0x406E             EORS     R6,R6,R5
   \   00000300   0x9D00             LDR      R5,[SP, #+0]
   \   00000302   0x19AD             ADDS     R5,R5,R6
   \   00000304   0x9E02             LDR      R6,[SP, #+8]
   \   00000306   0x9F01             LDR      R7,[SP, #+4]
   \   00000308   0x4047             EORS     R7,R7,R0
   \   0000030A   0x4037             ANDS     R7,R7,R6
   \   0000030C   0x4047             EORS     R7,R7,R0
   \   0000030E   0x19ED             ADDS     R5,R5,R7
   \   00000310   0x9E06             LDR      R6,[SP, #+24]
   \   00000312   0x69B6             LDR      R6,[R6, #+24]
   \   00000314   0x19AD             ADDS     R5,R5,R6
   \   00000316   0x9E05             LDR      R6,[SP, #+20]
   \   00000318   0x69B6             LDR      R6,[R6, #+24]
   \   0000031A   0x19AD             ADDS     R5,R5,R6
   \   0000031C   0x1952             ADDS     R2,R2,R5
   \   0000031E   0x9203             STR      R2,[SP, #+12]
   \   00000320   0x2602             MOVS     R6,#+2
   \   00000322   0x001A             MOVS     R2,R3
   \   00000324   0x41F2             RORS     R2,R2,R6
   \   00000326   0x270D             MOVS     R7,#+13
   \   00000328   0x001E             MOVS     R6,R3
   \   0000032A   0x41FE             RORS     R6,R6,R7
   \   0000032C   0x4056             EORS     R6,R6,R2
   \   0000032E   0x2216             MOVS     R2,#+22
   \   00000330   0x001F             MOVS     R7,R3
   \   00000332   0x41D7             RORS     R7,R7,R2
   \   00000334   0x4077             EORS     R7,R7,R6
   \   00000336   0x19EA             ADDS     R2,R5,R7
   \   00000338   0x0025             MOVS     R5,R4
   \   0000033A   0x401D             ANDS     R5,R5,R3
   \   0000033C   0x0026             MOVS     R6,R4
   \   0000033E   0x431E             ORRS     R6,R6,R3
   \   00000340   0x400E             ANDS     R6,R6,R1
   \   00000342   0x432E             ORRS     R6,R6,R5
   \   00000344   0x1992             ADDS     R2,R2,R6
    217                  P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
   \   00000346   0x9D03             LDR      R5,[SP, #+12]
   \   00000348   0x2606             MOVS     R6,#+6
   \   0000034A   0x41F5             RORS     R5,R5,R6
   \   0000034C   0x9E03             LDR      R6,[SP, #+12]
   \   0000034E   0x270B             MOVS     R7,#+11
   \   00000350   0x41FE             RORS     R6,R6,R7
   \   00000352   0x406E             EORS     R6,R6,R5
   \   00000354   0x4635             MOV      R5,R6
   \   00000356   0x9E03             LDR      R6,[SP, #+12]
   \   00000358   0x2719             MOVS     R7,#+25
   \   0000035A   0x41FE             RORS     R6,R6,R7
   \   0000035C   0x406E             EORS     R6,R6,R5
   \   0000035E   0x1986             ADDS     R6,R0,R6
   \   00000360   0x9F01             LDR      R7,[SP, #+4]
   \   00000362   0x9D03             LDR      R5,[SP, #+12]
   \   00000364   0x46AC             MOV      R12,R5
   \   00000366   0x9D02             LDR      R5,[SP, #+8]
   \   00000368   0x4638             MOV      R0,R7
   \   0000036A   0x4068             EORS     R0,R0,R5
   \   0000036C   0x4665             MOV      R5,R12
   \   0000036E   0x4028             ANDS     R0,R0,R5
   \   00000370   0x4078             EORS     R0,R0,R7
   \   00000372   0x1830             ADDS     R0,R6,R0
   \   00000374   0x9D06             LDR      R5,[SP, #+24]
   \   00000376   0x69ED             LDR      R5,[R5, #+28]
   \   00000378   0x1940             ADDS     R0,R0,R5
   \   0000037A   0x9D05             LDR      R5,[SP, #+20]
   \   0000037C   0x69ED             LDR      R5,[R5, #+28]
   \   0000037E   0x1945             ADDS     R5,R0,R5
   \   00000380   0x1948             ADDS     R0,R1,R5
   \   00000382   0x9004             STR      R0,[SP, #+16]
   \   00000384   0x2002             MOVS     R0,#+2
   \   00000386   0x0011             MOVS     R1,R2
   \   00000388   0x41C1             RORS     R1,R1,R0
   \   0000038A   0x260D             MOVS     R6,#+13
   \   0000038C   0x0010             MOVS     R0,R2
   \   0000038E   0x41F0             RORS     R0,R0,R6
   \   00000390   0x4048             EORS     R0,R0,R1
   \   00000392   0x2116             MOVS     R1,#+22
   \   00000394   0x0016             MOVS     R6,R2
   \   00000396   0x41CE             RORS     R6,R6,R1
   \   00000398   0x4046             EORS     R6,R6,R0
   \   0000039A   0x19A8             ADDS     R0,R5,R6
   \   0000039C   0x0019             MOVS     R1,R3
   \   0000039E   0x4011             ANDS     R1,R1,R2
   \   000003A0   0x001D             MOVS     R5,R3
   \   000003A2   0x4315             ORRS     R5,R5,R2
   \   000003A4   0x4025             ANDS     R5,R5,R4
   \   000003A6   0x430D             ORRS     R5,R5,R1
   \   000003A8   0x1940             ADDS     R0,R0,R5
    218              }
   \   000003AA   0x9905             LDR      R1,[SP, #+20]
   \   000003AC   0x3120             ADDS     R1,R1,#+32
   \   000003AE   0x9105             STR      R1,[SP, #+20]
   \   000003B0   0x9906             LDR      R1,[SP, #+24]
   \   000003B2   0x3120             ADDS     R1,R1,#+32
   \   000003B4   0x9106             STR      R1,[SP, #+24]
   \   000003B6   0x9907             LDR      R1,[SP, #+28]
   \   000003B8   0x1E49             SUBS     R1,R1,#+1
   \   000003BA   0x9107             STR      R1,[SP, #+28]
   \   000003BC   0xD000             BEQ      .+4
   \   000003BE   0xE65A             B        ??mbedtls_sha256_process_2
    219          
    220              for( i = 16; i < 64; i += 8 )
   \   000003C0   0xA90E             ADD      R1,SP,#+56
   \   000003C2   0x3140             ADDS     R1,R1,#+64
   \   000003C4   0x4D01             LDR      R5,??mbedtls_sha256_process_1+0x4
   \   000003C6   0xE003             B.N      ??mbedtls_sha256_process_3
   \                     ??mbedtls_sha256_process_1:
   \   000003C8   0x........         DC32     K
   \   000003CC   0x........         DC32     K+0x40
   \                     ??mbedtls_sha256_process_3: (+1)
   \   000003D0   0x9507             STR      R5,[SP, #+28]
   \   000003D2   0x2506             MOVS     R5,#+6
   \   000003D4   0x950D             STR      R5,[SP, #+52]
    221              {
    222                  P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
   \                     ??mbedtls_sha256_process_4: (+1)
   \   000003D6   0x000D             MOVS     R5,R1
   \   000003D8   0x3D3C             SUBS     R5,R5,#+60
   \   000003DA   0x682D             LDR      R5,[R5, #+0]
   \   000003DC   0x9505             STR      R5,[SP, #+20]
   \   000003DE   0x000D             MOVS     R5,R1
   \   000003E0   0x3D08             SUBS     R5,R5,#+8
   \   000003E2   0x682D             LDR      R5,[R5, #+0]
   \   000003E4   0x950C             STR      R5,[SP, #+48]
   \   000003E6   0x2611             MOVS     R6,#+17
   \   000003E8   0x41F5             RORS     R5,R5,R6
   \   000003EA   0x9E0C             LDR      R6,[SP, #+48]
   \   000003EC   0x2713             MOVS     R7,#+19
   \   000003EE   0x41FE             RORS     R6,R6,R7
   \   000003F0   0x406E             EORS     R6,R6,R5
   \   000003F2   0x9D0C             LDR      R5,[SP, #+48]
   \   000003F4   0x0AAF             LSRS     R7,R5,#+10
   \   000003F6   0x4077             EORS     R7,R7,R6
   \   000003F8   0x000D             MOVS     R5,R1
   \   000003FA   0x3D1C             SUBS     R5,R5,#+28
   \   000003FC   0x682D             LDR      R5,[R5, #+0]
   \   000003FE   0x197E             ADDS     R6,R7,R5
   \   00000400   0x9600             STR      R6,[SP, #+0]
   \   00000402   0x9D05             LDR      R5,[SP, #+20]
   \   00000404   0x2707             MOVS     R7,#+7
   \   00000406   0x41FD             RORS     R5,R5,R7
   \   00000408   0x9E05             LDR      R6,[SP, #+20]
   \   0000040A   0x2712             MOVS     R7,#+18
   \   0000040C   0x41FE             RORS     R6,R6,R7
   \   0000040E   0x406E             EORS     R6,R6,R5
   \   00000410   0x9D05             LDR      R5,[SP, #+20]
   \   00000412   0x08ED             LSRS     R5,R5,#+3
   \   00000414   0x4075             EORS     R5,R5,R6
   \   00000416   0x9E00             LDR      R6,[SP, #+0]
   \   00000418   0x1976             ADDS     R6,R6,R5
   \   0000041A   0x000D             MOVS     R5,R1
   \   0000041C   0x3D40             SUBS     R5,R5,#+64
   \   0000041E   0x682D             LDR      R5,[R5, #+0]
   \   00000420   0x1975             ADDS     R5,R6,R5
   \   00000422   0x9508             STR      R5,[SP, #+32]
   \   00000424   0x600D             STR      R5,[R1, #+0]
   \   00000426   0x9D01             LDR      R5,[SP, #+4]
   \   00000428   0x9500             STR      R5,[SP, #+0]
   \   0000042A   0x9D04             LDR      R5,[SP, #+16]
   \   0000042C   0x2706             MOVS     R7,#+6
   \   0000042E   0x41FD             RORS     R5,R5,R7
   \   00000430   0x9E04             LDR      R6,[SP, #+16]
   \   00000432   0x270B             MOVS     R7,#+11
   \   00000434   0x41FE             RORS     R6,R6,R7
   \   00000436   0x406E             EORS     R6,R6,R5
   \   00000438   0x4635             MOV      R5,R6
   \   0000043A   0x9E04             LDR      R6,[SP, #+16]
   \   0000043C   0x2719             MOVS     R7,#+25
   \   0000043E   0x41FE             RORS     R6,R6,R7
   \   00000440   0x406E             EORS     R6,R6,R5
   \   00000442   0x9D00             LDR      R5,[SP, #+0]
   \   00000444   0x19AE             ADDS     R6,R5,R6
   \   00000446   0x9600             STR      R6,[SP, #+0]
   \   00000448   0x9F02             LDR      R7,[SP, #+8]
   \   0000044A   0x9E04             LDR      R6,[SP, #+16]
   \   0000044C   0x46B4             MOV      R12,R6
   \   0000044E   0x9E03             LDR      R6,[SP, #+12]
   \   00000450   0x463D             MOV      R5,R7
   \   00000452   0x4075             EORS     R5,R5,R6
   \   00000454   0x4666             MOV      R6,R12
   \   00000456   0x4035             ANDS     R5,R5,R6
   \   00000458   0x407D             EORS     R5,R5,R7
   \   0000045A   0x9E00             LDR      R6,[SP, #+0]
   \   0000045C   0x1975             ADDS     R5,R6,R5
   \   0000045E   0x9E07             LDR      R6,[SP, #+28]
   \   00000460   0x6836             LDR      R6,[R6, #+0]
   \   00000462   0x19AD             ADDS     R5,R5,R6
   \   00000464   0x9E08             LDR      R6,[SP, #+32]
   \   00000466   0x19AD             ADDS     R5,R5,R6
   \   00000468   0x1964             ADDS     R4,R4,R5
   \   0000046A   0x9401             STR      R4,[SP, #+4]
   \   0000046C   0x2602             MOVS     R6,#+2
   \   0000046E   0x0004             MOVS     R4,R0
   \   00000470   0x41F4             RORS     R4,R4,R6
   \   00000472   0x270D             MOVS     R7,#+13
   \   00000474   0x0006             MOVS     R6,R0
   \   00000476   0x41FE             RORS     R6,R6,R7
   \   00000478   0x4066             EORS     R6,R6,R4
   \   0000047A   0x2416             MOVS     R4,#+22
   \   0000047C   0x0007             MOVS     R7,R0
   \   0000047E   0x41E7             RORS     R7,R7,R4
   \   00000480   0x4077             EORS     R7,R7,R6
   \   00000482   0x19EC             ADDS     R4,R5,R7
   \   00000484   0x0015             MOVS     R5,R2
   \   00000486   0x4005             ANDS     R5,R5,R0
   \   00000488   0x0016             MOVS     R6,R2
   \   0000048A   0x4306             ORRS     R6,R6,R0
   \   0000048C   0x401E             ANDS     R6,R6,R3
   \   0000048E   0x432E             ORRS     R6,R6,R5
   \   00000490   0x19A4             ADDS     R4,R4,R6
   \   00000492   0x9406             STR      R4,[SP, #+24]
    223                  P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
   \   00000494   0x000C             MOVS     R4,R1
   \   00000496   0x3C38             SUBS     R4,R4,#+56
   \   00000498   0x6824             LDR      R4,[R4, #+0]
   \   0000049A   0x9409             STR      R4,[SP, #+36]
   \   0000049C   0x1F0C             SUBS     R4,R1,#+4
   \   0000049E   0x6824             LDR      R4,[R4, #+0]
   \   000004A0   0x940B             STR      R4,[SP, #+44]
   \   000004A2   0x2511             MOVS     R5,#+17
   \   000004A4   0x41EC             RORS     R4,R4,R5
   \   000004A6   0x9D0B             LDR      R5,[SP, #+44]
   \   000004A8   0x2613             MOVS     R6,#+19
   \   000004AA   0x41F5             RORS     R5,R5,R6
   \   000004AC   0x4065             EORS     R5,R5,R4
   \   000004AE   0x9C0B             LDR      R4,[SP, #+44]
   \   000004B0   0x0AA6             LSRS     R6,R4,#+10
   \   000004B2   0x406E             EORS     R6,R6,R5
   \   000004B4   0x000C             MOVS     R4,R1
   \   000004B6   0x3C18             SUBS     R4,R4,#+24
   \   000004B8   0x6824             LDR      R4,[R4, #+0]
   \   000004BA   0x1937             ADDS     R7,R6,R4
   \   000004BC   0x9C09             LDR      R4,[SP, #+36]
   \   000004BE   0x2507             MOVS     R5,#+7
   \   000004C0   0x41EC             RORS     R4,R4,R5
   \   000004C2   0x9D09             LDR      R5,[SP, #+36]
   \   000004C4   0x2612             MOVS     R6,#+18
   \   000004C6   0x41F5             RORS     R5,R5,R6
   \   000004C8   0x4065             EORS     R5,R5,R4
   \   000004CA   0x9C09             LDR      R4,[SP, #+36]
   \   000004CC   0x08E4             LSRS     R4,R4,#+3
   \   000004CE   0x406C             EORS     R4,R4,R5
   \   000004D0   0x193C             ADDS     R4,R7,R4
   \   000004D2   0x9D05             LDR      R5,[SP, #+20]
   \   000004D4   0x1965             ADDS     R5,R4,R5
   \   000004D6   0x604D             STR      R5,[R1, #+4]
   \   000004D8   0x9C02             LDR      R4,[SP, #+8]
   \   000004DA   0x9400             STR      R4,[SP, #+0]
   \   000004DC   0x9C01             LDR      R4,[SP, #+4]
   \   000004DE   0x2706             MOVS     R7,#+6
   \   000004E0   0x41FC             RORS     R4,R4,R7
   \   000004E2   0x9E01             LDR      R6,[SP, #+4]
   \   000004E4   0x270B             MOVS     R7,#+11
   \   000004E6   0x41FE             RORS     R6,R6,R7
   \   000004E8   0x4066             EORS     R6,R6,R4
   \   000004EA   0x4634             MOV      R4,R6
   \   000004EC   0x9E01             LDR      R6,[SP, #+4]
   \   000004EE   0x2719             MOVS     R7,#+25
   \   000004F0   0x41FE             RORS     R6,R6,R7
   \   000004F2   0x4066             EORS     R6,R6,R4
   \   000004F4   0x9C00             LDR      R4,[SP, #+0]
   \   000004F6   0x19A6             ADDS     R6,R4,R6
   \   000004F8   0x9600             STR      R6,[SP, #+0]
   \   000004FA   0x9F03             LDR      R7,[SP, #+12]
   \   000004FC   0x9E01             LDR      R6,[SP, #+4]
   \   000004FE   0x46B4             MOV      R12,R6
   \   00000500   0x9E04             LDR      R6,[SP, #+16]
   \   00000502   0x463C             MOV      R4,R7
   \   00000504   0x4074             EORS     R4,R4,R6
   \   00000506   0x4666             MOV      R6,R12
   \   00000508   0x4034             ANDS     R4,R4,R6
   \   0000050A   0x407C             EORS     R4,R4,R7
   \   0000050C   0x9E00             LDR      R6,[SP, #+0]
   \   0000050E   0x1934             ADDS     R4,R6,R4
   \   00000510   0x9E07             LDR      R6,[SP, #+28]
   \   00000512   0x6876             LDR      R6,[R6, #+4]
   \   00000514   0x19A4             ADDS     R4,R4,R6
   \   00000516   0x1967             ADDS     R7,R4,R5
   \   00000518   0x19DB             ADDS     R3,R3,R7
   \   0000051A   0x9302             STR      R3,[SP, #+8]
   \   0000051C   0x9C06             LDR      R4,[SP, #+24]
   \   0000051E   0x2302             MOVS     R3,#+2
   \   00000520   0x41DC             RORS     R4,R4,R3
   \   00000522   0x9B06             LDR      R3,[SP, #+24]
   \   00000524   0x260D             MOVS     R6,#+13
   \   00000526   0x41F3             RORS     R3,R3,R6
   \   00000528   0x4063             EORS     R3,R3,R4
   \   0000052A   0x9C06             LDR      R4,[SP, #+24]
   \   0000052C   0x2616             MOVS     R6,#+22
   \   0000052E   0x41F4             RORS     R4,R4,R6
   \   00000530   0x405C             EORS     R4,R4,R3
   \   00000532   0x193B             ADDS     R3,R7,R4
   \   00000534   0x9C06             LDR      R4,[SP, #+24]
   \   00000536   0x4004             ANDS     R4,R4,R0
   \   00000538   0x9E06             LDR      R6,[SP, #+24]
   \   0000053A   0x4306             ORRS     R6,R6,R0
   \   0000053C   0x4016             ANDS     R6,R6,R2
   \   0000053E   0x4326             ORRS     R6,R6,R4
   \   00000540   0x199B             ADDS     R3,R3,R6
   \   00000542   0x9305             STR      R3,[SP, #+20]
    224                  P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
   \   00000544   0x000B             MOVS     R3,R1
   \   00000546   0x3B34             SUBS     R3,R3,#+52
   \   00000548   0x681B             LDR      R3,[R3, #+0]
   \   0000054A   0x930A             STR      R3,[SP, #+40]
   \   0000054C   0x9B08             LDR      R3,[SP, #+32]
   \   0000054E   0x2411             MOVS     R4,#+17
   \   00000550   0x41E3             RORS     R3,R3,R4
   \   00000552   0x9C08             LDR      R4,[SP, #+32]
   \   00000554   0x2613             MOVS     R6,#+19
   \   00000556   0x41F4             RORS     R4,R4,R6
   \   00000558   0x405C             EORS     R4,R4,R3
   \   0000055A   0x9B08             LDR      R3,[SP, #+32]
   \   0000055C   0x0A9E             LSRS     R6,R3,#+10
   \   0000055E   0x4066             EORS     R6,R6,R4
   \   00000560   0x000B             MOVS     R3,R1
   \   00000562   0x3B14             SUBS     R3,R3,#+20
   \   00000564   0x681B             LDR      R3,[R3, #+0]
   \   00000566   0x18F7             ADDS     R7,R6,R3
   \   00000568   0x9B0A             LDR      R3,[SP, #+40]
   \   0000056A   0x2407             MOVS     R4,#+7
   \   0000056C   0x41E3             RORS     R3,R3,R4
   \   0000056E   0x9C0A             LDR      R4,[SP, #+40]
   \   00000570   0x2612             MOVS     R6,#+18
   \   00000572   0x41F4             RORS     R4,R4,R6
   \   00000574   0x405C             EORS     R4,R4,R3
   \   00000576   0x9B0A             LDR      R3,[SP, #+40]
   \   00000578   0x08DB             LSRS     R3,R3,#+3
   \   0000057A   0x4063             EORS     R3,R3,R4
   \   0000057C   0x18FB             ADDS     R3,R7,R3
   \   0000057E   0x9C09             LDR      R4,[SP, #+36]
   \   00000580   0x191C             ADDS     R4,R3,R4
   \   00000582   0x608C             STR      R4,[R1, #+8]
   \   00000584   0x9B03             LDR      R3,[SP, #+12]
   \   00000586   0x9300             STR      R3,[SP, #+0]
   \   00000588   0x9B02             LDR      R3,[SP, #+8]
   \   0000058A   0x2706             MOVS     R7,#+6
   \   0000058C   0x41FB             RORS     R3,R3,R7
   \   0000058E   0x9E02             LDR      R6,[SP, #+8]
   \   00000590   0x270B             MOVS     R7,#+11
   \   00000592   0x41FE             RORS     R6,R6,R7
   \   00000594   0x405E             EORS     R6,R6,R3
   \   00000596   0x4633             MOV      R3,R6
   \   00000598   0x9E02             LDR      R6,[SP, #+8]
   \   0000059A   0x2719             MOVS     R7,#+25
   \   0000059C   0x41FE             RORS     R6,R6,R7
   \   0000059E   0x405E             EORS     R6,R6,R3
   \   000005A0   0x9B00             LDR      R3,[SP, #+0]
   \   000005A2   0x199E             ADDS     R6,R3,R6
   \   000005A4   0x9600             STR      R6,[SP, #+0]
   \   000005A6   0x9F04             LDR      R7,[SP, #+16]
   \   000005A8   0x9E02             LDR      R6,[SP, #+8]
   \   000005AA   0x46B4             MOV      R12,R6
   \   000005AC   0x9E01             LDR      R6,[SP, #+4]
   \   000005AE   0x463B             MOV      R3,R7
   \   000005B0   0x4073             EORS     R3,R3,R6
   \   000005B2   0x4666             MOV      R6,R12
   \   000005B4   0x4033             ANDS     R3,R3,R6
   \   000005B6   0x407B             EORS     R3,R3,R7
   \   000005B8   0x9E00             LDR      R6,[SP, #+0]
   \   000005BA   0x18F3             ADDS     R3,R6,R3
   \   000005BC   0x9E07             LDR      R6,[SP, #+28]
   \   000005BE   0x68B6             LDR      R6,[R6, #+8]
   \   000005C0   0x199B             ADDS     R3,R3,R6
   \   000005C2   0x191F             ADDS     R7,R3,R4
   \   000005C4   0x19D2             ADDS     R2,R2,R7
   \   000005C6   0x9203             STR      R2,[SP, #+12]
   \   000005C8   0x9B05             LDR      R3,[SP, #+20]
   \   000005CA   0x2202             MOVS     R2,#+2
   \   000005CC   0x41D3             RORS     R3,R3,R2
   \   000005CE   0x9A05             LDR      R2,[SP, #+20]
   \   000005D0   0x260D             MOVS     R6,#+13
   \   000005D2   0x41F2             RORS     R2,R2,R6
   \   000005D4   0x405A             EORS     R2,R2,R3
   \   000005D6   0x9B05             LDR      R3,[SP, #+20]
   \   000005D8   0x2616             MOVS     R6,#+22
   \   000005DA   0x41F3             RORS     R3,R3,R6
   \   000005DC   0x4053             EORS     R3,R3,R2
   \   000005DE   0x18FA             ADDS     R2,R7,R3
   \   000005E0   0x9E05             LDR      R6,[SP, #+20]
   \   000005E2   0x9B06             LDR      R3,[SP, #+24]
   \   000005E4   0x4033             ANDS     R3,R3,R6
   \   000005E6   0x9F06             LDR      R7,[SP, #+24]
   \   000005E8   0x4337             ORRS     R7,R7,R6
   \   000005EA   0x4007             ANDS     R7,R7,R0
   \   000005EC   0x431F             ORRS     R7,R7,R3
   \   000005EE   0x19D2             ADDS     R2,R2,R7
    225                  P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
   \   000005F0   0x000B             MOVS     R3,R1
   \   000005F2   0x3B30             SUBS     R3,R3,#+48
   \   000005F4   0x681B             LDR      R3,[R3, #+0]
   \   000005F6   0x9309             STR      R3,[SP, #+36]
   \   000005F8   0x2611             MOVS     R6,#+17
   \   000005FA   0x002B             MOVS     R3,R5
   \   000005FC   0x41F3             RORS     R3,R3,R6
   \   000005FE   0x2713             MOVS     R7,#+19
   \   00000600   0x002E             MOVS     R6,R5
   \   00000602   0x41FE             RORS     R6,R6,R7
   \   00000604   0x405E             EORS     R6,R6,R3
   \   00000606   0x0AAD             LSRS     R5,R5,#+10
   \   00000608   0x4075             EORS     R5,R5,R6
   \   0000060A   0x000B             MOVS     R3,R1
   \   0000060C   0x3B10             SUBS     R3,R3,#+16
   \   0000060E   0x681B             LDR      R3,[R3, #+0]
   \   00000610   0x18EF             ADDS     R7,R5,R3
   \   00000612   0x9B09             LDR      R3,[SP, #+36]
   \   00000614   0x2507             MOVS     R5,#+7
   \   00000616   0x41EB             RORS     R3,R3,R5
   \   00000618   0x9D09             LDR      R5,[SP, #+36]
   \   0000061A   0x2612             MOVS     R6,#+18
   \   0000061C   0x41F5             RORS     R5,R5,R6
   \   0000061E   0x405D             EORS     R5,R5,R3
   \   00000620   0x9B09             LDR      R3,[SP, #+36]
   \   00000622   0x08DB             LSRS     R3,R3,#+3
   \   00000624   0x406B             EORS     R3,R3,R5
   \   00000626   0x18FB             ADDS     R3,R7,R3
   \   00000628   0x9D0A             LDR      R5,[SP, #+40]
   \   0000062A   0x195B             ADDS     R3,R3,R5
   \   0000062C   0x60CB             STR      R3,[R1, #+12]
   \   0000062E   0x9D04             LDR      R5,[SP, #+16]
   \   00000630   0x9500             STR      R5,[SP, #+0]
   \   00000632   0x9D03             LDR      R5,[SP, #+12]
   \   00000634   0x2706             MOVS     R7,#+6
   \   00000636   0x41FD             RORS     R5,R5,R7
   \   00000638   0x9E03             LDR      R6,[SP, #+12]
   \   0000063A   0x270B             MOVS     R7,#+11
   \   0000063C   0x41FE             RORS     R6,R6,R7
   \   0000063E   0x406E             EORS     R6,R6,R5
   \   00000640   0x4635             MOV      R5,R6
   \   00000642   0x9E03             LDR      R6,[SP, #+12]
   \   00000644   0x2719             MOVS     R7,#+25
   \   00000646   0x41FE             RORS     R6,R6,R7
   \   00000648   0x406E             EORS     R6,R6,R5
   \   0000064A   0x9D00             LDR      R5,[SP, #+0]
   \   0000064C   0x19AE             ADDS     R6,R5,R6
   \   0000064E   0x9600             STR      R6,[SP, #+0]
   \   00000650   0x9F01             LDR      R7,[SP, #+4]
   \   00000652   0x9E03             LDR      R6,[SP, #+12]
   \   00000654   0x46B4             MOV      R12,R6
   \   00000656   0x9E02             LDR      R6,[SP, #+8]
   \   00000658   0x463D             MOV      R5,R7
   \   0000065A   0x4075             EORS     R5,R5,R6
   \   0000065C   0x4666             MOV      R6,R12
   \   0000065E   0x4035             ANDS     R5,R5,R6
   \   00000660   0x407D             EORS     R5,R5,R7
   \   00000662   0x9E00             LDR      R6,[SP, #+0]
   \   00000664   0x1975             ADDS     R5,R6,R5
   \   00000666   0x9E07             LDR      R6,[SP, #+28]
   \   00000668   0x68F6             LDR      R6,[R6, #+12]
   \   0000066A   0x19AD             ADDS     R5,R5,R6
   \   0000066C   0x18ED             ADDS     R5,R5,R3
   \   0000066E   0x1940             ADDS     R0,R0,R5
   \   00000670   0x9004             STR      R0,[SP, #+16]
   \   00000672   0x2602             MOVS     R6,#+2
   \   00000674   0x0010             MOVS     R0,R2
   \   00000676   0x41F0             RORS     R0,R0,R6
   \   00000678   0x270D             MOVS     R7,#+13
   \   0000067A   0x0016             MOVS     R6,R2
   \   0000067C   0x41FE             RORS     R6,R6,R7
   \   0000067E   0x4046             EORS     R6,R6,R0
   \   00000680   0x2016             MOVS     R0,#+22
   \   00000682   0x0017             MOVS     R7,R2
   \   00000684   0x41C7             RORS     R7,R7,R0
   \   00000686   0x4077             EORS     R7,R7,R6
   \   00000688   0x19E8             ADDS     R0,R5,R7
   \   0000068A   0x9D05             LDR      R5,[SP, #+20]
   \   0000068C   0x4015             ANDS     R5,R5,R2
   \   0000068E   0x9E06             LDR      R6,[SP, #+24]
   \   00000690   0x9F05             LDR      R7,[SP, #+20]
   \   00000692   0x4317             ORRS     R7,R7,R2
   \   00000694   0x4037             ANDS     R7,R7,R6
   \   00000696   0x432F             ORRS     R7,R7,R5
   \   00000698   0x19C0             ADDS     R0,R0,R7
    226                  P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
   \   0000069A   0x000D             MOVS     R5,R1
   \   0000069C   0x3D2C             SUBS     R5,R5,#+44
   \   0000069E   0x682D             LDR      R5,[R5, #+0]
   \   000006A0   0x950A             STR      R5,[SP, #+40]
   \   000006A2   0x2611             MOVS     R6,#+17
   \   000006A4   0x0025             MOVS     R5,R4
   \   000006A6   0x41F5             RORS     R5,R5,R6
   \   000006A8   0x2713             MOVS     R7,#+19
   \   000006AA   0x0026             MOVS     R6,R4
   \   000006AC   0x41FE             RORS     R6,R6,R7
   \   000006AE   0x406E             EORS     R6,R6,R5
   \   000006B0   0x0AA5             LSRS     R5,R4,#+10
   \   000006B2   0x4075             EORS     R5,R5,R6
   \   000006B4   0x000C             MOVS     R4,R1
   \   000006B6   0x3C0C             SUBS     R4,R4,#+12
   \   000006B8   0x6824             LDR      R4,[R4, #+0]
   \   000006BA   0x192F             ADDS     R7,R5,R4
   \   000006BC   0x9C0A             LDR      R4,[SP, #+40]
   \   000006BE   0x2507             MOVS     R5,#+7
   \   000006C0   0x41EC             RORS     R4,R4,R5
   \   000006C2   0x9D0A             LDR      R5,[SP, #+40]
   \   000006C4   0x2612             MOVS     R6,#+18
   \   000006C6   0x41F5             RORS     R5,R5,R6
   \   000006C8   0x4065             EORS     R5,R5,R4
   \   000006CA   0x9C0A             LDR      R4,[SP, #+40]
   \   000006CC   0x08E4             LSRS     R4,R4,#+3
   \   000006CE   0x406C             EORS     R4,R4,R5
   \   000006D0   0x193C             ADDS     R4,R7,R4
   \   000006D2   0x9D09             LDR      R5,[SP, #+36]
   \   000006D4   0x1965             ADDS     R5,R4,R5
   \   000006D6   0x610D             STR      R5,[R1, #+16]
   \   000006D8   0x9C01             LDR      R4,[SP, #+4]
   \   000006DA   0x9400             STR      R4,[SP, #+0]
   \   000006DC   0x9C04             LDR      R4,[SP, #+16]
   \   000006DE   0x2706             MOVS     R7,#+6
   \   000006E0   0x41FC             RORS     R4,R4,R7
   \   000006E2   0x9E04             LDR      R6,[SP, #+16]
   \   000006E4   0x270B             MOVS     R7,#+11
   \   000006E6   0x41FE             RORS     R6,R6,R7
   \   000006E8   0x4066             EORS     R6,R6,R4
   \   000006EA   0x4634             MOV      R4,R6
   \   000006EC   0x9E04             LDR      R6,[SP, #+16]
   \   000006EE   0x2719             MOVS     R7,#+25
   \   000006F0   0x41FE             RORS     R6,R6,R7
   \   000006F2   0x4066             EORS     R6,R6,R4
   \   000006F4   0x9C00             LDR      R4,[SP, #+0]
   \   000006F6   0x19A6             ADDS     R6,R4,R6
   \   000006F8   0x9600             STR      R6,[SP, #+0]
   \   000006FA   0x9F02             LDR      R7,[SP, #+8]
   \   000006FC   0x9E04             LDR      R6,[SP, #+16]
   \   000006FE   0x46B4             MOV      R12,R6
   \   00000700   0x9E03             LDR      R6,[SP, #+12]
   \   00000702   0x463C             MOV      R4,R7
   \   00000704   0x4074             EORS     R4,R4,R6
   \   00000706   0x4666             MOV      R6,R12
   \   00000708   0x4034             ANDS     R4,R4,R6
   \   0000070A   0x407C             EORS     R4,R4,R7
   \   0000070C   0x9E00             LDR      R6,[SP, #+0]
   \   0000070E   0x1934             ADDS     R4,R6,R4
   \   00000710   0x9E07             LDR      R6,[SP, #+28]
   \   00000712   0x6936             LDR      R6,[R6, #+16]
   \   00000714   0x19A4             ADDS     R4,R4,R6
   \   00000716   0x1966             ADDS     R6,R4,R5
   \   00000718   0x9C06             LDR      R4,[SP, #+24]
   \   0000071A   0x19A4             ADDS     R4,R4,R6
   \   0000071C   0x9401             STR      R4,[SP, #+4]
   \   0000071E   0x2702             MOVS     R7,#+2
   \   00000720   0x0004             MOVS     R4,R0
   \   00000722   0x41FC             RORS     R4,R4,R7
   \   00000724   0x46A4             MOV      R12,R4
   \   00000726   0x240D             MOVS     R4,#+13
   \   00000728   0x0007             MOVS     R7,R0
   \   0000072A   0x41E7             RORS     R7,R7,R4
   \   0000072C   0x4664             MOV      R4,R12
   \   0000072E   0x4067             EORS     R7,R7,R4
   \   00000730   0x46BC             MOV      R12,R7
   \   00000732   0x2716             MOVS     R7,#+22
   \   00000734   0x0004             MOVS     R4,R0
   \   00000736   0x41FC             RORS     R4,R4,R7
   \   00000738   0x4667             MOV      R7,R12
   \   0000073A   0x407C             EORS     R4,R4,R7
   \   0000073C   0x1937             ADDS     R7,R6,R4
   \   0000073E   0x0016             MOVS     R6,R2
   \   00000740   0x4006             ANDS     R6,R6,R0
   \   00000742   0x46B4             MOV      R12,R6
   \   00000744   0x9E05             LDR      R6,[SP, #+20]
   \   00000746   0x0014             MOVS     R4,R2
   \   00000748   0x4304             ORRS     R4,R4,R0
   \   0000074A   0x4034             ANDS     R4,R4,R6
   \   0000074C   0x4666             MOV      R6,R12
   \   0000074E   0x4334             ORRS     R4,R4,R6
   \   00000750   0x193C             ADDS     R4,R7,R4
    227                  P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
   \   00000752   0x000E             MOVS     R6,R1
   \   00000754   0x3E28             SUBS     R6,R6,#+40
   \   00000756   0x6836             LDR      R6,[R6, #+0]
   \   00000758   0x9609             STR      R6,[SP, #+36]
   \   0000075A   0x2611             MOVS     R6,#+17
   \   0000075C   0x001F             MOVS     R7,R3
   \   0000075E   0x41F7             RORS     R7,R7,R6
   \   00000760   0x46BC             MOV      R12,R7
   \   00000762   0x2713             MOVS     R7,#+19
   \   00000764   0x001E             MOVS     R6,R3
   \   00000766   0x41FE             RORS     R6,R6,R7
   \   00000768   0x4667             MOV      R7,R12
   \   0000076A   0x407E             EORS     R6,R6,R7
   \   0000076C   0x0A9B             LSRS     R3,R3,#+10
   \   0000076E   0x4073             EORS     R3,R3,R6
   \   00000770   0x9E0C             LDR      R6,[SP, #+48]
   \   00000772   0x199E             ADDS     R6,R3,R6
   \   00000774   0x9600             STR      R6,[SP, #+0]
   \   00000776   0x9B09             LDR      R3,[SP, #+36]
   \   00000778   0x2707             MOVS     R7,#+7
   \   0000077A   0x41FB             RORS     R3,R3,R7
   \   0000077C   0x9E09             LDR      R6,[SP, #+36]
   \   0000077E   0x2712             MOVS     R7,#+18
   \   00000780   0x41FE             RORS     R6,R6,R7
   \   00000782   0x405E             EORS     R6,R6,R3
   \   00000784   0x9B09             LDR      R3,[SP, #+36]
   \   00000786   0x08DB             LSRS     R3,R3,#+3
   \   00000788   0x4073             EORS     R3,R3,R6
   \   0000078A   0x9E00             LDR      R6,[SP, #+0]
   \   0000078C   0x18F3             ADDS     R3,R6,R3
   \   0000078E   0x9E0A             LDR      R6,[SP, #+40]
   \   00000790   0x199B             ADDS     R3,R3,R6
   \   00000792   0x9306             STR      R3,[SP, #+24]
   \   00000794   0x614B             STR      R3,[R1, #+20]
   \   00000796   0x9B02             LDR      R3,[SP, #+8]
   \   00000798   0x9300             STR      R3,[SP, #+0]
   \   0000079A   0x9B01             LDR      R3,[SP, #+4]
   \   0000079C   0x2706             MOVS     R7,#+6
   \   0000079E   0x41FB             RORS     R3,R3,R7
   \   000007A0   0x9E01             LDR      R6,[SP, #+4]
   \   000007A2   0x270B             MOVS     R7,#+11
   \   000007A4   0x41FE             RORS     R6,R6,R7
   \   000007A6   0x405E             EORS     R6,R6,R3
   \   000007A8   0x4633             MOV      R3,R6
   \   000007AA   0x9E01             LDR      R6,[SP, #+4]
   \   000007AC   0x2719             MOVS     R7,#+25
   \   000007AE   0x41FE             RORS     R6,R6,R7
   \   000007B0   0x405E             EORS     R6,R6,R3
   \   000007B2   0x9B00             LDR      R3,[SP, #+0]
   \   000007B4   0x199E             ADDS     R6,R3,R6
   \   000007B6   0x9600             STR      R6,[SP, #+0]
   \   000007B8   0x9F03             LDR      R7,[SP, #+12]
   \   000007BA   0x9E01             LDR      R6,[SP, #+4]
   \   000007BC   0x46B4             MOV      R12,R6
   \   000007BE   0x9E04             LDR      R6,[SP, #+16]
   \   000007C0   0x463B             MOV      R3,R7
   \   000007C2   0x4073             EORS     R3,R3,R6
   \   000007C4   0x4666             MOV      R6,R12
   \   000007C6   0x4033             ANDS     R3,R3,R6
   \   000007C8   0x407B             EORS     R3,R3,R7
   \   000007CA   0x9E00             LDR      R6,[SP, #+0]
   \   000007CC   0x18F3             ADDS     R3,R6,R3
   \   000007CE   0x9E07             LDR      R6,[SP, #+28]
   \   000007D0   0x6976             LDR      R6,[R6, #+20]
   \   000007D2   0x199B             ADDS     R3,R3,R6
   \   000007D4   0x9E06             LDR      R6,[SP, #+24]
   \   000007D6   0x199E             ADDS     R6,R3,R6
   \   000007D8   0x9B05             LDR      R3,[SP, #+20]
   \   000007DA   0x199B             ADDS     R3,R3,R6
   \   000007DC   0x9302             STR      R3,[SP, #+8]
   \   000007DE   0x2702             MOVS     R7,#+2
   \   000007E0   0x0023             MOVS     R3,R4
   \   000007E2   0x41FB             RORS     R3,R3,R7
   \   000007E4   0x469C             MOV      R12,R3
   \   000007E6   0x230D             MOVS     R3,#+13
   \   000007E8   0x0027             MOVS     R7,R4
   \   000007EA   0x41DF             RORS     R7,R7,R3
   \   000007EC   0x4663             MOV      R3,R12
   \   000007EE   0x405F             EORS     R7,R7,R3
   \   000007F0   0x46BC             MOV      R12,R7
   \   000007F2   0x2716             MOVS     R7,#+22
   \   000007F4   0x0023             MOVS     R3,R4
   \   000007F6   0x41FB             RORS     R3,R3,R7
   \   000007F8   0x4667             MOV      R7,R12
   \   000007FA   0x407B             EORS     R3,R3,R7
   \   000007FC   0x18F3             ADDS     R3,R6,R3
   \   000007FE   0x0006             MOVS     R6,R0
   \   00000800   0x4026             ANDS     R6,R6,R4
   \   00000802   0x0007             MOVS     R7,R0
   \   00000804   0x4327             ORRS     R7,R7,R4
   \   00000806   0x4017             ANDS     R7,R7,R2
   \   00000808   0x4337             ORRS     R7,R7,R6
   \   0000080A   0x19DB             ADDS     R3,R3,R7
    228                  P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
   \   0000080C   0x000E             MOVS     R6,R1
   \   0000080E   0x3E24             SUBS     R6,R6,#+36
   \   00000810   0x6836             LDR      R6,[R6, #+0]
   \   00000812   0x9605             STR      R6,[SP, #+20]
   \   00000814   0x2611             MOVS     R6,#+17
   \   00000816   0x002F             MOVS     R7,R5
   \   00000818   0x41F7             RORS     R7,R7,R6
   \   0000081A   0x46BC             MOV      R12,R7
   \   0000081C   0x2713             MOVS     R7,#+19
   \   0000081E   0x002E             MOVS     R6,R5
   \   00000820   0x41FE             RORS     R6,R6,R7
   \   00000822   0x4667             MOV      R7,R12
   \   00000824   0x407E             EORS     R6,R6,R7
   \   00000826   0x0AAD             LSRS     R5,R5,#+10
   \   00000828   0x4075             EORS     R5,R5,R6
   \   0000082A   0x9E0B             LDR      R6,[SP, #+44]
   \   0000082C   0x19AE             ADDS     R6,R5,R6
   \   0000082E   0x9600             STR      R6,[SP, #+0]
   \   00000830   0x9D05             LDR      R5,[SP, #+20]
   \   00000832   0x2707             MOVS     R7,#+7
   \   00000834   0x41FD             RORS     R5,R5,R7
   \   00000836   0x9E05             LDR      R6,[SP, #+20]
   \   00000838   0x2712             MOVS     R7,#+18
   \   0000083A   0x41FE             RORS     R6,R6,R7
   \   0000083C   0x406E             EORS     R6,R6,R5
   \   0000083E   0x9D05             LDR      R5,[SP, #+20]
   \   00000840   0x08ED             LSRS     R5,R5,#+3
   \   00000842   0x4075             EORS     R5,R5,R6
   \   00000844   0x9E00             LDR      R6,[SP, #+0]
   \   00000846   0x1975             ADDS     R5,R6,R5
   \   00000848   0x9E09             LDR      R6,[SP, #+36]
   \   0000084A   0x19AD             ADDS     R5,R5,R6
   \   0000084C   0x950A             STR      R5,[SP, #+40]
   \   0000084E   0x618D             STR      R5,[R1, #+24]
   \   00000850   0x9D03             LDR      R5,[SP, #+12]
   \   00000852   0x9500             STR      R5,[SP, #+0]
   \   00000854   0x9D02             LDR      R5,[SP, #+8]
   \   00000856   0x2706             MOVS     R7,#+6
   \   00000858   0x41FD             RORS     R5,R5,R7
   \   0000085A   0x9E02             LDR      R6,[SP, #+8]
   \   0000085C   0x270B             MOVS     R7,#+11
   \   0000085E   0x41FE             RORS     R6,R6,R7
   \   00000860   0x406E             EORS     R6,R6,R5
   \   00000862   0x4635             MOV      R5,R6
   \   00000864   0x9E02             LDR      R6,[SP, #+8]
   \   00000866   0x2719             MOVS     R7,#+25
   \   00000868   0x41FE             RORS     R6,R6,R7
   \   0000086A   0x406E             EORS     R6,R6,R5
   \   0000086C   0x9D00             LDR      R5,[SP, #+0]
   \   0000086E   0x19AE             ADDS     R6,R5,R6
   \   00000870   0x9600             STR      R6,[SP, #+0]
   \   00000872   0x9F04             LDR      R7,[SP, #+16]
   \   00000874   0x9E02             LDR      R6,[SP, #+8]
   \   00000876   0x46B4             MOV      R12,R6
   \   00000878   0x9E01             LDR      R6,[SP, #+4]
   \   0000087A   0x463D             MOV      R5,R7
   \   0000087C   0x4075             EORS     R5,R5,R6
   \   0000087E   0x4666             MOV      R6,R12
   \   00000880   0x4035             ANDS     R5,R5,R6
   \   00000882   0x407D             EORS     R5,R5,R7
   \   00000884   0x9E00             LDR      R6,[SP, #+0]
   \   00000886   0x1975             ADDS     R5,R6,R5
   \   00000888   0x9E07             LDR      R6,[SP, #+28]
   \   0000088A   0x69B6             LDR      R6,[R6, #+24]
   \   0000088C   0x19AD             ADDS     R5,R5,R6
   \   0000088E   0x9E0A             LDR      R6,[SP, #+40]
   \   00000890   0x19AD             ADDS     R5,R5,R6
   \   00000892   0x1952             ADDS     R2,R2,R5
   \   00000894   0x9203             STR      R2,[SP, #+12]
   \   00000896   0x2602             MOVS     R6,#+2
   \   00000898   0x001A             MOVS     R2,R3
   \   0000089A   0x41F2             RORS     R2,R2,R6
   \   0000089C   0x270D             MOVS     R7,#+13
   \   0000089E   0x001E             MOVS     R6,R3
   \   000008A0   0x41FE             RORS     R6,R6,R7
   \   000008A2   0x4056             EORS     R6,R6,R2
   \   000008A4   0x2216             MOVS     R2,#+22
   \   000008A6   0x001F             MOVS     R7,R3
   \   000008A8   0x41D7             RORS     R7,R7,R2
   \   000008AA   0x4077             EORS     R7,R7,R6
   \   000008AC   0x19EA             ADDS     R2,R5,R7
   \   000008AE   0x0025             MOVS     R5,R4
   \   000008B0   0x401D             ANDS     R5,R5,R3
   \   000008B2   0x0026             MOVS     R6,R4
   \   000008B4   0x431E             ORRS     R6,R6,R3
   \   000008B6   0x4006             ANDS     R6,R6,R0
   \   000008B8   0x432E             ORRS     R6,R6,R5
   \   000008BA   0x1992             ADDS     R2,R2,R6
    229                  P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
   \   000008BC   0x000D             MOVS     R5,R1
   \   000008BE   0x3D20             SUBS     R5,R5,#+32
   \   000008C0   0x682D             LDR      R5,[R5, #+0]
   \   000008C2   0x9509             STR      R5,[SP, #+36]
   \   000008C4   0x9D06             LDR      R5,[SP, #+24]
   \   000008C6   0x2611             MOVS     R6,#+17
   \   000008C8   0x41F5             RORS     R5,R5,R6
   \   000008CA   0x9E06             LDR      R6,[SP, #+24]
   \   000008CC   0x2713             MOVS     R7,#+19
   \   000008CE   0x41FE             RORS     R6,R6,R7
   \   000008D0   0x406E             EORS     R6,R6,R5
   \   000008D2   0x9D06             LDR      R5,[SP, #+24]
   \   000008D4   0x0AAD             LSRS     R5,R5,#+10
   \   000008D6   0x4075             EORS     R5,R5,R6
   \   000008D8   0x9E08             LDR      R6,[SP, #+32]
   \   000008DA   0x19AE             ADDS     R6,R5,R6
   \   000008DC   0x9600             STR      R6,[SP, #+0]
   \   000008DE   0x9D09             LDR      R5,[SP, #+36]
   \   000008E0   0x2707             MOVS     R7,#+7
   \   000008E2   0x41FD             RORS     R5,R5,R7
   \   000008E4   0x9E09             LDR      R6,[SP, #+36]
   \   000008E6   0x2712             MOVS     R7,#+18
   \   000008E8   0x41FE             RORS     R6,R6,R7
   \   000008EA   0x406E             EORS     R6,R6,R5
   \   000008EC   0x9D09             LDR      R5,[SP, #+36]
   \   000008EE   0x08ED             LSRS     R5,R5,#+3
   \   000008F0   0x4075             EORS     R5,R5,R6
   \   000008F2   0x9E00             LDR      R6,[SP, #+0]
   \   000008F4   0x1975             ADDS     R5,R6,R5
   \   000008F6   0x9E05             LDR      R6,[SP, #+20]
   \   000008F8   0x19AD             ADDS     R5,R5,R6
   \   000008FA   0x950A             STR      R5,[SP, #+40]
   \   000008FC   0x61CD             STR      R5,[R1, #+28]
   \   000008FE   0x9D04             LDR      R5,[SP, #+16]
   \   00000900   0x9500             STR      R5,[SP, #+0]
   \   00000902   0x9D03             LDR      R5,[SP, #+12]
   \   00000904   0x2706             MOVS     R7,#+6
   \   00000906   0x41FD             RORS     R5,R5,R7
   \   00000908   0x9E03             LDR      R6,[SP, #+12]
   \   0000090A   0x270B             MOVS     R7,#+11
   \   0000090C   0x41FE             RORS     R6,R6,R7
   \   0000090E   0x406E             EORS     R6,R6,R5
   \   00000910   0x4635             MOV      R5,R6
   \   00000912   0x9E03             LDR      R6,[SP, #+12]
   \   00000914   0x2719             MOVS     R7,#+25
   \   00000916   0x41FE             RORS     R6,R6,R7
   \   00000918   0x406E             EORS     R6,R6,R5
   \   0000091A   0x9D00             LDR      R5,[SP, #+0]
   \   0000091C   0x19AE             ADDS     R6,R5,R6
   \   0000091E   0x9600             STR      R6,[SP, #+0]
   \   00000920   0x9F01             LDR      R7,[SP, #+4]
   \   00000922   0x9E03             LDR      R6,[SP, #+12]
   \   00000924   0x46B4             MOV      R12,R6
   \   00000926   0x9E02             LDR      R6,[SP, #+8]
   \   00000928   0x463D             MOV      R5,R7
   \   0000092A   0x4075             EORS     R5,R5,R6
   \   0000092C   0x4666             MOV      R6,R12
   \   0000092E   0x4035             ANDS     R5,R5,R6
   \   00000930   0x407D             EORS     R5,R5,R7
   \   00000932   0x9E00             LDR      R6,[SP, #+0]
   \   00000934   0x1975             ADDS     R5,R6,R5
   \   00000936   0x9E07             LDR      R6,[SP, #+28]
   \   00000938   0x69F6             LDR      R6,[R6, #+28]
   \   0000093A   0x19AD             ADDS     R5,R5,R6
   \   0000093C   0x9E0A             LDR      R6,[SP, #+40]
   \   0000093E   0x19AD             ADDS     R5,R5,R6
   \   00000940   0x1940             ADDS     R0,R0,R5
   \   00000942   0x9004             STR      R0,[SP, #+16]
   \   00000944   0x2002             MOVS     R0,#+2
   \   00000946   0x0016             MOVS     R6,R2
   \   00000948   0x41C6             RORS     R6,R6,R0
   \   0000094A   0x270D             MOVS     R7,#+13
   \   0000094C   0x0010             MOVS     R0,R2
   \   0000094E   0x41F8             RORS     R0,R0,R7
   \   00000950   0x4070             EORS     R0,R0,R6
   \   00000952   0x2716             MOVS     R7,#+22
   \   00000954   0x0016             MOVS     R6,R2
   \   00000956   0x41FE             RORS     R6,R6,R7
   \   00000958   0x4046             EORS     R6,R6,R0
   \   0000095A   0x19A8             ADDS     R0,R5,R6
   \   0000095C   0x001D             MOVS     R5,R3
   \   0000095E   0x4015             ANDS     R5,R5,R2
   \   00000960   0x001E             MOVS     R6,R3
   \   00000962   0x4316             ORRS     R6,R6,R2
   \   00000964   0x4026             ANDS     R6,R6,R4
   \   00000966   0x432E             ORRS     R6,R6,R5
   \   00000968   0x1980             ADDS     R0,R0,R6
    230              }
   \   0000096A   0x9D07             LDR      R5,[SP, #+28]
   \   0000096C   0x3520             ADDS     R5,R5,#+32
   \   0000096E   0x9507             STR      R5,[SP, #+28]
   \   00000970   0x3120             ADDS     R1,R1,#+32
   \   00000972   0x9D0D             LDR      R5,[SP, #+52]
   \   00000974   0x1E6D             SUBS     R5,R5,#+1
   \   00000976   0x950D             STR      R5,[SP, #+52]
   \   00000978   0xD000             BEQ      .+4
   \   0000097A   0xE52C             B        ??mbedtls_sha256_process_4
    231          #endif /* MBEDTLS_SHA256_SMALLER */
    232          
    233              for( i = 0; i < 8; i++ )
    234                  ctx->state[i] += A[i];
   \   0000097C   0x994E             LDR      R1,[SP, #+312]
   \   0000097E   0x6889             LDR      R1,[R1, #+8]
   \   00000980   0x1808             ADDS     R0,R1,R0
   \   00000982   0x994E             LDR      R1,[SP, #+312]
   \   00000984   0x6088             STR      R0,[R1, #+8]
   \   00000986   0x984E             LDR      R0,[SP, #+312]
   \   00000988   0x68C0             LDR      R0,[R0, #+12]
   \   0000098A   0x1880             ADDS     R0,R0,R2
   \   0000098C   0x994E             LDR      R1,[SP, #+312]
   \   0000098E   0x60C8             STR      R0,[R1, #+12]
   \   00000990   0x984E             LDR      R0,[SP, #+312]
   \   00000992   0x6900             LDR      R0,[R0, #+16]
   \   00000994   0x18C0             ADDS     R0,R0,R3
   \   00000996   0x994E             LDR      R1,[SP, #+312]
   \   00000998   0x6108             STR      R0,[R1, #+16]
   \   0000099A   0x984E             LDR      R0,[SP, #+312]
   \   0000099C   0x6940             LDR      R0,[R0, #+20]
   \   0000099E   0x1900             ADDS     R0,R0,R4
   \   000009A0   0x994E             LDR      R1,[SP, #+312]
   \   000009A2   0x6148             STR      R0,[R1, #+20]
   \   000009A4   0x984E             LDR      R0,[SP, #+312]
   \   000009A6   0x6980             LDR      R0,[R0, #+24]
   \   000009A8   0x9904             LDR      R1,[SP, #+16]
   \   000009AA   0x1840             ADDS     R0,R0,R1
   \   000009AC   0x994E             LDR      R1,[SP, #+312]
   \   000009AE   0x6188             STR      R0,[R1, #+24]
   \   000009B0   0x984E             LDR      R0,[SP, #+312]
   \   000009B2   0x69C0             LDR      R0,[R0, #+28]
   \   000009B4   0x9903             LDR      R1,[SP, #+12]
   \   000009B6   0x1840             ADDS     R0,R0,R1
   \   000009B8   0x994E             LDR      R1,[SP, #+312]
   \   000009BA   0x61C8             STR      R0,[R1, #+28]
   \   000009BC   0x984E             LDR      R0,[SP, #+312]
   \   000009BE   0x6A00             LDR      R0,[R0, #+32]
   \   000009C0   0x9902             LDR      R1,[SP, #+8]
   \   000009C2   0x1840             ADDS     R0,R0,R1
   \   000009C4   0x994E             LDR      R1,[SP, #+312]
   \   000009C6   0x6208             STR      R0,[R1, #+32]
   \   000009C8   0x984E             LDR      R0,[SP, #+312]
   \   000009CA   0x6A40             LDR      R0,[R0, #+36]
   \   000009CC   0x9901             LDR      R1,[SP, #+4]
   \   000009CE   0x1840             ADDS     R0,R0,R1
   \   000009D0   0x994E             LDR      R1,[SP, #+312]
   \   000009D2   0x6248             STR      R0,[R1, #+36]
    235          }
   \   000009D4   0xB04F             ADD      SP,SP,#+316
   \   000009D6   0xBDF0             POP      {R4-R7,PC}       ;; return
    236          #endif /* !MBEDTLS_SHA256_PROCESS_ALT */
    237          
    238          /*
    239           * SHA-256 process buffer
    240           */

   \                                 In section .text, align 2, keep-with-next
    241          void mbedtls_sha256_update( mbedtls_sha256_context *ctx, const unsigned char *input,
    242                              size_t ilen )
    243          {
   \                     mbedtls_sha256_update: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0006             MOVS     R6,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0014             MOVS     R4,R2
    244              size_t fill;
    245              uint32_t left;
    246          
    247              if( ilen == 0 )
   \   00000008   0xD031             BEQ      ??mbedtls_sha256_update_0
    248                  return;
    249          
    250              left = ctx->total[0] & 0x3F;
   \   0000000A   0x6830             LDR      R0,[R6, #+0]
   \   0000000C   0x0687             LSLS     R7,R0,#+26
   \   0000000E   0x0EBF             LSRS     R7,R7,#+26
    251              fill = 64 - left;
   \   00000010   0x2140             MOVS     R1,#+64
   \   00000012   0x1BC9             SUBS     R1,R1,R7
   \   00000014   0x9100             STR      R1,[SP, #+0]
    252          
    253              ctx->total[0] += (uint32_t) ilen;
    254              ctx->total[0] &= 0xFFFFFFFF;
   \   00000016   0x1900             ADDS     R0,R0,R4
   \   00000018   0x6030             STR      R0,[R6, #+0]
    255          
    256              if( ctx->total[0] < (uint32_t) ilen )
   \   0000001A   0x42A0             CMP      R0,R4
   \   0000001C   0xD202             BCS      ??mbedtls_sha256_update_1
    257                  ctx->total[1]++;
   \   0000001E   0x6870             LDR      R0,[R6, #+4]
   \   00000020   0x1C40             ADDS     R0,R0,#+1
   \   00000022   0x6070             STR      R0,[R6, #+4]
    258          
    259              if( left && ilen >= fill )
   \                     ??mbedtls_sha256_update_1: (+1)
   \   00000024   0x2F00             CMP      R7,#+0
   \   00000026   0xD018             BEQ      ??mbedtls_sha256_update_2
   \   00000028   0x9800             LDR      R0,[SP, #+0]
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD315             BCC      ??mbedtls_sha256_update_2
    260              {
    261                  memcpy( (void *) (ctx->buffer + left), input, fill );
   \   0000002E   0x4602             MOV      R2,R0
   \   00000030   0x0029             MOVS     R1,R5
   \   00000032   0x19F0             ADDS     R0,R6,R7
   \   00000034   0x3028             ADDS     R0,R0,#+40
   \   00000036   0x.... 0x....      BL       __aeabi_memcpy
    262                  mbedtls_sha256_process( ctx, ctx->buffer );
   \   0000003A   0x0031             MOVS     R1,R6
   \   0000003C   0x3128             ADDS     R1,R1,#+40
   \   0000003E   0x0030             MOVS     R0,R6
   \   00000040   0x.... 0x....      BL       mbedtls_sha256_process
    263                  input += fill;
   \   00000044   0x9800             LDR      R0,[SP, #+0]
   \   00000046   0x182D             ADDS     R5,R5,R0
    264                  ilen  -= fill;
   \   00000048   0x1A24             SUBS     R4,R4,R0
    265                  left = 0;
   \   0000004A   0x2700             MOVS     R7,#+0
   \   0000004C   0xE005             B        ??mbedtls_sha256_update_2
    266              }
    267          
    268              while( ilen >= 64 )
    269              {
    270                  mbedtls_sha256_process( ctx, input );
   \                     ??mbedtls_sha256_update_3: (+1)
   \   0000004E   0x0029             MOVS     R1,R5
   \   00000050   0x0030             MOVS     R0,R6
   \   00000052   0x.... 0x....      BL       mbedtls_sha256_process
    271                  input += 64;
   \   00000056   0x3540             ADDS     R5,R5,#+64
    272                  ilen  -= 64;
   \   00000058   0x3C40             SUBS     R4,R4,#+64
    273              }
   \                     ??mbedtls_sha256_update_2: (+1)
   \   0000005A   0x2C40             CMP      R4,#+64
   \   0000005C   0xD2F7             BCS      ??mbedtls_sha256_update_3
    274          
    275              if( ilen > 0 )
   \   0000005E   0x2C00             CMP      R4,#+0
   \   00000060   0xD005             BEQ      ??mbedtls_sha256_update_0
    276                  memcpy( (void *) (ctx->buffer + left), input, ilen );
   \   00000062   0x0022             MOVS     R2,R4
   \   00000064   0x0029             MOVS     R1,R5
   \   00000066   0x19F0             ADDS     R0,R6,R7
   \   00000068   0x3028             ADDS     R0,R0,#+40
   \   0000006A   0x.... 0x....      BL       __aeabi_memcpy
    277          }
   \                     ??mbedtls_sha256_update_0: (+1)
   \   0000006E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    278          

   \                                 In section .text, align 4, keep-with-next
    279          static const unsigned char sha256_padding[64] =
   \                     sha256_padding:
   \   00000000   0x80 0x00          DC8 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000016   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
    280          {
    281           0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    282              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    283              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    284              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    285          };
    286          
    287          /*
    288           * SHA-256 final digest
    289           */

   \                                 In section .text, align 4, keep-with-next
    290          void mbedtls_sha256_finish( mbedtls_sha256_context *ctx, unsigned char output[32] )
    291          {
   \                     mbedtls_sha256_finish: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000F             MOVS     R7,R1
    292              uint32_t last, padn;
    293              uint32_t high, low;
    294              unsigned char msglen[8];
    295          
    296              high = ( ctx->total[0] >> 29 )
    297                   | ( ctx->total[1] <<  3 );
   \   00000008   0x6821             LDR      R1,[R4, #+0]
   \   0000000A   0x0F4A             LSRS     R2,R1,#+29
   \   0000000C   0x6860             LDR      R0,[R4, #+4]
   \   0000000E   0x00C0             LSLS     R0,R0,#+3
   \   00000010   0x4310             ORRS     R0,R0,R2
    298              low  = ( ctx->total[0] <<  3 );
   \   00000012   0x00C9             LSLS     R1,R1,#+3
    299          
    300              PUT_UINT32_BE( high, msglen, 0 );
   \   00000014   0xAA02             ADD      R2,SP,#+8
   \   00000016   0x0E03             LSRS     R3,R0,#+24
   \   00000018   0x7013             STRB     R3,[R2, #+0]
   \   0000001A   0x0C03             LSRS     R3,R0,#+16
   \   0000001C   0x7053             STRB     R3,[R2, #+1]
   \   0000001E   0x0A03             LSRS     R3,R0,#+8
   \   00000020   0x7093             STRB     R3,[R2, #+2]
   \   00000022   0x70D0             STRB     R0,[R2, #+3]
    301              PUT_UINT32_BE( low,  msglen, 4 );
   \   00000024   0x0E08             LSRS     R0,R1,#+24
   \   00000026   0x7110             STRB     R0,[R2, #+4]
   \   00000028   0x0C08             LSRS     R0,R1,#+16
   \   0000002A   0x7150             STRB     R0,[R2, #+5]
   \   0000002C   0x0A08             LSRS     R0,R1,#+8
   \   0000002E   0x7190             STRB     R0,[R2, #+6]
   \   00000030   0x71D1             STRB     R1,[R2, #+7]
    302          
    303              last = ctx->total[0] & 0x3F;
   \   00000032   0x6820             LDR      R0,[R4, #+0]
   \   00000034   0x0681             LSLS     R1,R0,#+26
   \   00000036   0x0E89             LSRS     R1,R1,#+26
    304              padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
   \   00000038   0x2938             CMP      R1,#+56
   \   0000003A   0xD201             BCS      ??mbedtls_sha256_finish_0
   \   0000003C   0x2338             MOVS     R3,#+56
   \   0000003E   0xE000             B        ??mbedtls_sha256_finish_1
   \                     ??mbedtls_sha256_finish_0: (+1)
   \   00000040   0x2378             MOVS     R3,#+120
   \                     ??mbedtls_sha256_finish_1: (+1)
   \   00000042   0x1A5E             SUBS     R6,R3,R1
   \   00000044   0x....             ADR.N    R5,sha256_padding
    305          
    306              mbedtls_sha256_update( ctx, sha256_padding, padn );
   \   00000046   0xD034             BEQ      ??mbedtls_sha256_finish_2
   \   00000048   0x9100             STR      R1,[SP, #+0]
   \   0000004A   0x2140             MOVS     R1,#+64
   \   0000004C   0x9A00             LDR      R2,[SP, #+0]
   \   0000004E   0x1A89             SUBS     R1,R1,R2
   \   00000050   0x9101             STR      R1,[SP, #+4]
   \   00000052   0x1980             ADDS     R0,R0,R6
   \   00000054   0x6020             STR      R0,[R4, #+0]
   \   00000056   0x42B0             CMP      R0,R6
   \   00000058   0xD202             BCS      ??mbedtls_sha256_finish_3
   \   0000005A   0x6860             LDR      R0,[R4, #+4]
   \   0000005C   0x1C40             ADDS     R0,R0,#+1
   \   0000005E   0x6060             STR      R0,[R4, #+4]
   \                     ??mbedtls_sha256_finish_3: (+1)
   \   00000060   0x9800             LDR      R0,[SP, #+0]
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD01A             BEQ      ??mbedtls_sha256_finish_4
   \   00000066   0x9801             LDR      R0,[SP, #+4]
   \   00000068   0x4286             CMP      R6,R0
   \   0000006A   0xD317             BCC      ??mbedtls_sha256_finish_4
   \   0000006C   0x4602             MOV      R2,R0
   \   0000006E   0x4629             MOV      R1,R5
   \   00000070   0x9800             LDR      R0,[SP, #+0]
   \   00000072   0x1820             ADDS     R0,R4,R0
   \   00000074   0x3028             ADDS     R0,R0,#+40
   \   00000076   0x.... 0x....      BL       __aeabi_memcpy
   \   0000007A   0x0021             MOVS     R1,R4
   \   0000007C   0x3128             ADDS     R1,R1,#+40
   \   0000007E   0x0020             MOVS     R0,R4
   \   00000080   0x.... 0x....      BL       mbedtls_sha256_process
   \   00000084   0x9901             LDR      R1,[SP, #+4]
   \   00000086   0x186D             ADDS     R5,R5,R1
   \   00000088   0x1A76             SUBS     R6,R6,R1
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x9000             STR      R0,[SP, #+0]
   \   0000008E   0xE005             B        ??mbedtls_sha256_finish_4
   \                     ??mbedtls_sha256_finish_5: (+1)
   \   00000090   0x0029             MOVS     R1,R5
   \   00000092   0x0020             MOVS     R0,R4
   \   00000094   0x.... 0x....      BL       mbedtls_sha256_process
   \   00000098   0x3540             ADDS     R5,R5,#+64
   \   0000009A   0x3E40             SUBS     R6,R6,#+64
   \                     ??mbedtls_sha256_finish_4: (+1)
   \   0000009C   0x2E40             CMP      R6,#+64
   \   0000009E   0xD2F7             BCS      ??mbedtls_sha256_finish_5
   \   000000A0   0x2E00             CMP      R6,#+0
   \   000000A2   0xD006             BEQ      ??mbedtls_sha256_finish_2
   \   000000A4   0x0032             MOVS     R2,R6
   \   000000A6   0x0029             MOVS     R1,R5
   \   000000A8   0x9800             LDR      R0,[SP, #+0]
   \   000000AA   0x1820             ADDS     R0,R4,R0
   \   000000AC   0x3028             ADDS     R0,R0,#+40
   \   000000AE   0x.... 0x....      BL       __aeabi_memcpy
    307              mbedtls_sha256_update( ctx, msglen, 8 );
   \                     ??mbedtls_sha256_finish_2: (+1)
   \   000000B2   0x2608             MOVS     R6,#+8
   \   000000B4   0xAD02             ADD      R5,SP,#+8
   \   000000B6   0x6820             LDR      R0,[R4, #+0]
   \   000000B8   0x0681             LSLS     R1,R0,#+26
   \   000000BA   0x0E89             LSRS     R1,R1,#+26
   \   000000BC   0x9101             STR      R1,[SP, #+4]
   \   000000BE   0x2140             MOVS     R1,#+64
   \   000000C0   0x9A01             LDR      R2,[SP, #+4]
   \   000000C2   0x1A89             SUBS     R1,R1,R2
   \   000000C4   0x9100             STR      R1,[SP, #+0]
   \   000000C6   0x3008             ADDS     R0,R0,#+8
   \   000000C8   0x6020             STR      R0,[R4, #+0]
   \   000000CA   0x2808             CMP      R0,#+8
   \   000000CC   0xD202             BCS      ??mbedtls_sha256_finish_6
   \   000000CE   0x6860             LDR      R0,[R4, #+4]
   \   000000D0   0x1C40             ADDS     R0,R0,#+1
   \   000000D2   0x6060             STR      R0,[R4, #+4]
   \                     ??mbedtls_sha256_finish_6: (+1)
   \   000000D4   0x9801             LDR      R0,[SP, #+4]
   \   000000D6   0x2800             CMP      R0,#+0
   \   000000D8   0xD01F             BEQ      ??mbedtls_sha256_finish_7
   \   000000DA   0x9800             LDR      R0,[SP, #+0]
   \   000000DC   0x2809             CMP      R0,#+9
   \   000000DE   0xD21C             BCS      ??mbedtls_sha256_finish_7
   \   000000E0   0x4602             MOV      R2,R0
   \   000000E2   0xA902             ADD      R1,SP,#+8
   \   000000E4   0x9801             LDR      R0,[SP, #+4]
   \   000000E6   0x1820             ADDS     R0,R4,R0
   \   000000E8   0x3028             ADDS     R0,R0,#+40
   \   000000EA   0x.... 0x....      BL       __aeabi_memcpy
   \   000000EE   0x0021             MOVS     R1,R4
   \   000000F0   0x3128             ADDS     R1,R1,#+40
   \   000000F2   0x0020             MOVS     R0,R4
   \   000000F4   0x.... 0x....      BL       mbedtls_sha256_process
   \   000000F8   0xA802             ADD      R0,SP,#+8
   \   000000FA   0x9900             LDR      R1,[SP, #+0]
   \   000000FC   0x1845             ADDS     R5,R0,R1
   \   000000FE   0x1A76             SUBS     R6,R6,R1
   \   00000100   0x2000             MOVS     R0,#+0
   \   00000102   0x9001             STR      R0,[SP, #+4]
   \   00000104   0xE005             B        ??mbedtls_sha256_finish_8
   \                     ??mbedtls_sha256_finish_9: (+1)
   \   00000106   0x0029             MOVS     R1,R5
   \   00000108   0x0020             MOVS     R0,R4
   \   0000010A   0x.... 0x....      BL       mbedtls_sha256_process
   \   0000010E   0x3540             ADDS     R5,R5,#+64
   \   00000110   0x3E40             SUBS     R6,R6,#+64
   \                     ??mbedtls_sha256_finish_8: (+1)
   \   00000112   0x2E40             CMP      R6,#+64
   \   00000114   0xD2F7             BCS      ??mbedtls_sha256_finish_9
   \   00000116   0x2E00             CMP      R6,#+0
   \   00000118   0xD006             BEQ      ??mbedtls_sha256_finish_10
   \                     ??mbedtls_sha256_finish_7: (+1)
   \   0000011A   0x0032             MOVS     R2,R6
   \   0000011C   0x0029             MOVS     R1,R5
   \   0000011E   0x9801             LDR      R0,[SP, #+4]
   \   00000120   0x1820             ADDS     R0,R4,R0
   \   00000122   0x3028             ADDS     R0,R0,#+40
   \   00000124   0x.... 0x....      BL       __aeabi_memcpy
    308          
    309              PUT_UINT32_BE( ctx->state[0], output,  0 );
   \                     ??mbedtls_sha256_finish_10: (+1)
   \   00000128   0x68A0             LDR      R0,[R4, #+8]
   \   0000012A   0x0E00             LSRS     R0,R0,#+24
   \   0000012C   0x7038             STRB     R0,[R7, #+0]
   \   0000012E   0x68A0             LDR      R0,[R4, #+8]
   \   00000130   0x0C00             LSRS     R0,R0,#+16
   \   00000132   0x7078             STRB     R0,[R7, #+1]
   \   00000134   0x68A0             LDR      R0,[R4, #+8]
   \   00000136   0x0A00             LSRS     R0,R0,#+8
   \   00000138   0x70B8             STRB     R0,[R7, #+2]
   \   0000013A   0x68A0             LDR      R0,[R4, #+8]
   \   0000013C   0x70F8             STRB     R0,[R7, #+3]
    310              PUT_UINT32_BE( ctx->state[1], output,  4 );
   \   0000013E   0x68E0             LDR      R0,[R4, #+12]
   \   00000140   0x0E00             LSRS     R0,R0,#+24
   \   00000142   0x7138             STRB     R0,[R7, #+4]
   \   00000144   0x68E0             LDR      R0,[R4, #+12]
   \   00000146   0x0C00             LSRS     R0,R0,#+16
   \   00000148   0x7178             STRB     R0,[R7, #+5]
   \   0000014A   0x68E0             LDR      R0,[R4, #+12]
   \   0000014C   0x0A00             LSRS     R0,R0,#+8
   \   0000014E   0x71B8             STRB     R0,[R7, #+6]
   \   00000150   0x68E0             LDR      R0,[R4, #+12]
   \   00000152   0x71F8             STRB     R0,[R7, #+7]
    311              PUT_UINT32_BE( ctx->state[2], output,  8 );
   \   00000154   0x6920             LDR      R0,[R4, #+16]
   \   00000156   0x0E00             LSRS     R0,R0,#+24
   \   00000158   0x7238             STRB     R0,[R7, #+8]
   \   0000015A   0x6920             LDR      R0,[R4, #+16]
   \   0000015C   0x0C00             LSRS     R0,R0,#+16
   \   0000015E   0x7278             STRB     R0,[R7, #+9]
   \   00000160   0x6920             LDR      R0,[R4, #+16]
   \   00000162   0x0A00             LSRS     R0,R0,#+8
   \   00000164   0x72B8             STRB     R0,[R7, #+10]
   \   00000166   0x6920             LDR      R0,[R4, #+16]
   \   00000168   0x72F8             STRB     R0,[R7, #+11]
    312              PUT_UINT32_BE( ctx->state[3], output, 12 );
   \   0000016A   0x6960             LDR      R0,[R4, #+20]
   \   0000016C   0x0E00             LSRS     R0,R0,#+24
   \   0000016E   0x7338             STRB     R0,[R7, #+12]
   \   00000170   0x6960             LDR      R0,[R4, #+20]
   \   00000172   0x0C00             LSRS     R0,R0,#+16
   \   00000174   0x7378             STRB     R0,[R7, #+13]
   \   00000176   0x6960             LDR      R0,[R4, #+20]
   \   00000178   0x0A00             LSRS     R0,R0,#+8
   \   0000017A   0x73B8             STRB     R0,[R7, #+14]
   \   0000017C   0x6960             LDR      R0,[R4, #+20]
   \   0000017E   0x73F8             STRB     R0,[R7, #+15]
    313              PUT_UINT32_BE( ctx->state[4], output, 16 );
   \   00000180   0x69A0             LDR      R0,[R4, #+24]
   \   00000182   0x0E00             LSRS     R0,R0,#+24
   \   00000184   0x7438             STRB     R0,[R7, #+16]
   \   00000186   0x69A0             LDR      R0,[R4, #+24]
   \   00000188   0x0C00             LSRS     R0,R0,#+16
   \   0000018A   0x7478             STRB     R0,[R7, #+17]
   \   0000018C   0x69A0             LDR      R0,[R4, #+24]
   \   0000018E   0x0A00             LSRS     R0,R0,#+8
   \   00000190   0x74B8             STRB     R0,[R7, #+18]
   \   00000192   0x69A0             LDR      R0,[R4, #+24]
   \   00000194   0x74F8             STRB     R0,[R7, #+19]
    314              PUT_UINT32_BE( ctx->state[5], output, 20 );
   \   00000196   0x69E0             LDR      R0,[R4, #+28]
   \   00000198   0x0E00             LSRS     R0,R0,#+24
   \   0000019A   0x7538             STRB     R0,[R7, #+20]
   \   0000019C   0x69E0             LDR      R0,[R4, #+28]
   \   0000019E   0x0C00             LSRS     R0,R0,#+16
   \   000001A0   0x7578             STRB     R0,[R7, #+21]
   \   000001A2   0x69E0             LDR      R0,[R4, #+28]
   \   000001A4   0x0A00             LSRS     R0,R0,#+8
   \   000001A6   0x75B8             STRB     R0,[R7, #+22]
   \   000001A8   0x69E0             LDR      R0,[R4, #+28]
   \   000001AA   0x75F8             STRB     R0,[R7, #+23]
    315              PUT_UINT32_BE( ctx->state[6], output, 24 );
   \   000001AC   0x6A20             LDR      R0,[R4, #+32]
   \   000001AE   0x0E00             LSRS     R0,R0,#+24
   \   000001B0   0x7638             STRB     R0,[R7, #+24]
   \   000001B2   0x6A20             LDR      R0,[R4, #+32]
   \   000001B4   0x0C00             LSRS     R0,R0,#+16
   \   000001B6   0x7678             STRB     R0,[R7, #+25]
   \   000001B8   0x6A20             LDR      R0,[R4, #+32]
   \   000001BA   0x0A00             LSRS     R0,R0,#+8
   \   000001BC   0x76B8             STRB     R0,[R7, #+26]
   \   000001BE   0x6A20             LDR      R0,[R4, #+32]
   \   000001C0   0x76F8             STRB     R0,[R7, #+27]
    316          
    317              if( ctx->is224 == 0 )
   \   000001C2   0x6EA0             LDR      R0,[R4, #+104]
   \   000001C4   0x2800             CMP      R0,#+0
   \   000001C6   0xD10A             BNE      ??mbedtls_sha256_finish_11
    318                  PUT_UINT32_BE( ctx->state[7], output, 28 );
   \   000001C8   0x6A60             LDR      R0,[R4, #+36]
   \   000001CA   0x0E00             LSRS     R0,R0,#+24
   \   000001CC   0x7738             STRB     R0,[R7, #+28]
   \   000001CE   0x6A60             LDR      R0,[R4, #+36]
   \   000001D0   0x0C00             LSRS     R0,R0,#+16
   \   000001D2   0x7778             STRB     R0,[R7, #+29]
   \   000001D4   0x6A60             LDR      R0,[R4, #+36]
   \   000001D6   0x0A00             LSRS     R0,R0,#+8
   \   000001D8   0x77B8             STRB     R0,[R7, #+30]
   \   000001DA   0x6A60             LDR      R0,[R4, #+36]
   \   000001DC   0x77F8             STRB     R0,[R7, #+31]
    319          }
   \                     ??mbedtls_sha256_finish_11: (+1)
   \   000001DE   0xB005             ADD      SP,SP,#+20
   \   000001E0   0xBDF0             POP      {R4-R7,PC}       ;; return
    320          
    321          #endif /* !MBEDTLS_SHA256_ALT */
    322          
    323          /*
    324           * output = SHA-256( input buffer )
    325           */

   \                                 In section .text, align 2, keep-with-next
    326          void mbedtls_sha256( const unsigned char *input, size_t ilen,
    327                       unsigned char output[32], int is224 )
    328          {
   \                     mbedtls_sha256: (+1)
   \   00000000   0xB5F4             PUSH     {R2,R4-R7,LR}
   \   00000002   0xB09C             SUB      SP,SP,#+112
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x001E             MOVS     R6,R3
    329              mbedtls_sha256_context ctx;
    330          
    331              mbedtls_sha256_init( &ctx );
   \   0000000A   0x216C             MOVS     R1,#+108
   \   0000000C   0xA801             ADD      R0,SP,#+4
   \   0000000E   0x.... 0x....      BL       __aeabi_memclr4
    332              mbedtls_sha256_starts( &ctx, is224 );
   \   00000012   0x0031             MOVS     R1,R6
   \   00000014   0xA801             ADD      R0,SP,#+4
   \   00000016   0x.... 0x....      BL       mbedtls_sha256_starts
    333              mbedtls_sha256_update( &ctx, input, ilen );
   \   0000001A   0x2C00             CMP      R4,#+0
   \   0000001C   0xD034             BEQ      ??mbedtls_sha256_0
   \   0000001E   0x9801             LDR      R0,[SP, #+4]
   \   00000020   0x0686             LSLS     R6,R0,#+26
   \   00000022   0x0EB6             LSRS     R6,R6,#+26
   \   00000024   0x2040             MOVS     R0,#+64
   \   00000026   0x1B80             SUBS     R0,R0,R6
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0x9801             LDR      R0,[SP, #+4]
   \   0000002C   0x1900             ADDS     R0,R0,R4
   \   0000002E   0x9001             STR      R0,[SP, #+4]
   \   00000030   0x42A0             CMP      R0,R4
   \   00000032   0xD202             BCS      ??mbedtls_sha256_1
   \   00000034   0x9802             LDR      R0,[SP, #+8]
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \   00000038   0x9002             STR      R0,[SP, #+8]
   \                     ??mbedtls_sha256_1: (+1)
   \   0000003A   0x2E00             CMP      R6,#+0
   \   0000003C   0xD019             BEQ      ??mbedtls_sha256_2
   \   0000003E   0x9800             LDR      R0,[SP, #+0]
   \   00000040   0x4284             CMP      R4,R0
   \   00000042   0xD316             BCC      ??mbedtls_sha256_2
   \   00000044   0xAF01             ADD      R7,SP,#+4
   \   00000046   0x4602             MOV      R2,R0
   \   00000048   0x0029             MOVS     R1,R5
   \   0000004A   0x19B8             ADDS     R0,R7,R6
   \   0000004C   0x3028             ADDS     R0,R0,#+40
   \   0000004E   0x.... 0x....      BL       __aeabi_memcpy
   \   00000052   0x0039             MOVS     R1,R7
   \   00000054   0x3128             ADDS     R1,R1,#+40
   \   00000056   0xA801             ADD      R0,SP,#+4
   \   00000058   0x.... 0x....      BL       mbedtls_sha256_process
   \   0000005C   0x9800             LDR      R0,[SP, #+0]
   \   0000005E   0x182D             ADDS     R5,R5,R0
   \   00000060   0x1A24             SUBS     R4,R4,R0
   \   00000062   0x2600             MOVS     R6,#+0
   \   00000064   0xE005             B        ??mbedtls_sha256_2
   \                     ??mbedtls_sha256_3: (+1)
   \   00000066   0x0029             MOVS     R1,R5
   \   00000068   0xA801             ADD      R0,SP,#+4
   \   0000006A   0x.... 0x....      BL       mbedtls_sha256_process
   \   0000006E   0x3540             ADDS     R5,R5,#+64
   \   00000070   0x3C40             SUBS     R4,R4,#+64
   \                     ??mbedtls_sha256_2: (+1)
   \   00000072   0x2C40             CMP      R4,#+64
   \   00000074   0xD2F7             BCS      ??mbedtls_sha256_3
   \   00000076   0x2C00             CMP      R4,#+0
   \   00000078   0xD006             BEQ      ??mbedtls_sha256_0
   \   0000007A   0x0022             MOVS     R2,R4
   \   0000007C   0x0029             MOVS     R1,R5
   \   0000007E   0xA801             ADD      R0,SP,#+4
   \   00000080   0x1980             ADDS     R0,R0,R6
   \   00000082   0x3028             ADDS     R0,R0,#+40
   \   00000084   0x.... 0x....      BL       __aeabi_memcpy
    334              mbedtls_sha256_finish( &ctx, output );
   \                     ??mbedtls_sha256_0: (+1)
   \   00000088   0x991C             LDR      R1,[SP, #+112]
   \   0000008A   0xA801             ADD      R0,SP,#+4
   \   0000008C   0x.... 0x....      BL       mbedtls_sha256_finish
    335              mbedtls_sha256_free( &ctx );
    336          }
   \   00000090   0xB01D             ADD      SP,SP,#+116
   \   00000092   0xBDF0             POP      {R4-R7,PC}       ;; return
    337          
    338          #if defined(MBEDTLS_SELF_TEST)
    339          /*
    340           * FIPS-180-2 test vectors
    341           */

   \                                 In section .text, align 4, keep-with-next
    342          static const unsigned char sha256_test_buf[3][57] =
   \                     sha256_test_buf:
   \   00000000   0x61 0x62          DC8 "abc"
   \              0x63 0x00    
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000014   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000024   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000039   0x61 0x62          DC8 61H, 62H, 63H, 64H, 62H, 63H, 64H, 65H
   \              0x63 0x64    
   \              0x62 0x63    
   \              0x64 0x65    
   \   00000041   0x63 0x64          DC8 63H, 64H, 65H, 66H, 64H, 65H, 66H, 67H
   \              0x65 0x66    
   \              0x64 0x65    
   \              0x66 0x67    
   \   00000049   0x65 0x66          DC8 65H, 66H, 67H, 68H, 66H, 67H, 68H, 69H
   \              0x67 0x68    
   \              0x66 0x67    
   \              0x68 0x69    
   \   00000051   0x67 0x68          DC8 67H, 68H, 69H, 6AH, 68H, 69H, 6AH, 6BH
   \              0x69 0x6A    
   \              0x68 0x69    
   \              0x6A 0x6B    
   \   00000059   0x69 0x6A          DC8 69H, 6AH, 6BH, 6CH, 6AH, 6BH, 6CH, 6DH
   \              0x6B 0x6C    
   \              0x6A 0x6B    
   \              0x6C 0x6D    
   \   00000061   0x6B 0x6C          DC8 6BH, 6CH, 6DH, 6EH, 6CH, 6DH, 6EH, 6FH
   \              0x6D 0x6E    
   \              0x6C 0x6D    
   \              0x6E 0x6F    
   \   00000069   0x6D 0x6E          DC8 6DH, 6EH, 6FH, 70H, 6EH, 6FH, 70H, 71H
   \              0x6F 0x70    
   \              0x6E 0x6F    
   \              0x70 0x71    
   \   00000071   0x00               DC8 0
   \   00000072   0x00               DC8 ""
   \   00000073   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000083   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000093   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000A3   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
    343          {
    344              { "abc" },
    345              { "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq" },
    346              { "" }
    347          };
    348          

   \                                 In section .text, align 4, keep-with-next
    349          static const int sha256_test_buflen[3] =
   \                     sha256_test_buflen:
   \   00000000   0x00000003         DC32 3, 56, 1000
   \              0x00000038   
   \              0x000003E8   
    350          {
    351              3, 56, 1000
    352          };
    353          

   \                                 In section .text, align 4, keep-with-next
    354          static const unsigned char sha256_test_sum[6][32] =
   \                     sha256_test_sum:
   \   00000000   0x23 0x09          DC8 35, 9, 125, 34, 52, 5, 216, 34, 134, 66, 164, 119, 189, 162, 85
   \              0x7D 0x22    
   \              0x34 0x05    
   \              0xD8 0x22    
   \              0x86 0x42    
   \              0xA4 0x77    
   \              0xBD 0xA2    
   \              0x55         
   \   0000000F   0xB3 0x2A          DC8 179, 42, 173, 188, 228, 189, 160, 179, 247, 227, 108, 157, 167, 0
   \              0xAD 0xBC    
   \              0xE4 0xBD    
   \              0xA0 0xB3    
   \              0xF7 0xE3    
   \              0x6C 0x9D    
   \              0xA7 0x00    
   \   0000001D   0x00 0x00          DC8 0, 0, 0, 117, 56, 139, 22, 81, 39, 118, 204, 93, 186, 93, 161, 253
   \              0x00 0x75    
   \              0x38 0x8B    
   \              0x16 0x51    
   \              0x27 0x76    
   \              0xCC 0x5D    
   \              0xBA 0x5D    
   \              0xA1 0xFD    
   \   0000002D   0x89 0x01          DC8 137, 1, 80, 176, 198, 69, 92, 180, 245, 139, 25, 82, 82, 37, 37, 0
   \              0x50 0xB0    
   \              0xC6 0x45    
   \              0x5C 0xB4    
   \              0xF5 0x8B    
   \              0x19 0x52    
   \              0x52 0x25    
   \              0x25 0x00    
   \   0000003D   0x00 0x00          DC8 0, 0, 0, 32, 121, 70, 85, 152, 12, 145, 216, 187, 180, 193, 234
   \              0x00 0x20    
   \              0x79 0x46    
   \              0x55 0x98    
   \              0x0C 0x91    
   \              0xD8 0xBB    
   \              0xB4 0xC1    
   \              0xEA         
   \   0000004C   0x97 0x61          DC8 151, 97, 138, 75, 240, 63, 66, 88, 25, 72, 178, 238, 78, 231, 173
   \              0x8A 0x4B    
   \              0xF0 0x3F    
   \              0x42 0x58    
   \              0x19 0x48    
   \              0xB2 0xEE    
   \              0x4E 0xE7    
   \              0xAD         
   \   0000005B   0x67 0x00          DC8 103, 0, 0, 0, 0, 186, 120, 22, 191, 143, 1, 207, 234, 65, 65, 64
   \              0x00 0x00    
   \              0x00 0xBA    
   \              0x78 0x16    
   \              0xBF 0x8F    
   \              0x01 0xCF    
   \              0xEA 0x41    
   \              0x41 0x40    
   \   0000006B   0xDE 0x5D          DC8 222, 93, 174, 34, 35, 176, 3, 97, 163, 150, 23, 122, 156, 180, 16
   \              0xAE 0x22    
   \              0x23 0xB0    
   \              0x03 0x61    
   \              0xA3 0x96    
   \              0x17 0x7A    
   \              0x9C 0xB4    
   \              0x10         
   \   0000007A   0xFF 0x61          DC8 255, 97, 242, 0, 21, 173, 36, 141, 106, 97, 210, 6, 56, 184, 229
   \              0xF2 0x00    
   \              0x15 0xAD    
   \              0x24 0x8D    
   \              0x6A 0x61    
   \              0xD2 0x06    
   \              0x38 0xB8    
   \              0xE5         
   \   00000089   0xC0 0x26          DC8 192, 38, 147, 12, 62, 96, 57, 163, 60, 228, 89, 100, 255, 33, 103
   \              0x93 0x0C    
   \              0x3E 0x60    
   \              0x39 0xA3    
   \              0x3C 0xE4    
   \              0x59 0x64    
   \              0xFF 0x21    
   \              0x67         
   \   00000098   0xF6 0xEC          DC8 246, 236, 237, 212, 25, 219, 6, 193, 205, 199, 110, 92, 153, 20
   \              0xED 0xD4    
   \              0x19 0xDB    
   \              0x06 0xC1    
   \              0xCD 0xC7    
   \              0x6E 0x5C    
   \              0x99 0x14    
   \   000000A6   0xFB 0x92          DC8 251, 146, 129, 161, 199, 226, 132, 215, 62, 103, 241, 128, 154, 72
   \              0x81 0xA1    
   \              0xC7 0xE2    
   \              0x84 0xD7    
   \              0x3E 0x67    
   \              0xF1 0x80    
   \              0x9A 0x48    
   \   000000B4   0xA4 0x97          DC8 164, 151, 32, 14, 4, 109, 57, 204, 199, 17, 44, 208
   \              0x20 0x0E    
   \              0x04 0x6D    
   \              0x39 0xCC    
   \              0xC7 0x11    
   \              0x2C 0xD0    
    355          {
    356              /*
    357               * SHA-224 test vectors
    358               */
    359              { 0x23, 0x09, 0x7D, 0x22, 0x34, 0x05, 0xD8, 0x22,
    360                0x86, 0x42, 0xA4, 0x77, 0xBD, 0xA2, 0x55, 0xB3,
    361                0x2A, 0xAD, 0xBC, 0xE4, 0xBD, 0xA0, 0xB3, 0xF7,
    362                0xE3, 0x6C, 0x9D, 0xA7 },
    363              { 0x75, 0x38, 0x8B, 0x16, 0x51, 0x27, 0x76, 0xCC,
    364                0x5D, 0xBA, 0x5D, 0xA1, 0xFD, 0x89, 0x01, 0x50,
    365                0xB0, 0xC6, 0x45, 0x5C, 0xB4, 0xF5, 0x8B, 0x19,
    366                0x52, 0x52, 0x25, 0x25 },
    367              { 0x20, 0x79, 0x46, 0x55, 0x98, 0x0C, 0x91, 0xD8,
    368                0xBB, 0xB4, 0xC1, 0xEA, 0x97, 0x61, 0x8A, 0x4B,
    369                0xF0, 0x3F, 0x42, 0x58, 0x19, 0x48, 0xB2, 0xEE,
    370                0x4E, 0xE7, 0xAD, 0x67 },
    371          
    372              /*
    373               * SHA-256 test vectors
    374               */
    375              { 0xBA, 0x78, 0x16, 0xBF, 0x8F, 0x01, 0xCF, 0xEA,
    376                0x41, 0x41, 0x40, 0xDE, 0x5D, 0xAE, 0x22, 0x23,
    377                0xB0, 0x03, 0x61, 0xA3, 0x96, 0x17, 0x7A, 0x9C,
    378                0xB4, 0x10, 0xFF, 0x61, 0xF2, 0x00, 0x15, 0xAD },
    379              { 0x24, 0x8D, 0x6A, 0x61, 0xD2, 0x06, 0x38, 0xB8,
    380                0xE5, 0xC0, 0x26, 0x93, 0x0C, 0x3E, 0x60, 0x39,
    381                0xA3, 0x3C, 0xE4, 0x59, 0x64, 0xFF, 0x21, 0x67,
    382                0xF6, 0xEC, 0xED, 0xD4, 0x19, 0xDB, 0x06, 0xC1 },
    383              { 0xCD, 0xC7, 0x6E, 0x5C, 0x99, 0x14, 0xFB, 0x92,
    384                0x81, 0xA1, 0xC7, 0xE2, 0x84, 0xD7, 0x3E, 0x67,
    385                0xF1, 0x80, 0x9A, 0x48, 0xA4, 0x97, 0x20, 0x0E,
    386                0x04, 0x6D, 0x39, 0xCC, 0xC7, 0x11, 0x2C, 0xD0 }
    387          };
    388          
    389          /*
    390           * Checkup routine
    391           */

   \                                 In section .text, align 4, keep-with-next
    392          int mbedtls_sha256_self_test( int verbose )
    393          {
   \                     mbedtls_sha256_self_test: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB0AA             SUB      SP,SP,#+168
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9005             STR      R0,[SP, #+20]
    394              int i, j, k, buflen, ret = 0;
    395              unsigned char *buf;
    396              unsigned char sha256sum[32];
    397              mbedtls_sha256_context ctx;
    398          
    399              buf = mbedtls_calloc( 1024, sizeof(unsigned char) );
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x0288             LSLS     R0,R1,#+10
   \   0000000C   0x.... 0x....      BL       calloc
   \   00000010   0x9003             STR      R0,[SP, #+12]
    400              if( NULL == buf )
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD107             BNE      ??mbedtls_sha256_self_test_0
    401              {
    402                  if( verbose != 0 )
   \   00000016   0x982A             LDR      R0,[SP, #+168]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD002             BEQ      ??mbedtls_sha256_self_test_1
    403                      mbedtls_printf( "Buffer allocation failed\n" );
   \   0000001C   0x....             ADR.N    R0,?_0
   \   0000001E   0x.... 0x....      BL       printf
    404          
    405                  return( 1 );
   \                     ??mbedtls_sha256_self_test_1: (+1)
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xE0AB             B        ??mbedtls_sha256_self_test_2
    406              }
    407          
    408              mbedtls_sha256_init( &ctx );
   \                     ??mbedtls_sha256_self_test_0: (+1)
   \   00000026   0x216C             MOVS     R1,#+108
   \   00000028   0xA806             ADD      R0,SP,#+24
   \   0000002A   0x.... 0x....      BL       __aeabi_memclr4
    409          
    410              for( i = 0; i < 6; i++ )
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x9000             STR      R0,[SP, #+0]
   \   00000032   0xBF00             Nop      
   \   00000034   0x....             ADR.N    R0,sha256_test_sum
   \   00000036   0x9004             STR      R0,[SP, #+16]
   \   00000038   0x2400             MOVS     R4,#+0
   \   0000003A   0xE006             B        ??mbedtls_sha256_self_test_3
    411              {
    412                  j = i % 3;
   \                     ??mbedtls_sha256_self_test_4: (+1)
   \   0000003C   0x2103             MOVS     R1,#+3
   \   0000003E   0x.... 0x....      BL       __aeabi_idivmod
   \   00000042   0x000C             MOVS     R4,R1
    413                  k = i < 3;
   \   00000044   0x9800             LDR      R0,[SP, #+0]
   \   00000046   0x2803             CMP      R0,#+3
   \   00000048   0xDA01             BGE      ??mbedtls_sha256_self_test_5
   \                     ??mbedtls_sha256_self_test_3: (+1)
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0xE000             B        ??mbedtls_sha256_self_test_6
   \                     ??mbedtls_sha256_self_test_5: (+1)
   \   0000004E   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_sha256_self_test_6: (+1)
   \   00000050   0x9002             STR      R0,[SP, #+8]
    414          
    415                  if( verbose != 0 )
   \   00000052   0x982A             LDR      R0,[SP, #+168]
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD008             BEQ      ??mbedtls_sha256_self_test_7
    416                      mbedtls_printf( "  SHA-%d test #%d: ", 256 - k * 32, j + 1 );
   \   00000058   0x1C62             ADDS     R2,R4,#+1
   \   0000005A   0x2080             MOVS     R0,#+128
   \   0000005C   0x0040             LSLS     R0,R0,#+1        ;; #+256
   \   0000005E   0x9902             LDR      R1,[SP, #+8]
   \   00000060   0x0149             LSLS     R1,R1,#+5
   \   00000062   0x1A41             SUBS     R1,R0,R1
   \   00000064   0x....             ADR.N    R0,?_1
   \   00000066   0x.... 0x....      BL       printf
    417          
    418                  mbedtls_sha256_starts( &ctx, k );
   \                     ??mbedtls_sha256_self_test_7: (+1)
   \   0000006A   0x9902             LDR      R1,[SP, #+8]
   \   0000006C   0xA806             ADD      R0,SP,#+24
   \   0000006E   0x.... 0x....      BL       mbedtls_sha256_starts
    419          
    420                  if( j == 2 )
   \   00000072   0x2C02             CMP      R4,#+2
   \   00000074   0xD144             BNE      ??mbedtls_sha256_self_test_8
    421                  {
    422                      memset( buf, 'a', buflen = 1000 );
   \   00000076   0x2261             MOVS     R2,#+97
   \   00000078   0x21FA             MOVS     R1,#+250
   \   0000007A   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   0000007C   0x9803             LDR      R0,[SP, #+12]
   \   0000007E   0x.... 0x....      BL       __aeabi_memset
    423          
    424                      for( j = 0; j < 1000; j++ )
   \   00000082   0x27FA             MOVS     R7,#+250
   \   00000084   0x00BF             LSLS     R7,R7,#+2        ;; #+1000
    425                          mbedtls_sha256_update( &ctx, buf, buflen );
   \                     ??mbedtls_sha256_self_test_9: (+1)
   \   00000086   0x25FA             MOVS     R5,#+250
   \   00000088   0x00AD             LSLS     R5,R5,#+2        ;; #+1000
   \   0000008A   0x9C03             LDR      R4,[SP, #+12]
   \   0000008C   0x9806             LDR      R0,[SP, #+24]
   \   0000008E   0x0686             LSLS     R6,R0,#+26
   \   00000090   0x0EB6             LSRS     R6,R6,#+26
   \   00000092   0x2040             MOVS     R0,#+64
   \   00000094   0x1B80             SUBS     R0,R0,R6
   \   00000096   0x9001             STR      R0,[SP, #+4]
   \   00000098   0x9806             LDR      R0,[SP, #+24]
   \   0000009A   0x1940             ADDS     R0,R0,R5
   \   0000009C   0x9006             STR      R0,[SP, #+24]
   \   0000009E   0x42A8             CMP      R0,R5
   \   000000A0   0xD202             BCS      ??mbedtls_sha256_self_test_10
   \   000000A2   0x9807             LDR      R0,[SP, #+28]
   \   000000A4   0x1C40             ADDS     R0,R0,#+1
   \   000000A6   0x9007             STR      R0,[SP, #+28]
   \                     ??mbedtls_sha256_self_test_10: (+1)
   \   000000A8   0x2E00             CMP      R6,#+0
   \   000000AA   0xD016             BEQ      ??mbedtls_sha256_self_test_11
   \   000000AC   0x9801             LDR      R0,[SP, #+4]
   \   000000AE   0x1C69             ADDS     R1,R5,#+1
   \   000000B0   0x4288             CMP      R0,R1
   \   000000B2   0xD212             BCS      ??mbedtls_sha256_self_test_11
   \   000000B4   0x4602             MOV      R2,R0
   \   000000B6   0x0021             MOVS     R1,R4
   \   000000B8   0xA806             ADD      R0,SP,#+24
   \   000000BA   0x1980             ADDS     R0,R0,R6
   \   000000BC   0x3028             ADDS     R0,R0,#+40
   \   000000BE   0x.... 0x....      BL       __aeabi_memcpy
   \   000000C2   0xA806             ADD      R0,SP,#+24
   \   000000C4   0x0001             MOVS     R1,R0
   \   000000C6   0x3128             ADDS     R1,R1,#+40
   \   000000C8   0x.... 0x....      BL       mbedtls_sha256_process
   \   000000CC   0x9801             LDR      R0,[SP, #+4]
   \   000000CE   0x1824             ADDS     R4,R4,R0
   \   000000D0   0x9901             LDR      R1,[SP, #+4]
   \   000000D2   0x1A6D             SUBS     R5,R5,R1
   \   000000D4   0x2600             MOVS     R6,#+0
   \                     ??mbedtls_sha256_self_test_12: (+1)
   \   000000D6   0x2D40             CMP      R5,#+64
   \   000000D8   0xD306             BCC      ??mbedtls_sha256_self_test_13
   \                     ??mbedtls_sha256_self_test_11: (+1)
   \   000000DA   0x0021             MOVS     R1,R4
   \   000000DC   0xA806             ADD      R0,SP,#+24
   \   000000DE   0x.... 0x....      BL       mbedtls_sha256_process
   \   000000E2   0x3440             ADDS     R4,R4,#+64
   \   000000E4   0x3D40             SUBS     R5,R5,#+64
   \   000000E6   0xE7F6             B        ??mbedtls_sha256_self_test_12
   \                     ??mbedtls_sha256_self_test_13: (+1)
   \   000000E8   0x2D00             CMP      R5,#+0
   \   000000EA   0xD006             BEQ      ??mbedtls_sha256_self_test_14
   \   000000EC   0x002A             MOVS     R2,R5
   \   000000EE   0x0021             MOVS     R1,R4
   \   000000F0   0xA806             ADD      R0,SP,#+24
   \   000000F2   0x1980             ADDS     R0,R0,R6
   \   000000F4   0x3028             ADDS     R0,R0,#+40
   \   000000F6   0x.... 0x....      BL       __aeabi_memcpy
   \                     ??mbedtls_sha256_self_test_14: (+1)
   \   000000FA   0x1E7F             SUBS     R7,R7,#+1
   \   000000FC   0xD00B             BEQ      ??mbedtls_sha256_self_test_15
   \   000000FE   0xE7C2             B        ??mbedtls_sha256_self_test_9
    426                  }
    427                  else
    428                      mbedtls_sha256_update( &ctx, sha256_test_buf[j],
    429                                           sha256_test_buflen[j] );
   \                     ??mbedtls_sha256_self_test_8: (+1)
   \   00000100   0x....             ADR.N    R0,sha256_test_buflen
   \   00000102   0x00A1             LSLS     R1,R4,#+2
   \   00000104   0x5842             LDR      R2,[R0, R1]
   \   00000106   0xBF00             Nop      
   \   00000108   0x....             ADR.N    R0,sha256_test_buf
   \   0000010A   0x2139             MOVS     R1,#+57
   \   0000010C   0x434C             MULS     R4,R1,R4
   \   0000010E   0x1901             ADDS     R1,R0,R4
   \   00000110   0xA806             ADD      R0,SP,#+24
   \   00000112   0x.... 0x....      BL       mbedtls_sha256_update
    430          
    431                  mbedtls_sha256_finish( &ctx, sha256sum );
   \                     ??mbedtls_sha256_self_test_15: (+1)
   \   00000116   0xA921             ADD      R1,SP,#+132
   \   00000118   0xA806             ADD      R0,SP,#+24
   \   0000011A   0x.... 0x....      BL       mbedtls_sha256_finish
    432          
    433                  if( memcmp( sha256sum, sha256_test_sum[i], 32 - k * 4 ) != 0 )
   \   0000011E   0x2020             MOVS     R0,#+32
   \   00000120   0x9902             LDR      R1,[SP, #+8]
   \   00000122   0x0089             LSLS     R1,R1,#+2
   \   00000124   0x1A42             SUBS     R2,R0,R1
   \   00000126   0x9904             LDR      R1,[SP, #+16]
   \   00000128   0xA821             ADD      R0,SP,#+132
   \   0000012A   0x.... 0x....      BL       memcmp
   \   0000012E   0x2800             CMP      R0,#+0
   \   00000130   0x982A             LDR      R0,[SP, #+168]
   \   00000132   0xD007             BEQ      ??mbedtls_sha256_self_test_16
    434                  {
    435                      if( verbose != 0 )
   \   00000134   0x2800             CMP      R0,#+0
   \   00000136   0xD002             BEQ      ??mbedtls_sha256_self_test_17
    436                          mbedtls_printf( "failed\n" );
   \   00000138   0x....             ADR.N    R0,?_2
   \   0000013A   0x.... 0x....      BL       printf
    437          
    438                      ret = 1;
   \                     ??mbedtls_sha256_self_test_17: (+1)
   \   0000013E   0x2001             MOVS     R0,#+1
   \   00000140   0x9005             STR      R0,[SP, #+20]
    439                      goto exit;
   \   00000142   0xE014             B        ??mbedtls_sha256_self_test_18
    440                  }
    441          
    442                  if( verbose != 0 )
   \                     ??mbedtls_sha256_self_test_16: (+1)
   \   00000144   0x2800             CMP      R0,#+0
   \   00000146   0xD002             BEQ      ??mbedtls_sha256_self_test_19
    443                      mbedtls_printf( "passed\n" );
   \   00000148   0x....             ADR.N    R0,?_3
   \   0000014A   0x.... 0x....      BL       printf
    444              }
   \                     ??mbedtls_sha256_self_test_19: (+1)
   \   0000014E   0x9800             LDR      R0,[SP, #+0]
   \   00000150   0x1C40             ADDS     R0,R0,#+1
   \   00000152   0x9000             STR      R0,[SP, #+0]
   \   00000154   0x9804             LDR      R0,[SP, #+16]
   \   00000156   0x3020             ADDS     R0,R0,#+32
   \   00000158   0x9004             STR      R0,[SP, #+16]
   \   0000015A   0x9800             LDR      R0,[SP, #+0]
   \   0000015C   0x2806             CMP      R0,#+6
   \   0000015E   0xDA00             BGE      .+4
   \   00000160   0xE76C             B        ??mbedtls_sha256_self_test_4
    445          
    446              if( verbose != 0 )
   \   00000162   0x982A             LDR      R0,[SP, #+168]
   \   00000164   0x2800             CMP      R0,#+0
   \   00000166   0xD002             BEQ      ??mbedtls_sha256_self_test_18
    447                  mbedtls_printf( "\n" );
   \   00000168   0x....             ADR      R0,??DataTable12  ;; "\n"
   \   0000016A   0x.... 0x....      BL       printf
    448          
    449          exit:
    450              mbedtls_sha256_free( &ctx );
   \                     ??mbedtls_sha256_self_test_18: (+1)
   \   0000016E   0x216C             MOVS     R1,#+108
   \   00000170   0xA806             ADD      R0,SP,#+24
   \   00000172   0x.... 0x....      BL       __aeabi_memclr4
    451              mbedtls_free( buf );
   \   00000176   0x9803             LDR      R0,[SP, #+12]
   \   00000178   0x.... 0x....      BL       free
    452          
    453              return( ret );
   \   0000017C   0x9805             LDR      R0,[SP, #+20]
   \                     ??mbedtls_sha256_self_test_2: (+1)
   \   0000017E   0xB02B             ADD      SP,SP,#+172
   \   00000180   0xBDF0             POP      {R4-R7,PC}       ;; return
    454          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x6A09E667         DC32     0x6a09e667

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0xBB67AE85         DC32     0xbb67ae85

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x3C6EF372         DC32     0x3c6ef372

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0xA54FF53A         DC32     0xa54ff53a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x510E527F         DC32     0x510e527f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x9B05688C         DC32     0x9b05688c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x1F83D9AB         DC32     0x1f83d9ab

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x5BE0CD19         DC32     0x5be0cd19

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0xC1059ED8         DC32     0xc1059ed8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x367CD507         DC32     0x367cd507

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x3070DD17         DC32     0x3070dd17

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \   00000000   0xF70E5939         DC32     0xf70e5939

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \   00000000   0xFFC00B31         DC32     0xffc00b31

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \   00000000   0x68581511         DC32     0x68581511

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \   00000000   0x64F98FA7         DC32     0x64f98fa7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_15:
   \   00000000   0xBEFA4FA4         DC32     0xbefa4fa4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x42 0x75          DC8 "Buffer allocation failed\012"
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x20 0x61    
   \              0x6C 0x6C    
   \              0x6F 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x20 0x20          DC8 "  SHA-%d test #%d: "
   \              0x53 0x48    
   \              0x41 0x2D    
   \              0x25 0x64    
   \              0x20 0x74    
   \              0x65 0x73    
   \              0x74 0x20    
   \              0x23 0x25    
   \              0x64 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_4:
   \   00000000   0x0A 0x00          DC8 "\012"

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x66 0x61          DC8 "failed\012"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x70 0x61          DC8 "passed\012"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x00    
    455          
    456          #endif /* MBEDTLS_SELF_TEST */
    457          
    458          #endif /* MBEDTLS_SHA256_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     136   mbedtls_sha256
       136   -> __aeabi_memclr4
       136   -> __aeabi_memcpy
       136   -> mbedtls_sha256_finish
       136   -> mbedtls_sha256_process
       136   -> mbedtls_sha256_starts
       8   mbedtls_sha256_clone
         8   -> __aeabi_memcpy4
      40   mbedtls_sha256_finish
        40   -> __aeabi_memcpy
        40   -> mbedtls_sha256_process
       8   mbedtls_sha256_free
         8   -> __aeabi_memclr
       8   mbedtls_sha256_init
         8   -> __aeabi_memclr4
     336   mbedtls_sha256_process
     192   mbedtls_sha256_self_test
       192   -> __aeabi_memclr4
       192   -> __aeabi_memcpy
       192   -> __aeabi_memset
       192   -> calloc
       192   -> free
       192   -> mbedtls_sha256_finish
       192   -> mbedtls_sha256_process
       192   -> mbedtls_sha256_starts
       192   -> mbedtls_sha256_update
       192   -> memcmp
       192   -> printf
       192 __aeabi_idivmod
       0   mbedtls_sha256_starts
      24   mbedtls_sha256_update
        24   -> __aeabi_memcpy
        24   -> mbedtls_sha256_process


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_13
       4  ??DataTable10_14
       4  ??DataTable10_15
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
       4  ??DataTable12
      28  ?_0
      20  ?_1
       8  ?_2
       8  ?_3
       2  ?_4
     256  K
     148  mbedtls_sha256
      10  mbedtls_sha256_clone
     482  mbedtls_sha256_finish
      16  mbedtls_sha256_free
      10  mbedtls_sha256_init
    2520  mbedtls_sha256_process
     386  mbedtls_sha256_self_test
      78  mbedtls_sha256_starts
     112  mbedtls_sha256_update
      64  sha256_padding
     172  sha256_test_buf
      12  sha256_test_buflen
     192  sha256_test_sum

 
   258 bytes in section .rodata
 4 334 bytes in section .text
 
 4 334 bytes of CODE  memory
   258 bytes of CONST memory

Errors: none
Warnings: none
