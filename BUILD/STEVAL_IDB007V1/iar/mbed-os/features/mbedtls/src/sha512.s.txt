###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:35
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\mbedtls\src\sha512.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\sha512.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\sha512.s.txt
#        -o .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\sha512.o
#        .\mbed-os\features\mbedtls\src\sha512.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\sha512.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\sha512.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\mbedtls\src\sha512.c
      1          /*
      2           *  FIPS-180-2 compliant SHA-384/512 implementation
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          /*
     22           *  The SHA-512 Secure Hash Standard was published by NIST in 2002.
     23           *
     24           *  http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf
     25           */
     26          
     27          #if !defined(MBEDTLS_CONFIG_FILE)
     28          #include "mbedtls/config.h"
     29          #else
     30          #include MBEDTLS_CONFIG_FILE
     31          #endif
     32          
     33          #if defined(MBEDTLS_SHA512_C)
     34          
     35          #include "mbedtls/sha512.h"
     36          
     37          #if defined(_MSC_VER) || defined(__WATCOMC__)
     38            #define UL64(x) x##ui64
     39          #else
     40            #define UL64(x) x##ULL
     41          #endif
     42          
     43          #include <string.h>
     44          
     45          #if defined(MBEDTLS_SELF_TEST)
     46          #if defined(MBEDTLS_PLATFORM_C)
     47          #include "mbedtls/platform.h"
     48          #else
     49          #include <stdio.h>
     50          #include <stdlib.h>
     51          #define mbedtls_printf printf
     52          #define mbedtls_calloc    calloc
     53          #define mbedtls_free       free
     54          #endif /* MBEDTLS_PLATFORM_C */
     55          #endif /* MBEDTLS_SELF_TEST */
     56          
     57          #if !defined(MBEDTLS_SHA512_ALT)
     58          
     59          /* Implementation that should never be optimized out by the compiler */
     60          static void mbedtls_zeroize( void *v, size_t n ) {
     61              volatile unsigned char *p = v; while( n-- ) *p++ = 0;
     62          }
     63          
     64          /*
     65           * 64-bit integer manipulation macros (big endian)
     66           */
     67          #ifndef GET_UINT64_BE
     68          #define GET_UINT64_BE(n,b,i)                            \
     69          {                                                       \
     70              (n) = ( (uint64_t) (b)[(i)    ] << 56 )       \
     71                  | ( (uint64_t) (b)[(i) + 1] << 48 )       \
     72                  | ( (uint64_t) (b)[(i) + 2] << 40 )       \
     73                  | ( (uint64_t) (b)[(i) + 3] << 32 )       \
     74                  | ( (uint64_t) (b)[(i) + 4] << 24 )       \
     75                  | ( (uint64_t) (b)[(i) + 5] << 16 )       \
     76                  | ( (uint64_t) (b)[(i) + 6] <<  8 )       \
     77                  | ( (uint64_t) (b)[(i) + 7]       );      \
     78          }
     79          #endif /* GET_UINT64_BE */
     80          
     81          #ifndef PUT_UINT64_BE
     82          #define PUT_UINT64_BE(n,b,i)                            \
     83          {                                                       \
     84              (b)[(i)    ] = (unsigned char) ( (n) >> 56 );       \
     85              (b)[(i) + 1] = (unsigned char) ( (n) >> 48 );       \
     86              (b)[(i) + 2] = (unsigned char) ( (n) >> 40 );       \
     87              (b)[(i) + 3] = (unsigned char) ( (n) >> 32 );       \
     88              (b)[(i) + 4] = (unsigned char) ( (n) >> 24 );       \
     89              (b)[(i) + 5] = (unsigned char) ( (n) >> 16 );       \
     90              (b)[(i) + 6] = (unsigned char) ( (n) >>  8 );       \
     91              (b)[(i) + 7] = (unsigned char) ( (n)       );       \
     92          }
     93          #endif /* PUT_UINT64_BE */
     94          

   \                                 In section .text, align 2, keep-with-next
     95          void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
     96          {
   \                     mbedtls_sha512_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     97              memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
   \   00000002   0x21D8             MOVS     R1,#+216
   \   00000004   0x.... 0x....      BL       __aeabi_memclr4
     98          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
     99          

   \                                 In section .text, align 2, keep-with-next
    100          void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
    101          {
    102              if( ctx == NULL )
   \                     mbedtls_sha512_free: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD100             BNE      ??mbedtls_sha512_free_0
   \   00000004   0x4770             BX       LR
    103                  return;
    104          
    105              mbedtls_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
   \                     ??mbedtls_sha512_free_0: (+1)
   \   00000006   0xB580             PUSH     {R7,LR}
   \   00000008   0x21D8             MOVS     R1,#+216
   \   0000000A   0x.... 0x....      BL       __aeabi_memclr
    106          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
    107          

   \                                 In section .text, align 2, keep-with-next
    108          void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
    109                                     const mbedtls_sha512_context *src )
    110          {
   \                     mbedtls_sha512_clone: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    111              *dst = *src;
   \   00000002   0x22D8             MOVS     R2,#+216
   \   00000004   0x.... 0x....      BL       __aeabi_memcpy4
    112          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    113          
    114          /*
    115           * SHA-512 context setup
    116           */

   \                                 In section .text, align 2, keep-with-next
    117          void mbedtls_sha512_starts( mbedtls_sha512_context *ctx, int is384 )
    118          {
   \                     mbedtls_sha512_starts: (+1)
   \   00000000   0xB410             PUSH     {R4}
    119              ctx->total[0] = 0;
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0xC00C             STM      R0!,{R2,R3}
   \   00000008   0x3808             SUBS     R0,R0,#+8
    120              ctx->total[1] = 0;
   \   0000000A   0x0004             MOVS     R4,R0
   \   0000000C   0x3408             ADDS     R4,R4,#+8
   \   0000000E   0xC40C             STM      R4!,{R2,R3}
    121          
    122              if( is384 == 0 )
   \   00000010   0x2900             CMP      R1,#+0
   \   00000012   0xD124             BNE      ??mbedtls_sha512_starts_0
    123              {
    124                  /* SHA-512 */
    125                  ctx->state[0] = UL64(0x6A09E667F3BCC908);
   \   00000014   0x....             ADR      R2,??DataTable10
   \   00000016   0xCA0C             LDM      R2,{R2,R3}
   \   00000018   0x0004             MOVS     R4,R0
   \   0000001A   0x3410             ADDS     R4,R4,#+16
   \   0000001C   0xC40C             STM      R4!,{R2,R3}
    126                  ctx->state[1] = UL64(0xBB67AE8584CAA73B);
   \   0000001E   0x....             ADR      R2,??DataTable10_1
   \   00000020   0xCA0C             LDM      R2,{R2,R3}
   \   00000022   0x0004             MOVS     R4,R0
   \   00000024   0x3418             ADDS     R4,R4,#+24
   \   00000026   0xC40C             STM      R4!,{R2,R3}
    127                  ctx->state[2] = UL64(0x3C6EF372FE94F82B);
   \   00000028   0x....             ADR      R2,??DataTable10_2
   \   0000002A   0xCA0C             LDM      R2,{R2,R3}
   \   0000002C   0x0004             MOVS     R4,R0
   \   0000002E   0x3420             ADDS     R4,R4,#+32
   \   00000030   0xC40C             STM      R4!,{R2,R3}
    128                  ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
   \   00000032   0x....             ADR      R2,??DataTable10_3
   \   00000034   0xCA0C             LDM      R2,{R2,R3}
   \   00000036   0x0004             MOVS     R4,R0
   \   00000038   0x3428             ADDS     R4,R4,#+40
   \   0000003A   0xC40C             STM      R4!,{R2,R3}
    129                  ctx->state[4] = UL64(0x510E527FADE682D1);
   \   0000003C   0x....             ADR      R2,??DataTable10_4
   \   0000003E   0xCA0C             LDM      R2,{R2,R3}
   \   00000040   0x0004             MOVS     R4,R0
   \   00000042   0x3430             ADDS     R4,R4,#+48
   \   00000044   0xC40C             STM      R4!,{R2,R3}
    130                  ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
   \   00000046   0x....             ADR      R2,??DataTable10_5
   \   00000048   0xCA0C             LDM      R2,{R2,R3}
   \   0000004A   0x0004             MOVS     R4,R0
   \   0000004C   0x3438             ADDS     R4,R4,#+56
   \   0000004E   0xC40C             STM      R4!,{R2,R3}
    131                  ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
   \   00000050   0x....             ADR      R2,??DataTable10_6
   \   00000052   0xCA0C             LDM      R2,{R2,R3}
   \   00000054   0x6402             STR      R2,[R0, #+64]
   \   00000056   0x6443             STR      R3,[R0, #+68]
    132                  ctx->state[7] = UL64(0x5BE0CD19137E2179);
   \   00000058   0x....             ADR      R2,??DataTable10_7
   \   0000005A   0xCA0C             LDM      R2,{R2,R3}
   \   0000005C   0xE023             B        ??mbedtls_sha512_starts_1
    133              }
    134              else
    135              {
    136                  /* SHA-384 */
    137                  ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
   \                     ??mbedtls_sha512_starts_0: (+1)
   \   0000005E   0x....             ADR      R2,??DataTable10_8
   \   00000060   0xCA0C             LDM      R2,{R2,R3}
   \   00000062   0x0004             MOVS     R4,R0
   \   00000064   0x3410             ADDS     R4,R4,#+16
   \   00000066   0xC40C             STM      R4!,{R2,R3}
    138                  ctx->state[1] = UL64(0x629A292A367CD507);
   \   00000068   0x....             ADR      R2,??DataTable10_9
   \   0000006A   0xCA0C             LDM      R2,{R2,R3}
   \   0000006C   0x0004             MOVS     R4,R0
   \   0000006E   0x3418             ADDS     R4,R4,#+24
   \   00000070   0xC40C             STM      R4!,{R2,R3}
    139                  ctx->state[2] = UL64(0x9159015A3070DD17);
   \   00000072   0x....             ADR      R2,??DataTable10_10
   \   00000074   0xCA0C             LDM      R2,{R2,R3}
   \   00000076   0x0004             MOVS     R4,R0
   \   00000078   0x3420             ADDS     R4,R4,#+32
   \   0000007A   0xC40C             STM      R4!,{R2,R3}
    140                  ctx->state[3] = UL64(0x152FECD8F70E5939);
   \   0000007C   0x....             ADR      R2,??DataTable10_11
   \   0000007E   0xCA0C             LDM      R2,{R2,R3}
   \   00000080   0x0004             MOVS     R4,R0
   \   00000082   0x3428             ADDS     R4,R4,#+40
   \   00000084   0xC40C             STM      R4!,{R2,R3}
    141                  ctx->state[4] = UL64(0x67332667FFC00B31);
   \   00000086   0x....             ADR      R2,??DataTable10_12
   \   00000088   0xCA0C             LDM      R2,{R2,R3}
   \   0000008A   0x0004             MOVS     R4,R0
   \   0000008C   0x3430             ADDS     R4,R4,#+48
   \   0000008E   0xC40C             STM      R4!,{R2,R3}
    142                  ctx->state[5] = UL64(0x8EB44A8768581511);
   \   00000090   0x....             ADR      R2,??DataTable10_13
   \   00000092   0xCA0C             LDM      R2,{R2,R3}
   \   00000094   0x0004             MOVS     R4,R0
   \   00000096   0x3438             ADDS     R4,R4,#+56
   \   00000098   0xC40C             STM      R4!,{R2,R3}
    143                  ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
   \   0000009A   0x....             ADR      R2,??DataTable10_14
   \   0000009C   0xCA0C             LDM      R2,{R2,R3}
   \   0000009E   0x6402             STR      R2,[R0, #+64]
   \   000000A0   0x6443             STR      R3,[R0, #+68]
    144                  ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
   \   000000A2   0x....             ADR      R2,??DataTable10_15
   \   000000A4   0xCA0C             LDM      R2,{R2,R3}
   \                     ??mbedtls_sha512_starts_1: (+1)
   \   000000A6   0x6482             STR      R2,[R0, #+72]
   \   000000A8   0x64C3             STR      R3,[R0, #+76]
    145              }
    146          
    147              ctx->is384 = is384;
   \   000000AA   0x22D0             MOVS     R2,#+208
   \   000000AC   0x5081             STR      R1,[R0, R2]
    148          }
   \   000000AE   0xBC10             POP      {R4}
   \   000000B0   0x4770             BX       LR               ;; return
    149          
    150          #if !defined(MBEDTLS_SHA512_PROCESS_ALT)
    151          
    152          /*
    153           * Round constants
    154           */

   \                                 In section .rodata, align 8, keep-with-next
    155          static const uint64_t K[80] =
   \                     K:
   \   00000000   0xD728AE22         DC32 3609767458, 1116352408, 602891725, 1899447441, 3964484399
   \              0x428A2F98   
   \              0x23EF65CD   
   \              0x71374491   
   \              0xEC4D3B2F   
   \   00000014   0xB5C0FBCF         DC32 3049323471, 2173295548, 3921009573, 4081628472, 961987163
   \              0x8189DBBC   
   \              0xE9B5DBA5   
   \              0xF348B538   
   \              0x3956C25B   
   \   00000028   0xB605D019         DC32 3053834265, 1508970993, 2937671579, 2453635748, 3664609560
   \              0x59F111F1   
   \              0xAF194F9B   
   \              0x923F82A4   
   \              0xDA6D8118   
   \   0000003C   0xAB1C5ED5         DC32 2870763221, 2734883394, 3624381080, 1164996542, 310598401
   \              0xA3030242   
   \              0xD807AA98   
   \              0x45706FBE   
   \              0x12835B01   
   \   00000050   0x4EE4B28C         DC32 1323610764, 607225278, 3590304994, 1426881987, 4068182383
   \              0x243185BE   
   \              0xD5FFB4E2   
   \              0x550C7DC3   
   \              0xF27B896F   
   \   00000064   0x72BE5D74         DC32 1925078388, 991336113, 2162078206, 633803317, 2614888103
   \              0x3B1696B1   
   \              0x80DEB1FE   
   \              0x25C71235   
   \              0x9BDC06A7   
   \   00000078   0xCF692694         DC32 3479774868, 3248222580, 2666613458, 3835390401, 944711139
   \              0xC19BF174   
   \              0x9EF14AD2   
   \              0xE49B69C1   
   \              0x384F25E3   
   \   0000008C   0xEFBE4786         DC32 4022224774, 2341262773, 264347078, 2007800933, 604807628
   \              0x8B8CD5B5   
   \              0x0FC19DC6   
   \              0x77AC9C65   
   \              0x240CA1CC   
   \   000000A0   0x592B0275         DC32 1495990901, 770255983, 1856431235, 1249150122, 3175218132
   \              0x2DE92C6F   
   \              0x6EA6E483   
   \              0x4A7484AA   
   \              0xBD41FBD4   
   \   000000B4   0x5CB0A9DC         DC32 1555081692, 2198950837, 1996064986, 3999719339, 2554220882
   \              0x831153B5   
   \              0x76F988DA   
   \              0xEE66DFAB   
   \              0x983E5152   
   \   000000C8   0x2DB43210         DC32 766784016, 2821834349, 2566594879, 2952996808, 3203337956
   \              0xA831C66D   
   \              0x98FB213F   
   \              0xB00327C8   
   \              0xBEEF0EE4   
   \   000000DC   0xBF597FC7         DC32 3210313671, 1034457026, 3336571891, 2466948901, 3584528711
   \              0x3DA88FC2   
   \              0xC6E00BF3   
   \              0x930AA725   
   \              0xD5A79147   
   \   000000F0   0xE003826F         DC32 3758326383, 113926993, 168717936, 338241895, 1188179964, 666307205
   \              0x06CA6351   
   \              0x0A0E6E70   
   \              0x14292967   
   \              0x46D22FFC   
   \              0x27B70A85   
   \   00000108   0x5C26C926         DC32 1546045734, 773529912, 1522805485, 1294757372, 2643833823
   \              0x2E1B2138   
   \              0x5AC42AED   
   \              0x4D2C6DFC   
   \              0x9D95B3DF   
   \   0000011C   0x53380D13         DC32 1396182291, 2343527390, 1695183700, 1014477480, 1986661051
   \              0x8BAF63DE   
   \              0x650A7354   
   \              0x3C77B2A8   
   \              0x766A0ABB   
   \   00000130   0x47EDAEE6         DC32 1206759142, 2177026350, 344077627, 2456956037, 1290863460
   \              0x81C2C92E   
   \              0x1482353B   
   \              0x92722C85   
   \              0x4CF10364   
   \   00000144   0xA2BFE8A1         DC32 2730485921, 3158454273, 2820302411, 3505952657, 3259730800
   \              0xBC423001   
   \              0xA81A664B   
   \              0xD0F89791   
   \              0xC24B8B70   
   \   00000158   0x0654BE30         DC32 106217008, 3345764771, 3606008344, 3516065817, 1432725776
   \              0xC76C51A3   
   \              0xD6EF5218   
   \              0xD192E819   
   \              0x5565A910   
   \   0000016C   0xD6990624         DC32 3600352804, 1467031594, 4094571909, 851169720, 275423344
   \              0x5771202A   
   \              0xF40E3585   
   \              0x32BBD1B8   
   \              0x106AA070   
   \   00000180   0xB8D2D0C8         DC32 3100823752, 430227734, 1363258195, 506948616, 3750685593
   \              0x19A4C116   
   \              0x5141AB53   
   \              0x1E376C08   
   \              0xDF8EEB99   
   \   00000194   0x2748774C         DC32 659060556, 3785050280, 883997877, 3318307427, 958139571
   \              0xE19B48A8   
   \              0x34B0BCB5   
   \              0xC5C95A63   
   \              0x391C0CB3   
   \   000001A8   0xE3418ACB         DC32 3812723403, 1322822218, 2003034995, 1537002063, 3602036899
   \              0x4ED8AA4A   
   \              0x7763E373   
   \              0x5B9CCA4F   
   \              0xD6B2B8A3   
   \   000001BC   0x682E6FF3         DC32 1747873779, 1575990012, 1955562222, 1125592928, 2024104815
   \              0x5DEFB2FC   
   \              0x748F82EE   
   \              0x43172F60   
   \              0x78A5636F   
   \   000001D0   0xA1F0AB72         DC32 2716904306, 2227730452, 442776044, 2361852424, 593698344
   \              0x84C87814   
   \              0x1A6439EC   
   \              0x8CC70208   
   \              0x23631E28   
   \   000001E4   0x90BEFFFA         DC32 2428436474, 3733110249, 2756734187, 2999351573, 3204031479
   \              0xDE82BDE9   
   \              0xA4506CEB   
   \              0xB2C67915   
   \              0xBEF9A3F7   
   \   000001F8   0xE372532B         DC32 3815920427, 3329325298, 3928383900, 3391569614, 566280711
   \              0xC67178F2   
   \              0xEA26619C   
   \              0xCA273ECE   
   \              0x21C0C207   
   \   0000020C   0xD186B8C7         DC32 3515267271, 3454069534, 3940187606, 4000239992, 4118630271
   \              0xCDE0EB1E   
   \              0xEADA7DD6   
   \              0xEE6ED178   
   \              0xF57D4F7F   
   \   00000220   0x72176FBA         DC32 1914138554, 116418474, 2731055270, 174292421, 3203993006
   \              0x06F067AA   
   \              0xA2C898A6   
   \              0x0A637DC5   
   \              0xBEF90DAE   
   \   00000234   0x113F9804         DC32 289380356, 320620315, 460393269, 587496836, 685471733, 1086792851
   \              0x131C471B   
   \              0x1B710B35   
   \              0x23047D84   
   \              0x28DB77F5   
   \              0x40C72493   
   \   0000024C   0x32CAAB7B         DC32 852142971, 365543100, 1017036298, 2618297676, 1126000580
   \              0x15C9BEBC   
   \              0x3C9EBE0A   
   \              0x9C100D4C   
   \              0x431D67C4   
   \   00000260   0xCB3E42B6         DC32 3409855158, 1288033470, 4234509866, 1501505948, 987167468
   \              0x4CC5D4BE   
   \              0xFC657E2A   
   \              0x597F299C   
   \              0x3AD6FAEC   
   \   00000274   0x5FCB6FAB         DC32 1607167915, 1246189591, 1816402316
   \              0x4A475817   
   \              0x6C44198C   
    156          {
    157              UL64(0x428A2F98D728AE22),  UL64(0x7137449123EF65CD),
    158              UL64(0xB5C0FBCFEC4D3B2F),  UL64(0xE9B5DBA58189DBBC),
    159              UL64(0x3956C25BF348B538),  UL64(0x59F111F1B605D019),
    160              UL64(0x923F82A4AF194F9B),  UL64(0xAB1C5ED5DA6D8118),
    161              UL64(0xD807AA98A3030242),  UL64(0x12835B0145706FBE),
    162              UL64(0x243185BE4EE4B28C),  UL64(0x550C7DC3D5FFB4E2),
    163              UL64(0x72BE5D74F27B896F),  UL64(0x80DEB1FE3B1696B1),
    164              UL64(0x9BDC06A725C71235),  UL64(0xC19BF174CF692694),
    165              UL64(0xE49B69C19EF14AD2),  UL64(0xEFBE4786384F25E3),
    166              UL64(0x0FC19DC68B8CD5B5),  UL64(0x240CA1CC77AC9C65),
    167              UL64(0x2DE92C6F592B0275),  UL64(0x4A7484AA6EA6E483),
    168              UL64(0x5CB0A9DCBD41FBD4),  UL64(0x76F988DA831153B5),
    169              UL64(0x983E5152EE66DFAB),  UL64(0xA831C66D2DB43210),
    170              UL64(0xB00327C898FB213F),  UL64(0xBF597FC7BEEF0EE4),
    171              UL64(0xC6E00BF33DA88FC2),  UL64(0xD5A79147930AA725),
    172              UL64(0x06CA6351E003826F),  UL64(0x142929670A0E6E70),
    173              UL64(0x27B70A8546D22FFC),  UL64(0x2E1B21385C26C926),
    174              UL64(0x4D2C6DFC5AC42AED),  UL64(0x53380D139D95B3DF),
    175              UL64(0x650A73548BAF63DE),  UL64(0x766A0ABB3C77B2A8),
    176              UL64(0x81C2C92E47EDAEE6),  UL64(0x92722C851482353B),
    177              UL64(0xA2BFE8A14CF10364),  UL64(0xA81A664BBC423001),
    178              UL64(0xC24B8B70D0F89791),  UL64(0xC76C51A30654BE30),
    179              UL64(0xD192E819D6EF5218),  UL64(0xD69906245565A910),
    180              UL64(0xF40E35855771202A),  UL64(0x106AA07032BBD1B8),
    181              UL64(0x19A4C116B8D2D0C8),  UL64(0x1E376C085141AB53),
    182              UL64(0x2748774CDF8EEB99),  UL64(0x34B0BCB5E19B48A8),
    183              UL64(0x391C0CB3C5C95A63),  UL64(0x4ED8AA4AE3418ACB),
    184              UL64(0x5B9CCA4F7763E373),  UL64(0x682E6FF3D6B2B8A3),
    185              UL64(0x748F82EE5DEFB2FC),  UL64(0x78A5636F43172F60),
    186              UL64(0x84C87814A1F0AB72),  UL64(0x8CC702081A6439EC),
    187              UL64(0x90BEFFFA23631E28),  UL64(0xA4506CEBDE82BDE9),
    188              UL64(0xBEF9A3F7B2C67915),  UL64(0xC67178F2E372532B),
    189              UL64(0xCA273ECEEA26619C),  UL64(0xD186B8C721C0C207),
    190              UL64(0xEADA7DD6CDE0EB1E),  UL64(0xF57D4F7FEE6ED178),
    191              UL64(0x06F067AA72176FBA),  UL64(0x0A637DC5A2C898A6),
    192              UL64(0x113F9804BEF90DAE),  UL64(0x1B710B35131C471B),
    193              UL64(0x28DB77F523047D84),  UL64(0x32CAAB7B40C72493),
    194              UL64(0x3C9EBE0A15C9BEBC),  UL64(0x431D67C49C100D4C),
    195              UL64(0x4CC5D4BECB3E42B6),  UL64(0x597F299CFC657E2A),
    196              UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
    197          };
    198          

   \                                 In section .text, align 4, keep-with-next
    199          void mbedtls_sha512_process( mbedtls_sha512_context *ctx, const unsigned char data[128] )
    200          {
   \                     mbedtls_sha512_process: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB0FF             SUB      SP,SP,#+508
   \   00000004   0xB0C9             SUB      SP,SP,#+292
    201              int i;
    202              uint64_t temp1, temp2, W[80];
    203              uint64_t A, B, C, D, E, F, G, H;
    204          
    205          #define  SHR(x,n) (x >> n)
    206          #define ROTR(x,n) (SHR(x,n) | (x << (64 - n)))
    207          
    208          #define S0(x) (ROTR(x, 1) ^ ROTR(x, 8) ^  SHR(x, 7))
    209          #define S1(x) (ROTR(x,19) ^ ROTR(x,61) ^  SHR(x, 6))
    210          
    211          #define S2(x) (ROTR(x,28) ^ ROTR(x,34) ^ ROTR(x,39))
    212          #define S3(x) (ROTR(x,14) ^ ROTR(x,18) ^ ROTR(x,41))
    213          
    214          #define F0(x,y,z) ((x & y) | (z & (x | y)))
    215          #define F1(x,y,z) (z ^ (x & (y ^ z)))
    216          
    217          #define P(a,b,c,d,e,f,g,h,x,K)                  \
    218          {                                               \
    219              temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    220              temp2 = S2(a) + F0(a,b,c);                  \
    221              d += temp1; h = temp1 + temp2;              \
    222          }
    223          
    224              for( i = 0; i < 16; i++ )
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0xAC28             ADD      R4,SP,#+160
   \   0000000A   0x000D             MOVS     R5,R1
    225              {
    226                  GET_UINT64_BE( W[i], data, i << 3 );
   \                     ??mbedtls_sha512_process_0: (+1)
   \   0000000C   0x782A             LDRB     R2,[R5, #+0]
   \   0000000E   0x0613             LSLS     R3,R2,#+24
   \   00000010   0x7868             LDRB     R0,[R5, #+1]
   \   00000012   0x0401             LSLS     R1,R0,#+16
   \   00000014   0x4319             ORRS     R1,R1,R3
   \   00000016   0x78AA             LDRB     R2,[R5, #+2]
   \   00000018   0x0213             LSLS     R3,R2,#+8
   \   0000001A   0x430B             ORRS     R3,R3,R1
   \   0000001C   0x78E9             LDRB     R1,[R5, #+3]
   \   0000001E   0x4319             ORRS     R1,R1,R3
   \   00000020   0x792A             LDRB     R2,[R5, #+4]
   \   00000022   0x0612             LSLS     R2,R2,#+24
   \   00000024   0x7968             LDRB     R0,[R5, #+5]
   \   00000026   0x0400             LSLS     R0,R0,#+16
   \   00000028   0x4310             ORRS     R0,R0,R2
   \   0000002A   0x79AA             LDRB     R2,[R5, #+6]
   \   0000002C   0x0212             LSLS     R2,R2,#+8
   \   0000002E   0x4302             ORRS     R2,R2,R0
   \   00000030   0x79E8             LDRB     R0,[R5, #+7]
   \   00000032   0x4310             ORRS     R0,R0,R2
   \   00000034   0xC403             STM      R4!,{R0,R1}
    227              }
   \   00000036   0x1C76             ADDS     R6,R6,#+1
   \   00000038   0x3508             ADDS     R5,R5,#+8
   \   0000003A   0x2E10             CMP      R6,#+16
   \   0000003C   0xDBE6             BLT      ??mbedtls_sha512_process_0
   \   0000003E   0x2E50             CMP      R6,#+80
   \   00000040   0xDA5B             BGE      ??mbedtls_sha512_process_1
   \   00000042   0x9404             STR      R4,[SP, #+16]
   \   00000044   0x2050             MOVS     R0,#+80
   \   00000046   0x1B80             SUBS     R0,R0,R6
   \   00000048   0x9005             STR      R0,[SP, #+20]
    228          
    229              for( ; i < 80; i++ )
    230              {
    231                  W[i] = S1(W[i -  2]) + W[i -  7] +
    232                         S0(W[i - 15]) + W[i - 16];
   \                     ??mbedtls_sha512_process_2: (+1)
   \   0000004A   0x9804             LDR      R0,[SP, #+16]
   \   0000004C   0x3878             SUBS     R0,R0,#+120
   \   0000004E   0xC803             LDM      R0,{R0,R1}
   \   00000050   0x9A04             LDR      R2,[SP, #+16]
   \   00000052   0x3A10             SUBS     R2,R2,#+16
   \   00000054   0xCA0C             LDM      R2,{R2,R3}
   \   00000056   0x0CD4             LSRS     R4,R2,#+19
   \   00000058   0x035E             LSLS     R6,R3,#+13
   \   0000005A   0x4334             ORRS     R4,R4,R6
   \   0000005C   0x0CDD             LSRS     R5,R3,#+19
   \   0000005E   0x9400             STR      R4,[SP, #+0]
   \   00000060   0x9501             STR      R5,[SP, #+4]
   \   00000062   0x0355             LSLS     R5,R2,#+13
   \   00000064   0x9E00             LDR      R6,[SP, #+0]
   \   00000066   0x9F01             LDR      R7,[SP, #+4]
   \   00000068   0x433D             ORRS     R5,R5,R7
   \   0000006A   0x9602             STR      R6,[SP, #+8]
   \   0000006C   0x9503             STR      R5,[SP, #+12]
   \   0000006E   0x0F5C             LSRS     R4,R3,#+29
   \   00000070   0x2500             MOVS     R5,#+0
   \   00000072   0x9400             STR      R4,[SP, #+0]
   \   00000074   0x9501             STR      R5,[SP, #+4]
   \   00000076   0x00DD             LSLS     R5,R3,#+3
   \   00000078   0x0F56             LSRS     R6,R2,#+29
   \   0000007A   0x4335             ORRS     R5,R5,R6
   \   0000007C   0x00D4             LSLS     R4,R2,#+3
   \   0000007E   0x9E00             LDR      R6,[SP, #+0]
   \   00000080   0x4334             ORRS     R4,R4,R6
   \   00000082   0x9E02             LDR      R6,[SP, #+8]
   \   00000084   0x9F03             LDR      R7,[SP, #+12]
   \   00000086   0x4074             EORS     R4,R4,R6
   \   00000088   0x407D             EORS     R5,R5,R7
   \   0000008A   0x0992             LSRS     R2,R2,#+6
   \   0000008C   0x069E             LSLS     R6,R3,#+26
   \   0000008E   0x4332             ORRS     R2,R2,R6
   \   00000090   0x099B             LSRS     R3,R3,#+6
   \   00000092   0x4062             EORS     R2,R2,R4
   \   00000094   0x406B             EORS     R3,R3,R5
   \   00000096   0x9C04             LDR      R4,[SP, #+16]
   \   00000098   0x3C38             SUBS     R4,R4,#+56
   \   0000009A   0xCC30             LDM      R4,{R4,R5}
   \   0000009C   0x18A4             ADDS     R4,R4,R2
   \   0000009E   0x415D             ADCS     R5,R5,R3
   \   000000A0   0x9402             STR      R4,[SP, #+8]
   \   000000A2   0x9503             STR      R5,[SP, #+12]
   \   000000A4   0x0844             LSRS     R4,R0,#+1
   \   000000A6   0x07CA             LSLS     R2,R1,#+31
   \   000000A8   0x4314             ORRS     R4,R4,R2
   \   000000AA   0x084D             LSRS     R5,R1,#+1
   \   000000AC   0x07C3             LSLS     R3,R0,#+31
   \   000000AE   0x432B             ORRS     R3,R3,R5
   \   000000B0   0x9400             STR      R4,[SP, #+0]
   \   000000B2   0x9301             STR      R3,[SP, #+4]
   \   000000B4   0x0A02             LSRS     R2,R0,#+8
   \   000000B6   0x060C             LSLS     R4,R1,#+24
   \   000000B8   0x4322             ORRS     R2,R2,R4
   \   000000BA   0x0A0B             LSRS     R3,R1,#+8
   \   000000BC   0x0605             LSLS     R5,R0,#+24
   \   000000BE   0x0014             MOVS     R4,R2
   \   000000C0   0x431D             ORRS     R5,R5,R3
   \   000000C2   0x9A00             LDR      R2,[SP, #+0]
   \   000000C4   0x9B01             LDR      R3,[SP, #+4]
   \   000000C6   0x4054             EORS     R4,R4,R2
   \   000000C8   0x405D             EORS     R5,R5,R3
   \   000000CA   0x09C0             LSRS     R0,R0,#+7
   \   000000CC   0x064A             LSLS     R2,R1,#+25
   \   000000CE   0x4310             ORRS     R0,R0,R2
   \   000000D0   0x09C9             LSRS     R1,R1,#+7
   \   000000D2   0x4060             EORS     R0,R0,R4
   \   000000D4   0x4069             EORS     R1,R1,R5
   \   000000D6   0x9A02             LDR      R2,[SP, #+8]
   \   000000D8   0x9B03             LDR      R3,[SP, #+12]
   \   000000DA   0x1880             ADDS     R0,R0,R2
   \   000000DC   0x4159             ADCS     R1,R1,R3
   \   000000DE   0x9A04             LDR      R2,[SP, #+16]
   \   000000E0   0x3A80             SUBS     R2,R2,#+128
   \   000000E2   0xCA0C             LDM      R2,{R2,R3}
   \   000000E4   0x1812             ADDS     R2,R2,R0
   \   000000E6   0x414B             ADCS     R3,R3,R1
   \   000000E8   0x9804             LDR      R0,[SP, #+16]
   \   000000EA   0xC00C             STM      R0!,{R2,R3}
    233              }
   \   000000EC   0x9804             LDR      R0,[SP, #+16]
   \   000000EE   0x3008             ADDS     R0,R0,#+8
   \   000000F0   0x9004             STR      R0,[SP, #+16]
   \   000000F2   0x9805             LDR      R0,[SP, #+20]
   \   000000F4   0x1E40             SUBS     R0,R0,#+1
   \   000000F6   0x9005             STR      R0,[SP, #+20]
   \   000000F8   0xD1A7             BNE      ??mbedtls_sha512_process_2
    234          
    235              A = ctx->state[0];
   \                     ??mbedtls_sha512_process_1: (+1)
   \   000000FA   0xAA26             ADD      R2,SP,#+152
   \   000000FC   0x98C8             LDR      R0,[SP, #+800]
   \   000000FE   0x3010             ADDS     R0,R0,#+16
   \   00000100   0xC803             LDM      R0,{R0,R1}
   \   00000102   0xC203             STM      R2!,{R0,R1}
   \   00000104   0xA826             ADD      R0,SP,#+152
   \   00000106   0xC8C0             LDM      R0!,{R6,R7}
    236              B = ctx->state[1];
   \   00000108   0xAA24             ADD      R2,SP,#+144
   \   0000010A   0x98C8             LDR      R0,[SP, #+800]
   \   0000010C   0x3018             ADDS     R0,R0,#+24
   \   0000010E   0xC803             LDM      R0,{R0,R1}
   \   00000110   0xC203             STM      R2!,{R0,R1}
   \   00000112   0xA824             ADD      R0,SP,#+144
   \   00000114   0xC803             LDM      R0,{R0,R1}
   \   00000116   0xAA0A             ADD      R2,SP,#+40
   \   00000118   0xC203             STM      R2!,{R0,R1}
    237              C = ctx->state[2];
   \   0000011A   0xAA22             ADD      R2,SP,#+136
   \   0000011C   0x98C8             LDR      R0,[SP, #+800]
   \   0000011E   0x3020             ADDS     R0,R0,#+32
   \   00000120   0xC803             LDM      R0,{R0,R1}
   \   00000122   0xC203             STM      R2!,{R0,R1}
   \   00000124   0xA822             ADD      R0,SP,#+136
   \   00000126   0xC803             LDM      R0,{R0,R1}
   \   00000128   0xAA08             ADD      R2,SP,#+32
   \   0000012A   0xC203             STM      R2!,{R0,R1}
    238              D = ctx->state[3];
   \   0000012C   0xAA20             ADD      R2,SP,#+128
   \   0000012E   0x98C8             LDR      R0,[SP, #+800]
   \   00000130   0x3028             ADDS     R0,R0,#+40
   \   00000132   0xC803             LDM      R0,{R0,R1}
   \   00000134   0xC203             STM      R2!,{R0,R1}
   \   00000136   0xA820             ADD      R0,SP,#+128
   \   00000138   0xC830             LDM      R0!,{R4,R5}
    239              E = ctx->state[4];
   \   0000013A   0xAA1E             ADD      R2,SP,#+120
   \   0000013C   0x98C8             LDR      R0,[SP, #+800]
   \   0000013E   0x3030             ADDS     R0,R0,#+48
   \   00000140   0xC803             LDM      R0,{R0,R1}
   \   00000142   0xC203             STM      R2!,{R0,R1}
   \   00000144   0xA81E             ADD      R0,SP,#+120
   \   00000146   0xC803             LDM      R0,{R0,R1}
   \   00000148   0xAA10             ADD      R2,SP,#+64
   \   0000014A   0xC203             STM      R2!,{R0,R1}
    240              F = ctx->state[5];
   \   0000014C   0xAA1C             ADD      R2,SP,#+112
   \   0000014E   0x98C8             LDR      R0,[SP, #+800]
   \   00000150   0x3038             ADDS     R0,R0,#+56
   \   00000152   0xC803             LDM      R0,{R0,R1}
   \   00000154   0xC203             STM      R2!,{R0,R1}
   \   00000156   0xA81C             ADD      R0,SP,#+112
   \   00000158   0xC803             LDM      R0,{R0,R1}
   \   0000015A   0xAA0E             ADD      R2,SP,#+56
   \   0000015C   0xC203             STM      R2!,{R0,R1}
    241              G = ctx->state[6];
   \   0000015E   0xAA1A             ADD      R2,SP,#+104
   \   00000160   0x9BC8             LDR      R3,[SP, #+800]
   \   00000162   0x6C18             LDR      R0,[R3, #+64]
   \   00000164   0x6C59             LDR      R1,[R3, #+68]
   \   00000166   0xC203             STM      R2!,{R0,R1}
   \   00000168   0xA81A             ADD      R0,SP,#+104
   \   0000016A   0xC803             LDM      R0,{R0,R1}
   \   0000016C   0xAA0C             ADD      R2,SP,#+48
   \   0000016E   0xC203             STM      R2!,{R0,R1}
    242              H = ctx->state[7];
   \   00000170   0xAA18             ADD      R2,SP,#+96
   \   00000172   0x9BC8             LDR      R3,[SP, #+800]
   \   00000174   0x6C98             LDR      R0,[R3, #+72]
   \   00000176   0x6CD9             LDR      R1,[R3, #+76]
   \   00000178   0xC203             STM      R2!,{R0,R1}
   \   0000017A   0xA818             ADD      R0,SP,#+96
   \   0000017C   0xC80C             LDM      R0!,{R2,R3}
    243              i = 0;
   \   0000017E   0x4801             LDR      R0,??mbedtls_sha512_process_3
   \   00000180   0xE002             B.N      ??mbedtls_sha512_process_4
   \   00000182   0xBF00             Nop      
   \                     ??mbedtls_sha512_process_3:
   \   00000184   0x........         DC32     K
   \                     ??mbedtls_sha512_process_4: (+1)
   \   00000188   0x9007             STR      R0,[SP, #+28]
   \   0000018A   0xA828             ADD      R0,SP,#+160
   \   0000018C   0x9006             STR      R0,[SP, #+24]
   \   0000018E   0x200A             MOVS     R0,#+10
   \   00000190   0x9016             STR      R0,[SP, #+88]
    244          
    245              do
    246              {
    247                  P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
   \                     ??mbedtls_sha512_process_5: (+1)
   \   00000192   0x9204             STR      R2,[SP, #+16]
   \   00000194   0x9305             STR      R3,[SP, #+20]
   \   00000196   0xA810             ADD      R0,SP,#+64
   \   00000198   0xC803             LDM      R0,{R0,R1}
   \   0000019A   0x0B80             LSRS     R0,R0,#+14
   \   0000019C   0x048A             LSLS     R2,R1,#+18
   \   0000019E   0x4310             ORRS     R0,R0,R2
   \   000001A0   0x0B89             LSRS     R1,R1,#+14
   \   000001A2   0x9000             STR      R0,[SP, #+0]
   \   000001A4   0x9101             STR      R1,[SP, #+4]
   \   000001A6   0xA810             ADD      R0,SP,#+64
   \   000001A8   0xC803             LDM      R0,{R0,R1}
   \   000001AA   0x0481             LSLS     R1,R0,#+18
   \   000001AC   0x9A00             LDR      R2,[SP, #+0]
   \   000001AE   0x9B01             LDR      R3,[SP, #+4]
   \   000001B0   0x4319             ORRS     R1,R1,R3
   \   000001B2   0x9202             STR      R2,[SP, #+8]
   \   000001B4   0x9103             STR      R1,[SP, #+12]
   \   000001B6   0xA810             ADD      R0,SP,#+64
   \   000001B8   0xC803             LDM      R0,{R0,R1}
   \   000001BA   0x0C80             LSRS     R0,R0,#+18
   \   000001BC   0x038A             LSLS     R2,R1,#+14
   \   000001BE   0x4310             ORRS     R0,R0,R2
   \   000001C0   0x0C89             LSRS     R1,R1,#+18
   \   000001C2   0x9000             STR      R0,[SP, #+0]
   \   000001C4   0x9101             STR      R1,[SP, #+4]
   \   000001C6   0xA810             ADD      R0,SP,#+64
   \   000001C8   0xC803             LDM      R0,{R0,R1}
   \   000001CA   0x0381             LSLS     R1,R0,#+14
   \   000001CC   0x9800             LDR      R0,[SP, #+0]
   \   000001CE   0x9B01             LDR      R3,[SP, #+4]
   \   000001D0   0x4319             ORRS     R1,R1,R3
   \   000001D2   0x9A02             LDR      R2,[SP, #+8]
   \   000001D4   0x9B03             LDR      R3,[SP, #+12]
   \   000001D6   0x4050             EORS     R0,R0,R2
   \   000001D8   0x4059             EORS     R1,R1,R3
   \   000001DA   0x9002             STR      R0,[SP, #+8]
   \   000001DC   0x9103             STR      R1,[SP, #+12]
   \   000001DE   0xA810             ADD      R0,SP,#+64
   \   000001E0   0xC803             LDM      R0,{R0,R1}
   \   000001E2   0x0A48             LSRS     R0,R1,#+9
   \   000001E4   0x2100             MOVS     R1,#+0
   \   000001E6   0x9000             STR      R0,[SP, #+0]
   \   000001E8   0x9101             STR      R1,[SP, #+4]
   \   000001EA   0xA810             ADD      R0,SP,#+64
   \   000001EC   0xC803             LDM      R0,{R0,R1}
   \   000001EE   0x05C9             LSLS     R1,R1,#+23
   \   000001F0   0x0A42             LSRS     R2,R0,#+9
   \   000001F2   0x4311             ORRS     R1,R1,R2
   \   000001F4   0x05C0             LSLS     R0,R0,#+23
   \   000001F6   0x9A00             LDR      R2,[SP, #+0]
   \   000001F8   0x4310             ORRS     R0,R0,R2
   \   000001FA   0x9A02             LDR      R2,[SP, #+8]
   \   000001FC   0x9B03             LDR      R3,[SP, #+12]
   \   000001FE   0x4050             EORS     R0,R0,R2
   \   00000200   0x4059             EORS     R1,R1,R3
   \   00000202   0x9A04             LDR      R2,[SP, #+16]
   \   00000204   0x9B05             LDR      R3,[SP, #+20]
   \   00000206   0x1880             ADDS     R0,R0,R2
   \   00000208   0x4159             ADCS     R1,R1,R3
   \   0000020A   0x9004             STR      R0,[SP, #+16]
   \   0000020C   0x9105             STR      R1,[SP, #+20]
   \   0000020E   0xA80C             ADD      R0,SP,#+48
   \   00000210   0xC803             LDM      R0,{R0,R1}
   \   00000212   0x9002             STR      R0,[SP, #+8]
   \   00000214   0x9103             STR      R1,[SP, #+12]
   \   00000216   0xA810             ADD      R0,SP,#+64
   \   00000218   0xC803             LDM      R0,{R0,R1}
   \   0000021A   0x9000             STR      R0,[SP, #+0]
   \   0000021C   0x9101             STR      R1,[SP, #+4]
   \   0000021E   0xA80E             ADD      R0,SP,#+56
   \   00000220   0xC80C             LDM      R0!,{R2,R3}
   \   00000222   0xA80C             ADD      R0,SP,#+48
   \   00000224   0xC803             LDM      R0,{R0,R1}
   \   00000226   0x4050             EORS     R0,R0,R2
   \   00000228   0x4059             EORS     R1,R1,R3
   \   0000022A   0x9A00             LDR      R2,[SP, #+0]
   \   0000022C   0x9B01             LDR      R3,[SP, #+4]
   \   0000022E   0x4010             ANDS     R0,R0,R2
   \   00000230   0x4019             ANDS     R1,R1,R3
   \   00000232   0x9A02             LDR      R2,[SP, #+8]
   \   00000234   0x9B03             LDR      R3,[SP, #+12]
   \   00000236   0x4050             EORS     R0,R0,R2
   \   00000238   0x4059             EORS     R1,R1,R3
   \   0000023A   0x9A04             LDR      R2,[SP, #+16]
   \   0000023C   0x9B05             LDR      R3,[SP, #+20]
   \   0000023E   0x1880             ADDS     R0,R0,R2
   \   00000240   0x4159             ADCS     R1,R1,R3
   \   00000242   0x9A07             LDR      R2,[SP, #+28]
   \   00000244   0xCA0C             LDM      R2,{R2,R3}
   \   00000246   0x1812             ADDS     R2,R2,R0
   \   00000248   0x414B             ADCS     R3,R3,R1
   \   0000024A   0x9806             LDR      R0,[SP, #+24]
   \   0000024C   0xC803             LDM      R0,{R0,R1}
   \   0000024E   0x1880             ADDS     R0,R0,R2
   \   00000250   0x4159             ADCS     R1,R1,R3
   \   00000252   0xAA14             ADD      R2,SP,#+80
   \   00000254   0x1824             ADDS     R4,R4,R0
   \   00000256   0x414D             ADCS     R5,R5,R1
   \   00000258   0xC230             STM      R2!,{R4,R5}
   \   0000025A   0x9002             STR      R0,[SP, #+8]
   \   0000025C   0x9103             STR      R1,[SP, #+12]
   \   0000025E   0x0F32             LSRS     R2,R6,#+28
   \   00000260   0x0138             LSLS     R0,R7,#+4
   \   00000262   0x4302             ORRS     R2,R2,R0
   \   00000264   0x0F3B             LSRS     R3,R7,#+28
   \   00000266   0x0131             LSLS     R1,R6,#+4
   \   00000268   0x4319             ORRS     R1,R1,R3
   \   0000026A   0x9200             STR      R2,[SP, #+0]
   \   0000026C   0x9101             STR      R1,[SP, #+4]
   \   0000026E   0x08BA             LSRS     R2,R7,#+2
   \   00000270   0x07B9             LSLS     R1,R7,#+30
   \   00000272   0x08B4             LSRS     R4,R6,#+2
   \   00000274   0x4321             ORRS     R1,R1,R4
   \   00000276   0x07B0             LSLS     R0,R6,#+30
   \   00000278   0x4310             ORRS     R0,R0,R2
   \   0000027A   0x9A00             LDR      R2,[SP, #+0]
   \   0000027C   0x9B01             LDR      R3,[SP, #+4]
   \   0000027E   0x4050             EORS     R0,R0,R2
   \   00000280   0x4059             EORS     R1,R1,R3
   \   00000282   0x9000             STR      R0,[SP, #+0]
   \   00000284   0x9101             STR      R1,[SP, #+4]
   \   00000286   0x09FA             LSRS     R2,R7,#+7
   \   00000288   0x0679             LSLS     R1,R7,#+25
   \   0000028A   0x09F4             LSRS     R4,R6,#+7
   \   0000028C   0x4321             ORRS     R1,R1,R4
   \   0000028E   0x0670             LSLS     R0,R6,#+25
   \   00000290   0x4310             ORRS     R0,R0,R2
   \   00000292   0x9A00             LDR      R2,[SP, #+0]
   \   00000294   0x9B01             LDR      R3,[SP, #+4]
   \   00000296   0x4050             EORS     R0,R0,R2
   \   00000298   0x4059             EORS     R1,R1,R3
   \   0000029A   0x9A02             LDR      R2,[SP, #+8]
   \   0000029C   0x9B03             LDR      R3,[SP, #+12]
   \   0000029E   0x1880             ADDS     R0,R0,R2
   \   000002A0   0x4159             ADCS     R1,R1,R3
   \   000002A2   0x9000             STR      R0,[SP, #+0]
   \   000002A4   0x9101             STR      R1,[SP, #+4]
   \   000002A6   0xA80A             ADD      R0,SP,#+40
   \   000002A8   0xC80C             LDM      R0!,{R2,R3}
   \   000002AA   0x4032             ANDS     R2,R2,R6
   \   000002AC   0x403B             ANDS     R3,R3,R7
   \   000002AE   0xA808             ADD      R0,SP,#+32
   \   000002B0   0xC830             LDM      R0!,{R4,R5}
   \   000002B2   0xC803             LDM      R0,{R0,R1}
   \   000002B4   0x4330             ORRS     R0,R0,R6
   \   000002B6   0x4339             ORRS     R1,R1,R7
   \   000002B8   0x4020             ANDS     R0,R0,R4
   \   000002BA   0x4029             ANDS     R1,R1,R5
   \   000002BC   0x4310             ORRS     R0,R0,R2
   \   000002BE   0x4319             ORRS     R1,R1,R3
   \   000002C0   0x9A00             LDR      R2,[SP, #+0]
   \   000002C2   0x9B01             LDR      R3,[SP, #+4]
   \   000002C4   0x1880             ADDS     R0,R0,R2
   \   000002C6   0x4159             ADCS     R1,R1,R3
   \   000002C8   0xAA04             ADD      R2,SP,#+16
   \   000002CA   0xC203             STM      R2!,{R0,R1}
    248                  P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
   \   000002CC   0xA80C             ADD      R0,SP,#+48
   \   000002CE   0xC803             LDM      R0,{R0,R1}
   \   000002D0   0x9002             STR      R0,[SP, #+8]
   \   000002D2   0x9103             STR      R1,[SP, #+12]
   \   000002D4   0xA814             ADD      R0,SP,#+80
   \   000002D6   0xC80C             LDM      R0!,{R2,R3}
   \   000002D8   0x0B92             LSRS     R2,R2,#+14
   \   000002DA   0x0498             LSLS     R0,R3,#+18
   \   000002DC   0x4302             ORRS     R2,R2,R0
   \   000002DE   0x0B9B             LSRS     R3,R3,#+14
   \   000002E0   0xA814             ADD      R0,SP,#+80
   \   000002E2   0xC803             LDM      R0,{R0,R1}
   \   000002E4   0x0481             LSLS     R1,R0,#+18
   \   000002E6   0x4319             ORRS     R1,R1,R3
   \   000002E8   0x9200             STR      R2,[SP, #+0]
   \   000002EA   0x9101             STR      R1,[SP, #+4]
   \   000002EC   0xA814             ADD      R0,SP,#+80
   \   000002EE   0xC80C             LDM      R0!,{R2,R3}
   \   000002F0   0x0C92             LSRS     R2,R2,#+18
   \   000002F2   0x0398             LSLS     R0,R3,#+14
   \   000002F4   0x4302             ORRS     R2,R2,R0
   \   000002F6   0x0C9B             LSRS     R3,R3,#+18
   \   000002F8   0xA814             ADD      R0,SP,#+80
   \   000002FA   0xC803             LDM      R0,{R0,R1}
   \   000002FC   0x0381             LSLS     R1,R0,#+14
   \   000002FE   0x0010             MOVS     R0,R2
   \   00000300   0x4319             ORRS     R1,R1,R3
   \   00000302   0x9A00             LDR      R2,[SP, #+0]
   \   00000304   0x9B01             LDR      R3,[SP, #+4]
   \   00000306   0x4050             EORS     R0,R0,R2
   \   00000308   0x4059             EORS     R1,R1,R3
   \   0000030A   0x9000             STR      R0,[SP, #+0]
   \   0000030C   0x9101             STR      R1,[SP, #+4]
   \   0000030E   0xA814             ADD      R0,SP,#+80
   \   00000310   0xC80C             LDM      R0!,{R2,R3}
   \   00000312   0x0A5A             LSRS     R2,R3,#+9
   \   00000314   0xA814             ADD      R0,SP,#+80
   \   00000316   0xC803             LDM      R0,{R0,R1}
   \   00000318   0x05C9             LSLS     R1,R1,#+23
   \   0000031A   0x0A44             LSRS     R4,R0,#+9
   \   0000031C   0x4321             ORRS     R1,R1,R4
   \   0000031E   0x05C0             LSLS     R0,R0,#+23
   \   00000320   0x4310             ORRS     R0,R0,R2
   \   00000322   0x9A00             LDR      R2,[SP, #+0]
   \   00000324   0x9B01             LDR      R3,[SP, #+4]
   \   00000326   0x4050             EORS     R0,R0,R2
   \   00000328   0x4059             EORS     R1,R1,R3
   \   0000032A   0x9A02             LDR      R2,[SP, #+8]
   \   0000032C   0x9B03             LDR      R3,[SP, #+12]
   \   0000032E   0x1880             ADDS     R0,R0,R2
   \   00000330   0x4159             ADCS     R1,R1,R3
   \   00000332   0x9002             STR      R0,[SP, #+8]
   \   00000334   0x9103             STR      R1,[SP, #+12]
   \   00000336   0xA80E             ADD      R0,SP,#+56
   \   00000338   0xC803             LDM      R0,{R0,R1}
   \   0000033A   0x9000             STR      R0,[SP, #+0]
   \   0000033C   0x9101             STR      R1,[SP, #+4]
   \   0000033E   0xA814             ADD      R0,SP,#+80
   \   00000340   0xC80C             LDM      R0!,{R2,R3}
   \   00000342   0xA810             ADD      R0,SP,#+64
   \   00000344   0xC830             LDM      R0!,{R4,R5}
   \   00000346   0xA80E             ADD      R0,SP,#+56
   \   00000348   0xC803             LDM      R0,{R0,R1}
   \   0000034A   0x4060             EORS     R0,R0,R4
   \   0000034C   0x4069             EORS     R1,R1,R5
   \   0000034E   0x4010             ANDS     R0,R0,R2
   \   00000350   0x4019             ANDS     R1,R1,R3
   \   00000352   0x9A00             LDR      R2,[SP, #+0]
   \   00000354   0x9B01             LDR      R3,[SP, #+4]
   \   00000356   0x4050             EORS     R0,R0,R2
   \   00000358   0x4059             EORS     R1,R1,R3
   \   0000035A   0x9A02             LDR      R2,[SP, #+8]
   \   0000035C   0x9B03             LDR      R3,[SP, #+12]
   \   0000035E   0x1880             ADDS     R0,R0,R2
   \   00000360   0x4159             ADCS     R1,R1,R3
   \   00000362   0x9A07             LDR      R2,[SP, #+28]
   \   00000364   0x3208             ADDS     R2,R2,#+8
   \   00000366   0xCA30             LDM      R2!,{R4,R5}
   \   00000368   0x1824             ADDS     R4,R4,R0
   \   0000036A   0x414D             ADCS     R5,R5,R1
   \   0000036C   0x9806             LDR      R0,[SP, #+24]
   \   0000036E   0x3008             ADDS     R0,R0,#+8
   \   00000370   0xC80C             LDM      R0!,{R2,R3}
   \   00000372   0x1912             ADDS     R2,R2,R4
   \   00000374   0x416B             ADCS     R3,R3,R5
   \   00000376   0xAC0C             ADD      R4,SP,#+48
   \   00000378   0xA808             ADD      R0,SP,#+32
   \   0000037A   0xC803             LDM      R0,{R0,R1}
   \   0000037C   0x1880             ADDS     R0,R0,R2
   \   0000037E   0x4159             ADCS     R1,R1,R3
   \   00000380   0xC403             STM      R4!,{R0,R1}
   \   00000382   0x9202             STR      R2,[SP, #+8]
   \   00000384   0x9303             STR      R3,[SP, #+12]
   \   00000386   0xA804             ADD      R0,SP,#+16
   \   00000388   0xC80C             LDM      R0!,{R2,R3}
   \   0000038A   0x0F12             LSRS     R2,R2,#+28
   \   0000038C   0x0118             LSLS     R0,R3,#+4
   \   0000038E   0x4302             ORRS     R2,R2,R0
   \   00000390   0x0F1B             LSRS     R3,R3,#+28
   \   00000392   0xA804             ADD      R0,SP,#+16
   \   00000394   0xC803             LDM      R0,{R0,R1}
   \   00000396   0x0101             LSLS     R1,R0,#+4
   \   00000398   0x4319             ORRS     R1,R1,R3
   \   0000039A   0x9200             STR      R2,[SP, #+0]
   \   0000039C   0x9101             STR      R1,[SP, #+4]
   \   0000039E   0xA804             ADD      R0,SP,#+16
   \   000003A0   0xC80C             LDM      R0!,{R2,R3}
   \   000003A2   0x089A             LSRS     R2,R3,#+2
   \   000003A4   0xA804             ADD      R0,SP,#+16
   \   000003A6   0xC803             LDM      R0,{R0,R1}
   \   000003A8   0x0789             LSLS     R1,R1,#+30
   \   000003AA   0x0884             LSRS     R4,R0,#+2
   \   000003AC   0x4321             ORRS     R1,R1,R4
   \   000003AE   0x0780             LSLS     R0,R0,#+30
   \   000003B0   0x4310             ORRS     R0,R0,R2
   \   000003B2   0x9A00             LDR      R2,[SP, #+0]
   \   000003B4   0x9B01             LDR      R3,[SP, #+4]
   \   000003B6   0x4050             EORS     R0,R0,R2
   \   000003B8   0x4059             EORS     R1,R1,R3
   \   000003BA   0x9000             STR      R0,[SP, #+0]
   \   000003BC   0x9101             STR      R1,[SP, #+4]
   \   000003BE   0xA804             ADD      R0,SP,#+16
   \   000003C0   0xC80C             LDM      R0!,{R2,R3}
   \   000003C2   0x09DA             LSRS     R2,R3,#+7
   \   000003C4   0xA804             ADD      R0,SP,#+16
   \   000003C6   0xC803             LDM      R0,{R0,R1}
   \   000003C8   0x0649             LSLS     R1,R1,#+25
   \   000003CA   0x09C4             LSRS     R4,R0,#+7
   \   000003CC   0x4321             ORRS     R1,R1,R4
   \   000003CE   0x0640             LSLS     R0,R0,#+25
   \   000003D0   0x4310             ORRS     R0,R0,R2
   \   000003D2   0x9A00             LDR      R2,[SP, #+0]
   \   000003D4   0x9B01             LDR      R3,[SP, #+4]
   \   000003D6   0x4050             EORS     R0,R0,R2
   \   000003D8   0x4059             EORS     R1,R1,R3
   \   000003DA   0x9A02             LDR      R2,[SP, #+8]
   \   000003DC   0x9B03             LDR      R3,[SP, #+12]
   \   000003DE   0x1880             ADDS     R0,R0,R2
   \   000003E0   0x4159             ADCS     R1,R1,R3
   \   000003E2   0x9000             STR      R0,[SP, #+0]
   \   000003E4   0x9101             STR      R1,[SP, #+4]
   \   000003E6   0xA804             ADD      R0,SP,#+16
   \   000003E8   0xC80C             LDM      R0!,{R2,R3}
   \   000003EA   0x4032             ANDS     R2,R2,R6
   \   000003EC   0x403B             ANDS     R3,R3,R7
   \   000003EE   0xA80A             ADD      R0,SP,#+40
   \   000003F0   0xC830             LDM      R0!,{R4,R5}
   \   000003F2   0xA804             ADD      R0,SP,#+16
   \   000003F4   0xC803             LDM      R0,{R0,R1}
   \   000003F6   0x4330             ORRS     R0,R0,R6
   \   000003F8   0x4339             ORRS     R1,R1,R7
   \   000003FA   0x4020             ANDS     R0,R0,R4
   \   000003FC   0x4029             ANDS     R1,R1,R5
   \   000003FE   0x4310             ORRS     R0,R0,R2
   \   00000400   0x4319             ORRS     R1,R1,R3
   \   00000402   0x9A00             LDR      R2,[SP, #+0]
   \   00000404   0x9B01             LDR      R3,[SP, #+4]
   \   00000406   0x1880             ADDS     R0,R0,R2
   \   00000408   0x4159             ADCS     R1,R1,R3
   \   0000040A   0xAA08             ADD      R2,SP,#+32
   \   0000040C   0xC203             STM      R2!,{R0,R1}
    249                  P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
   \   0000040E   0xA80E             ADD      R0,SP,#+56
   \   00000410   0xC803             LDM      R0,{R0,R1}
   \   00000412   0x9002             STR      R0,[SP, #+8]
   \   00000414   0x9103             STR      R1,[SP, #+12]
   \   00000416   0xA80C             ADD      R0,SP,#+48
   \   00000418   0xC80C             LDM      R0!,{R2,R3}
   \   0000041A   0x0B92             LSRS     R2,R2,#+14
   \   0000041C   0x0498             LSLS     R0,R3,#+18
   \   0000041E   0x4302             ORRS     R2,R2,R0
   \   00000420   0x0B9B             LSRS     R3,R3,#+14
   \   00000422   0xA80C             ADD      R0,SP,#+48
   \   00000424   0xC803             LDM      R0,{R0,R1}
   \   00000426   0x0481             LSLS     R1,R0,#+18
   \   00000428   0x4319             ORRS     R1,R1,R3
   \   0000042A   0x9200             STR      R2,[SP, #+0]
   \   0000042C   0x9101             STR      R1,[SP, #+4]
   \   0000042E   0xA80C             ADD      R0,SP,#+48
   \   00000430   0xC80C             LDM      R0!,{R2,R3}
   \   00000432   0x0C92             LSRS     R2,R2,#+18
   \   00000434   0x0398             LSLS     R0,R3,#+14
   \   00000436   0x4302             ORRS     R2,R2,R0
   \   00000438   0x0C9B             LSRS     R3,R3,#+18
   \   0000043A   0xA80C             ADD      R0,SP,#+48
   \   0000043C   0xC803             LDM      R0,{R0,R1}
   \   0000043E   0x0381             LSLS     R1,R0,#+14
   \   00000440   0x0010             MOVS     R0,R2
   \   00000442   0x4319             ORRS     R1,R1,R3
   \   00000444   0x9A00             LDR      R2,[SP, #+0]
   \   00000446   0x9B01             LDR      R3,[SP, #+4]
   \   00000448   0x4050             EORS     R0,R0,R2
   \   0000044A   0x4059             EORS     R1,R1,R3
   \   0000044C   0x9000             STR      R0,[SP, #+0]
   \   0000044E   0x9101             STR      R1,[SP, #+4]
   \   00000450   0xA80C             ADD      R0,SP,#+48
   \   00000452   0xC80C             LDM      R0!,{R2,R3}
   \   00000454   0x0A5A             LSRS     R2,R3,#+9
   \   00000456   0xA80C             ADD      R0,SP,#+48
   \   00000458   0xC803             LDM      R0,{R0,R1}
   \   0000045A   0x05C9             LSLS     R1,R1,#+23
   \   0000045C   0x0A44             LSRS     R4,R0,#+9
   \   0000045E   0x4321             ORRS     R1,R1,R4
   \   00000460   0x05C0             LSLS     R0,R0,#+23
   \   00000462   0x4310             ORRS     R0,R0,R2
   \   00000464   0x9A00             LDR      R2,[SP, #+0]
   \   00000466   0x9B01             LDR      R3,[SP, #+4]
   \   00000468   0x4050             EORS     R0,R0,R2
   \   0000046A   0x4059             EORS     R1,R1,R3
   \   0000046C   0x9A02             LDR      R2,[SP, #+8]
   \   0000046E   0x9B03             LDR      R3,[SP, #+12]
   \   00000470   0x1880             ADDS     R0,R0,R2
   \   00000472   0x4159             ADCS     R1,R1,R3
   \   00000474   0x9002             STR      R0,[SP, #+8]
   \   00000476   0x9103             STR      R1,[SP, #+12]
   \   00000478   0xA810             ADD      R0,SP,#+64
   \   0000047A   0xC803             LDM      R0,{R0,R1}
   \   0000047C   0x9000             STR      R0,[SP, #+0]
   \   0000047E   0x9101             STR      R1,[SP, #+4]
   \   00000480   0xA80C             ADD      R0,SP,#+48
   \   00000482   0xC80C             LDM      R0!,{R2,R3}
   \   00000484   0xA814             ADD      R0,SP,#+80
   \   00000486   0xC830             LDM      R0!,{R4,R5}
   \   00000488   0xA810             ADD      R0,SP,#+64
   \   0000048A   0xC803             LDM      R0,{R0,R1}
   \   0000048C   0x4060             EORS     R0,R0,R4
   \   0000048E   0x4069             EORS     R1,R1,R5
   \   00000490   0x4010             ANDS     R0,R0,R2
   \   00000492   0x4019             ANDS     R1,R1,R3
   \   00000494   0x9A00             LDR      R2,[SP, #+0]
   \   00000496   0x9B01             LDR      R3,[SP, #+4]
   \   00000498   0x4050             EORS     R0,R0,R2
   \   0000049A   0x4059             EORS     R1,R1,R3
   \   0000049C   0x9A02             LDR      R2,[SP, #+8]
   \   0000049E   0x9B03             LDR      R3,[SP, #+12]
   \   000004A0   0x1880             ADDS     R0,R0,R2
   \   000004A2   0x4159             ADCS     R1,R1,R3
   \   000004A4   0x9A07             LDR      R2,[SP, #+28]
   \   000004A6   0x3210             ADDS     R2,R2,#+16
   \   000004A8   0xCA30             LDM      R2!,{R4,R5}
   \   000004AA   0x1824             ADDS     R4,R4,R0
   \   000004AC   0x414D             ADCS     R5,R5,R1
   \   000004AE   0x9806             LDR      R0,[SP, #+24]
   \   000004B0   0x3010             ADDS     R0,R0,#+16
   \   000004B2   0xC80C             LDM      R0!,{R2,R3}
   \   000004B4   0x1912             ADDS     R2,R2,R4
   \   000004B6   0x416B             ADCS     R3,R3,R5
   \   000004B8   0xAC0E             ADD      R4,SP,#+56
   \   000004BA   0xA80A             ADD      R0,SP,#+40
   \   000004BC   0xC803             LDM      R0,{R0,R1}
   \   000004BE   0x1880             ADDS     R0,R0,R2
   \   000004C0   0x4159             ADCS     R1,R1,R3
   \   000004C2   0xC403             STM      R4!,{R0,R1}
   \   000004C4   0x9202             STR      R2,[SP, #+8]
   \   000004C6   0x9303             STR      R3,[SP, #+12]
   \   000004C8   0xA808             ADD      R0,SP,#+32
   \   000004CA   0xC80C             LDM      R0!,{R2,R3}
   \   000004CC   0x0F12             LSRS     R2,R2,#+28
   \   000004CE   0x0118             LSLS     R0,R3,#+4
   \   000004D0   0x4302             ORRS     R2,R2,R0
   \   000004D2   0x0F1B             LSRS     R3,R3,#+28
   \   000004D4   0xA808             ADD      R0,SP,#+32
   \   000004D6   0xC803             LDM      R0,{R0,R1}
   \   000004D8   0x0101             LSLS     R1,R0,#+4
   \   000004DA   0x4319             ORRS     R1,R1,R3
   \   000004DC   0x9200             STR      R2,[SP, #+0]
   \   000004DE   0x9101             STR      R1,[SP, #+4]
   \   000004E0   0xA808             ADD      R0,SP,#+32
   \   000004E2   0xC80C             LDM      R0!,{R2,R3}
   \   000004E4   0x089A             LSRS     R2,R3,#+2
   \   000004E6   0xA808             ADD      R0,SP,#+32
   \   000004E8   0xC803             LDM      R0,{R0,R1}
   \   000004EA   0x0789             LSLS     R1,R1,#+30
   \   000004EC   0x0884             LSRS     R4,R0,#+2
   \   000004EE   0x4321             ORRS     R1,R1,R4
   \   000004F0   0x0780             LSLS     R0,R0,#+30
   \   000004F2   0x4310             ORRS     R0,R0,R2
   \   000004F4   0x9A00             LDR      R2,[SP, #+0]
   \   000004F6   0x9B01             LDR      R3,[SP, #+4]
   \   000004F8   0x4050             EORS     R0,R0,R2
   \   000004FA   0x4059             EORS     R1,R1,R3
   \   000004FC   0x9000             STR      R0,[SP, #+0]
   \   000004FE   0x9101             STR      R1,[SP, #+4]
   \   00000500   0xA808             ADD      R0,SP,#+32
   \   00000502   0xC80C             LDM      R0!,{R2,R3}
   \   00000504   0x09DA             LSRS     R2,R3,#+7
   \   00000506   0xA808             ADD      R0,SP,#+32
   \   00000508   0xC803             LDM      R0,{R0,R1}
   \   0000050A   0x0649             LSLS     R1,R1,#+25
   \   0000050C   0x09C4             LSRS     R4,R0,#+7
   \   0000050E   0x4321             ORRS     R1,R1,R4
   \   00000510   0x0640             LSLS     R0,R0,#+25
   \   00000512   0x4310             ORRS     R0,R0,R2
   \   00000514   0x9A00             LDR      R2,[SP, #+0]
   \   00000516   0x9B01             LDR      R3,[SP, #+4]
   \   00000518   0x4050             EORS     R0,R0,R2
   \   0000051A   0x4059             EORS     R1,R1,R3
   \   0000051C   0x9A02             LDR      R2,[SP, #+8]
   \   0000051E   0x9B03             LDR      R3,[SP, #+12]
   \   00000520   0x1880             ADDS     R0,R0,R2
   \   00000522   0x4159             ADCS     R1,R1,R3
   \   00000524   0x9000             STR      R0,[SP, #+0]
   \   00000526   0x9101             STR      R1,[SP, #+4]
   \   00000528   0xA808             ADD      R0,SP,#+32
   \   0000052A   0xC803             LDM      R0,{R0,R1}
   \   0000052C   0xAA04             ADD      R2,SP,#+16
   \   0000052E   0xCA0C             LDM      R2,{R2,R3}
   \   00000530   0x4002             ANDS     R2,R2,R0
   \   00000532   0x400B             ANDS     R3,R3,R1
   \   00000534   0xA808             ADD      R0,SP,#+32
   \   00000536   0xC830             LDM      R0!,{R4,R5}
   \   00000538   0xA804             ADD      R0,SP,#+16
   \   0000053A   0xC803             LDM      R0,{R0,R1}
   \   0000053C   0x4320             ORRS     R0,R0,R4
   \   0000053E   0x4329             ORRS     R1,R1,R5
   \   00000540   0x4030             ANDS     R0,R0,R6
   \   00000542   0x4039             ANDS     R1,R1,R7
   \   00000544   0x4310             ORRS     R0,R0,R2
   \   00000546   0x4319             ORRS     R1,R1,R3
   \   00000548   0x9A00             LDR      R2,[SP, #+0]
   \   0000054A   0x9B01             LDR      R3,[SP, #+4]
   \   0000054C   0x1880             ADDS     R0,R0,R2
   \   0000054E   0x4159             ADCS     R1,R1,R3
   \   00000550   0xAA0A             ADD      R2,SP,#+40
   \   00000552   0xC203             STM      R2!,{R0,R1}
    250                  P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
   \   00000554   0xA810             ADD      R0,SP,#+64
   \   00000556   0xC803             LDM      R0,{R0,R1}
   \   00000558   0x9002             STR      R0,[SP, #+8]
   \   0000055A   0x9103             STR      R1,[SP, #+12]
   \   0000055C   0xA80E             ADD      R0,SP,#+56
   \   0000055E   0xC80C             LDM      R0!,{R2,R3}
   \   00000560   0x0B92             LSRS     R2,R2,#+14
   \   00000562   0x0498             LSLS     R0,R3,#+18
   \   00000564   0x4302             ORRS     R2,R2,R0
   \   00000566   0x0B9B             LSRS     R3,R3,#+14
   \   00000568   0xA80E             ADD      R0,SP,#+56
   \   0000056A   0xC803             LDM      R0,{R0,R1}
   \   0000056C   0x0481             LSLS     R1,R0,#+18
   \   0000056E   0x4319             ORRS     R1,R1,R3
   \   00000570   0x9200             STR      R2,[SP, #+0]
   \   00000572   0x9101             STR      R1,[SP, #+4]
   \   00000574   0xA80E             ADD      R0,SP,#+56
   \   00000576   0xC80C             LDM      R0!,{R2,R3}
   \   00000578   0x0C92             LSRS     R2,R2,#+18
   \   0000057A   0x0398             LSLS     R0,R3,#+14
   \   0000057C   0x4302             ORRS     R2,R2,R0
   \   0000057E   0x0C9B             LSRS     R3,R3,#+18
   \   00000580   0xA80E             ADD      R0,SP,#+56
   \   00000582   0xC803             LDM      R0,{R0,R1}
   \   00000584   0x0381             LSLS     R1,R0,#+14
   \   00000586   0x0010             MOVS     R0,R2
   \   00000588   0x4319             ORRS     R1,R1,R3
   \   0000058A   0x9A00             LDR      R2,[SP, #+0]
   \   0000058C   0x9B01             LDR      R3,[SP, #+4]
   \   0000058E   0x4050             EORS     R0,R0,R2
   \   00000590   0x4059             EORS     R1,R1,R3
   \   00000592   0x9000             STR      R0,[SP, #+0]
   \   00000594   0x9101             STR      R1,[SP, #+4]
   \   00000596   0xA80E             ADD      R0,SP,#+56
   \   00000598   0xC80C             LDM      R0!,{R2,R3}
   \   0000059A   0x0A5A             LSRS     R2,R3,#+9
   \   0000059C   0xA80E             ADD      R0,SP,#+56
   \   0000059E   0xC803             LDM      R0,{R0,R1}
   \   000005A0   0x05C9             LSLS     R1,R1,#+23
   \   000005A2   0x0A44             LSRS     R4,R0,#+9
   \   000005A4   0x4321             ORRS     R1,R1,R4
   \   000005A6   0x05C0             LSLS     R0,R0,#+23
   \   000005A8   0x4310             ORRS     R0,R0,R2
   \   000005AA   0x9A00             LDR      R2,[SP, #+0]
   \   000005AC   0x9B01             LDR      R3,[SP, #+4]
   \   000005AE   0x4050             EORS     R0,R0,R2
   \   000005B0   0x4059             EORS     R1,R1,R3
   \   000005B2   0x9A02             LDR      R2,[SP, #+8]
   \   000005B4   0x9B03             LDR      R3,[SP, #+12]
   \   000005B6   0x1880             ADDS     R0,R0,R2
   \   000005B8   0x4159             ADCS     R1,R1,R3
   \   000005BA   0x9002             STR      R0,[SP, #+8]
   \   000005BC   0x9103             STR      R1,[SP, #+12]
   \   000005BE   0xA814             ADD      R0,SP,#+80
   \   000005C0   0xC803             LDM      R0,{R0,R1}
   \   000005C2   0x9000             STR      R0,[SP, #+0]
   \   000005C4   0x9101             STR      R1,[SP, #+4]
   \   000005C6   0xA80E             ADD      R0,SP,#+56
   \   000005C8   0xC80C             LDM      R0!,{R2,R3}
   \   000005CA   0xA80C             ADD      R0,SP,#+48
   \   000005CC   0xC830             LDM      R0!,{R4,R5}
   \   000005CE   0xA814             ADD      R0,SP,#+80
   \   000005D0   0xC803             LDM      R0,{R0,R1}
   \   000005D2   0x4060             EORS     R0,R0,R4
   \   000005D4   0x4069             EORS     R1,R1,R5
   \   000005D6   0x4010             ANDS     R0,R0,R2
   \   000005D8   0x4019             ANDS     R1,R1,R3
   \   000005DA   0x9A00             LDR      R2,[SP, #+0]
   \   000005DC   0x9B01             LDR      R3,[SP, #+4]
   \   000005DE   0x4050             EORS     R0,R0,R2
   \   000005E0   0x4059             EORS     R1,R1,R3
   \   000005E2   0x9A02             LDR      R2,[SP, #+8]
   \   000005E4   0x9B03             LDR      R3,[SP, #+12]
   \   000005E6   0x1880             ADDS     R0,R0,R2
   \   000005E8   0x4159             ADCS     R1,R1,R3
   \   000005EA   0x9A07             LDR      R2,[SP, #+28]
   \   000005EC   0x3218             ADDS     R2,R2,#+24
   \   000005EE   0xCA0C             LDM      R2,{R2,R3}
   \   000005F0   0x1812             ADDS     R2,R2,R0
   \   000005F2   0x414B             ADCS     R3,R3,R1
   \   000005F4   0x9806             LDR      R0,[SP, #+24]
   \   000005F6   0x3018             ADDS     R0,R0,#+24
   \   000005F8   0xC803             LDM      R0,{R0,R1}
   \   000005FA   0x1880             ADDS     R0,R0,R2
   \   000005FC   0x4159             ADCS     R1,R1,R3
   \   000005FE   0xAA10             ADD      R2,SP,#+64
   \   00000600   0x1836             ADDS     R6,R6,R0
   \   00000602   0x414F             ADCS     R7,R7,R1
   \   00000604   0xC2C0             STM      R2!,{R6,R7}
   \   00000606   0x9000             STR      R0,[SP, #+0]
   \   00000608   0x9101             STR      R1,[SP, #+4]
   \   0000060A   0xA80A             ADD      R0,SP,#+40
   \   0000060C   0xC803             LDM      R0,{R0,R1}
   \   0000060E   0x0F00             LSRS     R0,R0,#+28
   \   00000610   0x010A             LSLS     R2,R1,#+4
   \   00000612   0x4310             ORRS     R0,R0,R2
   \   00000614   0x0F09             LSRS     R1,R1,#+28
   \   00000616   0xAA0A             ADD      R2,SP,#+40
   \   00000618   0xCA0C             LDM      R2,{R2,R3}
   \   0000061A   0x0113             LSLS     R3,R2,#+4
   \   0000061C   0x0002             MOVS     R2,R0
   \   0000061E   0x430B             ORRS     R3,R3,R1
   \   00000620   0xA80A             ADD      R0,SP,#+40
   \   00000622   0xC830             LDM      R0!,{R4,R5}
   \   00000624   0x08AC             LSRS     R4,R5,#+2
   \   00000626   0xA80A             ADD      R0,SP,#+40
   \   00000628   0xC803             LDM      R0,{R0,R1}
   \   0000062A   0x0789             LSLS     R1,R1,#+30
   \   0000062C   0x0886             LSRS     R6,R0,#+2
   \   0000062E   0x4331             ORRS     R1,R1,R6
   \   00000630   0x0780             LSLS     R0,R0,#+30
   \   00000632   0x4320             ORRS     R0,R0,R4
   \   00000634   0x4050             EORS     R0,R0,R2
   \   00000636   0x4059             EORS     R1,R1,R3
   \   00000638   0x0002             MOVS     R2,R0
   \   0000063A   0x000B             MOVS     R3,R1
   \   0000063C   0xA80A             ADD      R0,SP,#+40
   \   0000063E   0x09EC             LSRS     R4,R5,#+7
   \   00000640   0xC803             LDM      R0,{R0,R1}
   \   00000642   0x0649             LSLS     R1,R1,#+25
   \   00000644   0x09C6             LSRS     R6,R0,#+7
   \   00000646   0x4331             ORRS     R1,R1,R6
   \   00000648   0x0640             LSLS     R0,R0,#+25
   \   0000064A   0x4320             ORRS     R0,R0,R4
   \   0000064C   0x4050             EORS     R0,R0,R2
   \   0000064E   0x4059             EORS     R1,R1,R3
   \   00000650   0x9A00             LDR      R2,[SP, #+0]
   \   00000652   0x9B01             LDR      R3,[SP, #+4]
   \   00000654   0x1880             ADDS     R0,R0,R2
   \   00000656   0x4159             ADCS     R1,R1,R3
   \   00000658   0x9000             STR      R0,[SP, #+0]
   \   0000065A   0x9101             STR      R1,[SP, #+4]
   \   0000065C   0xA80A             ADD      R0,SP,#+40
   \   0000065E   0xC803             LDM      R0,{R0,R1}
   \   00000660   0xAA08             ADD      R2,SP,#+32
   \   00000662   0xCA0C             LDM      R2,{R2,R3}
   \   00000664   0x4002             ANDS     R2,R2,R0
   \   00000666   0x400B             ANDS     R3,R3,R1
   \   00000668   0xA804             ADD      R0,SP,#+16
   \   0000066A   0xC830             LDM      R0!,{R4,R5}
   \   0000066C   0xA80A             ADD      R0,SP,#+40
   \   0000066E   0xC8C0             LDM      R0!,{R6,R7}
   \   00000670   0xA808             ADD      R0,SP,#+32
   \   00000672   0xC803             LDM      R0,{R0,R1}
   \   00000674   0x4330             ORRS     R0,R0,R6
   \   00000676   0x4339             ORRS     R1,R1,R7
   \   00000678   0x4020             ANDS     R0,R0,R4
   \   0000067A   0x4029             ANDS     R1,R1,R5
   \   0000067C   0x4310             ORRS     R0,R0,R2
   \   0000067E   0x4319             ORRS     R1,R1,R3
   \   00000680   0x9A00             LDR      R2,[SP, #+0]
   \   00000682   0x9B01             LDR      R3,[SP, #+4]
   \   00000684   0x1880             ADDS     R0,R0,R2
   \   00000686   0x4159             ADCS     R1,R1,R3
   \   00000688   0xAA12             ADD      R2,SP,#+72
   \   0000068A   0xC203             STM      R2!,{R0,R1}
    251                  P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
   \   0000068C   0xA814             ADD      R0,SP,#+80
   \   0000068E   0xC803             LDM      R0,{R0,R1}
   \   00000690   0x9000             STR      R0,[SP, #+0]
   \   00000692   0x9101             STR      R1,[SP, #+4]
   \   00000694   0xA810             ADD      R0,SP,#+64
   \   00000696   0xC803             LDM      R0,{R0,R1}
   \   00000698   0x0B80             LSRS     R0,R0,#+14
   \   0000069A   0x048A             LSLS     R2,R1,#+18
   \   0000069C   0x4310             ORRS     R0,R0,R2
   \   0000069E   0x0B89             LSRS     R1,R1,#+14
   \   000006A0   0xAA10             ADD      R2,SP,#+64
   \   000006A2   0xCA0C             LDM      R2,{R2,R3}
   \   000006A4   0x0493             LSLS     R3,R2,#+18
   \   000006A6   0x0002             MOVS     R2,R0
   \   000006A8   0x430B             ORRS     R3,R3,R1
   \   000006AA   0xA810             ADD      R0,SP,#+64
   \   000006AC   0xC830             LDM      R0!,{R4,R5}
   \   000006AE   0x0CA4             LSRS     R4,R4,#+18
   \   000006B0   0x03A8             LSLS     R0,R5,#+14
   \   000006B2   0x4304             ORRS     R4,R4,R0
   \   000006B4   0x0CAD             LSRS     R5,R5,#+18
   \   000006B6   0xA810             ADD      R0,SP,#+64
   \   000006B8   0xC803             LDM      R0,{R0,R1}
   \   000006BA   0x0381             LSLS     R1,R0,#+14
   \   000006BC   0x0020             MOVS     R0,R4
   \   000006BE   0x4329             ORRS     R1,R1,R5
   \   000006C0   0x4050             EORS     R0,R0,R2
   \   000006C2   0x4059             EORS     R1,R1,R3
   \   000006C4   0x0002             MOVS     R2,R0
   \   000006C6   0x000B             MOVS     R3,R1
   \   000006C8   0xA810             ADD      R0,SP,#+64
   \   000006CA   0xC830             LDM      R0!,{R4,R5}
   \   000006CC   0x0A6C             LSRS     R4,R5,#+9
   \   000006CE   0xA810             ADD      R0,SP,#+64
   \   000006D0   0xC803             LDM      R0,{R0,R1}
   \   000006D2   0x05C9             LSLS     R1,R1,#+23
   \   000006D4   0x0A46             LSRS     R6,R0,#+9
   \   000006D6   0x4331             ORRS     R1,R1,R6
   \   000006D8   0x05C0             LSLS     R0,R0,#+23
   \   000006DA   0x4320             ORRS     R0,R0,R4
   \   000006DC   0x4050             EORS     R0,R0,R2
   \   000006DE   0x4059             EORS     R1,R1,R3
   \   000006E0   0x9A00             LDR      R2,[SP, #+0]
   \   000006E2   0x9B01             LDR      R3,[SP, #+4]
   \   000006E4   0x1880             ADDS     R0,R0,R2
   \   000006E6   0x4159             ADCS     R1,R1,R3
   \   000006E8   0x9000             STR      R0,[SP, #+0]
   \   000006EA   0x9101             STR      R1,[SP, #+4]
   \   000006EC   0xA80C             ADD      R0,SP,#+48
   \   000006EE   0xC80C             LDM      R0!,{R2,R3}
   \   000006F0   0xA810             ADD      R0,SP,#+64
   \   000006F2   0xC830             LDM      R0!,{R4,R5}
   \   000006F4   0xA80E             ADD      R0,SP,#+56
   \   000006F6   0xC8C0             LDM      R0!,{R6,R7}
   \   000006F8   0xA80C             ADD      R0,SP,#+48
   \   000006FA   0xC803             LDM      R0,{R0,R1}
   \   000006FC   0x4070             EORS     R0,R0,R6
   \   000006FE   0x4079             EORS     R1,R1,R7
   \   00000700   0x4020             ANDS     R0,R0,R4
   \   00000702   0x4029             ANDS     R1,R1,R5
   \   00000704   0x4050             EORS     R0,R0,R2
   \   00000706   0x4059             EORS     R1,R1,R3
   \   00000708   0x9A00             LDR      R2,[SP, #+0]
   \   0000070A   0x9B01             LDR      R3,[SP, #+4]
   \   0000070C   0x1880             ADDS     R0,R0,R2
   \   0000070E   0x4159             ADCS     R1,R1,R3
   \   00000710   0x9A07             LDR      R2,[SP, #+28]
   \   00000712   0x3220             ADDS     R2,R2,#+32
   \   00000714   0xCA0C             LDM      R2,{R2,R3}
   \   00000716   0x1812             ADDS     R2,R2,R0
   \   00000718   0x414B             ADCS     R3,R3,R1
   \   0000071A   0x9806             LDR      R0,[SP, #+24]
   \   0000071C   0x3020             ADDS     R0,R0,#+32
   \   0000071E   0xC803             LDM      R0,{R0,R1}
   \   00000720   0x1880             ADDS     R0,R0,R2
   \   00000722   0x4159             ADCS     R1,R1,R3
   \   00000724   0xAA04             ADD      R2,SP,#+16
   \   00000726   0xCA0C             LDM      R2,{R2,R3}
   \   00000728   0x1812             ADDS     R2,R2,R0
   \   0000072A   0x414B             ADCS     R3,R3,R1
   \   0000072C   0x9002             STR      R0,[SP, #+8]
   \   0000072E   0x9103             STR      R1,[SP, #+12]
   \   00000730   0xA812             ADD      R0,SP,#+72
   \   00000732   0xC830             LDM      R0!,{R4,R5}
   \   00000734   0x0F24             LSRS     R4,R4,#+28
   \   00000736   0x0128             LSLS     R0,R5,#+4
   \   00000738   0x4304             ORRS     R4,R4,R0
   \   0000073A   0x0F2D             LSRS     R5,R5,#+28
   \   0000073C   0xA812             ADD      R0,SP,#+72
   \   0000073E   0xC803             LDM      R0,{R0,R1}
   \   00000740   0x0101             LSLS     R1,R0,#+4
   \   00000742   0x4329             ORRS     R1,R1,R5
   \   00000744   0x9400             STR      R4,[SP, #+0]
   \   00000746   0x9101             STR      R1,[SP, #+4]
   \   00000748   0xA812             ADD      R0,SP,#+72
   \   0000074A   0xC830             LDM      R0!,{R4,R5}
   \   0000074C   0x08AC             LSRS     R4,R5,#+2
   \   0000074E   0xA812             ADD      R0,SP,#+72
   \   00000750   0xC803             LDM      R0,{R0,R1}
   \   00000752   0x0789             LSLS     R1,R1,#+30
   \   00000754   0x0886             LSRS     R6,R0,#+2
   \   00000756   0x4331             ORRS     R1,R1,R6
   \   00000758   0x0780             LSLS     R0,R0,#+30
   \   0000075A   0x4320             ORRS     R0,R0,R4
   \   0000075C   0x9C00             LDR      R4,[SP, #+0]
   \   0000075E   0x9D01             LDR      R5,[SP, #+4]
   \   00000760   0x4060             EORS     R0,R0,R4
   \   00000762   0x4069             EORS     R1,R1,R5
   \   00000764   0x9000             STR      R0,[SP, #+0]
   \   00000766   0x9101             STR      R1,[SP, #+4]
   \   00000768   0xA812             ADD      R0,SP,#+72
   \   0000076A   0xC830             LDM      R0!,{R4,R5}
   \   0000076C   0x09EC             LSRS     R4,R5,#+7
   \   0000076E   0xA812             ADD      R0,SP,#+72
   \   00000770   0xC803             LDM      R0,{R0,R1}
   \   00000772   0x0649             LSLS     R1,R1,#+25
   \   00000774   0x09C6             LSRS     R6,R0,#+7
   \   00000776   0x4331             ORRS     R1,R1,R6
   \   00000778   0x0640             LSLS     R0,R0,#+25
   \   0000077A   0x4320             ORRS     R0,R0,R4
   \   0000077C   0x9C00             LDR      R4,[SP, #+0]
   \   0000077E   0x9D01             LDR      R5,[SP, #+4]
   \   00000780   0x4060             EORS     R0,R0,R4
   \   00000782   0x4069             EORS     R1,R1,R5
   \   00000784   0x9C02             LDR      R4,[SP, #+8]
   \   00000786   0x9D03             LDR      R5,[SP, #+12]
   \   00000788   0x1900             ADDS     R0,R0,R4
   \   0000078A   0x4169             ADCS     R1,R1,R5
   \   0000078C   0x9002             STR      R0,[SP, #+8]
   \   0000078E   0x9103             STR      R1,[SP, #+12]
   \   00000790   0xA812             ADD      R0,SP,#+72
   \   00000792   0xC830             LDM      R0!,{R4,R5}
   \   00000794   0xA80A             ADD      R0,SP,#+40
   \   00000796   0xC803             LDM      R0,{R0,R1}
   \   00000798   0x4020             ANDS     R0,R0,R4
   \   0000079A   0x4029             ANDS     R1,R1,R5
   \   0000079C   0x9000             STR      R0,[SP, #+0]
   \   0000079E   0x9101             STR      R1,[SP, #+4]
   \   000007A0   0xA808             ADD      R0,SP,#+32
   \   000007A2   0xC803             LDM      R0,{R0,R1}
   \   000007A4   0xAC12             ADD      R4,SP,#+72
   \   000007A6   0xCCC0             LDM      R4!,{R6,R7}
   \   000007A8   0xAC0A             ADD      R4,SP,#+40
   \   000007AA   0xCC30             LDM      R4,{R4,R5}
   \   000007AC   0x4334             ORRS     R4,R4,R6
   \   000007AE   0x433D             ORRS     R5,R5,R7
   \   000007B0   0x4004             ANDS     R4,R4,R0
   \   000007B2   0x400D             ANDS     R5,R5,R1
   \   000007B4   0x9800             LDR      R0,[SP, #+0]
   \   000007B6   0x9901             LDR      R1,[SP, #+4]
   \   000007B8   0x4304             ORRS     R4,R4,R0
   \   000007BA   0x430D             ORRS     R5,R5,R1
   \   000007BC   0x9802             LDR      R0,[SP, #+8]
   \   000007BE   0x9903             LDR      R1,[SP, #+12]
   \   000007C0   0x1824             ADDS     R4,R4,R0
   \   000007C2   0x414D             ADCS     R5,R5,R1
    252                  P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
   \   000007C4   0xA80C             ADD      R0,SP,#+48
   \   000007C6   0xC803             LDM      R0,{R0,R1}
   \   000007C8   0x9004             STR      R0,[SP, #+16]
   \   000007CA   0x9105             STR      R1,[SP, #+20]
   \   000007CC   0x0B90             LSRS     R0,R2,#+14
   \   000007CE   0x049E             LSLS     R6,R3,#+18
   \   000007D0   0x4330             ORRS     R0,R0,R6
   \   000007D2   0x0B99             LSRS     R1,R3,#+14
   \   000007D4   0x9000             STR      R0,[SP, #+0]
   \   000007D6   0x9101             STR      R1,[SP, #+4]
   \   000007D8   0x0491             LSLS     R1,R2,#+18
   \   000007DA   0x9E00             LDR      R6,[SP, #+0]
   \   000007DC   0x9F01             LDR      R7,[SP, #+4]
   \   000007DE   0x4339             ORRS     R1,R1,R7
   \   000007E0   0x9602             STR      R6,[SP, #+8]
   \   000007E2   0x9103             STR      R1,[SP, #+12]
   \   000007E4   0x0C90             LSRS     R0,R2,#+18
   \   000007E6   0x039E             LSLS     R6,R3,#+14
   \   000007E8   0x4330             ORRS     R0,R0,R6
   \   000007EA   0x0C99             LSRS     R1,R3,#+18
   \   000007EC   0x9000             STR      R0,[SP, #+0]
   \   000007EE   0x9101             STR      R1,[SP, #+4]
   \   000007F0   0x0391             LSLS     R1,R2,#+14
   \   000007F2   0x9800             LDR      R0,[SP, #+0]
   \   000007F4   0x9F01             LDR      R7,[SP, #+4]
   \   000007F6   0x4339             ORRS     R1,R1,R7
   \   000007F8   0x9E02             LDR      R6,[SP, #+8]
   \   000007FA   0x9F03             LDR      R7,[SP, #+12]
   \   000007FC   0x4070             EORS     R0,R0,R6
   \   000007FE   0x4079             EORS     R1,R1,R7
   \   00000800   0x9002             STR      R0,[SP, #+8]
   \   00000802   0x9103             STR      R1,[SP, #+12]
   \   00000804   0x0A58             LSRS     R0,R3,#+9
   \   00000806   0x2100             MOVS     R1,#+0
   \   00000808   0x9000             STR      R0,[SP, #+0]
   \   0000080A   0x9101             STR      R1,[SP, #+4]
   \   0000080C   0x05D9             LSLS     R1,R3,#+23
   \   0000080E   0x0A56             LSRS     R6,R2,#+9
   \   00000810   0x4331             ORRS     R1,R1,R6
   \   00000812   0x05D0             LSLS     R0,R2,#+23
   \   00000814   0x9E00             LDR      R6,[SP, #+0]
   \   00000816   0x4330             ORRS     R0,R0,R6
   \   00000818   0x9E02             LDR      R6,[SP, #+8]
   \   0000081A   0x9F03             LDR      R7,[SP, #+12]
   \   0000081C   0x4070             EORS     R0,R0,R6
   \   0000081E   0x4079             EORS     R1,R1,R7
   \   00000820   0x9E04             LDR      R6,[SP, #+16]
   \   00000822   0x9F05             LDR      R7,[SP, #+20]
   \   00000824   0x1980             ADDS     R0,R0,R6
   \   00000826   0x4179             ADCS     R1,R1,R7
   \   00000828   0x9002             STR      R0,[SP, #+8]
   \   0000082A   0x9103             STR      R1,[SP, #+12]
   \   0000082C   0xA80E             ADD      R0,SP,#+56
   \   0000082E   0xC803             LDM      R0,{R0,R1}
   \   00000830   0x9000             STR      R0,[SP, #+0]
   \   00000832   0x9101             STR      R1,[SP, #+4]
   \   00000834   0xA810             ADD      R0,SP,#+64
   \   00000836   0xC8C0             LDM      R0!,{R6,R7}
   \   00000838   0xA80E             ADD      R0,SP,#+56
   \   0000083A   0xC803             LDM      R0,{R0,R1}
   \   0000083C   0x4070             EORS     R0,R0,R6
   \   0000083E   0x4079             EORS     R1,R1,R7
   \   00000840   0x4010             ANDS     R0,R0,R2
   \   00000842   0x4019             ANDS     R1,R1,R3
   \   00000844   0x9E00             LDR      R6,[SP, #+0]
   \   00000846   0x9F01             LDR      R7,[SP, #+4]
   \   00000848   0x4070             EORS     R0,R0,R6
   \   0000084A   0x4079             EORS     R1,R1,R7
   \   0000084C   0x9E02             LDR      R6,[SP, #+8]
   \   0000084E   0x9F03             LDR      R7,[SP, #+12]
   \   00000850   0x1980             ADDS     R0,R0,R6
   \   00000852   0x4179             ADCS     R1,R1,R7
   \   00000854   0x9E07             LDR      R6,[SP, #+28]
   \   00000856   0x3628             ADDS     R6,R6,#+40
   \   00000858   0xCEC0             LDM      R6,{R6,R7}
   \   0000085A   0x1836             ADDS     R6,R6,R0
   \   0000085C   0x414F             ADCS     R7,R7,R1
   \   0000085E   0x9806             LDR      R0,[SP, #+24]
   \   00000860   0x3028             ADDS     R0,R0,#+40
   \   00000862   0xC803             LDM      R0,{R0,R1}
   \   00000864   0x1980             ADDS     R0,R0,R6
   \   00000866   0x4179             ADCS     R1,R1,R7
   \   00000868   0xAE14             ADD      R6,SP,#+80
   \   0000086A   0xC603             STM      R6!,{R0,R1}
   \   0000086C   0xAE0C             ADD      R6,SP,#+48
   \   0000086E   0x46B4             MOV      R12,R6
   \   00000870   0xA808             ADD      R0,SP,#+32
   \   00000872   0xC8C0             LDM      R0!,{R6,R7}
   \   00000874   0xA814             ADD      R0,SP,#+80
   \   00000876   0xC803             LDM      R0,{R0,R1}
   \   00000878   0x1980             ADDS     R0,R0,R6
   \   0000087A   0x4179             ADCS     R1,R1,R7
   \   0000087C   0x4666             MOV      R6,R12
   \   0000087E   0xC603             STM      R6!,{R0,R1}
   \   00000880   0xA814             ADD      R0,SP,#+80
   \   00000882   0xC803             LDM      R0,{R0,R1}
   \   00000884   0x9004             STR      R0,[SP, #+16]
   \   00000886   0x9105             STR      R1,[SP, #+20]
   \   00000888   0x0F20             LSRS     R0,R4,#+28
   \   0000088A   0x012E             LSLS     R6,R5,#+4
   \   0000088C   0x4330             ORRS     R0,R0,R6
   \   0000088E   0x0F29             LSRS     R1,R5,#+28
   \   00000890   0x9000             STR      R0,[SP, #+0]
   \   00000892   0x9101             STR      R1,[SP, #+4]
   \   00000894   0x0121             LSLS     R1,R4,#+4
   \   00000896   0x9E00             LDR      R6,[SP, #+0]
   \   00000898   0x9F01             LDR      R7,[SP, #+4]
   \   0000089A   0x4339             ORRS     R1,R1,R7
   \   0000089C   0x9602             STR      R6,[SP, #+8]
   \   0000089E   0x9103             STR      R1,[SP, #+12]
   \   000008A0   0x08A8             LSRS     R0,R5,#+2
   \   000008A2   0x2100             MOVS     R1,#+0
   \   000008A4   0x9000             STR      R0,[SP, #+0]
   \   000008A6   0x9101             STR      R1,[SP, #+4]
   \   000008A8   0x07A9             LSLS     R1,R5,#+30
   \   000008AA   0x08A6             LSRS     R6,R4,#+2
   \   000008AC   0x4331             ORRS     R1,R1,R6
   \   000008AE   0x07A0             LSLS     R0,R4,#+30
   \   000008B0   0x9E00             LDR      R6,[SP, #+0]
   \   000008B2   0x4330             ORRS     R0,R0,R6
   \   000008B4   0x9E02             LDR      R6,[SP, #+8]
   \   000008B6   0x9F03             LDR      R7,[SP, #+12]
   \   000008B8   0x4070             EORS     R0,R0,R6
   \   000008BA   0x4079             EORS     R1,R1,R7
   \   000008BC   0x9002             STR      R0,[SP, #+8]
   \   000008BE   0x9103             STR      R1,[SP, #+12]
   \   000008C0   0x09E8             LSRS     R0,R5,#+7
   \   000008C2   0x2100             MOVS     R1,#+0
   \   000008C4   0x9000             STR      R0,[SP, #+0]
   \   000008C6   0x9101             STR      R1,[SP, #+4]
   \   000008C8   0x0669             LSLS     R1,R5,#+25
   \   000008CA   0x09E6             LSRS     R6,R4,#+7
   \   000008CC   0x4331             ORRS     R1,R1,R6
   \   000008CE   0x0660             LSLS     R0,R4,#+25
   \   000008D0   0x9E00             LDR      R6,[SP, #+0]
   \   000008D2   0x4330             ORRS     R0,R0,R6
   \   000008D4   0x9E02             LDR      R6,[SP, #+8]
   \   000008D6   0x9F03             LDR      R7,[SP, #+12]
   \   000008D8   0x4070             EORS     R0,R0,R6
   \   000008DA   0x4079             EORS     R1,R1,R7
   \   000008DC   0x9E04             LDR      R6,[SP, #+16]
   \   000008DE   0x9F05             LDR      R7,[SP, #+20]
   \   000008E0   0x1980             ADDS     R0,R0,R6
   \   000008E2   0x4179             ADCS     R1,R1,R7
   \   000008E4   0x9002             STR      R0,[SP, #+8]
   \   000008E6   0x9103             STR      R1,[SP, #+12]
   \   000008E8   0xA812             ADD      R0,SP,#+72
   \   000008EA   0xC803             LDM      R0,{R0,R1}
   \   000008EC   0x4020             ANDS     R0,R0,R4
   \   000008EE   0x4029             ANDS     R1,R1,R5
   \   000008F0   0x9000             STR      R0,[SP, #+0]
   \   000008F2   0x9101             STR      R1,[SP, #+4]
   \   000008F4   0xA80A             ADD      R0,SP,#+40
   \   000008F6   0xC8C0             LDM      R0!,{R6,R7}
   \   000008F8   0xA812             ADD      R0,SP,#+72
   \   000008FA   0xC803             LDM      R0,{R0,R1}
   \   000008FC   0x4320             ORRS     R0,R0,R4
   \   000008FE   0x4329             ORRS     R1,R1,R5
   \   00000900   0x4030             ANDS     R0,R0,R6
   \   00000902   0x4039             ANDS     R1,R1,R7
   \   00000904   0x9E00             LDR      R6,[SP, #+0]
   \   00000906   0x9F01             LDR      R7,[SP, #+4]
   \   00000908   0x4330             ORRS     R0,R0,R6
   \   0000090A   0x4339             ORRS     R1,R1,R7
   \   0000090C   0x9E02             LDR      R6,[SP, #+8]
   \   0000090E   0x9F03             LDR      R7,[SP, #+12]
   \   00000910   0x1980             ADDS     R0,R0,R6
   \   00000912   0x4179             ADCS     R1,R1,R7
   \   00000914   0xAE08             ADD      R6,SP,#+32
   \   00000916   0xC603             STM      R6!,{R0,R1}
    253                  P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
   \   00000918   0xA80E             ADD      R0,SP,#+56
   \   0000091A   0xC803             LDM      R0,{R0,R1}
   \   0000091C   0x9004             STR      R0,[SP, #+16]
   \   0000091E   0x9105             STR      R1,[SP, #+20]
   \   00000920   0xA80C             ADD      R0,SP,#+48
   \   00000922   0xC803             LDM      R0,{R0,R1}
   \   00000924   0x0B80             LSRS     R0,R0,#+14
   \   00000926   0x048E             LSLS     R6,R1,#+18
   \   00000928   0x4330             ORRS     R0,R0,R6
   \   0000092A   0x0B89             LSRS     R1,R1,#+14
   \   0000092C   0x9000             STR      R0,[SP, #+0]
   \   0000092E   0x9101             STR      R1,[SP, #+4]
   \   00000930   0xA80C             ADD      R0,SP,#+48
   \   00000932   0xC803             LDM      R0,{R0,R1}
   \   00000934   0x0481             LSLS     R1,R0,#+18
   \   00000936   0x9E00             LDR      R6,[SP, #+0]
   \   00000938   0x9F01             LDR      R7,[SP, #+4]
   \   0000093A   0x4339             ORRS     R1,R1,R7
   \   0000093C   0x9602             STR      R6,[SP, #+8]
   \   0000093E   0x9103             STR      R1,[SP, #+12]
   \   00000940   0xA80C             ADD      R0,SP,#+48
   \   00000942   0xC803             LDM      R0,{R0,R1}
   \   00000944   0x0C80             LSRS     R0,R0,#+18
   \   00000946   0x038E             LSLS     R6,R1,#+14
   \   00000948   0x4330             ORRS     R0,R0,R6
   \   0000094A   0x0C89             LSRS     R1,R1,#+18
   \   0000094C   0x9000             STR      R0,[SP, #+0]
   \   0000094E   0x9101             STR      R1,[SP, #+4]
   \   00000950   0xA80C             ADD      R0,SP,#+48
   \   00000952   0xC803             LDM      R0,{R0,R1}
   \   00000954   0x0381             LSLS     R1,R0,#+14
   \   00000956   0x9800             LDR      R0,[SP, #+0]
   \   00000958   0x9F01             LDR      R7,[SP, #+4]
   \   0000095A   0x4339             ORRS     R1,R1,R7
   \   0000095C   0x9E02             LDR      R6,[SP, #+8]
   \   0000095E   0x9F03             LDR      R7,[SP, #+12]
   \   00000960   0x4070             EORS     R0,R0,R6
   \   00000962   0x4079             EORS     R1,R1,R7
   \   00000964   0x9002             STR      R0,[SP, #+8]
   \   00000966   0x9103             STR      R1,[SP, #+12]
   \   00000968   0xA80C             ADD      R0,SP,#+48
   \   0000096A   0xC803             LDM      R0,{R0,R1}
   \   0000096C   0x0A48             LSRS     R0,R1,#+9
   \   0000096E   0x2100             MOVS     R1,#+0
   \   00000970   0x9000             STR      R0,[SP, #+0]
   \   00000972   0x9101             STR      R1,[SP, #+4]
   \   00000974   0xA80C             ADD      R0,SP,#+48
   \   00000976   0xC803             LDM      R0,{R0,R1}
   \   00000978   0x05C9             LSLS     R1,R1,#+23
   \   0000097A   0x0A46             LSRS     R6,R0,#+9
   \   0000097C   0x4331             ORRS     R1,R1,R6
   \   0000097E   0x05C0             LSLS     R0,R0,#+23
   \   00000980   0x9E00             LDR      R6,[SP, #+0]
   \   00000982   0x4330             ORRS     R0,R0,R6
   \   00000984   0x9E02             LDR      R6,[SP, #+8]
   \   00000986   0x9F03             LDR      R7,[SP, #+12]
   \   00000988   0x4070             EORS     R0,R0,R6
   \   0000098A   0x4079             EORS     R1,R1,R7
   \   0000098C   0x9E04             LDR      R6,[SP, #+16]
   \   0000098E   0x9F05             LDR      R7,[SP, #+20]
   \   00000990   0x1980             ADDS     R0,R0,R6
   \   00000992   0x4179             ADCS     R1,R1,R7
   \   00000994   0x9002             STR      R0,[SP, #+8]
   \   00000996   0x9103             STR      R1,[SP, #+12]
   \   00000998   0xA810             ADD      R0,SP,#+64
   \   0000099A   0xC803             LDM      R0,{R0,R1}
   \   0000099C   0x9000             STR      R0,[SP, #+0]
   \   0000099E   0x9101             STR      R1,[SP, #+4]
   \   000009A0   0xA80C             ADD      R0,SP,#+48
   \   000009A2   0xC8C0             LDM      R0!,{R6,R7}
   \   000009A4   0xA810             ADD      R0,SP,#+64
   \   000009A6   0xC803             LDM      R0,{R0,R1}
   \   000009A8   0x4050             EORS     R0,R0,R2
   \   000009AA   0x4059             EORS     R1,R1,R3
   \   000009AC   0x4030             ANDS     R0,R0,R6
   \   000009AE   0x4039             ANDS     R1,R1,R7
   \   000009B0   0x9E00             LDR      R6,[SP, #+0]
   \   000009B2   0x9F01             LDR      R7,[SP, #+4]
   \   000009B4   0x4070             EORS     R0,R0,R6
   \   000009B6   0x4079             EORS     R1,R1,R7
   \   000009B8   0x9E02             LDR      R6,[SP, #+8]
   \   000009BA   0x9F03             LDR      R7,[SP, #+12]
   \   000009BC   0x1980             ADDS     R0,R0,R6
   \   000009BE   0x4179             ADCS     R1,R1,R7
   \   000009C0   0x9E07             LDR      R6,[SP, #+28]
   \   000009C2   0x3630             ADDS     R6,R6,#+48
   \   000009C4   0xCEC0             LDM      R6,{R6,R7}
   \   000009C6   0x1836             ADDS     R6,R6,R0
   \   000009C8   0x414F             ADCS     R7,R7,R1
   \   000009CA   0x9806             LDR      R0,[SP, #+24]
   \   000009CC   0x3030             ADDS     R0,R0,#+48
   \   000009CE   0xC803             LDM      R0,{R0,R1}
   \   000009D0   0x1980             ADDS     R0,R0,R6
   \   000009D2   0x4179             ADCS     R1,R1,R7
   \   000009D4   0xAE14             ADD      R6,SP,#+80
   \   000009D6   0xC603             STM      R6!,{R0,R1}
   \   000009D8   0xAE0E             ADD      R6,SP,#+56
   \   000009DA   0x46B4             MOV      R12,R6
   \   000009DC   0xA80A             ADD      R0,SP,#+40
   \   000009DE   0xC8C0             LDM      R0!,{R6,R7}
   \   000009E0   0xA814             ADD      R0,SP,#+80
   \   000009E2   0xC803             LDM      R0,{R0,R1}
   \   000009E4   0x1980             ADDS     R0,R0,R6
   \   000009E6   0x4179             ADCS     R1,R1,R7
   \   000009E8   0x4666             MOV      R6,R12
   \   000009EA   0xC603             STM      R6!,{R0,R1}
   \   000009EC   0xA814             ADD      R0,SP,#+80
   \   000009EE   0xC803             LDM      R0,{R0,R1}
   \   000009F0   0x9004             STR      R0,[SP, #+16]
   \   000009F2   0x9105             STR      R1,[SP, #+20]
   \   000009F4   0xA808             ADD      R0,SP,#+32
   \   000009F6   0xC803             LDM      R0,{R0,R1}
   \   000009F8   0x0F00             LSRS     R0,R0,#+28
   \   000009FA   0x010E             LSLS     R6,R1,#+4
   \   000009FC   0x4330             ORRS     R0,R0,R6
   \   000009FE   0x0F09             LSRS     R1,R1,#+28
   \   00000A00   0x9000             STR      R0,[SP, #+0]
   \   00000A02   0x9101             STR      R1,[SP, #+4]
   \   00000A04   0xA808             ADD      R0,SP,#+32
   \   00000A06   0xC803             LDM      R0,{R0,R1}
   \   00000A08   0x0101             LSLS     R1,R0,#+4
   \   00000A0A   0x9E00             LDR      R6,[SP, #+0]
   \   00000A0C   0x9F01             LDR      R7,[SP, #+4]
   \   00000A0E   0x4339             ORRS     R1,R1,R7
   \   00000A10   0x9602             STR      R6,[SP, #+8]
   \   00000A12   0x9103             STR      R1,[SP, #+12]
   \   00000A14   0xA808             ADD      R0,SP,#+32
   \   00000A16   0xC803             LDM      R0,{R0,R1}
   \   00000A18   0x0888             LSRS     R0,R1,#+2
   \   00000A1A   0x2100             MOVS     R1,#+0
   \   00000A1C   0x9000             STR      R0,[SP, #+0]
   \   00000A1E   0x9101             STR      R1,[SP, #+4]
   \   00000A20   0xA808             ADD      R0,SP,#+32
   \   00000A22   0xC803             LDM      R0,{R0,R1}
   \   00000A24   0x0789             LSLS     R1,R1,#+30
   \   00000A26   0x0886             LSRS     R6,R0,#+2
   \   00000A28   0x4331             ORRS     R1,R1,R6
   \   00000A2A   0x0780             LSLS     R0,R0,#+30
   \   00000A2C   0x9E00             LDR      R6,[SP, #+0]
   \   00000A2E   0x4330             ORRS     R0,R0,R6
   \   00000A30   0x9E02             LDR      R6,[SP, #+8]
   \   00000A32   0x9F03             LDR      R7,[SP, #+12]
   \   00000A34   0x4070             EORS     R0,R0,R6
   \   00000A36   0x4079             EORS     R1,R1,R7
   \   00000A38   0x9002             STR      R0,[SP, #+8]
   \   00000A3A   0x9103             STR      R1,[SP, #+12]
   \   00000A3C   0xA808             ADD      R0,SP,#+32
   \   00000A3E   0xC803             LDM      R0,{R0,R1}
   \   00000A40   0x09C8             LSRS     R0,R1,#+7
   \   00000A42   0x2100             MOVS     R1,#+0
   \   00000A44   0x9000             STR      R0,[SP, #+0]
   \   00000A46   0x9101             STR      R1,[SP, #+4]
   \   00000A48   0xA808             ADD      R0,SP,#+32
   \   00000A4A   0xC803             LDM      R0,{R0,R1}
   \   00000A4C   0x0649             LSLS     R1,R1,#+25
   \   00000A4E   0x09C6             LSRS     R6,R0,#+7
   \   00000A50   0x4331             ORRS     R1,R1,R6
   \   00000A52   0x0640             LSLS     R0,R0,#+25
   \   00000A54   0x9E00             LDR      R6,[SP, #+0]
   \   00000A56   0x4330             ORRS     R0,R0,R6
   \   00000A58   0x9E02             LDR      R6,[SP, #+8]
   \   00000A5A   0x9F03             LDR      R7,[SP, #+12]
   \   00000A5C   0x4070             EORS     R0,R0,R6
   \   00000A5E   0x4079             EORS     R1,R1,R7
   \   00000A60   0x9E04             LDR      R6,[SP, #+16]
   \   00000A62   0x9F05             LDR      R7,[SP, #+20]
   \   00000A64   0x1980             ADDS     R0,R0,R6
   \   00000A66   0x4179             ADCS     R1,R1,R7
   \   00000A68   0x9002             STR      R0,[SP, #+8]
   \   00000A6A   0x9103             STR      R1,[SP, #+12]
   \   00000A6C   0xA808             ADD      R0,SP,#+32
   \   00000A6E   0xC803             LDM      R0,{R0,R1}
   \   00000A70   0x4020             ANDS     R0,R0,R4
   \   00000A72   0x4029             ANDS     R1,R1,R5
   \   00000A74   0x9000             STR      R0,[SP, #+0]
   \   00000A76   0x9101             STR      R1,[SP, #+4]
   \   00000A78   0xA812             ADD      R0,SP,#+72
   \   00000A7A   0xC8C0             LDM      R0!,{R6,R7}
   \   00000A7C   0xA808             ADD      R0,SP,#+32
   \   00000A7E   0xC803             LDM      R0,{R0,R1}
   \   00000A80   0x4320             ORRS     R0,R0,R4
   \   00000A82   0x4329             ORRS     R1,R1,R5
   \   00000A84   0x4030             ANDS     R0,R0,R6
   \   00000A86   0x4039             ANDS     R1,R1,R7
   \   00000A88   0x9E00             LDR      R6,[SP, #+0]
   \   00000A8A   0x9F01             LDR      R7,[SP, #+4]
   \   00000A8C   0x4330             ORRS     R0,R0,R6
   \   00000A8E   0x4339             ORRS     R1,R1,R7
   \   00000A90   0x9E02             LDR      R6,[SP, #+8]
   \   00000A92   0x9F03             LDR      R7,[SP, #+12]
   \   00000A94   0x1980             ADDS     R0,R0,R6
   \   00000A96   0x4179             ADCS     R1,R1,R7
   \   00000A98   0xAE0A             ADD      R6,SP,#+40
   \   00000A9A   0xC603             STM      R6!,{R0,R1}
    254                  P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
   \   00000A9C   0xA810             ADD      R0,SP,#+64
   \   00000A9E   0xC803             LDM      R0,{R0,R1}
   \   00000AA0   0x9004             STR      R0,[SP, #+16]
   \   00000AA2   0x9105             STR      R1,[SP, #+20]
   \   00000AA4   0xA80E             ADD      R0,SP,#+56
   \   00000AA6   0xC803             LDM      R0,{R0,R1}
   \   00000AA8   0x0B80             LSRS     R0,R0,#+14
   \   00000AAA   0x048E             LSLS     R6,R1,#+18
   \   00000AAC   0x4330             ORRS     R0,R0,R6
   \   00000AAE   0x0B89             LSRS     R1,R1,#+14
   \   00000AB0   0x9000             STR      R0,[SP, #+0]
   \   00000AB2   0x9101             STR      R1,[SP, #+4]
   \   00000AB4   0xA80E             ADD      R0,SP,#+56
   \   00000AB6   0xC803             LDM      R0,{R0,R1}
   \   00000AB8   0x0481             LSLS     R1,R0,#+18
   \   00000ABA   0x9E00             LDR      R6,[SP, #+0]
   \   00000ABC   0x9F01             LDR      R7,[SP, #+4]
   \   00000ABE   0x4339             ORRS     R1,R1,R7
   \   00000AC0   0x9602             STR      R6,[SP, #+8]
   \   00000AC2   0x9103             STR      R1,[SP, #+12]
   \   00000AC4   0xA80E             ADD      R0,SP,#+56
   \   00000AC6   0xC803             LDM      R0,{R0,R1}
   \   00000AC8   0x0C80             LSRS     R0,R0,#+18
   \   00000ACA   0x038E             LSLS     R6,R1,#+14
   \   00000ACC   0x4330             ORRS     R0,R0,R6
   \   00000ACE   0x0C89             LSRS     R1,R1,#+18
   \   00000AD0   0x9000             STR      R0,[SP, #+0]
   \   00000AD2   0x9101             STR      R1,[SP, #+4]
   \   00000AD4   0xA80E             ADD      R0,SP,#+56
   \   00000AD6   0xC803             LDM      R0,{R0,R1}
   \   00000AD8   0x0381             LSLS     R1,R0,#+14
   \   00000ADA   0x9800             LDR      R0,[SP, #+0]
   \   00000ADC   0x9F01             LDR      R7,[SP, #+4]
   \   00000ADE   0x4339             ORRS     R1,R1,R7
   \   00000AE0   0x9E02             LDR      R6,[SP, #+8]
   \   00000AE2   0x9F03             LDR      R7,[SP, #+12]
   \   00000AE4   0x4070             EORS     R0,R0,R6
   \   00000AE6   0x4079             EORS     R1,R1,R7
   \   00000AE8   0x9002             STR      R0,[SP, #+8]
   \   00000AEA   0x9103             STR      R1,[SP, #+12]
   \   00000AEC   0xA80E             ADD      R0,SP,#+56
   \   00000AEE   0xC803             LDM      R0,{R0,R1}
   \   00000AF0   0x0A48             LSRS     R0,R1,#+9
   \   00000AF2   0x2100             MOVS     R1,#+0
   \   00000AF4   0x9000             STR      R0,[SP, #+0]
   \   00000AF6   0x9101             STR      R1,[SP, #+4]
   \   00000AF8   0xA80E             ADD      R0,SP,#+56
   \   00000AFA   0xC803             LDM      R0,{R0,R1}
   \   00000AFC   0x05C9             LSLS     R1,R1,#+23
   \   00000AFE   0x0A46             LSRS     R6,R0,#+9
   \   00000B00   0x4331             ORRS     R1,R1,R6
   \   00000B02   0x05C0             LSLS     R0,R0,#+23
   \   00000B04   0x9E00             LDR      R6,[SP, #+0]
   \   00000B06   0x4330             ORRS     R0,R0,R6
   \   00000B08   0x9E02             LDR      R6,[SP, #+8]
   \   00000B0A   0x9F03             LDR      R7,[SP, #+12]
   \   00000B0C   0x4070             EORS     R0,R0,R6
   \   00000B0E   0x4079             EORS     R1,R1,R7
   \   00000B10   0x9E04             LDR      R6,[SP, #+16]
   \   00000B12   0x9F05             LDR      R7,[SP, #+20]
   \   00000B14   0x1980             ADDS     R0,R0,R6
   \   00000B16   0x4179             ADCS     R1,R1,R7
   \   00000B18   0x9000             STR      R0,[SP, #+0]
   \   00000B1A   0x9101             STR      R1,[SP, #+4]
   \   00000B1C   0xA80E             ADD      R0,SP,#+56
   \   00000B1E   0xC8C0             LDM      R0!,{R6,R7}
   \   00000B20   0xA80C             ADD      R0,SP,#+48
   \   00000B22   0xC803             LDM      R0,{R0,R1}
   \   00000B24   0x4050             EORS     R0,R0,R2
   \   00000B26   0x4059             EORS     R1,R1,R3
   \   00000B28   0x4030             ANDS     R0,R0,R6
   \   00000B2A   0x4039             ANDS     R1,R1,R7
   \   00000B2C   0x4050             EORS     R0,R0,R2
   \   00000B2E   0x4059             EORS     R1,R1,R3
   \   00000B30   0x9E00             LDR      R6,[SP, #+0]
   \   00000B32   0x9F01             LDR      R7,[SP, #+4]
   \   00000B34   0x1980             ADDS     R0,R0,R6
   \   00000B36   0x4179             ADCS     R1,R1,R7
   \   00000B38   0x9E07             LDR      R6,[SP, #+28]
   \   00000B3A   0x3638             ADDS     R6,R6,#+56
   \   00000B3C   0xCEC0             LDM      R6,{R6,R7}
   \   00000B3E   0x1836             ADDS     R6,R6,R0
   \   00000B40   0x414F             ADCS     R7,R7,R1
   \   00000B42   0x9806             LDR      R0,[SP, #+24]
   \   00000B44   0x3038             ADDS     R0,R0,#+56
   \   00000B46   0xC803             LDM      R0,{R0,R1}
   \   00000B48   0x1980             ADDS     R0,R0,R6
   \   00000B4A   0x4179             ADCS     R1,R1,R7
   \   00000B4C   0xAE14             ADD      R6,SP,#+80
   \   00000B4E   0xC603             STM      R6!,{R0,R1}
   \   00000B50   0xAE10             ADD      R6,SP,#+64
   \   00000B52   0x46B4             MOV      R12,R6
   \   00000B54   0xA812             ADD      R0,SP,#+72
   \   00000B56   0xC8C0             LDM      R0!,{R6,R7}
   \   00000B58   0xC803             LDM      R0,{R0,R1}
   \   00000B5A   0x1980             ADDS     R0,R0,R6
   \   00000B5C   0x4179             ADCS     R1,R1,R7
   \   00000B5E   0x4666             MOV      R6,R12
   \   00000B60   0xC603             STM      R6!,{R0,R1}
   \   00000B62   0xA814             ADD      R0,SP,#+80
   \   00000B64   0xC803             LDM      R0,{R0,R1}
   \   00000B66   0x9004             STR      R0,[SP, #+16]
   \   00000B68   0x9105             STR      R1,[SP, #+20]
   \   00000B6A   0xA80A             ADD      R0,SP,#+40
   \   00000B6C   0xC803             LDM      R0,{R0,R1}
   \   00000B6E   0x0F00             LSRS     R0,R0,#+28
   \   00000B70   0x010E             LSLS     R6,R1,#+4
   \   00000B72   0x4330             ORRS     R0,R0,R6
   \   00000B74   0x0F09             LSRS     R1,R1,#+28
   \   00000B76   0x9000             STR      R0,[SP, #+0]
   \   00000B78   0x9101             STR      R1,[SP, #+4]
   \   00000B7A   0xA80A             ADD      R0,SP,#+40
   \   00000B7C   0xC803             LDM      R0,{R0,R1}
   \   00000B7E   0x0101             LSLS     R1,R0,#+4
   \   00000B80   0x9E00             LDR      R6,[SP, #+0]
   \   00000B82   0x9F01             LDR      R7,[SP, #+4]
   \   00000B84   0x4339             ORRS     R1,R1,R7
   \   00000B86   0x9602             STR      R6,[SP, #+8]
   \   00000B88   0x9103             STR      R1,[SP, #+12]
   \   00000B8A   0xA80A             ADD      R0,SP,#+40
   \   00000B8C   0xC803             LDM      R0,{R0,R1}
   \   00000B8E   0x0888             LSRS     R0,R1,#+2
   \   00000B90   0x2100             MOVS     R1,#+0
   \   00000B92   0x9000             STR      R0,[SP, #+0]
   \   00000B94   0x9101             STR      R1,[SP, #+4]
   \   00000B96   0xA80A             ADD      R0,SP,#+40
   \   00000B98   0xC803             LDM      R0,{R0,R1}
   \   00000B9A   0x0789             LSLS     R1,R1,#+30
   \   00000B9C   0x0886             LSRS     R6,R0,#+2
   \   00000B9E   0x4331             ORRS     R1,R1,R6
   \   00000BA0   0x0780             LSLS     R0,R0,#+30
   \   00000BA2   0x9E00             LDR      R6,[SP, #+0]
   \   00000BA4   0x4330             ORRS     R0,R0,R6
   \   00000BA6   0x9E02             LDR      R6,[SP, #+8]
   \   00000BA8   0x9F03             LDR      R7,[SP, #+12]
   \   00000BAA   0x4070             EORS     R0,R0,R6
   \   00000BAC   0x4079             EORS     R1,R1,R7
   \   00000BAE   0x9002             STR      R0,[SP, #+8]
   \   00000BB0   0x9103             STR      R1,[SP, #+12]
   \   00000BB2   0xA80A             ADD      R0,SP,#+40
   \   00000BB4   0xC803             LDM      R0,{R0,R1}
   \   00000BB6   0x09C8             LSRS     R0,R1,#+7
   \   00000BB8   0x2100             MOVS     R1,#+0
   \   00000BBA   0x9000             STR      R0,[SP, #+0]
   \   00000BBC   0x9101             STR      R1,[SP, #+4]
   \   00000BBE   0xA80A             ADD      R0,SP,#+40
   \   00000BC0   0xC803             LDM      R0,{R0,R1}
   \   00000BC2   0x0649             LSLS     R1,R1,#+25
   \   00000BC4   0x09C6             LSRS     R6,R0,#+7
   \   00000BC6   0x4331             ORRS     R1,R1,R6
   \   00000BC8   0x0640             LSLS     R0,R0,#+25
   \   00000BCA   0x9E00             LDR      R6,[SP, #+0]
   \   00000BCC   0x4330             ORRS     R0,R0,R6
   \   00000BCE   0x9E02             LDR      R6,[SP, #+8]
   \   00000BD0   0x9F03             LDR      R7,[SP, #+12]
   \   00000BD2   0x4070             EORS     R0,R0,R6
   \   00000BD4   0x4079             EORS     R1,R1,R7
   \   00000BD6   0x9E04             LDR      R6,[SP, #+16]
   \   00000BD8   0x9F05             LDR      R7,[SP, #+20]
   \   00000BDA   0x1980             ADDS     R0,R0,R6
   \   00000BDC   0x4179             ADCS     R1,R1,R7
   \   00000BDE   0x9002             STR      R0,[SP, #+8]
   \   00000BE0   0x9103             STR      R1,[SP, #+12]
   \   00000BE2   0xA80A             ADD      R0,SP,#+40
   \   00000BE4   0xC8C0             LDM      R0!,{R6,R7}
   \   00000BE6   0xA808             ADD      R0,SP,#+32
   \   00000BE8   0xC803             LDM      R0,{R0,R1}
   \   00000BEA   0x4030             ANDS     R0,R0,R6
   \   00000BEC   0x4039             ANDS     R1,R1,R7
   \   00000BEE   0x9000             STR      R0,[SP, #+0]
   \   00000BF0   0x9101             STR      R1,[SP, #+4]
   \   00000BF2   0xA80A             ADD      R0,SP,#+40
   \   00000BF4   0xC803             LDM      R0,{R0,R1}
   \   00000BF6   0xAE08             ADD      R6,SP,#+32
   \   00000BF8   0xCEC0             LDM      R6,{R6,R7}
   \   00000BFA   0x4306             ORRS     R6,R6,R0
   \   00000BFC   0x430F             ORRS     R7,R7,R1
   \   00000BFE   0x4026             ANDS     R6,R6,R4
   \   00000C00   0x402F             ANDS     R7,R7,R5
   \   00000C02   0x9800             LDR      R0,[SP, #+0]
   \   00000C04   0x9901             LDR      R1,[SP, #+4]
   \   00000C06   0x4306             ORRS     R6,R6,R0
   \   00000C08   0x430F             ORRS     R7,R7,R1
   \   00000C0A   0x9802             LDR      R0,[SP, #+8]
   \   00000C0C   0x9903             LDR      R1,[SP, #+12]
   \   00000C0E   0x1836             ADDS     R6,R6,R0
   \   00000C10   0x414F             ADCS     R7,R7,R1
    255              }
    256              while( i < 80 );
   \   00000C12   0x9806             LDR      R0,[SP, #+24]
   \   00000C14   0x3040             ADDS     R0,R0,#+64
   \   00000C16   0x9006             STR      R0,[SP, #+24]
   \   00000C18   0x9807             LDR      R0,[SP, #+28]
   \   00000C1A   0x3040             ADDS     R0,R0,#+64
   \   00000C1C   0x9007             STR      R0,[SP, #+28]
   \   00000C1E   0x9816             LDR      R0,[SP, #+88]
   \   00000C20   0x1E40             SUBS     R0,R0,#+1
   \   00000C22   0x9016             STR      R0,[SP, #+88]
   \   00000C24   0xD001             BEQ      .+6
   \   00000C26   0xF7FF 0xFAB4      BL       ??mbedtls_sha512_process_5
    257          
    258              ctx->state[0] += A;
   \   00000C2A   0xA826             ADD      R0,SP,#+152
   \   00000C2C   0xC803             LDM      R0,{R0,R1}
   \   00000C2E   0x1836             ADDS     R6,R6,R0
   \   00000C30   0x414F             ADCS     R7,R7,R1
   \   00000C32   0x98C8             LDR      R0,[SP, #+800]
   \   00000C34   0x3010             ADDS     R0,R0,#+16
   \   00000C36   0xC0C0             STM      R0!,{R6,R7}
    259              ctx->state[1] += B;
   \   00000C38   0xA824             ADD      R0,SP,#+144
   \   00000C3A   0xC8C0             LDM      R0!,{R6,R7}
   \   00000C3C   0xA80A             ADD      R0,SP,#+40
   \   00000C3E   0xC803             LDM      R0,{R0,R1}
   \   00000C40   0x1980             ADDS     R0,R0,R6
   \   00000C42   0x4179             ADCS     R1,R1,R7
   \   00000C44   0x9EC8             LDR      R6,[SP, #+800]
   \   00000C46   0x3618             ADDS     R6,R6,#+24
   \   00000C48   0xC603             STM      R6!,{R0,R1}
    260              ctx->state[2] += C;
   \   00000C4A   0xA822             ADD      R0,SP,#+136
   \   00000C4C   0xC8C0             LDM      R0!,{R6,R7}
   \   00000C4E   0xA808             ADD      R0,SP,#+32
   \   00000C50   0xC803             LDM      R0,{R0,R1}
   \   00000C52   0x1980             ADDS     R0,R0,R6
   \   00000C54   0x4179             ADCS     R1,R1,R7
   \   00000C56   0x9EC8             LDR      R6,[SP, #+800]
   \   00000C58   0x3620             ADDS     R6,R6,#+32
   \   00000C5A   0xC603             STM      R6!,{R0,R1}
    261              ctx->state[3] += D;
   \   00000C5C   0xA820             ADD      R0,SP,#+128
   \   00000C5E   0xC803             LDM      R0,{R0,R1}
   \   00000C60   0x1824             ADDS     R4,R4,R0
   \   00000C62   0x414D             ADCS     R5,R5,R1
   \   00000C64   0x98C8             LDR      R0,[SP, #+800]
   \   00000C66   0x3028             ADDS     R0,R0,#+40
   \   00000C68   0xC030             STM      R0!,{R4,R5}
    262              ctx->state[4] += E;
   \   00000C6A   0xA81E             ADD      R0,SP,#+120
   \   00000C6C   0xC830             LDM      R0!,{R4,R5}
   \   00000C6E   0xA810             ADD      R0,SP,#+64
   \   00000C70   0xC803             LDM      R0,{R0,R1}
   \   00000C72   0x1900             ADDS     R0,R0,R4
   \   00000C74   0x4169             ADCS     R1,R1,R5
   \   00000C76   0x9CC8             LDR      R4,[SP, #+800]
   \   00000C78   0x3430             ADDS     R4,R4,#+48
   \   00000C7A   0xC403             STM      R4!,{R0,R1}
    263              ctx->state[5] += F;
   \   00000C7C   0xA81C             ADD      R0,SP,#+112
   \   00000C7E   0xC830             LDM      R0!,{R4,R5}
   \   00000C80   0xA80E             ADD      R0,SP,#+56
   \   00000C82   0xC803             LDM      R0,{R0,R1}
   \   00000C84   0x1900             ADDS     R0,R0,R4
   \   00000C86   0x4169             ADCS     R1,R1,R5
   \   00000C88   0x9CC8             LDR      R4,[SP, #+800]
   \   00000C8A   0x3438             ADDS     R4,R4,#+56
   \   00000C8C   0xC403             STM      R4!,{R0,R1}
    264              ctx->state[6] += G;
   \   00000C8E   0xA81A             ADD      R0,SP,#+104
   \   00000C90   0xC830             LDM      R0!,{R4,R5}
   \   00000C92   0xA80C             ADD      R0,SP,#+48
   \   00000C94   0xC803             LDM      R0,{R0,R1}
   \   00000C96   0x1900             ADDS     R0,R0,R4
   \   00000C98   0x4169             ADCS     R1,R1,R5
   \   00000C9A   0x9CC8             LDR      R4,[SP, #+800]
   \   00000C9C   0x6420             STR      R0,[R4, #+64]
   \   00000C9E   0x6461             STR      R1,[R4, #+68]
    265              ctx->state[7] += H;
   \   00000CA0   0xA818             ADD      R0,SP,#+96
   \   00000CA2   0xC803             LDM      R0,{R0,R1}
   \   00000CA4   0x1812             ADDS     R2,R2,R0
   \   00000CA6   0x414B             ADCS     R3,R3,R1
   \   00000CA8   0x98C8             LDR      R0,[SP, #+800]
   \   00000CAA   0x6482             STR      R2,[R0, #+72]
   \   00000CAC   0x64C3             STR      R3,[R0, #+76]
    266          }
   \   00000CAE   0xB07F             ADD      SP,SP,#+508
   \   00000CB0   0xB04A             ADD      SP,SP,#+296
   \   00000CB2   0xBDF0             POP      {R4-R7,PC}       ;; return
    267          #endif /* !MBEDTLS_SHA512_PROCESS_ALT */
    268          
    269          /*
    270           * SHA-512 process buffer
    271           */

   \                                 In section .text, align 2, keep-with-next
    272          void mbedtls_sha512_update( mbedtls_sha512_context *ctx, const unsigned char *input,
    273                              size_t ilen )
    274          {
   \                     mbedtls_sha512_update: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0014             MOVS     R4,R2
    275              size_t fill;
    276              unsigned int left;
    277          
    278              if( ilen == 0 )
   \   0000000A   0xD042             BEQ      ??mbedtls_sha512_update_0
    279                  return;
    280          
    281              left = (unsigned int) (ctx->total[0] & 0x7F);
   \   0000000C   0xCE03             LDM      R6!,{R0,R1}
   \   0000000E   0x3E08             SUBS     R6,R6,#+8
   \   00000010   0x0647             LSLS     R7,R0,#+25
   \   00000012   0x0E7F             LSRS     R7,R7,#+25
    282              fill = 128 - left;
   \   00000014   0x2280             MOVS     R2,#+128
   \   00000016   0x1BD2             SUBS     R2,R2,R7
   \   00000018   0x9202             STR      R2,[SP, #+8]
    283          
    284              ctx->total[0] += (uint64_t) ilen;
   \   0000001A   0x2300             MOVS     R3,#+0
   \   0000001C   0x1900             ADDS     R0,R0,R4
   \   0000001E   0x4159             ADCS     R1,R1,R3
   \   00000020   0xC603             STM      R6!,{R0,R1}
   \   00000022   0x3E08             SUBS     R6,R6,#+8
    285          
    286              if( ctx->total[0] < (uint64_t) ilen )
   \   00000024   0x9000             STR      R0,[SP, #+0]
   \   00000026   0x9101             STR      R1,[SP, #+4]
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x9A00             LDR      R2,[SP, #+0]
   \   0000002C   0x9B01             LDR      R3,[SP, #+4]
   \   0000002E   0x428B             CMP      R3,R1
   \   00000030   0xD80A             BHI      ??mbedtls_sha512_update_1
   \   00000032   0x42A2             CMP      R2,R4
   \   00000034   0xD208             BCS      ??mbedtls_sha512_update_1
    287                  ctx->total[1]++;
   \   00000036   0x0030             MOVS     R0,R6
   \   00000038   0x3008             ADDS     R0,R0,#+8
   \   0000003A   0xC803             LDM      R0,{R0,R1}
   \   0000003C   0x2200             MOVS     R2,#+0
   \   0000003E   0x1C40             ADDS     R0,R0,#+1
   \   00000040   0x4151             ADCS     R1,R1,R2
   \   00000042   0x0032             MOVS     R2,R6
   \   00000044   0x3208             ADDS     R2,R2,#+8
   \   00000046   0xC203             STM      R2!,{R0,R1}
    288          
    289              if( left && ilen >= fill )
   \                     ??mbedtls_sha512_update_1: (+1)
   \   00000048   0x2F00             CMP      R7,#+0
   \   0000004A   0xD018             BEQ      ??mbedtls_sha512_update_2
   \   0000004C   0x9802             LDR      R0,[SP, #+8]
   \   0000004E   0x4284             CMP      R4,R0
   \   00000050   0xD315             BCC      ??mbedtls_sha512_update_2
    290              {
    291                  memcpy( (void *) (ctx->buffer + left), input, fill );
   \   00000052   0x4602             MOV      R2,R0
   \   00000054   0x0029             MOVS     R1,R5
   \   00000056   0x19F0             ADDS     R0,R6,R7
   \   00000058   0x3050             ADDS     R0,R0,#+80
   \   0000005A   0x.... 0x....      BL       __aeabi_memcpy
    292                  mbedtls_sha512_process( ctx, ctx->buffer );
   \   0000005E   0x0031             MOVS     R1,R6
   \   00000060   0x3150             ADDS     R1,R1,#+80
   \   00000062   0x0030             MOVS     R0,R6
   \   00000064   0x.... 0x....      BL       mbedtls_sha512_process
    293                  input += fill;
   \   00000068   0x9802             LDR      R0,[SP, #+8]
   \   0000006A   0x182D             ADDS     R5,R5,R0
    294                  ilen  -= fill;
   \   0000006C   0x1A24             SUBS     R4,R4,R0
    295                  left = 0;
   \   0000006E   0x2700             MOVS     R7,#+0
   \   00000070   0xE005             B        ??mbedtls_sha512_update_2
    296              }
    297          
    298              while( ilen >= 128 )
    299              {
    300                  mbedtls_sha512_process( ctx, input );
   \                     ??mbedtls_sha512_update_3: (+1)
   \   00000072   0x0029             MOVS     R1,R5
   \   00000074   0x0030             MOVS     R0,R6
   \   00000076   0x.... 0x....      BL       mbedtls_sha512_process
    301                  input += 128;
   \   0000007A   0x3580             ADDS     R5,R5,#+128
    302                  ilen  -= 128;
   \   0000007C   0x3C80             SUBS     R4,R4,#+128
    303              }
   \                     ??mbedtls_sha512_update_2: (+1)
   \   0000007E   0x2C80             CMP      R4,#+128
   \   00000080   0xD2F7             BCS      ??mbedtls_sha512_update_3
    304          
    305              if( ilen > 0 )
   \   00000082   0x2C00             CMP      R4,#+0
   \   00000084   0xD005             BEQ      ??mbedtls_sha512_update_0
    306                  memcpy( (void *) (ctx->buffer + left), input, ilen );
   \   00000086   0x0022             MOVS     R2,R4
   \   00000088   0x0029             MOVS     R1,R5
   \   0000008A   0x19F0             ADDS     R0,R6,R7
   \   0000008C   0x3050             ADDS     R0,R0,#+80
   \   0000008E   0x.... 0x....      BL       __aeabi_memcpy
    307          }
   \                     ??mbedtls_sha512_update_0: (+1)
   \   00000092   0xB003             ADD      SP,SP,#+12
   \   00000094   0xBDF0             POP      {R4-R7,PC}       ;; return
    308          

   \                                 In section .rodata, align 4, keep-with-next
    309          static const unsigned char sha512_padding[128] =
   \                     sha512_padding:
   \   00000000   0x80 0x00          DC8 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000016   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000044   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000005B   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000072   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    310          {
    311           0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    312              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    313              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    314              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    315              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    316              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    317              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    318              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    319          };
    320          
    321          /*
    322           * SHA-512 final digest
    323           */

   \                                 In section .text, align 2, keep-with-next
    324          void mbedtls_sha512_finish( mbedtls_sha512_context *ctx, unsigned char output[64] )
    325          {
   \                     mbedtls_sha512_finish: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x0004             MOVS     R4,R0
    326              size_t last, padn;
    327              uint64_t high, low;
    328              unsigned char msglen[16];
    329          
    330              high = ( ctx->total[0] >> 61 )
    331                   | ( ctx->total[1] <<  3 );
   \   00000006   0xCC0C             LDM      R4!,{R2,R3}
   \   00000008   0x3C08             SUBS     R4,R4,#+8
   \   0000000A   0x0F5E             LSRS     R6,R3,#+29
   \   0000000C   0x3008             ADDS     R0,R0,#+8
   \   0000000E   0xC803             LDM      R0,{R0,R1}
   \   00000010   0x00C9             LSLS     R1,R1,#+3
   \   00000012   0x0F45             LSRS     R5,R0,#+29
   \   00000014   0x4329             ORRS     R1,R1,R5
   \   00000016   0x00C0             LSLS     R0,R0,#+3
   \   00000018   0x4330             ORRS     R0,R0,R6
    332              low  = ( ctx->total[0] <<  3 );
   \   0000001A   0x00DB             LSLS     R3,R3,#+3
   \   0000001C   0x0F55             LSRS     R5,R2,#+29
   \   0000001E   0x432B             ORRS     R3,R3,R5
   \   00000020   0x00D2             LSLS     R2,R2,#+3
   \   00000022   0xAD02             ADD      R5,SP,#+8
   \   00000024   0xC50C             STM      R5!,{R2,R3}
    333          
    334              PUT_UINT64_BE( high, msglen, 0 );
   \   00000026   0xAA04             ADD      R2,SP,#+16
   \   00000028   0x0E0E             LSRS     R6,R1,#+24
   \   0000002A   0x7016             STRB     R6,[R2, #+0]
   \   0000002C   0x0C0E             LSRS     R6,R1,#+16
   \   0000002E   0x7056             STRB     R6,[R2, #+1]
   \   00000030   0x0A0E             LSRS     R6,R1,#+8
   \   00000032   0x7096             STRB     R6,[R2, #+2]
   \   00000034   0x70D1             STRB     R1,[R2, #+3]
   \   00000036   0x0E03             LSRS     R3,R0,#+24
   \   00000038   0x7113             STRB     R3,[R2, #+4]
   \   0000003A   0x0C03             LSRS     R3,R0,#+16
   \   0000003C   0x7153             STRB     R3,[R2, #+5]
   \   0000003E   0x0403             LSLS     R3,R0,#+16
   \   00000040   0x0E1B             LSRS     R3,R3,#+24
   \   00000042   0x7193             STRB     R3,[R2, #+6]
   \   00000044   0x71D0             STRB     R0,[R2, #+7]
    335              PUT_UINT64_BE( low,  msglen, 8 );
   \   00000046   0xA802             ADD      R0,SP,#+8
   \   00000048   0xC803             LDM      R0,{R0,R1}
   \   0000004A   0x0E08             LSRS     R0,R1,#+24
   \   0000004C   0x7210             STRB     R0,[R2, #+8]
   \   0000004E   0xA802             ADD      R0,SP,#+8
   \   00000050   0xC803             LDM      R0,{R0,R1}
   \   00000052   0x0C08             LSRS     R0,R1,#+16
   \   00000054   0x7250             STRB     R0,[R2, #+9]
   \   00000056   0xA802             ADD      R0,SP,#+8
   \   00000058   0xC803             LDM      R0,{R0,R1}
   \   0000005A   0x0A08             LSRS     R0,R1,#+8
   \   0000005C   0x7290             STRB     R0,[R2, #+10]
   \   0000005E   0xA802             ADD      R0,SP,#+8
   \   00000060   0xC803             LDM      R0,{R0,R1}
   \   00000062   0x72D1             STRB     R1,[R2, #+11]
   \   00000064   0xA802             ADD      R0,SP,#+8
   \   00000066   0xC803             LDM      R0,{R0,R1}
   \   00000068   0x0E00             LSRS     R0,R0,#+24
   \   0000006A   0x7310             STRB     R0,[R2, #+12]
   \   0000006C   0xA802             ADD      R0,SP,#+8
   \   0000006E   0xC803             LDM      R0,{R0,R1}
   \   00000070   0x0C00             LSRS     R0,R0,#+16
   \   00000072   0x7350             STRB     R0,[R2, #+13]
   \   00000074   0xA802             ADD      R0,SP,#+8
   \   00000076   0xC803             LDM      R0,{R0,R1}
   \   00000078   0x0400             LSLS     R0,R0,#+16
   \   0000007A   0x0E00             LSRS     R0,R0,#+24
   \   0000007C   0x7390             STRB     R0,[R2, #+14]
   \   0000007E   0xA802             ADD      R0,SP,#+8
   \   00000080   0xC803             LDM      R0,{R0,R1}
   \   00000082   0x73D0             STRB     R0,[R2, #+15]
    336          
    337              last = (size_t)( ctx->total[0] & 0x7F );
   \   00000084   0xCC03             LDM      R4!,{R0,R1}
   \   00000086   0x3C08             SUBS     R4,R4,#+8
   \   00000088   0x0642             LSLS     R2,R0,#+25
   \   0000008A   0x0E52             LSRS     R2,R2,#+25
    338              padn = ( last < 112 ) ? ( 112 - last ) : ( 240 - last );
   \   0000008C   0x2A70             CMP      R2,#+112
   \   0000008E   0xD201             BCS      ??mbedtls_sha512_finish_0
   \   00000090   0x2570             MOVS     R5,#+112
   \   00000092   0xE000             B        ??mbedtls_sha512_finish_1
   \                     ??mbedtls_sha512_finish_0: (+1)
   \   00000094   0x25F0             MOVS     R5,#+240
   \                     ??mbedtls_sha512_finish_1: (+1)
   \   00000096   0x1AAE             SUBS     R6,R5,R2
   \   00000098   0x....             LDR      R5,??DataTable12
    339          
    340              mbedtls_sha512_update( ctx, sha512_padding, padn );
   \   0000009A   0xD03E             BEQ      ??mbedtls_sha512_finish_2
   \   0000009C   0x9200             STR      R2,[SP, #+0]
   \   0000009E   0x2280             MOVS     R2,#+128
   \   000000A0   0x9B00             LDR      R3,[SP, #+0]
   \   000000A2   0x1AD2             SUBS     R2,R2,R3
   \   000000A4   0x9201             STR      R2,[SP, #+4]
   \   000000A6   0x2700             MOVS     R7,#+0
   \   000000A8   0x1980             ADDS     R0,R0,R6
   \   000000AA   0x4179             ADCS     R1,R1,R7
   \   000000AC   0xC403             STM      R4!,{R0,R1}
   \   000000AE   0x3C08             SUBS     R4,R4,#+8
   \   000000B0   0x42B9             CMP      R1,R7
   \   000000B2   0xD80A             BHI      ??mbedtls_sha512_finish_3
   \   000000B4   0x42B0             CMP      R0,R6
   \   000000B6   0xD208             BCS      ??mbedtls_sha512_finish_3
   \   000000B8   0x0020             MOVS     R0,R4
   \   000000BA   0x3008             ADDS     R0,R0,#+8
   \   000000BC   0xC803             LDM      R0,{R0,R1}
   \   000000BE   0x2200             MOVS     R2,#+0
   \   000000C0   0x1C40             ADDS     R0,R0,#+1
   \   000000C2   0x4151             ADCS     R1,R1,R2
   \   000000C4   0x0022             MOVS     R2,R4
   \   000000C6   0x3208             ADDS     R2,R2,#+8
   \   000000C8   0xC203             STM      R2!,{R0,R1}
   \                     ??mbedtls_sha512_finish_3: (+1)
   \   000000CA   0x9800             LDR      R0,[SP, #+0]
   \   000000CC   0x2800             CMP      R0,#+0
   \   000000CE   0xD019             BEQ      ??mbedtls_sha512_finish_4
   \   000000D0   0x9801             LDR      R0,[SP, #+4]
   \   000000D2   0x4286             CMP      R6,R0
   \   000000D4   0xD316             BCC      ??mbedtls_sha512_finish_4
   \   000000D6   0x4602             MOV      R2,R0
   \   000000D8   0x4629             MOV      R1,R5
   \   000000DA   0x9800             LDR      R0,[SP, #+0]
   \   000000DC   0x1820             ADDS     R0,R4,R0
   \   000000DE   0x3050             ADDS     R0,R0,#+80
   \   000000E0   0x.... 0x....      BL       __aeabi_memcpy
   \   000000E4   0x0021             MOVS     R1,R4
   \   000000E6   0x3150             ADDS     R1,R1,#+80
   \   000000E8   0x0020             MOVS     R0,R4
   \   000000EA   0x.... 0x....      BL       mbedtls_sha512_process
   \   000000EE   0x9901             LDR      R1,[SP, #+4]
   \   000000F0   0x186D             ADDS     R5,R5,R1
   \   000000F2   0x1A76             SUBS     R6,R6,R1
   \   000000F4   0x9700             STR      R7,[SP, #+0]
   \   000000F6   0xE005             B        ??mbedtls_sha512_finish_4
   \                     ??mbedtls_sha512_finish_5: (+1)
   \   000000F8   0x0029             MOVS     R1,R5
   \   000000FA   0x0020             MOVS     R0,R4
   \   000000FC   0x.... 0x....      BL       mbedtls_sha512_process
   \   00000100   0x3580             ADDS     R5,R5,#+128
   \   00000102   0x3E80             SUBS     R6,R6,#+128
   \                     ??mbedtls_sha512_finish_4: (+1)
   \   00000104   0x2E80             CMP      R6,#+128
   \   00000106   0xD2F7             BCS      ??mbedtls_sha512_finish_5
   \   00000108   0x2E00             CMP      R6,#+0
   \   0000010A   0xD006             BEQ      ??mbedtls_sha512_finish_2
   \   0000010C   0x0032             MOVS     R2,R6
   \   0000010E   0x0029             MOVS     R1,R5
   \   00000110   0x9800             LDR      R0,[SP, #+0]
   \   00000112   0x1820             ADDS     R0,R4,R0
   \   00000114   0x3050             ADDS     R0,R0,#+80
   \   00000116   0x.... 0x....      BL       __aeabi_memcpy
    341              mbedtls_sha512_update( ctx, msglen, 16 );
   \                     ??mbedtls_sha512_finish_2: (+1)
   \   0000011A   0x2610             MOVS     R6,#+16
   \   0000011C   0xAD04             ADD      R5,SP,#+16
   \   0000011E   0xCC03             LDM      R4!,{R0,R1}
   \   00000120   0x3C08             SUBS     R4,R4,#+8
   \   00000122   0x0647             LSLS     R7,R0,#+25
   \   00000124   0x0E7F             LSRS     R7,R7,#+25
   \   00000126   0x2280             MOVS     R2,#+128
   \   00000128   0x1BD2             SUBS     R2,R2,R7
   \   0000012A   0x9200             STR      R2,[SP, #+0]
   \   0000012C   0x2200             MOVS     R2,#+0
   \   0000012E   0x3010             ADDS     R0,R0,#+16
   \   00000130   0x4151             ADCS     R1,R1,R2
   \   00000132   0xC403             STM      R4!,{R0,R1}
   \   00000134   0x3C08             SUBS     R4,R4,#+8
   \   00000136   0x2900             CMP      R1,#+0
   \   00000138   0xD809             BHI      ??mbedtls_sha512_finish_6
   \   0000013A   0x2810             CMP      R0,#+16
   \   0000013C   0xD207             BCS      ??mbedtls_sha512_finish_6
   \   0000013E   0x0020             MOVS     R0,R4
   \   00000140   0x3008             ADDS     R0,R0,#+8
   \   00000142   0xC803             LDM      R0,{R0,R1}
   \   00000144   0x1C40             ADDS     R0,R0,#+1
   \   00000146   0x4151             ADCS     R1,R1,R2
   \   00000148   0x0022             MOVS     R2,R4
   \   0000014A   0x3208             ADDS     R2,R2,#+8
   \   0000014C   0xC203             STM      R2!,{R0,R1}
   \                     ??mbedtls_sha512_finish_6: (+1)
   \   0000014E   0x2F00             CMP      R7,#+0
   \   00000150   0xD01D             BEQ      ??mbedtls_sha512_finish_7
   \   00000152   0x9800             LDR      R0,[SP, #+0]
   \   00000154   0x2811             CMP      R0,#+17
   \   00000156   0xD21A             BCS      ??mbedtls_sha512_finish_7
   \   00000158   0x4602             MOV      R2,R0
   \   0000015A   0xA904             ADD      R1,SP,#+16
   \   0000015C   0x19E0             ADDS     R0,R4,R7
   \   0000015E   0x3050             ADDS     R0,R0,#+80
   \   00000160   0x.... 0x....      BL       __aeabi_memcpy
   \   00000164   0x0021             MOVS     R1,R4
   \   00000166   0x3150             ADDS     R1,R1,#+80
   \   00000168   0x0020             MOVS     R0,R4
   \   0000016A   0x.... 0x....      BL       mbedtls_sha512_process
   \   0000016E   0xA804             ADD      R0,SP,#+16
   \   00000170   0x9900             LDR      R1,[SP, #+0]
   \   00000172   0x1845             ADDS     R5,R0,R1
   \   00000174   0x1A76             SUBS     R6,R6,R1
   \   00000176   0x2700             MOVS     R7,#+0
   \   00000178   0xE005             B        ??mbedtls_sha512_finish_8
   \                     ??mbedtls_sha512_finish_9: (+1)
   \   0000017A   0x0029             MOVS     R1,R5
   \   0000017C   0x0020             MOVS     R0,R4
   \   0000017E   0x.... 0x....      BL       mbedtls_sha512_process
   \   00000182   0x3580             ADDS     R5,R5,#+128
   \   00000184   0x3E80             SUBS     R6,R6,#+128
   \                     ??mbedtls_sha512_finish_8: (+1)
   \   00000186   0x2E80             CMP      R6,#+128
   \   00000188   0xD2F7             BCS      ??mbedtls_sha512_finish_9
   \   0000018A   0x2E00             CMP      R6,#+0
   \   0000018C   0xD005             BEQ      ??mbedtls_sha512_finish_10
   \                     ??mbedtls_sha512_finish_7: (+1)
   \   0000018E   0x0032             MOVS     R2,R6
   \   00000190   0x0029             MOVS     R1,R5
   \   00000192   0x19E0             ADDS     R0,R4,R7
   \   00000194   0x3050             ADDS     R0,R0,#+80
   \   00000196   0x.... 0x....      BL       __aeabi_memcpy
    342          
    343              PUT_UINT64_BE( ctx->state[0], output,  0 );
   \                     ??mbedtls_sha512_finish_10: (+1)
   \   0000019A   0x0020             MOVS     R0,R4
   \   0000019C   0x3010             ADDS     R0,R0,#+16
   \   0000019E   0xC803             LDM      R0,{R0,R1}
   \   000001A0   0x0E08             LSRS     R0,R1,#+24
   \   000001A2   0x9908             LDR      R1,[SP, #+32]
   \   000001A4   0x7008             STRB     R0,[R1, #+0]
   \   000001A6   0x0020             MOVS     R0,R4
   \   000001A8   0x3010             ADDS     R0,R0,#+16
   \   000001AA   0xC803             LDM      R0,{R0,R1}
   \   000001AC   0x0C08             LSRS     R0,R1,#+16
   \   000001AE   0x9908             LDR      R1,[SP, #+32]
   \   000001B0   0x7048             STRB     R0,[R1, #+1]
   \   000001B2   0x0020             MOVS     R0,R4
   \   000001B4   0x3010             ADDS     R0,R0,#+16
   \   000001B6   0xC803             LDM      R0,{R0,R1}
   \   000001B8   0x0A08             LSRS     R0,R1,#+8
   \   000001BA   0x9908             LDR      R1,[SP, #+32]
   \   000001BC   0x7088             STRB     R0,[R1, #+2]
   \   000001BE   0x0020             MOVS     R0,R4
   \   000001C0   0x3010             ADDS     R0,R0,#+16
   \   000001C2   0xC803             LDM      R0,{R0,R1}
   \   000001C4   0x9808             LDR      R0,[SP, #+32]
   \   000001C6   0x70C1             STRB     R1,[R0, #+3]
   \   000001C8   0x0020             MOVS     R0,R4
   \   000001CA   0x3010             ADDS     R0,R0,#+16
   \   000001CC   0xC803             LDM      R0,{R0,R1}
   \   000001CE   0x0E00             LSRS     R0,R0,#+24
   \   000001D0   0x9908             LDR      R1,[SP, #+32]
   \   000001D2   0x7108             STRB     R0,[R1, #+4]
   \   000001D4   0x0020             MOVS     R0,R4
   \   000001D6   0x3010             ADDS     R0,R0,#+16
   \   000001D8   0xC803             LDM      R0,{R0,R1}
   \   000001DA   0x0C00             LSRS     R0,R0,#+16
   \   000001DC   0x9908             LDR      R1,[SP, #+32]
   \   000001DE   0x7148             STRB     R0,[R1, #+5]
   \   000001E0   0x0020             MOVS     R0,R4
   \   000001E2   0x3010             ADDS     R0,R0,#+16
   \   000001E4   0xC803             LDM      R0,{R0,R1}
   \   000001E6   0x0400             LSLS     R0,R0,#+16
   \   000001E8   0x0E00             LSRS     R0,R0,#+24
   \   000001EA   0x9908             LDR      R1,[SP, #+32]
   \   000001EC   0x7188             STRB     R0,[R1, #+6]
   \   000001EE   0x0020             MOVS     R0,R4
   \   000001F0   0x3010             ADDS     R0,R0,#+16
   \   000001F2   0xC803             LDM      R0,{R0,R1}
   \   000001F4   0x9908             LDR      R1,[SP, #+32]
   \   000001F6   0x71C8             STRB     R0,[R1, #+7]
    344              PUT_UINT64_BE( ctx->state[1], output,  8 );
   \   000001F8   0x0020             MOVS     R0,R4
   \   000001FA   0x3018             ADDS     R0,R0,#+24
   \   000001FC   0xC803             LDM      R0,{R0,R1}
   \   000001FE   0x0E08             LSRS     R0,R1,#+24
   \   00000200   0x9908             LDR      R1,[SP, #+32]
   \   00000202   0x7208             STRB     R0,[R1, #+8]
   \   00000204   0x0020             MOVS     R0,R4
   \   00000206   0x3018             ADDS     R0,R0,#+24
   \   00000208   0xC803             LDM      R0,{R0,R1}
   \   0000020A   0x0C08             LSRS     R0,R1,#+16
   \   0000020C   0x9908             LDR      R1,[SP, #+32]
   \   0000020E   0x7248             STRB     R0,[R1, #+9]
   \   00000210   0x0020             MOVS     R0,R4
   \   00000212   0x3018             ADDS     R0,R0,#+24
   \   00000214   0xC803             LDM      R0,{R0,R1}
   \   00000216   0x0A08             LSRS     R0,R1,#+8
   \   00000218   0x9908             LDR      R1,[SP, #+32]
   \   0000021A   0x7288             STRB     R0,[R1, #+10]
   \   0000021C   0x0020             MOVS     R0,R4
   \   0000021E   0x3018             ADDS     R0,R0,#+24
   \   00000220   0xC803             LDM      R0,{R0,R1}
   \   00000222   0x9808             LDR      R0,[SP, #+32]
   \   00000224   0x72C1             STRB     R1,[R0, #+11]
   \   00000226   0x0020             MOVS     R0,R4
   \   00000228   0x3018             ADDS     R0,R0,#+24
   \   0000022A   0xC803             LDM      R0,{R0,R1}
   \   0000022C   0x0E00             LSRS     R0,R0,#+24
   \   0000022E   0x9908             LDR      R1,[SP, #+32]
   \   00000230   0x7308             STRB     R0,[R1, #+12]
   \   00000232   0x0020             MOVS     R0,R4
   \   00000234   0x3018             ADDS     R0,R0,#+24
   \   00000236   0xC803             LDM      R0,{R0,R1}
   \   00000238   0x0C00             LSRS     R0,R0,#+16
   \   0000023A   0x9908             LDR      R1,[SP, #+32]
   \   0000023C   0x7348             STRB     R0,[R1, #+13]
   \   0000023E   0x0020             MOVS     R0,R4
   \   00000240   0x3018             ADDS     R0,R0,#+24
   \   00000242   0xC803             LDM      R0,{R0,R1}
   \   00000244   0x0400             LSLS     R0,R0,#+16
   \   00000246   0x0E00             LSRS     R0,R0,#+24
   \   00000248   0x9908             LDR      R1,[SP, #+32]
   \   0000024A   0x7388             STRB     R0,[R1, #+14]
   \   0000024C   0x0020             MOVS     R0,R4
   \   0000024E   0x3018             ADDS     R0,R0,#+24
   \   00000250   0xC803             LDM      R0,{R0,R1}
   \   00000252   0x9908             LDR      R1,[SP, #+32]
   \   00000254   0x73C8             STRB     R0,[R1, #+15]
    345              PUT_UINT64_BE( ctx->state[2], output, 16 );
   \   00000256   0x0020             MOVS     R0,R4
   \   00000258   0x3020             ADDS     R0,R0,#+32
   \   0000025A   0xC803             LDM      R0,{R0,R1}
   \   0000025C   0x0E08             LSRS     R0,R1,#+24
   \   0000025E   0x9908             LDR      R1,[SP, #+32]
   \   00000260   0x7408             STRB     R0,[R1, #+16]
   \   00000262   0x0020             MOVS     R0,R4
   \   00000264   0x3020             ADDS     R0,R0,#+32
   \   00000266   0xC803             LDM      R0,{R0,R1}
   \   00000268   0x0C08             LSRS     R0,R1,#+16
   \   0000026A   0x9908             LDR      R1,[SP, #+32]
   \   0000026C   0x7448             STRB     R0,[R1, #+17]
   \   0000026E   0x0020             MOVS     R0,R4
   \   00000270   0x3020             ADDS     R0,R0,#+32
   \   00000272   0xC803             LDM      R0,{R0,R1}
   \   00000274   0x0A08             LSRS     R0,R1,#+8
   \   00000276   0x9908             LDR      R1,[SP, #+32]
   \   00000278   0x7488             STRB     R0,[R1, #+18]
   \   0000027A   0x0020             MOVS     R0,R4
   \   0000027C   0x3020             ADDS     R0,R0,#+32
   \   0000027E   0xC803             LDM      R0,{R0,R1}
   \   00000280   0x9808             LDR      R0,[SP, #+32]
   \   00000282   0x74C1             STRB     R1,[R0, #+19]
   \   00000284   0x0020             MOVS     R0,R4
   \   00000286   0x3020             ADDS     R0,R0,#+32
   \   00000288   0xC803             LDM      R0,{R0,R1}
   \   0000028A   0x0E00             LSRS     R0,R0,#+24
   \   0000028C   0x9908             LDR      R1,[SP, #+32]
   \   0000028E   0x7508             STRB     R0,[R1, #+20]
   \   00000290   0x0020             MOVS     R0,R4
   \   00000292   0x3020             ADDS     R0,R0,#+32
   \   00000294   0xC803             LDM      R0,{R0,R1}
   \   00000296   0x0C00             LSRS     R0,R0,#+16
   \   00000298   0x9908             LDR      R1,[SP, #+32]
   \   0000029A   0x7548             STRB     R0,[R1, #+21]
   \   0000029C   0x0020             MOVS     R0,R4
   \   0000029E   0x3020             ADDS     R0,R0,#+32
   \   000002A0   0xC803             LDM      R0,{R0,R1}
   \   000002A2   0x0400             LSLS     R0,R0,#+16
   \   000002A4   0x0E00             LSRS     R0,R0,#+24
   \   000002A6   0x9908             LDR      R1,[SP, #+32]
   \   000002A8   0x7588             STRB     R0,[R1, #+22]
   \   000002AA   0x0020             MOVS     R0,R4
   \   000002AC   0x3020             ADDS     R0,R0,#+32
   \   000002AE   0xC803             LDM      R0,{R0,R1}
   \   000002B0   0x9908             LDR      R1,[SP, #+32]
   \   000002B2   0x75C8             STRB     R0,[R1, #+23]
    346              PUT_UINT64_BE( ctx->state[3], output, 24 );
   \   000002B4   0x0020             MOVS     R0,R4
   \   000002B6   0x3028             ADDS     R0,R0,#+40
   \   000002B8   0xC803             LDM      R0,{R0,R1}
   \   000002BA   0x0E08             LSRS     R0,R1,#+24
   \   000002BC   0x9908             LDR      R1,[SP, #+32]
   \   000002BE   0x7608             STRB     R0,[R1, #+24]
   \   000002C0   0x0020             MOVS     R0,R4
   \   000002C2   0x3028             ADDS     R0,R0,#+40
   \   000002C4   0xC803             LDM      R0,{R0,R1}
   \   000002C6   0x0C08             LSRS     R0,R1,#+16
   \   000002C8   0x9908             LDR      R1,[SP, #+32]
   \   000002CA   0x7648             STRB     R0,[R1, #+25]
   \   000002CC   0x0020             MOVS     R0,R4
   \   000002CE   0x3028             ADDS     R0,R0,#+40
   \   000002D0   0xC803             LDM      R0,{R0,R1}
   \   000002D2   0x0A08             LSRS     R0,R1,#+8
   \   000002D4   0x9908             LDR      R1,[SP, #+32]
   \   000002D6   0x7688             STRB     R0,[R1, #+26]
   \   000002D8   0x0020             MOVS     R0,R4
   \   000002DA   0x3028             ADDS     R0,R0,#+40
   \   000002DC   0xC803             LDM      R0,{R0,R1}
   \   000002DE   0x9808             LDR      R0,[SP, #+32]
   \   000002E0   0x76C1             STRB     R1,[R0, #+27]
   \   000002E2   0x0020             MOVS     R0,R4
   \   000002E4   0x3028             ADDS     R0,R0,#+40
   \   000002E6   0xC803             LDM      R0,{R0,R1}
   \   000002E8   0x0E00             LSRS     R0,R0,#+24
   \   000002EA   0x9908             LDR      R1,[SP, #+32]
   \   000002EC   0x7708             STRB     R0,[R1, #+28]
   \   000002EE   0x0020             MOVS     R0,R4
   \   000002F0   0x3028             ADDS     R0,R0,#+40
   \   000002F2   0xC803             LDM      R0,{R0,R1}
   \   000002F4   0x0C00             LSRS     R0,R0,#+16
   \   000002F6   0x9908             LDR      R1,[SP, #+32]
   \   000002F8   0x7748             STRB     R0,[R1, #+29]
   \   000002FA   0x0020             MOVS     R0,R4
   \   000002FC   0x3028             ADDS     R0,R0,#+40
   \   000002FE   0xC803             LDM      R0,{R0,R1}
   \   00000300   0x0400             LSLS     R0,R0,#+16
   \   00000302   0x0E00             LSRS     R0,R0,#+24
   \   00000304   0x9908             LDR      R1,[SP, #+32]
   \   00000306   0x7788             STRB     R0,[R1, #+30]
   \   00000308   0x0020             MOVS     R0,R4
   \   0000030A   0x3028             ADDS     R0,R0,#+40
   \   0000030C   0xC803             LDM      R0,{R0,R1}
   \   0000030E   0x9908             LDR      R1,[SP, #+32]
   \   00000310   0x77C8             STRB     R0,[R1, #+31]
    347              PUT_UINT64_BE( ctx->state[4], output, 32 );
   \   00000312   0x0020             MOVS     R0,R4
   \   00000314   0x3030             ADDS     R0,R0,#+48
   \   00000316   0xC803             LDM      R0,{R0,R1}
   \   00000318   0x0E08             LSRS     R0,R1,#+24
   \   0000031A   0x9908             LDR      R1,[SP, #+32]
   \   0000031C   0x2220             MOVS     R2,#+32
   \   0000031E   0x5488             STRB     R0,[R1, R2]
   \   00000320   0x9A08             LDR      R2,[SP, #+32]
   \   00000322   0x3221             ADDS     R2,R2,#+33
   \   00000324   0x0020             MOVS     R0,R4
   \   00000326   0x3030             ADDS     R0,R0,#+48
   \   00000328   0xC803             LDM      R0,{R0,R1}
   \   0000032A   0x0C08             LSRS     R0,R1,#+16
   \   0000032C   0x7010             STRB     R0,[R2, #+0]
   \   0000032E   0x0020             MOVS     R0,R4
   \   00000330   0x3030             ADDS     R0,R0,#+48
   \   00000332   0xC803             LDM      R0,{R0,R1}
   \   00000334   0x0A08             LSRS     R0,R1,#+8
   \   00000336   0x7050             STRB     R0,[R2, #+1]
   \   00000338   0x0020             MOVS     R0,R4
   \   0000033A   0x3030             ADDS     R0,R0,#+48
   \   0000033C   0xC803             LDM      R0,{R0,R1}
   \   0000033E   0x7091             STRB     R1,[R2, #+2]
   \   00000340   0x0020             MOVS     R0,R4
   \   00000342   0x3030             ADDS     R0,R0,#+48
   \   00000344   0xC803             LDM      R0,{R0,R1}
   \   00000346   0x0E00             LSRS     R0,R0,#+24
   \   00000348   0x70D0             STRB     R0,[R2, #+3]
   \   0000034A   0x0020             MOVS     R0,R4
   \   0000034C   0x3030             ADDS     R0,R0,#+48
   \   0000034E   0xC803             LDM      R0,{R0,R1}
   \   00000350   0x0C00             LSRS     R0,R0,#+16
   \   00000352   0x7110             STRB     R0,[R2, #+4]
   \   00000354   0x0020             MOVS     R0,R4
   \   00000356   0x3030             ADDS     R0,R0,#+48
   \   00000358   0xC803             LDM      R0,{R0,R1}
   \   0000035A   0x0400             LSLS     R0,R0,#+16
   \   0000035C   0x0E00             LSRS     R0,R0,#+24
   \   0000035E   0x7150             STRB     R0,[R2, #+5]
   \   00000360   0x0020             MOVS     R0,R4
   \   00000362   0x3030             ADDS     R0,R0,#+48
   \   00000364   0xC803             LDM      R0,{R0,R1}
   \   00000366   0x7190             STRB     R0,[R2, #+6]
    348              PUT_UINT64_BE( ctx->state[5], output, 40 );
   \   00000368   0x0020             MOVS     R0,R4
   \   0000036A   0x3038             ADDS     R0,R0,#+56
   \   0000036C   0xC803             LDM      R0,{R0,R1}
   \   0000036E   0x0E08             LSRS     R0,R1,#+24
   \   00000370   0x71D0             STRB     R0,[R2, #+7]
   \   00000372   0x0020             MOVS     R0,R4
   \   00000374   0x3038             ADDS     R0,R0,#+56
   \   00000376   0xC803             LDM      R0,{R0,R1}
   \   00000378   0x0C08             LSRS     R0,R1,#+16
   \   0000037A   0x7210             STRB     R0,[R2, #+8]
   \   0000037C   0x0020             MOVS     R0,R4
   \   0000037E   0x3038             ADDS     R0,R0,#+56
   \   00000380   0xC803             LDM      R0,{R0,R1}
   \   00000382   0x0A08             LSRS     R0,R1,#+8
   \   00000384   0x7250             STRB     R0,[R2, #+9]
   \   00000386   0x0020             MOVS     R0,R4
   \   00000388   0x3038             ADDS     R0,R0,#+56
   \   0000038A   0xC803             LDM      R0,{R0,R1}
   \   0000038C   0x7291             STRB     R1,[R2, #+10]
   \   0000038E   0x0020             MOVS     R0,R4
   \   00000390   0x3038             ADDS     R0,R0,#+56
   \   00000392   0xC803             LDM      R0,{R0,R1}
   \   00000394   0x0E00             LSRS     R0,R0,#+24
   \   00000396   0x72D0             STRB     R0,[R2, #+11]
   \   00000398   0x0020             MOVS     R0,R4
   \   0000039A   0x3038             ADDS     R0,R0,#+56
   \   0000039C   0xC803             LDM      R0,{R0,R1}
   \   0000039E   0x0C00             LSRS     R0,R0,#+16
   \   000003A0   0x7310             STRB     R0,[R2, #+12]
   \   000003A2   0x0020             MOVS     R0,R4
   \   000003A4   0x3038             ADDS     R0,R0,#+56
   \   000003A6   0xC803             LDM      R0,{R0,R1}
   \   000003A8   0x0400             LSLS     R0,R0,#+16
   \   000003AA   0x0E00             LSRS     R0,R0,#+24
   \   000003AC   0x7350             STRB     R0,[R2, #+13]
   \   000003AE   0x0020             MOVS     R0,R4
   \   000003B0   0x3038             ADDS     R0,R0,#+56
   \   000003B2   0xC803             LDM      R0,{R0,R1}
   \   000003B4   0x7390             STRB     R0,[R2, #+14]
    349          
    350              if( ctx->is384 == 0 )
   \   000003B6   0x20D0             MOVS     R0,#+208
   \   000003B8   0x5820             LDR      R0,[R4, R0]
   \   000003BA   0x2800             CMP      R0,#+0
   \   000003BC   0xD12D             BNE      ??mbedtls_sha512_finish_11
    351              {
    352                  PUT_UINT64_BE( ctx->state[6], output, 48 );
   \   000003BE   0x6C61             LDR      R1,[R4, #+68]
   \   000003C0   0x0E08             LSRS     R0,R1,#+24
   \   000003C2   0x73D0             STRB     R0,[R2, #+15]
   \   000003C4   0x6C61             LDR      R1,[R4, #+68]
   \   000003C6   0x0C08             LSRS     R0,R1,#+16
   \   000003C8   0x7410             STRB     R0,[R2, #+16]
   \   000003CA   0x6C61             LDR      R1,[R4, #+68]
   \   000003CC   0x0A08             LSRS     R0,R1,#+8
   \   000003CE   0x7450             STRB     R0,[R2, #+17]
   \   000003D0   0x6C61             LDR      R1,[R4, #+68]
   \   000003D2   0x7491             STRB     R1,[R2, #+18]
   \   000003D4   0x6C20             LDR      R0,[R4, #+64]
   \   000003D6   0x0E00             LSRS     R0,R0,#+24
   \   000003D8   0x74D0             STRB     R0,[R2, #+19]
   \   000003DA   0x6C20             LDR      R0,[R4, #+64]
   \   000003DC   0x0C00             LSRS     R0,R0,#+16
   \   000003DE   0x7510             STRB     R0,[R2, #+20]
   \   000003E0   0x6C20             LDR      R0,[R4, #+64]
   \   000003E2   0x0400             LSLS     R0,R0,#+16
   \   000003E4   0x0E00             LSRS     R0,R0,#+24
   \   000003E6   0x7550             STRB     R0,[R2, #+21]
   \   000003E8   0x6C20             LDR      R0,[R4, #+64]
   \   000003EA   0x7590             STRB     R0,[R2, #+22]
    353                  PUT_UINT64_BE( ctx->state[7], output, 56 );
   \   000003EC   0x6CE1             LDR      R1,[R4, #+76]
   \   000003EE   0x0E08             LSRS     R0,R1,#+24
   \   000003F0   0x75D0             STRB     R0,[R2, #+23]
   \   000003F2   0x6CE1             LDR      R1,[R4, #+76]
   \   000003F4   0x0C08             LSRS     R0,R1,#+16
   \   000003F6   0x7610             STRB     R0,[R2, #+24]
   \   000003F8   0x6CE1             LDR      R1,[R4, #+76]
   \   000003FA   0x0A08             LSRS     R0,R1,#+8
   \   000003FC   0x7650             STRB     R0,[R2, #+25]
   \   000003FE   0x6CE1             LDR      R1,[R4, #+76]
   \   00000400   0x7691             STRB     R1,[R2, #+26]
   \   00000402   0x6CA0             LDR      R0,[R4, #+72]
   \   00000404   0x0E00             LSRS     R0,R0,#+24
   \   00000406   0x76D0             STRB     R0,[R2, #+27]
   \   00000408   0x6CA0             LDR      R0,[R4, #+72]
   \   0000040A   0x0C00             LSRS     R0,R0,#+16
   \   0000040C   0x7710             STRB     R0,[R2, #+28]
   \   0000040E   0x6CA0             LDR      R0,[R4, #+72]
   \   00000410   0x0400             LSLS     R0,R0,#+16
   \   00000412   0x0E00             LSRS     R0,R0,#+24
   \   00000414   0x7750             STRB     R0,[R2, #+29]
   \   00000416   0x6CA0             LDR      R0,[R4, #+72]
   \   00000418   0x7790             STRB     R0,[R2, #+30]
    354              }
    355          }
   \                     ??mbedtls_sha512_finish_11: (+1)
   \   0000041A   0xB009             ADD      SP,SP,#+36
   \   0000041C   0xBDF0             POP      {R4-R7,PC}       ;; return
    356          
    357          #endif /* !MBEDTLS_SHA512_ALT */
    358          
    359          /*
    360           * output = SHA-512( input buffer )
    361           */

   \                                 In section .text, align 2, keep-with-next
    362          void mbedtls_sha512( const unsigned char *input, size_t ilen,
    363                       unsigned char output[64], int is384 )
    364          {
   \                     mbedtls_sha512: (+1)
   \   00000000   0xB5F4             PUSH     {R2,R4-R7,LR}
   \   00000002   0xB0B8             SUB      SP,SP,#+224
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x001E             MOVS     R6,R3
    365              mbedtls_sha512_context ctx;
    366          
    367              mbedtls_sha512_init( &ctx );
   \   0000000A   0x21D8             MOVS     R1,#+216
   \   0000000C   0xA802             ADD      R0,SP,#+8
   \   0000000E   0x.... 0x....      BL       __aeabi_memclr4
    368              mbedtls_sha512_starts( &ctx, is384 );
   \   00000012   0x0031             MOVS     R1,R6
   \   00000014   0xA802             ADD      R0,SP,#+8
   \   00000016   0x.... 0x....      BL       mbedtls_sha512_starts
    369              mbedtls_sha512_update( &ctx, input, ilen );
   \   0000001A   0x2C00             CMP      R4,#+0
   \   0000001C   0xD043             BEQ      ??mbedtls_sha512_0
   \   0000001E   0xA802             ADD      R0,SP,#+8
   \   00000020   0xC803             LDM      R0,{R0,R1}
   \   00000022   0x0646             LSLS     R6,R0,#+25
   \   00000024   0x0E76             LSRS     R6,R6,#+25
   \   00000026   0x2080             MOVS     R0,#+128
   \   00000028   0x1B80             SUBS     R0,R0,R6
   \   0000002A   0x9000             STR      R0,[SP, #+0]
   \   0000002C   0x2300             MOVS     R3,#+0
   \   0000002E   0xA802             ADD      R0,SP,#+8
   \   00000030   0xC803             LDM      R0,{R0,R1}
   \   00000032   0x1900             ADDS     R0,R0,R4
   \   00000034   0x4159             ADCS     R1,R1,R3
   \   00000036   0xAF02             ADD      R7,SP,#+8
   \   00000038   0xC703             STM      R7!,{R0,R1}
   \   0000003A   0xA802             ADD      R0,SP,#+8
   \   0000003C   0xC803             LDM      R0,{R0,R1}
   \   0000003E   0x4299             CMP      R1,R3
   \   00000040   0xD80A             BHI      ??mbedtls_sha512_1
   \   00000042   0x42A0             CMP      R0,R4
   \   00000044   0xD208             BCS      ??mbedtls_sha512_1
   \   00000046   0xA802             ADD      R0,SP,#+8
   \   00000048   0x3008             ADDS     R0,R0,#+8
   \   0000004A   0xC803             LDM      R0,{R0,R1}
   \   0000004C   0x2200             MOVS     R2,#+0
   \   0000004E   0x1C40             ADDS     R0,R0,#+1
   \   00000050   0x4151             ADCS     R1,R1,R2
   \   00000052   0xAA02             ADD      R2,SP,#+8
   \   00000054   0x3208             ADDS     R2,R2,#+8
   \   00000056   0xC203             STM      R2!,{R0,R1}
   \                     ??mbedtls_sha512_1: (+1)
   \   00000058   0x2E00             CMP      R6,#+0
   \   0000005A   0xD019             BEQ      ??mbedtls_sha512_2
   \   0000005C   0x9800             LDR      R0,[SP, #+0]
   \   0000005E   0x4284             CMP      R4,R0
   \   00000060   0xD316             BCC      ??mbedtls_sha512_2
   \   00000062   0xAF02             ADD      R7,SP,#+8
   \   00000064   0x4602             MOV      R2,R0
   \   00000066   0x0029             MOVS     R1,R5
   \   00000068   0x19B8             ADDS     R0,R7,R6
   \   0000006A   0x3050             ADDS     R0,R0,#+80
   \   0000006C   0x.... 0x....      BL       __aeabi_memcpy
   \   00000070   0x0039             MOVS     R1,R7
   \   00000072   0x3150             ADDS     R1,R1,#+80
   \   00000074   0xA802             ADD      R0,SP,#+8
   \   00000076   0x.... 0x....      BL       mbedtls_sha512_process
   \   0000007A   0x9800             LDR      R0,[SP, #+0]
   \   0000007C   0x182D             ADDS     R5,R5,R0
   \   0000007E   0x1A24             SUBS     R4,R4,R0
   \   00000080   0x2600             MOVS     R6,#+0
   \   00000082   0xE005             B        ??mbedtls_sha512_2
   \                     ??mbedtls_sha512_3: (+1)
   \   00000084   0x0029             MOVS     R1,R5
   \   00000086   0xA802             ADD      R0,SP,#+8
   \   00000088   0x.... 0x....      BL       mbedtls_sha512_process
   \   0000008C   0x3580             ADDS     R5,R5,#+128
   \   0000008E   0x3C80             SUBS     R4,R4,#+128
   \                     ??mbedtls_sha512_2: (+1)
   \   00000090   0x2C80             CMP      R4,#+128
   \   00000092   0xD2F7             BCS      ??mbedtls_sha512_3
   \   00000094   0x2C00             CMP      R4,#+0
   \   00000096   0xD006             BEQ      ??mbedtls_sha512_0
   \   00000098   0x0022             MOVS     R2,R4
   \   0000009A   0x0029             MOVS     R1,R5
   \   0000009C   0xA802             ADD      R0,SP,#+8
   \   0000009E   0x1980             ADDS     R0,R0,R6
   \   000000A0   0x3050             ADDS     R0,R0,#+80
   \   000000A2   0x.... 0x....      BL       __aeabi_memcpy
    370              mbedtls_sha512_finish( &ctx, output );
   \                     ??mbedtls_sha512_0: (+1)
   \   000000A6   0x9938             LDR      R1,[SP, #+224]
   \   000000A8   0xA802             ADD      R0,SP,#+8
   \   000000AA   0x.... 0x....      BL       mbedtls_sha512_finish
    371              mbedtls_sha512_free( &ctx );
    372          }
   \   000000AE   0xB039             ADD      SP,SP,#+228
   \   000000B0   0xBDF0             POP      {R4-R7,PC}       ;; return
    373          
    374          #if defined(MBEDTLS_SELF_TEST)
    375          
    376          /*
    377           * FIPS-180-2 test vectors
    378           */

   \                                 In section .rodata, align 4, keep-with-next
    379          static const unsigned char sha512_test_buf[3][113] =
   \                     sha512_test_buf:
   \   00000000   0x61 0x62          DC8 "abc"
   \              0x63 0x00    
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000014   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000024   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000034   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000044   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000054   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000064   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000071   0x61 0x62          DC8 61H, 62H, 63H, 64H, 65H, 66H, 67H, 68H
   \              0x63 0x64    
   \              0x65 0x66    
   \              0x67 0x68    
   \   00000079   0x62 0x63          DC8 62H, 63H, 64H, 65H, 66H, 67H, 68H, 69H
   \              0x64 0x65    
   \              0x66 0x67    
   \              0x68 0x69    
   \   00000081   0x63 0x64          DC8 63H, 64H, 65H, 66H, 67H, 68H, 69H, 6AH
   \              0x65 0x66    
   \              0x67 0x68    
   \              0x69 0x6A    
   \   00000089   0x64 0x65          DC8 64H, 65H, 66H, 67H, 68H, 69H, 6AH, 6BH
   \              0x66 0x67    
   \              0x68 0x69    
   \              0x6A 0x6B    
   \   00000091   0x65 0x66          DC8 65H, 66H, 67H, 68H, 69H, 6AH, 6BH, 6CH
   \              0x67 0x68    
   \              0x69 0x6A    
   \              0x6B 0x6C    
   \   00000099   0x66 0x67          DC8 66H, 67H, 68H, 69H, 6AH, 6BH, 6CH, 6DH
   \              0x68 0x69    
   \              0x6A 0x6B    
   \              0x6C 0x6D    
   \   000000A1   0x67 0x68          DC8 67H, 68H, 69H, 6AH, 6BH, 6CH, 6DH, 6EH
   \              0x69 0x6A    
   \              0x6B 0x6C    
   \              0x6D 0x6E    
   \   000000A9   0x68 0x69          DC8 68H, 69H, 6AH, 6BH, 6CH, 6DH, 6EH, 6FH
   \              0x6A 0x6B    
   \              0x6C 0x6D    
   \              0x6E 0x6F    
   \   000000B1   0x69 0x6A          DC8 69H, 6AH, 6BH, 6CH, 6DH, 6EH, 6FH, 70H
   \              0x6B 0x6C    
   \              0x6D 0x6E    
   \              0x6F 0x70    
   \   000000B9   0x6A 0x6B          DC8 6AH, 6BH, 6CH, 6DH, 6EH, 6FH, 70H, 71H
   \              0x6C 0x6D    
   \              0x6E 0x6F    
   \              0x70 0x71    
   \   000000C1   0x6B 0x6C          DC8 6BH, 6CH, 6DH, 6EH, 6FH, 70H, 71H, 72H
   \              0x6D 0x6E    
   \              0x6F 0x70    
   \              0x71 0x72    
   \   000000C9   0x6C 0x6D          DC8 6CH, 6DH, 6EH, 6FH, 70H, 71H, 72H, 73H
   \              0x6E 0x6F    
   \              0x70 0x71    
   \              0x72 0x73    
   \   000000D1   0x6D 0x6E          DC8 6DH, 6EH, 6FH, 70H, 71H, 72H, 73H, 74H
   \              0x6F 0x70    
   \              0x71 0x72    
   \              0x73 0x74    
   \   000000D9   0x6E 0x6F          DC8 6EH, 6FH, 70H, 71H, 72H, 73H, 74H, 75H
   \              0x70 0x71    
   \              0x72 0x73    
   \              0x74 0x75    
   \   000000E1   0x00               DC8 0
   \   000000E2   0x00               DC8 ""
   \   000000E3   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000F3   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000103   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000113   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000123   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000133   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000143   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
    380          {
    381              { "abc" },
    382              { "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn"
    383                "hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu" },
    384              { "" }
    385          };
    386          

   \                                 In section .rodata, align 4, keep-with-next
    387          static const int sha512_test_buflen[3] =
   \                     sha512_test_buflen:
   \   00000000   0x00000003         DC32 3, 112, 1000
   \              0x00000070   
   \              0x000003E8   
    388          {
    389              3, 112, 1000
    390          };
    391          

   \                                 In section .rodata, align 4, keep-with-next
    392          static const unsigned char sha512_test_sum[6][64] =
   \                     sha512_test_sum:
   \   00000000   0xCB 0x00          DC8 203, 0, 117, 63, 69, 163, 94, 139, 181, 160, 61, 105, 154, 198, 80
   \              0x75 0x3F    
   \              0x45 0xA3    
   \              0x5E 0x8B    
   \              0xB5 0xA0    
   \              0x3D 0x69    
   \              0x9A 0xC6    
   \              0x50         
   \   0000000F   0x07 0x27          DC8 7, 39, 44, 50, 171, 14, 222, 209, 99, 26, 139, 96, 90, 67, 255, 91
   \              0x2C 0x32    
   \              0xAB 0x0E    
   \              0xDE 0xD1    
   \              0x63 0x1A    
   \              0x8B 0x60    
   \              0x5A 0x43    
   \              0xFF 0x5B    
   \   0000001F   0xED 0x80          DC8 237, 128, 134, 7, 43, 161, 231, 204, 35, 88, 186, 236, 161, 52, 200
   \              0x86 0x07    
   \              0x2B 0xA1    
   \              0xE7 0xCC    
   \              0x23 0x58    
   \              0xBA 0xEC    
   \              0xA1 0x34    
   \              0xC8         
   \   0000002E   0x25 0xA7          DC8 37, 167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 51, 12
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x09 0x33    
   \              0x0C         
   \   00000043   0x33 0xF7          DC8 51, 247, 17, 71, 232, 61, 25, 47, 199, 130, 205, 27, 71, 83, 17, 27
   \              0x11 0x47    
   \              0xE8 0x3D    
   \              0x19 0x2F    
   \              0xC7 0x82    
   \              0xCD 0x1B    
   \              0x47 0x53    
   \              0x11 0x1B    
   \   00000053   0x17 0x3B          DC8 23, 59, 59, 5, 210, 47, 160, 128, 134, 227, 176, 247, 18, 252, 199
   \              0x3B 0x05    
   \              0xD2 0x2F    
   \              0xA0 0x80    
   \              0x86 0xE3    
   \              0xB0 0xF7    
   \              0x12 0xFC    
   \              0xC7         
   \   00000062   0xC7 0x1A          DC8 199, 26, 85, 126, 45, 185, 102, 195, 233, 250, 145, 116, 96, 57, 0
   \              0x55 0x7E    
   \              0x2D 0xB9    
   \              0x66 0xC3    
   \              0xE9 0xFA    
   \              0x91 0x74    
   \              0x60 0x39    
   \              0x00         
   \   00000071   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 14, 24, 9, 113
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x9D    
   \              0x0E 0x18    
   \              0x09 0x71    
   \   00000085   0x64 0x74          DC8 100, 116, 203, 8, 110, 131, 78, 49, 10, 74, 28, 237, 20, 158, 156
   \              0xCB 0x08    
   \              0x6E 0x83    
   \              0x4E 0x31    
   \              0x0A 0x4A    
   \              0x1C 0xED    
   \              0x14 0x9E    
   \              0x9C         
   \   00000094   0x00 0xF2          DC8 0, 242, 72, 82, 121, 114, 206, 197, 112, 76, 42, 91, 7, 184, 179
   \              0x48 0x52    
   \              0x79 0x72    
   \              0xCE 0xC5    
   \              0x70 0x4C    
   \              0x2A 0x5B    
   \              0x07 0xB8    
   \              0xB3         
   \   000000A3   0xDC 0x38          DC8 220, 56, 236, 196, 235, 174, 151, 221, 216, 127, 61, 137, 133, 0, 0
   \              0xEC 0xC4    
   \              0xEB 0xAE    
   \              0x97 0xDD    
   \              0xD8 0x7F    
   \              0x3D 0x89    
   \              0x85 0x00    
   \              0x00         
   \   000000B2   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221, 175, 53, 161, 147
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xDD 0xAF    
   \              0x35 0xA1    
   \              0x93         
   \   000000C5   0x61 0x7A          DC8 97, 122, 186, 204, 65, 115, 73, 174, 32, 65, 49, 18, 230, 250, 78
   \              0xBA 0xCC    
   \              0x41 0x73    
   \              0x49 0xAE    
   \              0x20 0x41    
   \              0x31 0x12    
   \              0xE6 0xFA    
   \              0x4E         
   \   000000D4   0x89 0xA9          DC8 137, 169, 126, 162, 10, 158, 238, 230, 75, 85, 211, 154, 33, 146
   \              0x7E 0xA2    
   \              0x0A 0x9E    
   \              0xEE 0xE6    
   \              0x4B 0x55    
   \              0xD3 0x9A    
   \              0x21 0x92    
   \   000000E2   0x99 0x2A          DC8 153, 42, 39, 79, 193, 168, 54, 186, 60, 35, 163, 254, 235, 189, 69
   \              0x27 0x4F    
   \              0xC1 0xA8    
   \              0x36 0xBA    
   \              0x3C 0x23    
   \              0xA3 0xFE    
   \              0xEB 0xBD    
   \              0x45         
   \   000000F1   0x4D 0x44          DC8 77, 68, 35, 100, 60, 232, 14, 42, 154, 201, 79, 165, 76, 164, 159
   \              0x23 0x64    
   \              0x3C 0xE8    
   \              0x0E 0x2A    
   \              0x9A 0xC9    
   \              0x4F 0xA5    
   \              0x4C 0xA4    
   \              0x9F         
   \   00000100   0x8E 0x95          DC8 142, 149, 155, 117, 218, 227, 19, 218, 140, 244, 247, 40, 20, 252
   \              0x9B 0x75    
   \              0xDA 0xE3    
   \              0x13 0xDA    
   \              0x8C 0xF4    
   \              0xF7 0x28    
   \              0x14 0xFC    
   \   0000010E   0x14 0x3F          DC8 20, 63, 143, 119, 121, 198, 235, 159, 127, 161, 114, 153, 174, 173
   \              0x8F 0x77    
   \              0x79 0xC6    
   \              0xEB 0x9F    
   \              0x7F 0xA1    
   \              0x72 0x99    
   \              0xAE 0xAD    
   \   0000011C   0xB6 0x88          DC8 182, 136, 144, 24, 80, 29, 40, 158, 73, 0, 247, 228, 51, 27, 153
   \              0x90 0x18    
   \              0x50 0x1D    
   \              0x28 0x9E    
   \              0x49 0x00    
   \              0xF7 0xE4    
   \              0x33 0x1B    
   \              0x99         
   \   0000012B   0xDE 0xC4          DC8 222, 196, 181, 67, 58, 199, 211, 41, 238, 182, 221, 38, 84, 94, 150
   \              0xB5 0x43    
   \              0x3A 0xC7    
   \              0xD3 0x29    
   \              0xEE 0xB6    
   \              0xDD 0x26    
   \              0x54 0x5E    
   \              0x96         
   \   0000013A   0xE5 0x5B          DC8 229, 91, 135, 75, 233, 9, 231, 24, 72, 61, 12, 231, 105, 100, 78
   \              0x87 0x4B    
   \              0xE9 0x09    
   \              0xE7 0x18    
   \              0x48 0x3D    
   \              0x0C 0xE7    
   \              0x69 0x64    
   \              0x4E         
   \   00000149   0x2E 0x42          DC8 46, 66, 199, 188, 21, 180, 99, 142, 31, 152, 177, 59, 32, 68, 40
   \              0xC7 0xBC    
   \              0x15 0xB4    
   \              0x63 0x8E    
   \              0x1F 0x98    
   \              0xB1 0x3B    
   \              0x20 0x44    
   \              0x28         
   \   00000158   0x56 0x32          DC8 86, 50, 168, 3, 175, 169, 115, 235, 222, 15, 242, 68, 135, 126, 166
   \              0xA8 0x03    
   \              0xAF 0xA9    
   \              0x73 0xEB    
   \              0xDE 0x0F    
   \              0xF2 0x44    
   \              0x87 0x7E    
   \              0xA6         
   \   00000167   0x0A 0x4C          DC8 10, 76, 176, 67, 44, 229, 119, 195, 27, 235, 0, 156, 92, 44, 73
   \              0xB0 0x43    
   \              0x2C 0xE5    
   \              0x77 0xC3    
   \              0x1B 0xEB    
   \              0x00 0x9C    
   \              0x5C 0x2C    
   \              0x49         
   \   00000176   0xAA 0x2E          DC8 170, 46, 78, 173, 178, 23, 173, 140, 192, 155
   \              0x4E 0xAD    
   \              0xB2 0x17    
   \              0xAD 0x8C    
   \              0xC0 0x9B    
    393          {
    394              /*
    395               * SHA-384 test vectors
    396               */
    397              { 0xCB, 0x00, 0x75, 0x3F, 0x45, 0xA3, 0x5E, 0x8B,
    398                0xB5, 0xA0, 0x3D, 0x69, 0x9A, 0xC6, 0x50, 0x07,
    399                0x27, 0x2C, 0x32, 0xAB, 0x0E, 0xDE, 0xD1, 0x63,
    400                0x1A, 0x8B, 0x60, 0x5A, 0x43, 0xFF, 0x5B, 0xED,
    401                0x80, 0x86, 0x07, 0x2B, 0xA1, 0xE7, 0xCC, 0x23,
    402                0x58, 0xBA, 0xEC, 0xA1, 0x34, 0xC8, 0x25, 0xA7 },
    403              { 0x09, 0x33, 0x0C, 0x33, 0xF7, 0x11, 0x47, 0xE8,
    404                0x3D, 0x19, 0x2F, 0xC7, 0x82, 0xCD, 0x1B, 0x47,
    405                0x53, 0x11, 0x1B, 0x17, 0x3B, 0x3B, 0x05, 0xD2,
    406                0x2F, 0xA0, 0x80, 0x86, 0xE3, 0xB0, 0xF7, 0x12,
    407                0xFC, 0xC7, 0xC7, 0x1A, 0x55, 0x7E, 0x2D, 0xB9,
    408                0x66, 0xC3, 0xE9, 0xFA, 0x91, 0x74, 0x60, 0x39 },
    409              { 0x9D, 0x0E, 0x18, 0x09, 0x71, 0x64, 0x74, 0xCB,
    410                0x08, 0x6E, 0x83, 0x4E, 0x31, 0x0A, 0x4A, 0x1C,
    411                0xED, 0x14, 0x9E, 0x9C, 0x00, 0xF2, 0x48, 0x52,
    412                0x79, 0x72, 0xCE, 0xC5, 0x70, 0x4C, 0x2A, 0x5B,
    413                0x07, 0xB8, 0xB3, 0xDC, 0x38, 0xEC, 0xC4, 0xEB,
    414                0xAE, 0x97, 0xDD, 0xD8, 0x7F, 0x3D, 0x89, 0x85 },
    415          
    416              /*
    417               * SHA-512 test vectors
    418               */
    419              { 0xDD, 0xAF, 0x35, 0xA1, 0x93, 0x61, 0x7A, 0xBA,
    420                0xCC, 0x41, 0x73, 0x49, 0xAE, 0x20, 0x41, 0x31,
    421                0x12, 0xE6, 0xFA, 0x4E, 0x89, 0xA9, 0x7E, 0xA2,
    422                0x0A, 0x9E, 0xEE, 0xE6, 0x4B, 0x55, 0xD3, 0x9A,
    423                0x21, 0x92, 0x99, 0x2A, 0x27, 0x4F, 0xC1, 0xA8,
    424                0x36, 0xBA, 0x3C, 0x23, 0xA3, 0xFE, 0xEB, 0xBD,
    425                0x45, 0x4D, 0x44, 0x23, 0x64, 0x3C, 0xE8, 0x0E,
    426                0x2A, 0x9A, 0xC9, 0x4F, 0xA5, 0x4C, 0xA4, 0x9F },
    427              { 0x8E, 0x95, 0x9B, 0x75, 0xDA, 0xE3, 0x13, 0xDA,
    428                0x8C, 0xF4, 0xF7, 0x28, 0x14, 0xFC, 0x14, 0x3F,
    429                0x8F, 0x77, 0x79, 0xC6, 0xEB, 0x9F, 0x7F, 0xA1,
    430                0x72, 0x99, 0xAE, 0xAD, 0xB6, 0x88, 0x90, 0x18,
    431                0x50, 0x1D, 0x28, 0x9E, 0x49, 0x00, 0xF7, 0xE4,
    432                0x33, 0x1B, 0x99, 0xDE, 0xC4, 0xB5, 0x43, 0x3A,
    433                0xC7, 0xD3, 0x29, 0xEE, 0xB6, 0xDD, 0x26, 0x54,
    434                0x5E, 0x96, 0xE5, 0x5B, 0x87, 0x4B, 0xE9, 0x09 },
    435              { 0xE7, 0x18, 0x48, 0x3D, 0x0C, 0xE7, 0x69, 0x64,
    436                0x4E, 0x2E, 0x42, 0xC7, 0xBC, 0x15, 0xB4, 0x63,
    437                0x8E, 0x1F, 0x98, 0xB1, 0x3B, 0x20, 0x44, 0x28,
    438                0x56, 0x32, 0xA8, 0x03, 0xAF, 0xA9, 0x73, 0xEB,
    439                0xDE, 0x0F, 0xF2, 0x44, 0x87, 0x7E, 0xA6, 0x0A,
    440                0x4C, 0xB0, 0x43, 0x2C, 0xE5, 0x77, 0xC3, 0x1B,
    441                0xEB, 0x00, 0x9C, 0x5C, 0x2C, 0x49, 0xAA, 0x2E,
    442                0x4E, 0xAD, 0xB2, 0x17, 0xAD, 0x8C, 0xC0, 0x9B }
    443          };
    444          
    445          /*
    446           * Checkup routine
    447           */

   \                                 In section .text, align 4, keep-with-next
    448          int mbedtls_sha512_self_test( int verbose )
    449          {
   \                     mbedtls_sha512_self_test: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB0CC             SUB      SP,SP,#+304
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9005             STR      R0,[SP, #+20]
    450              int i, j, k, buflen, ret = 0;
    451              unsigned char *buf;
    452              unsigned char sha512sum[64];
    453              mbedtls_sha512_context ctx;
    454          
    455              buf = mbedtls_calloc( 1024, sizeof(unsigned char) );
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x0288             LSLS     R0,R1,#+10
   \   0000000C   0x.... 0x....      BL       calloc
   \   00000010   0x9003             STR      R0,[SP, #+12]
    456              if( NULL == buf )
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD107             BNE      ??mbedtls_sha512_self_test_0
    457              {
    458                  if( verbose != 0 )
   \   00000016   0x984C             LDR      R0,[SP, #+304]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD002             BEQ      ??mbedtls_sha512_self_test_1
    459                      mbedtls_printf( "Buffer allocation failed\n" );
   \   0000001C   0x....             ADR.N    R0,?_0
   \   0000001E   0x.... 0x....      BL       printf
    460          
    461                  return( 1 );
   \                     ??mbedtls_sha512_self_test_1: (+1)
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xE0BB             B        ??mbedtls_sha512_self_test_2
    462              }
    463          
    464              mbedtls_sha512_init( &ctx );
   \                     ??mbedtls_sha512_self_test_0: (+1)
   \   00000026   0x21D8             MOVS     R1,#+216
   \   00000028   0xA806             ADD      R0,SP,#+24
   \   0000002A   0x.... 0x....      BL       __aeabi_memclr4
    465          
    466              for( i = 0; i < 6; i++ )
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x9000             STR      R0,[SP, #+0]
   \   00000032   0x....             LDR      R0,??DataTable13
   \   00000034   0x9004             STR      R0,[SP, #+16]
   \   00000036   0x2400             MOVS     R4,#+0
   \   00000038   0xE006             B        ??mbedtls_sha512_self_test_3
    467              {
    468                  j = i % 3;
   \                     ??mbedtls_sha512_self_test_4: (+1)
   \   0000003A   0x2103             MOVS     R1,#+3
   \   0000003C   0x.... 0x....      BL       __aeabi_idivmod
   \   00000040   0x000C             MOVS     R4,R1
    469                  k = i < 3;
   \   00000042   0x9800             LDR      R0,[SP, #+0]
   \   00000044   0x2803             CMP      R0,#+3
   \   00000046   0xDA01             BGE      ??mbedtls_sha512_self_test_5
   \                     ??mbedtls_sha512_self_test_3: (+1)
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0xE000             B        ??mbedtls_sha512_self_test_6
   \                     ??mbedtls_sha512_self_test_5: (+1)
   \   0000004C   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_sha512_self_test_6: (+1)
   \   0000004E   0x9002             STR      R0,[SP, #+8]
    470          
    471                  if( verbose != 0 )
   \   00000050   0x984C             LDR      R0,[SP, #+304]
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD009             BEQ      ??mbedtls_sha512_self_test_7
    472                      mbedtls_printf( "  SHA-%d test #%d: ", 512 - k * 128, j + 1 );
   \   00000056   0x1C62             ADDS     R2,R4,#+1
   \   00000058   0x2080             MOVS     R0,#+128
   \   0000005A   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   0000005C   0x9902             LDR      R1,[SP, #+8]
   \   0000005E   0x01C9             LSLS     R1,R1,#+7
   \   00000060   0x1A41             SUBS     R1,R0,R1
   \   00000062   0xBF00             Nop      
   \   00000064   0x....             ADR.N    R0,?_1
   \   00000066   0x.... 0x....      BL       printf
    473          
    474                  mbedtls_sha512_starts( &ctx, k );
   \                     ??mbedtls_sha512_self_test_7: (+1)
   \   0000006A   0x9902             LDR      R1,[SP, #+8]
   \   0000006C   0xA806             ADD      R0,SP,#+24
   \   0000006E   0x.... 0x....      BL       mbedtls_sha512_starts
    475          
    476                  if( j == 2 )
   \   00000072   0x2C02             CMP      R4,#+2
   \   00000074   0xD154             BNE      ??mbedtls_sha512_self_test_8
    477                  {
    478                      memset( buf, 'a', buflen = 1000 );
   \   00000076   0x2261             MOVS     R2,#+97
   \   00000078   0x21FA             MOVS     R1,#+250
   \   0000007A   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   0000007C   0x9803             LDR      R0,[SP, #+12]
   \   0000007E   0x.... 0x....      BL       __aeabi_memset
    479          
    480                      for( j = 0; j < 1000; j++ )
   \   00000082   0x27FA             MOVS     R7,#+250
   \   00000084   0x00BF             LSLS     R7,R7,#+2        ;; #+1000
    481                          mbedtls_sha512_update( &ctx, buf, buflen );
   \                     ??mbedtls_sha512_self_test_9: (+1)
   \   00000086   0x25FA             MOVS     R5,#+250
   \   00000088   0x00AD             LSLS     R5,R5,#+2        ;; #+1000
   \   0000008A   0x9C03             LDR      R4,[SP, #+12]
   \   0000008C   0xA806             ADD      R0,SP,#+24
   \   0000008E   0xC803             LDM      R0,{R0,R1}
   \   00000090   0x0646             LSLS     R6,R0,#+25
   \   00000092   0x0E76             LSRS     R6,R6,#+25
   \   00000094   0x2080             MOVS     R0,#+128
   \   00000096   0x1B80             SUBS     R0,R0,R6
   \   00000098   0x9001             STR      R0,[SP, #+4]
   \   0000009A   0xA806             ADD      R0,SP,#+24
   \   0000009C   0xC80C             LDM      R0!,{R2,R3}
   \   0000009E   0x2100             MOVS     R1,#+0
   \   000000A0   0x18A8             ADDS     R0,R5,R2
   \   000000A2   0x4159             ADCS     R1,R1,R3
   \   000000A4   0xAA06             ADD      R2,SP,#+24
   \   000000A6   0xC203             STM      R2!,{R0,R1}
   \   000000A8   0xA806             ADD      R0,SP,#+24
   \   000000AA   0xC803             LDM      R0,{R0,R1}
   \   000000AC   0x2300             MOVS     R3,#+0
   \   000000AE   0x4299             CMP      R1,R3
   \   000000B0   0xD80A             BHI      ??mbedtls_sha512_self_test_10
   \   000000B2   0x42A8             CMP      R0,R5
   \   000000B4   0xD208             BCS      ??mbedtls_sha512_self_test_10
   \   000000B6   0xA806             ADD      R0,SP,#+24
   \   000000B8   0x3008             ADDS     R0,R0,#+8
   \   000000BA   0xC803             LDM      R0,{R0,R1}
   \   000000BC   0x2200             MOVS     R2,#+0
   \   000000BE   0x1C40             ADDS     R0,R0,#+1
   \   000000C0   0x4151             ADCS     R1,R1,R2
   \   000000C2   0xAA06             ADD      R2,SP,#+24
   \   000000C4   0x3208             ADDS     R2,R2,#+8
   \   000000C6   0xC203             STM      R2!,{R0,R1}
   \                     ??mbedtls_sha512_self_test_10: (+1)
   \   000000C8   0x2E00             CMP      R6,#+0
   \   000000CA   0xD016             BEQ      ??mbedtls_sha512_self_test_11
   \   000000CC   0x9801             LDR      R0,[SP, #+4]
   \   000000CE   0x1C69             ADDS     R1,R5,#+1
   \   000000D0   0x4288             CMP      R0,R1
   \   000000D2   0xD212             BCS      ??mbedtls_sha512_self_test_11
   \   000000D4   0x4602             MOV      R2,R0
   \   000000D6   0x0021             MOVS     R1,R4
   \   000000D8   0xA806             ADD      R0,SP,#+24
   \   000000DA   0x1980             ADDS     R0,R0,R6
   \   000000DC   0x3050             ADDS     R0,R0,#+80
   \   000000DE   0x.... 0x....      BL       __aeabi_memcpy
   \   000000E2   0xA806             ADD      R0,SP,#+24
   \   000000E4   0x0001             MOVS     R1,R0
   \   000000E6   0x3150             ADDS     R1,R1,#+80
   \   000000E8   0x.... 0x....      BL       mbedtls_sha512_process
   \   000000EC   0x9801             LDR      R0,[SP, #+4]
   \   000000EE   0x1824             ADDS     R4,R4,R0
   \   000000F0   0x9901             LDR      R1,[SP, #+4]
   \   000000F2   0x1A6D             SUBS     R5,R5,R1
   \   000000F4   0x2600             MOVS     R6,#+0
   \                     ??mbedtls_sha512_self_test_12: (+1)
   \   000000F6   0x2D80             CMP      R5,#+128
   \   000000F8   0xD306             BCC      ??mbedtls_sha512_self_test_13
   \                     ??mbedtls_sha512_self_test_11: (+1)
   \   000000FA   0x0021             MOVS     R1,R4
   \   000000FC   0xA806             ADD      R0,SP,#+24
   \   000000FE   0x.... 0x....      BL       mbedtls_sha512_process
   \   00000102   0x3480             ADDS     R4,R4,#+128
   \   00000104   0x3D80             SUBS     R5,R5,#+128
   \   00000106   0xE7F6             B        ??mbedtls_sha512_self_test_12
   \                     ??mbedtls_sha512_self_test_13: (+1)
   \   00000108   0x2D00             CMP      R5,#+0
   \   0000010A   0xD006             BEQ      ??mbedtls_sha512_self_test_14
   \   0000010C   0x002A             MOVS     R2,R5
   \   0000010E   0x0021             MOVS     R1,R4
   \   00000110   0xA806             ADD      R0,SP,#+24
   \   00000112   0x1980             ADDS     R0,R0,R6
   \   00000114   0x3050             ADDS     R0,R0,#+80
   \   00000116   0x.... 0x....      BL       __aeabi_memcpy
   \                     ??mbedtls_sha512_self_test_14: (+1)
   \   0000011A   0x1E7F             SUBS     R7,R7,#+1
   \   0000011C   0xD00A             BEQ      ??mbedtls_sha512_self_test_15
   \   0000011E   0xE7B2             B        ??mbedtls_sha512_self_test_9
    482                  }
    483                  else
    484                      mbedtls_sha512_update( &ctx, sha512_test_buf[j],
    485                                           sha512_test_buflen[j] );
   \                     ??mbedtls_sha512_self_test_8: (+1)
   \   00000120   0x....             LDR      R0,??DataTable13_1
   \   00000122   0x00A1             LSLS     R1,R4,#+2
   \   00000124   0x5842             LDR      R2,[R0, R1]
   \   00000126   0x....             LDR      R0,??DataTable13_2
   \   00000128   0x2171             MOVS     R1,#+113
   \   0000012A   0x434C             MULS     R4,R1,R4
   \   0000012C   0x1901             ADDS     R1,R0,R4
   \   0000012E   0xA806             ADD      R0,SP,#+24
   \   00000130   0x.... 0x....      BL       mbedtls_sha512_update
    486          
    487                  mbedtls_sha512_finish( &ctx, sha512sum );
   \                     ??mbedtls_sha512_self_test_15: (+1)
   \   00000134   0xA93C             ADD      R1,SP,#+240
   \   00000136   0xA806             ADD      R0,SP,#+24
   \   00000138   0x.... 0x....      BL       mbedtls_sha512_finish
    488          
    489                  if( memcmp( sha512sum, sha512_test_sum[i], 64 - k * 16 ) != 0 )
   \   0000013C   0x2040             MOVS     R0,#+64
   \   0000013E   0x9902             LDR      R1,[SP, #+8]
   \   00000140   0x0109             LSLS     R1,R1,#+4
   \   00000142   0x1A42             SUBS     R2,R0,R1
   \   00000144   0x9904             LDR      R1,[SP, #+16]
   \   00000146   0xA83C             ADD      R0,SP,#+240
   \   00000148   0x.... 0x....      BL       memcmp
   \   0000014C   0x2800             CMP      R0,#+0
   \   0000014E   0x984C             LDR      R0,[SP, #+304]
   \   00000150   0xD008             BEQ      ??mbedtls_sha512_self_test_16
    490                  {
    491                      if( verbose != 0 )
   \   00000152   0x2800             CMP      R0,#+0
   \   00000154   0xD003             BEQ      ??mbedtls_sha512_self_test_17
    492                          mbedtls_printf( "failed\n" );
   \   00000156   0xBF00             Nop      
   \   00000158   0x....             ADR.N    R0,?_2
   \   0000015A   0x.... 0x....      BL       printf
    493          
    494                      ret = 1;
   \                     ??mbedtls_sha512_self_test_17: (+1)
   \   0000015E   0x2001             MOVS     R0,#+1
   \   00000160   0x9005             STR      R0,[SP, #+20]
    495                      goto exit;
   \   00000162   0xE014             B        ??mbedtls_sha512_self_test_18
    496                  }
    497          
    498                  if( verbose != 0 )
   \                     ??mbedtls_sha512_self_test_16: (+1)
   \   00000164   0x2800             CMP      R0,#+0
   \   00000166   0xD002             BEQ      ??mbedtls_sha512_self_test_19
    499                      mbedtls_printf( "passed\n" );
   \   00000168   0x....             ADR.N    R0,?_3
   \   0000016A   0x.... 0x....      BL       printf
    500              }
   \                     ??mbedtls_sha512_self_test_19: (+1)
   \   0000016E   0x9800             LDR      R0,[SP, #+0]
   \   00000170   0x1C40             ADDS     R0,R0,#+1
   \   00000172   0x9000             STR      R0,[SP, #+0]
   \   00000174   0x9804             LDR      R0,[SP, #+16]
   \   00000176   0x3040             ADDS     R0,R0,#+64
   \   00000178   0x9004             STR      R0,[SP, #+16]
   \   0000017A   0x9800             LDR      R0,[SP, #+0]
   \   0000017C   0x2806             CMP      R0,#+6
   \   0000017E   0xDA00             BGE      .+4
   \   00000180   0xE75B             B        ??mbedtls_sha512_self_test_4
    501          
    502              if( verbose != 0 )
   \   00000182   0x984C             LDR      R0,[SP, #+304]
   \   00000184   0x2800             CMP      R0,#+0
   \   00000186   0xD002             BEQ      ??mbedtls_sha512_self_test_18
    503                  mbedtls_printf( "\n" );
   \   00000188   0x....             ADR      R0,??DataTable13_3  ;; "\n"
   \   0000018A   0x.... 0x....      BL       printf
    504          
    505          exit:
    506              mbedtls_sha512_free( &ctx );
   \                     ??mbedtls_sha512_self_test_18: (+1)
   \   0000018E   0x21D8             MOVS     R1,#+216
   \   00000190   0xA806             ADD      R0,SP,#+24
   \   00000192   0x.... 0x....      BL       __aeabi_memclr4
    507              mbedtls_free( buf );
   \   00000196   0x9803             LDR      R0,[SP, #+12]
   \   00000198   0x.... 0x....      BL       free
    508          
    509              return( ret );
   \   0000019C   0x9805             LDR      R0,[SP, #+20]
   \                     ??mbedtls_sha512_self_test_2: (+1)
   \   0000019E   0xB04D             ADD      SP,SP,#+308
   \   000001A0   0xBDF0             POP      {R4-R7,PC}       ;; return
    510          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0xF3BCC908         DC32     0xF3BCC908,0x6A09E667
   \              0x6A09E667   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x84CAA73B         DC32     0x84CAA73B,0xBB67AE85
   \              0xBB67AE85   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0xFE94F82B         DC32     0xFE94F82B,0x3C6EF372
   \              0x3C6EF372   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x5F1D36F1         DC32     0x5F1D36F1,0xA54FF53A
   \              0xA54FF53A   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0xADE682D1         DC32     0xADE682D1,0x510E527F
   \              0x510E527F   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x2B3E6C1F         DC32     0x2B3E6C1F,0x9B05688C
   \              0x9B05688C   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0xFB41BD6B         DC32     0xFB41BD6B,0x1F83D9AB
   \              0x1F83D9AB   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x137E2179         DC32     0x137E2179,0x5BE0CD19
   \              0x5BE0CD19   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0xC1059ED8         DC32     0xC1059ED8,0xCBBB9D5D
   \              0xCBBB9D5D   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x367CD507         DC32     0x367CD507,0x629A292A
   \              0x629A292A   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x3070DD17         DC32     0x3070DD17,0x9159015A
   \              0x9159015A   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \   00000000   0xF70E5939         DC32     0xF70E5939,0x152FECD8
   \              0x152FECD8   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \   00000000   0xFFC00B31         DC32     0xFFC00B31,0x67332667
   \              0x67332667   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \   00000000   0x68581511         DC32     0x68581511,0x8EB44A87
   \              0x8EB44A87   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \   00000000   0x64F98FA7         DC32     0x64F98FA7,0xDB0C2E0D
   \              0xDB0C2E0D   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_15:
   \   00000000   0xBEFA4FA4         DC32     0xBEFA4FA4,0x47B5481D
   \              0x47B5481D   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     sha512_padding

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x........         DC32     sha512_test_sum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x........         DC32     sha512_test_buflen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \   00000000   0x........         DC32     sha512_test_buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x42 0x75          DC8 "Buffer allocation failed\012"
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x20 0x61    
   \              0x6C 0x6C    
   \              0x6F 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x20 0x20          DC8 "  SHA-%d test #%d: "
   \              0x53 0x48    
   \              0x41 0x2D    
   \              0x25 0x64    
   \              0x20 0x74    
   \              0x65 0x73    
   \              0x74 0x20    
   \              0x23 0x25    
   \              0x64 0x3A    
   \              0x20 0x00    

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_4:
   \   00000000   0x0A 0x00          DC8 "\012"

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x66 0x61          DC8 "failed\012"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x70 0x61          DC8 "passed\012"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x00    
    511          
    512          #endif /* MBEDTLS_SELF_TEST */
    513          
    514          #endif /* MBEDTLS_SHA512_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     248   mbedtls_sha512
       248   -> __aeabi_memclr4
       248   -> __aeabi_memcpy
       248   -> mbedtls_sha512_finish
       248   -> mbedtls_sha512_process
       248   -> mbedtls_sha512_starts
       8   mbedtls_sha512_clone
         8   -> __aeabi_memcpy4
      56   mbedtls_sha512_finish
        56   -> __aeabi_memcpy
        56   -> mbedtls_sha512_process
       8   mbedtls_sha512_free
         8   -> __aeabi_memclr
       8   mbedtls_sha512_init
         8   -> __aeabi_memclr4
     824   mbedtls_sha512_process
     328   mbedtls_sha512_self_test
       328   -> __aeabi_memclr4
       328   -> __aeabi_memcpy
       328   -> __aeabi_memset
       328   -> calloc
       328   -> free
       328   -> mbedtls_sha512_finish
       328   -> mbedtls_sha512_process
       328   -> mbedtls_sha512_starts
       328   -> mbedtls_sha512_update
       328   -> memcmp
       328   -> printf
       328 __aeabi_idivmod
       4   mbedtls_sha512_starts
      32   mbedtls_sha512_update
        32   -> __aeabi_memcpy
        32   -> mbedtls_sha512_process


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ??DataTable10
       8  ??DataTable10_1
       8  ??DataTable10_10
       8  ??DataTable10_11
       8  ??DataTable10_12
       8  ??DataTable10_13
       8  ??DataTable10_14
       8  ??DataTable10_15
       8  ??DataTable10_2
       8  ??DataTable10_3
       8  ??DataTable10_4
       8  ??DataTable10_5
       8  ??DataTable10_6
       8  ??DataTable10_7
       8  ??DataTable10_8
       8  ??DataTable10_9
       4  ??DataTable12
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_2
       4  ??DataTable13_3
      28  ?_0
      20  ?_1
       8  ?_2
       8  ?_3
       2  ?_4
     640  K
     178  mbedtls_sha512
      10  mbedtls_sha512_clone
    1054  mbedtls_sha512_finish
      16  mbedtls_sha512_free
      10  mbedtls_sha512_init
    3252  mbedtls_sha512_process
     418  mbedtls_sha512_self_test
     178  mbedtls_sha512_starts
     150  mbedtls_sha512_update
     128  sha512_padding
     340  sha512_test_buf
      12  sha512_test_buflen
     384  sha512_test_sum

 
 1 506 bytes in section .rodata
 5 478 bytes in section .text
 
 5 478 bytes of CODE  memory
 1 506 bytes of CONST memory

Errors: none
Warnings: none
