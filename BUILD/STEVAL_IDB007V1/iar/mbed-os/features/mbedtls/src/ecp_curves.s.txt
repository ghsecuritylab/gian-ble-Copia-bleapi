###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:26
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\mbedtls\src\ecp_curves.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\ecp_curves.d
#        -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\ecp_curves.s.txt
#        -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\ecp_curves.o
#        .\mbed-os\features\mbedtls\src\ecp_curves.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\ecp_curves.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\ecp_curves.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\mbedtls\src\ecp_curves.c
      1          /*
      2           *  Elliptic curves over GF(p): curve-specific data and functions
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          #if !defined(MBEDTLS_CONFIG_FILE)
     23          #include "mbedtls/config.h"
     24          #else
     25          #include MBEDTLS_CONFIG_FILE
     26          #endif
     27          
     28          #if defined(MBEDTLS_ECP_C)
     29          
     30          #include "mbedtls/ecp.h"
     31          
     32          #include <string.h>
     33          
     34          #if !defined(MBEDTLS_ECP_ALT)
     35          
     36          #if ( defined(__ARMCC_VERSION) || defined(_MSC_VER) ) && \
     37              !defined(inline) && !defined(__cplusplus)
     38          #define inline __inline
     39          #endif
     40          
     41          /*
     42           * Conversion macros for embedded constants:
     43           * build lists of mbedtls_mpi_uint's from lists of unsigned char's grouped by 8, 4 or 2
     44           */
     45          #if defined(MBEDTLS_HAVE_INT32)
     46          
     47          #define BYTES_TO_T_UINT_4( a, b, c, d )             \
     48              ( (mbedtls_mpi_uint) a <<  0 ) |                          \
     49              ( (mbedtls_mpi_uint) b <<  8 ) |                          \
     50              ( (mbedtls_mpi_uint) c << 16 ) |                          \
     51              ( (mbedtls_mpi_uint) d << 24 )
     52          
     53          #define BYTES_TO_T_UINT_2( a, b )                   \
     54              BYTES_TO_T_UINT_4( a, b, 0, 0 )
     55          
     56          #define BYTES_TO_T_UINT_8( a, b, c, d, e, f, g, h ) \
     57              BYTES_TO_T_UINT_4( a, b, c, d ),                \
     58              BYTES_TO_T_UINT_4( e, f, g, h )
     59          
     60          #else /* 64-bits */
     61          
     62          #define BYTES_TO_T_UINT_8( a, b, c, d, e, f, g, h ) \
     63              ( (mbedtls_mpi_uint) a <<  0 ) |                          \
     64              ( (mbedtls_mpi_uint) b <<  8 ) |                          \
     65              ( (mbedtls_mpi_uint) c << 16 ) |                          \
     66              ( (mbedtls_mpi_uint) d << 24 ) |                          \
     67              ( (mbedtls_mpi_uint) e << 32 ) |                          \
     68              ( (mbedtls_mpi_uint) f << 40 ) |                          \
     69              ( (mbedtls_mpi_uint) g << 48 ) |                          \
     70              ( (mbedtls_mpi_uint) h << 56 )
     71          
     72          #define BYTES_TO_T_UINT_4( a, b, c, d )             \
     73              BYTES_TO_T_UINT_8( a, b, c, d, 0, 0, 0, 0 )
     74          
     75          #define BYTES_TO_T_UINT_2( a, b )                   \
     76              BYTES_TO_T_UINT_8( a, b, 0, 0, 0, 0, 0, 0 )
     77          
     78          #endif /* bits in mbedtls_mpi_uint */
     79          
     80          /*
     81           * Note: the constants are in little-endian order
     82           * to be directly usable in MPIs
     83           */
     84          
     85          /*
     86           * Domain parameters for secp192r1
     87           */
     88          #if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)
     89          static const mbedtls_mpi_uint secp192r1_p[] = {
     90              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
     91              BYTES_TO_T_UINT_8( 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
     92              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
     93          };
     94          static const mbedtls_mpi_uint secp192r1_b[] = {
     95              BYTES_TO_T_UINT_8( 0xB1, 0xB9, 0x46, 0xC1, 0xEC, 0xDE, 0xB8, 0xFE ),
     96              BYTES_TO_T_UINT_8( 0x49, 0x30, 0x24, 0x72, 0xAB, 0xE9, 0xA7, 0x0F ),
     97              BYTES_TO_T_UINT_8( 0xE7, 0x80, 0x9C, 0xE5, 0x19, 0x05, 0x21, 0x64 ),
     98          };
     99          static const mbedtls_mpi_uint secp192r1_gx[] = {
    100              BYTES_TO_T_UINT_8( 0x12, 0x10, 0xFF, 0x82, 0xFD, 0x0A, 0xFF, 0xF4 ),
    101              BYTES_TO_T_UINT_8( 0x00, 0x88, 0xA1, 0x43, 0xEB, 0x20, 0xBF, 0x7C ),
    102              BYTES_TO_T_UINT_8( 0xF6, 0x90, 0x30, 0xB0, 0x0E, 0xA8, 0x8D, 0x18 ),
    103          };
    104          static const mbedtls_mpi_uint secp192r1_gy[] = {
    105              BYTES_TO_T_UINT_8( 0x11, 0x48, 0x79, 0x1E, 0xA1, 0x77, 0xF9, 0x73 ),
    106              BYTES_TO_T_UINT_8( 0xD5, 0xCD, 0x24, 0x6B, 0xED, 0x11, 0x10, 0x63 ),
    107              BYTES_TO_T_UINT_8( 0x78, 0xDA, 0xC8, 0xFF, 0x95, 0x2B, 0x19, 0x07 ),
    108          };
    109          static const mbedtls_mpi_uint secp192r1_n[] = {
    110              BYTES_TO_T_UINT_8( 0x31, 0x28, 0xD2, 0xB4, 0xB1, 0xC9, 0x6B, 0x14 ),
    111              BYTES_TO_T_UINT_8( 0x36, 0xF8, 0xDE, 0x99, 0xFF, 0xFF, 0xFF, 0xFF ),
    112              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    113          };
    114          #endif /* MBEDTLS_ECP_DP_SECP192R1_ENABLED */
    115          
    116          /*
    117           * Domain parameters for secp224r1
    118           */
    119          #if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)
    120          static const mbedtls_mpi_uint secp224r1_p[] = {
    121              BYTES_TO_T_UINT_8( 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ),
    122              BYTES_TO_T_UINT_8( 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF ),
    123              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    124              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00 ),
    125          };
    126          static const mbedtls_mpi_uint secp224r1_b[] = {
    127              BYTES_TO_T_UINT_8( 0xB4, 0xFF, 0x55, 0x23, 0x43, 0x39, 0x0B, 0x27 ),
    128              BYTES_TO_T_UINT_8( 0xBA, 0xD8, 0xBF, 0xD7, 0xB7, 0xB0, 0x44, 0x50 ),
    129              BYTES_TO_T_UINT_8( 0x56, 0x32, 0x41, 0xF5, 0xAB, 0xB3, 0x04, 0x0C ),
    130              BYTES_TO_T_UINT_4( 0x85, 0x0A, 0x05, 0xB4 ),
    131          };
    132          static const mbedtls_mpi_uint secp224r1_gx[] = {
    133              BYTES_TO_T_UINT_8( 0x21, 0x1D, 0x5C, 0x11, 0xD6, 0x80, 0x32, 0x34 ),
    134              BYTES_TO_T_UINT_8( 0x22, 0x11, 0xC2, 0x56, 0xD3, 0xC1, 0x03, 0x4A ),
    135              BYTES_TO_T_UINT_8( 0xB9, 0x90, 0x13, 0x32, 0x7F, 0xBF, 0xB4, 0x6B ),
    136              BYTES_TO_T_UINT_4( 0xBD, 0x0C, 0x0E, 0xB7 ),
    137          };
    138          static const mbedtls_mpi_uint secp224r1_gy[] = {
    139              BYTES_TO_T_UINT_8( 0x34, 0x7E, 0x00, 0x85, 0x99, 0x81, 0xD5, 0x44 ),
    140              BYTES_TO_T_UINT_8( 0x64, 0x47, 0x07, 0x5A, 0xA0, 0x75, 0x43, 0xCD ),
    141              BYTES_TO_T_UINT_8( 0xE6, 0xDF, 0x22, 0x4C, 0xFB, 0x23, 0xF7, 0xB5 ),
    142              BYTES_TO_T_UINT_4( 0x88, 0x63, 0x37, 0xBD ),
    143          };
    144          static const mbedtls_mpi_uint secp224r1_n[] = {
    145              BYTES_TO_T_UINT_8( 0x3D, 0x2A, 0x5C, 0x5C, 0x45, 0x29, 0xDD, 0x13 ),
    146              BYTES_TO_T_UINT_8( 0x3E, 0xF0, 0xB8, 0xE0, 0xA2, 0x16, 0xFF, 0xFF ),
    147              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    148              BYTES_TO_T_UINT_4( 0xFF, 0xFF, 0xFF, 0xFF ),
    149          };
    150          #endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */
    151          
    152          /*
    153           * Domain parameters for secp256r1
    154           */
    155          #if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)

   \                                 In section .text, align 4, keep-with-next
    156          static const mbedtls_mpi_uint secp256r1_p[] = {
   \                     secp256r1_p:
   \   00000000   0xFFFFFFFF         DC32 4294967295, 4294967295, 4294967295, 0, 0, 0, 1, 4294967295
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000001   
   \              0xFFFFFFFF   
    157              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    158              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00 ),
    159              BYTES_TO_T_UINT_8( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ),
    160              BYTES_TO_T_UINT_8( 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF ),
    161          };

   \                                 In section .text, align 4, keep-with-next
    162          static const mbedtls_mpi_uint secp256r1_b[] = {
   \                     secp256r1_b:
   \   00000000   0x27D2604B         DC32 668098635, 1003371582, 3428036854, 1696401072, 1989707452
   \              0x3BCE3C3E   
   \              0xCC53B0F6   
   \              0x651D06B0   
   \              0x769886BC   
   \   00000014   0xB3EBBD55         DC32 3018571093, 2855965671, 1522939352
   \              0xAA3A93E7   
   \              0x5AC635D8   
    163              BYTES_TO_T_UINT_8( 0x4B, 0x60, 0xD2, 0x27, 0x3E, 0x3C, 0xCE, 0x3B ),
    164              BYTES_TO_T_UINT_8( 0xF6, 0xB0, 0x53, 0xCC, 0xB0, 0x06, 0x1D, 0x65 ),
    165              BYTES_TO_T_UINT_8( 0xBC, 0x86, 0x98, 0x76, 0x55, 0xBD, 0xEB, 0xB3 ),
    166              BYTES_TO_T_UINT_8( 0xE7, 0x93, 0x3A, 0xAA, 0xD8, 0x35, 0xC6, 0x5A ),
    167          };

   \                                 In section .text, align 4, keep-with-next
    168          static const mbedtls_mpi_uint secp256r1_gx[] = {
   \                     secp256r1_gx:
   \   00000000   0xD898C296         DC32 3633889942, 4104206661, 770388896, 1996717441, 1671708914
   \              0xF4A13945   
   \              0x2DEB33A0   
   \              0x77037D81   
   \              0x63A440F2   
   \   00000014   0xF8BCE6E5         DC32 4173129445, 3777774151, 1796723186
   \              0xE12C4247   
   \              0x6B17D1F2   
    169              BYTES_TO_T_UINT_8( 0x96, 0xC2, 0x98, 0xD8, 0x45, 0x39, 0xA1, 0xF4 ),
    170              BYTES_TO_T_UINT_8( 0xA0, 0x33, 0xEB, 0x2D, 0x81, 0x7D, 0x03, 0x77 ),
    171              BYTES_TO_T_UINT_8( 0xF2, 0x40, 0xA4, 0x63, 0xE5, 0xE6, 0xBC, 0xF8 ),
    172              BYTES_TO_T_UINT_8( 0x47, 0x42, 0x2C, 0xE1, 0xF2, 0xD1, 0x17, 0x6B ),
    173          };

   \                                 In section .text, align 4, keep-with-next
    174          static const mbedtls_mpi_uint secp256r1_gy[] = {
   \                     secp256r1_gy:
   \   00000000   0x37BF51F5         DC32 935285237, 3417718888, 1798397646, 734933847, 2081398294
   \              0xCBB64068   
   \              0x6B315ECE   
   \              0x2BCE3357   
   \              0x7C0F9E16   
   \   00000014   0x8EE7EB4A         DC32 2397563722, 4263149467, 1340293858
   \              0xFE1A7F9B   
   \              0x4FE342E2   
    175              BYTES_TO_T_UINT_8( 0xF5, 0x51, 0xBF, 0x37, 0x68, 0x40, 0xB6, 0xCB ),
    176              BYTES_TO_T_UINT_8( 0xCE, 0x5E, 0x31, 0x6B, 0x57, 0x33, 0xCE, 0x2B ),
    177              BYTES_TO_T_UINT_8( 0x16, 0x9E, 0x0F, 0x7C, 0x4A, 0xEB, 0xE7, 0x8E ),
    178              BYTES_TO_T_UINT_8( 0x9B, 0x7F, 0x1A, 0xFE, 0xE2, 0x42, 0xE3, 0x4F ),
    179          };

   \                                 In section .text, align 4, keep-with-next
    180          static const mbedtls_mpi_uint secp256r1_n[] = {
   \                     secp256r1_n:
   \   00000000   0xFC632551         DC32 4234356049, 4089039554, 2803342980, 3169254061, 4294967295
   \              0xF3B9CAC2   
   \              0xA7179E84   
   \              0xBCE6FAAD   
   \              0xFFFFFFFF   
   \   00000014   0xFFFFFFFF         DC32 4294967295, 0, 4294967295
   \              0x00000000   
   \              0xFFFFFFFF   
    181              BYTES_TO_T_UINT_8( 0x51, 0x25, 0x63, 0xFC, 0xC2, 0xCA, 0xB9, 0xF3 ),
    182              BYTES_TO_T_UINT_8( 0x84, 0x9E, 0x17, 0xA7, 0xAD, 0xFA, 0xE6, 0xBC ),
    183              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    184              BYTES_TO_T_UINT_8( 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF ),
    185          };
    186          #endif /* MBEDTLS_ECP_DP_SECP256R1_ENABLED */
    187          
    188          /*
    189           * Domain parameters for secp384r1
    190           */
    191          #if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)

   \                                 In section .text, align 4, keep-with-next
    192          static const mbedtls_mpi_uint secp384r1_p[] = {
   \                     secp384r1_p:
   \   00000000   0xFFFFFFFF         DC32 4294967295, 0, 0, 4294967295, 4294967294, 4294967295, 4294967295
   \              0x00000000   
   \              0x00000000   
   \              0xFFFFFFFF   
   \              0xFFFFFFFE   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   0000001C   0xFFFFFFFF         DC32 4294967295, 4294967295, 4294967295, 4294967295, 4294967295
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
    193              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00 ),
    194              BYTES_TO_T_UINT_8( 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF ),
    195              BYTES_TO_T_UINT_8( 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    196              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    197              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    198              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    199          };

   \                                 In section .text, align 4, keep-with-next
    200          static const mbedtls_mpi_uint secp384r1_b[] = {
   \                     secp384r1_b:
   \   00000000   0xD3EC2AEF         DC32 3555470063, 713410797, 2318324125, 3327539597, 1343457114
   \              0x2A85C8ED   
   \              0x8A2ED19D   
   \              0xC656398D   
   \              0x5013875A   
   \   00000014   0x0314088F         DC32 51644559, 4269883666, 404593774, 3824692505, 2559444331
   \              0xFE814112   
   \              0x181D9C6E   
   \              0xE3F82D19   
   \              0x988E056B   
   \   00000028   0xE23EE7E4         DC32 3795773412, 3006345127
   \              0xB3312FA7   
    201              BYTES_TO_T_UINT_8( 0xEF, 0x2A, 0xEC, 0xD3, 0xED, 0xC8, 0x85, 0x2A ),
    202              BYTES_TO_T_UINT_8( 0x9D, 0xD1, 0x2E, 0x8A, 0x8D, 0x39, 0x56, 0xC6 ),
    203              BYTES_TO_T_UINT_8( 0x5A, 0x87, 0x13, 0x50, 0x8F, 0x08, 0x14, 0x03 ),
    204              BYTES_TO_T_UINT_8( 0x12, 0x41, 0x81, 0xFE, 0x6E, 0x9C, 0x1D, 0x18 ),
    205              BYTES_TO_T_UINT_8( 0x19, 0x2D, 0xF8, 0xE3, 0x6B, 0x05, 0x8E, 0x98 ),
    206              BYTES_TO_T_UINT_8( 0xE4, 0xE7, 0x3E, 0xE2, 0xA7, 0x2F, 0x31, 0xB3 ),
    207          };

   \                                 In section .text, align 4, keep-with-next
    208          static const mbedtls_mpi_uint secp384r1_gx[] = {
   \                     secp384r1_gx:
   \   00000000   0x72760AB7         DC32 1920338615, 978607672, 3210029420, 1426256477, 2186553912
   \              0x3A545E38   
   \              0xBF55296C   
   \              0x5502F25D   
   \              0x82542A38   
   \   00000014   0x59F741E0         DC32 1509376480, 2343017368, 1847409506, 4079005044, 2394015518
   \              0x8BA79B98   
   \              0x6E1D3B62   
   \              0xF320AD74   
   \              0x8EB1C71E   
   \   00000028   0xBE8B0537         DC32 3196781879, 2861025826
   \              0xAA87CA22   
    209              BYTES_TO_T_UINT_8( 0xB7, 0x0A, 0x76, 0x72, 0x38, 0x5E, 0x54, 0x3A ),
    210              BYTES_TO_T_UINT_8( 0x6C, 0x29, 0x55, 0xBF, 0x5D, 0xF2, 0x02, 0x55 ),
    211              BYTES_TO_T_UINT_8( 0x38, 0x2A, 0x54, 0x82, 0xE0, 0x41, 0xF7, 0x59 ),
    212              BYTES_TO_T_UINT_8( 0x98, 0x9B, 0xA7, 0x8B, 0x62, 0x3B, 0x1D, 0x6E ),
    213              BYTES_TO_T_UINT_8( 0x74, 0xAD, 0x20, 0xF3, 0x1E, 0xC7, 0xB1, 0x8E ),
    214              BYTES_TO_T_UINT_8( 0x37, 0x05, 0x8B, 0xBE, 0x22, 0xCA, 0x87, 0xAA ),
    215          };

   \                                 In section .text, align 4, keep-with-next
    216          static const mbedtls_mpi_uint secp384r1_gy[] = {
   \                     secp384r1_gy:
   \   00000000   0x90EA0E5F         DC32 2431258207, 2051218812, 494829981, 174109134, 3052452032
   \              0x7A431D7C   
   \              0x1D7E819D   
   \              0x0A60B1CE   
   \              0xB5F0B8C0   
   \   00000014   0xE9DA3113         DC32 3923390739, 681186428, 4176747965, 2459098153, 1570674879
   \              0x289A147C   
   \              0xF8F41DBD   
   \              0x9292DC29   
   \              0x5D9E98BF   
   \   00000028   0x96262C6F         DC32 2519084143, 907533898
   \              0x3617DE4A   
    217              BYTES_TO_T_UINT_8( 0x5F, 0x0E, 0xEA, 0x90, 0x7C, 0x1D, 0x43, 0x7A ),
    218              BYTES_TO_T_UINT_8( 0x9D, 0x81, 0x7E, 0x1D, 0xCE, 0xB1, 0x60, 0x0A ),
    219              BYTES_TO_T_UINT_8( 0xC0, 0xB8, 0xF0, 0xB5, 0x13, 0x31, 0xDA, 0xE9 ),
    220              BYTES_TO_T_UINT_8( 0x7C, 0x14, 0x9A, 0x28, 0xBD, 0x1D, 0xF4, 0xF8 ),
    221              BYTES_TO_T_UINT_8( 0x29, 0xDC, 0x92, 0x92, 0xBF, 0x98, 0x9E, 0x5D ),
    222              BYTES_TO_T_UINT_8( 0x6F, 0x2C, 0x26, 0x96, 0x4A, 0xDE, 0x17, 0x36 ),
    223          };

   \                                 In section .text, align 4, keep-with-next
    224          static const mbedtls_mpi_uint secp384r1_n[] = {
   \                     secp384r1_n:
   \   00000000   0xCCC52973         DC32 3435473267, 3974895978, 1219536762, 1478102450, 4097256927
   \              0xECEC196A   
   \              0x48B0A77A   
   \              0x581A0DB2   
   \              0xF4372DDF   
   \   00000014   0xC7634D81         DC32 3345173889, 4294967295, 4294967295, 4294967295, 4294967295
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   00000028   0xFFFFFFFF         DC32 4294967295, 4294967295
   \              0xFFFFFFFF   
    225              BYTES_TO_T_UINT_8( 0x73, 0x29, 0xC5, 0xCC, 0x6A, 0x19, 0xEC, 0xEC ),
    226              BYTES_TO_T_UINT_8( 0x7A, 0xA7, 0xB0, 0x48, 0xB2, 0x0D, 0x1A, 0x58 ),
    227              BYTES_TO_T_UINT_8( 0xDF, 0x2D, 0x37, 0xF4, 0x81, 0x4D, 0x63, 0xC7 ),
    228              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    229              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    230              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    231          };
    232          #endif /* MBEDTLS_ECP_DP_SECP384R1_ENABLED */
    233          
    234          /*
    235           * Domain parameters for secp521r1
    236           */
    237          #if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)
    238          static const mbedtls_mpi_uint secp521r1_p[] = {
    239              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    240              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    241              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    242              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    243              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    244              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    245              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    246              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    247              BYTES_TO_T_UINT_2( 0xFF, 0x01 ),
    248          };
    249          static const mbedtls_mpi_uint secp521r1_b[] = {
    250              BYTES_TO_T_UINT_8( 0x00, 0x3F, 0x50, 0x6B, 0xD4, 0x1F, 0x45, 0xEF ),
    251              BYTES_TO_T_UINT_8( 0xF1, 0x34, 0x2C, 0x3D, 0x88, 0xDF, 0x73, 0x35 ),
    252              BYTES_TO_T_UINT_8( 0x07, 0xBF, 0xB1, 0x3B, 0xBD, 0xC0, 0x52, 0x16 ),
    253              BYTES_TO_T_UINT_8( 0x7B, 0x93, 0x7E, 0xEC, 0x51, 0x39, 0x19, 0x56 ),
    254              BYTES_TO_T_UINT_8( 0xE1, 0x09, 0xF1, 0x8E, 0x91, 0x89, 0xB4, 0xB8 ),
    255              BYTES_TO_T_UINT_8( 0xF3, 0x15, 0xB3, 0x99, 0x5B, 0x72, 0xDA, 0xA2 ),
    256              BYTES_TO_T_UINT_8( 0xEE, 0x40, 0x85, 0xB6, 0xA0, 0x21, 0x9A, 0x92 ),
    257              BYTES_TO_T_UINT_8( 0x1F, 0x9A, 0x1C, 0x8E, 0x61, 0xB9, 0x3E, 0x95 ),
    258              BYTES_TO_T_UINT_2( 0x51, 0x00 ),
    259          };
    260          static const mbedtls_mpi_uint secp521r1_gx[] = {
    261              BYTES_TO_T_UINT_8( 0x66, 0xBD, 0xE5, 0xC2, 0x31, 0x7E, 0x7E, 0xF9 ),
    262              BYTES_TO_T_UINT_8( 0x9B, 0x42, 0x6A, 0x85, 0xC1, 0xB3, 0x48, 0x33 ),
    263              BYTES_TO_T_UINT_8( 0xDE, 0xA8, 0xFF, 0xA2, 0x27, 0xC1, 0x1D, 0xFE ),
    264              BYTES_TO_T_UINT_8( 0x28, 0x59, 0xE7, 0xEF, 0x77, 0x5E, 0x4B, 0xA1 ),
    265              BYTES_TO_T_UINT_8( 0xBA, 0x3D, 0x4D, 0x6B, 0x60, 0xAF, 0x28, 0xF8 ),
    266              BYTES_TO_T_UINT_8( 0x21, 0xB5, 0x3F, 0x05, 0x39, 0x81, 0x64, 0x9C ),
    267              BYTES_TO_T_UINT_8( 0x42, 0xB4, 0x95, 0x23, 0x66, 0xCB, 0x3E, 0x9E ),
    268              BYTES_TO_T_UINT_8( 0xCD, 0xE9, 0x04, 0x04, 0xB7, 0x06, 0x8E, 0x85 ),
    269              BYTES_TO_T_UINT_2( 0xC6, 0x00 ),
    270          };
    271          static const mbedtls_mpi_uint secp521r1_gy[] = {
    272              BYTES_TO_T_UINT_8( 0x50, 0x66, 0xD1, 0x9F, 0x76, 0x94, 0xBE, 0x88 ),
    273              BYTES_TO_T_UINT_8( 0x40, 0xC2, 0x72, 0xA2, 0x86, 0x70, 0x3C, 0x35 ),
    274              BYTES_TO_T_UINT_8( 0x61, 0x07, 0xAD, 0x3F, 0x01, 0xB9, 0x50, 0xC5 ),
    275              BYTES_TO_T_UINT_8( 0x40, 0x26, 0xF4, 0x5E, 0x99, 0x72, 0xEE, 0x97 ),
    276              BYTES_TO_T_UINT_8( 0x2C, 0x66, 0x3E, 0x27, 0x17, 0xBD, 0xAF, 0x17 ),
    277              BYTES_TO_T_UINT_8( 0x68, 0x44, 0x9B, 0x57, 0x49, 0x44, 0xF5, 0x98 ),
    278              BYTES_TO_T_UINT_8( 0xD9, 0x1B, 0x7D, 0x2C, 0xB4, 0x5F, 0x8A, 0x5C ),
    279              BYTES_TO_T_UINT_8( 0x04, 0xC0, 0x3B, 0x9A, 0x78, 0x6A, 0x29, 0x39 ),
    280              BYTES_TO_T_UINT_2( 0x18, 0x01 ),
    281          };
    282          static const mbedtls_mpi_uint secp521r1_n[] = {
    283              BYTES_TO_T_UINT_8( 0x09, 0x64, 0x38, 0x91, 0x1E, 0xB7, 0x6F, 0xBB ),
    284              BYTES_TO_T_UINT_8( 0xAE, 0x47, 0x9C, 0x89, 0xB8, 0xC9, 0xB5, 0x3B ),
    285              BYTES_TO_T_UINT_8( 0xD0, 0xA5, 0x09, 0xF7, 0x48, 0x01, 0xCC, 0x7F ),
    286              BYTES_TO_T_UINT_8( 0x6B, 0x96, 0x2F, 0xBF, 0x83, 0x87, 0x86, 0x51 ),
    287              BYTES_TO_T_UINT_8( 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    288              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    289              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    290              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    291              BYTES_TO_T_UINT_2( 0xFF, 0x01 ),
    292          };
    293          #endif /* MBEDTLS_ECP_DP_SECP521R1_ENABLED */
    294          
    295          #if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)
    296          static const mbedtls_mpi_uint secp192k1_p[] = {
    297              BYTES_TO_T_UINT_8( 0x37, 0xEE, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF ),
    298              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    299              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    300          };
    301          static const mbedtls_mpi_uint secp192k1_a[] = {
    302              BYTES_TO_T_UINT_2( 0x00, 0x00 ),
    303          };
    304          static const mbedtls_mpi_uint secp192k1_b[] = {
    305              BYTES_TO_T_UINT_2( 0x03, 0x00 ),
    306          };
    307          static const mbedtls_mpi_uint secp192k1_gx[] = {
    308              BYTES_TO_T_UINT_8( 0x7D, 0x6C, 0xE0, 0xEA, 0xB1, 0xD1, 0xA5, 0x1D ),
    309              BYTES_TO_T_UINT_8( 0x34, 0xF4, 0xB7, 0x80, 0x02, 0x7D, 0xB0, 0x26 ),
    310              BYTES_TO_T_UINT_8( 0xAE, 0xE9, 0x57, 0xC0, 0x0E, 0xF1, 0x4F, 0xDB ),
    311          };
    312          static const mbedtls_mpi_uint secp192k1_gy[] = {
    313              BYTES_TO_T_UINT_8( 0x9D, 0x2F, 0x5E, 0xD9, 0x88, 0xAA, 0x82, 0x40 ),
    314              BYTES_TO_T_UINT_8( 0x34, 0x86, 0xBE, 0x15, 0xD0, 0x63, 0x41, 0x84 ),
    315              BYTES_TO_T_UINT_8( 0xA7, 0x28, 0x56, 0x9C, 0x6D, 0x2F, 0x2F, 0x9B ),
    316          };
    317          static const mbedtls_mpi_uint secp192k1_n[] = {
    318              BYTES_TO_T_UINT_8( 0x8D, 0xFD, 0xDE, 0x74, 0x6A, 0x46, 0x69, 0x0F ),
    319              BYTES_TO_T_UINT_8( 0x17, 0xFC, 0xF2, 0x26, 0xFE, 0xFF, 0xFF, 0xFF ),
    320              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    321          };
    322          #endif /* MBEDTLS_ECP_DP_SECP192K1_ENABLED */
    323          
    324          #if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)
    325          static const mbedtls_mpi_uint secp224k1_p[] = {
    326              BYTES_TO_T_UINT_8( 0x6D, 0xE5, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF ),
    327              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    328              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    329              BYTES_TO_T_UINT_4( 0xFF, 0xFF, 0xFF, 0xFF ),
    330          };
    331          static const mbedtls_mpi_uint secp224k1_a[] = {
    332              BYTES_TO_T_UINT_2( 0x00, 0x00 ),
    333          };
    334          static const mbedtls_mpi_uint secp224k1_b[] = {
    335              BYTES_TO_T_UINT_2( 0x05, 0x00 ),
    336          };
    337          static const mbedtls_mpi_uint secp224k1_gx[] = {
    338              BYTES_TO_T_UINT_8( 0x5C, 0xA4, 0xB7, 0xB6, 0x0E, 0x65, 0x7E, 0x0F ),
    339              BYTES_TO_T_UINT_8( 0xA9, 0x75, 0x70, 0xE4, 0xE9, 0x67, 0xA4, 0x69 ),
    340              BYTES_TO_T_UINT_8( 0xA1, 0x28, 0xFC, 0x30, 0xDF, 0x99, 0xF0, 0x4D ),
    341              BYTES_TO_T_UINT_4( 0x33, 0x5B, 0x45, 0xA1 ),
    342          };
    343          static const mbedtls_mpi_uint secp224k1_gy[] = {
    344              BYTES_TO_T_UINT_8( 0xA5, 0x61, 0x6D, 0x55, 0xDB, 0x4B, 0xCA, 0xE2 ),
    345              BYTES_TO_T_UINT_8( 0x59, 0xBD, 0xB0, 0xC0, 0xF7, 0x19, 0xE3, 0xF7 ),
    346              BYTES_TO_T_UINT_8( 0xD6, 0xFB, 0xCA, 0x82, 0x42, 0x34, 0xBA, 0x7F ),
    347              BYTES_TO_T_UINT_4( 0xED, 0x9F, 0x08, 0x7E ),
    348          };
    349          static const mbedtls_mpi_uint secp224k1_n[] = {
    350              BYTES_TO_T_UINT_8( 0xF7, 0xB1, 0x9F, 0x76, 0x71, 0xA9, 0xF0, 0xCA ),
    351              BYTES_TO_T_UINT_8( 0x84, 0x61, 0xEC, 0xD2, 0xE8, 0xDC, 0x01, 0x00 ),
    352              BYTES_TO_T_UINT_8( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ),
    353              BYTES_TO_T_UINT_8( 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ),
    354          };
    355          #endif /* MBEDTLS_ECP_DP_SECP224K1_ENABLED */
    356          
    357          #if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)
    358          static const mbedtls_mpi_uint secp256k1_p[] = {
    359              BYTES_TO_T_UINT_8( 0x2F, 0xFC, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF ),
    360              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    361              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    362              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    363          };
    364          static const mbedtls_mpi_uint secp256k1_a[] = {
    365              BYTES_TO_T_UINT_2( 0x00, 0x00 ),
    366          };
    367          static const mbedtls_mpi_uint secp256k1_b[] = {
    368              BYTES_TO_T_UINT_2( 0x07, 0x00 ),
    369          };
    370          static const mbedtls_mpi_uint secp256k1_gx[] = {
    371              BYTES_TO_T_UINT_8( 0x98, 0x17, 0xF8, 0x16, 0x5B, 0x81, 0xF2, 0x59 ),
    372              BYTES_TO_T_UINT_8( 0xD9, 0x28, 0xCE, 0x2D, 0xDB, 0xFC, 0x9B, 0x02 ),
    373              BYTES_TO_T_UINT_8( 0x07, 0x0B, 0x87, 0xCE, 0x95, 0x62, 0xA0, 0x55 ),
    374              BYTES_TO_T_UINT_8( 0xAC, 0xBB, 0xDC, 0xF9, 0x7E, 0x66, 0xBE, 0x79 ),
    375          };
    376          static const mbedtls_mpi_uint secp256k1_gy[] = {
    377              BYTES_TO_T_UINT_8( 0xB8, 0xD4, 0x10, 0xFB, 0x8F, 0xD0, 0x47, 0x9C ),
    378              BYTES_TO_T_UINT_8( 0x19, 0x54, 0x85, 0xA6, 0x48, 0xB4, 0x17, 0xFD ),
    379              BYTES_TO_T_UINT_8( 0xA8, 0x08, 0x11, 0x0E, 0xFC, 0xFB, 0xA4, 0x5D ),
    380              BYTES_TO_T_UINT_8( 0x65, 0xC4, 0xA3, 0x26, 0x77, 0xDA, 0x3A, 0x48 ),
    381          };
    382          static const mbedtls_mpi_uint secp256k1_n[] = {
    383              BYTES_TO_T_UINT_8( 0x41, 0x41, 0x36, 0xD0, 0x8C, 0x5E, 0xD2, 0xBF ),
    384              BYTES_TO_T_UINT_8( 0x3B, 0xA0, 0x48, 0xAF, 0xE6, 0xDC, 0xAE, 0xBA ),
    385              BYTES_TO_T_UINT_8( 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    386              BYTES_TO_T_UINT_8( 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ),
    387          };
    388          #endif /* MBEDTLS_ECP_DP_SECP256K1_ENABLED */
    389          
    390          /*
    391           * Domain parameters for brainpoolP256r1 (RFC 5639 3.4)
    392           */
    393          #if defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)
    394          static const mbedtls_mpi_uint brainpoolP256r1_p[] = {
    395              BYTES_TO_T_UINT_8( 0x77, 0x53, 0x6E, 0x1F, 0x1D, 0x48, 0x13, 0x20 ),
    396              BYTES_TO_T_UINT_8( 0x28, 0x20, 0x26, 0xD5, 0x23, 0xF6, 0x3B, 0x6E ),
    397              BYTES_TO_T_UINT_8( 0x72, 0x8D, 0x83, 0x9D, 0x90, 0x0A, 0x66, 0x3E ),
    398              BYTES_TO_T_UINT_8( 0xBC, 0xA9, 0xEE, 0xA1, 0xDB, 0x57, 0xFB, 0xA9 ),
    399          };
    400          static const mbedtls_mpi_uint brainpoolP256r1_a[] = {
    401              BYTES_TO_T_UINT_8( 0xD9, 0xB5, 0x30, 0xF3, 0x44, 0x4B, 0x4A, 0xE9 ),
    402              BYTES_TO_T_UINT_8( 0x6C, 0x5C, 0xDC, 0x26, 0xC1, 0x55, 0x80, 0xFB ),
    403              BYTES_TO_T_UINT_8( 0xE7, 0xFF, 0x7A, 0x41, 0x30, 0x75, 0xF6, 0xEE ),
    404              BYTES_TO_T_UINT_8( 0x57, 0x30, 0x2C, 0xFC, 0x75, 0x09, 0x5A, 0x7D ),
    405          };
    406          static const mbedtls_mpi_uint brainpoolP256r1_b[] = {
    407              BYTES_TO_T_UINT_8( 0xB6, 0x07, 0x8C, 0xFF, 0x18, 0xDC, 0xCC, 0x6B ),
    408              BYTES_TO_T_UINT_8( 0xCE, 0xE1, 0xF7, 0x5C, 0x29, 0x16, 0x84, 0x95 ),
    409              BYTES_TO_T_UINT_8( 0xBF, 0x7C, 0xD7, 0xBB, 0xD9, 0xB5, 0x30, 0xF3 ),
    410              BYTES_TO_T_UINT_8( 0x44, 0x4B, 0x4A, 0xE9, 0x6C, 0x5C, 0xDC, 0x26 ),
    411          };
    412          static const mbedtls_mpi_uint brainpoolP256r1_gx[] = {
    413              BYTES_TO_T_UINT_8( 0x62, 0x32, 0xCE, 0x9A, 0xBD, 0x53, 0x44, 0x3A ),
    414              BYTES_TO_T_UINT_8( 0xC2, 0x23, 0xBD, 0xE3, 0xE1, 0x27, 0xDE, 0xB9 ),
    415              BYTES_TO_T_UINT_8( 0xAF, 0xB7, 0x81, 0xFC, 0x2F, 0x48, 0x4B, 0x2C ),
    416              BYTES_TO_T_UINT_8( 0xCB, 0x57, 0x7E, 0xCB, 0xB9, 0xAE, 0xD2, 0x8B ),
    417          };
    418          static const mbedtls_mpi_uint brainpoolP256r1_gy[] = {
    419              BYTES_TO_T_UINT_8( 0x97, 0x69, 0x04, 0x2F, 0xC7, 0x54, 0x1D, 0x5C ),
    420              BYTES_TO_T_UINT_8( 0x54, 0x8E, 0xED, 0x2D, 0x13, 0x45, 0x77, 0xC2 ),
    421              BYTES_TO_T_UINT_8( 0xC9, 0x1D, 0x61, 0x14, 0x1A, 0x46, 0xF8, 0x97 ),
    422              BYTES_TO_T_UINT_8( 0xFD, 0xC4, 0xDA, 0xC3, 0x35, 0xF8, 0x7E, 0x54 ),
    423          };
    424          static const mbedtls_mpi_uint brainpoolP256r1_n[] = {
    425              BYTES_TO_T_UINT_8( 0xA7, 0x56, 0x48, 0x97, 0x82, 0x0E, 0x1E, 0x90 ),
    426              BYTES_TO_T_UINT_8( 0xF7, 0xA6, 0x61, 0xB5, 0xA3, 0x7A, 0x39, 0x8C ),
    427              BYTES_TO_T_UINT_8( 0x71, 0x8D, 0x83, 0x9D, 0x90, 0x0A, 0x66, 0x3E ),
    428              BYTES_TO_T_UINT_8( 0xBC, 0xA9, 0xEE, 0xA1, 0xDB, 0x57, 0xFB, 0xA9 ),
    429          };
    430          #endif /* MBEDTLS_ECP_DP_BP256R1_ENABLED */
    431          
    432          /*
    433           * Domain parameters for brainpoolP384r1 (RFC 5639 3.6)
    434           */
    435          #if defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)
    436          static const mbedtls_mpi_uint brainpoolP384r1_p[] = {
    437              BYTES_TO_T_UINT_8( 0x53, 0xEC, 0x07, 0x31, 0x13, 0x00, 0x47, 0x87 ),
    438              BYTES_TO_T_UINT_8( 0x71, 0x1A, 0x1D, 0x90, 0x29, 0xA7, 0xD3, 0xAC ),
    439              BYTES_TO_T_UINT_8( 0x23, 0x11, 0xB7, 0x7F, 0x19, 0xDA, 0xB1, 0x12 ),
    440              BYTES_TO_T_UINT_8( 0xB4, 0x56, 0x54, 0xED, 0x09, 0x71, 0x2F, 0x15 ),
    441              BYTES_TO_T_UINT_8( 0xDF, 0x41, 0xE6, 0x50, 0x7E, 0x6F, 0x5D, 0x0F ),
    442              BYTES_TO_T_UINT_8( 0x28, 0x6D, 0x38, 0xA3, 0x82, 0x1E, 0xB9, 0x8C ),
    443          };
    444          static const mbedtls_mpi_uint brainpoolP384r1_a[] = {
    445              BYTES_TO_T_UINT_8( 0x26, 0x28, 0xCE, 0x22, 0xDD, 0xC7, 0xA8, 0x04 ),
    446              BYTES_TO_T_UINT_8( 0xEB, 0xD4, 0x3A, 0x50, 0x4A, 0x81, 0xA5, 0x8A ),
    447              BYTES_TO_T_UINT_8( 0x0F, 0xF9, 0x91, 0xBA, 0xEF, 0x65, 0x91, 0x13 ),
    448              BYTES_TO_T_UINT_8( 0x87, 0x27, 0xB2, 0x4F, 0x8E, 0xA2, 0xBE, 0xC2 ),
    449              BYTES_TO_T_UINT_8( 0xA0, 0xAF, 0x05, 0xCE, 0x0A, 0x08, 0x72, 0x3C ),
    450              BYTES_TO_T_UINT_8( 0x0C, 0x15, 0x8C, 0x3D, 0xC6, 0x82, 0xC3, 0x7B ),
    451          };
    452          static const mbedtls_mpi_uint brainpoolP384r1_b[] = {
    453              BYTES_TO_T_UINT_8( 0x11, 0x4C, 0x50, 0xFA, 0x96, 0x86, 0xB7, 0x3A ),
    454              BYTES_TO_T_UINT_8( 0x94, 0xC9, 0xDB, 0x95, 0x02, 0x39, 0xB4, 0x7C ),
    455              BYTES_TO_T_UINT_8( 0xD5, 0x62, 0xEB, 0x3E, 0xA5, 0x0E, 0x88, 0x2E ),
    456              BYTES_TO_T_UINT_8( 0xA6, 0xD2, 0xDC, 0x07, 0xE1, 0x7D, 0xB7, 0x2F ),
    457              BYTES_TO_T_UINT_8( 0x7C, 0x44, 0xF0, 0x16, 0x54, 0xB5, 0x39, 0x8B ),
    458              BYTES_TO_T_UINT_8( 0x26, 0x28, 0xCE, 0x22, 0xDD, 0xC7, 0xA8, 0x04 ),
    459          };
    460          static const mbedtls_mpi_uint brainpoolP384r1_gx[] = {
    461              BYTES_TO_T_UINT_8( 0x1E, 0xAF, 0xD4, 0x47, 0xE2, 0xB2, 0x87, 0xEF ),
    462              BYTES_TO_T_UINT_8( 0xAA, 0x46, 0xD6, 0x36, 0x34, 0xE0, 0x26, 0xE8 ),
    463              BYTES_TO_T_UINT_8( 0xE8, 0x10, 0xBD, 0x0C, 0xFE, 0xCA, 0x7F, 0xDB ),
    464              BYTES_TO_T_UINT_8( 0xE3, 0x4F, 0xF1, 0x7E, 0xE7, 0xA3, 0x47, 0x88 ),
    465              BYTES_TO_T_UINT_8( 0x6B, 0x3F, 0xC1, 0xB7, 0x81, 0x3A, 0xA6, 0xA2 ),
    466              BYTES_TO_T_UINT_8( 0xFF, 0x45, 0xCF, 0x68, 0xF0, 0x64, 0x1C, 0x1D ),
    467          };
    468          static const mbedtls_mpi_uint brainpoolP384r1_gy[] = {
    469              BYTES_TO_T_UINT_8( 0x15, 0x53, 0x3C, 0x26, 0x41, 0x03, 0x82, 0x42 ),
    470              BYTES_TO_T_UINT_8( 0x11, 0x81, 0x91, 0x77, 0x21, 0x46, 0x46, 0x0E ),
    471              BYTES_TO_T_UINT_8( 0x28, 0x29, 0x91, 0xF9, 0x4F, 0x05, 0x9C, 0xE1 ),
    472              BYTES_TO_T_UINT_8( 0x64, 0x58, 0xEC, 0xFE, 0x29, 0x0B, 0xB7, 0x62 ),
    473              BYTES_TO_T_UINT_8( 0x52, 0xD5, 0xCF, 0x95, 0x8E, 0xEB, 0xB1, 0x5C ),
    474              BYTES_TO_T_UINT_8( 0xA4, 0xC2, 0xF9, 0x20, 0x75, 0x1D, 0xBE, 0x8A ),
    475          };
    476          static const mbedtls_mpi_uint brainpoolP384r1_n[] = {
    477              BYTES_TO_T_UINT_8( 0x65, 0x65, 0x04, 0xE9, 0x02, 0x32, 0x88, 0x3B ),
    478              BYTES_TO_T_UINT_8( 0x10, 0xC3, 0x7F, 0x6B, 0xAF, 0xB6, 0x3A, 0xCF ),
    479              BYTES_TO_T_UINT_8( 0xA7, 0x25, 0x04, 0xAC, 0x6C, 0x6E, 0x16, 0x1F ),
    480              BYTES_TO_T_UINT_8( 0xB3, 0x56, 0x54, 0xED, 0x09, 0x71, 0x2F, 0x15 ),
    481              BYTES_TO_T_UINT_8( 0xDF, 0x41, 0xE6, 0x50, 0x7E, 0x6F, 0x5D, 0x0F ),
    482              BYTES_TO_T_UINT_8( 0x28, 0x6D, 0x38, 0xA3, 0x82, 0x1E, 0xB9, 0x8C ),
    483          };
    484          #endif /* MBEDTLS_ECP_DP_BP384R1_ENABLED */
    485          
    486          /*
    487           * Domain parameters for brainpoolP512r1 (RFC 5639 3.7)
    488           */
    489          #if defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)
    490          static const mbedtls_mpi_uint brainpoolP512r1_p[] = {
    491              BYTES_TO_T_UINT_8( 0xF3, 0x48, 0x3A, 0x58, 0x56, 0x60, 0xAA, 0x28 ),
    492              BYTES_TO_T_UINT_8( 0x85, 0xC6, 0x82, 0x2D, 0x2F, 0xFF, 0x81, 0x28 ),
    493              BYTES_TO_T_UINT_8( 0xE6, 0x80, 0xA3, 0xE6, 0x2A, 0xA1, 0xCD, 0xAE ),
    494              BYTES_TO_T_UINT_8( 0x42, 0x68, 0xC6, 0x9B, 0x00, 0x9B, 0x4D, 0x7D ),
    495              BYTES_TO_T_UINT_8( 0x71, 0x08, 0x33, 0x70, 0xCA, 0x9C, 0x63, 0xD6 ),
    496              BYTES_TO_T_UINT_8( 0x0E, 0xD2, 0xC9, 0xB3, 0xB3, 0x8D, 0x30, 0xCB ),
    497              BYTES_TO_T_UINT_8( 0x07, 0xFC, 0xC9, 0x33, 0xAE, 0xE6, 0xD4, 0x3F ),
    498              BYTES_TO_T_UINT_8( 0x8B, 0xC4, 0xE9, 0xDB, 0xB8, 0x9D, 0xDD, 0xAA ),
    499          };
    500          static const mbedtls_mpi_uint brainpoolP512r1_a[] = {
    501              BYTES_TO_T_UINT_8( 0xCA, 0x94, 0xFC, 0x77, 0x4D, 0xAC, 0xC1, 0xE7 ),
    502              BYTES_TO_T_UINT_8( 0xB9, 0xC7, 0xF2, 0x2B, 0xA7, 0x17, 0x11, 0x7F ),
    503              BYTES_TO_T_UINT_8( 0xB5, 0xC8, 0x9A, 0x8B, 0xC9, 0xF1, 0x2E, 0x0A ),
    504              BYTES_TO_T_UINT_8( 0xA1, 0x3A, 0x25, 0xA8, 0x5A, 0x5D, 0xED, 0x2D ),
    505              BYTES_TO_T_UINT_8( 0xBC, 0x63, 0x98, 0xEA, 0xCA, 0x41, 0x34, 0xA8 ),
    506              BYTES_TO_T_UINT_8( 0x10, 0x16, 0xF9, 0x3D, 0x8D, 0xDD, 0xCB, 0x94 ),
    507              BYTES_TO_T_UINT_8( 0xC5, 0x4C, 0x23, 0xAC, 0x45, 0x71, 0x32, 0xE2 ),
    508              BYTES_TO_T_UINT_8( 0x89, 0x3B, 0x60, 0x8B, 0x31, 0xA3, 0x30, 0x78 ),
    509          };
    510          static const mbedtls_mpi_uint brainpoolP512r1_b[] = {
    511              BYTES_TO_T_UINT_8( 0x23, 0xF7, 0x16, 0x80, 0x63, 0xBD, 0x09, 0x28 ),
    512              BYTES_TO_T_UINT_8( 0xDD, 0xE5, 0xBA, 0x5E, 0xB7, 0x50, 0x40, 0x98 ),
    513              BYTES_TO_T_UINT_8( 0x67, 0x3E, 0x08, 0xDC, 0xCA, 0x94, 0xFC, 0x77 ),
    514              BYTES_TO_T_UINT_8( 0x4D, 0xAC, 0xC1, 0xE7, 0xB9, 0xC7, 0xF2, 0x2B ),
    515              BYTES_TO_T_UINT_8( 0xA7, 0x17, 0x11, 0x7F, 0xB5, 0xC8, 0x9A, 0x8B ),
    516              BYTES_TO_T_UINT_8( 0xC9, 0xF1, 0x2E, 0x0A, 0xA1, 0x3A, 0x25, 0xA8 ),
    517              BYTES_TO_T_UINT_8( 0x5A, 0x5D, 0xED, 0x2D, 0xBC, 0x63, 0x98, 0xEA ),
    518              BYTES_TO_T_UINT_8( 0xCA, 0x41, 0x34, 0xA8, 0x10, 0x16, 0xF9, 0x3D ),
    519          };
    520          static const mbedtls_mpi_uint brainpoolP512r1_gx[] = {
    521              BYTES_TO_T_UINT_8( 0x22, 0xF8, 0xB9, 0xBC, 0x09, 0x22, 0x35, 0x8B ),
    522              BYTES_TO_T_UINT_8( 0x68, 0x5E, 0x6A, 0x40, 0x47, 0x50, 0x6D, 0x7C ),
    523              BYTES_TO_T_UINT_8( 0x5F, 0x7D, 0xB9, 0x93, 0x7B, 0x68, 0xD1, 0x50 ),
    524              BYTES_TO_T_UINT_8( 0x8D, 0xD4, 0xD0, 0xE2, 0x78, 0x1F, 0x3B, 0xFF ),
    525              BYTES_TO_T_UINT_8( 0x8E, 0x09, 0xD0, 0xF4, 0xEE, 0x62, 0x3B, 0xB4 ),
    526              BYTES_TO_T_UINT_8( 0xC1, 0x16, 0xD9, 0xB5, 0x70, 0x9F, 0xED, 0x85 ),
    527              BYTES_TO_T_UINT_8( 0x93, 0x6A, 0x4C, 0x9C, 0x2E, 0x32, 0x21, 0x5A ),
    528              BYTES_TO_T_UINT_8( 0x64, 0xD9, 0x2E, 0xD8, 0xBD, 0xE4, 0xAE, 0x81 ),
    529          };
    530          static const mbedtls_mpi_uint brainpoolP512r1_gy[] = {
    531              BYTES_TO_T_UINT_8( 0x92, 0x08, 0xD8, 0x3A, 0x0F, 0x1E, 0xCD, 0x78 ),
    532              BYTES_TO_T_UINT_8( 0x06, 0x54, 0xF0, 0xA8, 0x2F, 0x2B, 0xCA, 0xD1 ),
    533              BYTES_TO_T_UINT_8( 0xAE, 0x63, 0x27, 0x8A, 0xD8, 0x4B, 0xCA, 0x5B ),
    534              BYTES_TO_T_UINT_8( 0x5E, 0x48, 0x5F, 0x4A, 0x49, 0xDE, 0xDC, 0xB2 ),
    535              BYTES_TO_T_UINT_8( 0x11, 0x81, 0x1F, 0x88, 0x5B, 0xC5, 0x00, 0xA0 ),
    536              BYTES_TO_T_UINT_8( 0x1A, 0x7B, 0xA5, 0x24, 0x00, 0xF7, 0x09, 0xF2 ),
    537              BYTES_TO_T_UINT_8( 0xFD, 0x22, 0x78, 0xCF, 0xA9, 0xBF, 0xEA, 0xC0 ),
    538              BYTES_TO_T_UINT_8( 0xEC, 0x32, 0x63, 0x56, 0x5D, 0x38, 0xDE, 0x7D ),
    539          };
    540          static const mbedtls_mpi_uint brainpoolP512r1_n[] = {
    541              BYTES_TO_T_UINT_8( 0x69, 0x00, 0xA9, 0x9C, 0x82, 0x96, 0x87, 0xB5 ),
    542              BYTES_TO_T_UINT_8( 0xDD, 0xDA, 0x5D, 0x08, 0x81, 0xD3, 0xB1, 0x1D ),
    543              BYTES_TO_T_UINT_8( 0x47, 0x10, 0xAC, 0x7F, 0x19, 0x61, 0x86, 0x41 ),
    544              BYTES_TO_T_UINT_8( 0x19, 0x26, 0xA9, 0x4C, 0x41, 0x5C, 0x3E, 0x55 ),
    545              BYTES_TO_T_UINT_8( 0x70, 0x08, 0x33, 0x70, 0xCA, 0x9C, 0x63, 0xD6 ),
    546              BYTES_TO_T_UINT_8( 0x0E, 0xD2, 0xC9, 0xB3, 0xB3, 0x8D, 0x30, 0xCB ),
    547              BYTES_TO_T_UINT_8( 0x07, 0xFC, 0xC9, 0x33, 0xAE, 0xE6, 0xD4, 0x3F ),
    548              BYTES_TO_T_UINT_8( 0x8B, 0xC4, 0xE9, 0xDB, 0xB8, 0x9D, 0xDD, 0xAA ),
    549          };
    550          #endif /* MBEDTLS_ECP_DP_BP512R1_ENABLED */
    551          
    552          /*
    553           * Create an MPI from embedded constants
    554           * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
    555           */

   \                                 In section .text, align 2, keep-with-next
    556          static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
    557          {
    558              X->s = 1;
   \                     ecp_mpi_load: (+1)
   \   00000000   0x2301             MOVS     R3,#+1
   \   00000002   0x6003             STR      R3,[R0, #+0]
    559              X->n = len / sizeof( mbedtls_mpi_uint );
   \   00000004   0x0892             LSRS     R2,R2,#+2
   \   00000006   0x6042             STR      R2,[R0, #+4]
    560              X->p = (mbedtls_mpi_uint *) p;
   \   00000008   0x6081             STR      R1,[R0, #+8]
    561          }
   \   0000000A   0x4770             BX       LR               ;; return
    562          
    563          /*
    564           * Set an MPI to static value 1
    565           */
    566          static inline void ecp_mpi_set1( mbedtls_mpi *X )
    567          {

   \                                 In section .data, align 4
    568              static mbedtls_mpi_uint one[] = { 1 };
   \                     `ecp_mpi_set1::one`:
   \   00000000   0x00000001         DC32 1
    569              X->s = 1;
    570              X->n = 1;
    571              X->p = one;
    572          }
    573          
    574          /*
    575           * Make group available from embedded constants
    576           */

   \                                 In section .text, align 2, keep-with-next
    577          static int ecp_group_load( mbedtls_ecp_group *grp,
    578                                     const mbedtls_mpi_uint *p,  size_t plen,
    579                                     const mbedtls_mpi_uint *a,  size_t alen,
    580                                     const mbedtls_mpi_uint *b,  size_t blen,
    581                                     const mbedtls_mpi_uint *gx, size_t gxlen,
    582                                     const mbedtls_mpi_uint *gy, size_t gylen,
    583                                     const mbedtls_mpi_uint *n,  size_t nlen)
    584          {
   \                     ecp_group_load: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x001D             MOVS     R5,R3
    585              ecp_mpi_load( &grp->P, p, plen );
   \   00000006   0x1D20             ADDS     R0,R4,#+4
   \   00000008   0x.... 0x....      BL       ecp_mpi_load
    586              if( a != NULL )
   \   0000000C   0x2D00             CMP      R5,#+0
   \   0000000E   0xD005             BEQ      ??ecp_group_load_0
    587                  ecp_mpi_load( &grp->A, a, alen );
   \   00000010   0x9A04             LDR      R2,[SP, #+16]
   \   00000012   0x0029             MOVS     R1,R5
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x3010             ADDS     R0,R0,#+16
   \   00000018   0x.... 0x....      BL       ecp_mpi_load
    588              ecp_mpi_load( &grp->B, b, blen );
   \                     ??ecp_group_load_0: (+1)
   \   0000001C   0x9A06             LDR      R2,[SP, #+24]
   \   0000001E   0x9905             LDR      R1,[SP, #+20]
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x301C             ADDS     R0,R0,#+28
   \   00000024   0x.... 0x....      BL       ecp_mpi_load
    589              ecp_mpi_load( &grp->N, n, nlen );
   \   00000028   0x9A0C             LDR      R2,[SP, #+48]
   \   0000002A   0x990B             LDR      R1,[SP, #+44]
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x304C             ADDS     R0,R0,#+76
   \   00000030   0x.... 0x....      BL       ecp_mpi_load
    590          
    591              ecp_mpi_load( &grp->G.X, gx, gxlen );
   \   00000034   0x9A08             LDR      R2,[SP, #+32]
   \   00000036   0x9907             LDR      R1,[SP, #+28]
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0x3028             ADDS     R0,R0,#+40
   \   0000003C   0x.... 0x....      BL       ecp_mpi_load
    592              ecp_mpi_load( &grp->G.Y, gy, gylen );
   \   00000040   0x9A0A             LDR      R2,[SP, #+40]
   \   00000042   0x9909             LDR      R1,[SP, #+36]
   \   00000044   0x0020             MOVS     R0,R4
   \   00000046   0x3034             ADDS     R0,R0,#+52
   \   00000048   0x.... 0x....      BL       ecp_mpi_load
    593              ecp_mpi_set1( &grp->G.Z );
   \   0000004C   0x2501             MOVS     R5,#+1
   \   0000004E   0x6425             STR      R5,[R4, #+64]
   \   00000050   0x6465             STR      R5,[R4, #+68]
   \   00000052   0x....             LDR      R0,??DataTable12
   \   00000054   0x64A0             STR      R0,[R4, #+72]
    594          
    595              grp->pbits = mbedtls_mpi_bitlen( &grp->P );
   \   00000056   0x1D20             ADDS     R0,R4,#+4
   \   00000058   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   0000005C   0x65A0             STR      R0,[R4, #+88]
    596              grp->nbits = mbedtls_mpi_bitlen( &grp->N );
   \   0000005E   0x0020             MOVS     R0,R4
   \   00000060   0x304C             ADDS     R0,R0,#+76
   \   00000062   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   00000066   0x65E0             STR      R0,[R4, #+92]
    597          
    598              grp->h = 1;
   \   00000068   0x6625             STR      R5,[R4, #+96]
    599          
    600              return( 0 );
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    601          }
    602          
    603          #if defined(MBEDTLS_ECP_NIST_OPTIM)
    604          /* Forward declarations */
    605          #if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)
    606          static int ecp_mod_p192( mbedtls_mpi * );
    607          #endif
    608          #if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)
    609          static int ecp_mod_p224( mbedtls_mpi * );
    610          #endif
    611          #if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
    612          static int ecp_mod_p256( mbedtls_mpi * );
    613          #endif
    614          #if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
    615          static int ecp_mod_p384( mbedtls_mpi * );
    616          #endif
    617          #if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)
    618          static int ecp_mod_p521( mbedtls_mpi * );
    619          #endif
    620          
    621          #define NIST_MODP( P )      grp->modp = ecp_mod_ ## P;
    622          #else
    623          #define NIST_MODP( P )
    624          #endif /* MBEDTLS_ECP_NIST_OPTIM */
    625          
    626          /* Additional forward declarations */
    627          #if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)
    628          static int ecp_mod_p255( mbedtls_mpi * );
    629          #endif
    630          #if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)
    631          static int ecp_mod_p192k1( mbedtls_mpi * );
    632          #endif
    633          #if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)
    634          static int ecp_mod_p224k1( mbedtls_mpi * );
    635          #endif
    636          #if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)
    637          static int ecp_mod_p256k1( mbedtls_mpi * );
    638          #endif
    639          
    640          #define LOAD_GROUP_A( G )   ecp_group_load( grp,            \
    641                                      G ## _p,  sizeof( G ## _p  ),   \
    642                                      G ## _a,  sizeof( G ## _a  ),   \
    643                                      G ## _b,  sizeof( G ## _b  ),   \
    644                                      G ## _gx, sizeof( G ## _gx ),   \
    645                                      G ## _gy, sizeof( G ## _gy ),   \
    646                                      G ## _n,  sizeof( G ## _n  ) )
    647          
    648          #define LOAD_GROUP( G )     ecp_group_load( grp,            \
    649                                      G ## _p,  sizeof( G ## _p  ),   \
    650                                      NULL,     0,                    \
    651                                      G ## _b,  sizeof( G ## _b  ),   \
    652                                      G ## _gx, sizeof( G ## _gx ),   \
    653                                      G ## _gy, sizeof( G ## _gy ),   \
    654                                      G ## _n,  sizeof( G ## _n  ) )
    655          
    656          #if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)
    657          /*
    658           * Specialized function for creating the Curve25519 group
    659           */
    660          static int ecp_use_curve25519( mbedtls_ecp_group *grp )
    661          {
    662              int ret;
    663          
    664              /* Actually ( A + 2 ) / 4 */
    665              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, "01DB42" ) );
    666          
    667              /* P = 2^255 - 19 */
    668              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );
    669              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 255 ) );
    670              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 19 ) );
    671              grp->pbits = mbedtls_mpi_bitlen( &grp->P );
    672          
    673              /* Y intentionaly not set, since we use x/z coordinates.
    674               * This is used as a marker to identify Montgomery curves! */
    675              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 9 ) );
    676              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );
    677              mbedtls_mpi_free( &grp->G.Y );
    678          
    679              /* Actually, the required msb for private keys */
    680              grp->nbits = 254;
    681          
    682          cleanup:
    683              if( ret != 0 )
    684                  mbedtls_ecp_group_free( grp );
    685          
    686              return( ret );
    687          }
    688          #endif /* MBEDTLS_ECP_DP_CURVE25519_ENABLED */
    689          
    690          /*
    691           * Set a group using well-known domain parameters
    692           */

   \                                 In section .text, align 4, keep-with-next
    693          int mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id )
    694          {
   \                     mbedtls_ecp_group_load: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    695              mbedtls_ecp_group_free( grp );
   \   00000008   0x.... 0x....      BL       mbedtls_ecp_group_free
    696          
    697              grp->id = id;
   \   0000000C   0x7025             STRB     R5,[R4, #+0]
    698          
    699              switch( id )
   \   0000000E   0x2D03             CMP      R5,#+3
   \   00000010   0xD004             BEQ      ??mbedtls_ecp_group_load_0
   \   00000012   0x2D04             CMP      R5,#+4
   \   00000014   0xD01A             BEQ      ??mbedtls_ecp_group_load_1
   \   00000016   0x2D09             CMP      R5,#+9
   \   00000018   0xD033             BEQ      ??mbedtls_ecp_group_load_2
   \   0000001A   0xE070             B        ??mbedtls_ecp_group_load_3
    700              {
    701          #if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)
    702                  case MBEDTLS_ECP_DP_SECP192R1:
    703                      NIST_MODP( p192 );
    704                      return( LOAD_GROUP( secp192r1 ) );
    705          #endif /* MBEDTLS_ECP_DP_SECP192R1_ENABLED */
    706          
    707          #if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)
    708                  case MBEDTLS_ECP_DP_SECP224R1:
    709                      NIST_MODP( p224 );
    710                      return( LOAD_GROUP( secp224r1 ) );
    711          #endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */
    712          
    713          #if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
    714                  case MBEDTLS_ECP_DP_SECP256R1:
    715                      NIST_MODP( p256 );
   \                     ??mbedtls_ecp_group_load_0: (+1)
   \   0000001C   0x....             LDR      R0,??DataTable12_1
   \   0000001E   0x6660             STR      R0,[R4, #+100]
    716                      return( LOAD_GROUP( secp256r1 ) );
   \   00000020   0x2020             MOVS     R0,#+32
   \   00000022   0x9008             STR      R0,[SP, #+32]
   \   00000024   0x....             ADR.N    R0,secp256r1_n
   \   00000026   0x9007             STR      R0,[SP, #+28]
   \   00000028   0x2020             MOVS     R0,#+32
   \   0000002A   0x9006             STR      R0,[SP, #+24]
   \   0000002C   0x....             ADR.N    R0,secp256r1_gy
   \   0000002E   0x9005             STR      R0,[SP, #+20]
   \   00000030   0x2020             MOVS     R0,#+32
   \   00000032   0x9004             STR      R0,[SP, #+16]
   \   00000034   0x....             ADR.N    R0,secp256r1_gx
   \   00000036   0x9003             STR      R0,[SP, #+12]
   \   00000038   0x2020             MOVS     R0,#+32
   \   0000003A   0x9002             STR      R0,[SP, #+8]
   \   0000003C   0x....             ADR.N    R0,secp256r1_b
   \   0000003E   0x9001             STR      R0,[SP, #+4]
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x9000             STR      R0,[SP, #+0]
   \   00000044   0x2300             MOVS     R3,#+0
   \   00000046   0x2220             MOVS     R2,#+32
   \   00000048   0x....             ADR.N    R1,secp256r1_p
   \   0000004A   0xE016             B.N      ??mbedtls_ecp_group_load_4
    717          #endif /* MBEDTLS_ECP_DP_SECP256R1_ENABLED */
    718          
    719          #if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
    720                  case MBEDTLS_ECP_DP_SECP384R1:
    721                      NIST_MODP( p384 );
   \                     ??mbedtls_ecp_group_load_1: (+1)
   \   0000004C   0x....             LDR      R0,??DataTable12_2
   \   0000004E   0x6660             STR      R0,[R4, #+100]
    722                      return( LOAD_GROUP( secp384r1 ) );
   \   00000050   0x2030             MOVS     R0,#+48
   \   00000052   0x9008             STR      R0,[SP, #+32]
   \   00000054   0x....             ADR.N    R0,secp384r1_n
   \   00000056   0x9007             STR      R0,[SP, #+28]
   \   00000058   0x2030             MOVS     R0,#+48
   \   0000005A   0x9006             STR      R0,[SP, #+24]
   \   0000005C   0x....             ADR.N    R0,secp384r1_gy
   \   0000005E   0x9005             STR      R0,[SP, #+20]
   \   00000060   0x2030             MOVS     R0,#+48
   \   00000062   0x9004             STR      R0,[SP, #+16]
   \   00000064   0x....             ADR.N    R0,secp384r1_gx
   \   00000066   0x9003             STR      R0,[SP, #+12]
   \   00000068   0x2030             MOVS     R0,#+48
   \   0000006A   0x9002             STR      R0,[SP, #+8]
   \   0000006C   0x....             ADR.N    R0,secp384r1_b
   \   0000006E   0x9001             STR      R0,[SP, #+4]
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x9000             STR      R0,[SP, #+0]
   \   00000074   0x2300             MOVS     R3,#+0
   \   00000076   0x2230             MOVS     R2,#+48
   \   00000078   0x....             ADR.N    R1,secp384r1_p
   \                     ??mbedtls_ecp_group_load_4: (+1)
   \   0000007A   0x0020             MOVS     R0,R4
   \   0000007C   0x.... 0x....      BL       ecp_group_load
   \   00000080   0xE041             B        ??mbedtls_ecp_group_load_5
    723          #endif /* MBEDTLS_ECP_DP_SECP384R1_ENABLED */
    724          
    725          #if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)
    726                  case MBEDTLS_ECP_DP_SECP521R1:
    727                      NIST_MODP( p521 );
    728                      return( LOAD_GROUP( secp521r1 ) );
    729          #endif /* MBEDTLS_ECP_DP_SECP521R1_ENABLED */
    730          
    731          #if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)
    732                  case MBEDTLS_ECP_DP_SECP192K1:
    733                      grp->modp = ecp_mod_p192k1;
    734                      return( LOAD_GROUP_A( secp192k1 ) );
    735          #endif /* MBEDTLS_ECP_DP_SECP192K1_ENABLED */
    736          
    737          #if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)
    738                  case MBEDTLS_ECP_DP_SECP224K1:
    739                      grp->modp = ecp_mod_p224k1;
    740                      return( LOAD_GROUP_A( secp224k1 ) );
    741          #endif /* MBEDTLS_ECP_DP_SECP224K1_ENABLED */
    742          
    743          #if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)
    744                  case MBEDTLS_ECP_DP_SECP256K1:
    745                      grp->modp = ecp_mod_p256k1;
    746                      return( LOAD_GROUP_A( secp256k1 ) );
    747          #endif /* MBEDTLS_ECP_DP_SECP256K1_ENABLED */
    748          
    749          #if defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)
    750                  case MBEDTLS_ECP_DP_BP256R1:
    751                      return( LOAD_GROUP_A( brainpoolP256r1 ) );
    752          #endif /* MBEDTLS_ECP_DP_BP256R1_ENABLED */
    753          
    754          #if defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)
    755                  case MBEDTLS_ECP_DP_BP384R1:
    756                      return( LOAD_GROUP_A( brainpoolP384r1 ) );
    757          #endif /* MBEDTLS_ECP_DP_BP384R1_ENABLED */
    758          
    759          #if defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)
    760                  case MBEDTLS_ECP_DP_BP512R1:
    761                      return( LOAD_GROUP_A( brainpoolP512r1 ) );
    762          #endif /* MBEDTLS_ECP_DP_BP512R1_ENABLED */
    763          
    764          #if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)
    765                  case MBEDTLS_ECP_DP_CURVE25519:
    766                      grp->modp = ecp_mod_p255;
   \                     ??mbedtls_ecp_group_load_2: (+1)
   \   00000082   0x....             LDR      R0,??DataTable12_3
   \   00000084   0x6660             STR      R0,[R4, #+100]
    767                      return( ecp_use_curve25519( grp ) );
   \   00000086   0xBF00             Nop      
   \   00000088   0x....             ADR.N    R2,?_0
   \   0000008A   0x2110             MOVS     R1,#+16
   \   0000008C   0x0020             MOVS     R0,R4
   \   0000008E   0x3010             ADDS     R0,R0,#+16
   \   00000090   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   00000094   0x0005             MOVS     R5,R0
   \   00000096   0xD12B             BNE      ??mbedtls_ecp_group_load_6
   \   00000098   0x2101             MOVS     R1,#+1
   \   0000009A   0x1D20             ADDS     R0,R4,#+4
   \   0000009C   0x.... 0x....      BL       mbedtls_mpi_lset
   \   000000A0   0x0005             MOVS     R5,R0
   \   000000A2   0xD125             BNE      ??mbedtls_ecp_group_load_6
   \   000000A4   0x21FF             MOVS     R1,#+255
   \   000000A6   0x1D20             ADDS     R0,R4,#+4
   \   000000A8   0x.... 0x....      BL       mbedtls_mpi_shift_l
   \   000000AC   0x0005             MOVS     R5,R0
   \   000000AE   0xD11F             BNE      ??mbedtls_ecp_group_load_6
   \   000000B0   0x2213             MOVS     R2,#+19
   \   000000B2   0x1D21             ADDS     R1,R4,#+4
   \   000000B4   0x1D20             ADDS     R0,R4,#+4
   \   000000B6   0x.... 0x....      BL       mbedtls_mpi_sub_int
   \   000000BA   0x0005             MOVS     R5,R0
   \   000000BC   0xD118             BNE      ??mbedtls_ecp_group_load_6
   \   000000BE   0x1D20             ADDS     R0,R4,#+4
   \   000000C0   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   000000C4   0x65A0             STR      R0,[R4, #+88]
   \   000000C6   0x2109             MOVS     R1,#+9
   \   000000C8   0x0020             MOVS     R0,R4
   \   000000CA   0x3028             ADDS     R0,R0,#+40
   \   000000CC   0x.... 0x....      BL       mbedtls_mpi_lset
   \   000000D0   0x0005             MOVS     R5,R0
   \   000000D2   0xD10D             BNE      ??mbedtls_ecp_group_load_6
   \   000000D4   0x2101             MOVS     R1,#+1
   \   000000D6   0x0020             MOVS     R0,R4
   \   000000D8   0x3040             ADDS     R0,R0,#+64
   \   000000DA   0x.... 0x....      BL       mbedtls_mpi_lset
   \   000000DE   0x0005             MOVS     R5,R0
   \   000000E0   0xD106             BNE      ??mbedtls_ecp_group_load_6
   \   000000E2   0x0020             MOVS     R0,R4
   \   000000E4   0x3034             ADDS     R0,R0,#+52
   \   000000E6   0x.... 0x....      BL       mbedtls_mpi_free
   \   000000EA   0x20FE             MOVS     R0,#+254
   \   000000EC   0x65E0             STR      R0,[R4, #+92]
   \   000000EE   0xE004             B        ??mbedtls_ecp_group_load_7
   \                     ??mbedtls_ecp_group_load_6: (+1)
   \   000000F0   0x2D00             CMP      R5,#+0
   \   000000F2   0xD002             BEQ      ??mbedtls_ecp_group_load_7
   \   000000F4   0x0020             MOVS     R0,R4
   \   000000F6   0x.... 0x....      BL       mbedtls_ecp_group_free
   \                     ??mbedtls_ecp_group_load_7: (+1)
   \   000000FA   0x0028             MOVS     R0,R5
   \   000000FC   0xE003             B        ??mbedtls_ecp_group_load_5
    768          #endif /* MBEDTLS_ECP_DP_CURVE25519_ENABLED */
    769          
    770                  default:
    771                      mbedtls_ecp_group_free( grp );
   \                     ??mbedtls_ecp_group_load_3: (+1)
   \   000000FE   0x0020             MOVS     R0,R4
   \   00000100   0x.... 0x....      BL       mbedtls_ecp_group_free
    772                      return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   \   00000104   0x....             LDR      R0,??DataTable12_4  ;; 0xffffb180
   \                     ??mbedtls_ecp_group_load_5: (+1)
   \   00000106   0xB009             ADD      SP,SP,#+36
   \   00000108   0xBD30             POP      {R4,R5,PC}       ;; return
    773              }
    774          }
    775          
    776          #if defined(MBEDTLS_ECP_NIST_OPTIM)
    777          /*
    778           * Fast reduction modulo the primes used by the NIST curves.
    779           *
    780           * These functions are critical for speed, but not needed for correct
    781           * operations. So, we make the choice to heavily rely on the internals of our
    782           * bignum library, which creates a tight coupling between these functions and
    783           * our MPI implementation.  However, the coupling between the ECP module and
    784           * MPI remains loose, since these functions can be deactivated at will.
    785           */
    786          
    787          #if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)
    788          /*
    789           * Compared to the way things are presented in FIPS 186-3 D.2,
    790           * we proceed in columns, from right (least significant chunk) to left,
    791           * adding chunks to N in place, and keeping a carry for the next chunk.
    792           * This avoids moving things around in memory, and uselessly adding zeros,
    793           * compared to the more straightforward, line-oriented approach.
    794           *
    795           * For this prime we need to handle data in chunks of 64 bits.
    796           * Since this is always a multiple of our basic mbedtls_mpi_uint, we can
    797           * use a mbedtls_mpi_uint * to designate such a chunk, and small loops to handle it.
    798           */
    799          
    800          /* Add 64-bit chunks (dst += src) and update carry */
    801          static inline void add64( mbedtls_mpi_uint *dst, mbedtls_mpi_uint *src, mbedtls_mpi_uint *carry )
    802          {
    803              unsigned char i;
    804              mbedtls_mpi_uint c = 0;
    805              for( i = 0; i < 8 / sizeof( mbedtls_mpi_uint ); i++, dst++, src++ )
    806              {
    807                  *dst += c;      c  = ( *dst < c );
    808                  *dst += *src;   c += ( *dst < *src );
    809              }
    810              *carry += c;
    811          }
    812          
    813          /* Add carry to a 64-bit chunk and update carry */
    814          static inline void carry64( mbedtls_mpi_uint *dst, mbedtls_mpi_uint *carry )
    815          {
    816              unsigned char i;
    817              for( i = 0; i < 8 / sizeof( mbedtls_mpi_uint ); i++, dst++ )
    818              {
    819                  *dst += *carry;
    820                  *carry  = ( *dst < *carry );
    821              }
    822          }
    823          
    824          #define WIDTH       8 / sizeof( mbedtls_mpi_uint )
    825          #define A( i )      N->p + i * WIDTH
    826          #define ADD( i )    add64( p, A( i ), &c )
    827          #define NEXT        p += WIDTH; carry64( p, &c )
    828          #define LAST        p += WIDTH; *p = c; while( ++p < end ) *p = 0
    829          
    830          /*
    831           * Fast quasi-reduction modulo p192 (FIPS 186-3 D.2.1)
    832           */
    833          static int ecp_mod_p192( mbedtls_mpi *N )
    834          {
    835              int ret;
    836              mbedtls_mpi_uint c = 0;
    837              mbedtls_mpi_uint *p, *end;
    838          
    839              /* Make sure we have enough blocks so that A(5) is legal */
    840              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( N, 6 * WIDTH ) );
    841          
    842              p = N->p;
    843              end = p + N->n;
    844          
    845              ADD( 3 ); ADD( 5 );             NEXT; // A0 += A3 + A5
    846              ADD( 3 ); ADD( 4 ); ADD( 5 );   NEXT; // A1 += A3 + A4 + A5
    847              ADD( 4 ); ADD( 5 );             LAST; // A2 += A4 + A5
    848          
    849          cleanup:
    850              return( ret );
    851          }
    852          
    853          #undef WIDTH
    854          #undef A
    855          #undef ADD
    856          #undef NEXT
    857          #undef LAST
    858          #endif /* MBEDTLS_ECP_DP_SECP192R1_ENABLED */
    859          
    860          #if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED) ||   \
    861              defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED) ||   \
    862              defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
    863          /*
    864           * The reader is advised to first understand ecp_mod_p192() since the same
    865           * general structure is used here, but with additional complications:
    866           * (1) chunks of 32 bits, and (2) subtractions.
    867           */
    868          
    869          /*
    870           * For these primes, we need to handle data in chunks of 32 bits.
    871           * This makes it more complicated if we use 64 bits limbs in MPI,
    872           * which prevents us from using a uniform access method as for p192.
    873           *
    874           * So, we define a mini abstraction layer to access 32 bit chunks,
    875           * load them in 'cur' for work, and store them back from 'cur' when done.
    876           *
    877           * While at it, also define the size of N in terms of 32-bit chunks.
    878           */
    879          #define LOAD32      cur = A( i );
    880          
    881          #if defined(MBEDTLS_HAVE_INT32)  /* 32 bit */
    882          
    883          #define MAX32       N->n
    884          #define A( j )      N->p[j]
    885          #define STORE32     N->p[i] = cur;
    886          
    887          #else                               /* 64-bit */
    888          
    889          #define MAX32       N->n * 2
    890          #define A( j ) j % 2 ? (uint32_t)( N->p[j/2] >> 32 ) : (uint32_t)( N->p[j/2] )
    891          #define STORE32                                   \
    892              if( i % 2 ) {                                 \
    893                  N->p[i/2] &= 0x00000000FFFFFFFF;          \
    894                  N->p[i/2] |= ((mbedtls_mpi_uint) cur) << 32;        \
    895              } else {                                      \
    896                  N->p[i/2] &= 0xFFFFFFFF00000000;          \
    897                  N->p[i/2] |= (mbedtls_mpi_uint) cur;                \
    898              }
    899          
    900          #endif /* sizeof( mbedtls_mpi_uint ) */
    901          
    902          /*
    903           * Helpers for addition and subtraction of chunks, with signed carry.
    904           */

   \                                 In section .text, align 2, keep-with-next
    905          static inline void add32( uint32_t *dst, uint32_t src, signed char *carry )
    906          {
    907              *dst += src;
   \                     add32: (+1)
   \   00000000   0x6803             LDR      R3,[R0, #+0]
   \   00000002   0x185B             ADDS     R3,R3,R1
   \   00000004   0x6003             STR      R3,[R0, #+0]
    908              *carry += ( *dst < src );
   \   00000006   0x428B             CMP      R3,R1
   \   00000008   0x4180             SBCS     R0,R0,R0
   \   0000000A   0x0FC0             LSRS     R0,R0,#+31
   \   0000000C   0x7811             LDRB     R1,[R2, #+0]
   \   0000000E   0x1808             ADDS     R0,R1,R0
   \   00000010   0x7010             STRB     R0,[R2, #+0]
    909          }
   \   00000012   0x4770             BX       LR               ;; return
    910          

   \                                 In section .text, align 2, keep-with-next
    911          static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
    912          {
   \                     sub32: (+1)
   \   00000000   0xB410             PUSH     {R4}
    913              *carry -= ( *dst < src );
   \   00000002   0x6803             LDR      R3,[R0, #+0]
   \   00000004   0x428B             CMP      R3,R1
   \   00000006   0x419B             SBCS     R3,R3,R3
   \   00000008   0x0FDB             LSRS     R3,R3,#+31
   \   0000000A   0x7814             LDRB     R4,[R2, #+0]
   \   0000000C   0x1AE3             SUBS     R3,R4,R3
   \   0000000E   0x7013             STRB     R3,[R2, #+0]
    914              *dst -= src;
   \   00000010   0x6802             LDR      R2,[R0, #+0]
   \   00000012   0x1A51             SUBS     R1,R2,R1
   \   00000014   0x6001             STR      R1,[R0, #+0]
    915          }
   \   00000016   0xBC10             POP      {R4}
   \   00000018   0x4770             BX       LR               ;; return
    916          
    917          #define ADD( j )    add32( &cur, A( j ), &c );
    918          #define SUB( j )    sub32( &cur, A( j ), &c );
    919          
    920          /*
    921           * Helpers for the main 'loop'
    922           * (see fix_negative for the motivation of C)
    923           */
    924          #define INIT( b )                                           \
    925              int ret;                                                \
    926              signed char c = 0, cc;                                  \
    927              uint32_t cur;                                           \
    928              size_t i = 0, bits = b;                                 \
    929              mbedtls_mpi C;                                                  \
    930              mbedtls_mpi_uint Cp[ b / 8 / sizeof( mbedtls_mpi_uint) + 1 ];               \
    931                                                                      \
    932              C.s = 1;                                                \
    933              C.n = b / 8 / sizeof( mbedtls_mpi_uint) + 1;                      \
    934              C.p = Cp;                                               \
    935              memset( Cp, 0, C.n * sizeof( mbedtls_mpi_uint ) );                \
    936                                                                      \
    937              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( N, b * 2 / 8 / sizeof( mbedtls_mpi_uint ) ) ); \
    938              LOAD32;
    939          
    940          #define NEXT                    \
    941              STORE32; i++; LOAD32;       \
    942              cc = c; c = 0;              \
    943              if( cc < 0 )                \
    944                  sub32( &cur, -cc, &c ); \
    945              else                        \
    946                  add32( &cur, cc, &c );  \
    947          
    948          #define LAST                                    \
    949              STORE32; i++;                               \
    950              cur = c > 0 ? c : 0; STORE32;               \
    951              cur = 0; while( ++i < MAX32 ) { STORE32; }  \
    952              if( c < 0 ) fix_negative( N, c, &C, bits );
    953          
    954          /*
    955           * If the result is negative, we get it in the form
    956           * c * 2^(bits + 32) + N, with c negative and N positive shorter than 'bits'
    957           */

   \                                 In section .text, align 2, keep-with-next
    958          static inline int fix_negative( mbedtls_mpi *N, signed char c, mbedtls_mpi *C, size_t bits )
    959          {
   \                     fix_negative: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0008             MOVS     R0,R1
   \   00000006   0x0011             MOVS     R1,R2
    960              int ret;
    961          
    962              /* C = - c * 2^(bits + 32) */
    963          #if !defined(MBEDTLS_HAVE_INT64)
    964              ((void) bits);
    965          #else
    966              if( bits == 224 )
    967                  C->p[ C->n - 1 ] = ((mbedtls_mpi_uint) -c) << 32;
    968              else
    969          #endif
    970                  C->p[ C->n - 1 ] = (mbedtls_mpi_uint) -c;
   \   00000008   0x688A             LDR      R2,[R1, #+8]
   \   0000000A   0x684B             LDR      R3,[R1, #+4]
   \   0000000C   0x009B             LSLS     R3,R3,#+2
   \   0000000E   0x18D2             ADDS     R2,R2,R3
   \   00000010   0x1F12             SUBS     R2,R2,#+4
   \   00000012   0x4243             RSBS     R3,R0,#+0
   \   00000014   0x6013             STR      R3,[R2, #+0]
    971          
    972              /* N = - ( C - N ) */
    973              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
   \   00000016   0x0022             MOVS     R2,R4
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD102             BNE      ??fix_negative_0
    974              N->s = -1;
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000026   0x6021             STR      R1,[R4, #+0]
    975          
    976          cleanup:
    977          
    978              return( ret );
   \                     ??fix_negative_0: (+1)
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
    979          }
    980          
    981          #if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)
    982          /*
    983           * Fast quasi-reduction modulo p224 (FIPS 186-3 D.2.2)
    984           */
    985          static int ecp_mod_p224( mbedtls_mpi *N )
    986          {
    987              INIT( 224 );
    988          
    989              SUB(  7 ); SUB( 11 );               NEXT; // A0 += -A7 - A11
    990              SUB(  8 ); SUB( 12 );               NEXT; // A1 += -A8 - A12
    991              SUB(  9 ); SUB( 13 );               NEXT; // A2 += -A9 - A13
    992              SUB( 10 ); ADD(  7 ); ADD( 11 );    NEXT; // A3 += -A10 + A7 + A11
    993              SUB( 11 ); ADD(  8 ); ADD( 12 );    NEXT; // A4 += -A11 + A8 + A12
    994              SUB( 12 ); ADD(  9 ); ADD( 13 );    NEXT; // A5 += -A12 + A9 + A13
    995              SUB( 13 ); ADD( 10 );               LAST; // A6 += -A13 + A10
    996          
    997          cleanup:
    998              return( ret );
    999          }
   1000          #endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */
   1001          
   1002          #if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
   1003          /*
   1004           * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
   1005           */

   \                                 In section .text, align 2, keep-with-next
   1006          static int ecp_mod_p256( mbedtls_mpi *N )
   1007          {
   \                     ecp_mod_p256: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB08E             SUB      SP,SP,#+56
   \   00000004   0x0004             MOVS     R4,R0
   1008              INIT( 256 );
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x4669             MOV      R1,SP
   \   0000000A   0x710D             STRB     R5,[R1, #+4]
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x9002             STR      R0,[SP, #+8]
   \   00000010   0x2009             MOVS     R0,#+9
   \   00000012   0x9003             STR      R0,[SP, #+12]
   \   00000014   0xA805             ADD      R0,SP,#+20
   \   00000016   0x9004             STR      R0,[SP, #+16]
   \   00000018   0x9803             LDR      R0,[SP, #+12]
   \   0000001A   0x0081             LSLS     R1,R0,#+2
   \   0000001C   0xA805             ADD      R0,SP,#+20
   \   0000001E   0x.... 0x....      BL       __aeabi_memclr4
   \   00000022   0x2110             MOVS     R1,#+16
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       mbedtls_mpi_grow
   \   0000002A   0x0006             MOVS     R6,R0
   \   0000002C   0xD000             BEQ      .+4
   \   0000002E   0xE24E             B        ??ecp_mod_p256_0
   \   00000030   0x68A0             LDR      R0,[R4, #+8]
   \   00000032   0x6801             LDR      R1,[R0, #+0]
   \   00000034   0x9100             STR      R1,[SP, #+0]
   1009          
   1010              ADD(  8 ); ADD(  9 );
   \   00000036   0xAA01             ADD      R2,SP,#+4
   \   00000038   0x6A01             LDR      R1,[R0, #+32]
   \   0000003A   0x4668             MOV      R0,SP
   \   0000003C   0x.... 0x....      BL       add32
   \   00000040   0xAA01             ADD      R2,SP,#+4
   \   00000042   0x68A0             LDR      R0,[R4, #+8]
   \   00000044   0x6A41             LDR      R1,[R0, #+36]
   \   00000046   0x4668             MOV      R0,SP
   \   00000048   0x.... 0x....      BL       add32
   1011              SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
   \   0000004C   0xAA01             ADD      R2,SP,#+4
   \   0000004E   0x68A0             LDR      R0,[R4, #+8]
   \   00000050   0x6AC1             LDR      R1,[R0, #+44]
   \   00000052   0x4668             MOV      R0,SP
   \   00000054   0x.... 0x....      BL       sub32
   \   00000058   0xAA01             ADD      R2,SP,#+4
   \   0000005A   0x68A0             LDR      R0,[R4, #+8]
   \   0000005C   0x6B01             LDR      R1,[R0, #+48]
   \   0000005E   0x4668             MOV      R0,SP
   \   00000060   0x.... 0x....      BL       sub32
   \   00000064   0xAA01             ADD      R2,SP,#+4
   \   00000066   0x68A0             LDR      R0,[R4, #+8]
   \   00000068   0x6B41             LDR      R1,[R0, #+52]
   \   0000006A   0x4668             MOV      R0,SP
   \   0000006C   0x.... 0x....      BL       sub32
   \   00000070   0xAA01             ADD      R2,SP,#+4
   \   00000072   0x68A0             LDR      R0,[R4, #+8]
   \   00000074   0x6B81             LDR      R1,[R0, #+56]
   \   00000076   0x4668             MOV      R0,SP
   \   00000078   0x.... 0x....      BL       sub32
   \   0000007C   0x68A0             LDR      R0,[R4, #+8]
   \   0000007E   0x9900             LDR      R1,[SP, #+0]
   \   00000080   0x6001             STR      R1,[R0, #+0]
   \   00000082   0x6840             LDR      R0,[R0, #+4]
   \   00000084   0x9000             STR      R0,[SP, #+0]
   \   00000086   0x4669             MOV      R1,SP
   \   00000088   0x2004             MOVS     R0,#+4
   \   0000008A   0x5609             LDRSB    R1,[R1, R0]
   \   0000008C   0x466A             MOV      R2,SP
   \   0000008E   0x7115             STRB     R5,[R2, #+4]
   \   00000090   0x2900             CMP      R1,#+0
   \   00000092   0xAA01             ADD      R2,SP,#+4
   \   00000094   0xD505             BPL      ??ecp_mod_p256_1
   \   00000096   0x4248             RSBS     R0,R1,#+0
   \   00000098   0x0001             MOVS     R1,R0
   \   0000009A   0x4668             MOV      R0,SP
   \   0000009C   0x.... 0x....      BL       sub32
   \   000000A0   0xE002             B        ??ecp_mod_p256_2
   \                     ??ecp_mod_p256_1: (+1)
   \   000000A2   0x4668             MOV      R0,SP
   \   000000A4   0x.... 0x....      BL       add32
   1012          
   1013              ADD(  9 ); ADD( 10 );
   \                     ??ecp_mod_p256_2: (+1)
   \   000000A8   0xAA01             ADD      R2,SP,#+4
   \   000000AA   0x68A0             LDR      R0,[R4, #+8]
   \   000000AC   0x6A41             LDR      R1,[R0, #+36]
   \   000000AE   0x4668             MOV      R0,SP
   \   000000B0   0x.... 0x....      BL       add32
   \   000000B4   0xAA01             ADD      R2,SP,#+4
   \   000000B6   0x68A0             LDR      R0,[R4, #+8]
   \   000000B8   0x6A81             LDR      R1,[R0, #+40]
   \   000000BA   0x4668             MOV      R0,SP
   \   000000BC   0x.... 0x....      BL       add32
   1014              SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
   \   000000C0   0xAA01             ADD      R2,SP,#+4
   \   000000C2   0x68A0             LDR      R0,[R4, #+8]
   \   000000C4   0x6B01             LDR      R1,[R0, #+48]
   \   000000C6   0x4668             MOV      R0,SP
   \   000000C8   0x.... 0x....      BL       sub32
   \   000000CC   0xAA01             ADD      R2,SP,#+4
   \   000000CE   0x68A0             LDR      R0,[R4, #+8]
   \   000000D0   0x6B41             LDR      R1,[R0, #+52]
   \   000000D2   0x4668             MOV      R0,SP
   \   000000D4   0x.... 0x....      BL       sub32
   \   000000D8   0xAA01             ADD      R2,SP,#+4
   \   000000DA   0x68A0             LDR      R0,[R4, #+8]
   \   000000DC   0x6B81             LDR      R1,[R0, #+56]
   \   000000DE   0x4668             MOV      R0,SP
   \   000000E0   0x.... 0x....      BL       sub32
   \   000000E4   0xAA01             ADD      R2,SP,#+4
   \   000000E6   0x68A0             LDR      R0,[R4, #+8]
   \   000000E8   0x6BC1             LDR      R1,[R0, #+60]
   \   000000EA   0x4668             MOV      R0,SP
   \   000000EC   0x.... 0x....      BL       sub32
   \   000000F0   0x68A0             LDR      R0,[R4, #+8]
   \   000000F2   0x9900             LDR      R1,[SP, #+0]
   \   000000F4   0x6041             STR      R1,[R0, #+4]
   \   000000F6   0x6880             LDR      R0,[R0, #+8]
   \   000000F8   0x9000             STR      R0,[SP, #+0]
   \   000000FA   0x4669             MOV      R1,SP
   \   000000FC   0x2004             MOVS     R0,#+4
   \   000000FE   0x5608             LDRSB    R0,[R1, R0]
   \   00000100   0x466A             MOV      R2,SP
   \   00000102   0x7115             STRB     R5,[R2, #+4]
   \   00000104   0x2800             CMP      R0,#+0
   \   00000106   0xAA01             ADD      R2,SP,#+4
   \   00000108   0xD504             BPL      ??ecp_mod_p256_3
   \   0000010A   0x4241             RSBS     R1,R0,#+0
   \   0000010C   0x4668             MOV      R0,SP
   \   0000010E   0x.... 0x....      BL       sub32
   \   00000112   0xE003             B        ??ecp_mod_p256_4
   \                     ??ecp_mod_p256_3: (+1)
   \   00000114   0x0001             MOVS     R1,R0
   \   00000116   0x4668             MOV      R0,SP
   \   00000118   0x.... 0x....      BL       add32
   1015          
   1016              ADD( 10 ); ADD( 11 );
   \                     ??ecp_mod_p256_4: (+1)
   \   0000011C   0xAA01             ADD      R2,SP,#+4
   \   0000011E   0x68A0             LDR      R0,[R4, #+8]
   \   00000120   0x6A81             LDR      R1,[R0, #+40]
   \   00000122   0x4668             MOV      R0,SP
   \   00000124   0x.... 0x....      BL       add32
   \   00000128   0xAA01             ADD      R2,SP,#+4
   \   0000012A   0x68A0             LDR      R0,[R4, #+8]
   \   0000012C   0x6AC1             LDR      R1,[R0, #+44]
   \   0000012E   0x4668             MOV      R0,SP
   \   00000130   0x.... 0x....      BL       add32
   1017              SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
   \   00000134   0xAA01             ADD      R2,SP,#+4
   \   00000136   0x68A0             LDR      R0,[R4, #+8]
   \   00000138   0x6B41             LDR      R1,[R0, #+52]
   \   0000013A   0x4668             MOV      R0,SP
   \   0000013C   0x.... 0x....      BL       sub32
   \   00000140   0xAA01             ADD      R2,SP,#+4
   \   00000142   0x68A0             LDR      R0,[R4, #+8]
   \   00000144   0x6B81             LDR      R1,[R0, #+56]
   \   00000146   0x4668             MOV      R0,SP
   \   00000148   0x.... 0x....      BL       sub32
   \   0000014C   0xAA01             ADD      R2,SP,#+4
   \   0000014E   0x68A0             LDR      R0,[R4, #+8]
   \   00000150   0x6BC1             LDR      R1,[R0, #+60]
   \   00000152   0x4668             MOV      R0,SP
   \   00000154   0x.... 0x....      BL       sub32
   \   00000158   0x68A0             LDR      R0,[R4, #+8]
   \   0000015A   0x9900             LDR      R1,[SP, #+0]
   \   0000015C   0x6081             STR      R1,[R0, #+8]
   \   0000015E   0x68C0             LDR      R0,[R0, #+12]
   \   00000160   0x9000             STR      R0,[SP, #+0]
   \   00000162   0x4669             MOV      R1,SP
   \   00000164   0x2004             MOVS     R0,#+4
   \   00000166   0x5608             LDRSB    R0,[R1, R0]
   \   00000168   0x466A             MOV      R2,SP
   \   0000016A   0x7115             STRB     R5,[R2, #+4]
   \   0000016C   0x2800             CMP      R0,#+0
   \   0000016E   0xAA01             ADD      R2,SP,#+4
   \   00000170   0xD504             BPL      ??ecp_mod_p256_5
   \   00000172   0x4241             RSBS     R1,R0,#+0
   \   00000174   0x4668             MOV      R0,SP
   \   00000176   0x.... 0x....      BL       sub32
   \   0000017A   0xE003             B        ??ecp_mod_p256_6
   \                     ??ecp_mod_p256_5: (+1)
   \   0000017C   0x0001             MOVS     R1,R0
   \   0000017E   0x4668             MOV      R0,SP
   \   00000180   0x.... 0x....      BL       add32
   1018          
   1019              ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );
   \                     ??ecp_mod_p256_6: (+1)
   \   00000184   0xAA01             ADD      R2,SP,#+4
   \   00000186   0x68A0             LDR      R0,[R4, #+8]
   \   00000188   0x6AC1             LDR      R1,[R0, #+44]
   \   0000018A   0x4668             MOV      R0,SP
   \   0000018C   0x.... 0x....      BL       add32
   \   00000190   0xAA01             ADD      R2,SP,#+4
   \   00000192   0x68A0             LDR      R0,[R4, #+8]
   \   00000194   0x6AC1             LDR      R1,[R0, #+44]
   \   00000196   0x4668             MOV      R0,SP
   \   00000198   0x.... 0x....      BL       add32
   \   0000019C   0xAA01             ADD      R2,SP,#+4
   \   0000019E   0x68A0             LDR      R0,[R4, #+8]
   \   000001A0   0x6B01             LDR      R1,[R0, #+48]
   \   000001A2   0x4668             MOV      R0,SP
   \   000001A4   0x.... 0x....      BL       add32
   \   000001A8   0xAA01             ADD      R2,SP,#+4
   \   000001AA   0x68A0             LDR      R0,[R4, #+8]
   \   000001AC   0x6B01             LDR      R1,[R0, #+48]
   \   000001AE   0x4668             MOV      R0,SP
   \   000001B0   0x.... 0x....      BL       add32
   \   000001B4   0xAA01             ADD      R2,SP,#+4
   \   000001B6   0x68A0             LDR      R0,[R4, #+8]
   \   000001B8   0x6B41             LDR      R1,[R0, #+52]
   \   000001BA   0x4668             MOV      R0,SP
   \   000001BC   0x.... 0x....      BL       add32
   1020              SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
   \   000001C0   0xAA01             ADD      R2,SP,#+4
   \   000001C2   0x68A0             LDR      R0,[R4, #+8]
   \   000001C4   0x6BC1             LDR      R1,[R0, #+60]
   \   000001C6   0x4668             MOV      R0,SP
   \   000001C8   0x.... 0x....      BL       sub32
   \   000001CC   0xAA01             ADD      R2,SP,#+4
   \   000001CE   0x68A0             LDR      R0,[R4, #+8]
   \   000001D0   0x6A01             LDR      R1,[R0, #+32]
   \   000001D2   0x4668             MOV      R0,SP
   \   000001D4   0x.... 0x....      BL       sub32
   \   000001D8   0xAA01             ADD      R2,SP,#+4
   \   000001DA   0x68A0             LDR      R0,[R4, #+8]
   \   000001DC   0x6A41             LDR      R1,[R0, #+36]
   \   000001DE   0x4668             MOV      R0,SP
   \   000001E0   0x.... 0x....      BL       sub32
   \   000001E4   0x68A0             LDR      R0,[R4, #+8]
   \   000001E6   0x9900             LDR      R1,[SP, #+0]
   \   000001E8   0x60C1             STR      R1,[R0, #+12]
   \   000001EA   0x6900             LDR      R0,[R0, #+16]
   \   000001EC   0x9000             STR      R0,[SP, #+0]
   \   000001EE   0x4669             MOV      R1,SP
   \   000001F0   0x2004             MOVS     R0,#+4
   \   000001F2   0x5608             LDRSB    R0,[R1, R0]
   \   000001F4   0x466A             MOV      R2,SP
   \   000001F6   0x7115             STRB     R5,[R2, #+4]
   \   000001F8   0x2800             CMP      R0,#+0
   \   000001FA   0xAA01             ADD      R2,SP,#+4
   \   000001FC   0xD504             BPL      ??ecp_mod_p256_7
   \   000001FE   0x4241             RSBS     R1,R0,#+0
   \   00000200   0x4668             MOV      R0,SP
   \   00000202   0x.... 0x....      BL       sub32
   \   00000206   0xE003             B        ??ecp_mod_p256_8
   \                     ??ecp_mod_p256_7: (+1)
   \   00000208   0x0001             MOVS     R1,R0
   \   0000020A   0x4668             MOV      R0,SP
   \   0000020C   0x.... 0x....      BL       add32
   1021          
   1022              ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );
   \                     ??ecp_mod_p256_8: (+1)
   \   00000210   0xAA01             ADD      R2,SP,#+4
   \   00000212   0x68A0             LDR      R0,[R4, #+8]
   \   00000214   0x6B01             LDR      R1,[R0, #+48]
   \   00000216   0x4668             MOV      R0,SP
   \   00000218   0x.... 0x....      BL       add32
   \   0000021C   0xAA01             ADD      R2,SP,#+4
   \   0000021E   0x68A0             LDR      R0,[R4, #+8]
   \   00000220   0x6B01             LDR      R1,[R0, #+48]
   \   00000222   0x4668             MOV      R0,SP
   \   00000224   0x.... 0x....      BL       add32
   \   00000228   0xAA01             ADD      R2,SP,#+4
   \   0000022A   0x68A0             LDR      R0,[R4, #+8]
   \   0000022C   0x6B41             LDR      R1,[R0, #+52]
   \   0000022E   0x4668             MOV      R0,SP
   \   00000230   0x.... 0x....      BL       add32
   \   00000234   0xAA01             ADD      R2,SP,#+4
   \   00000236   0x68A0             LDR      R0,[R4, #+8]
   \   00000238   0x6B41             LDR      R1,[R0, #+52]
   \   0000023A   0x4668             MOV      R0,SP
   \   0000023C   0x.... 0x....      BL       add32
   \   00000240   0xAA01             ADD      R2,SP,#+4
   \   00000242   0x68A0             LDR      R0,[R4, #+8]
   \   00000244   0x6B81             LDR      R1,[R0, #+56]
   \   00000246   0x4668             MOV      R0,SP
   \   00000248   0x.... 0x....      BL       add32
   1023              SUB(  9 ); SUB( 10 );                                   NEXT; // A4
   \   0000024C   0xAA01             ADD      R2,SP,#+4
   \   0000024E   0x68A0             LDR      R0,[R4, #+8]
   \   00000250   0x6A41             LDR      R1,[R0, #+36]
   \   00000252   0x4668             MOV      R0,SP
   \   00000254   0x.... 0x....      BL       sub32
   \   00000258   0xAA01             ADD      R2,SP,#+4
   \   0000025A   0x68A0             LDR      R0,[R4, #+8]
   \   0000025C   0x6A81             LDR      R1,[R0, #+40]
   \   0000025E   0x4668             MOV      R0,SP
   \   00000260   0x.... 0x....      BL       sub32
   \   00000264   0x68A0             LDR      R0,[R4, #+8]
   \   00000266   0x9900             LDR      R1,[SP, #+0]
   \   00000268   0x6101             STR      R1,[R0, #+16]
   \   0000026A   0x6940             LDR      R0,[R0, #+20]
   \   0000026C   0x9000             STR      R0,[SP, #+0]
   \   0000026E   0x4669             MOV      R1,SP
   \   00000270   0x2004             MOVS     R0,#+4
   \   00000272   0x5608             LDRSB    R0,[R1, R0]
   \   00000274   0x466A             MOV      R2,SP
   \   00000276   0x7115             STRB     R5,[R2, #+4]
   \   00000278   0x2800             CMP      R0,#+0
   \   0000027A   0xAA01             ADD      R2,SP,#+4
   \   0000027C   0xD504             BPL      ??ecp_mod_p256_9
   \   0000027E   0x4241             RSBS     R1,R0,#+0
   \   00000280   0x4668             MOV      R0,SP
   \   00000282   0x.... 0x....      BL       sub32
   \   00000286   0xE003             B        ??ecp_mod_p256_10
   \                     ??ecp_mod_p256_9: (+1)
   \   00000288   0x0001             MOVS     R1,R0
   \   0000028A   0x4668             MOV      R0,SP
   \   0000028C   0x.... 0x....      BL       add32
   1024          
   1025              ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );
   \                     ??ecp_mod_p256_10: (+1)
   \   00000290   0xAA01             ADD      R2,SP,#+4
   \   00000292   0x68A0             LDR      R0,[R4, #+8]
   \   00000294   0x6B41             LDR      R1,[R0, #+52]
   \   00000296   0x4668             MOV      R0,SP
   \   00000298   0x.... 0x....      BL       add32
   \   0000029C   0xAA01             ADD      R2,SP,#+4
   \   0000029E   0x68A0             LDR      R0,[R4, #+8]
   \   000002A0   0x6B41             LDR      R1,[R0, #+52]
   \   000002A2   0x4668             MOV      R0,SP
   \   000002A4   0x.... 0x....      BL       add32
   \   000002A8   0xAA01             ADD      R2,SP,#+4
   \   000002AA   0x68A0             LDR      R0,[R4, #+8]
   \   000002AC   0x6B81             LDR      R1,[R0, #+56]
   \   000002AE   0x4668             MOV      R0,SP
   \   000002B0   0x.... 0x....      BL       add32
   \   000002B4   0xAA01             ADD      R2,SP,#+4
   \   000002B6   0x68A0             LDR      R0,[R4, #+8]
   \   000002B8   0x6B81             LDR      R1,[R0, #+56]
   \   000002BA   0x4668             MOV      R0,SP
   \   000002BC   0x.... 0x....      BL       add32
   \   000002C0   0xAA01             ADD      R2,SP,#+4
   \   000002C2   0x68A0             LDR      R0,[R4, #+8]
   \   000002C4   0x6BC1             LDR      R1,[R0, #+60]
   \   000002C6   0x4668             MOV      R0,SP
   \   000002C8   0x.... 0x....      BL       add32
   1026              SUB( 10 ); SUB( 11 );                                   NEXT; // A5
   \   000002CC   0xAA01             ADD      R2,SP,#+4
   \   000002CE   0x68A0             LDR      R0,[R4, #+8]
   \   000002D0   0x6A81             LDR      R1,[R0, #+40]
   \   000002D2   0x4668             MOV      R0,SP
   \   000002D4   0x.... 0x....      BL       sub32
   \   000002D8   0xAA01             ADD      R2,SP,#+4
   \   000002DA   0x68A0             LDR      R0,[R4, #+8]
   \   000002DC   0x6AC1             LDR      R1,[R0, #+44]
   \   000002DE   0x4668             MOV      R0,SP
   \   000002E0   0x.... 0x....      BL       sub32
   \   000002E4   0x68A0             LDR      R0,[R4, #+8]
   \   000002E6   0x9900             LDR      R1,[SP, #+0]
   \   000002E8   0x6141             STR      R1,[R0, #+20]
   \   000002EA   0x6980             LDR      R0,[R0, #+24]
   \   000002EC   0x9000             STR      R0,[SP, #+0]
   \   000002EE   0x4669             MOV      R1,SP
   \   000002F0   0x2004             MOVS     R0,#+4
   \   000002F2   0x5608             LDRSB    R0,[R1, R0]
   \   000002F4   0x466A             MOV      R2,SP
   \   000002F6   0x7115             STRB     R5,[R2, #+4]
   \   000002F8   0x2800             CMP      R0,#+0
   \   000002FA   0xAA01             ADD      R2,SP,#+4
   \   000002FC   0xD504             BPL      ??ecp_mod_p256_11
   \   000002FE   0x4241             RSBS     R1,R0,#+0
   \   00000300   0x4668             MOV      R0,SP
   \   00000302   0x.... 0x....      BL       sub32
   \   00000306   0xE003             B        ??ecp_mod_p256_12
   \                     ??ecp_mod_p256_11: (+1)
   \   00000308   0x0001             MOVS     R1,R0
   \   0000030A   0x4668             MOV      R0,SP
   \   0000030C   0x.... 0x....      BL       add32
   1027          
   1028              ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );
   \                     ??ecp_mod_p256_12: (+1)
   \   00000310   0xAA01             ADD      R2,SP,#+4
   \   00000312   0x68A0             LDR      R0,[R4, #+8]
   \   00000314   0x6B81             LDR      R1,[R0, #+56]
   \   00000316   0x4668             MOV      R0,SP
   \   00000318   0x.... 0x....      BL       add32
   \   0000031C   0xAA01             ADD      R2,SP,#+4
   \   0000031E   0x68A0             LDR      R0,[R4, #+8]
   \   00000320   0x6B81             LDR      R1,[R0, #+56]
   \   00000322   0x4668             MOV      R0,SP
   \   00000324   0x.... 0x....      BL       add32
   \   00000328   0xAA01             ADD      R2,SP,#+4
   \   0000032A   0x68A0             LDR      R0,[R4, #+8]
   \   0000032C   0x6BC1             LDR      R1,[R0, #+60]
   \   0000032E   0x4668             MOV      R0,SP
   \   00000330   0x.... 0x....      BL       add32
   \   00000334   0x68A0             LDR      R0,[R4, #+8]
   \   00000336   0x6BC0             LDR      R0,[R0, #+60]
   \   00000338   0x9900             LDR      R1,[SP, #+0]
   \   0000033A   0x1809             ADDS     R1,R1,R0
   \   0000033C   0x9100             STR      R1,[SP, #+0]
   \   0000033E   0x4281             CMP      R1,R0
   \   00000340   0x4180             SBCS     R0,R0,R0
   \   00000342   0x0FC0             LSRS     R0,R0,#+31
   \   00000344   0x4669             MOV      R1,SP
   \   00000346   0x7909             LDRB     R1,[R1, #+4]
   \   00000348   0x1808             ADDS     R0,R1,R0
   \   0000034A   0x4669             MOV      R1,SP
   \   0000034C   0x7108             STRB     R0,[R1, #+4]
   \   0000034E   0x68A0             LDR      R0,[R4, #+8]
   \   00000350   0x6B80             LDR      R0,[R0, #+56]
   \   00000352   0x9900             LDR      R1,[SP, #+0]
   \   00000354   0x1809             ADDS     R1,R1,R0
   \   00000356   0x9100             STR      R1,[SP, #+0]
   \   00000358   0x4281             CMP      R1,R0
   \   0000035A   0xD203             BCS      ??ecp_mod_p256_13
   \   0000035C   0x4668             MOV      R0,SP
   \   0000035E   0x7900             LDRB     R0,[R0, #+4]
   \   00000360   0x1C40             ADDS     R0,R0,#+1
   \   00000362   0xE002             B        ??ecp_mod_p256_14
   \                     ??ecp_mod_p256_13: (+1)
   \   00000364   0x4669             MOV      R1,SP
   \   00000366   0x2004             MOVS     R0,#+4
   \   00000368   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p256_14: (+1)
   \   0000036A   0x4669             MOV      R1,SP
   \   0000036C   0x7108             STRB     R0,[R1, #+4]
   \   0000036E   0x68A0             LDR      R0,[R4, #+8]
   \   00000370   0x6B40             LDR      R0,[R0, #+52]
   \   00000372   0x9900             LDR      R1,[SP, #+0]
   \   00000374   0x1809             ADDS     R1,R1,R0
   \   00000376   0x9100             STR      R1,[SP, #+0]
   \   00000378   0x4281             CMP      R1,R0
   \   0000037A   0xD203             BCS      ??ecp_mod_p256_15
   \   0000037C   0x4668             MOV      R0,SP
   \   0000037E   0x7900             LDRB     R0,[R0, #+4]
   \   00000380   0x1C40             ADDS     R0,R0,#+1
   \   00000382   0xE002             B        ??ecp_mod_p256_16
   \                     ??ecp_mod_p256_15: (+1)
   \   00000384   0x4669             MOV      R1,SP
   \   00000386   0x2004             MOVS     R0,#+4
   \   00000388   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p256_16: (+1)
   \   0000038A   0x4669             MOV      R1,SP
   \   0000038C   0x7108             STRB     R0,[R1, #+4]
   1029              SUB(  8 ); SUB(  9 );                                   NEXT; // A6
   \   0000038E   0xAA01             ADD      R2,SP,#+4
   \   00000390   0x68A0             LDR      R0,[R4, #+8]
   \   00000392   0x6A01             LDR      R1,[R0, #+32]
   \   00000394   0x4668             MOV      R0,SP
   \   00000396   0x.... 0x....      BL       sub32
   \   0000039A   0xAA01             ADD      R2,SP,#+4
   \   0000039C   0x68A0             LDR      R0,[R4, #+8]
   \   0000039E   0x6A41             LDR      R1,[R0, #+36]
   \   000003A0   0x4668             MOV      R0,SP
   \   000003A2   0x.... 0x....      BL       sub32
   \   000003A6   0x68A0             LDR      R0,[R4, #+8]
   \   000003A8   0x9900             LDR      R1,[SP, #+0]
   \   000003AA   0x6181             STR      R1,[R0, #+24]
   \   000003AC   0x69C0             LDR      R0,[R0, #+28]
   \   000003AE   0x9000             STR      R0,[SP, #+0]
   \   000003B0   0x4669             MOV      R1,SP
   \   000003B2   0x2004             MOVS     R0,#+4
   \   000003B4   0x5608             LDRSB    R0,[R1, R0]
   \   000003B6   0x466A             MOV      R2,SP
   \   000003B8   0x7115             STRB     R5,[R2, #+4]
   \   000003BA   0x2800             CMP      R0,#+0
   \   000003BC   0xD505             BPL      ??ecp_mod_p256_17
   \   000003BE   0xAA01             ADD      R2,SP,#+4
   \   000003C0   0x4241             RSBS     R1,R0,#+0
   \   000003C2   0x4668             MOV      R0,SP
   \   000003C4   0x.... 0x....      BL       sub32
   \   000003C8   0xE007             B        ??ecp_mod_p256_18
   \                     ??ecp_mod_p256_17: (+1)
   \   000003CA   0x9900             LDR      R1,[SP, #+0]
   \   000003CC   0x1809             ADDS     R1,R1,R0
   \   000003CE   0x9100             STR      R1,[SP, #+0]
   \   000003D0   0x4281             CMP      R1,R0
   \   000003D2   0x4180             SBCS     R0,R0,R0
   \   000003D4   0x0FC0             LSRS     R0,R0,#+31
   \   000003D6   0x4669             MOV      R1,SP
   \   000003D8   0x7108             STRB     R0,[R1, #+4]
   1030          
   1031              ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
   \                     ??ecp_mod_p256_18: (+1)
   \   000003DA   0x68A0             LDR      R0,[R4, #+8]
   \   000003DC   0x6BC0             LDR      R0,[R0, #+60]
   \   000003DE   0x9900             LDR      R1,[SP, #+0]
   \   000003E0   0x1809             ADDS     R1,R1,R0
   \   000003E2   0x9100             STR      R1,[SP, #+0]
   \   000003E4   0x4281             CMP      R1,R0
   \   000003E6   0xD203             BCS      ??ecp_mod_p256_19
   \   000003E8   0x4668             MOV      R0,SP
   \   000003EA   0x7900             LDRB     R0,[R0, #+4]
   \   000003EC   0x1C40             ADDS     R0,R0,#+1
   \   000003EE   0xE002             B        ??ecp_mod_p256_20
   \                     ??ecp_mod_p256_19: (+1)
   \   000003F0   0x4669             MOV      R1,SP
   \   000003F2   0x2004             MOVS     R0,#+4
   \   000003F4   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p256_20: (+1)
   \   000003F6   0x4669             MOV      R1,SP
   \   000003F8   0x7108             STRB     R0,[R1, #+4]
   \   000003FA   0x68A0             LDR      R0,[R4, #+8]
   \   000003FC   0x6BC0             LDR      R0,[R0, #+60]
   \   000003FE   0x9900             LDR      R1,[SP, #+0]
   \   00000400   0x1809             ADDS     R1,R1,R0
   \   00000402   0x9100             STR      R1,[SP, #+0]
   \   00000404   0x4281             CMP      R1,R0
   \   00000406   0xD203             BCS      ??ecp_mod_p256_21
   \   00000408   0x4668             MOV      R0,SP
   \   0000040A   0x7900             LDRB     R0,[R0, #+4]
   \   0000040C   0x1C40             ADDS     R0,R0,#+1
   \   0000040E   0xE002             B        ??ecp_mod_p256_22
   \                     ??ecp_mod_p256_21: (+1)
   \   00000410   0x4669             MOV      R1,SP
   \   00000412   0x2004             MOVS     R0,#+4
   \   00000414   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p256_22: (+1)
   \   00000416   0x4669             MOV      R1,SP
   \   00000418   0x7108             STRB     R0,[R1, #+4]
   \   0000041A   0x68A0             LDR      R0,[R4, #+8]
   \   0000041C   0x6BC0             LDR      R0,[R0, #+60]
   \   0000041E   0x9900             LDR      R1,[SP, #+0]
   \   00000420   0x1809             ADDS     R1,R1,R0
   \   00000422   0x9100             STR      R1,[SP, #+0]
   \   00000424   0x4281             CMP      R1,R0
   \   00000426   0xD203             BCS      ??ecp_mod_p256_23
   \   00000428   0x4668             MOV      R0,SP
   \   0000042A   0x7900             LDRB     R0,[R0, #+4]
   \   0000042C   0x1C40             ADDS     R0,R0,#+1
   \   0000042E   0xE002             B        ??ecp_mod_p256_24
   \                     ??ecp_mod_p256_23: (+1)
   \   00000430   0x4669             MOV      R1,SP
   \   00000432   0x2004             MOVS     R0,#+4
   \   00000434   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p256_24: (+1)
   \   00000436   0x4669             MOV      R1,SP
   \   00000438   0x7108             STRB     R0,[R1, #+4]
   \   0000043A   0x68A0             LDR      R0,[R4, #+8]
   \   0000043C   0x6A00             LDR      R0,[R0, #+32]
   \   0000043E   0x9900             LDR      R1,[SP, #+0]
   \   00000440   0x1809             ADDS     R1,R1,R0
   \   00000442   0x9100             STR      R1,[SP, #+0]
   \   00000444   0x4281             CMP      R1,R0
   \   00000446   0xD203             BCS      ??ecp_mod_p256_25
   \   00000448   0x4668             MOV      R0,SP
   \   0000044A   0x7900             LDRB     R0,[R0, #+4]
   \   0000044C   0x1C40             ADDS     R0,R0,#+1
   \   0000044E   0xE002             B        ??ecp_mod_p256_26
   \                     ??ecp_mod_p256_25: (+1)
   \   00000450   0x4669             MOV      R1,SP
   \   00000452   0x2004             MOVS     R0,#+4
   \   00000454   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p256_26: (+1)
   \   00000456   0x4669             MOV      R1,SP
   \   00000458   0x7108             STRB     R0,[R1, #+4]
   1032              SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
   \   0000045A   0xAA01             ADD      R2,SP,#+4
   \   0000045C   0x68A0             LDR      R0,[R4, #+8]
   \   0000045E   0x6A81             LDR      R1,[R0, #+40]
   \   00000460   0x4668             MOV      R0,SP
   \   00000462   0x.... 0x....      BL       sub32
   \   00000466   0xAA01             ADD      R2,SP,#+4
   \   00000468   0x68A0             LDR      R0,[R4, #+8]
   \   0000046A   0x6AC1             LDR      R1,[R0, #+44]
   \   0000046C   0x4668             MOV      R0,SP
   \   0000046E   0x.... 0x....      BL       sub32
   \   00000472   0xAA01             ADD      R2,SP,#+4
   \   00000474   0x68A0             LDR      R0,[R4, #+8]
   \   00000476   0x6B01             LDR      R1,[R0, #+48]
   \   00000478   0x4668             MOV      R0,SP
   \   0000047A   0x.... 0x....      BL       sub32
   \   0000047E   0xAA01             ADD      R2,SP,#+4
   \   00000480   0x68A0             LDR      R0,[R4, #+8]
   \   00000482   0x6B41             LDR      R1,[R0, #+52]
   \   00000484   0x4668             MOV      R0,SP
   \   00000486   0x.... 0x....      BL       sub32
   \   0000048A   0x68A0             LDR      R0,[R4, #+8]
   \   0000048C   0x9900             LDR      R1,[SP, #+0]
   \   0000048E   0x61C1             STR      R1,[R0, #+28]
   \   00000490   0x2108             MOVS     R1,#+8
   \   00000492   0x466B             MOV      R3,SP
   \   00000494   0x2204             MOVS     R2,#+4
   \   00000496   0x569A             LDRSB    R2,[R3, R2]
   \   00000498   0x2A01             CMP      R2,#+1
   \   0000049A   0xDB01             BLT      ??ecp_mod_p256_27
   \   0000049C   0x0013             MOVS     R3,R2
   \   0000049E   0xE000             B        ??ecp_mod_p256_28
   \                     ??ecp_mod_p256_27: (+1)
   \   000004A0   0x2300             MOVS     R3,#+0
   \                     ??ecp_mod_p256_28: (+1)
   \   000004A2   0x6203             STR      R3,[R0, #+32]
   \   000004A4   0x9500             STR      R5,[SP, #+0]
   \   000004A6   0x3024             ADDS     R0,R0,#+36
   \   000004A8   0xE002             B        ??ecp_mod_p256_29
   \                     ??ecp_mod_p256_30: (+1)
   \   000004AA   0x9B00             LDR      R3,[SP, #+0]
   \   000004AC   0x6003             STR      R3,[R0, #+0]
   \   000004AE   0x1D00             ADDS     R0,R0,#+4
   \                     ??ecp_mod_p256_29: (+1)
   \   000004B0   0x1C49             ADDS     R1,R1,#+1
   \   000004B2   0x6863             LDR      R3,[R4, #+4]
   \   000004B4   0x4299             CMP      R1,R3
   \   000004B6   0xD3F8             BCC      ??ecp_mod_p256_30
   \   000004B8   0x2A00             CMP      R2,#+0
   \   000004BA   0xD508             BPL      ??ecp_mod_p256_0
   \   000004BC   0x2380             MOVS     R3,#+128
   \   000004BE   0x005B             LSLS     R3,R3,#+1        ;; #+256
   \   000004C0   0xAA02             ADD      R2,SP,#+8
   \   000004C2   0x4669             MOV      R1,SP
   \   000004C4   0x2004             MOVS     R0,#+4
   \   000004C6   0x5609             LDRSB    R1,[R1, R0]
   \   000004C8   0x0020             MOVS     R0,R4
   \   000004CA   0x.... 0x....      BL       fix_negative
   1033          
   1034          cleanup:
   1035              return( ret );
   \                     ??ecp_mod_p256_0: (+1)
   \   000004CE   0x0030             MOVS     R0,R6
   \   000004D0   0xB00E             ADD      SP,SP,#+56
   \   000004D2   0xBD70             POP      {R4-R6,PC}       ;; return
   1036          }
   1037          #endif /* MBEDTLS_ECP_DP_SECP256R1_ENABLED */
   1038          
   1039          #if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
   1040          /*
   1041           * Fast quasi-reduction modulo p384 (FIPS 186-3 D.2.4)
   1042           */

   \                                 In section .text, align 2, keep-with-next
   1043          static int ecp_mod_p384( mbedtls_mpi *N )
   1044          {
   \                     ecp_mod_p384: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB092             SUB      SP,SP,#+72
   \   00000004   0x0004             MOVS     R4,R0
   1045              INIT( 384 );
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x4669             MOV      R1,SP
   \   0000000A   0x710D             STRB     R5,[R1, #+4]
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x9002             STR      R0,[SP, #+8]
   \   00000010   0x200D             MOVS     R0,#+13
   \   00000012   0x9003             STR      R0,[SP, #+12]
   \   00000014   0xA805             ADD      R0,SP,#+20
   \   00000016   0x9004             STR      R0,[SP, #+16]
   \   00000018   0x9803             LDR      R0,[SP, #+12]
   \   0000001A   0x0081             LSLS     R1,R0,#+2
   \   0000001C   0xA805             ADD      R0,SP,#+20
   \   0000001E   0x.... 0x....      BL       __aeabi_memclr4
   \   00000022   0x2118             MOVS     R1,#+24
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       mbedtls_mpi_grow
   \   0000002A   0x0006             MOVS     R6,R0
   \   0000002C   0xD001             BEQ      .+6
   \   0000002E   0xF000 0xFCAA      BL       ??ecp_mod_p384_0
   \   00000032   0x68A0             LDR      R0,[R4, #+8]
   \   00000034   0x6801             LDR      R1,[R0, #+0]
   \   00000036   0x9100             STR      R1,[SP, #+0]
   1046          
   1047              ADD( 12 ); ADD( 21 ); ADD( 20 );
   \   00000038   0x6B00             LDR      R0,[R0, #+48]
   \   0000003A   0x1809             ADDS     R1,R1,R0
   \   0000003C   0x9100             STR      R1,[SP, #+0]
   \   0000003E   0x4281             CMP      R1,R0
   \   00000040   0x4180             SBCS     R0,R0,R0
   \   00000042   0x0FC0             LSRS     R0,R0,#+31
   \   00000044   0x4669             MOV      R1,SP
   \   00000046   0x7909             LDRB     R1,[R1, #+4]
   \   00000048   0x1808             ADDS     R0,R1,R0
   \   0000004A   0x4669             MOV      R1,SP
   \   0000004C   0x7108             STRB     R0,[R1, #+4]
   \   0000004E   0x68A0             LDR      R0,[R4, #+8]
   \   00000050   0x6D40             LDR      R0,[R0, #+84]
   \   00000052   0x9900             LDR      R1,[SP, #+0]
   \   00000054   0x1809             ADDS     R1,R1,R0
   \   00000056   0x9100             STR      R1,[SP, #+0]
   \   00000058   0x4281             CMP      R1,R0
   \   0000005A   0xD203             BCS      ??ecp_mod_p384_1
   \   0000005C   0x4668             MOV      R0,SP
   \   0000005E   0x7900             LDRB     R0,[R0, #+4]
   \   00000060   0x1C40             ADDS     R0,R0,#+1
   \   00000062   0xE002             B        ??ecp_mod_p384_2
   \                     ??ecp_mod_p384_1: (+1)
   \   00000064   0x4669             MOV      R1,SP
   \   00000066   0x2004             MOVS     R0,#+4
   \   00000068   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_2: (+1)
   \   0000006A   0x4669             MOV      R1,SP
   \   0000006C   0x7108             STRB     R0,[R1, #+4]
   \   0000006E   0x68A0             LDR      R0,[R4, #+8]
   \   00000070   0x6D00             LDR      R0,[R0, #+80]
   \   00000072   0x9900             LDR      R1,[SP, #+0]
   \   00000074   0x1809             ADDS     R1,R1,R0
   \   00000076   0x9100             STR      R1,[SP, #+0]
   \   00000078   0x4281             CMP      R1,R0
   \   0000007A   0xD203             BCS      ??ecp_mod_p384_3
   \   0000007C   0x4668             MOV      R0,SP
   \   0000007E   0x7900             LDRB     R0,[R0, #+4]
   \   00000080   0x1C40             ADDS     R0,R0,#+1
   \   00000082   0xE002             B        ??ecp_mod_p384_4
   \                     ??ecp_mod_p384_3: (+1)
   \   00000084   0x4669             MOV      R1,SP
   \   00000086   0x2004             MOVS     R0,#+4
   \   00000088   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_4: (+1)
   \   0000008A   0x4669             MOV      R1,SP
   \   0000008C   0x7108             STRB     R0,[R1, #+4]
   1048              SUB( 23 );                                              NEXT; // A0
   \   0000008E   0xAA01             ADD      R2,SP,#+4
   \   00000090   0x68A0             LDR      R0,[R4, #+8]
   \   00000092   0x6DC1             LDR      R1,[R0, #+92]
   \   00000094   0x4668             MOV      R0,SP
   \   00000096   0x.... 0x....      BL       sub32
   \   0000009A   0x68A0             LDR      R0,[R4, #+8]
   \   0000009C   0x9900             LDR      R1,[SP, #+0]
   \   0000009E   0x6001             STR      R1,[R0, #+0]
   \   000000A0   0x6840             LDR      R0,[R0, #+4]
   \   000000A2   0x9000             STR      R0,[SP, #+0]
   \   000000A4   0x4669             MOV      R1,SP
   \   000000A6   0x2004             MOVS     R0,#+4
   \   000000A8   0x5608             LDRSB    R0,[R1, R0]
   \   000000AA   0x466A             MOV      R2,SP
   \   000000AC   0x7115             STRB     R5,[R2, #+4]
   \   000000AE   0x2800             CMP      R0,#+0
   \   000000B0   0xD505             BPL      ??ecp_mod_p384_5
   \   000000B2   0xAA01             ADD      R2,SP,#+4
   \   000000B4   0x4241             RSBS     R1,R0,#+0
   \   000000B6   0x4668             MOV      R0,SP
   \   000000B8   0x.... 0x....      BL       sub32
   \   000000BC   0xE007             B        ??ecp_mod_p384_6
   \                     ??ecp_mod_p384_5: (+1)
   \   000000BE   0x9900             LDR      R1,[SP, #+0]
   \   000000C0   0x1809             ADDS     R1,R1,R0
   \   000000C2   0x9100             STR      R1,[SP, #+0]
   \   000000C4   0x4281             CMP      R1,R0
   \   000000C6   0x4180             SBCS     R0,R0,R0
   \   000000C8   0x0FC0             LSRS     R0,R0,#+31
   \   000000CA   0x4669             MOV      R1,SP
   \   000000CC   0x7108             STRB     R0,[R1, #+4]
   1049          
   1050              ADD( 13 ); ADD( 22 ); ADD( 23 );
   \                     ??ecp_mod_p384_6: (+1)
   \   000000CE   0x68A0             LDR      R0,[R4, #+8]
   \   000000D0   0x6B40             LDR      R0,[R0, #+52]
   \   000000D2   0x9900             LDR      R1,[SP, #+0]
   \   000000D4   0x1809             ADDS     R1,R1,R0
   \   000000D6   0x9100             STR      R1,[SP, #+0]
   \   000000D8   0x4281             CMP      R1,R0
   \   000000DA   0xD203             BCS      ??ecp_mod_p384_7
   \   000000DC   0x4668             MOV      R0,SP
   \   000000DE   0x7900             LDRB     R0,[R0, #+4]
   \   000000E0   0x1C40             ADDS     R0,R0,#+1
   \   000000E2   0xE002             B        ??ecp_mod_p384_8
   \                     ??ecp_mod_p384_7: (+1)
   \   000000E4   0x4669             MOV      R1,SP
   \   000000E6   0x2004             MOVS     R0,#+4
   \   000000E8   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_8: (+1)
   \   000000EA   0x4669             MOV      R1,SP
   \   000000EC   0x7108             STRB     R0,[R1, #+4]
   \   000000EE   0x68A0             LDR      R0,[R4, #+8]
   \   000000F0   0x6D80             LDR      R0,[R0, #+88]
   \   000000F2   0x9900             LDR      R1,[SP, #+0]
   \   000000F4   0x1809             ADDS     R1,R1,R0
   \   000000F6   0x9100             STR      R1,[SP, #+0]
   \   000000F8   0x4281             CMP      R1,R0
   \   000000FA   0xD203             BCS      ??ecp_mod_p384_9
   \   000000FC   0x4668             MOV      R0,SP
   \   000000FE   0x7900             LDRB     R0,[R0, #+4]
   \   00000100   0x1C40             ADDS     R0,R0,#+1
   \   00000102   0xE002             B        ??ecp_mod_p384_10
   \                     ??ecp_mod_p384_9: (+1)
   \   00000104   0x4669             MOV      R1,SP
   \   00000106   0x2004             MOVS     R0,#+4
   \   00000108   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_10: (+1)
   \   0000010A   0x4669             MOV      R1,SP
   \   0000010C   0x7108             STRB     R0,[R1, #+4]
   \   0000010E   0x68A0             LDR      R0,[R4, #+8]
   \   00000110   0x6DC0             LDR      R0,[R0, #+92]
   \   00000112   0x9900             LDR      R1,[SP, #+0]
   \   00000114   0x1809             ADDS     R1,R1,R0
   \   00000116   0x9100             STR      R1,[SP, #+0]
   \   00000118   0x4281             CMP      R1,R0
   \   0000011A   0xD203             BCS      ??ecp_mod_p384_11
   \   0000011C   0x4668             MOV      R0,SP
   \   0000011E   0x7900             LDRB     R0,[R0, #+4]
   \   00000120   0x1C40             ADDS     R0,R0,#+1
   \   00000122   0xE002             B        ??ecp_mod_p384_12
   \                     ??ecp_mod_p384_11: (+1)
   \   00000124   0x4669             MOV      R1,SP
   \   00000126   0x2004             MOVS     R0,#+4
   \   00000128   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_12: (+1)
   \   0000012A   0x4669             MOV      R1,SP
   \   0000012C   0x7108             STRB     R0,[R1, #+4]
   1051              SUB( 12 ); SUB( 20 );                                   NEXT; // A2
   \   0000012E   0xAA01             ADD      R2,SP,#+4
   \   00000130   0x68A0             LDR      R0,[R4, #+8]
   \   00000132   0x6B01             LDR      R1,[R0, #+48]
   \   00000134   0x4668             MOV      R0,SP
   \   00000136   0x.... 0x....      BL       sub32
   \   0000013A   0xAA01             ADD      R2,SP,#+4
   \   0000013C   0x68A0             LDR      R0,[R4, #+8]
   \   0000013E   0x6D01             LDR      R1,[R0, #+80]
   \   00000140   0x4668             MOV      R0,SP
   \   00000142   0x.... 0x....      BL       sub32
   \   00000146   0x68A0             LDR      R0,[R4, #+8]
   \   00000148   0x9900             LDR      R1,[SP, #+0]
   \   0000014A   0x6041             STR      R1,[R0, #+4]
   \   0000014C   0x6880             LDR      R0,[R0, #+8]
   \   0000014E   0x9000             STR      R0,[SP, #+0]
   \   00000150   0x4669             MOV      R1,SP
   \   00000152   0x2004             MOVS     R0,#+4
   \   00000154   0x5608             LDRSB    R0,[R1, R0]
   \   00000156   0x466A             MOV      R2,SP
   \   00000158   0x7115             STRB     R5,[R2, #+4]
   \   0000015A   0x2800             CMP      R0,#+0
   \   0000015C   0xD505             BPL      ??ecp_mod_p384_13
   \   0000015E   0xAA01             ADD      R2,SP,#+4
   \   00000160   0x4241             RSBS     R1,R0,#+0
   \   00000162   0x4668             MOV      R0,SP
   \   00000164   0x.... 0x....      BL       sub32
   \   00000168   0xE007             B        ??ecp_mod_p384_14
   \                     ??ecp_mod_p384_13: (+1)
   \   0000016A   0x9900             LDR      R1,[SP, #+0]
   \   0000016C   0x1809             ADDS     R1,R1,R0
   \   0000016E   0x9100             STR      R1,[SP, #+0]
   \   00000170   0x4281             CMP      R1,R0
   \   00000172   0x4180             SBCS     R0,R0,R0
   \   00000174   0x0FC0             LSRS     R0,R0,#+31
   \   00000176   0x4669             MOV      R1,SP
   \   00000178   0x7108             STRB     R0,[R1, #+4]
   1052          
   1053              ADD( 14 ); ADD( 23 );
   \                     ??ecp_mod_p384_14: (+1)
   \   0000017A   0x68A0             LDR      R0,[R4, #+8]
   \   0000017C   0x6B80             LDR      R0,[R0, #+56]
   \   0000017E   0x9900             LDR      R1,[SP, #+0]
   \   00000180   0x1809             ADDS     R1,R1,R0
   \   00000182   0x9100             STR      R1,[SP, #+0]
   \   00000184   0x4281             CMP      R1,R0
   \   00000186   0xD203             BCS      ??ecp_mod_p384_15
   \   00000188   0x4668             MOV      R0,SP
   \   0000018A   0x7900             LDRB     R0,[R0, #+4]
   \   0000018C   0x1C40             ADDS     R0,R0,#+1
   \   0000018E   0xE002             B        ??ecp_mod_p384_16
   \                     ??ecp_mod_p384_15: (+1)
   \   00000190   0x4669             MOV      R1,SP
   \   00000192   0x2004             MOVS     R0,#+4
   \   00000194   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_16: (+1)
   \   00000196   0x4669             MOV      R1,SP
   \   00000198   0x7108             STRB     R0,[R1, #+4]
   \   0000019A   0x68A0             LDR      R0,[R4, #+8]
   \   0000019C   0x6DC0             LDR      R0,[R0, #+92]
   \   0000019E   0x9900             LDR      R1,[SP, #+0]
   \   000001A0   0x1809             ADDS     R1,R1,R0
   \   000001A2   0x9100             STR      R1,[SP, #+0]
   \   000001A4   0x4281             CMP      R1,R0
   \   000001A6   0xD203             BCS      ??ecp_mod_p384_17
   \   000001A8   0x4668             MOV      R0,SP
   \   000001AA   0x7900             LDRB     R0,[R0, #+4]
   \   000001AC   0x1C40             ADDS     R0,R0,#+1
   \   000001AE   0xE002             B        ??ecp_mod_p384_18
   \                     ??ecp_mod_p384_17: (+1)
   \   000001B0   0x4669             MOV      R1,SP
   \   000001B2   0x2004             MOVS     R0,#+4
   \   000001B4   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_18: (+1)
   \   000001B6   0x4669             MOV      R1,SP
   \   000001B8   0x7108             STRB     R0,[R1, #+4]
   1054              SUB( 13 ); SUB( 21 );                                   NEXT; // A2
   \   000001BA   0xAA01             ADD      R2,SP,#+4
   \   000001BC   0x68A0             LDR      R0,[R4, #+8]
   \   000001BE   0x6B41             LDR      R1,[R0, #+52]
   \   000001C0   0x4668             MOV      R0,SP
   \   000001C2   0x.... 0x....      BL       sub32
   \   000001C6   0xAA01             ADD      R2,SP,#+4
   \   000001C8   0x68A0             LDR      R0,[R4, #+8]
   \   000001CA   0x6D41             LDR      R1,[R0, #+84]
   \   000001CC   0x4668             MOV      R0,SP
   \   000001CE   0x.... 0x....      BL       sub32
   \   000001D2   0x68A0             LDR      R0,[R4, #+8]
   \   000001D4   0x9900             LDR      R1,[SP, #+0]
   \   000001D6   0x6081             STR      R1,[R0, #+8]
   \   000001D8   0x68C0             LDR      R0,[R0, #+12]
   \   000001DA   0x9000             STR      R0,[SP, #+0]
   \   000001DC   0x4669             MOV      R1,SP
   \   000001DE   0x2004             MOVS     R0,#+4
   \   000001E0   0x5608             LDRSB    R0,[R1, R0]
   \   000001E2   0x466A             MOV      R2,SP
   \   000001E4   0x7115             STRB     R5,[R2, #+4]
   \   000001E6   0x2800             CMP      R0,#+0
   \   000001E8   0xD505             BPL      ??ecp_mod_p384_19
   \   000001EA   0xAA01             ADD      R2,SP,#+4
   \   000001EC   0x4241             RSBS     R1,R0,#+0
   \   000001EE   0x4668             MOV      R0,SP
   \   000001F0   0x.... 0x....      BL       sub32
   \   000001F4   0xE007             B        ??ecp_mod_p384_20
   \                     ??ecp_mod_p384_19: (+1)
   \   000001F6   0x9900             LDR      R1,[SP, #+0]
   \   000001F8   0x1809             ADDS     R1,R1,R0
   \   000001FA   0x9100             STR      R1,[SP, #+0]
   \   000001FC   0x4281             CMP      R1,R0
   \   000001FE   0x4180             SBCS     R0,R0,R0
   \   00000200   0x0FC0             LSRS     R0,R0,#+31
   \   00000202   0x4669             MOV      R1,SP
   \   00000204   0x7108             STRB     R0,[R1, #+4]
   1055          
   1056              ADD( 15 ); ADD( 12 ); ADD( 20 ); ADD( 21 );
   \                     ??ecp_mod_p384_20: (+1)
   \   00000206   0x68A0             LDR      R0,[R4, #+8]
   \   00000208   0x6BC0             LDR      R0,[R0, #+60]
   \   0000020A   0x9900             LDR      R1,[SP, #+0]
   \   0000020C   0x1809             ADDS     R1,R1,R0
   \   0000020E   0x9100             STR      R1,[SP, #+0]
   \   00000210   0x4281             CMP      R1,R0
   \   00000212   0xD203             BCS      ??ecp_mod_p384_21
   \   00000214   0x4668             MOV      R0,SP
   \   00000216   0x7900             LDRB     R0,[R0, #+4]
   \   00000218   0x1C40             ADDS     R0,R0,#+1
   \   0000021A   0xE002             B        ??ecp_mod_p384_22
   \                     ??ecp_mod_p384_21: (+1)
   \   0000021C   0x4669             MOV      R1,SP
   \   0000021E   0x2004             MOVS     R0,#+4
   \   00000220   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_22: (+1)
   \   00000222   0x4669             MOV      R1,SP
   \   00000224   0x7108             STRB     R0,[R1, #+4]
   \   00000226   0x68A0             LDR      R0,[R4, #+8]
   \   00000228   0x6B00             LDR      R0,[R0, #+48]
   \   0000022A   0x9900             LDR      R1,[SP, #+0]
   \   0000022C   0x1809             ADDS     R1,R1,R0
   \   0000022E   0x9100             STR      R1,[SP, #+0]
   \   00000230   0x4281             CMP      R1,R0
   \   00000232   0xD203             BCS      ??ecp_mod_p384_23
   \   00000234   0x4668             MOV      R0,SP
   \   00000236   0x7900             LDRB     R0,[R0, #+4]
   \   00000238   0x1C40             ADDS     R0,R0,#+1
   \   0000023A   0xE002             B        ??ecp_mod_p384_24
   \                     ??ecp_mod_p384_23: (+1)
   \   0000023C   0x4669             MOV      R1,SP
   \   0000023E   0x2004             MOVS     R0,#+4
   \   00000240   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_24: (+1)
   \   00000242   0x4669             MOV      R1,SP
   \   00000244   0x7108             STRB     R0,[R1, #+4]
   \   00000246   0x68A0             LDR      R0,[R4, #+8]
   \   00000248   0x6D00             LDR      R0,[R0, #+80]
   \   0000024A   0x9900             LDR      R1,[SP, #+0]
   \   0000024C   0x1809             ADDS     R1,R1,R0
   \   0000024E   0x9100             STR      R1,[SP, #+0]
   \   00000250   0x4281             CMP      R1,R0
   \   00000252   0xD203             BCS      ??ecp_mod_p384_25
   \   00000254   0x4668             MOV      R0,SP
   \   00000256   0x7900             LDRB     R0,[R0, #+4]
   \   00000258   0x1C40             ADDS     R0,R0,#+1
   \   0000025A   0xE002             B        ??ecp_mod_p384_26
   \                     ??ecp_mod_p384_25: (+1)
   \   0000025C   0x4669             MOV      R1,SP
   \   0000025E   0x2004             MOVS     R0,#+4
   \   00000260   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_26: (+1)
   \   00000262   0x4669             MOV      R1,SP
   \   00000264   0x7108             STRB     R0,[R1, #+4]
   \   00000266   0x68A0             LDR      R0,[R4, #+8]
   \   00000268   0x6D40             LDR      R0,[R0, #+84]
   \   0000026A   0x9900             LDR      R1,[SP, #+0]
   \   0000026C   0x1809             ADDS     R1,R1,R0
   \   0000026E   0x9100             STR      R1,[SP, #+0]
   \   00000270   0x4281             CMP      R1,R0
   \   00000272   0xD203             BCS      ??ecp_mod_p384_27
   \   00000274   0x4668             MOV      R0,SP
   \   00000276   0x7900             LDRB     R0,[R0, #+4]
   \   00000278   0x1C40             ADDS     R0,R0,#+1
   \   0000027A   0xE002             B        ??ecp_mod_p384_28
   \                     ??ecp_mod_p384_27: (+1)
   \   0000027C   0x4669             MOV      R1,SP
   \   0000027E   0x2004             MOVS     R0,#+4
   \   00000280   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_28: (+1)
   \   00000282   0x4669             MOV      R1,SP
   \   00000284   0x7108             STRB     R0,[R1, #+4]
   1057              SUB( 14 ); SUB( 22 ); SUB( 23 );                        NEXT; // A3
   \   00000286   0xAA01             ADD      R2,SP,#+4
   \   00000288   0x68A0             LDR      R0,[R4, #+8]
   \   0000028A   0x6B81             LDR      R1,[R0, #+56]
   \   0000028C   0x4668             MOV      R0,SP
   \   0000028E   0x.... 0x....      BL       sub32
   \   00000292   0xAA01             ADD      R2,SP,#+4
   \   00000294   0x68A0             LDR      R0,[R4, #+8]
   \   00000296   0x6D81             LDR      R1,[R0, #+88]
   \   00000298   0x4668             MOV      R0,SP
   \   0000029A   0x.... 0x....      BL       sub32
   \   0000029E   0xAA01             ADD      R2,SP,#+4
   \   000002A0   0x68A0             LDR      R0,[R4, #+8]
   \   000002A2   0x6DC1             LDR      R1,[R0, #+92]
   \   000002A4   0x4668             MOV      R0,SP
   \   000002A6   0x.... 0x....      BL       sub32
   \   000002AA   0x68A0             LDR      R0,[R4, #+8]
   \   000002AC   0x9900             LDR      R1,[SP, #+0]
   \   000002AE   0x60C1             STR      R1,[R0, #+12]
   \   000002B0   0x6900             LDR      R0,[R0, #+16]
   \   000002B2   0x9000             STR      R0,[SP, #+0]
   \   000002B4   0x4669             MOV      R1,SP
   \   000002B6   0x2004             MOVS     R0,#+4
   \   000002B8   0x5608             LDRSB    R0,[R1, R0]
   \   000002BA   0x466A             MOV      R2,SP
   \   000002BC   0x7115             STRB     R5,[R2, #+4]
   \   000002BE   0x2800             CMP      R0,#+0
   \   000002C0   0xD505             BPL      ??ecp_mod_p384_29
   \   000002C2   0xAA01             ADD      R2,SP,#+4
   \   000002C4   0x4241             RSBS     R1,R0,#+0
   \   000002C6   0x4668             MOV      R0,SP
   \   000002C8   0x.... 0x....      BL       sub32
   \   000002CC   0xE007             B        ??ecp_mod_p384_30
   \                     ??ecp_mod_p384_29: (+1)
   \   000002CE   0x9900             LDR      R1,[SP, #+0]
   \   000002D0   0x1809             ADDS     R1,R1,R0
   \   000002D2   0x9100             STR      R1,[SP, #+0]
   \   000002D4   0x4281             CMP      R1,R0
   \   000002D6   0x4180             SBCS     R0,R0,R0
   \   000002D8   0x0FC0             LSRS     R0,R0,#+31
   \   000002DA   0x4669             MOV      R1,SP
   \   000002DC   0x7108             STRB     R0,[R1, #+4]
   1058          
   1059              ADD( 21 ); ADD( 21 ); ADD( 16 ); ADD( 13 ); ADD( 12 ); ADD( 20 ); ADD( 22 );
   \                     ??ecp_mod_p384_30: (+1)
   \   000002DE   0x68A0             LDR      R0,[R4, #+8]
   \   000002E0   0x6D40             LDR      R0,[R0, #+84]
   \   000002E2   0x9900             LDR      R1,[SP, #+0]
   \   000002E4   0x1809             ADDS     R1,R1,R0
   \   000002E6   0x9100             STR      R1,[SP, #+0]
   \   000002E8   0x4281             CMP      R1,R0
   \   000002EA   0xD203             BCS      ??ecp_mod_p384_31
   \   000002EC   0x4668             MOV      R0,SP
   \   000002EE   0x7900             LDRB     R0,[R0, #+4]
   \   000002F0   0x1C40             ADDS     R0,R0,#+1
   \   000002F2   0xE002             B        ??ecp_mod_p384_32
   \                     ??ecp_mod_p384_31: (+1)
   \   000002F4   0x4669             MOV      R1,SP
   \   000002F6   0x2004             MOVS     R0,#+4
   \   000002F8   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_32: (+1)
   \   000002FA   0x4669             MOV      R1,SP
   \   000002FC   0x7108             STRB     R0,[R1, #+4]
   \   000002FE   0x68A0             LDR      R0,[R4, #+8]
   \   00000300   0x6D40             LDR      R0,[R0, #+84]
   \   00000302   0x9900             LDR      R1,[SP, #+0]
   \   00000304   0x1809             ADDS     R1,R1,R0
   \   00000306   0x9100             STR      R1,[SP, #+0]
   \   00000308   0x4281             CMP      R1,R0
   \   0000030A   0xD203             BCS      ??ecp_mod_p384_33
   \   0000030C   0x4668             MOV      R0,SP
   \   0000030E   0x7900             LDRB     R0,[R0, #+4]
   \   00000310   0x1C40             ADDS     R0,R0,#+1
   \   00000312   0xE002             B        ??ecp_mod_p384_34
   \                     ??ecp_mod_p384_33: (+1)
   \   00000314   0x4669             MOV      R1,SP
   \   00000316   0x2004             MOVS     R0,#+4
   \   00000318   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_34: (+1)
   \   0000031A   0x4669             MOV      R1,SP
   \   0000031C   0x7108             STRB     R0,[R1, #+4]
   \   0000031E   0x68A0             LDR      R0,[R4, #+8]
   \   00000320   0x6C00             LDR      R0,[R0, #+64]
   \   00000322   0x9900             LDR      R1,[SP, #+0]
   \   00000324   0x1809             ADDS     R1,R1,R0
   \   00000326   0x9100             STR      R1,[SP, #+0]
   \   00000328   0x4281             CMP      R1,R0
   \   0000032A   0xD203             BCS      ??ecp_mod_p384_35
   \   0000032C   0x4668             MOV      R0,SP
   \   0000032E   0x7900             LDRB     R0,[R0, #+4]
   \   00000330   0x1C40             ADDS     R0,R0,#+1
   \   00000332   0xE002             B        ??ecp_mod_p384_36
   \                     ??ecp_mod_p384_35: (+1)
   \   00000334   0x4669             MOV      R1,SP
   \   00000336   0x2004             MOVS     R0,#+4
   \   00000338   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_36: (+1)
   \   0000033A   0x4669             MOV      R1,SP
   \   0000033C   0x7108             STRB     R0,[R1, #+4]
   \   0000033E   0x68A0             LDR      R0,[R4, #+8]
   \   00000340   0x6B40             LDR      R0,[R0, #+52]
   \   00000342   0x9900             LDR      R1,[SP, #+0]
   \   00000344   0x1809             ADDS     R1,R1,R0
   \   00000346   0x9100             STR      R1,[SP, #+0]
   \   00000348   0x4281             CMP      R1,R0
   \   0000034A   0xD203             BCS      ??ecp_mod_p384_37
   \   0000034C   0x4668             MOV      R0,SP
   \   0000034E   0x7900             LDRB     R0,[R0, #+4]
   \   00000350   0x1C40             ADDS     R0,R0,#+1
   \   00000352   0xE002             B        ??ecp_mod_p384_38
   \                     ??ecp_mod_p384_37: (+1)
   \   00000354   0x4669             MOV      R1,SP
   \   00000356   0x2004             MOVS     R0,#+4
   \   00000358   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_38: (+1)
   \   0000035A   0x4669             MOV      R1,SP
   \   0000035C   0x7108             STRB     R0,[R1, #+4]
   \   0000035E   0x68A0             LDR      R0,[R4, #+8]
   \   00000360   0x6B00             LDR      R0,[R0, #+48]
   \   00000362   0x9900             LDR      R1,[SP, #+0]
   \   00000364   0x1809             ADDS     R1,R1,R0
   \   00000366   0x9100             STR      R1,[SP, #+0]
   \   00000368   0x4281             CMP      R1,R0
   \   0000036A   0xD203             BCS      ??ecp_mod_p384_39
   \   0000036C   0x4668             MOV      R0,SP
   \   0000036E   0x7900             LDRB     R0,[R0, #+4]
   \   00000370   0x1C40             ADDS     R0,R0,#+1
   \   00000372   0xE002             B        ??ecp_mod_p384_40
   \                     ??ecp_mod_p384_39: (+1)
   \   00000374   0x4669             MOV      R1,SP
   \   00000376   0x2004             MOVS     R0,#+4
   \   00000378   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_40: (+1)
   \   0000037A   0x4669             MOV      R1,SP
   \   0000037C   0x7108             STRB     R0,[R1, #+4]
   \   0000037E   0x68A0             LDR      R0,[R4, #+8]
   \   00000380   0x6D00             LDR      R0,[R0, #+80]
   \   00000382   0x9900             LDR      R1,[SP, #+0]
   \   00000384   0x1809             ADDS     R1,R1,R0
   \   00000386   0x9100             STR      R1,[SP, #+0]
   \   00000388   0x4281             CMP      R1,R0
   \   0000038A   0xD203             BCS      ??ecp_mod_p384_41
   \   0000038C   0x4668             MOV      R0,SP
   \   0000038E   0x7900             LDRB     R0,[R0, #+4]
   \   00000390   0x1C40             ADDS     R0,R0,#+1
   \   00000392   0xE002             B        ??ecp_mod_p384_42
   \                     ??ecp_mod_p384_41: (+1)
   \   00000394   0x4669             MOV      R1,SP
   \   00000396   0x2004             MOVS     R0,#+4
   \   00000398   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_42: (+1)
   \   0000039A   0x4669             MOV      R1,SP
   \   0000039C   0x7108             STRB     R0,[R1, #+4]
   \   0000039E   0x68A0             LDR      R0,[R4, #+8]
   \   000003A0   0x6D80             LDR      R0,[R0, #+88]
   \   000003A2   0x9900             LDR      R1,[SP, #+0]
   \   000003A4   0x1809             ADDS     R1,R1,R0
   \   000003A6   0x9100             STR      R1,[SP, #+0]
   \   000003A8   0x4281             CMP      R1,R0
   \   000003AA   0xD203             BCS      ??ecp_mod_p384_43
   \   000003AC   0x4668             MOV      R0,SP
   \   000003AE   0x7900             LDRB     R0,[R0, #+4]
   \   000003B0   0x1C40             ADDS     R0,R0,#+1
   \   000003B2   0xE002             B        ??ecp_mod_p384_44
   \                     ??ecp_mod_p384_43: (+1)
   \   000003B4   0x4669             MOV      R1,SP
   \   000003B6   0x2004             MOVS     R0,#+4
   \   000003B8   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_44: (+1)
   \   000003BA   0x4669             MOV      R1,SP
   \   000003BC   0x7108             STRB     R0,[R1, #+4]
   1060              SUB( 15 ); SUB( 23 ); SUB( 23 );                        NEXT; // A4
   \   000003BE   0xAA01             ADD      R2,SP,#+4
   \   000003C0   0x68A0             LDR      R0,[R4, #+8]
   \   000003C2   0x6BC1             LDR      R1,[R0, #+60]
   \   000003C4   0x4668             MOV      R0,SP
   \   000003C6   0x.... 0x....      BL       sub32
   \   000003CA   0xAA01             ADD      R2,SP,#+4
   \   000003CC   0x68A0             LDR      R0,[R4, #+8]
   \   000003CE   0x6DC1             LDR      R1,[R0, #+92]
   \   000003D0   0x4668             MOV      R0,SP
   \   000003D2   0x.... 0x....      BL       sub32
   \   000003D6   0xAA01             ADD      R2,SP,#+4
   \   000003D8   0x68A0             LDR      R0,[R4, #+8]
   \   000003DA   0x6DC1             LDR      R1,[R0, #+92]
   \   000003DC   0x4668             MOV      R0,SP
   \   000003DE   0x.... 0x....      BL       sub32
   \   000003E2   0x68A0             LDR      R0,[R4, #+8]
   \   000003E4   0x9900             LDR      R1,[SP, #+0]
   \   000003E6   0x6101             STR      R1,[R0, #+16]
   \   000003E8   0x6940             LDR      R0,[R0, #+20]
   \   000003EA   0x9000             STR      R0,[SP, #+0]
   \   000003EC   0x4669             MOV      R1,SP
   \   000003EE   0x2004             MOVS     R0,#+4
   \   000003F0   0x5608             LDRSB    R0,[R1, R0]
   \   000003F2   0x466A             MOV      R2,SP
   \   000003F4   0x7115             STRB     R5,[R2, #+4]
   \   000003F6   0x2800             CMP      R0,#+0
   \   000003F8   0xD505             BPL      ??ecp_mod_p384_45
   \   000003FA   0xAA01             ADD      R2,SP,#+4
   \   000003FC   0x4241             RSBS     R1,R0,#+0
   \   000003FE   0x4668             MOV      R0,SP
   \   00000400   0x.... 0x....      BL       sub32
   \   00000404   0xE007             B        ??ecp_mod_p384_46
   \                     ??ecp_mod_p384_45: (+1)
   \   00000406   0x9900             LDR      R1,[SP, #+0]
   \   00000408   0x1809             ADDS     R1,R1,R0
   \   0000040A   0x9100             STR      R1,[SP, #+0]
   \   0000040C   0x4281             CMP      R1,R0
   \   0000040E   0x4180             SBCS     R0,R0,R0
   \   00000410   0x0FC0             LSRS     R0,R0,#+31
   \   00000412   0x4669             MOV      R1,SP
   \   00000414   0x7108             STRB     R0,[R1, #+4]
   1061          
   1062              ADD( 22 ); ADD( 22 ); ADD( 17 ); ADD( 14 ); ADD( 13 ); ADD( 21 ); ADD( 23 );
   \                     ??ecp_mod_p384_46: (+1)
   \   00000416   0x68A0             LDR      R0,[R4, #+8]
   \   00000418   0x6D80             LDR      R0,[R0, #+88]
   \   0000041A   0x9900             LDR      R1,[SP, #+0]
   \   0000041C   0x1809             ADDS     R1,R1,R0
   \   0000041E   0x9100             STR      R1,[SP, #+0]
   \   00000420   0x4281             CMP      R1,R0
   \   00000422   0xD203             BCS      ??ecp_mod_p384_47
   \   00000424   0x4668             MOV      R0,SP
   \   00000426   0x7900             LDRB     R0,[R0, #+4]
   \   00000428   0x1C40             ADDS     R0,R0,#+1
   \   0000042A   0xE002             B        ??ecp_mod_p384_48
   \                     ??ecp_mod_p384_47: (+1)
   \   0000042C   0x4669             MOV      R1,SP
   \   0000042E   0x2004             MOVS     R0,#+4
   \   00000430   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_48: (+1)
   \   00000432   0x4669             MOV      R1,SP
   \   00000434   0x7108             STRB     R0,[R1, #+4]
   \   00000436   0x68A0             LDR      R0,[R4, #+8]
   \   00000438   0x6D80             LDR      R0,[R0, #+88]
   \   0000043A   0x9900             LDR      R1,[SP, #+0]
   \   0000043C   0x1809             ADDS     R1,R1,R0
   \   0000043E   0x9100             STR      R1,[SP, #+0]
   \   00000440   0x4281             CMP      R1,R0
   \   00000442   0xD203             BCS      ??ecp_mod_p384_49
   \   00000444   0x4668             MOV      R0,SP
   \   00000446   0x7900             LDRB     R0,[R0, #+4]
   \   00000448   0x1C40             ADDS     R0,R0,#+1
   \   0000044A   0xE002             B        ??ecp_mod_p384_50
   \                     ??ecp_mod_p384_49: (+1)
   \   0000044C   0x4669             MOV      R1,SP
   \   0000044E   0x2004             MOVS     R0,#+4
   \   00000450   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_50: (+1)
   \   00000452   0x4669             MOV      R1,SP
   \   00000454   0x7108             STRB     R0,[R1, #+4]
   \   00000456   0x68A0             LDR      R0,[R4, #+8]
   \   00000458   0x6C40             LDR      R0,[R0, #+68]
   \   0000045A   0x9900             LDR      R1,[SP, #+0]
   \   0000045C   0x1809             ADDS     R1,R1,R0
   \   0000045E   0x9100             STR      R1,[SP, #+0]
   \   00000460   0x4281             CMP      R1,R0
   \   00000462   0xD203             BCS      ??ecp_mod_p384_51
   \   00000464   0x4668             MOV      R0,SP
   \   00000466   0x7900             LDRB     R0,[R0, #+4]
   \   00000468   0x1C40             ADDS     R0,R0,#+1
   \   0000046A   0xE002             B        ??ecp_mod_p384_52
   \                     ??ecp_mod_p384_51: (+1)
   \   0000046C   0x4669             MOV      R1,SP
   \   0000046E   0x2004             MOVS     R0,#+4
   \   00000470   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_52: (+1)
   \   00000472   0x4669             MOV      R1,SP
   \   00000474   0x7108             STRB     R0,[R1, #+4]
   \   00000476   0x68A0             LDR      R0,[R4, #+8]
   \   00000478   0x6B80             LDR      R0,[R0, #+56]
   \   0000047A   0x9900             LDR      R1,[SP, #+0]
   \   0000047C   0x1809             ADDS     R1,R1,R0
   \   0000047E   0x9100             STR      R1,[SP, #+0]
   \   00000480   0x4281             CMP      R1,R0
   \   00000482   0xD203             BCS      ??ecp_mod_p384_53
   \   00000484   0x4668             MOV      R0,SP
   \   00000486   0x7900             LDRB     R0,[R0, #+4]
   \   00000488   0x1C40             ADDS     R0,R0,#+1
   \   0000048A   0xE002             B        ??ecp_mod_p384_54
   \                     ??ecp_mod_p384_53: (+1)
   \   0000048C   0x4669             MOV      R1,SP
   \   0000048E   0x2004             MOVS     R0,#+4
   \   00000490   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_54: (+1)
   \   00000492   0x4669             MOV      R1,SP
   \   00000494   0x7108             STRB     R0,[R1, #+4]
   \   00000496   0x68A0             LDR      R0,[R4, #+8]
   \   00000498   0x6B40             LDR      R0,[R0, #+52]
   \   0000049A   0x9900             LDR      R1,[SP, #+0]
   \   0000049C   0x1809             ADDS     R1,R1,R0
   \   0000049E   0x9100             STR      R1,[SP, #+0]
   \   000004A0   0x4281             CMP      R1,R0
   \   000004A2   0xD203             BCS      ??ecp_mod_p384_55
   \   000004A4   0x4668             MOV      R0,SP
   \   000004A6   0x7900             LDRB     R0,[R0, #+4]
   \   000004A8   0x1C40             ADDS     R0,R0,#+1
   \   000004AA   0xE002             B        ??ecp_mod_p384_56
   \                     ??ecp_mod_p384_55: (+1)
   \   000004AC   0x4669             MOV      R1,SP
   \   000004AE   0x2004             MOVS     R0,#+4
   \   000004B0   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_56: (+1)
   \   000004B2   0x4669             MOV      R1,SP
   \   000004B4   0x7108             STRB     R0,[R1, #+4]
   \   000004B6   0x68A0             LDR      R0,[R4, #+8]
   \   000004B8   0x6D40             LDR      R0,[R0, #+84]
   \   000004BA   0x9900             LDR      R1,[SP, #+0]
   \   000004BC   0x1809             ADDS     R1,R1,R0
   \   000004BE   0x9100             STR      R1,[SP, #+0]
   \   000004C0   0x4281             CMP      R1,R0
   \   000004C2   0xD203             BCS      ??ecp_mod_p384_57
   \   000004C4   0x4668             MOV      R0,SP
   \   000004C6   0x7900             LDRB     R0,[R0, #+4]
   \   000004C8   0x1C40             ADDS     R0,R0,#+1
   \   000004CA   0xE002             B        ??ecp_mod_p384_58
   \                     ??ecp_mod_p384_57: (+1)
   \   000004CC   0x4669             MOV      R1,SP
   \   000004CE   0x2004             MOVS     R0,#+4
   \   000004D0   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_58: (+1)
   \   000004D2   0x4669             MOV      R1,SP
   \   000004D4   0x7108             STRB     R0,[R1, #+4]
   \   000004D6   0x68A0             LDR      R0,[R4, #+8]
   \   000004D8   0x6DC0             LDR      R0,[R0, #+92]
   \   000004DA   0x9900             LDR      R1,[SP, #+0]
   \   000004DC   0x1809             ADDS     R1,R1,R0
   \   000004DE   0x9100             STR      R1,[SP, #+0]
   \   000004E0   0x4281             CMP      R1,R0
   \   000004E2   0xD203             BCS      ??ecp_mod_p384_59
   \   000004E4   0x4668             MOV      R0,SP
   \   000004E6   0x7900             LDRB     R0,[R0, #+4]
   \   000004E8   0x1C40             ADDS     R0,R0,#+1
   \   000004EA   0xE002             B        ??ecp_mod_p384_60
   \                     ??ecp_mod_p384_59: (+1)
   \   000004EC   0x4669             MOV      R1,SP
   \   000004EE   0x2004             MOVS     R0,#+4
   \   000004F0   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_60: (+1)
   \   000004F2   0x4669             MOV      R1,SP
   \   000004F4   0x7108             STRB     R0,[R1, #+4]
   1063              SUB( 16 );                                              NEXT; // A5
   \   000004F6   0xAA01             ADD      R2,SP,#+4
   \   000004F8   0x68A0             LDR      R0,[R4, #+8]
   \   000004FA   0x6C01             LDR      R1,[R0, #+64]
   \   000004FC   0x4668             MOV      R0,SP
   \   000004FE   0x.... 0x....      BL       sub32
   \   00000502   0x68A0             LDR      R0,[R4, #+8]
   \   00000504   0x9900             LDR      R1,[SP, #+0]
   \   00000506   0x6141             STR      R1,[R0, #+20]
   \   00000508   0x6980             LDR      R0,[R0, #+24]
   \   0000050A   0x9000             STR      R0,[SP, #+0]
   \   0000050C   0x4669             MOV      R1,SP
   \   0000050E   0x2004             MOVS     R0,#+4
   \   00000510   0x5608             LDRSB    R0,[R1, R0]
   \   00000512   0x466A             MOV      R2,SP
   \   00000514   0x7115             STRB     R5,[R2, #+4]
   \   00000516   0x2800             CMP      R0,#+0
   \   00000518   0xD505             BPL      ??ecp_mod_p384_61
   \   0000051A   0xAA01             ADD      R2,SP,#+4
   \   0000051C   0x4241             RSBS     R1,R0,#+0
   \   0000051E   0x4668             MOV      R0,SP
   \   00000520   0x.... 0x....      BL       sub32
   \   00000524   0xE007             B        ??ecp_mod_p384_62
   \                     ??ecp_mod_p384_61: (+1)
   \   00000526   0x9900             LDR      R1,[SP, #+0]
   \   00000528   0x1809             ADDS     R1,R1,R0
   \   0000052A   0x9100             STR      R1,[SP, #+0]
   \   0000052C   0x4281             CMP      R1,R0
   \   0000052E   0x4180             SBCS     R0,R0,R0
   \   00000530   0x0FC0             LSRS     R0,R0,#+31
   \   00000532   0x4669             MOV      R1,SP
   \   00000534   0x7108             STRB     R0,[R1, #+4]
   1064          
   1065              ADD( 23 ); ADD( 23 ); ADD( 18 ); ADD( 15 ); ADD( 14 ); ADD( 22 );
   \                     ??ecp_mod_p384_62: (+1)
   \   00000536   0x68A0             LDR      R0,[R4, #+8]
   \   00000538   0x6DC0             LDR      R0,[R0, #+92]
   \   0000053A   0x9900             LDR      R1,[SP, #+0]
   \   0000053C   0x1809             ADDS     R1,R1,R0
   \   0000053E   0x9100             STR      R1,[SP, #+0]
   \   00000540   0x4281             CMP      R1,R0
   \   00000542   0xD203             BCS      ??ecp_mod_p384_63
   \   00000544   0x4668             MOV      R0,SP
   \   00000546   0x7900             LDRB     R0,[R0, #+4]
   \   00000548   0x1C40             ADDS     R0,R0,#+1
   \   0000054A   0xE002             B        ??ecp_mod_p384_64
   \                     ??ecp_mod_p384_63: (+1)
   \   0000054C   0x4669             MOV      R1,SP
   \   0000054E   0x2004             MOVS     R0,#+4
   \   00000550   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_64: (+1)
   \   00000552   0x4669             MOV      R1,SP
   \   00000554   0x7108             STRB     R0,[R1, #+4]
   \   00000556   0x68A0             LDR      R0,[R4, #+8]
   \   00000558   0x6DC0             LDR      R0,[R0, #+92]
   \   0000055A   0x9900             LDR      R1,[SP, #+0]
   \   0000055C   0x1809             ADDS     R1,R1,R0
   \   0000055E   0x9100             STR      R1,[SP, #+0]
   \   00000560   0x4281             CMP      R1,R0
   \   00000562   0xD203             BCS      ??ecp_mod_p384_65
   \   00000564   0x4668             MOV      R0,SP
   \   00000566   0x7900             LDRB     R0,[R0, #+4]
   \   00000568   0x1C40             ADDS     R0,R0,#+1
   \   0000056A   0xE002             B        ??ecp_mod_p384_66
   \                     ??ecp_mod_p384_65: (+1)
   \   0000056C   0x4669             MOV      R1,SP
   \   0000056E   0x2004             MOVS     R0,#+4
   \   00000570   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_66: (+1)
   \   00000572   0x4669             MOV      R1,SP
   \   00000574   0x7108             STRB     R0,[R1, #+4]
   \   00000576   0x68A0             LDR      R0,[R4, #+8]
   \   00000578   0x6C80             LDR      R0,[R0, #+72]
   \   0000057A   0x9900             LDR      R1,[SP, #+0]
   \   0000057C   0x1809             ADDS     R1,R1,R0
   \   0000057E   0x9100             STR      R1,[SP, #+0]
   \   00000580   0x4281             CMP      R1,R0
   \   00000582   0xD203             BCS      ??ecp_mod_p384_67
   \   00000584   0x4668             MOV      R0,SP
   \   00000586   0x7900             LDRB     R0,[R0, #+4]
   \   00000588   0x1C40             ADDS     R0,R0,#+1
   \   0000058A   0xE002             B        ??ecp_mod_p384_68
   \                     ??ecp_mod_p384_67: (+1)
   \   0000058C   0x4669             MOV      R1,SP
   \   0000058E   0x2004             MOVS     R0,#+4
   \   00000590   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_68: (+1)
   \   00000592   0x4669             MOV      R1,SP
   \   00000594   0x7108             STRB     R0,[R1, #+4]
   \   00000596   0x68A0             LDR      R0,[R4, #+8]
   \   00000598   0x6BC0             LDR      R0,[R0, #+60]
   \   0000059A   0x9900             LDR      R1,[SP, #+0]
   \   0000059C   0x1809             ADDS     R1,R1,R0
   \   0000059E   0x9100             STR      R1,[SP, #+0]
   \   000005A0   0x4281             CMP      R1,R0
   \   000005A2   0xD203             BCS      ??ecp_mod_p384_69
   \   000005A4   0x4668             MOV      R0,SP
   \   000005A6   0x7900             LDRB     R0,[R0, #+4]
   \   000005A8   0x1C40             ADDS     R0,R0,#+1
   \   000005AA   0xE002             B        ??ecp_mod_p384_70
   \                     ??ecp_mod_p384_69: (+1)
   \   000005AC   0x4669             MOV      R1,SP
   \   000005AE   0x2004             MOVS     R0,#+4
   \   000005B0   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_70: (+1)
   \   000005B2   0x4669             MOV      R1,SP
   \   000005B4   0x7108             STRB     R0,[R1, #+4]
   \   000005B6   0x68A0             LDR      R0,[R4, #+8]
   \   000005B8   0x6B80             LDR      R0,[R0, #+56]
   \   000005BA   0x9900             LDR      R1,[SP, #+0]
   \   000005BC   0x1809             ADDS     R1,R1,R0
   \   000005BE   0x9100             STR      R1,[SP, #+0]
   \   000005C0   0x4281             CMP      R1,R0
   \   000005C2   0xD203             BCS      ??ecp_mod_p384_71
   \   000005C4   0x4668             MOV      R0,SP
   \   000005C6   0x7900             LDRB     R0,[R0, #+4]
   \   000005C8   0x1C40             ADDS     R0,R0,#+1
   \   000005CA   0xE002             B        ??ecp_mod_p384_72
   \                     ??ecp_mod_p384_71: (+1)
   \   000005CC   0x4669             MOV      R1,SP
   \   000005CE   0x2004             MOVS     R0,#+4
   \   000005D0   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_72: (+1)
   \   000005D2   0x4669             MOV      R1,SP
   \   000005D4   0x7108             STRB     R0,[R1, #+4]
   \   000005D6   0x68A0             LDR      R0,[R4, #+8]
   \   000005D8   0x6D80             LDR      R0,[R0, #+88]
   \   000005DA   0x9900             LDR      R1,[SP, #+0]
   \   000005DC   0x1809             ADDS     R1,R1,R0
   \   000005DE   0x9100             STR      R1,[SP, #+0]
   \   000005E0   0x4281             CMP      R1,R0
   \   000005E2   0xD203             BCS      ??ecp_mod_p384_73
   \   000005E4   0x4668             MOV      R0,SP
   \   000005E6   0x7900             LDRB     R0,[R0, #+4]
   \   000005E8   0x1C40             ADDS     R0,R0,#+1
   \   000005EA   0xE002             B        ??ecp_mod_p384_74
   \                     ??ecp_mod_p384_73: (+1)
   \   000005EC   0x4669             MOV      R1,SP
   \   000005EE   0x2004             MOVS     R0,#+4
   \   000005F0   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_74: (+1)
   \   000005F2   0x4669             MOV      R1,SP
   \   000005F4   0x7108             STRB     R0,[R1, #+4]
   1066              SUB( 17 );                                              NEXT; // A6
   \   000005F6   0xAA01             ADD      R2,SP,#+4
   \   000005F8   0x68A0             LDR      R0,[R4, #+8]
   \   000005FA   0x6C41             LDR      R1,[R0, #+68]
   \   000005FC   0x4668             MOV      R0,SP
   \   000005FE   0x.... 0x....      BL       sub32
   \   00000602   0x68A0             LDR      R0,[R4, #+8]
   \   00000604   0x9900             LDR      R1,[SP, #+0]
   \   00000606   0x6181             STR      R1,[R0, #+24]
   \   00000608   0x69C0             LDR      R0,[R0, #+28]
   \   0000060A   0x9000             STR      R0,[SP, #+0]
   \   0000060C   0x4669             MOV      R1,SP
   \   0000060E   0x2004             MOVS     R0,#+4
   \   00000610   0x5608             LDRSB    R0,[R1, R0]
   \   00000612   0x466A             MOV      R2,SP
   \   00000614   0x7115             STRB     R5,[R2, #+4]
   \   00000616   0x2800             CMP      R0,#+0
   \   00000618   0xD505             BPL      ??ecp_mod_p384_75
   \   0000061A   0xAA01             ADD      R2,SP,#+4
   \   0000061C   0x4241             RSBS     R1,R0,#+0
   \   0000061E   0x4668             MOV      R0,SP
   \   00000620   0x.... 0x....      BL       sub32
   \   00000624   0xE007             B        ??ecp_mod_p384_76
   \                     ??ecp_mod_p384_75: (+1)
   \   00000626   0x9900             LDR      R1,[SP, #+0]
   \   00000628   0x1809             ADDS     R1,R1,R0
   \   0000062A   0x9100             STR      R1,[SP, #+0]
   \   0000062C   0x4281             CMP      R1,R0
   \   0000062E   0x4180             SBCS     R0,R0,R0
   \   00000630   0x0FC0             LSRS     R0,R0,#+31
   \   00000632   0x4669             MOV      R1,SP
   \   00000634   0x7108             STRB     R0,[R1, #+4]
   1067          
   1068              ADD( 19 ); ADD( 16 ); ADD( 15 ); ADD( 23 );
   \                     ??ecp_mod_p384_76: (+1)
   \   00000636   0x68A0             LDR      R0,[R4, #+8]
   \   00000638   0x6CC0             LDR      R0,[R0, #+76]
   \   0000063A   0x9900             LDR      R1,[SP, #+0]
   \   0000063C   0x1809             ADDS     R1,R1,R0
   \   0000063E   0x9100             STR      R1,[SP, #+0]
   \   00000640   0x4281             CMP      R1,R0
   \   00000642   0xD203             BCS      ??ecp_mod_p384_77
   \   00000644   0x4668             MOV      R0,SP
   \   00000646   0x7900             LDRB     R0,[R0, #+4]
   \   00000648   0x1C40             ADDS     R0,R0,#+1
   \   0000064A   0xE002             B        ??ecp_mod_p384_78
   \                     ??ecp_mod_p384_77: (+1)
   \   0000064C   0x4669             MOV      R1,SP
   \   0000064E   0x2004             MOVS     R0,#+4
   \   00000650   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_78: (+1)
   \   00000652   0x4669             MOV      R1,SP
   \   00000654   0x7108             STRB     R0,[R1, #+4]
   \   00000656   0x68A0             LDR      R0,[R4, #+8]
   \   00000658   0x6C00             LDR      R0,[R0, #+64]
   \   0000065A   0x9900             LDR      R1,[SP, #+0]
   \   0000065C   0x1809             ADDS     R1,R1,R0
   \   0000065E   0x9100             STR      R1,[SP, #+0]
   \   00000660   0x4281             CMP      R1,R0
   \   00000662   0xD203             BCS      ??ecp_mod_p384_79
   \   00000664   0x4668             MOV      R0,SP
   \   00000666   0x7900             LDRB     R0,[R0, #+4]
   \   00000668   0x1C40             ADDS     R0,R0,#+1
   \   0000066A   0xE002             B        ??ecp_mod_p384_80
   \                     ??ecp_mod_p384_79: (+1)
   \   0000066C   0x4669             MOV      R1,SP
   \   0000066E   0x2004             MOVS     R0,#+4
   \   00000670   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_80: (+1)
   \   00000672   0x4669             MOV      R1,SP
   \   00000674   0x7108             STRB     R0,[R1, #+4]
   \   00000676   0x68A0             LDR      R0,[R4, #+8]
   \   00000678   0x6BC0             LDR      R0,[R0, #+60]
   \   0000067A   0x9900             LDR      R1,[SP, #+0]
   \   0000067C   0x1809             ADDS     R1,R1,R0
   \   0000067E   0x9100             STR      R1,[SP, #+0]
   \   00000680   0x4281             CMP      R1,R0
   \   00000682   0xD203             BCS      ??ecp_mod_p384_81
   \   00000684   0x4668             MOV      R0,SP
   \   00000686   0x7900             LDRB     R0,[R0, #+4]
   \   00000688   0x1C40             ADDS     R0,R0,#+1
   \   0000068A   0xE002             B        ??ecp_mod_p384_82
   \                     ??ecp_mod_p384_81: (+1)
   \   0000068C   0x4669             MOV      R1,SP
   \   0000068E   0x2004             MOVS     R0,#+4
   \   00000690   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_82: (+1)
   \   00000692   0x4669             MOV      R1,SP
   \   00000694   0x7108             STRB     R0,[R1, #+4]
   \   00000696   0x68A0             LDR      R0,[R4, #+8]
   \   00000698   0x6DC0             LDR      R0,[R0, #+92]
   \   0000069A   0x9900             LDR      R1,[SP, #+0]
   \   0000069C   0x1809             ADDS     R1,R1,R0
   \   0000069E   0x9100             STR      R1,[SP, #+0]
   \   000006A0   0x4281             CMP      R1,R0
   \   000006A2   0xD203             BCS      ??ecp_mod_p384_83
   \   000006A4   0x4668             MOV      R0,SP
   \   000006A6   0x7900             LDRB     R0,[R0, #+4]
   \   000006A8   0x1C40             ADDS     R0,R0,#+1
   \   000006AA   0xE002             B        ??ecp_mod_p384_84
   \                     ??ecp_mod_p384_83: (+1)
   \   000006AC   0x4669             MOV      R1,SP
   \   000006AE   0x2004             MOVS     R0,#+4
   \   000006B0   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_84: (+1)
   \   000006B2   0x4669             MOV      R1,SP
   \   000006B4   0x7108             STRB     R0,[R1, #+4]
   1069              SUB( 18 );                                              NEXT; // A7
   \   000006B6   0xAA01             ADD      R2,SP,#+4
   \   000006B8   0x68A0             LDR      R0,[R4, #+8]
   \   000006BA   0x6C81             LDR      R1,[R0, #+72]
   \   000006BC   0x4668             MOV      R0,SP
   \   000006BE   0x.... 0x....      BL       sub32
   \   000006C2   0x68A0             LDR      R0,[R4, #+8]
   \   000006C4   0x9900             LDR      R1,[SP, #+0]
   \   000006C6   0x61C1             STR      R1,[R0, #+28]
   \   000006C8   0x6A00             LDR      R0,[R0, #+32]
   \   000006CA   0x9000             STR      R0,[SP, #+0]
   \   000006CC   0x4669             MOV      R1,SP
   \   000006CE   0x2004             MOVS     R0,#+4
   \   000006D0   0x5608             LDRSB    R0,[R1, R0]
   \   000006D2   0x466A             MOV      R2,SP
   \   000006D4   0x7115             STRB     R5,[R2, #+4]
   \   000006D6   0x2800             CMP      R0,#+0
   \   000006D8   0xD505             BPL      ??ecp_mod_p384_85
   \   000006DA   0xAA01             ADD      R2,SP,#+4
   \   000006DC   0x4241             RSBS     R1,R0,#+0
   \   000006DE   0x4668             MOV      R0,SP
   \   000006E0   0x.... 0x....      BL       sub32
   \   000006E4   0xE007             B        ??ecp_mod_p384_86
   \                     ??ecp_mod_p384_85: (+1)
   \   000006E6   0x9900             LDR      R1,[SP, #+0]
   \   000006E8   0x1809             ADDS     R1,R1,R0
   \   000006EA   0x9100             STR      R1,[SP, #+0]
   \   000006EC   0x4281             CMP      R1,R0
   \   000006EE   0x4180             SBCS     R0,R0,R0
   \   000006F0   0x0FC0             LSRS     R0,R0,#+31
   \   000006F2   0x4669             MOV      R1,SP
   \   000006F4   0x7108             STRB     R0,[R1, #+4]
   1070          
   1071              ADD( 20 ); ADD( 17 ); ADD( 16 );
   \                     ??ecp_mod_p384_86: (+1)
   \   000006F6   0x68A0             LDR      R0,[R4, #+8]
   \   000006F8   0x6D00             LDR      R0,[R0, #+80]
   \   000006FA   0x9900             LDR      R1,[SP, #+0]
   \   000006FC   0x1809             ADDS     R1,R1,R0
   \   000006FE   0x9100             STR      R1,[SP, #+0]
   \   00000700   0x4281             CMP      R1,R0
   \   00000702   0xD203             BCS      ??ecp_mod_p384_87
   \   00000704   0x4668             MOV      R0,SP
   \   00000706   0x7900             LDRB     R0,[R0, #+4]
   \   00000708   0x1C40             ADDS     R0,R0,#+1
   \   0000070A   0xE002             B        ??ecp_mod_p384_88
   \                     ??ecp_mod_p384_87: (+1)
   \   0000070C   0x4669             MOV      R1,SP
   \   0000070E   0x2004             MOVS     R0,#+4
   \   00000710   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_88: (+1)
   \   00000712   0x4669             MOV      R1,SP
   \   00000714   0x7108             STRB     R0,[R1, #+4]
   \   00000716   0x68A0             LDR      R0,[R4, #+8]
   \   00000718   0x6C40             LDR      R0,[R0, #+68]
   \   0000071A   0x9900             LDR      R1,[SP, #+0]
   \   0000071C   0x1809             ADDS     R1,R1,R0
   \   0000071E   0x9100             STR      R1,[SP, #+0]
   \   00000720   0x4281             CMP      R1,R0
   \   00000722   0xD203             BCS      ??ecp_mod_p384_89
   \   00000724   0x4668             MOV      R0,SP
   \   00000726   0x7900             LDRB     R0,[R0, #+4]
   \   00000728   0x1C40             ADDS     R0,R0,#+1
   \   0000072A   0xE002             B        ??ecp_mod_p384_90
   \                     ??ecp_mod_p384_89: (+1)
   \   0000072C   0x4669             MOV      R1,SP
   \   0000072E   0x2004             MOVS     R0,#+4
   \   00000730   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_90: (+1)
   \   00000732   0x4669             MOV      R1,SP
   \   00000734   0x7108             STRB     R0,[R1, #+4]
   \   00000736   0x68A0             LDR      R0,[R4, #+8]
   \   00000738   0x6C00             LDR      R0,[R0, #+64]
   \   0000073A   0x9900             LDR      R1,[SP, #+0]
   \   0000073C   0x1809             ADDS     R1,R1,R0
   \   0000073E   0x9100             STR      R1,[SP, #+0]
   \   00000740   0x4281             CMP      R1,R0
   \   00000742   0xD203             BCS      ??ecp_mod_p384_91
   \   00000744   0x4668             MOV      R0,SP
   \   00000746   0x7900             LDRB     R0,[R0, #+4]
   \   00000748   0x1C40             ADDS     R0,R0,#+1
   \   0000074A   0xE002             B        ??ecp_mod_p384_92
   \                     ??ecp_mod_p384_91: (+1)
   \   0000074C   0x4669             MOV      R1,SP
   \   0000074E   0x2004             MOVS     R0,#+4
   \   00000750   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_92: (+1)
   \   00000752   0x4669             MOV      R1,SP
   \   00000754   0x7108             STRB     R0,[R1, #+4]
   1072              SUB( 19 );                                              NEXT; // A8
   \   00000756   0xAA01             ADD      R2,SP,#+4
   \   00000758   0x68A0             LDR      R0,[R4, #+8]
   \   0000075A   0x6CC1             LDR      R1,[R0, #+76]
   \   0000075C   0x4668             MOV      R0,SP
   \   0000075E   0x.... 0x....      BL       sub32
   \   00000762   0x68A0             LDR      R0,[R4, #+8]
   \   00000764   0x9900             LDR      R1,[SP, #+0]
   \   00000766   0x6201             STR      R1,[R0, #+32]
   \   00000768   0x6A40             LDR      R0,[R0, #+36]
   \   0000076A   0x9000             STR      R0,[SP, #+0]
   \   0000076C   0x4669             MOV      R1,SP
   \   0000076E   0x2004             MOVS     R0,#+4
   \   00000770   0x5608             LDRSB    R0,[R1, R0]
   \   00000772   0x466A             MOV      R2,SP
   \   00000774   0x7115             STRB     R5,[R2, #+4]
   \   00000776   0x2800             CMP      R0,#+0
   \   00000778   0xD505             BPL      ??ecp_mod_p384_93
   \   0000077A   0xAA01             ADD      R2,SP,#+4
   \   0000077C   0x4241             RSBS     R1,R0,#+0
   \   0000077E   0x4668             MOV      R0,SP
   \   00000780   0x.... 0x....      BL       sub32
   \   00000784   0xE007             B        ??ecp_mod_p384_94
   \                     ??ecp_mod_p384_93: (+1)
   \   00000786   0x9900             LDR      R1,[SP, #+0]
   \   00000788   0x1809             ADDS     R1,R1,R0
   \   0000078A   0x9100             STR      R1,[SP, #+0]
   \   0000078C   0x4281             CMP      R1,R0
   \   0000078E   0x4180             SBCS     R0,R0,R0
   \   00000790   0x0FC0             LSRS     R0,R0,#+31
   \   00000792   0x4669             MOV      R1,SP
   \   00000794   0x7108             STRB     R0,[R1, #+4]
   1073          
   1074              ADD( 21 ); ADD( 18 ); ADD( 17 );
   \                     ??ecp_mod_p384_94: (+1)
   \   00000796   0x68A0             LDR      R0,[R4, #+8]
   \   00000798   0x6D40             LDR      R0,[R0, #+84]
   \   0000079A   0x9900             LDR      R1,[SP, #+0]
   \   0000079C   0x1809             ADDS     R1,R1,R0
   \   0000079E   0x9100             STR      R1,[SP, #+0]
   \   000007A0   0x4281             CMP      R1,R0
   \   000007A2   0xD203             BCS      ??ecp_mod_p384_95
   \   000007A4   0x4668             MOV      R0,SP
   \   000007A6   0x7900             LDRB     R0,[R0, #+4]
   \   000007A8   0x1C40             ADDS     R0,R0,#+1
   \   000007AA   0xE002             B        ??ecp_mod_p384_96
   \                     ??ecp_mod_p384_95: (+1)
   \   000007AC   0x4669             MOV      R1,SP
   \   000007AE   0x2004             MOVS     R0,#+4
   \   000007B0   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_96: (+1)
   \   000007B2   0x4669             MOV      R1,SP
   \   000007B4   0x7108             STRB     R0,[R1, #+4]
   \   000007B6   0x68A0             LDR      R0,[R4, #+8]
   \   000007B8   0x6C80             LDR      R0,[R0, #+72]
   \   000007BA   0x9900             LDR      R1,[SP, #+0]
   \   000007BC   0x1809             ADDS     R1,R1,R0
   \   000007BE   0x9100             STR      R1,[SP, #+0]
   \   000007C0   0x4281             CMP      R1,R0
   \   000007C2   0xD203             BCS      ??ecp_mod_p384_97
   \   000007C4   0x4668             MOV      R0,SP
   \   000007C6   0x7900             LDRB     R0,[R0, #+4]
   \   000007C8   0x1C40             ADDS     R0,R0,#+1
   \   000007CA   0xE002             B        ??ecp_mod_p384_98
   \                     ??ecp_mod_p384_97: (+1)
   \   000007CC   0x4669             MOV      R1,SP
   \   000007CE   0x2004             MOVS     R0,#+4
   \   000007D0   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_98: (+1)
   \   000007D2   0x4669             MOV      R1,SP
   \   000007D4   0x7108             STRB     R0,[R1, #+4]
   \   000007D6   0x68A0             LDR      R0,[R4, #+8]
   \   000007D8   0x6C40             LDR      R0,[R0, #+68]
   \   000007DA   0x9900             LDR      R1,[SP, #+0]
   \   000007DC   0x1809             ADDS     R1,R1,R0
   \   000007DE   0x9100             STR      R1,[SP, #+0]
   \   000007E0   0x4281             CMP      R1,R0
   \   000007E2   0xD203             BCS      ??ecp_mod_p384_99
   \   000007E4   0x4668             MOV      R0,SP
   \   000007E6   0x7900             LDRB     R0,[R0, #+4]
   \   000007E8   0x1C40             ADDS     R0,R0,#+1
   \   000007EA   0xE002             B        ??ecp_mod_p384_100
   \                     ??ecp_mod_p384_99: (+1)
   \   000007EC   0x4669             MOV      R1,SP
   \   000007EE   0x2004             MOVS     R0,#+4
   \   000007F0   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_100: (+1)
   \   000007F2   0x4669             MOV      R1,SP
   \   000007F4   0x7108             STRB     R0,[R1, #+4]
   1075              SUB( 20 );                                              NEXT; // A9
   \   000007F6   0xAA01             ADD      R2,SP,#+4
   \   000007F8   0x68A0             LDR      R0,[R4, #+8]
   \   000007FA   0x6D01             LDR      R1,[R0, #+80]
   \   000007FC   0x4668             MOV      R0,SP
   \   000007FE   0x.... 0x....      BL       sub32
   \   00000802   0x68A0             LDR      R0,[R4, #+8]
   \   00000804   0x9900             LDR      R1,[SP, #+0]
   \   00000806   0x6241             STR      R1,[R0, #+36]
   \   00000808   0x6A80             LDR      R0,[R0, #+40]
   \   0000080A   0x9000             STR      R0,[SP, #+0]
   \   0000080C   0x4669             MOV      R1,SP
   \   0000080E   0x2004             MOVS     R0,#+4
   \   00000810   0x5608             LDRSB    R0,[R1, R0]
   \   00000812   0x466A             MOV      R2,SP
   \   00000814   0x7115             STRB     R5,[R2, #+4]
   \   00000816   0x2800             CMP      R0,#+0
   \   00000818   0xD505             BPL      ??ecp_mod_p384_101
   \   0000081A   0xAA01             ADD      R2,SP,#+4
   \   0000081C   0x4241             RSBS     R1,R0,#+0
   \   0000081E   0x4668             MOV      R0,SP
   \   00000820   0x.... 0x....      BL       sub32
   \   00000824   0xE007             B        ??ecp_mod_p384_102
   \                     ??ecp_mod_p384_101: (+1)
   \   00000826   0x9900             LDR      R1,[SP, #+0]
   \   00000828   0x1809             ADDS     R1,R1,R0
   \   0000082A   0x9100             STR      R1,[SP, #+0]
   \   0000082C   0x4281             CMP      R1,R0
   \   0000082E   0x4180             SBCS     R0,R0,R0
   \   00000830   0x0FC0             LSRS     R0,R0,#+31
   \   00000832   0x4669             MOV      R1,SP
   \   00000834   0x7108             STRB     R0,[R1, #+4]
   1076          
   1077              ADD( 22 ); ADD( 19 ); ADD( 18 );
   \                     ??ecp_mod_p384_102: (+1)
   \   00000836   0x68A0             LDR      R0,[R4, #+8]
   \   00000838   0x6D80             LDR      R0,[R0, #+88]
   \   0000083A   0x9900             LDR      R1,[SP, #+0]
   \   0000083C   0x1809             ADDS     R1,R1,R0
   \   0000083E   0x9100             STR      R1,[SP, #+0]
   \   00000840   0x4281             CMP      R1,R0
   \   00000842   0xD203             BCS      ??ecp_mod_p384_103
   \   00000844   0x4668             MOV      R0,SP
   \   00000846   0x7900             LDRB     R0,[R0, #+4]
   \   00000848   0x1C40             ADDS     R0,R0,#+1
   \   0000084A   0xE002             B        ??ecp_mod_p384_104
   \                     ??ecp_mod_p384_103: (+1)
   \   0000084C   0x4669             MOV      R1,SP
   \   0000084E   0x2004             MOVS     R0,#+4
   \   00000850   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_104: (+1)
   \   00000852   0x4669             MOV      R1,SP
   \   00000854   0x7108             STRB     R0,[R1, #+4]
   \   00000856   0x68A0             LDR      R0,[R4, #+8]
   \   00000858   0x6CC0             LDR      R0,[R0, #+76]
   \   0000085A   0x9900             LDR      R1,[SP, #+0]
   \   0000085C   0x1809             ADDS     R1,R1,R0
   \   0000085E   0x9100             STR      R1,[SP, #+0]
   \   00000860   0x4281             CMP      R1,R0
   \   00000862   0xD203             BCS      ??ecp_mod_p384_105
   \   00000864   0x4668             MOV      R0,SP
   \   00000866   0x7900             LDRB     R0,[R0, #+4]
   \   00000868   0x1C40             ADDS     R0,R0,#+1
   \   0000086A   0xE002             B        ??ecp_mod_p384_106
   \                     ??ecp_mod_p384_105: (+1)
   \   0000086C   0x4669             MOV      R1,SP
   \   0000086E   0x2004             MOVS     R0,#+4
   \   00000870   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_106: (+1)
   \   00000872   0x4669             MOV      R1,SP
   \   00000874   0x7108             STRB     R0,[R1, #+4]
   \   00000876   0x68A0             LDR      R0,[R4, #+8]
   \   00000878   0x6C80             LDR      R0,[R0, #+72]
   \   0000087A   0x9900             LDR      R1,[SP, #+0]
   \   0000087C   0x1809             ADDS     R1,R1,R0
   \   0000087E   0x9100             STR      R1,[SP, #+0]
   \   00000880   0x4281             CMP      R1,R0
   \   00000882   0xD203             BCS      ??ecp_mod_p384_107
   \   00000884   0x4668             MOV      R0,SP
   \   00000886   0x7900             LDRB     R0,[R0, #+4]
   \   00000888   0x1C40             ADDS     R0,R0,#+1
   \   0000088A   0xE002             B        ??ecp_mod_p384_108
   \                     ??ecp_mod_p384_107: (+1)
   \   0000088C   0x4669             MOV      R1,SP
   \   0000088E   0x2004             MOVS     R0,#+4
   \   00000890   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_108: (+1)
   \   00000892   0x4669             MOV      R1,SP
   \   00000894   0x7108             STRB     R0,[R1, #+4]
   1078              SUB( 21 );                                              NEXT; // A10
   \   00000896   0xAA01             ADD      R2,SP,#+4
   \   00000898   0x68A0             LDR      R0,[R4, #+8]
   \   0000089A   0x6D41             LDR      R1,[R0, #+84]
   \   0000089C   0x4668             MOV      R0,SP
   \   0000089E   0x.... 0x....      BL       sub32
   \   000008A2   0x68A0             LDR      R0,[R4, #+8]
   \   000008A4   0x9900             LDR      R1,[SP, #+0]
   \   000008A6   0x6281             STR      R1,[R0, #+40]
   \   000008A8   0x6AC0             LDR      R0,[R0, #+44]
   \   000008AA   0x9000             STR      R0,[SP, #+0]
   \   000008AC   0x4669             MOV      R1,SP
   \   000008AE   0x2004             MOVS     R0,#+4
   \   000008B0   0x5608             LDRSB    R0,[R1, R0]
   \   000008B2   0x466A             MOV      R2,SP
   \   000008B4   0x7115             STRB     R5,[R2, #+4]
   \   000008B6   0x2800             CMP      R0,#+0
   \   000008B8   0xD505             BPL      ??ecp_mod_p384_109
   \   000008BA   0xAA01             ADD      R2,SP,#+4
   \   000008BC   0x4241             RSBS     R1,R0,#+0
   \   000008BE   0x4668             MOV      R0,SP
   \   000008C0   0x.... 0x....      BL       sub32
   \   000008C4   0xE007             B        ??ecp_mod_p384_110
   \                     ??ecp_mod_p384_109: (+1)
   \   000008C6   0x9900             LDR      R1,[SP, #+0]
   \   000008C8   0x1809             ADDS     R1,R1,R0
   \   000008CA   0x9100             STR      R1,[SP, #+0]
   \   000008CC   0x4281             CMP      R1,R0
   \   000008CE   0x4180             SBCS     R0,R0,R0
   \   000008D0   0x0FC0             LSRS     R0,R0,#+31
   \   000008D2   0x4669             MOV      R1,SP
   \   000008D4   0x7108             STRB     R0,[R1, #+4]
   1079          
   1080              ADD( 23 ); ADD( 20 ); ADD( 19 );
   \                     ??ecp_mod_p384_110: (+1)
   \   000008D6   0x68A0             LDR      R0,[R4, #+8]
   \   000008D8   0x6DC0             LDR      R0,[R0, #+92]
   \   000008DA   0x9900             LDR      R1,[SP, #+0]
   \   000008DC   0x1809             ADDS     R1,R1,R0
   \   000008DE   0x9100             STR      R1,[SP, #+0]
   \   000008E0   0x4281             CMP      R1,R0
   \   000008E2   0xD203             BCS      ??ecp_mod_p384_111
   \   000008E4   0x4668             MOV      R0,SP
   \   000008E6   0x7900             LDRB     R0,[R0, #+4]
   \   000008E8   0x1C40             ADDS     R0,R0,#+1
   \   000008EA   0xE002             B        ??ecp_mod_p384_112
   \                     ??ecp_mod_p384_111: (+1)
   \   000008EC   0x4669             MOV      R1,SP
   \   000008EE   0x2004             MOVS     R0,#+4
   \   000008F0   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_112: (+1)
   \   000008F2   0x4669             MOV      R1,SP
   \   000008F4   0x7108             STRB     R0,[R1, #+4]
   \   000008F6   0x68A0             LDR      R0,[R4, #+8]
   \   000008F8   0x6D00             LDR      R0,[R0, #+80]
   \   000008FA   0x9900             LDR      R1,[SP, #+0]
   \   000008FC   0x1809             ADDS     R1,R1,R0
   \   000008FE   0x9100             STR      R1,[SP, #+0]
   \   00000900   0x4281             CMP      R1,R0
   \   00000902   0xD203             BCS      ??ecp_mod_p384_113
   \   00000904   0x4668             MOV      R0,SP
   \   00000906   0x7900             LDRB     R0,[R0, #+4]
   \   00000908   0x1C40             ADDS     R0,R0,#+1
   \   0000090A   0xE002             B        ??ecp_mod_p384_114
   \                     ??ecp_mod_p384_113: (+1)
   \   0000090C   0x4669             MOV      R1,SP
   \   0000090E   0x2004             MOVS     R0,#+4
   \   00000910   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_114: (+1)
   \   00000912   0x4669             MOV      R1,SP
   \   00000914   0x7108             STRB     R0,[R1, #+4]
   \   00000916   0x68A0             LDR      R0,[R4, #+8]
   \   00000918   0x6CC0             LDR      R0,[R0, #+76]
   \   0000091A   0x9900             LDR      R1,[SP, #+0]
   \   0000091C   0x1809             ADDS     R1,R1,R0
   \   0000091E   0x9100             STR      R1,[SP, #+0]
   \   00000920   0x4281             CMP      R1,R0
   \   00000922   0xD203             BCS      ??ecp_mod_p384_115
   \   00000924   0x4668             MOV      R0,SP
   \   00000926   0x7900             LDRB     R0,[R0, #+4]
   \   00000928   0x1C40             ADDS     R0,R0,#+1
   \   0000092A   0xE002             B        ??ecp_mod_p384_116
   \                     ??ecp_mod_p384_115: (+1)
   \   0000092C   0x4669             MOV      R1,SP
   \   0000092E   0x2004             MOVS     R0,#+4
   \   00000930   0x5608             LDRSB    R0,[R1, R0]
   \                     ??ecp_mod_p384_116: (+1)
   \   00000932   0x4669             MOV      R1,SP
   \   00000934   0x7108             STRB     R0,[R1, #+4]
   1081              SUB( 22 );                                              LAST; // A11
   \   00000936   0xAA01             ADD      R2,SP,#+4
   \   00000938   0x68A0             LDR      R0,[R4, #+8]
   \   0000093A   0x6D81             LDR      R1,[R0, #+88]
   \   0000093C   0x4668             MOV      R0,SP
   \   0000093E   0x.... 0x....      BL       sub32
   \   00000942   0x68A0             LDR      R0,[R4, #+8]
   \   00000944   0x9900             LDR      R1,[SP, #+0]
   \   00000946   0x62C1             STR      R1,[R0, #+44]
   \   00000948   0x210C             MOVS     R1,#+12
   \   0000094A   0x466B             MOV      R3,SP
   \   0000094C   0x2204             MOVS     R2,#+4
   \   0000094E   0x569A             LDRSB    R2,[R3, R2]
   \   00000950   0x2A01             CMP      R2,#+1
   \   00000952   0xDB01             BLT      ??ecp_mod_p384_117
   \   00000954   0x0013             MOVS     R3,R2
   \   00000956   0xE000             B        ??ecp_mod_p384_118
   \                     ??ecp_mod_p384_117: (+1)
   \   00000958   0x2300             MOVS     R3,#+0
   \                     ??ecp_mod_p384_118: (+1)
   \   0000095A   0x6303             STR      R3,[R0, #+48]
   \   0000095C   0x9500             STR      R5,[SP, #+0]
   \   0000095E   0x3034             ADDS     R0,R0,#+52
   \   00000960   0xE002             B        ??ecp_mod_p384_119
   \                     ??ecp_mod_p384_120: (+1)
   \   00000962   0x9B00             LDR      R3,[SP, #+0]
   \   00000964   0x6003             STR      R3,[R0, #+0]
   \   00000966   0x1D00             ADDS     R0,R0,#+4
   \                     ??ecp_mod_p384_119: (+1)
   \   00000968   0x1C49             ADDS     R1,R1,#+1
   \   0000096A   0x6863             LDR      R3,[R4, #+4]
   \   0000096C   0x4299             CMP      R1,R3
   \   0000096E   0xD3F8             BCC      ??ecp_mod_p384_120
   \   00000970   0x2A00             CMP      R2,#+0
   \   00000972   0xD508             BPL      ??ecp_mod_p384_0
   \   00000974   0x23C0             MOVS     R3,#+192
   \   00000976   0x005B             LSLS     R3,R3,#+1        ;; #+384
   \   00000978   0xAA02             ADD      R2,SP,#+8
   \   0000097A   0x4669             MOV      R1,SP
   \   0000097C   0x2004             MOVS     R0,#+4
   \   0000097E   0x5609             LDRSB    R1,[R1, R0]
   \   00000980   0x0020             MOVS     R0,R4
   \   00000982   0x.... 0x....      BL       fix_negative
   1082          
   1083          cleanup:
   1084              return( ret );
   \                     ??ecp_mod_p384_0: (+1)
   \   00000986   0x0030             MOVS     R0,R6
   \   00000988   0xB012             ADD      SP,SP,#+72
   \   0000098A   0xBD70             POP      {R4-R6,PC}       ;; return
   1085          }
   1086          #endif /* MBEDTLS_ECP_DP_SECP384R1_ENABLED */
   1087          
   1088          #undef A
   1089          #undef LOAD32
   1090          #undef STORE32
   1091          #undef MAX32
   1092          #undef INIT
   1093          #undef NEXT
   1094          #undef LAST
   1095          
   1096          #endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED ||
   1097                    MBEDTLS_ECP_DP_SECP256R1_ENABLED ||
   1098                    MBEDTLS_ECP_DP_SECP384R1_ENABLED */
   1099          
   1100          #if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)
   1101          /*
   1102           * Here we have an actual Mersenne prime, so things are more straightforward.
   1103           * However, chunks are aligned on a 'weird' boundary (521 bits).
   1104           */
   1105          
   1106          /* Size of p521 in terms of mbedtls_mpi_uint */
   1107          #define P521_WIDTH      ( 521 / 8 / sizeof( mbedtls_mpi_uint ) + 1 )
   1108          
   1109          /* Bits to keep in the most significant mbedtls_mpi_uint */
   1110          #define P521_MASK       0x01FF
   1111          
   1112          /*
   1113           * Fast quasi-reduction modulo p521 (FIPS 186-3 D.2.5)
   1114           * Write N as A1 + 2^521 A0, return A0 + A1
   1115           */
   1116          static int ecp_mod_p521( mbedtls_mpi *N )
   1117          {
   1118              int ret;
   1119              size_t i;
   1120              mbedtls_mpi M;
   1121              mbedtls_mpi_uint Mp[P521_WIDTH + 1];
   1122              /* Worst case for the size of M is when mbedtls_mpi_uint is 16 bits:
   1123               * we need to hold bits 513 to 1056, which is 34 limbs, that is
   1124               * P521_WIDTH + 1. Otherwise P521_WIDTH is enough. */
   1125          
   1126              if( N->n < P521_WIDTH )
   1127                  return( 0 );
   1128          
   1129              /* M = A1 */
   1130              M.s = 1;
   1131              M.n = N->n - ( P521_WIDTH - 1 );
   1132              if( M.n > P521_WIDTH + 1 )
   1133                  M.n = P521_WIDTH + 1;
   1134              M.p = Mp;
   1135              memcpy( Mp, N->p + P521_WIDTH - 1, M.n * sizeof( mbedtls_mpi_uint ) );
   1136              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, 521 % ( 8 * sizeof( mbedtls_mpi_uint ) ) ) );
   1137          
   1138              /* N = A0 */
   1139              N->p[P521_WIDTH - 1] &= P521_MASK;
   1140              for( i = P521_WIDTH; i < N->n; i++ )
   1141                  N->p[i] = 0;
   1142          
   1143              /* N = A0 + A1 */
   1144              MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
   1145          
   1146          cleanup:
   1147              return( ret );
   1148          }
   1149          
   1150          #undef P521_WIDTH
   1151          #undef P521_MASK
   1152          #endif /* MBEDTLS_ECP_DP_SECP521R1_ENABLED */
   1153          
   1154          #endif /* MBEDTLS_ECP_NIST_OPTIM */
   1155          
   1156          #if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)
   1157          
   1158          /* Size of p255 in terms of mbedtls_mpi_uint */
   1159          #define P255_WIDTH      ( 255 / 8 / sizeof( mbedtls_mpi_uint ) + 1 )
   1160          
   1161          /*
   1162           * Fast quasi-reduction modulo p255 = 2^255 - 19
   1163           * Write N as A0 + 2^255 A1, return A0 + 19 * A1
   1164           */

   \                                 In section .text, align 2, keep-with-next
   1165          static int ecp_mod_p255( mbedtls_mpi *N )
   1166          {
   \                     ecp_mod_p255: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08E             SUB      SP,SP,#+56
   \   00000004   0x0004             MOVS     R4,R0
   1167              int ret;
   1168              size_t i;
   1169              mbedtls_mpi M;
   1170              mbedtls_mpi_uint Mp[P255_WIDTH + 2];
   1171          
   1172              if( N->n < P255_WIDTH )
   \   00000006   0x6860             LDR      R0,[R4, #+4]
   \   00000008   0x2808             CMP      R0,#+8
   \   0000000A   0xD201             BCS      ??ecp_mod_p255_0
   1173                  return( 0 );
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xE03B             B        ??ecp_mod_p255_1
   1174          
   1175              /* M = A1 */
   1176              M.s = 1;
   \                     ??ecp_mod_p255_0: (+1)
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x9000             STR      R0,[SP, #+0]
   1177              M.n = N->n - ( P255_WIDTH - 1 );
   \   00000014   0x6860             LDR      R0,[R4, #+4]
   \   00000016   0x1FC0             SUBS     R0,R0,#+7
   \   00000018   0x9001             STR      R0,[SP, #+4]
   1178              if( M.n > P255_WIDTH + 1 )
   \   0000001A   0x280A             CMP      R0,#+10
   \   0000001C   0xD301             BCC      ??ecp_mod_p255_2
   1179                  M.n = P255_WIDTH + 1;
   \   0000001E   0x2009             MOVS     R0,#+9
   \   00000020   0x9001             STR      R0,[SP, #+4]
   1180              M.p = Mp;
   \                     ??ecp_mod_p255_2: (+1)
   \   00000022   0xA803             ADD      R0,SP,#+12
   \   00000024   0x9002             STR      R0,[SP, #+8]
   1181              memset( Mp, 0, sizeof Mp );
   \   00000026   0x2128             MOVS     R1,#+40
   \   00000028   0x.... 0x....      BL       __aeabi_memclr4
   1182              memcpy( Mp, N->p + P255_WIDTH - 1, M.n * sizeof( mbedtls_mpi_uint ) );
   \   0000002C   0x9801             LDR      R0,[SP, #+4]
   \   0000002E   0x0082             LSLS     R2,R0,#+2
   \   00000030   0x68A1             LDR      R1,[R4, #+8]
   \   00000032   0x311C             ADDS     R1,R1,#+28
   \   00000034   0xA803             ADD      R0,SP,#+12
   \   00000036   0x.... 0x....      BL       __aeabi_memcpy4
   1183              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, 255 % ( 8 * sizeof( mbedtls_mpi_uint ) ) ) );
   \   0000003A   0x211F             MOVS     R1,#+31
   \   0000003C   0x4668             MOV      R0,SP
   \   0000003E   0x.... 0x....      BL       mbedtls_mpi_shift_r
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD120             BNE      ??ecp_mod_p255_1
   1184              M.n++; /* Make room for multiplication by 19 */
   \   00000046   0x9801             LDR      R0,[SP, #+4]
   \   00000048   0x1C40             ADDS     R0,R0,#+1
   \   0000004A   0x9001             STR      R0,[SP, #+4]
   1185          
   1186              /* N = A0 */
   1187              MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( N, 255, 0 ) );
   \   0000004C   0x2200             MOVS     R2,#+0
   \   0000004E   0x21FF             MOVS     R1,#+255
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0x.... 0x....      BL       mbedtls_mpi_set_bit
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD116             BNE      ??ecp_mod_p255_1
   1188              for( i = P255_WIDTH; i < N->n; i++ )
   \   0000005A   0x2008             MOVS     R0,#+8
   \   0000005C   0x68A1             LDR      R1,[R4, #+8]
   \   0000005E   0x3120             ADDS     R1,R1,#+32
   \   00000060   0xE003             B        ??ecp_mod_p255_3
   1189                  N->p[i] = 0;
   \                     ??ecp_mod_p255_4: (+1)
   \   00000062   0x2200             MOVS     R2,#+0
   \   00000064   0x600A             STR      R2,[R1, #+0]
   \   00000066   0x1C40             ADDS     R0,R0,#+1
   \   00000068   0x1D09             ADDS     R1,R1,#+4
   \                     ??ecp_mod_p255_3: (+1)
   \   0000006A   0x6862             LDR      R2,[R4, #+4]
   \   0000006C   0x4290             CMP      R0,R2
   \   0000006E   0xD3F8             BCC      ??ecp_mod_p255_4
   1190          
   1191              /* N = A0 + 19 * A1 */
   1192              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M, &M, 19 ) );
   \   00000070   0x2213             MOVS     R2,#+19
   \   00000072   0x4669             MOV      R1,SP
   \   00000074   0x4668             MOV      R0,SP
   \   00000076   0x.... 0x....      BL       mbedtls_mpi_mul_int
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD104             BNE      ??ecp_mod_p255_1
   1193              MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
   \   0000007E   0x466A             MOV      R2,SP
   \   00000080   0x0021             MOVS     R1,R4
   \   00000082   0x0020             MOVS     R0,R4
   \   00000084   0x.... 0x....      BL       mbedtls_mpi_add_abs
   1194          
   1195          cleanup:
   1196              return( ret );
   \                     ??ecp_mod_p255_1: (+1)
   \   00000088   0xB00E             ADD      SP,SP,#+56
   \   0000008A   0xBD10             POP      {R4,PC}          ;; return
   1197          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x........         DC32     `ecp_mpi_set1::one`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x........         DC32     ecp_mod_p256

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x........         DC32     ecp_mod_p384

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x........         DC32     ecp_mod_p255

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0xFFFFB180         DC32     0xffffb180

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x30 0x31          DC8 "01DB42"
   \              0x44 0x42    
   \              0x34 0x32    
   \              0x00         
   \   00000007   0x00               DC8 0
   1198          #endif /* MBEDTLS_ECP_DP_CURVE25519_ENABLED */
   1199          
   1200          #if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED) ||   \
   1201              defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED) ||   \
   1202              defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)
   1203          /*
   1204           * Fast quasi-reduction modulo P = 2^s - R,
   1205           * with R about 33 bits, used by the Koblitz curves.
   1206           *
   1207           * Write N as A0 + 2^224 A1, return A0 + R * A1.
   1208           * Actually do two passes, since R is big.
   1209           */
   1210          #define P_KOBLITZ_MAX   ( 256 / 8 / sizeof( mbedtls_mpi_uint ) )  // Max limbs in P
   1211          #define P_KOBLITZ_R     ( 8 / sizeof( mbedtls_mpi_uint ) )        // Limbs in R
   1212          static inline int ecp_mod_koblitz( mbedtls_mpi *N, mbedtls_mpi_uint *Rp, size_t p_limbs,
   1213                                             size_t adjust, size_t shift, mbedtls_mpi_uint mask )
   1214          {
   1215              int ret;
   1216              size_t i;
   1217              mbedtls_mpi M, R;
   1218              mbedtls_mpi_uint Mp[P_KOBLITZ_MAX + P_KOBLITZ_R + 1];
   1219          
   1220              if( N->n < p_limbs )
   1221                  return( 0 );
   1222          
   1223              /* Init R */
   1224              R.s = 1;
   1225              R.p = Rp;
   1226              R.n = P_KOBLITZ_R;
   1227          
   1228              /* Common setup for M */
   1229              M.s = 1;
   1230              M.p = Mp;
   1231          
   1232              /* M = A1 */
   1233              M.n = N->n - ( p_limbs - adjust );
   1234              if( M.n > p_limbs + adjust )
   1235                  M.n = p_limbs + adjust;
   1236              memset( Mp, 0, sizeof Mp );
   1237              memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );
   1238              if( shift != 0 )
   1239                  MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, shift ) );
   1240              M.n += R.n; /* Make room for multiplication by R */
   1241          
   1242              /* N = A0 */
   1243              if( mask != 0 )
   1244                  N->p[p_limbs - 1] &= mask;
   1245              for( i = p_limbs; i < N->n; i++ )
   1246                  N->p[i] = 0;
   1247          
   1248              /* N = A0 + R * A1 */
   1249              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
   1250              MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
   1251          
   1252              /* Second pass */
   1253          
   1254              /* M = A1 */
   1255              M.n = N->n - ( p_limbs - adjust );
   1256              if( M.n > p_limbs + adjust )
   1257                  M.n = p_limbs + adjust;
   1258              memset( Mp, 0, sizeof Mp );
   1259              memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );
   1260              if( shift != 0 )
   1261                  MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, shift ) );
   1262              M.n += R.n; /* Make room for multiplication by R */
   1263          
   1264              /* N = A0 */
   1265              if( mask != 0 )
   1266                  N->p[p_limbs - 1] &= mask;
   1267              for( i = p_limbs; i < N->n; i++ )
   1268                  N->p[i] = 0;
   1269          
   1270              /* N = A0 + R * A1 */
   1271              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
   1272              MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
   1273          
   1274          cleanup:
   1275              return( ret );
   1276          }
   1277          #endif /* MBEDTLS_ECP_DP_SECP192K1_ENABLED) ||
   1278                    MBEDTLS_ECP_DP_SECP224K1_ENABLED) ||
   1279                    MBEDTLS_ECP_DP_SECP256K1_ENABLED) */
   1280          
   1281          #if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)
   1282          /*
   1283           * Fast quasi-reduction modulo p192k1 = 2^192 - R,
   1284           * with R = 2^32 + 2^12 + 2^8 + 2^7 + 2^6 + 2^3 + 1 = 0x0100001119
   1285           */
   1286          static int ecp_mod_p192k1( mbedtls_mpi *N )
   1287          {
   1288              static mbedtls_mpi_uint Rp[] = {
   1289                  BYTES_TO_T_UINT_8( 0xC9, 0x11, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };
   1290          
   1291              return( ecp_mod_koblitz( N, Rp, 192 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
   1292          }
   1293          #endif /* MBEDTLS_ECP_DP_SECP192K1_ENABLED */
   1294          
   1295          #if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)
   1296          /*
   1297           * Fast quasi-reduction modulo p224k1 = 2^224 - R,
   1298           * with R = 2^32 + 2^12 + 2^11 + 2^9 + 2^7 + 2^4 + 2 + 1 = 0x0100001A93
   1299           */
   1300          static int ecp_mod_p224k1( mbedtls_mpi *N )
   1301          {
   1302              static mbedtls_mpi_uint Rp[] = {
   1303                  BYTES_TO_T_UINT_8( 0x93, 0x1A, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };
   1304          
   1305          #if defined(MBEDTLS_HAVE_INT64)
   1306              return( ecp_mod_koblitz( N, Rp, 4, 1, 32, 0xFFFFFFFF ) );
   1307          #else
   1308              return( ecp_mod_koblitz( N, Rp, 224 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
   1309          #endif
   1310          }
   1311          
   1312          #endif /* MBEDTLS_ECP_DP_SECP224K1_ENABLED */
   1313          
   1314          #if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)
   1315          /*
   1316           * Fast quasi-reduction modulo p256k1 = 2^256 - R,
   1317           * with R = 2^32 + 2^9 + 2^8 + 2^7 + 2^6 + 2^4 + 1 = 0x01000003D1
   1318           */
   1319          static int ecp_mod_p256k1( mbedtls_mpi *N )
   1320          {
   1321              static mbedtls_mpi_uint Rp[] = {
   1322                  BYTES_TO_T_UINT_8( 0xD1, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };
   1323              return( ecp_mod_koblitz( N, Rp, 256 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
   1324          }
   1325          #endif /* MBEDTLS_ECP_DP_SECP256K1_ENABLED */
   1326          
   1327          #endif /* !MBEDTLS_ECP_ALT */
   1328          
   1329          #endif /* MBEDTLS_ECP_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   add32
      16   ecp_group_load
        16   -> ecp_mpi_load
        16   -> mbedtls_mpi_bitlen
      64   ecp_mod_p255
        64   -> __aeabi_memclr4
        64   -> __aeabi_memcpy4
        64   -> mbedtls_mpi_add_abs
        64   -> mbedtls_mpi_mul_int
        64   -> mbedtls_mpi_set_bit
        64   -> mbedtls_mpi_shift_r
      72   ecp_mod_p256
        72   -> __aeabi_memclr4
        72   -> add32
        72   -> fix_negative
        72   -> mbedtls_mpi_grow
        72   -> sub32
      88   ecp_mod_p384
        88   -> __aeabi_memclr4
        88   -> fix_negative
        88   -> mbedtls_mpi_grow
        88   -> sub32
       0   ecp_mpi_load
       8   fix_negative
         8   -> mbedtls_mpi_sub_abs
      48   mbedtls_ecp_group_load
        48   -> ecp_group_load
        48   -> mbedtls_ecp_group_free
        48   -> mbedtls_mpi_bitlen
        48   -> mbedtls_mpi_free
        48   -> mbedtls_mpi_lset
        48   -> mbedtls_mpi_read_string
        48   -> mbedtls_mpi_shift_l
        48   -> mbedtls_mpi_sub_int
       4   sub32


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_2
       4  ??DataTable12_3
       4  ??DataTable12_4
       8  ?_0
      20  add32
     110  ecp_group_load
     140  ecp_mod_p255
    1236  ecp_mod_p256
    2444  ecp_mod_p384
      12  ecp_mpi_load
      42  fix_negative
     266  mbedtls_ecp_group_load
       4  one
      32  secp256r1_b
      32  secp256r1_gx
      32  secp256r1_gy
      32  secp256r1_n
      32  secp256r1_p
      48  secp384r1_b
      48  secp384r1_gx
      48  secp384r1_gy
      48  secp384r1_n
      48  secp384r1_p
      26  sub32

 
     4 bytes in section .data
 4 724 bytes in section .text
 
 4 724 bytes of CODE memory
     4 bytes of DATA memory

Errors: none
Warnings: none
