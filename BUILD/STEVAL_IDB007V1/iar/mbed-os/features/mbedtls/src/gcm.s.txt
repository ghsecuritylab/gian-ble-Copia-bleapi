###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:28
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\mbedtls\src\gcm.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\gcm.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\gcm.s.txt -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\gcm.o
#        .\mbed-os\features\mbedtls\src\gcm.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\gcm.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\gcm.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\mbedtls\src\gcm.c
      1          /*
      2           *  NIST SP800-38D compliant GCM implementation
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          /*
     23           * http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf
     24           *
     25           * See also:
     26           * [MGV] http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/gcm/gcm-revised-spec.pdf
     27           *
     28           * We use the algorithm described as Shoup's method with 4-bit tables in
     29           * [MGV] 4.1, pp. 12-13, to enhance speed without using too much memory.
     30           */
     31          
     32          #if !defined(MBEDTLS_CONFIG_FILE)
     33          #include "mbedtls/config.h"
     34          #else
     35          #include MBEDTLS_CONFIG_FILE
     36          #endif
     37          
     38          #if defined(MBEDTLS_GCM_C)
     39          
     40          #include "mbedtls/gcm.h"
     41          
     42          #include <string.h>
     43          
     44          #if defined(MBEDTLS_AESNI_C)
     45          #include "mbedtls/aesni.h"
     46          #endif
     47          
     48          #if defined(MBEDTLS_SELF_TEST) && defined(MBEDTLS_AES_C)
     49          #if defined(MBEDTLS_PLATFORM_C)
     50          #include "mbedtls/platform.h"
     51          #else
     52          #include <stdio.h>
     53          #define mbedtls_printf printf
     54          #endif /* MBEDTLS_PLATFORM_C */
     55          #endif /* MBEDTLS_SELF_TEST && MBEDTLS_AES_C */
     56          
     57          /*
     58           * 32-bit integer manipulation macros (big endian)
     59           */
     60          #ifndef GET_UINT32_BE
     61          #define GET_UINT32_BE(n,b,i)                            \
     62          {                                                       \
     63              (n) = ( (uint32_t) (b)[(i)    ] << 24 )             \
     64                  | ( (uint32_t) (b)[(i) + 1] << 16 )             \
     65                  | ( (uint32_t) (b)[(i) + 2] <<  8 )             \
     66                  | ( (uint32_t) (b)[(i) + 3]       );            \
     67          }
     68          #endif
     69          
     70          #ifndef PUT_UINT32_BE
     71          #define PUT_UINT32_BE(n,b,i)                            \
     72          {                                                       \
     73              (b)[(i)    ] = (unsigned char) ( (n) >> 24 );       \
     74              (b)[(i) + 1] = (unsigned char) ( (n) >> 16 );       \
     75              (b)[(i) + 2] = (unsigned char) ( (n) >>  8 );       \
     76              (b)[(i) + 3] = (unsigned char) ( (n)       );       \
     77          }
     78          #endif
     79          
     80          /* Implementation that should never be optimized out by the compiler */

   \                                 In section .text, align 2, keep-with-next
     81          static void mbedtls_zeroize( void *v, size_t n ) {
     82              volatile unsigned char *p = v; while( n-- ) *p++ = 0;
   \                     mbedtls_zeroize: (+1)
   \   00000000   0x2900             CMP      R1,#+0
   \   00000002   0xD100             BNE      ??mbedtls_zeroize_0
   \   00000004   0x4770             BX       LR
   \                     ??mbedtls_zeroize_0: (+1)
   \   00000006   0xB580             PUSH     {R7,LR}
   \   00000008   0x.... 0x....      BL       __aeabi_memclr
     83          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
     84          
     85          /*
     86           * Initialize a context
     87           */

   \                                 In section .text, align 2, keep-with-next
     88          void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
     89          {
   \                     mbedtls_gcm_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     90              memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
   \   00000002   0x21C4             MOVS     R1,#+196
   \   00000004   0x0049             LSLS     R1,R1,#+1        ;; #+392
   \   00000006   0x.... 0x....      BL       __aeabi_memclr4
     91          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
     92          
     93          /*
     94           * Precompute small multiples of H, that is set
     95           *      HH[i] || HL[i] = H times i,
     96           * where i is seen as a field element as in [MGV], ie high-order bits
     97           * correspond to low powers of P. The result is stored in the same way, that
     98           * is the high-order bit of HH corresponds to P^0 and the low-order bit of HL
     99           * corresponds to P^127.
    100           */

   \                                 In section .text, align 2, keep-with-next
    101          static int gcm_gen_table( mbedtls_gcm_context *ctx )
    102          {
   \                     gcm_gen_table: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
    103              int ret, i, j;
    104              uint64_t hi, lo;
    105              uint64_t vl, vh;
    106              unsigned char h[16];
    107              size_t olen = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9001             STR      R0,[SP, #+4]
    108          
    109              memset( h, 0, 16 );
   \   00000008   0xA806             ADD      R0,SP,#+24
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x2300             MOVS     R3,#+0
   \   00000010   0x2400             MOVS     R4,#+0
   \   00000012   0xC01E             STM      R0!,{R1-R4}
    110              if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
   \   00000014   0xA801             ADD      R0,SP,#+4
   \   00000016   0x9000             STR      R0,[SP, #+0]
   \   00000018   0xAB06             ADD      R3,SP,#+24
   \   0000001A   0x2210             MOVS     R2,#+16
   \   0000001C   0xA906             ADD      R1,SP,#+24
   \   0000001E   0x980A             LDR      R0,[SP, #+40]
   \   00000020   0x.... 0x....      BL       mbedtls_cipher_update
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD000             BEQ      .+4
   \   00000028   0xE098             B        ??gcm_gen_table_0
    111                  return( ret );
    112          
    113              /* pack h as two 64-bits ints, big-endian */
    114              GET_UINT32_BE( hi, h,  0  );
    115              GET_UINT32_BE( lo, h,  4  );
    116              vh = (uint64_t) hi << 32 | lo;
   \   0000002A   0xA806             ADD      R0,SP,#+24
   \   0000002C   0x7801             LDRB     R1,[R0, #+0]
   \   0000002E   0x0609             LSLS     R1,R1,#+24
   \   00000030   0x7842             LDRB     R2,[R0, #+1]
   \   00000032   0x0412             LSLS     R2,R2,#+16
   \   00000034   0x430A             ORRS     R2,R2,R1
   \   00000036   0x7881             LDRB     R1,[R0, #+2]
   \   00000038   0x0209             LSLS     R1,R1,#+8
   \   0000003A   0x4311             ORRS     R1,R1,R2
   \   0000003C   0x78C3             LDRB     R3,[R0, #+3]
   \   0000003E   0x430B             ORRS     R3,R3,R1
   \   00000040   0x7901             LDRB     R1,[R0, #+4]
   \   00000042   0x0609             LSLS     R1,R1,#+24
   \   00000044   0x7942             LDRB     R2,[R0, #+5]
   \   00000046   0x0412             LSLS     R2,R2,#+16
   \   00000048   0x430A             ORRS     R2,R2,R1
   \   0000004A   0x7981             LDRB     R1,[R0, #+6]
   \   0000004C   0x0209             LSLS     R1,R1,#+8
   \   0000004E   0x4311             ORRS     R1,R1,R2
   \   00000050   0x79C2             LDRB     R2,[R0, #+7]
   \   00000052   0x430A             ORRS     R2,R2,R1
    117          
    118              GET_UINT32_BE( hi, h,  8  );
    119              GET_UINT32_BE( lo, h,  12 );
    120              vl = (uint64_t) hi << 32 | lo;
   \   00000054   0x7A01             LDRB     R1,[R0, #+8]
   \   00000056   0x0609             LSLS     R1,R1,#+24
   \   00000058   0x7A44             LDRB     R4,[R0, #+9]
   \   0000005A   0x0424             LSLS     R4,R4,#+16
   \   0000005C   0x430C             ORRS     R4,R4,R1
   \   0000005E   0x7A81             LDRB     R1,[R0, #+10]
   \   00000060   0x020D             LSLS     R5,R1,#+8
   \   00000062   0x4325             ORRS     R5,R5,R4
   \   00000064   0x7AC1             LDRB     R1,[R0, #+11]
   \   00000066   0x4329             ORRS     R1,R1,R5
   \   00000068   0x7B04             LDRB     R4,[R0, #+12]
   \   0000006A   0x0624             LSLS     R4,R4,#+24
   \   0000006C   0x7B45             LDRB     R5,[R0, #+13]
   \   0000006E   0x042D             LSLS     R5,R5,#+16
   \   00000070   0x4325             ORRS     R5,R5,R4
   \   00000072   0x7B84             LDRB     R4,[R0, #+14]
   \   00000074   0x0224             LSLS     R4,R4,#+8
   \   00000076   0x432C             ORRS     R4,R4,R5
   \   00000078   0x7BC0             LDRB     R0,[R0, #+15]
   \   0000007A   0x4320             ORRS     R0,R0,R4
   \   0000007C   0xAC04             ADD      R4,SP,#+16
   \   0000007E   0xC403             STM      R4!,{R0,R1}
    121          
    122              /* 8 = 1000 corresponds to 1 in GF(2^128) */
    123              ctx->HL[8] = vl;
   \   00000080   0x9C0A             LDR      R4,[SP, #+40]
   \   00000082   0x3440             ADDS     R4,R4,#+64
   \   00000084   0xA804             ADD      R0,SP,#+16
   \   00000086   0xC803             LDM      R0,{R0,R1}
   \   00000088   0x6420             STR      R0,[R4, #+64]
   \   0000008A   0x6461             STR      R1,[R4, #+68]
    124              ctx->HH[8] = vh;
   \   0000008C   0x9D0A             LDR      R5,[SP, #+40]
   \   0000008E   0x35C0             ADDS     R5,R5,#+192
   \   00000090   0x642A             STR      R2,[R5, #+64]
   \   00000092   0x646B             STR      R3,[R5, #+68]
    125          
    126          #if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    127              /* With CLMUL support, we need only h, not the rest of the table */
    128              if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
    129                  return( 0 );
    130          #endif
    131          
    132              /* 0 corresponds to 0 in GF(2^128) */
    133              ctx->HH[0] = 0;
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0x2100             MOVS     R1,#+0
   \   00000098   0xC503             STM      R5!,{R0,R1}
    134              ctx->HL[0] = 0;
   \   0000009A   0xC403             STM      R4!,{R0,R1}
    135          
    136              for( i = 4; i > 0; i >>= 1 )
   \   0000009C   0x2404             MOVS     R4,#+4
    137              {
    138                  uint32_t T = ( vl & 1 ) * 0xe1000000U;
   \                     ??gcm_gen_table_1: (+1)
   \   0000009E   0xA804             ADD      R0,SP,#+16
   \   000000A0   0xC803             LDM      R0,{R0,R1}
   \   000000A2   0x07C1             LSLS     R1,R0,#+31
   \   000000A4   0x0FC9             LSRS     R1,R1,#+31
   \   000000A6   0x0148             LSLS     R0,R1,#+5
   \   000000A8   0x1A08             SUBS     R0,R1,R0
   \   000000AA   0x0600             LSLS     R0,R0,#+24
   \   000000AC   0x9000             STR      R0,[SP, #+0]
    139                  vl  = ( vh << 63 ) | ( vl >> 1 );
   \   000000AE   0x07D7             LSLS     R7,R2,#+31
   \   000000B0   0xA804             ADD      R0,SP,#+16
   \   000000B2   0xC803             LDM      R0,{R0,R1}
   \   000000B4   0x0840             LSRS     R0,R0,#+1
   \   000000B6   0x07CD             LSLS     R5,R1,#+31
   \   000000B8   0x4328             ORRS     R0,R0,R5
   \   000000BA   0x0849             LSRS     R1,R1,#+1
   \   000000BC   0x4339             ORRS     R1,R1,R7
   \   000000BE   0xAD04             ADD      R5,SP,#+16
   \   000000C0   0xC503             STM      R5!,{R0,R1}
    140                  vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
   \   000000C2   0x0852             LSRS     R2,R2,#+1
   \   000000C4   0x07D8             LSLS     R0,R3,#+31
   \   000000C6   0x4302             ORRS     R2,R2,R0
   \   000000C8   0x085B             LSRS     R3,R3,#+1
   \   000000CA   0x9900             LDR      R1,[SP, #+0]
   \   000000CC   0x4059             EORS     R1,R1,R3
   \   000000CE   0x000B             MOVS     R3,R1
    141          
    142                  ctx->HL[i] = vl;
   \   000000D0   0x980A             LDR      R0,[SP, #+40]
   \   000000D2   0x00E1             LSLS     R1,R4,#+3
   \   000000D4   0x1845             ADDS     R5,R0,R1
   \   000000D6   0xA804             ADD      R0,SP,#+16
   \   000000D8   0xC803             LDM      R0,{R0,R1}
   \   000000DA   0x6428             STR      R0,[R5, #+64]
   \   000000DC   0x6469             STR      R1,[R5, #+68]
    143                  ctx->HH[i] = vh;
   \   000000DE   0x0028             MOVS     R0,R5
   \   000000E0   0x30C0             ADDS     R0,R0,#+192
   \   000000E2   0xC00C             STM      R0!,{R2,R3}
    144              }
   \   000000E4   0x1064             ASRS     R4,R4,#+1
   \   000000E6   0x2C01             CMP      R4,#+1
   \   000000E8   0xDAD9             BGE      ??gcm_gen_table_1
    145          
    146              for( i = 2; i <= 8; i *= 2 )
   \   000000EA   0x2002             MOVS     R0,#+2
   \   000000EC   0x9000             STR      R0,[SP, #+0]
    147              {
    148                  uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
   \                     ??gcm_gen_table_2: (+1)
   \   000000EE   0x980A             LDR      R0,[SP, #+40]
   \   000000F0   0x9900             LDR      R1,[SP, #+0]
   \   000000F2   0x00C9             LSLS     R1,R1,#+3
   \   000000F4   0x1840             ADDS     R0,R0,R1
   \   000000F6   0x0004             MOVS     R4,R0
   \   000000F8   0x3440             ADDS     R4,R4,#+64
   \   000000FA   0x0005             MOVS     R5,R0
   \   000000FC   0x35C0             ADDS     R5,R5,#+192
    149                  vh = *HiH;
   \   000000FE   0xCD0C             LDM      R5!,{R2,R3}
   \   00000100   0x3D08             SUBS     R5,R5,#+8
    150                  vl = *HiL;
   \   00000102   0xCC03             LDM      R4!,{R0,R1}
   \   00000104   0x3C08             SUBS     R4,R4,#+8
   \   00000106   0xAE04             ADD      R6,SP,#+16
   \   00000108   0xC603             STM      R6!,{R0,R1}
    151                  for( j = 1; j < i; j++ )
   \   0000010A   0x9800             LDR      R0,[SP, #+0]
   \   0000010C   0x2802             CMP      R0,#+2
   \   0000010E   0xDB1F             BLT      ??gcm_gen_table_3
   \   00000110   0x0028             MOVS     R0,R5
   \   00000112   0x3008             ADDS     R0,R0,#+8
   \   00000114   0x9002             STR      R0,[SP, #+8]
   \   00000116   0x9E0A             LDR      R6,[SP, #+40]
   \   00000118   0x3648             ADDS     R6,R6,#+72
   \   0000011A   0x0020             MOVS     R0,R4
   \   0000011C   0x3008             ADDS     R0,R0,#+8
   \   0000011E   0x9001             STR      R0,[SP, #+4]
   \   00000120   0x9F00             LDR      R7,[SP, #+0]
   \   00000122   0x1E7F             SUBS     R7,R7,#+1
    152                  {
    153                      HiH[j] = vh ^ ctx->HH[j];
   \                     ??gcm_gen_table_4: (+1)
   \   00000124   0x0030             MOVS     R0,R6
   \   00000126   0x3080             ADDS     R0,R0,#+128
   \   00000128   0xC803             LDM      R0,{R0,R1}
   \   0000012A   0x4050             EORS     R0,R0,R2
   \   0000012C   0x4059             EORS     R1,R1,R3
   \   0000012E   0x9C02             LDR      R4,[SP, #+8]
   \   00000130   0xC403             STM      R4!,{R0,R1}
    154                      HiL[j] = vl ^ ctx->HL[j];
   \   00000132   0xA804             ADD      R0,SP,#+16
   \   00000134   0xC830             LDM      R0!,{R4,R5}
   \   00000136   0xCE03             LDM      R6!,{R0,R1}
   \   00000138   0x4060             EORS     R0,R0,R4
   \   0000013A   0x4069             EORS     R1,R1,R5
   \   0000013C   0x9C01             LDR      R4,[SP, #+4]
   \   0000013E   0xC403             STM      R4!,{R0,R1}
    155                  }
   \   00000140   0x9801             LDR      R0,[SP, #+4]
   \   00000142   0x3008             ADDS     R0,R0,#+8
   \   00000144   0x9001             STR      R0,[SP, #+4]
   \   00000146   0x9802             LDR      R0,[SP, #+8]
   \   00000148   0x3008             ADDS     R0,R0,#+8
   \   0000014A   0x9002             STR      R0,[SP, #+8]
   \   0000014C   0x1E7F             SUBS     R7,R7,#+1
   \   0000014E   0xD1E9             BNE      ??gcm_gen_table_4
    156              }
   \                     ??gcm_gen_table_3: (+1)
   \   00000150   0x9800             LDR      R0,[SP, #+0]
   \   00000152   0x0040             LSLS     R0,R0,#+1
   \   00000154   0x9000             STR      R0,[SP, #+0]
   \   00000156   0x2809             CMP      R0,#+9
   \   00000158   0xDBC9             BLT      ??gcm_gen_table_2
    157          
    158              return( 0 );
   \   0000015A   0x2000             MOVS     R0,#+0
   \                     ??gcm_gen_table_0: (+1)
   \   0000015C   0xB00B             ADD      SP,SP,#+44
   \   0000015E   0xBDF0             POP      {R4-R7,PC}       ;; return
    159          }
    160          

   \                                 In section .text, align 2, keep-with-next
    161          int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
    162                                  mbedtls_cipher_id_t cipher,
    163                                  const unsigned char *key,
    164                                  unsigned int keybits )
    165          {
   \                     mbedtls_gcm_setkey: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0008             MOVS     R0,R1
   \   00000006   0x0017             MOVS     R7,R2
   \   00000008   0x001D             MOVS     R5,R3
    166              int ret;
    167              const mbedtls_cipher_info_t *cipher_info;
    168          
    169              cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
   \   0000000A   0x2201             MOVS     R2,#+1
   \   0000000C   0x0029             MOVS     R1,R5
   \   0000000E   0x.... 0x....      BL       mbedtls_cipher_info_from_values
   \   00000012   0x0006             MOVS     R6,R0
    170              if( cipher_info == NULL )
   \   00000014   0xD002             BEQ      ??mbedtls_gcm_setkey_0
    171                  return( MBEDTLS_ERR_GCM_BAD_INPUT );
    172          
    173              if( cipher_info->block_size != 16 )
   \   00000016   0x6970             LDR      R0,[R6, #+20]
   \   00000018   0x2810             CMP      R0,#+16
   \   0000001A   0xD002             BEQ      ??mbedtls_gcm_setkey_1
    174                  return( MBEDTLS_ERR_GCM_BAD_INPUT );
   \                     ??mbedtls_gcm_setkey_0: (+1)
   \   0000001C   0x2013             MOVS     R0,#+19
   \   0000001E   0x43C0             MVNS     R0,R0            ;; #-20
   \   00000020   0xBDF2             POP      {R1,R4-R7,PC}
    175          
    176              mbedtls_cipher_free( &ctx->cipher_ctx );
   \                     ??mbedtls_gcm_setkey_1: (+1)
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x.... 0x....      BL       mbedtls_cipher_free
    177          
    178              if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
   \   00000028   0x0031             MOVS     R1,R6
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x.... 0x....      BL       mbedtls_cipher_setup
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD10A             BNE      ??mbedtls_gcm_setkey_2
    179                  return( ret );
    180          
    181              if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
    182                                         MBEDTLS_ENCRYPT ) ) != 0 )
   \   00000034   0x2301             MOVS     R3,#+1
   \   00000036   0x002A             MOVS     R2,R5
   \   00000038   0x0039             MOVS     R1,R7
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x.... 0x....      BL       mbedtls_cipher_setkey
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD102             BNE      ??mbedtls_gcm_setkey_2
    183              {
    184                  return( ret );
    185              }
    186          
    187              if( ( ret = gcm_gen_table( ctx ) ) != 0 )
   \   00000044   0x0020             MOVS     R0,R4
   \   00000046   0x.... 0x....      BL       gcm_gen_table
   \                     ??mbedtls_gcm_setkey_2: (+1)
   \   0000004A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    188                  return( ret );
    189          
    190              return( 0 );
    191          }
    192          
    193          /*
    194           * Shoup's method for multiplication use this table with
    195           *      last4[x] = x times P^128
    196           * where x and last4[x] are seen as elements of GF(2^128) as in [MGV]
    197           */

   \                                 In section .text, align 8, keep-with-next
    198          static const uint64_t last4[16] =
   \                     last4:
   \   00000000   0x00000000         DC32 0, 0, 7200, 0, 14400, 0, 9312, 0, 28800, 0, 27808, 0, 18624, 0
   \              0x00000000   
   \              0x00001C20   
   \              0x00000000   
   \              0x00003840   
   \              0x00000000   
   \              0x00002460   
   \              0x00000000   
   \              0x00007080   
   \              0x00000000   
   \              0x00006CA0   
   \              0x00000000   
   \              0x000048C0   
   \              0x00000000   
   \   00000038   0x000054E0         DC32 21728, 0, 57600, 0, 64800, 0, 55616, 0, 50528, 0, 37248, 0, 36256
   \              0x00000000   
   \              0x0000E100   
   \              0x00000000   
   \              0x0000FD20   
   \              0x00000000   
   \              0x0000D940   
   \              0x00000000   
   \              0x0000C560   
   \              0x00000000   
   \              0x00009180   
   \              0x00000000   
   \              0x00008DA0   
   \   0000006C   0x00000000         DC32 0, 43456, 0, 46560, 0
   \              0x0000A9C0   
   \              0x00000000   
   \              0x0000B5E0   
   \              0x00000000   
    199          {
    200              0x0000, 0x1c20, 0x3840, 0x2460,
    201              0x7080, 0x6ca0, 0x48c0, 0x54e0,
    202              0xe100, 0xfd20, 0xd940, 0xc560,
    203              0x9180, 0x8da0, 0xa9c0, 0xb5e0
    204          };
    205          
    206          /*
    207           * Sets output to x times H using the precomputed tables.
    208           * x and output are seen as elements of GF(2^128) as in [MGV].
    209           */

   \                                 In section .text, align 4, keep-with-next
    210          static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
    211                                unsigned char output[16] )
    212          {
   \                     gcm_mult: (+1)
   \   00000000   0xB4FF             PUSH     {R0-R7}
   \   00000002   0xB086             SUB      SP,SP,#+24
    213              int i = 0;
    214              unsigned char lo, hi, rem;
    215              uint64_t zh, zl;
    216          
    217          #if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    218              if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) ) {
    219                  unsigned char h[16];
    220          
    221                  PUT_UINT32_BE( ctx->HH[8] >> 32, h,  0 );
    222                  PUT_UINT32_BE( ctx->HH[8],       h,  4 );
    223                  PUT_UINT32_BE( ctx->HL[8] >> 32, h,  8 );
    224                  PUT_UINT32_BE( ctx->HL[8],       h, 12 );
    225          
    226                  mbedtls_aesni_gcm_mult( output, x, h );
    227                  return;
    228              }
    229          #endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */
    230          
    231              lo = x[15] & 0xf;
   \   00000004   0x7BCD             LDRB     R5,[R1, #+15]
   \   00000006   0x072C             LSLS     R4,R5,#+28
    232          
    233              zh = ctx->HH[lo];
   \   00000008   0x0E61             LSRS     R1,R4,#+25
   \   0000000A   0x1844             ADDS     R4,R0,R1
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x30C0             ADDS     R0,R0,#+192
   \   00000010   0xC80C             LDM      R0!,{R2,R3}
    234              zl = ctx->HL[lo];
   \   00000012   0x6C20             LDR      R0,[R4, #+64]
   \   00000014   0x6C61             LDR      R1,[R4, #+68]
    235          
    236              for( i = 15; i >= 0; i-- )
    237              {
    238                  lo = x[i] & 0xf;
    239                  hi = x[i] >> 4;
   \   00000016   0x092C             LSRS     R4,R5,#+4
   \   00000018   0x9404             STR      R4,[SP, #+16]
    240          
    241                  if( i != 15 )
    242                  {
    243                      rem = (unsigned char) zl & 0xf;
    244                      zl = ( zh << 60 ) | ( zl >> 4 );
    245                      zh = ( zh >> 4 );
    246                      zh ^= (uint64_t) last4[rem] << 48;
    247                      zh ^= ctx->HH[lo];
    248                      zl ^= ctx->HL[lo];
    249          
    250                  }
    251          
    252                  rem = (unsigned char) zl & 0xf;
   \   0000001A   0x0705             LSLS     R5,R0,#+28
    253                  zl = ( zh << 60 ) | ( zl >> 4 );
   \   0000001C   0x0717             LSLS     R7,R2,#+28
   \   0000001E   0x0900             LSRS     R0,R0,#+4
   \   00000020   0x070C             LSLS     R4,R1,#+28
   \   00000022   0x4320             ORRS     R0,R0,R4
   \   00000024   0x0909             LSRS     R1,R1,#+4
   \   00000026   0x4339             ORRS     R1,R1,R7
   \   00000028   0xAC02             ADD      R4,SP,#+8
   \   0000002A   0xC403             STM      R4!,{R0,R1}
    254                  zh = ( zh >> 4 );
    255                  zh ^= (uint64_t) last4[rem] << 48;
    256                  zh ^= ctx->HH[hi];
   \   0000002C   0x9806             LDR      R0,[SP, #+24]
   \   0000002E   0x9904             LDR      R1,[SP, #+16]
   \   00000030   0x00C9             LSLS     R1,R1,#+3
   \   00000032   0x1844             ADDS     R4,R0,R1
   \   00000034   0x0912             LSRS     R2,R2,#+4
   \   00000036   0x0718             LSLS     R0,R3,#+28
   \   00000038   0x4302             ORRS     R2,R2,R0
   \   0000003A   0x091B             LSRS     R3,R3,#+4
   \   0000003C   0x....             ADR.N    R0,last4
   \   0000003E   0x0E69             LSRS     R1,R5,#+25
   \   00000040   0x1840             ADDS     R0,R0,R1
   \   00000042   0xC803             LDM      R0,{R0,R1}
   \   00000044   0x0401             LSLS     R1,R0,#+16
   \   00000046   0x0010             MOVS     R0,R2
   \   00000048   0x4059             EORS     R1,R1,R3
   \   0000004A   0x0022             MOVS     R2,R4
   \   0000004C   0x32C0             ADDS     R2,R2,#+192
   \   0000004E   0xCA0C             LDM      R2,{R2,R3}
   \   00000050   0x4042             EORS     R2,R2,R0
   \   00000052   0x404B             EORS     R3,R3,R1
    257                  zl ^= ctx->HL[hi];
   \   00000054   0xA802             ADD      R0,SP,#+8
   \   00000056   0xC803             LDM      R0,{R0,R1}
   \   00000058   0x6C26             LDR      R6,[R4, #+64]
   \   0000005A   0x6C67             LDR      R7,[R4, #+68]
   \   0000005C   0x4046             EORS     R6,R6,R0
   \   0000005E   0x404F             EORS     R7,R7,R1
   \   00000060   0x0030             MOVS     R0,R6
   \   00000062   0x0039             MOVS     R1,R7
   \   00000064   0x9C07             LDR      R4,[SP, #+28]
   \   00000066   0x340E             ADDS     R4,R4,#+14
   \   00000068   0x9401             STR      R4,[SP, #+4]
   \   0000006A   0x240F             MOVS     R4,#+15
   \   0000006C   0x9400             STR      R4,[SP, #+0]
   \                     ??gcm_mult_0: (+1)
   \   0000006E   0x9C01             LDR      R4,[SP, #+4]
   \   00000070   0x7825             LDRB     R5,[R4, #+0]
   \   00000072   0x072C             LSLS     R4,R5,#+28
   \   00000074   0x092D             LSRS     R5,R5,#+4
   \   00000076   0x9504             STR      R5,[SP, #+16]
   \   00000078   0x0705             LSLS     R5,R0,#+28
   \   0000007A   0x0F2D             LSRS     R5,R5,#+28
   \   0000007C   0x466E             MOV      R6,SP
   \   0000007E   0x7535             STRB     R5,[R6, #+20]
   \   00000080   0x0717             LSLS     R7,R2,#+28
   \   00000082   0x0900             LSRS     R0,R0,#+4
   \   00000084   0x070D             LSLS     R5,R1,#+28
   \   00000086   0x4328             ORRS     R0,R0,R5
   \   00000088   0x0909             LSRS     R1,R1,#+4
   \   0000008A   0x4339             ORRS     R1,R1,R7
   \   0000008C   0xAD02             ADD      R5,SP,#+8
   \   0000008E   0xC503             STM      R5!,{R0,R1}
   \   00000090   0x9806             LDR      R0,[SP, #+24]
   \   00000092   0x0E61             LSRS     R1,R4,#+25
   \   00000094   0x1844             ADDS     R4,R0,R1
   \   00000096   0x0912             LSRS     R2,R2,#+4
   \   00000098   0x0718             LSLS     R0,R3,#+28
   \   0000009A   0x4302             ORRS     R2,R2,R0
   \   0000009C   0x091B             LSRS     R3,R3,#+4
   \   0000009E   0xBF00             Nop      
   \   000000A0   0x....             ADR.N    R0,last4
   \   000000A2   0x4669             MOV      R1,SP
   \   000000A4   0x7D09             LDRB     R1,[R1, #+20]
   \   000000A6   0x00C9             LSLS     R1,R1,#+3
   \   000000A8   0x1840             ADDS     R0,R0,R1
   \   000000AA   0xC803             LDM      R0,{R0,R1}
   \   000000AC   0x0401             LSLS     R1,R0,#+16
   \   000000AE   0x0010             MOVS     R0,R2
   \   000000B0   0x4059             EORS     R1,R1,R3
   \   000000B2   0x0022             MOVS     R2,R4
   \   000000B4   0x32C0             ADDS     R2,R2,#+192
   \   000000B6   0xCA0C             LDM      R2,{R2,R3}
   \   000000B8   0x4042             EORS     R2,R2,R0
   \   000000BA   0x404B             EORS     R3,R3,R1
   \   000000BC   0xA802             ADD      R0,SP,#+8
   \   000000BE   0xC803             LDM      R0,{R0,R1}
   \   000000C0   0x6C26             LDR      R6,[R4, #+64]
   \   000000C2   0x6C67             LDR      R7,[R4, #+68]
   \   000000C4   0x4046             EORS     R6,R6,R0
   \   000000C6   0x404F             EORS     R7,R7,R1
   \   000000C8   0x0039             MOVS     R1,R7
   \   000000CA   0x0735             LSLS     R5,R6,#+28
   \   000000CC   0x0717             LSLS     R7,R2,#+28
   \   000000CE   0x0930             LSRS     R0,R6,#+4
   \   000000D0   0x070C             LSLS     R4,R1,#+28
   \   000000D2   0x4320             ORRS     R0,R0,R4
   \   000000D4   0x0909             LSRS     R1,R1,#+4
   \   000000D6   0x4339             ORRS     R1,R1,R7
   \   000000D8   0xAC02             ADD      R4,SP,#+8
   \   000000DA   0xC403             STM      R4!,{R0,R1}
   \   000000DC   0x9806             LDR      R0,[SP, #+24]
   \   000000DE   0x9904             LDR      R1,[SP, #+16]
   \   000000E0   0x00C9             LSLS     R1,R1,#+3
   \   000000E2   0x1844             ADDS     R4,R0,R1
   \   000000E4   0x0912             LSRS     R2,R2,#+4
   \   000000E6   0x0718             LSLS     R0,R3,#+28
   \   000000E8   0x4302             ORRS     R2,R2,R0
   \   000000EA   0x091B             LSRS     R3,R3,#+4
   \   000000EC   0x....             ADR.N    R0,last4
   \   000000EE   0x0E69             LSRS     R1,R5,#+25
   \   000000F0   0x1840             ADDS     R0,R0,R1
   \   000000F2   0xC803             LDM      R0,{R0,R1}
   \   000000F4   0x0401             LSLS     R1,R0,#+16
   \   000000F6   0x0010             MOVS     R0,R2
   \   000000F8   0x4059             EORS     R1,R1,R3
   \   000000FA   0x0022             MOVS     R2,R4
   \   000000FC   0x32C0             ADDS     R2,R2,#+192
   \   000000FE   0xCA0C             LDM      R2,{R2,R3}
   \   00000100   0x4042             EORS     R2,R2,R0
   \   00000102   0x404B             EORS     R3,R3,R1
   \   00000104   0xA802             ADD      R0,SP,#+8
   \   00000106   0xC803             LDM      R0,{R0,R1}
   \   00000108   0x6C26             LDR      R6,[R4, #+64]
   \   0000010A   0x6C67             LDR      R7,[R4, #+68]
   \   0000010C   0x4046             EORS     R6,R6,R0
   \   0000010E   0x404F             EORS     R7,R7,R1
   \   00000110   0x0030             MOVS     R0,R6
   \   00000112   0x0039             MOVS     R1,R7
    258              }
   \   00000114   0x9C01             LDR      R4,[SP, #+4]
   \   00000116   0x1E64             SUBS     R4,R4,#+1
   \   00000118   0x9401             STR      R4,[SP, #+4]
   \   0000011A   0x9C00             LDR      R4,[SP, #+0]
   \   0000011C   0x1E64             SUBS     R4,R4,#+1
   \   0000011E   0x9400             STR      R4,[SP, #+0]
   \   00000120   0xD1A5             BNE      ??gcm_mult_0
    259          
    260              PUT_UINT32_BE( zh >> 32, output, 0 );
   \   00000122   0x0E1C             LSRS     R4,R3,#+24
   \   00000124   0x9D08             LDR      R5,[SP, #+32]
   \   00000126   0x702C             STRB     R4,[R5, #+0]
   \   00000128   0x0C1C             LSRS     R4,R3,#+16
   \   0000012A   0x9D08             LDR      R5,[SP, #+32]
   \   0000012C   0x706C             STRB     R4,[R5, #+1]
   \   0000012E   0x0A1C             LSRS     R4,R3,#+8
   \   00000130   0x9D08             LDR      R5,[SP, #+32]
   \   00000132   0x70AC             STRB     R4,[R5, #+2]
   \   00000134   0x9D08             LDR      R5,[SP, #+32]
   \   00000136   0x70EB             STRB     R3,[R5, #+3]
    261              PUT_UINT32_BE( zh, output, 4 );
   \   00000138   0x0E14             LSRS     R4,R2,#+24
   \   0000013A   0x9D08             LDR      R5,[SP, #+32]
   \   0000013C   0x712C             STRB     R4,[R5, #+4]
   \   0000013E   0x0C14             LSRS     R4,R2,#+16
   \   00000140   0x9D08             LDR      R5,[SP, #+32]
   \   00000142   0x716C             STRB     R4,[R5, #+5]
   \   00000144   0x0414             LSLS     R4,R2,#+16
   \   00000146   0x0E24             LSRS     R4,R4,#+24
   \   00000148   0x9D08             LDR      R5,[SP, #+32]
   \   0000014A   0x71AC             STRB     R4,[R5, #+6]
   \   0000014C   0x9B08             LDR      R3,[SP, #+32]
   \   0000014E   0x71DA             STRB     R2,[R3, #+7]
    262              PUT_UINT32_BE( zl >> 32, output, 8 );
   \   00000150   0x0E0A             LSRS     R2,R1,#+24
   \   00000152   0x9B08             LDR      R3,[SP, #+32]
   \   00000154   0x721A             STRB     R2,[R3, #+8]
   \   00000156   0x0C0A             LSRS     R2,R1,#+16
   \   00000158   0x9B08             LDR      R3,[SP, #+32]
   \   0000015A   0x725A             STRB     R2,[R3, #+9]
   \   0000015C   0x0A0A             LSRS     R2,R1,#+8
   \   0000015E   0x9B08             LDR      R3,[SP, #+32]
   \   00000160   0x729A             STRB     R2,[R3, #+10]
   \   00000162   0x9B08             LDR      R3,[SP, #+32]
   \   00000164   0x72D9             STRB     R1,[R3, #+11]
    263              PUT_UINT32_BE( zl, output, 12 );
   \   00000166   0x0E02             LSRS     R2,R0,#+24
   \   00000168   0x9B08             LDR      R3,[SP, #+32]
   \   0000016A   0x731A             STRB     R2,[R3, #+12]
   \   0000016C   0x0C02             LSRS     R2,R0,#+16
   \   0000016E   0x9B08             LDR      R3,[SP, #+32]
   \   00000170   0x735A             STRB     R2,[R3, #+13]
   \   00000172   0x0402             LSLS     R2,R0,#+16
   \   00000174   0x0E12             LSRS     R2,R2,#+24
   \   00000176   0x9B08             LDR      R3,[SP, #+32]
   \   00000178   0x739A             STRB     R2,[R3, #+14]
   \   0000017A   0x9908             LDR      R1,[SP, #+32]
   \   0000017C   0x73C8             STRB     R0,[R1, #+15]
    264          }
   \   0000017E   0xB00A             ADD      SP,SP,#+40
   \   00000180   0xBCF0             POP      {R4-R7}
   \   00000182   0x4770             BX       LR               ;; return
    265          

   \                                 In section .text, align 2, keep-with-next
    266          int mbedtls_gcm_starts( mbedtls_gcm_context *ctx,
    267                          int mode,
    268                          const unsigned char *iv,
    269                          size_t iv_len,
    270                          const unsigned char *add,
    271                          size_t add_len )
    272          {
   \                     mbedtls_gcm_starts: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
   \   00000004   0x0014             MOVS     R4,R2
   \   00000006   0x001D             MOVS     R5,R3
    273              int ret;
    274              unsigned char work_buf[16];
    275              size_t i;
    276              const unsigned char *p;
    277              size_t use_len, olen = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9004             STR      R0,[SP, #+16]
    278          
    279              /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    280              /* IV is not allowed to be zero length */
    281              if( iv_len == 0 ||
    282                ( (uint64_t) iv_len  ) >> 61 != 0 ||
    283                ( (uint64_t) add_len ) >> 61 != 0 )
   \   0000000C   0x2D00             CMP      R5,#+0
   \   0000000E   0xD02D             BEQ      ??mbedtls_gcm_starts_0
    284              {
    285                  return( MBEDTLS_ERR_GCM_BAD_INPUT );
    286              }
    287          
    288              memset( ctx->y, 0x00, sizeof(ctx->y) );
   \   00000010   0x980A             LDR      R0,[SP, #+40]
   \   00000012   0x22B0             MOVS     R2,#+176
   \   00000014   0x0052             LSLS     R2,R2,#+1        ;; #+352
   \   00000016   0x1880             ADDS     R0,R0,R2
   \   00000018   0x9001             STR      R0,[SP, #+4]
   \   0000001A   0x2200             MOVS     R2,#+0
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x2600             MOVS     R6,#+0
   \   00000020   0x2700             MOVS     R7,#+0
   \   00000022   0xC0CC             STM      R0!,{R2,R3,R6,R7}
    289              memset( ctx->buf, 0x00, sizeof(ctx->buf) );
   \   00000024   0x980A             LDR      R0,[SP, #+40]
   \   00000026   0x22B8             MOVS     R2,#+184
   \   00000028   0x0052             LSLS     R2,R2,#+1        ;; #+368
   \   0000002A   0x1880             ADDS     R0,R0,R2
   \   0000002C   0x9002             STR      R0,[SP, #+8]
   \   0000002E   0x2200             MOVS     R2,#+0
   \   00000030   0xC0CC             STM      R0!,{R2,R3,R6,R7}
    290          
    291              ctx->mode = mode;
   \   00000032   0x980A             LDR      R0,[SP, #+40]
   \   00000034   0x22C0             MOVS     R2,#+192
   \   00000036   0x0052             LSLS     R2,R2,#+1        ;; #+384
   \   00000038   0x5081             STR      R1,[R0, R2]
    292              ctx->len = 0;
   \   0000003A   0x980A             LDR      R0,[SP, #+40]
   \   0000003C   0x21A0             MOVS     R1,#+160
   \   0000003E   0x0049             LSLS     R1,R1,#+1        ;; #+320
   \   00000040   0x1840             ADDS     R0,R0,R1
   \   00000042   0x9003             STR      R0,[SP, #+12]
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x2100             MOVS     R1,#+0
   \   00000048   0x9A03             LDR      R2,[SP, #+12]
   \   0000004A   0xC203             STM      R2!,{R0,R1}
    293              ctx->add_len = 0;
   \   0000004C   0x9A03             LDR      R2,[SP, #+12]
   \   0000004E   0x3208             ADDS     R2,R2,#+8
   \   00000050   0xC203             STM      R2!,{R0,R1}
    294          
    295              if( iv_len == 12 )
   \   00000052   0x2D0C             CMP      R5,#+12
   \   00000054   0xD10D             BNE      ??mbedtls_gcm_starts_1
    296              {
    297                  memcpy( ctx->y, iv, iv_len );
   \   00000056   0x220C             MOVS     R2,#+12
   \   00000058   0x0021             MOVS     R1,R4
   \   0000005A   0x9801             LDR      R0,[SP, #+4]
   \   0000005C   0x.... 0x....      BL       __aeabi_memcpy
    298                  ctx->y[15] = 1;
   \   00000060   0x2001             MOVS     R0,#+1
   \   00000062   0x990A             LDR      R1,[SP, #+40]
   \   00000064   0x22FF             MOVS     R2,#+255
   \   00000066   0x3270             ADDS     R2,R2,#+112      ;; #+367
   \   00000068   0x5488             STRB     R0,[R1, R2]
   \   0000006A   0xE042             B        ??mbedtls_gcm_starts_2
    299              }
   \                     ??mbedtls_gcm_starts_0: (+1)
   \   0000006C   0x2013             MOVS     R0,#+19
   \   0000006E   0x43C0             MVNS     R0,R0            ;; #-20
   \   00000070   0xE06B             B        ??mbedtls_gcm_starts_3
    300              else
    301              {
    302                  memset( work_buf, 0x00, 16 );
   \                     ??mbedtls_gcm_starts_1: (+1)
   \   00000072   0xA805             ADD      R0,SP,#+20
   \   00000074   0x2200             MOVS     R2,#+0
   \   00000076   0xC04E             STM      R0!,{R1-R3,R6}
    303                  PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
   \   00000078   0xA805             ADD      R0,SP,#+20
   \   0000007A   0x0D69             LSRS     R1,R5,#+21
   \   0000007C   0x7301             STRB     R1,[R0, #+12]
   \   0000007E   0x0B69             LSRS     R1,R5,#+13
   \   00000080   0x7341             STRB     R1,[R0, #+13]
   \   00000082   0x0969             LSRS     R1,R5,#+5
   \   00000084   0x7381             STRB     R1,[R0, #+14]
   \   00000086   0x00E9             LSLS     R1,R5,#+3
   \   00000088   0x73C1             STRB     R1,[R0, #+15]
    304          
    305                  p = iv;
    306                  while( iv_len > 0 )
    307                  {
    308                      use_len = ( iv_len < 16 ) ? iv_len : 16;
   \                     ??mbedtls_gcm_starts_4: (+1)
   \   0000008A   0x2710             MOVS     R7,#+16
   \   0000008C   0x2D10             CMP      R5,#+16
   \   0000008E   0xD800             BHI      ??mbedtls_gcm_starts_5
   \   00000090   0x002F             MOVS     R7,R5
   \                     ??mbedtls_gcm_starts_5: (+1)
   \   00000092   0x9801             LDR      R0,[SP, #+4]
   \   00000094   0x0021             MOVS     R1,R4
   \   00000096   0x003A             MOVS     R2,R7
    309          
    310                      for( i = 0; i < use_len; i++ )
    311                          ctx->y[i] ^= p[i];
   \                     ??mbedtls_gcm_starts_6: (+1)
   \   00000098   0x7803             LDRB     R3,[R0, #+0]
   \   0000009A   0x780E             LDRB     R6,[R1, #+0]
   \   0000009C   0x405E             EORS     R6,R6,R3
   \   0000009E   0x7006             STRB     R6,[R0, #+0]
   \   000000A0   0x1C49             ADDS     R1,R1,#+1
   \   000000A2   0x1C40             ADDS     R0,R0,#+1
   \   000000A4   0x1E52             SUBS     R2,R2,#+1
   \   000000A6   0xD1F7             BNE      ??mbedtls_gcm_starts_6
    312          
    313                      gcm_mult( ctx, ctx->y, ctx->y );
   \   000000A8   0x9A01             LDR      R2,[SP, #+4]
   \   000000AA   0x4611             MOV      R1,R2
   \   000000AC   0x980A             LDR      R0,[SP, #+40]
   \   000000AE   0x.... 0x....      BL       gcm_mult
    314          
    315                      iv_len -= use_len;
   \   000000B2   0x1BED             SUBS     R5,R5,R7
    316                      p += use_len;
   \   000000B4   0x19E4             ADDS     R4,R4,R7
    317                  }
   \   000000B6   0x2D00             CMP      R5,#+0
   \   000000B8   0xD1E7             BNE      ??mbedtls_gcm_starts_4
    318          
    319                  for( i = 0; i < 16; i++ )
   \   000000BA   0x9801             LDR      R0,[SP, #+4]
   \   000000BC   0xA905             ADD      R1,SP,#+20
   \   000000BE   0x2204             MOVS     R2,#+4
    320                      ctx->y[i] ^= work_buf[i];
   \                     ??mbedtls_gcm_starts_7: (+1)
   \   000000C0   0x7803             LDRB     R3,[R0, #+0]
   \   000000C2   0x780C             LDRB     R4,[R1, #+0]
   \   000000C4   0x405C             EORS     R4,R4,R3
   \   000000C6   0x7004             STRB     R4,[R0, #+0]
   \   000000C8   0x7843             LDRB     R3,[R0, #+1]
   \   000000CA   0x784C             LDRB     R4,[R1, #+1]
   \   000000CC   0x405C             EORS     R4,R4,R3
   \   000000CE   0x7044             STRB     R4,[R0, #+1]
   \   000000D0   0x7883             LDRB     R3,[R0, #+2]
   \   000000D2   0x788C             LDRB     R4,[R1, #+2]
   \   000000D4   0x405C             EORS     R4,R4,R3
   \   000000D6   0x7084             STRB     R4,[R0, #+2]
   \   000000D8   0x78C3             LDRB     R3,[R0, #+3]
   \   000000DA   0x78CC             LDRB     R4,[R1, #+3]
   \   000000DC   0x405C             EORS     R4,R4,R3
   \   000000DE   0x70C4             STRB     R4,[R0, #+3]
   \   000000E0   0x1D09             ADDS     R1,R1,#+4
   \   000000E2   0x1D00             ADDS     R0,R0,#+4
   \   000000E4   0x1E52             SUBS     R2,R2,#+1
   \   000000E6   0xD1EB             BNE      ??mbedtls_gcm_starts_7
    321          
    322                  gcm_mult( ctx, ctx->y, ctx->y );
   \   000000E8   0x9A01             LDR      R2,[SP, #+4]
   \   000000EA   0x4611             MOV      R1,R2
   \   000000EC   0x980A             LDR      R0,[SP, #+40]
   \   000000EE   0x.... 0x....      BL       gcm_mult
    323              }
    324          
    325              if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
    326                                       &olen ) ) != 0 )
   \                     ??mbedtls_gcm_starts_2: (+1)
   \   000000F2   0xA804             ADD      R0,SP,#+16
   \   000000F4   0x9000             STR      R0,[SP, #+0]
   \   000000F6   0x980A             LDR      R0,[SP, #+40]
   \   000000F8   0x21A8             MOVS     R1,#+168
   \   000000FA   0x0049             LSLS     R1,R1,#+1        ;; #+336
   \   000000FC   0x1843             ADDS     R3,R0,R1
   \   000000FE   0x2210             MOVS     R2,#+16
   \   00000100   0x9901             LDR      R1,[SP, #+4]
   \   00000102   0x.... 0x....      BL       mbedtls_cipher_update
   \   00000106   0x2800             CMP      R0,#+0
   \   00000108   0xD11F             BNE      ??mbedtls_gcm_starts_3
    327              {
    328                  return( ret );
   \   0000010A   0x9E11             LDR      R6,[SP, #+68]
    329              }
    330          
    331              ctx->add_len = add_len;
   \   0000010C   0x2700             MOVS     R7,#+0
   \   0000010E   0x9803             LDR      R0,[SP, #+12]
   \   00000110   0x3008             ADDS     R0,R0,#+8
   \   00000112   0xC0C0             STM      R0!,{R6,R7}
    332              p = add;
   \   00000114   0x9C10             LDR      R4,[SP, #+64]
   \   00000116   0xE015             B        ??mbedtls_gcm_starts_8
    333              while( add_len > 0 )
    334              {
    335                  use_len = ( add_len < 16 ) ? add_len : 16;
   \                     ??mbedtls_gcm_starts_9: (+1)
   \   00000118   0x2710             MOVS     R7,#+16
   \   0000011A   0x2E10             CMP      R6,#+16
   \   0000011C   0xD800             BHI      ??mbedtls_gcm_starts_10
   \   0000011E   0x0037             MOVS     R7,R6
   \                     ??mbedtls_gcm_starts_10: (+1)
   \   00000120   0x9802             LDR      R0,[SP, #+8]
   \   00000122   0x0021             MOVS     R1,R4
   \   00000124   0x003A             MOVS     R2,R7
    336          
    337                  for( i = 0; i < use_len; i++ )
    338                      ctx->buf[i] ^= p[i];
   \                     ??mbedtls_gcm_starts_11: (+1)
   \   00000126   0x7803             LDRB     R3,[R0, #+0]
   \   00000128   0x780D             LDRB     R5,[R1, #+0]
   \   0000012A   0x405D             EORS     R5,R5,R3
   \   0000012C   0x7005             STRB     R5,[R0, #+0]
   \   0000012E   0x1C49             ADDS     R1,R1,#+1
   \   00000130   0x1C40             ADDS     R0,R0,#+1
   \   00000132   0x1E52             SUBS     R2,R2,#+1
   \   00000134   0xD1F7             BNE      ??mbedtls_gcm_starts_11
    339          
    340                  gcm_mult( ctx, ctx->buf, ctx->buf );
   \   00000136   0x9A02             LDR      R2,[SP, #+8]
   \   00000138   0x4611             MOV      R1,R2
   \   0000013A   0x980A             LDR      R0,[SP, #+40]
   \   0000013C   0x.... 0x....      BL       gcm_mult
    341          
    342                  add_len -= use_len;
   \   00000140   0x1BF6             SUBS     R6,R6,R7
    343                  p += use_len;
   \   00000142   0x19E4             ADDS     R4,R4,R7
    344              }
   \                     ??mbedtls_gcm_starts_8: (+1)
   \   00000144   0x2E00             CMP      R6,#+0
   \   00000146   0xD1E7             BNE      ??mbedtls_gcm_starts_9
    345          
    346              return( 0 );
   \   00000148   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_gcm_starts_3: (+1)
   \   0000014A   0xB00B             ADD      SP,SP,#+44
   \   0000014C   0xBDF0             POP      {R4-R7,PC}       ;; return
    347          }
    348          

   \                                 In section .text, align 2, keep-with-next
    349          int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
    350                          size_t length,
    351                          const unsigned char *input,
    352                          unsigned char *output )
    353          {
   \                     mbedtls_gcm_update: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0015             MOVS     R5,R2
    354              int ret;
    355              unsigned char ectr[16];
    356              size_t i;
    357              const unsigned char *p;
    358              unsigned char *out_p = output;
   \   00000008   0x9305             STR      R3,[SP, #+20]
    359              size_t use_len, olen = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9007             STR      R0,[SP, #+28]
    360          
    361              if( output > input && (size_t) ( output - input ) < length )
   \   0000000E   0x429D             CMP      R5,R3
   \   00000010   0xD202             BCS      ??mbedtls_gcm_update_0
   \   00000012   0x1B58             SUBS     R0,R3,R5
   \   00000014   0x42A0             CMP      R0,R4
   \   00000016   0xD315             BCC      ??mbedtls_gcm_update_1
    362                  return( MBEDTLS_ERR_GCM_BAD_INPUT );
    363          
    364              /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
    365               * Also check for possible overflow */
    366              if( ctx->len + length < ctx->len ||
    367                  (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
   \                     ??mbedtls_gcm_update_0: (+1)
   \   00000018   0x980C             LDR      R0,[SP, #+48]
   \   0000001A   0x21A0             MOVS     R1,#+160
   \   0000001C   0x0049             LSLS     R1,R1,#+1        ;; #+320
   \   0000001E   0x1846             ADDS     R6,R0,R1
   \   00000020   0xCE0C             LDM      R6!,{R2,R3}
   \   00000022   0x3E08             SUBS     R6,R6,#+8
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x18A0             ADDS     R0,R4,R2
   \   00000028   0x4159             ADCS     R1,R1,R3
   \   0000002A   0x4299             CMP      R1,R3
   \   0000002C   0xD30A             BCC      ??mbedtls_gcm_update_1
   \   0000002E   0xD801             BHI      ??mbedtls_gcm_update_2
   \   00000030   0x4290             CMP      R0,R2
   \   00000032   0xD307             BCC      ??mbedtls_gcm_update_1
   \                     ??mbedtls_gcm_update_2: (+1)
   \   00000034   0x221E             MOVS     R2,#+30
   \   00000036   0x43D2             MVNS     R2,R2            ;; #-31
   \   00000038   0x230F             MOVS     R3,#+15
   \   0000003A   0x4299             CMP      R1,R3
   \   0000003C   0xD305             BCC      ??mbedtls_gcm_update_3
   \   0000003E   0xD801             BHI      ??mbedtls_gcm_update_1
   \   00000040   0x4290             CMP      R0,R2
   \   00000042   0xD302             BCC      ??mbedtls_gcm_update_3
    368              {
    369                  return( MBEDTLS_ERR_GCM_BAD_INPUT );
   \                     ??mbedtls_gcm_update_1: (+1)
   \   00000044   0x2013             MOVS     R0,#+19
   \   00000046   0x43C0             MVNS     R0,R0            ;; #-20
   \   00000048   0xE06C             B        ??mbedtls_gcm_update_4
    370              }
    371          
    372              ctx->len += length;
   \                     ??mbedtls_gcm_update_3: (+1)
   \   0000004A   0xC603             STM      R6!,{R0,R1}
    373          
    374              p = input;
   \   0000004C   0x9504             STR      R5,[SP, #+16]
   \   0000004E   0x980C             LDR      R0,[SP, #+48]
   \   00000050   0x21B8             MOVS     R1,#+184
   \   00000052   0x0049             LSLS     R1,R1,#+1        ;; #+368
   \   00000054   0x1840             ADDS     R0,R0,R1
   \   00000056   0x9003             STR      R0,[SP, #+12]
   \   00000058   0x980C             LDR      R0,[SP, #+48]
   \   0000005A   0x3910             SUBS     R1,R1,#+16
   \   0000005C   0x1840             ADDS     R0,R0,R1
   \   0000005E   0x9006             STR      R0,[SP, #+24]
   \   00000060   0x980C             LDR      R0,[SP, #+48]
   \   00000062   0x310C             ADDS     R1,R1,#+12
   \   00000064   0x1840             ADDS     R0,R0,R1
   \   00000066   0x9001             STR      R0,[SP, #+4]
   \   00000068   0xE02F             B        ??mbedtls_gcm_update_5
    375              while( length > 0 )
    376              {
    377                  use_len = ( length < 16 ) ? length : 16;
    378          
    379                  for( i = 16; i > 12; i-- )
    380                      if( ++ctx->y[i - 1] != 0 )
    381                          break;
    382          
    383                  if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
    384                                             &olen ) ) != 0 )
    385                  {
    386                      return( ret );
    387                  }
    388          
    389                  for( i = 0; i < use_len; i++ )
   \                     ??mbedtls_gcm_update_6: (+1)
   \   0000006A   0x9802             LDR      R0,[SP, #+8]
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD01D             BEQ      ??mbedtls_gcm_update_7
   \   00000070   0x9803             LDR      R0,[SP, #+12]
   \   00000072   0x9904             LDR      R1,[SP, #+16]
   \   00000074   0x9A05             LDR      R2,[SP, #+20]
   \   00000076   0xAB08             ADD      R3,SP,#+32
   \   00000078   0x9D02             LDR      R5,[SP, #+8]
    390                  {
    391                      if( ctx->mode == MBEDTLS_GCM_DECRYPT )
   \                     ??mbedtls_gcm_update_8: (+1)
   \   0000007A   0x9E01             LDR      R6,[SP, #+4]
   \   0000007C   0x6976             LDR      R6,[R6, #+20]
   \   0000007E   0x2E00             CMP      R6,#+0
   \   00000080   0xD103             BNE      ??mbedtls_gcm_update_9
    392                          ctx->buf[i] ^= p[i];
   \   00000082   0x7806             LDRB     R6,[R0, #+0]
   \   00000084   0x780F             LDRB     R7,[R1, #+0]
   \   00000086   0x4077             EORS     R7,R7,R6
   \   00000088   0x7007             STRB     R7,[R0, #+0]
    393                      out_p[i] = ectr[i] ^ p[i];
   \                     ??mbedtls_gcm_update_9: (+1)
   \   0000008A   0x781F             LDRB     R7,[R3, #+0]
   \   0000008C   0x780E             LDRB     R6,[R1, #+0]
   \   0000008E   0x407E             EORS     R6,R6,R7
   \   00000090   0x7016             STRB     R6,[R2, #+0]
    394                      if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
   \   00000092   0x9F01             LDR      R7,[SP, #+4]
   \   00000094   0x697F             LDR      R7,[R7, #+20]
   \   00000096   0x2F01             CMP      R7,#+1
   \   00000098   0xD102             BNE      ??mbedtls_gcm_update_10
    395                          ctx->buf[i] ^= out_p[i];
   \   0000009A   0x7807             LDRB     R7,[R0, #+0]
   \   0000009C   0x407E             EORS     R6,R6,R7
   \   0000009E   0x7006             STRB     R6,[R0, #+0]
    396                  }
   \                     ??mbedtls_gcm_update_10: (+1)
   \   000000A0   0x1C5B             ADDS     R3,R3,#+1
   \   000000A2   0x1C52             ADDS     R2,R2,#+1
   \   000000A4   0x1C49             ADDS     R1,R1,#+1
   \   000000A6   0x1C40             ADDS     R0,R0,#+1
   \   000000A8   0x1E6D             SUBS     R5,R5,#+1
   \   000000AA   0xD1E6             BNE      ??mbedtls_gcm_update_8
    397          
    398                  gcm_mult( ctx, ctx->buf, ctx->buf );
   \                     ??mbedtls_gcm_update_7: (+1)
   \   000000AC   0x9A03             LDR      R2,[SP, #+12]
   \   000000AE   0x4611             MOV      R1,R2
   \   000000B0   0x980C             LDR      R0,[SP, #+48]
   \   000000B2   0x.... 0x....      BL       gcm_mult
    399          
    400                  length -= use_len;
   \   000000B6   0x9802             LDR      R0,[SP, #+8]
   \   000000B8   0x1A24             SUBS     R4,R4,R0
    401                  p += use_len;
   \   000000BA   0x9804             LDR      R0,[SP, #+16]
   \   000000BC   0x9902             LDR      R1,[SP, #+8]
   \   000000BE   0x1840             ADDS     R0,R0,R1
   \   000000C0   0x9004             STR      R0,[SP, #+16]
    402                  out_p += use_len;
   \   000000C2   0x9805             LDR      R0,[SP, #+20]
   \   000000C4   0x9902             LDR      R1,[SP, #+8]
   \   000000C6   0x1840             ADDS     R0,R0,R1
   \   000000C8   0x9005             STR      R0,[SP, #+20]
   \                     ??mbedtls_gcm_update_5: (+1)
   \   000000CA   0x2C00             CMP      R4,#+0
   \   000000CC   0xD029             BEQ      ??mbedtls_gcm_update_11
   \   000000CE   0x2010             MOVS     R0,#+16
   \   000000D0   0x2C10             CMP      R4,#+16
   \   000000D2   0xD800             BHI      ??mbedtls_gcm_update_12
   \   000000D4   0x0020             MOVS     R0,R4
   \                     ??mbedtls_gcm_update_12: (+1)
   \   000000D6   0x9002             STR      R0,[SP, #+8]
   \   000000D8   0x9801             LDR      R0,[SP, #+4]
   \   000000DA   0x78C0             LDRB     R0,[R0, #+3]
   \   000000DC   0x1C40             ADDS     R0,R0,#+1
   \   000000DE   0x9901             LDR      R1,[SP, #+4]
   \   000000E0   0x70C8             STRB     R0,[R1, #+3]
   \   000000E2   0x0600             LSLS     R0,R0,#+24
   \   000000E4   0xD112             BNE      ??mbedtls_gcm_update_13
   \   000000E6   0x9801             LDR      R0,[SP, #+4]
   \   000000E8   0x7880             LDRB     R0,[R0, #+2]
   \   000000EA   0x1C40             ADDS     R0,R0,#+1
   \   000000EC   0x9901             LDR      R1,[SP, #+4]
   \   000000EE   0x7088             STRB     R0,[R1, #+2]
   \   000000F0   0x0600             LSLS     R0,R0,#+24
   \   000000F2   0xD10B             BNE      ??mbedtls_gcm_update_13
   \   000000F4   0x9801             LDR      R0,[SP, #+4]
   \   000000F6   0x7840             LDRB     R0,[R0, #+1]
   \   000000F8   0x1C40             ADDS     R0,R0,#+1
   \   000000FA   0x9901             LDR      R1,[SP, #+4]
   \   000000FC   0x7048             STRB     R0,[R1, #+1]
   \   000000FE   0x0600             LSLS     R0,R0,#+24
   \   00000100   0xD104             BNE      ??mbedtls_gcm_update_13
   \   00000102   0x9801             LDR      R0,[SP, #+4]
   \   00000104   0x7800             LDRB     R0,[R0, #+0]
   \   00000106   0x1C40             ADDS     R0,R0,#+1
   \   00000108   0x9901             LDR      R1,[SP, #+4]
   \   0000010A   0x7008             STRB     R0,[R1, #+0]
   \                     ??mbedtls_gcm_update_13: (+1)
   \   0000010C   0xA807             ADD      R0,SP,#+28
   \   0000010E   0x9000             STR      R0,[SP, #+0]
   \   00000110   0xAB08             ADD      R3,SP,#+32
   \   00000112   0x2210             MOVS     R2,#+16
   \   00000114   0x9906             LDR      R1,[SP, #+24]
   \   00000116   0x980C             LDR      R0,[SP, #+48]
   \   00000118   0x.... 0x....      BL       mbedtls_cipher_update
   \   0000011C   0x2800             CMP      R0,#+0
   \   0000011E   0xD0A4             BEQ      ??mbedtls_gcm_update_6
   \   00000120   0xE000             B        ??mbedtls_gcm_update_4
    403              }
    404          
    405              return( 0 );
   \                     ??mbedtls_gcm_update_11: (+1)
   \   00000122   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_gcm_update_4: (+1)
   \   00000124   0xB00D             ADD      SP,SP,#+52
   \   00000126   0xBDF0             POP      {R4-R7,PC}       ;; return
    406          }
    407          

   \                                 In section .text, align 2, keep-with-next
    408          int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
    409                          unsigned char *tag,
    410                          size_t tag_len )
    411          {
   \                     mbedtls_gcm_finish: (+1)
   \   00000000   0xB5F7             PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
    412              unsigned char work_buf[16];
    413              size_t i;
    414              uint64_t orig_len = ctx->len * 8;
   \   00000004   0x21A0             MOVS     R1,#+160
   \   00000006   0x0049             LSLS     R1,R1,#+1        ;; #+320
   \   00000008   0x1840             ADDS     R0,R0,R1
   \   0000000A   0xC8C0             LDM      R0!,{R6,R7}
   \   0000000C   0x00FF             LSLS     R7,R7,#+3
   \   0000000E   0x0F71             LSRS     R1,R6,#+29
   \   00000010   0x430F             ORRS     R7,R7,R1
   \   00000012   0x00F6             LSLS     R6,R6,#+3
    415              uint64_t orig_add_len = ctx->add_len * 8;
   \   00000014   0xC830             LDM      R0!,{R4,R5}
   \   00000016   0x00ED             LSLS     R5,R5,#+3
   \   00000018   0x0F60             LSRS     R0,R4,#+29
   \   0000001A   0x4305             ORRS     R5,R5,R0
   \   0000001C   0x00E4             LSLS     R4,R4,#+3
    416          
    417              if( tag_len > 16 || tag_len < 4 )
   \   0000001E   0x1F10             SUBS     R0,R2,#+4
   \   00000020   0x280D             CMP      R0,#+13
   \   00000022   0xD302             BCC      ??mbedtls_gcm_finish_0
    418                  return( MBEDTLS_ERR_GCM_BAD_INPUT );
   \   00000024   0x2013             MOVS     R0,#+19
   \   00000026   0x43C0             MVNS     R0,R0            ;; #-20
   \   00000028   0xE060             B        ??mbedtls_gcm_finish_1
    419          
    420              memcpy( tag, ctx->base_ectr, tag_len );
   \                     ??mbedtls_gcm_finish_0: (+1)
   \   0000002A   0x9804             LDR      R0,[SP, #+16]
   \   0000002C   0x21A8             MOVS     R1,#+168
   \   0000002E   0x0049             LSLS     R1,R1,#+1        ;; #+336
   \   00000030   0x1841             ADDS     R1,R0,R1
   \   00000032   0x9805             LDR      R0,[SP, #+20]
   \   00000034   0x.... 0x....      BL       __aeabi_memcpy
    421          
    422              if( orig_len || orig_add_len )
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0x0029             MOVS     R1,R5
   \   0000003C   0x4330             ORRS     R0,R0,R6
   \   0000003E   0x4339             ORRS     R1,R1,R7
   \   00000040   0xD101             BNE      ??mbedtls_gcm_finish_2
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD051             BEQ      ??mbedtls_gcm_finish_3
    423              {
    424                  memset( work_buf, 0x00, 16 );
   \                     ??mbedtls_gcm_finish_2: (+1)
   \   00000046   0x4668             MOV      R0,SP
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0x2200             MOVS     R2,#+0
   \   0000004C   0x2300             MOVS     R3,#+0
   \   0000004E   0xC00E             STM      R0!,{R1-R3}
   \   00000050   0x6001             STR      R1,[R0, #0]
    425          
    426                  PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
   \   00000052   0x466A             MOV      R2,SP
   \   00000054   0x0E28             LSRS     R0,R5,#+24
   \   00000056   0x7010             STRB     R0,[R2, #+0]
   \   00000058   0x0C28             LSRS     R0,R5,#+16
   \   0000005A   0x7050             STRB     R0,[R2, #+1]
   \   0000005C   0x0A28             LSRS     R0,R5,#+8
   \   0000005E   0x7090             STRB     R0,[R2, #+2]
   \   00000060   0x70D5             STRB     R5,[R2, #+3]
    427                  PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
   \   00000062   0x0E20             LSRS     R0,R4,#+24
   \   00000064   0x7110             STRB     R0,[R2, #+4]
   \   00000066   0x0C20             LSRS     R0,R4,#+16
   \   00000068   0x7150             STRB     R0,[R2, #+5]
   \   0000006A   0x0420             LSLS     R0,R4,#+16
   \   0000006C   0x0E00             LSRS     R0,R0,#+24
   \   0000006E   0x7190             STRB     R0,[R2, #+6]
   \   00000070   0x71D4             STRB     R4,[R2, #+7]
    428                  PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
   \   00000072   0x0E38             LSRS     R0,R7,#+24
   \   00000074   0x7210             STRB     R0,[R2, #+8]
   \   00000076   0x0C38             LSRS     R0,R7,#+16
   \   00000078   0x7250             STRB     R0,[R2, #+9]
   \   0000007A   0x0A38             LSRS     R0,R7,#+8
   \   0000007C   0x7290             STRB     R0,[R2, #+10]
   \   0000007E   0x72D7             STRB     R7,[R2, #+11]
    429                  PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
   \   00000080   0x0E30             LSRS     R0,R6,#+24
   \   00000082   0x7310             STRB     R0,[R2, #+12]
   \   00000084   0x0C30             LSRS     R0,R6,#+16
   \   00000086   0x7350             STRB     R0,[R2, #+13]
   \   00000088   0x0430             LSLS     R0,R6,#+16
   \   0000008A   0x0E00             LSRS     R0,R0,#+24
   \   0000008C   0x7390             STRB     R0,[R2, #+14]
   \   0000008E   0x73D6             STRB     R6,[R2, #+15]
    430          
    431                  for( i = 0; i < 16; i++ )
   \   00000090   0x9804             LDR      R0,[SP, #+16]
   \   00000092   0x21B8             MOVS     R1,#+184
   \   00000094   0x0049             LSLS     R1,R1,#+1        ;; #+368
   \   00000096   0x1844             ADDS     R4,R0,R1
   \   00000098   0x0020             MOVS     R0,R4
   \   0000009A   0x4669             MOV      R1,SP
   \   0000009C   0x2204             MOVS     R2,#+4
    432                      ctx->buf[i] ^= work_buf[i];
   \                     ??mbedtls_gcm_finish_4: (+1)
   \   0000009E   0x7803             LDRB     R3,[R0, #+0]
   \   000000A0   0x780D             LDRB     R5,[R1, #+0]
   \   000000A2   0x405D             EORS     R5,R5,R3
   \   000000A4   0x7005             STRB     R5,[R0, #+0]
   \   000000A6   0x7843             LDRB     R3,[R0, #+1]
   \   000000A8   0x784D             LDRB     R5,[R1, #+1]
   \   000000AA   0x405D             EORS     R5,R5,R3
   \   000000AC   0x7045             STRB     R5,[R0, #+1]
   \   000000AE   0x7883             LDRB     R3,[R0, #+2]
   \   000000B0   0x788D             LDRB     R5,[R1, #+2]
   \   000000B2   0x405D             EORS     R5,R5,R3
   \   000000B4   0x7085             STRB     R5,[R0, #+2]
   \   000000B6   0x78C3             LDRB     R3,[R0, #+3]
   \   000000B8   0x78CD             LDRB     R5,[R1, #+3]
   \   000000BA   0x405D             EORS     R5,R5,R3
   \   000000BC   0x70C5             STRB     R5,[R0, #+3]
   \   000000BE   0x1D09             ADDS     R1,R1,#+4
   \   000000C0   0x1D00             ADDS     R0,R0,#+4
   \   000000C2   0x1E52             SUBS     R2,R2,#+1
   \   000000C4   0xD1EB             BNE      ??mbedtls_gcm_finish_4
    433          
    434                  gcm_mult( ctx, ctx->buf, ctx->buf );
   \   000000C6   0x0022             MOVS     R2,R4
   \   000000C8   0x0021             MOVS     R1,R4
   \   000000CA   0x9804             LDR      R0,[SP, #+16]
   \   000000CC   0x.... 0x....      BL       gcm_mult
    435          
    436                  for( i = 0; i < tag_len; i++ )
   \   000000D0   0x9806             LDR      R0,[SP, #+24]
   \   000000D2   0x2800             CMP      R0,#+0
   \   000000D4   0xD009             BEQ      ??mbedtls_gcm_finish_3
   \   000000D6   0x9805             LDR      R0,[SP, #+20]
   \   000000D8   0x9906             LDR      R1,[SP, #+24]
    437                      tag[i] ^= ctx->buf[i];
   \                     ??mbedtls_gcm_finish_5: (+1)
   \   000000DA   0x7802             LDRB     R2,[R0, #+0]
   \   000000DC   0x7823             LDRB     R3,[R4, #+0]
   \   000000DE   0x4053             EORS     R3,R3,R2
   \   000000E0   0x7003             STRB     R3,[R0, #+0]
   \   000000E2   0x1C64             ADDS     R4,R4,#+1
   \   000000E4   0x1C40             ADDS     R0,R0,#+1
   \   000000E6   0x1E49             SUBS     R1,R1,#+1
   \   000000E8   0xD1F7             BNE      ??mbedtls_gcm_finish_5
    438              }
    439          
    440              return( 0 );
   \                     ??mbedtls_gcm_finish_3: (+1)
   \   000000EA   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_gcm_finish_1: (+1)
   \   000000EC   0xB007             ADD      SP,SP,#+28
   \   000000EE   0xBDF0             POP      {R4-R7,PC}       ;; return
    441          }
    442          

   \                                 In section .text, align 2, keep-with-next
    443          int mbedtls_gcm_crypt_and_tag( mbedtls_gcm_context *ctx,
    444                                 int mode,
    445                                 size_t length,
    446                                 const unsigned char *iv,
    447                                 size_t iv_len,
    448                                 const unsigned char *add,
    449                                 size_t add_len,
    450                                 const unsigned char *input,
    451                                 unsigned char *output,
    452                                 size_t tag_len,
    453                                 unsigned char *tag )
    454          {
   \                     mbedtls_gcm_crypt_and_tag: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x0015             MOVS     R5,R2
   \   00000008   0x001A             MOVS     R2,R3
    455              int ret;
    456          
    457              if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
   \   0000000A   0x9808             LDR      R0,[SP, #+32]
   \   0000000C   0x9001             STR      R0,[SP, #+4]
   \   0000000E   0x9807             LDR      R0,[SP, #+28]
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x9B06             LDR      R3,[SP, #+24]
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x.... 0x....      BL       mbedtls_gcm_starts
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD10C             BNE      ??mbedtls_gcm_crypt_and_tag_0
    458                  return( ret );
    459          
    460              if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
   \   0000001E   0x9B0A             LDR      R3,[SP, #+40]
   \   00000020   0x9A09             LDR      R2,[SP, #+36]
   \   00000022   0x0029             MOVS     R1,R5
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       mbedtls_gcm_update
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD104             BNE      ??mbedtls_gcm_crypt_and_tag_0
    461                  return( ret );
    462          
    463              if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
   \   0000002E   0x9A0B             LDR      R2,[SP, #+44]
   \   00000030   0x990C             LDR      R1,[SP, #+48]
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0x.... 0x....      BL       mbedtls_gcm_finish
   \                     ??mbedtls_gcm_crypt_and_tag_0: (+1)
   \   00000038   0xB003             ADD      SP,SP,#+12
   \   0000003A   0xBD30             POP      {R4,R5,PC}       ;; return
    464                  return( ret );
    465          
    466              return( 0 );
    467          }
    468          

   \                                 In section .text, align 2, keep-with-next
    469          int mbedtls_gcm_auth_decrypt( mbedtls_gcm_context *ctx,
    470                                size_t length,
    471                                const unsigned char *iv,
    472                                size_t iv_len,
    473                                const unsigned char *add,
    474                                size_t add_len,
    475                                const unsigned char *tag,
    476                                size_t tag_len,
    477                                const unsigned char *input,
    478                                unsigned char *output )
    479          {
   \                     mbedtls_gcm_auth_decrypt: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x9C13             LDR      R4,[SP, #+76]
   \   00000008   0x9E15             LDR      R6,[SP, #+84]
    480              int ret;
    481              unsigned char check_tag[16];
    482              size_t i;
    483              int diff;
    484          
    485              if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
    486                                             iv, iv_len, add, add_len,
    487                                             input, output, tag_len, check_tag ) ) != 0 )
   \   0000000A   0xA907             ADD      R1,SP,#+28
   \   0000000C   0x9106             STR      R1,[SP, #+24]
   \   0000000E   0x9405             STR      R4,[SP, #+20]
   \   00000010   0x9604             STR      R6,[SP, #+16]
   \   00000012   0x9914             LDR      R1,[SP, #+80]
   \   00000014   0x9103             STR      R1,[SP, #+12]
   \   00000016   0x9911             LDR      R1,[SP, #+68]
   \   00000018   0x9102             STR      R1,[SP, #+8]
   \   0000001A   0x9910             LDR      R1,[SP, #+64]
   \   0000001C   0x9101             STR      R1,[SP, #+4]
   \   0000001E   0x9300             STR      R3,[SP, #+0]
   \   00000020   0x0013             MOVS     R3,R2
   \   00000022   0x002A             MOVS     R2,R5
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x.... 0x....      BL       mbedtls_gcm_crypt_and_tag
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD119             BNE      ??mbedtls_gcm_auth_decrypt_0
    488              {
    489                  return( ret );
    490              }
    491          
    492              /* Check tag in "constant-time" */
    493              for( diff = 0, i = 0; i < tag_len; i++ )
   \   0000002E   0x2300             MOVS     R3,#+0
   \   00000030   0x2C00             CMP      R4,#+0
   \   00000032   0xD015             BEQ      ??mbedtls_gcm_auth_decrypt_1
   \   00000034   0x9912             LDR      R1,[SP, #+72]
   \   00000036   0xAA07             ADD      R2,SP,#+28
    494                  diff |= tag[i] ^ check_tag[i];
   \                     ??mbedtls_gcm_auth_decrypt_2: (+1)
   \   00000038   0x780F             LDRB     R7,[R1, #+0]
   \   0000003A   0x7810             LDRB     R0,[R2, #+0]
   \   0000003C   0x4078             EORS     R0,R0,R7
   \   0000003E   0x4318             ORRS     R0,R0,R3
   \   00000040   0x0003             MOVS     R3,R0
   \   00000042   0x1C52             ADDS     R2,R2,#+1
   \   00000044   0x1C49             ADDS     R1,R1,#+1
   \   00000046   0x1E64             SUBS     R4,R4,#+1
   \   00000048   0xD1F6             BNE      ??mbedtls_gcm_auth_decrypt_2
    495          
    496              if( diff != 0 )
   \   0000004A   0x2B00             CMP      R3,#+0
   \   0000004C   0xD008             BEQ      ??mbedtls_gcm_auth_decrypt_1
    497              {
    498                  mbedtls_zeroize( output, length );
   \   0000004E   0x2D00             CMP      R5,#+0
   \   00000050   0xD003             BEQ      ??mbedtls_gcm_auth_decrypt_3
   \   00000052   0x0029             MOVS     R1,R5
   \   00000054   0x0030             MOVS     R0,R6
   \   00000056   0x.... 0x....      BL       __aeabi_memclr
    499                  return( MBEDTLS_ERR_GCM_AUTH_FAILED );
   \                     ??mbedtls_gcm_auth_decrypt_3: (+1)
   \   0000005A   0x2011             MOVS     R0,#+17
   \   0000005C   0x43C0             MVNS     R0,R0            ;; #-18
   \   0000005E   0xE000             B        ??mbedtls_gcm_auth_decrypt_0
    500              }
    501          
    502              return( 0 );
   \                     ??mbedtls_gcm_auth_decrypt_1: (+1)
   \   00000060   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_gcm_auth_decrypt_0: (+1)
   \   00000062   0xB00B             ADD      SP,SP,#+44
   \   00000064   0xBDF0             POP      {R4-R7,PC}       ;; return
    503          }
    504          

   \                                 In section .text, align 2, keep-with-next
    505          void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
    506          {
   \                     mbedtls_gcm_free: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    507              mbedtls_cipher_free( &ctx->cipher_ctx );
   \   00000004   0x.... 0x....      BL       mbedtls_cipher_free
    508              mbedtls_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
   \   00000008   0x21C4             MOVS     R1,#+196
   \   0000000A   0x0049             LSLS     R1,R1,#+1        ;; #+392
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memclr
    509          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    510          
    511          #if defined(MBEDTLS_SELF_TEST) && defined(MBEDTLS_AES_C)
    512          /*
    513           * AES-GCM test vectors from:
    514           *
    515           * http://csrc.nist.gov/groups/STM/cavp/documents/mac/gcmtestvectors.zip
    516           */
    517          #define MAX_TESTS   6
    518          

   \                                 In section .rodata, align 4, keep-with-next
    519          static const int key_index[MAX_TESTS] =
   \                     key_index:
   \   00000000   0x00000000         DC32 0, 0, 1, 1, 1, 1
   \              0x00000000   
   \              0x00000001   
   \              0x00000001   
   \              0x00000001   
   \              0x00000001   
    520              { 0, 0, 1, 1, 1, 1 };
    521          

   \                                 In section .rodata, align 4, keep-with-next
    522          static const unsigned char key[MAX_TESTS][32] =
   \                     key:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 255, 233, 146, 134, 101, 115, 28
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xFE    
   \              0xFF 0xE9    
   \              0x92 0x86    
   \              0x65 0x73    
   \              0x1C         
   \   00000028   0x6D 0x6A          DC8 109, 106, 143, 148, 103, 48, 131, 8, 254, 255, 233, 146, 134, 101
   \              0x8F 0x94    
   \              0x67 0x30    
   \              0x83 0x08    
   \              0xFE 0xFF    
   \              0xE9 0x92    
   \              0x86 0x65    
   \   00000036   0x73 0x1C          DC8 115, 28, 109, 106, 143, 148, 103, 48, 131, 8, 0, 0, 0, 0, 0, 0, 0
   \              0x6D 0x6A    
   \              0x8F 0x94    
   \              0x67 0x30    
   \              0x83 0x08    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000047   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000005E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000075   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000008C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000A3   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000BA   0x00 0x00          DC8 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
    523          {
    524              { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    525                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    526                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    527                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    528              { 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
    529                0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
    530                0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
    531                0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08 },
    532          };
    533          

   \                                 In section .rodata, align 4, keep-with-next
    534          static const size_t iv_len[MAX_TESTS] =
   \                     iv_len:
   \   00000000   0x0000000C         DC32 12, 12, 12, 12, 8, 60
   \              0x0000000C   
   \              0x0000000C   
   \              0x0000000C   
   \              0x00000008   
   \              0x0000003C   
    535              { 12, 12, 12, 12, 8, 60 };
    536          

   \                                 In section .rodata, align 4, keep-with-next
    537          static const int iv_index[MAX_TESTS] =
   \                     iv_index:
   \   00000000   0x00000000         DC32 0, 0, 1, 1, 1, 2
   \              0x00000000   
   \              0x00000001   
   \              0x00000001   
   \              0x00000001   
   \              0x00000002   
    538              { 0, 0, 1, 1, 1, 2 };
    539          

   \                                 In section .rodata, align 4, keep-with-next
    540          static const unsigned char iv[MAX_TESTS][64] =
   \                     iv:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 254, 186
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xCA 0xFE    
   \              0xBA         
   \   00000043   0xBE 0xFA          DC8 190, 250, 206, 219, 173, 222, 202, 248, 136, 0, 0, 0, 0, 0, 0, 0, 0
   \              0xCE 0xDB    
   \              0xAD 0xDE    
   \              0xCA 0xF8    
   \              0x88 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000054   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000006B   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 147
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x93    
   \   00000081   0x13 0x22          DC8 19, 34, 93, 248, 132, 6, 229, 85, 144, 156, 90, 255, 82, 105, 170
   \              0x5D 0xF8    
   \              0x84 0x06    
   \              0xE5 0x55    
   \              0x90 0x9C    
   \              0x5A 0xFF    
   \              0x52 0x69    
   \              0xAA         
   \   00000090   0x6A 0x7A          DC8 106, 122, 149, 56, 83, 79, 125, 161, 228, 195, 3, 210, 163, 24, 167
   \              0x95 0x38    
   \              0x53 0x4F    
   \              0x7D 0xA1    
   \              0xE4 0xC3    
   \              0x03 0xD2    
   \              0xA3 0x18    
   \              0xA7         
   \   0000009F   0x28 0xC3          DC8 40, 195, 192, 201, 81, 86, 128, 149, 57, 252, 240, 226, 66, 154
   \              0xC0 0xC9    
   \              0x51 0x56    
   \              0x80 0x95    
   \              0x39 0xFC    
   \              0xF0 0xE2    
   \              0x42 0x9A    
   \   000000AD   0x6B 0x52          DC8 107, 82, 84, 22, 174, 219, 245, 160, 222, 106, 87, 166, 55, 179
   \              0x54 0x16    
   \              0xAE 0xDB    
   \              0xF5 0xA0    
   \              0xDE 0x6A    
   \              0x57 0xA6    
   \              0x37 0xB3    
   \   000000BB   0x9B 0x00          DC8 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000D1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000E8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000FF   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000116   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000012D   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000144   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000015B   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000172   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    541          {
    542              { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    543                0x00, 0x00, 0x00, 0x00 },
    544              { 0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
    545                0xde, 0xca, 0xf8, 0x88 },
    546              { 0x93, 0x13, 0x22, 0x5d, 0xf8, 0x84, 0x06, 0xe5,
    547                0x55, 0x90, 0x9c, 0x5a, 0xff, 0x52, 0x69, 0xaa,
    548                0x6a, 0x7a, 0x95, 0x38, 0x53, 0x4f, 0x7d, 0xa1,
    549                0xe4, 0xc3, 0x03, 0xd2, 0xa3, 0x18, 0xa7, 0x28,
    550                0xc3, 0xc0, 0xc9, 0x51, 0x56, 0x80, 0x95, 0x39,
    551                0xfc, 0xf0, 0xe2, 0x42, 0x9a, 0x6b, 0x52, 0x54,
    552                0x16, 0xae, 0xdb, 0xf5, 0xa0, 0xde, 0x6a, 0x57,
    553                0xa6, 0x37, 0xb3, 0x9b },
    554          };
    555          

   \                                 In section .rodata, align 4, keep-with-next
    556          static const size_t add_len[MAX_TESTS] =
   \                     add_len:
   \   00000000   0x00000000         DC32 0, 0, 0, 20, 20, 20
   \              0x00000000   
   \              0x00000000   
   \              0x00000014   
   \              0x00000014   
   \              0x00000014   
    557              { 0, 0, 0, 20, 20, 20 };
    558          

   \                                 In section .rodata, align 4, keep-with-next
    559          static const int add_index[MAX_TESTS] =
   \                     add_index:
   \   00000000   0x00000000         DC32 0, 0, 0, 1, 1, 1
   \              0x00000000   
   \              0x00000000   
   \              0x00000001   
   \              0x00000001   
   \              0x00000001   
    560              { 0, 0, 0, 1, 1, 1 };
    561          

   \                                 In section .rodata, align 4, keep-with-next
    562          static const unsigned char additional[MAX_TESTS][64] =
   \                     additional:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 237, 250
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xFE 0xED    
   \              0xFA         
   \   00000043   0xCE 0xDE          DC8 206, 222, 173, 190, 239, 254, 237, 250, 206, 222, 173, 190, 239
   \              0xAD 0xBE    
   \              0xEF 0xFE    
   \              0xED 0xFA    
   \              0xCE 0xDE    
   \              0xAD 0xBE    
   \              0xEF         
   \   00000050   0xAB 0xAD          DC8 171, 173, 218, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0xDA 0xD2    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000064   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000007B   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000092   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000A9   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000C0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000D7   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000EE   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000105   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000011C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000133   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000014A   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000161   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000178   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    563          {
    564              { 0x00 },
    565              { 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
    566                0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
    567                0xab, 0xad, 0xda, 0xd2 },
    568          };
    569          

   \                                 In section .rodata, align 4, keep-with-next
    570          static const size_t pt_len[MAX_TESTS] =
   \                     pt_len:
   \   00000000   0x00000000         DC32 0, 16, 64, 60, 60, 60
   \              0x00000010   
   \              0x00000040   
   \              0x0000003C   
   \              0x0000003C   
   \              0x0000003C   
    571              { 0, 16, 64, 60, 60, 60 };
    572          

   \                                 In section .rodata, align 4, keep-with-next
    573          static const int pt_index[MAX_TESTS] =
   \                     pt_index:
   \   00000000   0x00000000         DC32 0, 0, 1, 1, 1, 1
   \              0x00000000   
   \              0x00000001   
   \              0x00000001   
   \              0x00000001   
   \              0x00000001   
    574              { 0, 0, 1, 1, 1, 1 };
    575          

   \                                 In section .rodata, align 4, keep-with-next
    576          static const unsigned char pt[MAX_TESTS][64] =
   \                     pt:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 49, 50
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xD9 0x31    
   \              0x32         
   \   00000043   0x25 0xF8          DC8 37, 248, 132, 6, 229, 165, 89, 9, 197, 175, 245, 38, 154, 134, 167
   \              0x84 0x06    
   \              0xE5 0xA5    
   \              0x59 0x09    
   \              0xC5 0xAF    
   \              0xF5 0x26    
   \              0x9A 0x86    
   \              0xA7         
   \   00000052   0xA9 0x53          DC8 169, 83, 21, 52, 247, 218, 46, 76, 48, 61, 138, 49, 138, 114, 28
   \              0x15 0x34    
   \              0xF7 0xDA    
   \              0x2E 0x4C    
   \              0x30 0x3D    
   \              0x8A 0x31    
   \              0x8A 0x72    
   \              0x1C         
   \   00000061   0x3C 0x0C          DC8 60, 12, 149, 149, 104, 9, 83, 47, 207, 14, 36, 73, 166, 181, 37
   \              0x95 0x95    
   \              0x68 0x09    
   \              0x53 0x2F    
   \              0xCF 0x0E    
   \              0x24 0x49    
   \              0xA6 0xB5    
   \              0x25         
   \   00000070   0xB1 0x6A          DC8 177, 106, 237, 245, 170, 13, 230, 87, 186, 99, 123, 57, 26, 175
   \              0xED 0xF5    
   \              0xAA 0x0D    
   \              0xE6 0x57    
   \              0xBA 0x63    
   \              0x7B 0x39    
   \              0x1A 0xAF    
   \   0000007E   0xD2 0x55          DC8 210, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000094   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000AB   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000C2   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000D9   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000F0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000107   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000011E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000135   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000014C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000163   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000017A   0x00 0x00          DC8 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
    577          {
    578              { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    579                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    580              { 0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
    581                0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
    582                0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
    583                0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
    584                0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
    585                0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
    586                0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
    587                0xba, 0x63, 0x7b, 0x39, 0x1a, 0xaf, 0xd2, 0x55 },
    588          };
    589          

   \                                 In section .rodata, align 4, keep-with-next
    590          static const unsigned char ct[MAX_TESTS * 3][64] =
   \                     ct:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 136, 218
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x03 0x88    
   \              0xDA         
   \   00000043   0xCE 0x60          DC8 206, 96, 182, 163, 146, 243, 40, 194, 185, 113, 178, 254, 120, 0, 0
   \              0xB6 0xA3    
   \              0x92 0xF3    
   \              0x28 0xC2    
   \              0xB9 0x71    
   \              0xB2 0xFE    
   \              0x78 0x00    
   \              0x00         
   \   00000052   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000069   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000080   0x42 0x83          DC8 66, 131, 30, 194, 33, 119, 116, 36, 75, 114, 33, 183, 132, 208, 212
   \              0x1E 0xC2    
   \              0x21 0x77    
   \              0x74 0x24    
   \              0x4B 0x72    
   \              0x21 0xB7    
   \              0x84 0xD0    
   \              0xD4         
   \   0000008F   0x9C 0xE3          DC8 156, 227, 170, 33, 47, 44, 2, 164, 224, 53, 193, 126, 35, 41, 172
   \              0xAA 0x21    
   \              0x2F 0x2C    
   \              0x02 0xA4    
   \              0xE0 0x35    
   \              0xC1 0x7E    
   \              0x23 0x29    
   \              0xAC         
   \   0000009E   0xA1 0x2E          DC8 161, 46, 33, 213, 20, 178, 84, 102, 147, 28, 125, 143, 106, 90, 172
   \              0x21 0xD5    
   \              0x14 0xB2    
   \              0x54 0x66    
   \              0x93 0x1C    
   \              0x7D 0x8F    
   \              0x6A 0x5A    
   \              0xAC         
   \   000000AD   0x84 0xAA          DC8 132, 170, 5, 27, 163, 11, 57, 106, 10, 172, 151, 61, 88, 224, 145
   \              0x05 0x1B    
   \              0xA3 0x0B    
   \              0x39 0x6A    
   \              0x0A 0xAC    
   \              0x97 0x3D    
   \              0x58 0xE0    
   \              0x91         
   \   000000BC   0x47 0x3F          DC8 71, 63, 89, 133, 66, 131, 30, 194, 33, 119, 116, 36, 75, 114, 33
   \              0x59 0x85    
   \              0x42 0x83    
   \              0x1E 0xC2    
   \              0x21 0x77    
   \              0x74 0x24    
   \              0x4B 0x72    
   \              0x21         
   \   000000CB   0xB7 0x84          DC8 183, 132, 208, 212, 156, 227, 170, 33, 47, 44, 2, 164, 224, 53, 193
   \              0xD0 0xD4    
   \              0x9C 0xE3    
   \              0xAA 0x21    
   \              0x2F 0x2C    
   \              0x02 0xA4    
   \              0xE0 0x35    
   \              0xC1         
   \   000000DA   0x7E 0x23          DC8 126, 35, 41, 172, 161, 46, 33, 213, 20, 178, 84, 102, 147, 28, 125
   \              0x29 0xAC    
   \              0xA1 0x2E    
   \              0x21 0xD5    
   \              0x14 0xB2    
   \              0x54 0x66    
   \              0x93 0x1C    
   \              0x7D         
   \   000000E9   0x8F 0x6A          DC8 143, 106, 90, 172, 132, 170, 5, 27, 163, 11, 57, 106, 10, 172, 151
   \              0x5A 0xAC    
   \              0x84 0xAA    
   \              0x05 0x1B    
   \              0xA3 0x0B    
   \              0x39 0x6A    
   \              0x0A 0xAC    
   \              0x97         
   \   000000F8   0x3D 0x58          DC8 61, 88, 224, 145, 0, 0, 0, 0, 97, 53, 59, 76, 40, 6, 147, 74, 119
   \              0xE0 0x91    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x61 0x35    
   \              0x3B 0x4C    
   \              0x28 0x06    
   \              0x93 0x4A    
   \              0x77         
   \   00000109   0x7F 0xF5          DC8 127, 245, 31, 162, 42, 71, 85, 105, 155, 42, 113, 79, 205, 198, 248
   \              0x1F 0xA2    
   \              0x2A 0x47    
   \              0x55 0x69    
   \              0x9B 0x2A    
   \              0x71 0x4F    
   \              0xCD 0xC6    
   \              0xF8         
   \   00000118   0x37 0x66          DC8 55, 102, 229, 249, 123, 108, 116, 35, 115, 128, 105, 0, 228, 159
   \              0xE5 0xF9    
   \              0x7B 0x6C    
   \              0x74 0x23    
   \              0x73 0x80    
   \              0x69 0x00    
   \              0xE4 0x9F    
   \   00000126   0x24 0xB2          DC8 36, 178, 43, 9, 117, 68, 212, 137, 107, 66, 73, 137, 181, 225, 235
   \              0x2B 0x09    
   \              0x75 0x44    
   \              0xD4 0x89    
   \              0x6B 0x42    
   \              0x49 0x89    
   \              0xB5 0xE1    
   \              0xEB         
   \   00000135   0xAC 0x0F          DC8 172, 15, 7, 194, 63, 69, 152, 0, 0, 0, 0, 140, 226, 73, 152, 98, 86
   \              0x07 0xC2    
   \              0x3F 0x45    
   \              0x98 0x00    
   \              0x00 0x00    
   \              0x00 0x8C    
   \              0xE2 0x49    
   \              0x98 0x62    
   \              0x56         
   \   00000146   0x15 0xB6          DC8 21, 182, 3, 160, 51, 172, 161, 63, 184, 148, 190, 145, 18, 165, 195
   \              0x03 0xA0    
   \              0x33 0xAC    
   \              0xA1 0x3F    
   \              0xB8 0x94    
   \              0xBE 0x91    
   \              0x12 0xA5    
   \              0xC3         
   \   00000155   0xA2 0x11          DC8 162, 17, 168, 186, 38, 42, 60, 202, 126, 44, 167, 1, 228, 169, 164
   \              0xA8 0xBA    
   \              0x26 0x2A    
   \              0x3C 0xCA    
   \              0x7E 0x2C    
   \              0xA7 0x01    
   \              0xE4 0xA9    
   \              0xA4         
   \   00000164   0xFB 0xA4          DC8 251, 164, 60, 144, 204, 220, 178, 129, 212, 140, 124, 111, 214, 40
   \              0x3C 0x90    
   \              0xCC 0xDC    
   \              0xB2 0x81    
   \              0xD4 0x8C    
   \              0x7C 0x6F    
   \              0xD6 0x28    
   \   00000172   0x75 0xD2          DC8 117, 210, 172, 164, 23, 3, 76, 52, 174, 229, 0, 0, 0, 0, 0, 0, 0, 0
   \              0xAC 0xA4    
   \              0x17 0x03    
   \              0x4C 0x34    
   \              0xAE 0xE5    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000184   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000019B   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000001B2   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 231, 36, 124, 7, 240
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x98 0xE7    
   \              0x24 0x7C    
   \              0x07 0xF0    
   \   000001C6   0xFE 0x41          DC8 254, 65, 28, 38, 126, 67, 132, 176, 246, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x1C 0x26    
   \              0x7E 0x43    
   \              0x84 0xB0    
   \              0xF6 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001D8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000001EF   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 128, 202, 11
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x39    
   \              0x80 0xCA    
   \              0x0B         
   \   00000204   0x3C 0x00          DC8 60, 0, 232, 65, 235, 6, 250, 196, 135, 42, 39, 87, 133, 158, 28
   \              0xE8 0x41    
   \              0xEB 0x06    
   \              0xFA 0xC4    
   \              0x87 0x2A    
   \              0x27 0x57    
   \              0x85 0x9E    
   \              0x1C         
   \   00000213   0xEA 0xA6          DC8 234, 166, 239, 217, 132, 98, 133, 147, 180, 12, 161, 225, 156, 125
   \              0xEF 0xD9    
   \              0x84 0x62    
   \              0x85 0x93    
   \              0xB4 0x0C    
   \              0xA1 0xE1    
   \              0x9C 0x7D    
   \   00000221   0x77 0x3D          DC8 119, 61, 0, 193, 68, 197, 37, 172, 97, 157, 24, 200, 74, 63, 71, 24
   \              0x00 0xC1    
   \              0x44 0xC5    
   \              0x25 0xAC    
   \              0x61 0x9D    
   \              0x18 0xC8    
   \              0x4A 0x3F    
   \              0x47 0x18    
   \   00000231   0xE2 0x44          DC8 226, 68, 139, 47, 227, 36, 217, 204, 218, 39, 16, 172, 173, 226, 86
   \              0x8B 0x2F    
   \              0xE3 0x24    
   \              0xD9 0xCC    
   \              0xDA 0x27    
   \              0x10 0xAC    
   \              0xAD 0xE2    
   \              0x56         
   \   00000240   0x39 0x80          DC8 57, 128, 202, 11, 60, 0, 232, 65, 235, 6, 250, 196, 135, 42, 39, 87
   \              0xCA 0x0B    
   \              0x3C 0x00    
   \              0xE8 0x41    
   \              0xEB 0x06    
   \              0xFA 0xC4    
   \              0x87 0x2A    
   \              0x27 0x57    
   \   00000250   0x85 0x9E          DC8 133, 158, 28, 234, 166, 239, 217, 132, 98, 133, 147, 180, 12, 161
   \              0x1C 0xEA    
   \              0xA6 0xEF    
   \              0xD9 0x84    
   \              0x62 0x85    
   \              0x93 0xB4    
   \              0x0C 0xA1    
   \   0000025E   0xE1 0x9C          DC8 225, 156, 125, 119, 61, 0, 193, 68, 197, 37, 172, 97, 157, 24, 200
   \              0x7D 0x77    
   \              0x3D 0x00    
   \              0xC1 0x44    
   \              0xC5 0x25    
   \              0xAC 0x61    
   \              0x9D 0x18    
   \              0xC8         
   \   0000026D   0x4A 0x3F          DC8 74, 63, 71, 24, 226, 68, 139, 47, 227, 36, 217, 204, 218, 39, 16, 0
   \              0x47 0x18    
   \              0xE2 0x44    
   \              0x8B 0x2F    
   \              0xE3 0x24    
   \              0xD9 0xCC    
   \              0xDA 0x27    
   \              0x10 0x00    
   \   0000027D   0x00 0x00          DC8 0, 0, 0, 15, 16, 245, 153, 174, 20, 161, 84, 237, 36, 179, 110, 37
   \              0x00 0x0F    
   \              0x10 0xF5    
   \              0x99 0xAE    
   \              0x14 0xA1    
   \              0x54 0xED    
   \              0x24 0xB3    
   \              0x6E 0x25    
   \   0000028D   0x32 0x4D          DC8 50, 77, 184, 197, 102, 99, 46, 242, 187, 179, 79, 131, 71, 40, 15
   \              0xB8 0xC5    
   \              0x66 0x63    
   \              0x2E 0xF2    
   \              0xBB 0xB3    
   \              0x4F 0x83    
   \              0x47 0x28    
   \              0x0F         
   \   0000029C   0xC4 0x50          DC8 196, 80, 112, 87, 253, 220, 41, 223, 154, 71, 31, 117, 198, 101, 65
   \              0x70 0x57    
   \              0xFD 0xDC    
   \              0x29 0xDF    
   \              0x9A 0x47    
   \              0x1F 0x75    
   \              0xC6 0x65    
   \              0x41         
   \   000002AB   0xD4 0xD4          DC8 212, 212, 218, 209, 201, 233, 58, 25, 165, 142, 139, 71, 63, 160
   \              0xDA 0xD1    
   \              0xC9 0xE9    
   \              0x3A 0x19    
   \              0xA5 0x8E    
   \              0x8B 0x47    
   \              0x3F 0xA0    
   \   000002B9   0xF0 0x62          DC8 240, 98, 247, 0, 0, 0, 0, 210, 126, 136, 104, 28, 227, 36, 60, 72
   \              0xF7 0x00    
   \              0x00 0x00    
   \              0x00 0xD2    
   \              0x7E 0x88    
   \              0x68 0x1C    
   \              0xE3 0x24    
   \              0x3C 0x48    
   \   000002C9   0x30 0x16          DC8 48, 22, 90, 143, 220, 249, 255, 29, 233, 161, 216, 230, 180, 71
   \              0x5A 0x8F    
   \              0xDC 0xF9    
   \              0xFF 0x1D    
   \              0xE9 0xA1    
   \              0xD8 0xE6    
   \              0xB4 0x47    
   \   000002D7   0xEF 0x6E          DC8 239, 110, 247, 183, 152, 40, 102, 110, 69, 129, 231, 144, 18, 175
   \              0xF7 0xB7    
   \              0x98 0x28    
   \              0x66 0x6E    
   \              0x45 0x81    
   \              0xE7 0x90    
   \              0x12 0xAF    
   \   000002E5   0x34 0xDD          DC8 52, 221, 217, 226, 240, 55, 88, 155, 41, 45, 179, 230, 124, 3, 103
   \              0xD9 0xE2    
   \              0xF0 0x37    
   \              0x58 0x9B    
   \              0x29 0x2D    
   \              0xB3 0xE6    
   \              0x7C 0x03    
   \              0x67         
   \   000002F4   0x45 0xFA          DC8 69, 250, 34, 231, 233, 183, 55, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x22 0xE7    
   \              0xE9 0xB7    
   \              0x37 0x3B    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000307   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000031E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000335   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 206, 167, 64, 61, 77, 96, 107, 110
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xCE    
   \              0xA7 0x40    
   \              0x3D 0x4D    
   \              0x60 0x6B    
   \              0x6E         
   \   00000348   0x07 0x4E          DC8 7, 78, 197, 211, 186, 243, 157, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0xC5 0xD3    
   \              0xBA 0xF3    
   \              0x9D 0x18    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000035B   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000372   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 45, 193, 240, 153, 86
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x52 0x2D    
   \              0xC1 0xF0    
   \              0x99 0x56    
   \   00000386   0x7D 0x07          DC8 125, 7, 244, 127, 55, 163, 42, 132, 66, 125, 100, 58, 140, 220, 191
   \              0xF4 0x7F    
   \              0x37 0xA3    
   \              0x2A 0x84    
   \              0x42 0x7D    
   \              0x64 0x3A    
   \              0x8C 0xDC    
   \              0xBF         
   \   00000395   0xE5 0xC0          DC8 229, 192, 201, 117, 152, 162, 189, 37, 85, 209, 170, 140, 176, 142
   \              0xC9 0x75    
   \              0x98 0xA2    
   \              0xBD 0x25    
   \              0x55 0xD1    
   \              0xAA 0x8C    
   \              0xB0 0x8E    
   \   000003A3   0x48 0x59          DC8 72, 89, 13, 187, 61, 167, 176, 139, 16, 86, 130, 136, 56, 197, 246
   \              0x0D 0xBB    
   \              0x3D 0xA7    
   \              0xB0 0x8B    
   \              0x10 0x56    
   \              0x82 0x88    
   \              0x38 0xC5    
   \              0xF6         
   \   000003B2   0x1E 0x63          DC8 30, 99, 147, 186, 122, 10, 188, 201, 246, 98, 137, 128, 21, 173, 82
   \              0x93 0xBA    
   \              0x7A 0x0A    
   \              0xBC 0xC9    
   \              0xF6 0x62    
   \              0x89 0x80    
   \              0x15 0xAD    
   \              0x52         
   \   000003C1   0x2D 0xC1          DC8 45, 193, 240, 153, 86, 125, 7, 244, 127, 55, 163, 42, 132, 66, 125
   \              0xF0 0x99    
   \              0x56 0x7D    
   \              0x07 0xF4    
   \              0x7F 0x37    
   \              0xA3 0x2A    
   \              0x84 0x42    
   \              0x7D         
   \   000003D0   0x64 0x3A          DC8 100, 58, 140, 220, 191, 229, 192, 201, 117, 152, 162, 189, 37, 85
   \              0x8C 0xDC    
   \              0xBF 0xE5    
   \              0xC0 0xC9    
   \              0x75 0x98    
   \              0xA2 0xBD    
   \              0x25 0x55    
   \   000003DE   0xD1 0xAA          DC8 209, 170, 140, 176, 142, 72, 89, 13, 187, 61, 167, 176, 139, 16, 86
   \              0x8C 0xB0    
   \              0x8E 0x48    
   \              0x59 0x0D    
   \              0xBB 0x3D    
   \              0xA7 0xB0    
   \              0x8B 0x10    
   \              0x56         
   \   000003ED   0x82 0x88          DC8 130, 136, 56, 197, 246, 30, 99, 147, 186, 122, 10, 188, 201, 246
   \              0x38 0xC5    
   \              0xF6 0x1E    
   \              0x63 0x93    
   \              0xBA 0x7A    
   \              0x0A 0xBC    
   \              0xC9 0xF6    
   \   000003FB   0x62 0x00          DC8 98, 0, 0, 0, 0, 195, 118, 45, 241, 202, 120, 125, 50, 174, 71, 193
   \              0x00 0x00    
   \              0x00 0xC3    
   \              0x76 0x2D    
   \              0xF1 0xCA    
   \              0x78 0x7D    
   \              0x32 0xAE    
   \              0x47 0xC1    
   \   0000040B   0x3B 0xF1          DC8 59, 241, 152, 68, 203, 175, 26, 225, 77, 11, 151, 106, 250, 197, 47
   \              0x98 0x44    
   \              0xCB 0xAF    
   \              0x1A 0xE1    
   \              0x4D 0x0B    
   \              0x97 0x6A    
   \              0xFA 0xC5    
   \              0x2F         
   \   0000041A   0xF7 0xD7          DC8 247, 215, 155, 186, 157, 224, 254, 181, 130, 211, 57, 52, 164, 240
   \              0x9B 0xBA    
   \              0x9D 0xE0    
   \              0xFE 0xB5    
   \              0x82 0xD3    
   \              0x39 0x34    
   \              0xA4 0xF0    
   \   00000428   0x95 0x4C          DC8 149, 76, 194, 54, 59, 199, 63, 120, 98, 172, 67, 14, 100, 171, 228
   \              0xC2 0x36    
   \              0x3B 0xC7    
   \              0x3F 0x78    
   \              0x62 0xAC    
   \              0x43 0x0E    
   \              0x64 0xAB    
   \              0xE4         
   \   00000437   0x99 0xF4          DC8 153, 244, 124, 155, 31, 0, 0, 0, 0, 90, 141, 239, 47, 12, 158, 83
   \              0x7C 0x9B    
   \              0x1F 0x00    
   \              0x00 0x00    
   \              0x00 0x5A    
   \              0x8D 0xEF    
   \              0x2F 0x0C    
   \              0x9E 0x53    
   \   00000447   0xF1 0xF7          DC8 241, 247, 93, 120, 83, 101, 158, 42, 32, 238, 178, 178, 42, 175
   \              0x5D 0x78    
   \              0x53 0x65    
   \              0x9E 0x2A    
   \              0x20 0xEE    
   \              0xB2 0xB2    
   \              0x2A 0xAF    
   \   00000455   0xDE 0x64          DC8 222, 100, 25, 160, 88, 171, 79, 111, 116, 107, 244, 15, 192, 195
   \              0x19 0xA0    
   \              0x58 0xAB    
   \              0x4F 0x6F    
   \              0x74 0x6B    
   \              0xF4 0x0F    
   \              0xC0 0xC3    
   \   00000463   0xB7 0x80          DC8 183, 128, 242, 68, 69, 45, 163, 235, 241, 197, 216, 44, 222, 162
   \              0xF2 0x44    
   \              0x45 0x2D    
   \              0xA3 0xEB    
   \              0xF1 0xC5    
   \              0xD8 0x2C    
   \              0xDE 0xA2    
   \   00000471   0x41 0x89          DC8 65, 137, 151, 32, 14, 248, 46, 68, 174, 126, 63, 0, 0, 0, 0
   \              0x97 0x20    
   \              0x0E 0xF8    
   \              0x2E 0x44    
   \              0xAE 0x7E    
   \              0x3F 0x00    
   \              0x00 0x00    
   \              0x00         
    591          {
    592              { 0x00 },
    593              { 0x03, 0x88, 0xda, 0xce, 0x60, 0xb6, 0xa3, 0x92,
    594                0xf3, 0x28, 0xc2, 0xb9, 0x71, 0xb2, 0xfe, 0x78 },
    595              { 0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24,
    596                0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4, 0x9c,
    597                0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0,
    598                0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac, 0xa1, 0x2e,
    599                0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c,
    600                0x7d, 0x8f, 0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05,
    601                0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97,
    602                0x3d, 0x58, 0xe0, 0x91, 0x47, 0x3f, 0x59, 0x85 },
    603              { 0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24,
    604                0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4, 0x9c,
    605                0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0,
    606                0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac, 0xa1, 0x2e,
    607                0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c,
    608                0x7d, 0x8f, 0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05,
    609                0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97,
    610                0x3d, 0x58, 0xe0, 0x91 },
    611              { 0x61, 0x35, 0x3b, 0x4c, 0x28, 0x06, 0x93, 0x4a,
    612                0x77, 0x7f, 0xf5, 0x1f, 0xa2, 0x2a, 0x47, 0x55,
    613                0x69, 0x9b, 0x2a, 0x71, 0x4f, 0xcd, 0xc6, 0xf8,
    614                0x37, 0x66, 0xe5, 0xf9, 0x7b, 0x6c, 0x74, 0x23,
    615                0x73, 0x80, 0x69, 0x00, 0xe4, 0x9f, 0x24, 0xb2,
    616                0x2b, 0x09, 0x75, 0x44, 0xd4, 0x89, 0x6b, 0x42,
    617                0x49, 0x89, 0xb5, 0xe1, 0xeb, 0xac, 0x0f, 0x07,
    618                0xc2, 0x3f, 0x45, 0x98 },
    619              { 0x8c, 0xe2, 0x49, 0x98, 0x62, 0x56, 0x15, 0xb6,
    620                0x03, 0xa0, 0x33, 0xac, 0xa1, 0x3f, 0xb8, 0x94,
    621                0xbe, 0x91, 0x12, 0xa5, 0xc3, 0xa2, 0x11, 0xa8,
    622                0xba, 0x26, 0x2a, 0x3c, 0xca, 0x7e, 0x2c, 0xa7,
    623                0x01, 0xe4, 0xa9, 0xa4, 0xfb, 0xa4, 0x3c, 0x90,
    624                0xcc, 0xdc, 0xb2, 0x81, 0xd4, 0x8c, 0x7c, 0x6f,
    625                0xd6, 0x28, 0x75, 0xd2, 0xac, 0xa4, 0x17, 0x03,
    626                0x4c, 0x34, 0xae, 0xe5 },
    627              { 0x00 },
    628              { 0x98, 0xe7, 0x24, 0x7c, 0x07, 0xf0, 0xfe, 0x41,
    629                0x1c, 0x26, 0x7e, 0x43, 0x84, 0xb0, 0xf6, 0x00 },
    630              { 0x39, 0x80, 0xca, 0x0b, 0x3c, 0x00, 0xe8, 0x41,
    631                0xeb, 0x06, 0xfa, 0xc4, 0x87, 0x2a, 0x27, 0x57,
    632                0x85, 0x9e, 0x1c, 0xea, 0xa6, 0xef, 0xd9, 0x84,
    633                0x62, 0x85, 0x93, 0xb4, 0x0c, 0xa1, 0xe1, 0x9c,
    634                0x7d, 0x77, 0x3d, 0x00, 0xc1, 0x44, 0xc5, 0x25,
    635                0xac, 0x61, 0x9d, 0x18, 0xc8, 0x4a, 0x3f, 0x47,
    636                0x18, 0xe2, 0x44, 0x8b, 0x2f, 0xe3, 0x24, 0xd9,
    637                0xcc, 0xda, 0x27, 0x10, 0xac, 0xad, 0xe2, 0x56 },
    638              { 0x39, 0x80, 0xca, 0x0b, 0x3c, 0x00, 0xe8, 0x41,
    639                0xeb, 0x06, 0xfa, 0xc4, 0x87, 0x2a, 0x27, 0x57,
    640                0x85, 0x9e, 0x1c, 0xea, 0xa6, 0xef, 0xd9, 0x84,
    641                0x62, 0x85, 0x93, 0xb4, 0x0c, 0xa1, 0xe1, 0x9c,
    642                0x7d, 0x77, 0x3d, 0x00, 0xc1, 0x44, 0xc5, 0x25,
    643                0xac, 0x61, 0x9d, 0x18, 0xc8, 0x4a, 0x3f, 0x47,
    644                0x18, 0xe2, 0x44, 0x8b, 0x2f, 0xe3, 0x24, 0xd9,
    645                0xcc, 0xda, 0x27, 0x10 },
    646              { 0x0f, 0x10, 0xf5, 0x99, 0xae, 0x14, 0xa1, 0x54,
    647                0xed, 0x24, 0xb3, 0x6e, 0x25, 0x32, 0x4d, 0xb8,
    648                0xc5, 0x66, 0x63, 0x2e, 0xf2, 0xbb, 0xb3, 0x4f,
    649                0x83, 0x47, 0x28, 0x0f, 0xc4, 0x50, 0x70, 0x57,
    650                0xfd, 0xdc, 0x29, 0xdf, 0x9a, 0x47, 0x1f, 0x75,
    651                0xc6, 0x65, 0x41, 0xd4, 0xd4, 0xda, 0xd1, 0xc9,
    652                0xe9, 0x3a, 0x19, 0xa5, 0x8e, 0x8b, 0x47, 0x3f,
    653                0xa0, 0xf0, 0x62, 0xf7 },
    654              { 0xd2, 0x7e, 0x88, 0x68, 0x1c, 0xe3, 0x24, 0x3c,
    655                0x48, 0x30, 0x16, 0x5a, 0x8f, 0xdc, 0xf9, 0xff,
    656                0x1d, 0xe9, 0xa1, 0xd8, 0xe6, 0xb4, 0x47, 0xef,
    657                0x6e, 0xf7, 0xb7, 0x98, 0x28, 0x66, 0x6e, 0x45,
    658                0x81, 0xe7, 0x90, 0x12, 0xaf, 0x34, 0xdd, 0xd9,
    659                0xe2, 0xf0, 0x37, 0x58, 0x9b, 0x29, 0x2d, 0xb3,
    660                0xe6, 0x7c, 0x03, 0x67, 0x45, 0xfa, 0x22, 0xe7,
    661                0xe9, 0xb7, 0x37, 0x3b },
    662              { 0x00 },
    663              { 0xce, 0xa7, 0x40, 0x3d, 0x4d, 0x60, 0x6b, 0x6e,
    664                0x07, 0x4e, 0xc5, 0xd3, 0xba, 0xf3, 0x9d, 0x18 },
    665              { 0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07,
    666                0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84, 0x42, 0x7d,
    667                0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9,
    668                0x75, 0x98, 0xa2, 0xbd, 0x25, 0x55, 0xd1, 0xaa,
    669                0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d,
    670                0xa7, 0xb0, 0x8b, 0x10, 0x56, 0x82, 0x88, 0x38,
    671                0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a,
    672                0xbc, 0xc9, 0xf6, 0x62, 0x89, 0x80, 0x15, 0xad },
    673              { 0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07,
    674                0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84, 0x42, 0x7d,
    675                0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9,
    676                0x75, 0x98, 0xa2, 0xbd, 0x25, 0x55, 0xd1, 0xaa,
    677                0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d,
    678                0xa7, 0xb0, 0x8b, 0x10, 0x56, 0x82, 0x88, 0x38,
    679                0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a,
    680                0xbc, 0xc9, 0xf6, 0x62 },
    681              { 0xc3, 0x76, 0x2d, 0xf1, 0xca, 0x78, 0x7d, 0x32,
    682                0xae, 0x47, 0xc1, 0x3b, 0xf1, 0x98, 0x44, 0xcb,
    683                0xaf, 0x1a, 0xe1, 0x4d, 0x0b, 0x97, 0x6a, 0xfa,
    684                0xc5, 0x2f, 0xf7, 0xd7, 0x9b, 0xba, 0x9d, 0xe0,
    685                0xfe, 0xb5, 0x82, 0xd3, 0x39, 0x34, 0xa4, 0xf0,
    686                0x95, 0x4c, 0xc2, 0x36, 0x3b, 0xc7, 0x3f, 0x78,
    687                0x62, 0xac, 0x43, 0x0e, 0x64, 0xab, 0xe4, 0x99,
    688                0xf4, 0x7c, 0x9b, 0x1f },
    689              { 0x5a, 0x8d, 0xef, 0x2f, 0x0c, 0x9e, 0x53, 0xf1,
    690                0xf7, 0x5d, 0x78, 0x53, 0x65, 0x9e, 0x2a, 0x20,
    691                0xee, 0xb2, 0xb2, 0x2a, 0xaf, 0xde, 0x64, 0x19,
    692                0xa0, 0x58, 0xab, 0x4f, 0x6f, 0x74, 0x6b, 0xf4,
    693                0x0f, 0xc0, 0xc3, 0xb7, 0x80, 0xf2, 0x44, 0x45,
    694                0x2d, 0xa3, 0xeb, 0xf1, 0xc5, 0xd8, 0x2c, 0xde,
    695                0xa2, 0x41, 0x89, 0x97, 0x20, 0x0e, 0xf8, 0x2e,
    696                0x44, 0xae, 0x7e, 0x3f },
    697          };
    698          

   \                                 In section .rodata, align 4, keep-with-next
    699          static const unsigned char tag[MAX_TESTS * 3][16] =
   \                     tag:
   \   00000000   0x58 0xE2          DC8 88, 226, 252, 206, 250, 126, 48, 97, 54, 127, 29, 87, 164, 231, 69
   \              0xFC 0xCE    
   \              0xFA 0x7E    
   \              0x30 0x61    
   \              0x36 0x7F    
   \              0x1D 0x57    
   \              0xA4 0xE7    
   \              0x45         
   \   0000000F   0x5A 0xAB          DC8 90, 171, 110, 71, 212, 44, 236, 19, 189, 245, 58, 103, 178, 18, 87
   \              0x6E 0x47    
   \              0xD4 0x2C    
   \              0xEC 0x13    
   \              0xBD 0xF5    
   \              0x3A 0x67    
   \              0xB2 0x12    
   \              0x57         
   \   0000001E   0xBD 0xDF          DC8 189, 223, 77, 92, 42, 243, 39, 205, 100, 166, 44, 243, 90, 189, 43
   \              0x4D 0x5C    
   \              0x2A 0xF3    
   \              0x27 0xCD    
   \              0x64 0xA6    
   \              0x2C 0xF3    
   \              0x5A 0xBD    
   \              0x2B         
   \   0000002D   0xA6 0xFA          DC8 166, 250, 180, 91, 201, 79, 188, 50, 33, 165, 219, 148, 250, 233
   \              0xB4 0x5B    
   \              0xC9 0x4F    
   \              0xBC 0x32    
   \              0x21 0xA5    
   \              0xDB 0x94    
   \              0xFA 0xE9    
   \   0000003B   0x5A 0xE7          DC8 90, 231, 18, 26, 71, 54, 18, 210, 231, 158, 59, 7, 133, 86, 27, 225
   \              0x12 0x1A    
   \              0x47 0x36    
   \              0x12 0xD2    
   \              0xE7 0x9E    
   \              0x3B 0x07    
   \              0x85 0x56    
   \              0x1B 0xE1    
   \   0000004B   0x4A 0xAC          DC8 74, 172, 162, 252, 203, 97, 156, 197, 174, 255, 254, 11, 250, 70
   \              0xA2 0xFC    
   \              0xCB 0x61    
   \              0x9C 0xC5    
   \              0xAE 0xFF    
   \              0xFE 0x0B    
   \              0xFA 0x46    
   \   00000059   0x2A 0xF4          DC8 42, 244, 60, 22, 153, 208, 80, 205, 51, 178, 138, 199, 115, 247, 75
   \              0x3C 0x16    
   \              0x99 0xD0    
   \              0x50 0xCD    
   \              0x33 0xB2    
   \              0x8A 0xC7    
   \              0x73 0xF7    
   \              0x4B         
   \   00000068   0xA0 0x0E          DC8 160, 14, 209, 243, 18, 87, 36, 53, 47, 245, 141, 128, 3, 57, 39
   \              0xD1 0xF3    
   \              0x12 0x57    
   \              0x24 0x35    
   \              0x2F 0xF5    
   \              0x8D 0x80    
   \              0x03 0x39    
   \              0x27         
   \   00000077   0xAB 0x8E          DC8 171, 142, 244, 212, 88, 117, 20, 240, 251, 153, 36, 167, 200, 88
   \              0xF4 0xD4    
   \              0x58 0x75    
   \              0x14 0xF0    
   \              0xFB 0x99    
   \              0x24 0xA7    
   \              0xC8 0x58    
   \   00000085   0x73 0x36          DC8 115, 54, 191, 177, 24, 2, 77, 184, 103, 74, 20, 37, 25, 73, 142
   \              0xBF 0xB1    
   \              0x18 0x02    
   \              0x4D 0xB8    
   \              0x67 0x4A    
   \              0x14 0x25    
   \              0x19 0x49    
   \              0x8E         
   \   00000094   0x80 0xF1          DC8 128, 241, 71, 143, 55, 186, 85, 189, 109, 39, 97, 140, 101, 220
   \              0x47 0x8F    
   \              0x37 0xBA    
   \              0x55 0xBD    
   \              0x6D 0x27    
   \              0x61 0x8C    
   \              0x65 0xDC    
   \   000000A2   0xC5 0x7F          DC8 197, 127, 207, 98, 58, 36, 9, 79, 204, 164, 13, 53, 51, 248, 220
   \              0xCF 0x62    
   \              0x3A 0x24    
   \              0x09 0x4F    
   \              0xCC 0xA4    
   \              0x0D 0x35    
   \              0x33 0xF8    
   \              0xDC         
   \   000000B1   0xF5 0x66          DC8 245, 102, 255, 41, 28, 37, 187, 184, 86, 143, 195, 211, 118, 166
   \              0xFF 0x29    
   \              0x1C 0x25    
   \              0xBB 0xB8    
   \              0x56 0x8F    
   \              0xC3 0xD3    
   \              0x76 0xA6    
   \   000000BF   0xD9 0x53          DC8 217, 83, 15, 138, 251, 199, 69, 54, 185, 169, 99, 180, 241, 196
   \              0x0F 0x8A    
   \              0xFB 0xC7    
   \              0x45 0x36    
   \              0xB9 0xA9    
   \              0x63 0xB4    
   \              0xF1 0xC4    
   \   000000CD   0xCB 0x73          DC8 203, 115, 139, 208, 209, 200, 167, 153, 153, 107, 240, 38, 91, 152
   \              0x8B 0xD0    
   \              0xD1 0xC8    
   \              0xA7 0x99    
   \              0x99 0x6B    
   \              0xF0 0x26    
   \              0x5B 0x98    
   \   000000DB   0xB5 0xD4          DC8 181, 212, 138, 185, 25, 176, 148, 218, 197, 217, 52, 113, 189, 236
   \              0x8A 0xB9    
   \              0x19 0xB0    
   \              0x94 0xDA    
   \              0xC5 0xD9    
   \              0x34 0x71    
   \              0xBD 0xEC    
   \   000000E9   0x1A 0x50          DC8 26, 80, 34, 112, 227, 204, 108, 118, 252, 110, 206, 15, 78, 23, 104
   \              0x22 0x70    
   \              0xE3 0xCC    
   \              0x6C 0x76    
   \              0xFC 0x6E    
   \              0xCE 0x0F    
   \              0x4E 0x17    
   \              0x68         
   \   000000F8   0xCD 0xDF          DC8 205, 223, 136, 83, 187, 45, 85, 27, 58, 51, 125, 191, 70, 167, 146
   \              0x88 0x53    
   \              0xBB 0x2D    
   \              0x55 0x1B    
   \              0x3A 0x33    
   \              0x7D 0xBF    
   \              0x46 0xA7    
   \              0x92         
   \   00000107   0xC4 0x5E          DC8 196, 94, 69, 73, 19, 254, 46, 168, 242, 164, 74, 130, 102, 238, 28
   \              0x45 0x49    
   \              0x13 0xFE    
   \              0x2E 0xA8    
   \              0xF2 0xA4    
   \              0x4A 0x82    
   \              0x66 0xEE    
   \              0x1C         
   \   00000116   0x8E 0xB0          DC8 142, 176, 200, 181, 212, 207, 90, 233, 241, 154
   \              0xC8 0xB5    
   \              0xD4 0xCF    
   \              0x5A 0xE9    
   \              0xF1 0x9A    
    700          {
    701              { 0x58, 0xe2, 0xfc, 0xce, 0xfa, 0x7e, 0x30, 0x61,
    702                0x36, 0x7f, 0x1d, 0x57, 0xa4, 0xe7, 0x45, 0x5a },
    703              { 0xab, 0x6e, 0x47, 0xd4, 0x2c, 0xec, 0x13, 0xbd,
    704                0xf5, 0x3a, 0x67, 0xb2, 0x12, 0x57, 0xbd, 0xdf },
    705              { 0x4d, 0x5c, 0x2a, 0xf3, 0x27, 0xcd, 0x64, 0xa6,
    706                0x2c, 0xf3, 0x5a, 0xbd, 0x2b, 0xa6, 0xfa, 0xb4 },
    707              { 0x5b, 0xc9, 0x4f, 0xbc, 0x32, 0x21, 0xa5, 0xdb,
    708                0x94, 0xfa, 0xe9, 0x5a, 0xe7, 0x12, 0x1a, 0x47 },
    709              { 0x36, 0x12, 0xd2, 0xe7, 0x9e, 0x3b, 0x07, 0x85,
    710                0x56, 0x1b, 0xe1, 0x4a, 0xac, 0xa2, 0xfc, 0xcb },
    711              { 0x61, 0x9c, 0xc5, 0xae, 0xff, 0xfe, 0x0b, 0xfa,
    712                0x46, 0x2a, 0xf4, 0x3c, 0x16, 0x99, 0xd0, 0x50 },
    713              { 0xcd, 0x33, 0xb2, 0x8a, 0xc7, 0x73, 0xf7, 0x4b,
    714                0xa0, 0x0e, 0xd1, 0xf3, 0x12, 0x57, 0x24, 0x35 },
    715              { 0x2f, 0xf5, 0x8d, 0x80, 0x03, 0x39, 0x27, 0xab,
    716                0x8e, 0xf4, 0xd4, 0x58, 0x75, 0x14, 0xf0, 0xfb },
    717              { 0x99, 0x24, 0xa7, 0xc8, 0x58, 0x73, 0x36, 0xbf,
    718                0xb1, 0x18, 0x02, 0x4d, 0xb8, 0x67, 0x4a, 0x14 },
    719              { 0x25, 0x19, 0x49, 0x8e, 0x80, 0xf1, 0x47, 0x8f,
    720                0x37, 0xba, 0x55, 0xbd, 0x6d, 0x27, 0x61, 0x8c },
    721              { 0x65, 0xdc, 0xc5, 0x7f, 0xcf, 0x62, 0x3a, 0x24,
    722                0x09, 0x4f, 0xcc, 0xa4, 0x0d, 0x35, 0x33, 0xf8 },
    723              { 0xdc, 0xf5, 0x66, 0xff, 0x29, 0x1c, 0x25, 0xbb,
    724                0xb8, 0x56, 0x8f, 0xc3, 0xd3, 0x76, 0xa6, 0xd9 },
    725              { 0x53, 0x0f, 0x8a, 0xfb, 0xc7, 0x45, 0x36, 0xb9,
    726                0xa9, 0x63, 0xb4, 0xf1, 0xc4, 0xcb, 0x73, 0x8b },
    727              { 0xd0, 0xd1, 0xc8, 0xa7, 0x99, 0x99, 0x6b, 0xf0,
    728                0x26, 0x5b, 0x98, 0xb5, 0xd4, 0x8a, 0xb9, 0x19 },
    729              { 0xb0, 0x94, 0xda, 0xc5, 0xd9, 0x34, 0x71, 0xbd,
    730                0xec, 0x1a, 0x50, 0x22, 0x70, 0xe3, 0xcc, 0x6c },
    731              { 0x76, 0xfc, 0x6e, 0xce, 0x0f, 0x4e, 0x17, 0x68,
    732                0xcd, 0xdf, 0x88, 0x53, 0xbb, 0x2d, 0x55, 0x1b },
    733              { 0x3a, 0x33, 0x7d, 0xbf, 0x46, 0xa7, 0x92, 0xc4,
    734                0x5e, 0x45, 0x49, 0x13, 0xfe, 0x2e, 0xa8, 0xf2 },
    735              { 0xa4, 0x4a, 0x82, 0x66, 0xee, 0x1c, 0x8e, 0xb0,
    736                0xc8, 0xb5, 0xd4, 0xcf, 0x5a, 0xe9, 0xf1, 0x9a },
    737          };
    738          

   \                                 In section .text, align 4, keep-with-next
    739          int mbedtls_gcm_self_test( int verbose )
    740          {
   \                     mbedtls_gcm_self_test: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB0FF             SUB      SP,SP,#+508
   \   00000004   0xB08D             SUB      SP,SP,#+52
   \   00000006   0x21C4             MOVS     R1,#+196
   \   00000008   0x0049             LSLS     R1,R1,#+1        ;; #+392
   \   0000000A   0xA82A             ADD      R0,SP,#+168
   \   0000000C   0x.... 0x....      BL       __aeabi_memclr4
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x9014             STR      R0,[SP, #+80]
   \   00000014   0x2080             MOVS     R0,#+128
   \   00000016   0x9008             STR      R0,[SP, #+32]
   \   00000018   0x4887             LDR      R0,??mbedtls_gcm_self_test_0
   \   0000001A   0x9013             STR      R0,[SP, #+76]
   \   0000001C   0x4887             LDR      R0,??mbedtls_gcm_self_test_0+0x4
   \   0000001E   0x9012             STR      R0,[SP, #+72]
    741              mbedtls_gcm_context ctx;
    742              unsigned char buf[64];
    743              unsigned char tag_buf[16];
    744              int i, j, ret;
    745              mbedtls_cipher_id_t cipher = MBEDTLS_CIPHER_ID_AES;
    746          
    747              mbedtls_gcm_init( &ctx );
    748          
    749              for( j = 0; j < 3; j++ )
    750              {
    751                  int key_len = 128 + 64 * j;
    752          
    753                  for( i = 0; i < MAX_TESTS; i++ )
   \                     ??mbedtls_gcm_self_test_1: (+1)
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x900B             STR      R0,[SP, #+44]
   \   00000024   0x4886             LDR      R0,??mbedtls_gcm_self_test_0+0x8
   \   00000026   0x9011             STR      R0,[SP, #+68]
   \   00000028   0x4886             LDR      R0,??mbedtls_gcm_self_test_0+0xC
   \   0000002A   0x900A             STR      R0,[SP, #+40]
   \   0000002C   0x4886             LDR      R0,??mbedtls_gcm_self_test_0+0x10
   \   0000002E   0x9010             STR      R0,[SP, #+64]
   \   00000030   0x4886             LDR      R0,??mbedtls_gcm_self_test_0+0x14
   \   00000032   0x900F             STR      R0,[SP, #+60]
   \   00000034   0x4886             LDR      R0,??mbedtls_gcm_self_test_0+0x18
   \   00000036   0x900E             STR      R0,[SP, #+56]
   \   00000038   0x4886             LDR      R0,??mbedtls_gcm_self_test_0+0x1C
   \   0000003A   0x900D             STR      R0,[SP, #+52]
   \   0000003C   0x4886             LDR      R0,??mbedtls_gcm_self_test_0+0x20
   \   0000003E   0x9007             STR      R0,[SP, #+28]
   \   00000040   0x9813             LDR      R0,[SP, #+76]
   \   00000042   0x900C             STR      R0,[SP, #+48]
   \   00000044   0x9812             LDR      R0,[SP, #+72]
   \   00000046   0x9009             STR      R0,[SP, #+36]
    754                  {
    755                      if( verbose != 0 )
   \                     ??mbedtls_gcm_self_test_2: (+1)
   \   00000048   0x988C             LDR      R0,[SP, #+560]
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD005             BEQ      ??mbedtls_gcm_self_test_3
    756                          mbedtls_printf( "  AES-GCM-%3d #%d (%s): ",
    757                                           key_len, i, "enc" );
   \   0000004E   0xA383             ADR      R3,??mbedtls_gcm_self_test_0+0x24  ;; "enc"
   \   00000050   0x9A0B             LDR      R2,[SP, #+44]
   \   00000052   0x9908             LDR      R1,[SP, #+32]
   \   00000054   0x4882             LDR      R0,??mbedtls_gcm_self_test_0+0x28
   \   00000056   0x.... 0x....      BL       printf
    758          
    759                      mbedtls_gcm_setkey( &ctx, cipher, key[key_index[i]], key_len );
   \                     ??mbedtls_gcm_self_test_3: (+1)
   \   0000005A   0x9B08             LDR      R3,[SP, #+32]
   \   0000005C   0x48A2             LDR      R0,??mbedtls_gcm_self_test_4
   \   0000005E   0x9911             LDR      R1,[SP, #+68]
   \   00000060   0x6809             LDR      R1,[R1, #+0]
   \   00000062   0x0149             LSLS     R1,R1,#+5
   \   00000064   0x1842             ADDS     R2,R0,R1
   \   00000066   0x2102             MOVS     R1,#+2
   \   00000068   0xA82A             ADD      R0,SP,#+168
   \   0000006A   0x.... 0x....      BL       mbedtls_gcm_setkey
    760          
    761                      ret = mbedtls_gcm_crypt_and_tag( &ctx, MBEDTLS_GCM_ENCRYPT,
    762                                               pt_len[i],
    763                                               iv[iv_index[i]], iv_len[i],
    764                                               additional[add_index[i]], add_len[i],
    765                                               pt[pt_index[i]], buf, 16, tag_buf );
    766          
    767                      if( ret != 0 ||
    768                          memcmp( buf, ct[j * 6 + i], pt_len[i] ) != 0 ||
    769                          memcmp( tag_buf, tag[j * 6 + i], 16 ) != 0 )
   \   0000006E   0xA815             ADD      R0,SP,#+84
   \   00000070   0x9006             STR      R0,[SP, #+24]
   \   00000072   0x2010             MOVS     R0,#+16
   \   00000074   0x9005             STR      R0,[SP, #+20]
   \   00000076   0xA819             ADD      R0,SP,#+100
   \   00000078   0x9004             STR      R0,[SP, #+16]
   \   0000007A   0x48DA             LDR      R0,??mbedtls_gcm_self_test_5
   \   0000007C   0x990A             LDR      R1,[SP, #+40]
   \   0000007E   0x6809             LDR      R1,[R1, #+0]
   \   00000080   0x0189             LSLS     R1,R1,#+6
   \   00000082   0x1840             ADDS     R0,R0,R1
   \   00000084   0x9003             STR      R0,[SP, #+12]
   \   00000086   0x9810             LDR      R0,[SP, #+64]
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0x9002             STR      R0,[SP, #+8]
   \   0000008C   0x48D6             LDR      R0,??mbedtls_gcm_self_test_5+0x4
   \   0000008E   0x990F             LDR      R1,[SP, #+60]
   \   00000090   0x6809             LDR      R1,[R1, #+0]
   \   00000092   0x0189             LSLS     R1,R1,#+6
   \   00000094   0x1840             ADDS     R0,R0,R1
   \   00000096   0x9001             STR      R0,[SP, #+4]
   \   00000098   0x980E             LDR      R0,[SP, #+56]
   \   0000009A   0x6800             LDR      R0,[R0, #+0]
   \   0000009C   0x9000             STR      R0,[SP, #+0]
   \   0000009E   0x48D3             LDR      R0,??mbedtls_gcm_self_test_5+0x8
   \   000000A0   0x990D             LDR      R1,[SP, #+52]
   \   000000A2   0x6809             LDR      R1,[R1, #+0]
   \   000000A4   0x0189             LSLS     R1,R1,#+6
   \   000000A6   0x1843             ADDS     R3,R0,R1
   \   000000A8   0x9807             LDR      R0,[SP, #+28]
   \   000000AA   0x6802             LDR      R2,[R0, #+0]
   \   000000AC   0x2101             MOVS     R1,#+1
   \   000000AE   0xA82A             ADD      R0,SP,#+168
   \   000000B0   0x.... 0x....      BL       mbedtls_gcm_crypt_and_tag
   \   000000B4   0x2800             CMP      R0,#+0
   \   000000B6   0xD000             BEQ      .+4
   \   000000B8   0xE299             B        ??mbedtls_gcm_self_test_6
   \   000000BA   0x9807             LDR      R0,[SP, #+28]
   \   000000BC   0x6802             LDR      R2,[R0, #+0]
   \   000000BE   0x9909             LDR      R1,[SP, #+36]
   \   000000C0   0xA819             ADD      R0,SP,#+100
   \   000000C2   0x.... 0x....      BL       memcmp
   \   000000C6   0x2800             CMP      R0,#+0
   \   000000C8   0xD000             BEQ      .+4
   \   000000CA   0xE290             B        ??mbedtls_gcm_self_test_6
   \   000000CC   0x2210             MOVS     R2,#+16
   \   000000CE   0x990C             LDR      R1,[SP, #+48]
   \   000000D0   0xA815             ADD      R0,SP,#+84
   \   000000D2   0x.... 0x....      BL       memcmp
   \   000000D6   0x2800             CMP      R0,#+0
   \   000000D8   0xD000             BEQ      .+4
   \   000000DA   0xE288             B        ??mbedtls_gcm_self_test_6
    770                      {
    771                          if( verbose != 0 )
    772                              mbedtls_printf( "failed\n" );
    773          
    774                          return( 1 );
    775                      }
    776          
    777                      mbedtls_gcm_free( &ctx );
   \   000000DC   0xA82A             ADD      R0,SP,#+168
   \   000000DE   0x.... 0x....      BL       mbedtls_cipher_free
   \   000000E2   0x21C4             MOVS     R1,#+196
   \   000000E4   0x0049             LSLS     R1,R1,#+1        ;; #+392
   \   000000E6   0xA82A             ADD      R0,SP,#+168
   \   000000E8   0x.... 0x....      BL       mbedtls_zeroize
    778          
    779                      if( verbose != 0 )
   \   000000EC   0x988C             LDR      R0,[SP, #+560]
   \   000000EE   0x2800             CMP      R0,#+0
   \   000000F0   0xD008             BEQ      ??mbedtls_gcm_self_test_7
    780                          mbedtls_printf( "passed\n" );
   \   000000F2   0x48BF             LDR      R0,??mbedtls_gcm_self_test_5+0xC
   \   000000F4   0x.... 0x....      BL       printf
    781          
    782                      if( verbose != 0 )
    783                          mbedtls_printf( "  AES-GCM-%3d #%d (%s): ",
    784                                           key_len, i, "dec" );
   \   000000F8   0xA3BE             ADR      R3,??mbedtls_gcm_self_test_5+0x10  ;; "dec"
   \   000000FA   0x9A0B             LDR      R2,[SP, #+44]
   \   000000FC   0x9908             LDR      R1,[SP, #+32]
   \   000000FE   0x4858             LDR      R0,??mbedtls_gcm_self_test_0+0x28
   \   00000100   0x.... 0x....      BL       printf
    785          
    786                      mbedtls_gcm_setkey( &ctx, cipher, key[key_index[i]], key_len );
   \                     ??mbedtls_gcm_self_test_7: (+1)
   \   00000104   0x9B08             LDR      R3,[SP, #+32]
   \   00000106   0x4878             LDR      R0,??mbedtls_gcm_self_test_4
   \   00000108   0x9911             LDR      R1,[SP, #+68]
   \   0000010A   0x6809             LDR      R1,[R1, #+0]
   \   0000010C   0x0149             LSLS     R1,R1,#+5
   \   0000010E   0x1842             ADDS     R2,R0,R1
   \   00000110   0x2102             MOVS     R1,#+2
   \   00000112   0xA82A             ADD      R0,SP,#+168
   \   00000114   0x.... 0x....      BL       mbedtls_gcm_setkey
    787          
    788                      ret = mbedtls_gcm_crypt_and_tag( &ctx, MBEDTLS_GCM_DECRYPT,
    789                                               pt_len[i],
    790                                               iv[iv_index[i]], iv_len[i],
    791                                               additional[add_index[i]], add_len[i],
    792                                               ct[j * 6 + i], buf, 16, tag_buf );
    793          
    794                      if( ret != 0 ||
    795                          memcmp( buf, pt[pt_index[i]], pt_len[i] ) != 0 ||
    796                          memcmp( tag_buf, tag[j * 6 + i], 16 ) != 0 )
   \   00000118   0xA815             ADD      R0,SP,#+84
   \   0000011A   0x9006             STR      R0,[SP, #+24]
   \   0000011C   0x2010             MOVS     R0,#+16
   \   0000011E   0x9005             STR      R0,[SP, #+20]
   \   00000120   0xA819             ADD      R0,SP,#+100
   \   00000122   0x9004             STR      R0,[SP, #+16]
   \   00000124   0x9809             LDR      R0,[SP, #+36]
   \   00000126   0x9003             STR      R0,[SP, #+12]
   \   00000128   0x9810             LDR      R0,[SP, #+64]
   \   0000012A   0x6800             LDR      R0,[R0, #+0]
   \   0000012C   0x9002             STR      R0,[SP, #+8]
   \   0000012E   0x48AE             LDR      R0,??mbedtls_gcm_self_test_5+0x4
   \   00000130   0x990F             LDR      R1,[SP, #+60]
   \   00000132   0x6809             LDR      R1,[R1, #+0]
   \   00000134   0x0189             LSLS     R1,R1,#+6
   \   00000136   0x1840             ADDS     R0,R0,R1
   \   00000138   0x9001             STR      R0,[SP, #+4]
   \   0000013A   0x980E             LDR      R0,[SP, #+56]
   \   0000013C   0x6800             LDR      R0,[R0, #+0]
   \   0000013E   0x9000             STR      R0,[SP, #+0]
   \   00000140   0x48AA             LDR      R0,??mbedtls_gcm_self_test_5+0x8
   \   00000142   0x990D             LDR      R1,[SP, #+52]
   \   00000144   0x6809             LDR      R1,[R1, #+0]
   \   00000146   0x0189             LSLS     R1,R1,#+6
   \   00000148   0x1843             ADDS     R3,R0,R1
   \   0000014A   0x9807             LDR      R0,[SP, #+28]
   \   0000014C   0x6802             LDR      R2,[R0, #+0]
   \   0000014E   0x2100             MOVS     R1,#+0
   \   00000150   0xA82A             ADD      R0,SP,#+168
   \   00000152   0x.... 0x....      BL       mbedtls_gcm_crypt_and_tag
   \   00000156   0x2800             CMP      R0,#+0
   \   00000158   0xD000             BEQ      .+4
   \   0000015A   0xE248             B        ??mbedtls_gcm_self_test_6
   \   0000015C   0x9807             LDR      R0,[SP, #+28]
   \   0000015E   0x6802             LDR      R2,[R0, #+0]
   \   00000160   0x48A0             LDR      R0,??mbedtls_gcm_self_test_5
   \   00000162   0x990A             LDR      R1,[SP, #+40]
   \   00000164   0x6809             LDR      R1,[R1, #+0]
   \   00000166   0x0189             LSLS     R1,R1,#+6
   \   00000168   0x1841             ADDS     R1,R0,R1
   \   0000016A   0xA819             ADD      R0,SP,#+100
   \   0000016C   0x.... 0x....      BL       memcmp
   \   00000170   0x2800             CMP      R0,#+0
   \   00000172   0xD000             BEQ      .+4
   \   00000174   0xE23B             B        ??mbedtls_gcm_self_test_6
   \   00000176   0x2210             MOVS     R2,#+16
   \   00000178   0x990C             LDR      R1,[SP, #+48]
   \   0000017A   0xA815             ADD      R0,SP,#+84
   \   0000017C   0x.... 0x....      BL       memcmp
   \   00000180   0x2800             CMP      R0,#+0
   \   00000182   0xD000             BEQ      .+4
   \   00000184   0xE233             B        ??mbedtls_gcm_self_test_6
    797                      {
    798                          if( verbose != 0 )
    799                              mbedtls_printf( "failed\n" );
    800          
    801                          return( 1 );
    802                      }
    803          
    804                      mbedtls_gcm_free( &ctx );
   \   00000186   0xA82A             ADD      R0,SP,#+168
   \   00000188   0x.... 0x....      BL       mbedtls_cipher_free
   \   0000018C   0x21C4             MOVS     R1,#+196
   \   0000018E   0x0049             LSLS     R1,R1,#+1        ;; #+392
   \   00000190   0xA82A             ADD      R0,SP,#+168
   \   00000192   0x.... 0x....      BL       mbedtls_zeroize
    805          
    806                      if( verbose != 0 )
   \   00000196   0x988C             LDR      R0,[SP, #+560]
   \   00000198   0x2800             CMP      R0,#+0
   \   0000019A   0xD008             BEQ      ??mbedtls_gcm_self_test_8
    807                          mbedtls_printf( "passed\n" );
   \   0000019C   0x4894             LDR      R0,??mbedtls_gcm_self_test_5+0xC
   \   0000019E   0x.... 0x....      BL       printf
    808          
    809                      if( verbose != 0 )
    810                          mbedtls_printf( "  AES-GCM-%3d #%d split (%s): ",
    811                                           key_len, i, "enc" );
   \   000001A2   0xA32E             ADR      R3,??mbedtls_gcm_self_test_0+0x24  ;; "enc"
   \   000001A4   0x9A0B             LDR      R2,[SP, #+44]
   \   000001A6   0x9908             LDR      R1,[SP, #+32]
   \   000001A8   0x4893             LDR      R0,??mbedtls_gcm_self_test_5+0x14
   \   000001AA   0x.... 0x....      BL       printf
    812          
    813                      mbedtls_gcm_setkey( &ctx, cipher, key[key_index[i]], key_len );
   \                     ??mbedtls_gcm_self_test_8: (+1)
   \   000001AE   0x9B08             LDR      R3,[SP, #+32]
   \   000001B0   0x484D             LDR      R0,??mbedtls_gcm_self_test_4
   \   000001B2   0x9911             LDR      R1,[SP, #+68]
   \   000001B4   0x6809             LDR      R1,[R1, #+0]
   \   000001B6   0x0149             LSLS     R1,R1,#+5
   \   000001B8   0x1842             ADDS     R2,R0,R1
   \   000001BA   0x2102             MOVS     R1,#+2
   \   000001BC   0xA82A             ADD      R0,SP,#+168
   \   000001BE   0x.... 0x....      BL       mbedtls_gcm_setkey
    814          
    815                      ret = mbedtls_gcm_starts( &ctx, MBEDTLS_GCM_ENCRYPT,
    816                                        iv[iv_index[i]], iv_len[i],
    817                                        additional[add_index[i]], add_len[i] );
    818                      if( ret != 0 )
   \   000001C2   0x9810             LDR      R0,[SP, #+64]
   \   000001C4   0x6800             LDR      R0,[R0, #+0]
   \   000001C6   0x9001             STR      R0,[SP, #+4]
   \   000001C8   0x4887             LDR      R0,??mbedtls_gcm_self_test_5+0x4
   \   000001CA   0x990F             LDR      R1,[SP, #+60]
   \   000001CC   0x6809             LDR      R1,[R1, #+0]
   \   000001CE   0x0189             LSLS     R1,R1,#+6
   \   000001D0   0x1840             ADDS     R0,R0,R1
   \   000001D2   0x9000             STR      R0,[SP, #+0]
   \   000001D4   0x980E             LDR      R0,[SP, #+56]
   \   000001D6   0x6803             LDR      R3,[R0, #+0]
   \   000001D8   0x4884             LDR      R0,??mbedtls_gcm_self_test_5+0x8
   \   000001DA   0x990D             LDR      R1,[SP, #+52]
   \   000001DC   0x6809             LDR      R1,[R1, #+0]
   \   000001DE   0x0189             LSLS     R1,R1,#+6
   \   000001E0   0x1842             ADDS     R2,R0,R1
   \   000001E2   0x2101             MOVS     R1,#+1
   \   000001E4   0xA82A             ADD      R0,SP,#+168
   \   000001E6   0x.... 0x....      BL       mbedtls_gcm_starts
   \   000001EA   0x2800             CMP      R0,#+0
   \   000001EC   0xD000             BEQ      .+4
   \   000001EE   0xE1FE             B        ??mbedtls_gcm_self_test_6
    819                      {
    820                          if( verbose != 0 )
    821                              mbedtls_printf( "failed\n" );
    822          
    823                          return( 1 );
    824                      }
    825          
    826                      if( pt_len[i] > 32 )
   \   000001F0   0x487C             LDR      R0,??mbedtls_gcm_self_test_5
   \   000001F2   0x990A             LDR      R1,[SP, #+40]
   \   000001F4   0x6809             LDR      R1,[R1, #+0]
   \   000001F6   0x0189             LSLS     R1,R1,#+6
   \   000001F8   0x1842             ADDS     R2,R0,R1
   \   000001FA   0x9807             LDR      R0,[SP, #+28]
   \   000001FC   0x6801             LDR      R1,[R0, #+0]
   \   000001FE   0x2921             CMP      R1,#+33
   \   00000200   0xAB19             ADD      R3,SP,#+100
   \   00000202   0xD32F             BCC      ??mbedtls_gcm_self_test_9
    827                      {
    828                          size_t rest_len = pt_len[i] - 32;
    829                          ret = mbedtls_gcm_update( &ctx, 32, pt[pt_index[i]], buf );
    830                          if( ret != 0 )
   \   00000204   0x2120             MOVS     R1,#+32
   \   00000206   0xA82A             ADD      R0,SP,#+168
   \   00000208   0x.... 0x....      BL       mbedtls_gcm_update
   \   0000020C   0x2800             CMP      R0,#+0
   \   0000020E   0xD000             BEQ      .+4
   \   00000210   0xE1ED             B        ??mbedtls_gcm_self_test_6
    831                          {
    832                              if( verbose != 0 )
    833                                  mbedtls_printf( "failed\n" );
    834          
    835                              return( 1 );
    836                          }
    837          
    838                          ret = mbedtls_gcm_update( &ctx, rest_len, pt[pt_index[i]] + 32,
    839                                            buf + 32 );
    840                          if( ret != 0 )
   \   00000212   0xA819             ADD      R0,SP,#+100
   \   00000214   0x0003             MOVS     R3,R0
   \   00000216   0x3320             ADDS     R3,R3,#+32
   \   00000218   0x4872             LDR      R0,??mbedtls_gcm_self_test_5
   \   0000021A   0x990A             LDR      R1,[SP, #+40]
   \   0000021C   0x6809             LDR      R1,[R1, #+0]
   \   0000021E   0x0189             LSLS     R1,R1,#+6
   \   00000220   0x1842             ADDS     R2,R0,R1
   \   00000222   0x3220             ADDS     R2,R2,#+32
   \   00000224   0x9807             LDR      R0,[SP, #+28]
   \   00000226   0x6801             LDR      R1,[R0, #+0]
   \   00000228   0x3920             SUBS     R1,R1,#+32
   \   0000022A   0xA82A             ADD      R0,SP,#+168
   \   0000022C   0x.... 0x....      BL       mbedtls_gcm_update
   \   00000230   0x2800             CMP      R0,#+0
   \   00000232   0xD01D             BEQ      ??mbedtls_gcm_self_test_10
    841                          {
    842                              if( verbose != 0 )
   \   00000234   0xE1DB             B        ??mbedtls_gcm_self_test_6
   \   00000236   0xBF00             Nop      
   \                     ??mbedtls_gcm_self_test_0:
   \   00000238   0x........         DC32     tag
   \   0000023C   0x........         DC32     ct
   \   00000240   0x........         DC32     key_index
   \   00000244   0x........         DC32     pt_index
   \   00000248   0x........         DC32     add_len
   \   0000024C   0x........         DC32     add_index
   \   00000250   0x........         DC32     iv_len
   \   00000254   0x........         DC32     iv_index
   \   00000258   0x........         DC32     pt_len
   \   0000025C   0x65 0x6E          DC8      "enc"
   \              0x63 0x00    
   \   00000260   0x........         DC32     ?_0
    843                                  mbedtls_printf( "failed\n" );
    844          
    845                              return( 1 );
    846                          }
    847                      }
    848                      else
    849                      {
    850                          ret = mbedtls_gcm_update( &ctx, pt_len[i], pt[pt_index[i]], buf );
    851                          if( ret != 0 )
   \                     ??mbedtls_gcm_self_test_9: (+1)
   \   00000264   0xA82A             ADD      R0,SP,#+168
   \   00000266   0x.... 0x....      BL       mbedtls_gcm_update
   \   0000026A   0x2800             CMP      R0,#+0
   \   0000026C   0xD000             BEQ      .+4
   \   0000026E   0xE1BE             B        ??mbedtls_gcm_self_test_6
    852                          {
    853                              if( verbose != 0 )
    854                                  mbedtls_printf( "failed\n" );
    855          
    856                              return( 1 );
    857                          }
    858                      }
    859          
    860                      ret = mbedtls_gcm_finish( &ctx, tag_buf, 16 );
    861                      if( ret != 0 ||
    862                          memcmp( buf, ct[j * 6 + i], pt_len[i] ) != 0 ||
    863                          memcmp( tag_buf, tag[j * 6 + i], 16 ) != 0 )
   \                     ??mbedtls_gcm_self_test_10: (+1)
   \   00000270   0x2210             MOVS     R2,#+16
   \   00000272   0xA915             ADD      R1,SP,#+84
   \   00000274   0xA82A             ADD      R0,SP,#+168
   \   00000276   0x.... 0x....      BL       mbedtls_gcm_finish
   \   0000027A   0x2800             CMP      R0,#+0
   \   0000027C   0xD000             BEQ      .+4
   \   0000027E   0xE1B6             B        ??mbedtls_gcm_self_test_6
   \   00000280   0x9807             LDR      R0,[SP, #+28]
   \   00000282   0x6802             LDR      R2,[R0, #+0]
   \   00000284   0x9909             LDR      R1,[SP, #+36]
   \   00000286   0xA819             ADD      R0,SP,#+100
   \   00000288   0x.... 0x....      BL       memcmp
   \   0000028C   0x2800             CMP      R0,#+0
   \   0000028E   0xD000             BEQ      .+4
   \   00000290   0xE1AD             B        ??mbedtls_gcm_self_test_6
   \   00000292   0x2210             MOVS     R2,#+16
   \   00000294   0x990C             LDR      R1,[SP, #+48]
   \   00000296   0xA815             ADD      R0,SP,#+84
   \   00000298   0x.... 0x....      BL       memcmp
   \   0000029C   0x2800             CMP      R0,#+0
   \   0000029E   0xD000             BEQ      .+4
   \   000002A0   0xE1A5             B        ??mbedtls_gcm_self_test_6
    864                      {
    865                          if( verbose != 0 )
    866                              mbedtls_printf( "failed\n" );
    867          
    868                          return( 1 );
    869                      }
    870          
    871                      mbedtls_gcm_free( &ctx );
   \   000002A2   0xA82A             ADD      R0,SP,#+168
   \   000002A4   0x.... 0x....      BL       mbedtls_cipher_free
   \   000002A8   0x21C4             MOVS     R1,#+196
   \   000002AA   0x0049             LSLS     R1,R1,#+1        ;; #+392
   \   000002AC   0xA82A             ADD      R0,SP,#+168
   \   000002AE   0x.... 0x....      BL       mbedtls_zeroize
    872          
    873                      if( verbose != 0 )
   \   000002B2   0x988C             LDR      R0,[SP, #+560]
   \   000002B4   0x2800             CMP      R0,#+0
   \   000002B6   0xD008             BEQ      ??mbedtls_gcm_self_test_11
    874                          mbedtls_printf( "passed\n" );
   \   000002B8   0x484D             LDR      R0,??mbedtls_gcm_self_test_5+0xC
   \   000002BA   0x.... 0x....      BL       printf
    875          
    876                      if( verbose != 0 )
    877                          mbedtls_printf( "  AES-GCM-%3d #%d split (%s): ",
    878                                           key_len, i, "dec" );
   \   000002BE   0xA34D             ADR      R3,??mbedtls_gcm_self_test_5+0x10  ;; "dec"
   \   000002C0   0x9A0B             LDR      R2,[SP, #+44]
   \   000002C2   0x9908             LDR      R1,[SP, #+32]
   \   000002C4   0x484C             LDR      R0,??mbedtls_gcm_self_test_5+0x14
   \   000002C6   0x.... 0x....      BL       printf
    879          
    880                      mbedtls_gcm_setkey( &ctx, cipher, key[key_index[i]], key_len );
   \                     ??mbedtls_gcm_self_test_11: (+1)
   \   000002CA   0x9B08             LDR      R3,[SP, #+32]
   \   000002CC   0x4806             LDR      R0,??mbedtls_gcm_self_test_4
   \   000002CE   0x9911             LDR      R1,[SP, #+68]
   \   000002D0   0x6809             LDR      R1,[R1, #+0]
   \   000002D2   0x0149             LSLS     R1,R1,#+5
   \   000002D4   0x1842             ADDS     R2,R0,R1
   \   000002D6   0x2102             MOVS     R1,#+2
   \   000002D8   0xA82A             ADD      R0,SP,#+168
   \   000002DA   0x.... 0x....      BL       mbedtls_gcm_setkey
    881          
    882                      ret = mbedtls_gcm_starts( &ctx, MBEDTLS_GCM_DECRYPT,
    883                                        iv[iv_index[i]], iv_len[i],
    884                                        additional[add_index[i]], add_len[i] );
   \   000002DE   0x9810             LDR      R0,[SP, #+64]
   \   000002E0   0x6806             LDR      R6,[R0, #+0]
   \   000002E2   0x4841             LDR      R0,??mbedtls_gcm_self_test_5+0x4
   \   000002E4   0xE002             B.N      ??mbedtls_gcm_self_test_12
   \   000002E6   0xBF00             Nop      
   \                     ??mbedtls_gcm_self_test_4:
   \   000002E8   0x........         DC32     key
   \                     ??mbedtls_gcm_self_test_12: (+1)
   \   000002EC   0x990F             LDR      R1,[SP, #+60]
   \   000002EE   0x6809             LDR      R1,[R1, #+0]
   \   000002F0   0x0189             LSLS     R1,R1,#+6
   \   000002F2   0x1840             ADDS     R0,R0,R1
   \   000002F4   0x9002             STR      R0,[SP, #+8]
   \   000002F6   0x980E             LDR      R0,[SP, #+56]
   \   000002F8   0x6805             LDR      R5,[R0, #+0]
   \   000002FA   0x483C             LDR      R0,??mbedtls_gcm_self_test_5+0x8
   \   000002FC   0x990D             LDR      R1,[SP, #+52]
   \   000002FE   0x6809             LDR      R1,[R1, #+0]
   \   00000300   0x0189             LSLS     R1,R1,#+6
   \   00000302   0x1844             ADDS     R4,R0,R1
   \   00000304   0x2000             MOVS     R0,#+0
   \   00000306   0x9001             STR      R0,[SP, #+4]
   \   00000308   0x2D00             CMP      R5,#+0
   \   0000030A   0xD100             BNE      .+4
   \   0000030C   0xE16F             B        ??mbedtls_gcm_self_test_6
   \   0000030E   0xA82A             ADD      R0,SP,#+168
   \   00000310   0x21B0             MOVS     R1,#+176
   \   00000312   0x0049             LSLS     R1,R1,#+1        ;; #+352
   \   00000314   0x1840             ADDS     R0,R0,R1
   \   00000316   0x2100             MOVS     R1,#+0
   \   00000318   0x2200             MOVS     R2,#+0
   \   0000031A   0x2300             MOVS     R3,#+0
   \   0000031C   0x2700             MOVS     R7,#+0
   \   0000031E   0xC08E             STM      R0!,{R1-R3,R7}
   \   00000320   0xA82A             ADD      R0,SP,#+168
   \   00000322   0x21B8             MOVS     R1,#+184
   \   00000324   0x0049             LSLS     R1,R1,#+1        ;; #+368
   \   00000326   0x1840             ADDS     R0,R0,R1
   \   00000328   0x2100             MOVS     R1,#+0
   \   0000032A   0xC08E             STM      R0!,{R1-R3,R7}
   \   0000032C   0x2000             MOVS     R0,#+0
   \   0000032E   0x908A             STR      R0,[SP, #+552]
   \   00000330   0xAA2A             ADD      R2,SP,#+168
   \   00000332   0x23A0             MOVS     R3,#+160
   \   00000334   0x005B             LSLS     R3,R3,#+1        ;; #+320
   \   00000336   0x18D2             ADDS     R2,R2,R3
   \   00000338   0xC203             STM      R2!,{R0,R1}
   \   0000033A   0xAA2A             ADD      R2,SP,#+168
   \   0000033C   0x3308             ADDS     R3,R3,#+8
   \   0000033E   0x18D2             ADDS     R2,R2,R3
   \   00000340   0xC203             STM      R2!,{R0,R1}
   \   00000342   0x2D0C             CMP      R5,#+12
   \   00000344   0xD05A             BEQ      ??mbedtls_gcm_self_test_13
   \   00000346   0xA803             ADD      R0,SP,#+12
   \   00000348   0x2200             MOVS     R2,#+0
   \   0000034A   0x2300             MOVS     R3,#+0
   \   0000034C   0xC08E             STM      R0!,{R1-R3,R7}
   \   0000034E   0x0D68             LSRS     R0,R5,#+21
   \   00000350   0xA903             ADD      R1,SP,#+12
   \   00000352   0x7308             STRB     R0,[R1, #+12]
   \   00000354   0x0B68             LSRS     R0,R5,#+13
   \   00000356   0x7348             STRB     R0,[R1, #+13]
   \   00000358   0x0968             LSRS     R0,R5,#+5
   \   0000035A   0x7388             STRB     R0,[R1, #+14]
   \   0000035C   0x00E8             LSLS     R0,R5,#+3
   \   0000035E   0x73C8             STRB     R0,[R1, #+15]
   \                     ??mbedtls_gcm_self_test_14: (+1)
   \   00000360   0x2010             MOVS     R0,#+16
   \   00000362   0x2D10             CMP      R5,#+16
   \   00000364   0xD800             BHI      ??mbedtls_gcm_self_test_15
   \   00000366   0x0028             MOVS     R0,R5
   \                     ??mbedtls_gcm_self_test_15: (+1)
   \   00000368   0x9000             STR      R0,[SP, #+0]
   \   0000036A   0xA82A             ADD      R0,SP,#+168
   \   0000036C   0x21B0             MOVS     R1,#+176
   \   0000036E   0x0049             LSLS     R1,R1,#+1        ;; #+352
   \   00000370   0x1840             ADDS     R0,R0,R1
   \   00000372   0x0021             MOVS     R1,R4
   \   00000374   0x9A00             LDR      R2,[SP, #+0]
   \                     ??mbedtls_gcm_self_test_16: (+1)
   \   00000376   0x7803             LDRB     R3,[R0, #+0]
   \   00000378   0x780F             LDRB     R7,[R1, #+0]
   \   0000037A   0x405F             EORS     R7,R7,R3
   \   0000037C   0x7007             STRB     R7,[R0, #+0]
   \   0000037E   0x1C49             ADDS     R1,R1,#+1
   \   00000380   0x1C40             ADDS     R0,R0,#+1
   \   00000382   0x1E52             SUBS     R2,R2,#+1
   \   00000384   0xD1F7             BNE      ??mbedtls_gcm_self_test_16
   \   00000386   0xA82A             ADD      R0,SP,#+168
   \   00000388   0x21B0             MOVS     R1,#+176
   \   0000038A   0x0049             LSLS     R1,R1,#+1        ;; #+352
   \   0000038C   0x1842             ADDS     R2,R0,R1
   \   0000038E   0x1841             ADDS     R1,R0,R1
   \   00000390   0x.... 0x....      BL       gcm_mult
   \   00000394   0x9800             LDR      R0,[SP, #+0]
   \   00000396   0x1A2D             SUBS     R5,R5,R0
   \   00000398   0x1824             ADDS     R4,R4,R0
   \   0000039A   0x2D00             CMP      R5,#+0
   \   0000039C   0xD1E0             BNE      ??mbedtls_gcm_self_test_14
   \   0000039E   0xA82A             ADD      R0,SP,#+168
   \   000003A0   0x21B0             MOVS     R1,#+176
   \   000003A2   0x0049             LSLS     R1,R1,#+1        ;; #+352
   \   000003A4   0x1840             ADDS     R0,R0,R1
   \   000003A6   0xA903             ADD      R1,SP,#+12
   \   000003A8   0x2204             MOVS     R2,#+4
   \                     ??mbedtls_gcm_self_test_17: (+1)
   \   000003AA   0x7803             LDRB     R3,[R0, #+0]
   \   000003AC   0x780C             LDRB     R4,[R1, #+0]
   \   000003AE   0x405C             EORS     R4,R4,R3
   \   000003B0   0x7004             STRB     R4,[R0, #+0]
   \   000003B2   0x7843             LDRB     R3,[R0, #+1]
   \   000003B4   0x784C             LDRB     R4,[R1, #+1]
   \   000003B6   0x405C             EORS     R4,R4,R3
   \   000003B8   0x7044             STRB     R4,[R0, #+1]
   \   000003BA   0x7883             LDRB     R3,[R0, #+2]
   \   000003BC   0x788C             LDRB     R4,[R1, #+2]
   \   000003BE   0x405C             EORS     R4,R4,R3
   \   000003C0   0x7084             STRB     R4,[R0, #+2]
   \   000003C2   0x78C3             LDRB     R3,[R0, #+3]
   \   000003C4   0x78CC             LDRB     R4,[R1, #+3]
   \   000003C6   0x405C             EORS     R4,R4,R3
   \   000003C8   0x70C4             STRB     R4,[R0, #+3]
   \   000003CA   0x1D09             ADDS     R1,R1,#+4
   \   000003CC   0x1D00             ADDS     R0,R0,#+4
   \   000003CE   0x1E52             SUBS     R2,R2,#+1
   \   000003D0   0xD1EB             BNE      ??mbedtls_gcm_self_test_17
   \   000003D2   0xA82A             ADD      R0,SP,#+168
   \   000003D4   0x21B0             MOVS     R1,#+176
   \   000003D6   0x0049             LSLS     R1,R1,#+1        ;; #+352
   \   000003D8   0x1842             ADDS     R2,R0,R1
   \   000003DA   0x1841             ADDS     R1,R0,R1
   \   000003DC   0x.... 0x....      BL       gcm_mult
   \   000003E0   0xE018             B        ??mbedtls_gcm_self_test_18
   \   000003E2   0xBF00             Nop      
   \                     ??mbedtls_gcm_self_test_5:
   \   000003E4   0x........         DC32     pt
   \   000003E8   0x........         DC32     additional
   \   000003EC   0x........         DC32     iv
   \   000003F0   0x........         DC32     ?_3
   \   000003F4   0x64 0x65          DC8      "dec"
   \              0x63 0x00    
   \   000003F8   0x........         DC32     ?_5
   \                     ??mbedtls_gcm_self_test_13: (+1)
   \   000003FC   0x220C             MOVS     R2,#+12
   \   000003FE   0x0021             MOVS     R1,R4
   \   00000400   0xA82A             ADD      R0,SP,#+168
   \   00000402   0x3318             ADDS     R3,R3,#+24
   \   00000404   0x18C0             ADDS     R0,R0,R3
   \   00000406   0x.... 0x....      BL       __aeabi_memcpy
   \   0000040A   0x2001             MOVS     R0,#+1
   \   0000040C   0xA92A             ADD      R1,SP,#+168
   \   0000040E   0x22FF             MOVS     R2,#+255
   \   00000410   0x3270             ADDS     R2,R2,#+112      ;; #+367
   \   00000412   0x5488             STRB     R0,[R1, R2]
   \                     ??mbedtls_gcm_self_test_18: (+1)
   \   00000414   0xA801             ADD      R0,SP,#+4
   \   00000416   0x9000             STR      R0,[SP, #+0]
   \   00000418   0xA82A             ADD      R0,SP,#+168
   \   0000041A   0x21A8             MOVS     R1,#+168
   \   0000041C   0x0049             LSLS     R1,R1,#+1        ;; #+336
   \   0000041E   0x1843             ADDS     R3,R0,R1
   \   00000420   0x2210             MOVS     R2,#+16
   \   00000422   0x3110             ADDS     R1,R1,#+16
   \   00000424   0x1841             ADDS     R1,R0,R1
   \   00000426   0x.... 0x....      BL       mbedtls_cipher_update
   \   0000042A   0x2800             CMP      R0,#+0
   \   0000042C   0xD000             BEQ      .+4
   \   0000042E   0xE0DE             B        ??mbedtls_gcm_self_test_6
   \   00000430   0x2700             MOVS     R7,#+0
   \   00000432   0xA82A             ADD      R0,SP,#+168
   \   00000434   0x21A4             MOVS     R1,#+164
   \   00000436   0x0049             LSLS     R1,R1,#+1        ;; #+328
   \   00000438   0x1840             ADDS     R0,R0,R1
   \   0000043A   0xC0C0             STM      R0!,{R6,R7}
   \   0000043C   0x9C02             LDR      R4,[SP, #+8]
   \   0000043E   0xE01C             B        ??mbedtls_gcm_self_test_19
   \                     ??mbedtls_gcm_self_test_20: (+1)
   \   00000440   0x2010             MOVS     R0,#+16
   \   00000442   0x2E10             CMP      R6,#+16
   \   00000444   0xD800             BHI      ??mbedtls_gcm_self_test_21
   \   00000446   0x0030             MOVS     R0,R6
   \                     ??mbedtls_gcm_self_test_21: (+1)
   \   00000448   0x9000             STR      R0,[SP, #+0]
   \   0000044A   0xA82A             ADD      R0,SP,#+168
   \   0000044C   0x21B8             MOVS     R1,#+184
   \   0000044E   0x0049             LSLS     R1,R1,#+1        ;; #+368
   \   00000450   0x1840             ADDS     R0,R0,R1
   \   00000452   0x0021             MOVS     R1,R4
   \   00000454   0x9A00             LDR      R2,[SP, #+0]
   \                     ??mbedtls_gcm_self_test_22: (+1)
   \   00000456   0x7803             LDRB     R3,[R0, #+0]
   \   00000458   0x780D             LDRB     R5,[R1, #+0]
   \   0000045A   0x405D             EORS     R5,R5,R3
   \   0000045C   0x7005             STRB     R5,[R0, #+0]
   \   0000045E   0x1C49             ADDS     R1,R1,#+1
   \   00000460   0x1C40             ADDS     R0,R0,#+1
   \   00000462   0x1E52             SUBS     R2,R2,#+1
   \   00000464   0xD1F7             BNE      ??mbedtls_gcm_self_test_22
   \   00000466   0xA82A             ADD      R0,SP,#+168
   \   00000468   0x21B8             MOVS     R1,#+184
   \   0000046A   0x0049             LSLS     R1,R1,#+1        ;; #+368
   \   0000046C   0x1842             ADDS     R2,R0,R1
   \   0000046E   0x1841             ADDS     R1,R0,R1
   \   00000470   0x.... 0x....      BL       gcm_mult
   \   00000474   0x9800             LDR      R0,[SP, #+0]
   \   00000476   0x1A36             SUBS     R6,R6,R0
   \   00000478   0x1824             ADDS     R4,R4,R0
   \                     ??mbedtls_gcm_self_test_19: (+1)
   \   0000047A   0x2E00             CMP      R6,#+0
   \   0000047C   0xD1E0             BNE      ??mbedtls_gcm_self_test_20
    885                      if( ret != 0 )
    886                      {
    887                          if( verbose != 0 )
    888                              mbedtls_printf( "failed\n" );
    889          
    890                          return( 1 );
    891                      }
    892          
    893                      if( pt_len[i] > 32 )
   \   0000047E   0x9807             LDR      R0,[SP, #+28]
   \   00000480   0x6801             LDR      R1,[R0, #+0]
   \   00000482   0x2921             CMP      R1,#+33
   \   00000484   0xAB19             ADD      R3,SP,#+100
   \   00000486   0x9A09             LDR      R2,[SP, #+36]
   \   00000488   0xD314             BCC      ??mbedtls_gcm_self_test_23
    894                      {
    895                          size_t rest_len = pt_len[i] - 32;
    896                          ret = mbedtls_gcm_update( &ctx, 32, ct[j * 6 + i], buf );
    897                          if( ret != 0 )
   \   0000048A   0x2120             MOVS     R1,#+32
   \   0000048C   0xA82A             ADD      R0,SP,#+168
   \   0000048E   0x.... 0x....      BL       mbedtls_gcm_update
   \   00000492   0x2800             CMP      R0,#+0
   \   00000494   0xD000             BEQ      .+4
   \   00000496   0xE0AA             B        ??mbedtls_gcm_self_test_6
    898                          {
    899                              if( verbose != 0 )
    900                                  mbedtls_printf( "failed\n" );
    901          
    902                              return( 1 );
    903                          }
    904          
    905                          ret = mbedtls_gcm_update( &ctx, rest_len, ct[j * 6 + i] + 32,
    906                                            buf + 32 );
    907                          if( ret != 0 )
   \   00000498   0xA819             ADD      R0,SP,#+100
   \   0000049A   0x0003             MOVS     R3,R0
   \   0000049C   0x3320             ADDS     R3,R3,#+32
   \   0000049E   0x9A09             LDR      R2,[SP, #+36]
   \   000004A0   0x3220             ADDS     R2,R2,#+32
   \   000004A2   0x9807             LDR      R0,[SP, #+28]
   \   000004A4   0x6801             LDR      R1,[R0, #+0]
   \   000004A6   0x3920             SUBS     R1,R1,#+32
   \   000004A8   0xA82A             ADD      R0,SP,#+168
   \   000004AA   0x.... 0x....      BL       mbedtls_gcm_update
   \   000004AE   0x2800             CMP      R0,#+0
   \   000004B0   0xD006             BEQ      ??mbedtls_gcm_self_test_24
    908                          {
    909                              if( verbose != 0 )
   \   000004B2   0xE09C             B        ??mbedtls_gcm_self_test_6
    910                                  mbedtls_printf( "failed\n" );
    911          
    912                              return( 1 );
    913                          }
    914                      }
    915                      else
    916                      {
    917                          ret = mbedtls_gcm_update( &ctx, pt_len[i], ct[j * 6 + i], buf );
    918                          if( ret != 0 )
   \                     ??mbedtls_gcm_self_test_23: (+1)
   \   000004B4   0xA82A             ADD      R0,SP,#+168
   \   000004B6   0x.... 0x....      BL       mbedtls_gcm_update
   \   000004BA   0x2800             CMP      R0,#+0
   \   000004BC   0xD000             BEQ      .+4
   \   000004BE   0xE096             B        ??mbedtls_gcm_self_test_6
    919                          {
    920                              if( verbose != 0 )
    921                                  mbedtls_printf( "failed\n" );
    922          
    923                              return( 1 );
    924                          }
    925                      }
    926          
    927                      ret = mbedtls_gcm_finish( &ctx, tag_buf, 16 );
   \                     ??mbedtls_gcm_self_test_24: (+1)
   \   000004C0   0xA82A             ADD      R0,SP,#+168
   \   000004C2   0x21A0             MOVS     R1,#+160
   \   000004C4   0x0049             LSLS     R1,R1,#+1        ;; #+320
   \   000004C6   0x1840             ADDS     R0,R0,R1
   \   000004C8   0xC803             LDM      R0,{R0,R1}
   \   000004CA   0x00C9             LSLS     R1,R1,#+3
   \   000004CC   0x0F42             LSRS     R2,R0,#+29
   \   000004CE   0x4311             ORRS     R1,R1,R2
   \   000004D0   0x00C0             LSLS     R0,R0,#+3
   \   000004D2   0xAA2A             ADD      R2,SP,#+168
   \   000004D4   0x23A4             MOVS     R3,#+164
   \   000004D6   0x005B             LSLS     R3,R3,#+1        ;; #+328
   \   000004D8   0x18D2             ADDS     R2,R2,R3
   \   000004DA   0xCA0C             LDM      R2,{R2,R3}
   \   000004DC   0x00DB             LSLS     R3,R3,#+3
   \   000004DE   0x0F54             LSRS     R4,R2,#+29
   \   000004E0   0x4323             ORRS     R3,R3,R4
   \   000004E2   0x00D2             LSLS     R2,R2,#+3
   \   000004E4   0xAC2A             ADD      R4,SP,#+168
   \   000004E6   0x25A8             MOVS     R5,#+168
   \   000004E8   0x006D             LSLS     R5,R5,#+1        ;; #+336
   \   000004EA   0x1965             ADDS     R5,R4,R5
   \   000004EC   0xAC15             ADD      R4,SP,#+84
   \   000004EE   0xCDC0             LDM      R5!,{R6,R7}
   \   000004F0   0xC4C0             STM      R4!,{R6,R7}
   \   000004F2   0xCDC0             LDM      R5!,{R6,R7}
   \   000004F4   0xC4C0             STM      R4!,{R6,R7}
   \   000004F6   0x0014             MOVS     R4,R2
   \   000004F8   0x001D             MOVS     R5,R3
   \   000004FA   0x4304             ORRS     R4,R4,R0
   \   000004FC   0x430D             ORRS     R5,R5,R1
   \   000004FE   0xD101             BNE      ??mbedtls_gcm_self_test_25
   \   00000500   0x2C00             CMP      R4,#+0
   \   00000502   0xD061             BEQ      ??mbedtls_gcm_self_test_26
   \                     ??mbedtls_gcm_self_test_25: (+1)
   \   00000504   0x466C             MOV      R4,SP
   \   00000506   0x2500             MOVS     R5,#+0
   \   00000508   0x2600             MOVS     R6,#+0
   \   0000050A   0x2700             MOVS     R7,#+0
   \   0000050C   0xC4E0             STM      R4!,{R5-R7}
   \   0000050E   0x6025             STR      R5,[R4, #0]
   \   00000510   0x0E1C             LSRS     R4,R3,#+24
   \   00000512   0x466D             MOV      R5,SP
   \   00000514   0x702C             STRB     R4,[R5, #+0]
   \   00000516   0x0C1C             LSRS     R4,R3,#+16
   \   00000518   0x706C             STRB     R4,[R5, #+1]
   \   0000051A   0x0A1C             LSRS     R4,R3,#+8
   \   0000051C   0x70AC             STRB     R4,[R5, #+2]
   \   0000051E   0x70EB             STRB     R3,[R5, #+3]
   \   00000520   0x0E14             LSRS     R4,R2,#+24
   \   00000522   0x712C             STRB     R4,[R5, #+4]
   \   00000524   0x0C14             LSRS     R4,R2,#+16
   \   00000526   0x716C             STRB     R4,[R5, #+5]
   \   00000528   0x0414             LSLS     R4,R2,#+16
   \   0000052A   0x0E24             LSRS     R4,R4,#+24
   \   0000052C   0x71AC             STRB     R4,[R5, #+6]
   \   0000052E   0x466B             MOV      R3,SP
   \   00000530   0x71DA             STRB     R2,[R3, #+7]
   \   00000532   0x0E0A             LSRS     R2,R1,#+24
   \   00000534   0x721A             STRB     R2,[R3, #+8]
   \   00000536   0x0C0A             LSRS     R2,R1,#+16
   \   00000538   0x725A             STRB     R2,[R3, #+9]
   \   0000053A   0x0A0A             LSRS     R2,R1,#+8
   \   0000053C   0x729A             STRB     R2,[R3, #+10]
   \   0000053E   0x72D9             STRB     R1,[R3, #+11]
   \   00000540   0x0E02             LSRS     R2,R0,#+24
   \   00000542   0x731A             STRB     R2,[R3, #+12]
   \   00000544   0x0C02             LSRS     R2,R0,#+16
   \   00000546   0x735A             STRB     R2,[R3, #+13]
   \   00000548   0x0402             LSLS     R2,R0,#+16
   \   0000054A   0x0E12             LSRS     R2,R2,#+24
   \   0000054C   0x739A             STRB     R2,[R3, #+14]
   \   0000054E   0x4669             MOV      R1,SP
   \   00000550   0x73C8             STRB     R0,[R1, #+15]
   \   00000552   0xA82A             ADD      R0,SP,#+168
   \   00000554   0x21B8             MOVS     R1,#+184
   \   00000556   0x0049             LSLS     R1,R1,#+1        ;; #+368
   \   00000558   0x1840             ADDS     R0,R0,R1
   \   0000055A   0x4669             MOV      R1,SP
   \   0000055C   0x2404             MOVS     R4,#+4
   \   0000055E   0x2204             MOVS     R2,#+4
   \                     ??mbedtls_gcm_self_test_27: (+1)
   \   00000560   0x7803             LDRB     R3,[R0, #+0]
   \   00000562   0x780D             LDRB     R5,[R1, #+0]
   \   00000564   0x405D             EORS     R5,R5,R3
   \   00000566   0x7005             STRB     R5,[R0, #+0]
   \   00000568   0x7843             LDRB     R3,[R0, #+1]
   \   0000056A   0x784D             LDRB     R5,[R1, #+1]
   \   0000056C   0x405D             EORS     R5,R5,R3
   \   0000056E   0x7045             STRB     R5,[R0, #+1]
   \   00000570   0x7883             LDRB     R3,[R0, #+2]
   \   00000572   0x788D             LDRB     R5,[R1, #+2]
   \   00000574   0x405D             EORS     R5,R5,R3
   \   00000576   0x7085             STRB     R5,[R0, #+2]
   \   00000578   0x78C3             LDRB     R3,[R0, #+3]
   \   0000057A   0x78CD             LDRB     R5,[R1, #+3]
   \   0000057C   0x405D             EORS     R5,R5,R3
   \   0000057E   0x70C5             STRB     R5,[R0, #+3]
   \   00000580   0x1D09             ADDS     R1,R1,#+4
   \   00000582   0x1D00             ADDS     R0,R0,#+4
   \   00000584   0x1E52             SUBS     R2,R2,#+1
   \   00000586   0xD1EB             BNE      ??mbedtls_gcm_self_test_27
   \   00000588   0xA82A             ADD      R0,SP,#+168
   \   0000058A   0x21B8             MOVS     R1,#+184
   \   0000058C   0x0049             LSLS     R1,R1,#+1        ;; #+368
   \   0000058E   0x1842             ADDS     R2,R0,R1
   \   00000590   0x1841             ADDS     R1,R0,R1
   \   00000592   0x.... 0x....      BL       gcm_mult
   \   00000596   0xA815             ADD      R0,SP,#+84
   \   00000598   0xA92A             ADD      R1,SP,#+168
   \   0000059A   0x22B8             MOVS     R2,#+184
   \   0000059C   0x0052             LSLS     R2,R2,#+1        ;; #+368
   \   0000059E   0x1889             ADDS     R1,R1,R2
   \                     ??mbedtls_gcm_self_test_28: (+1)
   \   000005A0   0x7802             LDRB     R2,[R0, #+0]
   \   000005A2   0x780B             LDRB     R3,[R1, #+0]
   \   000005A4   0x4053             EORS     R3,R3,R2
   \   000005A6   0x7003             STRB     R3,[R0, #+0]
   \   000005A8   0x7842             LDRB     R2,[R0, #+1]
   \   000005AA   0x784B             LDRB     R3,[R1, #+1]
   \   000005AC   0x4053             EORS     R3,R3,R2
   \   000005AE   0x7043             STRB     R3,[R0, #+1]
   \   000005B0   0x7882             LDRB     R2,[R0, #+2]
   \   000005B2   0x788B             LDRB     R3,[R1, #+2]
   \   000005B4   0x4053             EORS     R3,R3,R2
   \   000005B6   0x7083             STRB     R3,[R0, #+2]
   \   000005B8   0x78C2             LDRB     R2,[R0, #+3]
   \   000005BA   0x78CB             LDRB     R3,[R1, #+3]
   \   000005BC   0x4053             EORS     R3,R3,R2
   \   000005BE   0x70C3             STRB     R3,[R0, #+3]
   \   000005C0   0x1D09             ADDS     R1,R1,#+4
   \   000005C2   0x1D00             ADDS     R0,R0,#+4
   \   000005C4   0x1E64             SUBS     R4,R4,#+1
   \   000005C6   0xD1EB             BNE      ??mbedtls_gcm_self_test_28
    928                      if( ret != 0 ||
    929                          memcmp( buf, pt[pt_index[i]], pt_len[i] ) != 0 ||
    930                          memcmp( tag_buf, tag[j * 6 + i], 16 ) != 0 )
   \                     ??mbedtls_gcm_self_test_26: (+1)
   \   000005C8   0x9807             LDR      R0,[SP, #+28]
   \   000005CA   0x6802             LDR      R2,[R0, #+0]
   \   000005CC   0x....             LDR      R0,??DataTable21
   \   000005CE   0x990A             LDR      R1,[SP, #+40]
   \   000005D0   0x6809             LDR      R1,[R1, #+0]
   \   000005D2   0x0189             LSLS     R1,R1,#+6
   \   000005D4   0x1841             ADDS     R1,R0,R1
   \   000005D6   0xA819             ADD      R0,SP,#+100
   \   000005D8   0x.... 0x....      BL       memcmp
   \   000005DC   0x2800             CMP      R0,#+0
   \   000005DE   0xD106             BNE      ??mbedtls_gcm_self_test_6
   \   000005E0   0x2210             MOVS     R2,#+16
   \   000005E2   0x990C             LDR      R1,[SP, #+48]
   \   000005E4   0xA815             ADD      R0,SP,#+84
   \   000005E6   0x.... 0x....      BL       memcmp
   \   000005EA   0x2800             CMP      R0,#+0
   \   000005EC   0xD007             BEQ      ??mbedtls_gcm_self_test_29
    931                      {
    932                          if( verbose != 0 )
   \                     ??mbedtls_gcm_self_test_6: (+1)
   \   000005EE   0x988C             LDR      R0,[SP, #+560]
   \   000005F0   0x2800             CMP      R0,#+0
   \   000005F2   0xD002             BEQ      ??mbedtls_gcm_self_test_30
    933                              mbedtls_printf( "failed\n" );
   \   000005F4   0x....             ADR.N    R0,?_2
   \   000005F6   0x.... 0x....      BL       printf
    934          
    935                          return( 1 );
   \                     ??mbedtls_gcm_self_test_30: (+1)
   \   000005FA   0x2001             MOVS     R0,#+1
   \   000005FC   0xE048             B        ??mbedtls_gcm_self_test_31
    936                      }
    937          
    938                      mbedtls_gcm_free( &ctx );
   \                     ??mbedtls_gcm_self_test_29: (+1)
   \   000005FE   0xA82A             ADD      R0,SP,#+168
   \   00000600   0x.... 0x....      BL       mbedtls_cipher_free
   \   00000604   0x21C4             MOVS     R1,#+196
   \   00000606   0x0049             LSLS     R1,R1,#+1        ;; #+392
   \   00000608   0xA82A             ADD      R0,SP,#+168
   \   0000060A   0x.... 0x....      BL       mbedtls_zeroize
    939          
    940                      if( verbose != 0 )
   \   0000060E   0x988C             LDR      R0,[SP, #+560]
   \   00000610   0x2800             CMP      R0,#+0
   \   00000612   0xD002             BEQ      ??mbedtls_gcm_self_test_32
    941                          mbedtls_printf( "passed\n" );
   \   00000614   0x....             ADR.N    R0,?_3
   \   00000616   0x.... 0x....      BL       printf
    942          
    943                  }
   \                     ??mbedtls_gcm_self_test_32: (+1)
   \   0000061A   0x980B             LDR      R0,[SP, #+44]
   \   0000061C   0x1C40             ADDS     R0,R0,#+1
   \   0000061E   0x900B             STR      R0,[SP, #+44]
   \   00000620   0x9809             LDR      R0,[SP, #+36]
   \   00000622   0x3040             ADDS     R0,R0,#+64
   \   00000624   0x9009             STR      R0,[SP, #+36]
   \   00000626   0x980C             LDR      R0,[SP, #+48]
   \   00000628   0x3010             ADDS     R0,R0,#+16
   \   0000062A   0x900C             STR      R0,[SP, #+48]
   \   0000062C   0x9807             LDR      R0,[SP, #+28]
   \   0000062E   0x1D00             ADDS     R0,R0,#+4
   \   00000630   0x9007             STR      R0,[SP, #+28]
   \   00000632   0x980D             LDR      R0,[SP, #+52]
   \   00000634   0x1D00             ADDS     R0,R0,#+4
   \   00000636   0x900D             STR      R0,[SP, #+52]
   \   00000638   0x980E             LDR      R0,[SP, #+56]
   \   0000063A   0x1D00             ADDS     R0,R0,#+4
   \   0000063C   0x900E             STR      R0,[SP, #+56]
   \   0000063E   0x980F             LDR      R0,[SP, #+60]
   \   00000640   0x1D00             ADDS     R0,R0,#+4
   \   00000642   0x900F             STR      R0,[SP, #+60]
   \   00000644   0x9810             LDR      R0,[SP, #+64]
   \   00000646   0x1D00             ADDS     R0,R0,#+4
   \   00000648   0x9010             STR      R0,[SP, #+64]
   \   0000064A   0x980A             LDR      R0,[SP, #+40]
   \   0000064C   0x1D00             ADDS     R0,R0,#+4
   \   0000064E   0x900A             STR      R0,[SP, #+40]
   \   00000650   0x9811             LDR      R0,[SP, #+68]
   \   00000652   0x1D00             ADDS     R0,R0,#+4
   \   00000654   0x9011             STR      R0,[SP, #+68]
   \   00000656   0x980B             LDR      R0,[SP, #+44]
   \   00000658   0x2806             CMP      R0,#+6
   \   0000065A   0xDA00             BGE      .+4
   \   0000065C   0xE4F4             B        ??mbedtls_gcm_self_test_2
    944              }
   \   0000065E   0x9814             LDR      R0,[SP, #+80]
   \   00000660   0x1C40             ADDS     R0,R0,#+1
   \   00000662   0x9014             STR      R0,[SP, #+80]
   \   00000664   0x9812             LDR      R0,[SP, #+72]
   \   00000666   0x21C0             MOVS     R1,#+192
   \   00000668   0x0049             LSLS     R1,R1,#+1        ;; #+384
   \   0000066A   0x1840             ADDS     R0,R0,R1
   \   0000066C   0x9012             STR      R0,[SP, #+72]
   \   0000066E   0x9813             LDR      R0,[SP, #+76]
   \   00000670   0x3060             ADDS     R0,R0,#+96
   \   00000672   0x9013             STR      R0,[SP, #+76]
   \   00000674   0x9808             LDR      R0,[SP, #+32]
   \   00000676   0x3040             ADDS     R0,R0,#+64
   \   00000678   0x9008             STR      R0,[SP, #+32]
   \   0000067A   0x9814             LDR      R0,[SP, #+80]
   \   0000067C   0x2803             CMP      R0,#+3
   \   0000067E   0xDA00             BGE      .+4
   \   00000680   0xE4CE             B        ??mbedtls_gcm_self_test_1
    945          
    946              if( verbose != 0 )
   \   00000682   0x988C             LDR      R0,[SP, #+560]
   \   00000684   0x2800             CMP      R0,#+0
   \   00000686   0xD002             BEQ      ??mbedtls_gcm_self_test_33
    947                  mbedtls_printf( "\n" );
   \   00000688   0x....             ADR      R0,??DataTable21_1  ;; "\n"
   \   0000068A   0x.... 0x....      BL       printf
    948          
    949              return( 0 );
   \                     ??mbedtls_gcm_self_test_33: (+1)
   \   0000068E   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_gcm_self_test_31: (+1)
   \   00000690   0xB07F             ADD      SP,SP,#+508
   \   00000692   0xB00E             ADD      SP,SP,#+56
   \   00000694   0xBDF0             POP      {R4-R7,PC}       ;; return
    950          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   0x........         DC32     pt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_1:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x20 0x20          DC8 "  AES-GCM-%3d #%d (%s): "
   \              0x41 0x45    
   \              0x53 0x2D    
   \              0x47 0x43    
   \              0x4D 0x2D    
   \              0x25 0x33    
   \              0x64 0x20    
   \              0x23 0x25    
   \              0x64 0x20    
   \              0x28 0x25    
   \              0x73 0x29    
   \              0x3A 0x20    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x65 0x6E          DC8 "enc"
   \              0x63 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x64 0x65          DC8 "dec"
   \              0x63 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x20 0x20          DC8 "  AES-GCM-%3d #%d split (%s): "
   \              0x41 0x45    
   \              0x53 0x2D    
   \              0x47 0x43    
   \              0x4D 0x2D    
   \              0x25 0x33    
   \              0x64 0x20    
   \              0x23 0x25    
   \              0x64 0x20    
   \              0x73 0x70    
   \              0x6C 0x69    
   \              0x74 0x20    
   \              0x28 0x25    
   \              0x73 0x29    
   \              0x3A 0x20    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_6:
   \   00000000   0x0A 0x00          DC8 "\012"

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x66 0x61          DC8 "failed\012"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x70 0x61          DC8 "passed\012"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x00    
    951          
    952          #endif /* MBEDTLS_SELF_TEST && MBEDTLS_AES_C */
    953          
    954          #endif /* MBEDTLS_GCM_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      64   gcm_gen_table
        64   -> mbedtls_cipher_update
      56   gcm_mult
      64   mbedtls_gcm_auth_decrypt
        64   -> __aeabi_memclr
        64   -> mbedtls_gcm_crypt_and_tag
      24   mbedtls_gcm_crypt_and_tag
        24   -> mbedtls_gcm_finish
        24   -> mbedtls_gcm_starts
        24   -> mbedtls_gcm_update
      48   mbedtls_gcm_finish
        48   -> __aeabi_memcpy
        48   -> gcm_mult
       8   mbedtls_gcm_free
         8   -> __aeabi_memclr
         8   -> mbedtls_cipher_free
       8   mbedtls_gcm_init
         8   -> __aeabi_memclr4
     584   mbedtls_gcm_self_test
       584   -> __aeabi_memclr4
       584   -> __aeabi_memcpy
       584   -> gcm_mult
       584   -> mbedtls_cipher_free
       584   -> mbedtls_cipher_update
       584   -> mbedtls_gcm_crypt_and_tag
       584   -> mbedtls_gcm_finish
       584   -> mbedtls_gcm_setkey
       584   -> mbedtls_gcm_starts
       584   -> mbedtls_gcm_update
       584   -> mbedtls_zeroize
       584   -> memcmp
       584   -> printf
      24   mbedtls_gcm_setkey
        24   -> gcm_gen_table
        24   -> mbedtls_cipher_free
        24   -> mbedtls_cipher_info_from_values
        24   -> mbedtls_cipher_setkey
        24   -> mbedtls_cipher_setup
      64   mbedtls_gcm_starts
        64   -> __aeabi_memcpy
        64   -> gcm_mult
        64   -> mbedtls_cipher_update
      72   mbedtls_gcm_update
        72   -> gcm_mult
        72   -> mbedtls_cipher_update
       8   mbedtls_zeroize
         8   -> __aeabi_memclr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable21
       4  ??DataTable21_1
      28  ?_0
       4  ?_1
       8  ?_2
       8  ?_3
       4  ?_4
      32  ?_5
       2  ?_6
      24  add_index
      24  add_len
     384  additional
    1152  ct
     352  gcm_gen_table
     388  gcm_mult
     384  iv
      24  iv_index
      24  iv_len
     192  key
      24  key_index
     128  last4
     102  mbedtls_gcm_auth_decrypt
      60  mbedtls_gcm_crypt_and_tag
     240  mbedtls_gcm_finish
      20  mbedtls_gcm_free
      12  mbedtls_gcm_init
    1686  mbedtls_gcm_self_test
      76  mbedtls_gcm_setkey
     334  mbedtls_gcm_starts
     296  mbedtls_gcm_update
      14  mbedtls_zeroize
     384  pt
      24  pt_index
      24  pt_len
     288  tag

 
 3 022 bytes in section .rodata
 3 732 bytes in section .text
 
 3 732 bytes of CODE  memory
 3 022 bytes of CONST memory

Errors: none
Warnings: none
