###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:22
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\mbedtls\src\base64.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\base64.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\base64.s.txt
#        -o .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\base64.o
#        .\mbed-os\features\mbedtls\src\base64.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\base64.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\base64.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\mbedtls\src\base64.c
      1          /*
      2           *  RFC 1521 base64 encoding/decoding
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          #if !defined(MBEDTLS_CONFIG_FILE)
     23          #include "mbedtls/config.h"
     24          #else
     25          #include MBEDTLS_CONFIG_FILE
     26          #endif
     27          
     28          #if defined(MBEDTLS_BASE64_C)
     29          
     30          #include "mbedtls/base64.h"
     31          
     32          #include <stdint.h>
     33          
     34          #if defined(MBEDTLS_SELF_TEST)
     35          #include <string.h>
     36          #if defined(MBEDTLS_PLATFORM_C)
     37          #include "mbedtls/platform.h"
     38          #else
     39          #include <stdio.h>
     40          #define mbedtls_printf printf
     41          #endif /* MBEDTLS_PLATFORM_C */
     42          #endif /* MBEDTLS_SELF_TEST */
     43          

   \                                 In section .text, align 4, keep-with-next
     44          static const unsigned char base64_enc_map[64] =
   \                     base64_enc_map:
   \   00000000   0x41 0x42          DC8 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81
   \              0x43 0x44    
   \              0x45 0x46    
   \              0x47 0x48    
   \              0x49 0x4A    
   \              0x4B 0x4C    
   \              0x4D 0x4E    
   \              0x4F 0x50    
   \              0x51         
   \   00000011   0x52 0x53          DC8 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103
   \              0x54 0x55    
   \              0x56 0x57    
   \              0x58 0x59    
   \              0x5A 0x61    
   \              0x62 0x63    
   \              0x64 0x65    
   \              0x66 0x67    
   \   00000021   0x68 0x69          DC8 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116
   \              0x6A 0x6B    
   \              0x6C 0x6D    
   \              0x6E 0x6F    
   \              0x70 0x71    
   \              0x72 0x73    
   \              0x74         
   \   0000002E   0x75 0x76          DC8 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56
   \              0x77 0x78    
   \              0x79 0x7A    
   \              0x30 0x31    
   \              0x32 0x33    
   \              0x34 0x35    
   \              0x36 0x37    
   \              0x38         
   \   0000003D   0x39 0x2B          DC8 57, 43, 47
   \              0x2F         
     45          {
     46              'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',
     47              'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
     48              'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd',
     49              'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
     50              'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',
     51              'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7',
     52              '8', '9', '+', '/'
     53          };
     54          

   \                                 In section .text, align 4, keep-with-next
     55          static const unsigned char base64_dec_map[128] =
   \                     base64_dec_map:
   \   00000000   0x7F 0x7F          DC8 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F         
   \   0000000D   0x7F 0x7F          DC8 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F         
   \   0000001A   0x7F 0x7F          DC8 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F         
   \   00000027   0x7F 0x7F          DC8 127, 127, 127, 127, 62, 127, 127, 127, 63, 52, 53, 54, 55, 56, 57
   \              0x7F 0x7F    
   \              0x3E 0x7F    
   \              0x7F 0x7F    
   \              0x3F 0x34    
   \              0x35 0x36    
   \              0x37 0x38    
   \              0x39         
   \   00000036   0x3A 0x3B          DC8 58, 59, 60, 61, 127, 127, 127, 64, 127, 127, 127, 0, 1, 2, 3, 4, 5
   \              0x3C 0x3D    
   \              0x7F 0x7F    
   \              0x7F 0x40    
   \              0x7F 0x7F    
   \              0x7F 0x00    
   \              0x01 0x02    
   \              0x03 0x04    
   \              0x05         
   \   00000047   0x06 0x07          DC8 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23
   \              0x08 0x09    
   \              0x0A 0x0B    
   \              0x0C 0x0D    
   \              0x0E 0x0F    
   \              0x10 0x11    
   \              0x12 0x13    
   \              0x14 0x15    
   \              0x16 0x17    
   \   00000059   0x18 0x19          DC8 24, 25, 127, 127, 127, 127, 127, 127, 26, 27, 28, 29, 30, 31, 32
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x1A 0x1B    
   \              0x1C 0x1D    
   \              0x1E 0x1F    
   \              0x20         
   \   00000068   0x21 0x22          DC8 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49
   \              0x23 0x24    
   \              0x25 0x26    
   \              0x27 0x28    
   \              0x29 0x2A    
   \              0x2B 0x2C    
   \              0x2D 0x2E    
   \              0x2F 0x30    
   \              0x31         
   \   00000079   0x32 0x33          DC8 50, 51, 127, 127, 127, 127, 127
   \              0x7F 0x7F    
   \              0x7F 0x7F    
   \              0x7F         
     56          {
     57              127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
     58              127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
     59              127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
     60              127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
     61              127, 127, 127,  62, 127, 127, 127,  63,  52,  53,
     62               54,  55,  56,  57,  58,  59,  60,  61, 127, 127,
     63              127,  64, 127, 127, 127,   0,   1,   2,   3,   4,
     64                5,   6,   7,   8,   9,  10,  11,  12,  13,  14,
     65               15,  16,  17,  18,  19,  20,  21,  22,  23,  24,
     66               25, 127, 127, 127, 127, 127, 127,  26,  27,  28,
     67               29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
     68               39,  40,  41,  42,  43,  44,  45,  46,  47,  48,
     69               49,  50,  51, 127, 127, 127, 127, 127
     70          };
     71          
     72          #define BASE64_SIZE_T_MAX   ( (size_t) -1 ) /* SIZE_T_MAX is not standard */
     73          
     74          /*
     75           * Encode a buffer into base64 format
     76           */

   \                                 In section .text, align 4, keep-with-next
     77          int mbedtls_base64_encode( unsigned char *dst, size_t dlen, size_t *olen,
     78                             const unsigned char *src, size_t slen )
     79          {
   \                     mbedtls_base64_encode: (+1)
   \   00000000   0xB5F5             PUSH     {R0,R2,R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x001C             MOVS     R4,R3
     80              size_t i, n;
     81              int C1, C2, C3;
     82              unsigned char *p;
     83          
     84              if( slen == 0 )
   \   00000008   0x9808             LDR      R0,[SP, #+32]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD101             BNE      ??mbedtls_base64_encode_0
     85              {
     86                  *olen = 0;
   \   0000000E   0x6010             STR      R0,[R2, #+0]
     87                  return( 0 );
   \   00000010   0xE071             B        ??mbedtls_base64_encode_1
     88              }
     89          
     90              n = slen / 3 + ( slen % 3 != 0 );
   \                     ??mbedtls_base64_encode_0: (+1)
   \   00000012   0x9808             LDR      R0,[SP, #+32]
   \   00000014   0x2103             MOVS     R1,#+3
   \   00000016   0x.... 0x....      BL       __aeabi_uidivmod
   \   0000001A   0x1E4E             SUBS     R6,R1,#+1
   \   0000001C   0x41B6             SBCS     R6,R6,R6
   \   0000001E   0x43F6             MVNS     R6,R6
   \   00000020   0x0FF6             LSRS     R6,R6,#+31
   \   00000022   0x9808             LDR      R0,[SP, #+32]
   \   00000024   0x2103             MOVS     R1,#+3
   \   00000026   0x.... 0x....      BL       __aeabi_uidiv
   \   0000002A   0x0001             MOVS     R1,R0
   \   0000002C   0x1988             ADDS     R0,R1,R6
     91          
     92              if( n > ( BASE64_SIZE_T_MAX - 1 ) / 4 )
   \   0000002E   0x2280             MOVS     R2,#+128
   \   00000030   0x05D2             LSLS     R2,R2,#+23       ;; #+1073741824
   \   00000032   0x4290             CMP      R0,R2
   \   00000034   0xD302             BCC      ??mbedtls_base64_encode_2
     93              {
     94                  *olen = BASE64_SIZE_T_MAX;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x43C0             MVNS     R0,R0            ;; #-1
   \   0000003A   0xE006             B.N      ??mbedtls_base64_encode_3
     95                  return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
     96              }
     97          
     98              n *= 4;
   \                     ??mbedtls_base64_encode_2: (+1)
   \   0000003C   0x0080             LSLS     R0,R0,#+2
     99          
    100              if( ( dlen < n + 1 ) || ( NULL == dst ) )
   \   0000003E   0x1C40             ADDS     R0,R0,#+1
   \   00000040   0x4285             CMP      R5,R0
   \   00000042   0xD302             BCC      ??mbedtls_base64_encode_3
   \   00000044   0x9A01             LDR      R2,[SP, #+4]
   \   00000046   0x2A00             CMP      R2,#+0
   \   00000048   0xD104             BNE      ??mbedtls_base64_encode_4
    101              {
    102                  *olen = n + 1;
   \                     ??mbedtls_base64_encode_3: (+1)
   \   0000004A   0x9902             LDR      R1,[SP, #+8]
   \   0000004C   0x6008             STR      R0,[R1, #+0]
    103                  return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
   \   0000004E   0x2029             MOVS     R0,#+41
   \   00000050   0x43C0             MVNS     R0,R0            ;; #-42
   \   00000052   0xE050             B        ??mbedtls_base64_encode_1
    104              }
    105          
    106              n = ( slen / 3 ) * 3;
   \                     ??mbedtls_base64_encode_4: (+1)
   \   00000054   0x0048             LSLS     R0,R1,#+1
   \   00000056   0x1840             ADDS     R0,R0,R1
   \   00000058   0x2100             MOVS     R1,#+0
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD021             BEQ      ??mbedtls_base64_encode_5
   \   0000005E   0xBF00             Nop      
   \   00000060   0x....             ADR.N    R3,base64_enc_map
    107          
    108              for( i = 0, p = dst; i < n; i += 3 )
    109              {
    110                  C1 = *src++;
   \                     ??mbedtls_base64_encode_6: (+1)
   \   00000062   0x7825             LDRB     R5,[R4, #+0]
    111                  C2 = *src++;
   \   00000064   0x7866             LDRB     R6,[R4, #+1]
    112                  C3 = *src++;
   \   00000066   0x78A7             LDRB     R7,[R4, #+2]
   \   00000068   0x9700             STR      R7,[SP, #+0]
   \   0000006A   0x1CE4             ADDS     R4,R4,#+3
    113          
    114                  *p++ = base64_enc_map[(C1 >> 2) & 0x3F];
   \   0000006C   0x08AF             LSRS     R7,R5,#+2
   \   0000006E   0x5DDF             LDRB     R7,[R3, R7]
   \   00000070   0x7017             STRB     R7,[R2, #+0]
    115                  *p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
   \   00000072   0x012D             LSLS     R5,R5,#+4
   \   00000074   0x0937             LSRS     R7,R6,#+4
   \   00000076   0x19ED             ADDS     R5,R5,R7
   \   00000078   0x06AD             LSLS     R5,R5,#+26
   \   0000007A   0x0EAD             LSRS     R5,R5,#+26
   \   0000007C   0x5D5D             LDRB     R5,[R3, R5]
   \   0000007E   0x7055             STRB     R5,[R2, #+1]
    116                  *p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
   \   00000080   0x00B5             LSLS     R5,R6,#+2
   \   00000082   0x9E00             LDR      R6,[SP, #+0]
   \   00000084   0x11B6             ASRS     R6,R6,#+6
   \   00000086   0x19AD             ADDS     R5,R5,R6
   \   00000088   0x06AD             LSLS     R5,R5,#+26
   \   0000008A   0x0EAD             LSRS     R5,R5,#+26
   \   0000008C   0x5D5D             LDRB     R5,[R3, R5]
   \   0000008E   0x7095             STRB     R5,[R2, #+2]
    117                  *p++ = base64_enc_map[C3 & 0x3F];
   \   00000090   0x9D00             LDR      R5,[SP, #+0]
   \   00000092   0x06AD             LSLS     R5,R5,#+26
   \   00000094   0x0EAD             LSRS     R5,R5,#+26
   \   00000096   0x5D5D             LDRB     R5,[R3, R5]
   \   00000098   0x70D5             STRB     R5,[R2, #+3]
   \   0000009A   0x1D12             ADDS     R2,R2,#+4
    118              }
   \   0000009C   0x1CC9             ADDS     R1,R1,#+3
   \   0000009E   0x4281             CMP      R1,R0
   \   000000A0   0xD3DF             BCC      ??mbedtls_base64_encode_6
    119          
    120              if( i < slen )
   \                     ??mbedtls_base64_encode_5: (+1)
   \   000000A2   0x9808             LDR      R0,[SP, #+32]
   \   000000A4   0x4281             CMP      R1,R0
   \   000000A6   0xD220             BCS      ??mbedtls_base64_encode_7
    121              {
    122                  C1 = *src++;
   \   000000A8   0x7825             LDRB     R5,[R4, #+0]
    123                  C2 = ( ( i + 1 ) < slen ) ? *src++ : 0;
   \   000000AA   0x1C49             ADDS     R1,R1,#+1
   \   000000AC   0x4281             CMP      R1,R0
   \   000000AE   0xD201             BCS      ??mbedtls_base64_encode_8
   \   000000B0   0x7866             LDRB     R6,[R4, #+1]
   \   000000B2   0xE000             B        ??mbedtls_base64_encode_9
   \                     ??mbedtls_base64_encode_8: (+1)
   \   000000B4   0x2600             MOVS     R6,#+0
    124          
    125                  *p++ = base64_enc_map[(C1 >> 2) & 0x3F];
   \                     ??mbedtls_base64_encode_9: (+1)
   \   000000B6   0xBF00             Nop      
   \   000000B8   0x....             ADR.N    R3,base64_enc_map
   \   000000BA   0x08A8             LSRS     R0,R5,#+2
   \   000000BC   0x5C18             LDRB     R0,[R3, R0]
   \   000000BE   0x7010             STRB     R0,[R2, #+0]
   \   000000C0   0x0128             LSLS     R0,R5,#+4
   \   000000C2   0x1134             ASRS     R4,R6,#+4
   \   000000C4   0x1900             ADDS     R0,R0,R4
   \   000000C6   0x0680             LSLS     R0,R0,#+26
   \   000000C8   0x0E80             LSRS     R0,R0,#+26
   \   000000CA   0x5C18             LDRB     R0,[R3, R0]
   \   000000CC   0x7050             STRB     R0,[R2, #+1]
    126                  *p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    127          
    128                  if( ( i + 1 ) < slen )
   \   000000CE   0x203D             MOVS     R0,#+61
   \   000000D0   0x9C08             LDR      R4,[SP, #+32]
   \   000000D2   0x42A1             CMP      R1,R4
   \   000000D4   0xD205             BCS      ??mbedtls_base64_encode_10
    129                       *p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
   \   000000D6   0x00B1             LSLS     R1,R6,#+2
   \   000000D8   0x0689             LSLS     R1,R1,#+26
   \   000000DA   0x0E89             LSRS     R1,R1,#+26
   \   000000DC   0x5C59             LDRB     R1,[R3, R1]
   \   000000DE   0x7091             STRB     R1,[R2, #+2]
   \   000000E0   0xE000             B        ??mbedtls_base64_encode_11
    130                  else *p++ = '=';
   \                     ??mbedtls_base64_encode_10: (+1)
   \   000000E2   0x7090             STRB     R0,[R2, #+2]
   \                     ??mbedtls_base64_encode_11: (+1)
   \   000000E4   0x1CD1             ADDS     R1,R2,#+3
    131          
    132                  *p++ = '=';
   \   000000E6   0x7008             STRB     R0,[R1, #+0]
   \   000000E8   0x1C4A             ADDS     R2,R1,#+1
    133              }
    134          
    135              *olen = p - dst;
   \                     ??mbedtls_base64_encode_7: (+1)
   \   000000EA   0x9801             LDR      R0,[SP, #+4]
   \   000000EC   0x1A10             SUBS     R0,R2,R0
   \   000000EE   0x9902             LDR      R1,[SP, #+8]
   \   000000F0   0x6008             STR      R0,[R1, #+0]
    136              *p = 0;
   \   000000F2   0x2000             MOVS     R0,#+0
   \   000000F4   0x7010             STRB     R0,[R2, #+0]
    137          
    138              return( 0 );
   \                     ??mbedtls_base64_encode_1: (+1)
   \   000000F6   0xB003             ADD      SP,SP,#+12
   \   000000F8   0xBDF0             POP      {R4-R7,PC}       ;; return
    139          }
    140          
    141          /*
    142           * Decode a base64-formatted buffer
    143           */

   \                                 In section .text, align 4, keep-with-next
    144          int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
    145                             const unsigned char *src, size_t slen )
    146          {
   \                     mbedtls_base64_decode: (+1)
   \   00000000   0xB4FF             PUSH     {R0-R7}
   \   00000002   0xB081             SUB      SP,SP,#+4
    147              size_t i, n;
    148              uint32_t j, x;
    149              unsigned char *p;
    150          
    151              /* First pass: check for validity and get output length */
    152              for( i = n = j = 0; i < slen; i++ )
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x2400             MOVS     R4,#+0
   \   0000000C   0xE001             B        ??mbedtls_base64_decode_0
    153              {
    154                  /* Skip spaces before checking for EOL */
    155                  x = 0;
    156                  while( i < slen && src[i] == ' ' )
    157                  {
    158                      ++i;
    159                      ++x;
    160                  }
    161          
    162                  /* Spaces at end of buffer are OK */
    163                  if( i == slen )
    164                      break;
    165          
    166                  if( ( slen - i ) >= 2 &&
    167                      src[i] == '\r' && src[i + 1] == '\n' )
    168                      continue;
    169          
    170                  if( src[i] == '\n' )
    171                      continue;
    172          
    173                  /* Space inside a line is an error */
    174                  if( x != 0 )
    175                      return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
    176          
    177                  if( src[i] == '=' && ++j > 2 )
    178                      return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
    179          
    180                  if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
    181                      return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
    182          
    183                  if( base64_dec_map[src[i]] < 64 && j != 0 )
    184                      return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
    185          
    186                  n++;
   \                     ??mbedtls_base64_decode_1: (+1)
   \   0000000E   0x1C52             ADDS     R2,R2,#+1
   \                     ??mbedtls_base64_decode_2: (+1)
   \   00000010   0x1C64             ADDS     R4,R4,#+1
   \                     ??mbedtls_base64_decode_0: (+1)
   \   00000012   0x9D09             LDR      R5,[SP, #+36]
   \   00000014   0x42AC             CMP      R4,R5
   \   00000016   0xD22D             BCS      ??mbedtls_base64_decode_3
   \   00000018   0x2500             MOVS     R5,#+0
   \   0000001A   0x191E             ADDS     R6,R3,R4
   \                     ??mbedtls_base64_decode_4: (+1)
   \   0000001C   0x7837             LDRB     R7,[R6, #+0]
   \   0000001E   0x2F20             CMP      R7,#+32
   \   00000020   0xD106             BNE      ??mbedtls_base64_decode_5
   \   00000022   0x1C64             ADDS     R4,R4,#+1
   \   00000024   0x1C6D             ADDS     R5,R5,#+1
   \   00000026   0x1C76             ADDS     R6,R6,#+1
   \   00000028   0x9F09             LDR      R7,[SP, #+36]
   \   0000002A   0x42BC             CMP      R4,R7
   \   0000002C   0xD3F6             BCC      ??mbedtls_base64_decode_4
   \   0000002E   0xD021             BEQ      ??mbedtls_base64_decode_3
   \                     ??mbedtls_base64_decode_5: (+1)
   \   00000030   0x191E             ADDS     R6,R3,R4
   \   00000032   0x9F09             LDR      R7,[SP, #+36]
   \   00000034   0x1B3F             SUBS     R7,R7,R4
   \   00000036   0x2F02             CMP      R7,#+2
   \   00000038   0xD305             BCC      ??mbedtls_base64_decode_6
   \   0000003A   0x7837             LDRB     R7,[R6, #+0]
   \   0000003C   0x2F0D             CMP      R7,#+13
   \   0000003E   0xD102             BNE      ??mbedtls_base64_decode_6
   \   00000040   0x7877             LDRB     R7,[R6, #+1]
   \   00000042   0x2F0A             CMP      R7,#+10
   \   00000044   0xD0E4             BEQ      ??mbedtls_base64_decode_2
   \                     ??mbedtls_base64_decode_6: (+1)
   \   00000046   0x7836             LDRB     R6,[R6, #+0]
   \   00000048   0x2E0A             CMP      R6,#+10
   \   0000004A   0xD0E1             BEQ      ??mbedtls_base64_decode_2
   \   0000004C   0x2D00             CMP      R5,#+0
   \   0000004E   0xD10F             BNE      ??mbedtls_base64_decode_7
   \   00000050   0x2E3D             CMP      R6,#+61
   \   00000052   0xD102             BNE      ??mbedtls_base64_decode_8
   \   00000054   0x1C49             ADDS     R1,R1,#+1
   \   00000056   0x2903             CMP      R1,#+3
   \   00000058   0xD20A             BCS      ??mbedtls_base64_decode_7
   \                     ??mbedtls_base64_decode_8: (+1)
   \   0000005A   0x2E80             CMP      R6,#+128
   \   0000005C   0xDA08             BGE      ??mbedtls_base64_decode_7
   \   0000005E   0xBF00             Nop      
   \   00000060   0x....             ADR.N    R5,base64_dec_map
   \   00000062   0x5DAD             LDRB     R5,[R5, R6]
   \   00000064   0x2D7F             CMP      R5,#+127
   \   00000066   0xD003             BEQ      ??mbedtls_base64_decode_7
   \   00000068   0x2D40             CMP      R5,#+64
   \   0000006A   0xDAD0             BGE      ??mbedtls_base64_decode_1
   \   0000006C   0x2900             CMP      R1,#+0
   \   0000006E   0xD0CE             BEQ      ??mbedtls_base64_decode_1
   \                     ??mbedtls_base64_decode_7: (+1)
   \   00000070   0x202B             MOVS     R0,#+43
   \   00000072   0xE01A             B.N      ??mbedtls_base64_decode_9
    187              }
    188          
    189              if( n == 0 )
   \                     ??mbedtls_base64_decode_3: (+1)
   \   00000074   0x2A00             CMP      R2,#+0
   \   00000076   0xD102             BNE      ??mbedtls_base64_decode_10
    190              {
    191                  *olen = 0;
   \   00000078   0x9903             LDR      R1,[SP, #+12]
   \   0000007A   0x6008             STR      R0,[R1, #+0]
    192                  return( 0 );
   \   0000007C   0xE04B             B        ??mbedtls_base64_decode_11
    193              }
    194          
    195              /* The following expression is to calculate the following formula without
    196               * risk of integer overflow in n:
    197               *     n = ( ( n * 6 ) + 7 ) >> 3;
    198               */
    199              n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    200              n -= j;
   \                     ??mbedtls_base64_decode_10: (+1)
   \   0000007E   0x08D5             LSRS     R5,R2,#+3
   \   00000080   0x006E             LSLS     R6,R5,#+1
   \   00000082   0x1975             ADDS     R5,R6,R5
   \   00000084   0x006D             LSLS     R5,R5,#+1
   \   00000086   0x0752             LSLS     R2,R2,#+29
   \   00000088   0x0F52             LSRS     R2,R2,#+29
   \   0000008A   0x0056             LSLS     R6,R2,#+1
   \   0000008C   0x18B2             ADDS     R2,R6,R2
   \   0000008E   0x0052             LSLS     R2,R2,#+1
   \   00000090   0x1DD2             ADDS     R2,R2,#+7
   \   00000092   0x08D2             LSRS     R2,R2,#+3
   \   00000094   0x18AA             ADDS     R2,R5,R2
   \   00000096   0x1A52             SUBS     R2,R2,R1
    201          
    202              if( dst == NULL || dlen < n )
   \   00000098   0x9901             LDR      R1,[SP, #+4]
   \   0000009A   0x2900             CMP      R1,#+0
   \   0000009C   0xD002             BEQ      ??mbedtls_base64_decode_12
   \   0000009E   0x9902             LDR      R1,[SP, #+8]
   \   000000A0   0x4291             CMP      R1,R2
   \   000000A2   0xD204             BCS      ??mbedtls_base64_decode_13
    203              {
    204                  *olen = n;
   \                     ??mbedtls_base64_decode_12: (+1)
   \   000000A4   0x9803             LDR      R0,[SP, #+12]
   \   000000A6   0x6002             STR      R2,[R0, #+0]
    205                  return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
   \   000000A8   0x2029             MOVS     R0,#+41
   \                     ??mbedtls_base64_decode_9: (+1)
   \   000000AA   0x43C0             MVNS     R0,R0            ;; #-42
   \   000000AC   0xE033             B        ??mbedtls_base64_decode_11
    206              }
    207          
    208             for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   \                     ??mbedtls_base64_decode_13: (+1)
   \   000000AE   0x2103             MOVS     R1,#+3
   \   000000B0   0x2500             MOVS     R5,#+0
   \   000000B2   0x2200             MOVS     R2,#+0
   \   000000B4   0x9E01             LDR      R6,[SP, #+4]
   \   000000B6   0x2C00             CMP      R4,#+0
   \   000000B8   0xD028             BEQ      ??mbedtls_base64_decode_14
   \   000000BA   0x9400             STR      R4,[SP, #+0]
    209             {
    210                  if( *src == '\r' || *src == '\n' || *src == ' ' )
   \                     ??mbedtls_base64_decode_15: (+1)
   \   000000BC   0x781C             LDRB     R4,[R3, #+0]
   \   000000BE   0x2C0D             CMP      R4,#+13
   \   000000C0   0xD01F             BEQ      ??mbedtls_base64_decode_16
   \   000000C2   0x2C0A             CMP      R4,#+10
   \   000000C4   0xD01D             BEQ      ??mbedtls_base64_decode_16
   \   000000C6   0x2C20             CMP      R4,#+32
   \   000000C8   0xD01B             BEQ      ??mbedtls_base64_decode_16
    211                      continue;
    212          
    213                  j -= ( base64_dec_map[*src] == 64 );
   \   000000CA   0xBF00             Nop      
   \   000000CC   0x....             ADR.N    R7,base64_dec_map
   \   000000CE   0x5D3C             LDRB     R4,[R7, R4]
   \   000000D0   0x2C40             CMP      R4,#+64
   \   000000D2   0xD100             BNE      ??mbedtls_base64_decode_17
   \   000000D4   0x1E49             SUBS     R1,R1,#+1
    214                  x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
   \                     ??mbedtls_base64_decode_17: (+1)
   \   000000D6   0x01AF             LSLS     R7,R5,#+6
   \   000000D8   0x06A5             LSLS     R5,R4,#+26
   \   000000DA   0x0EAD             LSRS     R5,R5,#+26
   \   000000DC   0x433D             ORRS     R5,R5,R7
    215          
    216                  if( ++n == 4 )
   \   000000DE   0x1C52             ADDS     R2,R2,#+1
   \   000000E0   0x2A04             CMP      R2,#+4
   \   000000E2   0xD10E             BNE      ??mbedtls_base64_decode_16
    217                  {
    218                      n = 0;
   \   000000E4   0x2200             MOVS     R2,#+0
    219                      if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
   \   000000E6   0x2900             CMP      R1,#+0
   \   000000E8   0xD00B             BEQ      ??mbedtls_base64_decode_16
   \   000000EA   0x0C2C             LSRS     R4,R5,#+16
   \   000000EC   0x7034             STRB     R4,[R6, #+0]
   \   000000EE   0x1C76             ADDS     R6,R6,#+1
    220                      if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
   \   000000F0   0x2902             CMP      R1,#+2
   \   000000F2   0xD302             BCC      ??mbedtls_base64_decode_18
   \   000000F4   0x0A2C             LSRS     R4,R5,#+8
   \   000000F6   0x7034             STRB     R4,[R6, #+0]
   \   000000F8   0x1C76             ADDS     R6,R6,#+1
    221                      if( j > 2 ) *p++ = (unsigned char)( x       );
   \                     ??mbedtls_base64_decode_18: (+1)
   \   000000FA   0x2903             CMP      R1,#+3
   \   000000FC   0xD301             BCC      ??mbedtls_base64_decode_16
   \   000000FE   0x7035             STRB     R5,[R6, #+0]
   \   00000100   0x1C76             ADDS     R6,R6,#+1
    222                  }
    223              }
   \                     ??mbedtls_base64_decode_16: (+1)
   \   00000102   0x1C5B             ADDS     R3,R3,#+1
   \   00000104   0x9C00             LDR      R4,[SP, #+0]
   \   00000106   0x1E64             SUBS     R4,R4,#+1
   \   00000108   0x9400             STR      R4,[SP, #+0]
   \   0000010A   0xD1D7             BNE      ??mbedtls_base64_decode_15
    224          
    225              *olen = p - dst;
   \                     ??mbedtls_base64_decode_14: (+1)
   \   0000010C   0x9801             LDR      R0,[SP, #+4]
   \   0000010E   0x1A30             SUBS     R0,R6,R0
   \   00000110   0x9903             LDR      R1,[SP, #+12]
   \   00000112   0x6008             STR      R0,[R1, #+0]
    226          
    227              return( 0 );
   \   00000114   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_base64_decode_11: (+1)
   \   00000116   0xB005             ADD      SP,SP,#+20
   \   00000118   0xBCF0             POP      {R4-R7}
   \   0000011A   0x4770             BX       LR               ;; return
    228          }
    229          
    230          #if defined(MBEDTLS_SELF_TEST)
    231          

   \                                 In section .text, align 4, keep-with-next
    232          static const unsigned char base64_test_dec[64] =
   \                     base64_test_dec:
   \   00000000   0x24 0x48          DC8 36, 72, 110, 86, 135, 98, 90, 189, 191, 23, 217, 162, 196, 23, 26
   \              0x6E 0x56    
   \              0x87 0x62    
   \              0x5A 0xBD    
   \              0xBF 0x17    
   \              0xD9 0xA2    
   \              0xC4 0x17    
   \              0x1A         
   \   0000000F   0x01 0x94          DC8 1, 148, 237, 143, 30, 17, 179, 215, 9, 12, 182, 233, 16, 111, 34
   \              0xED 0x8F    
   \              0x1E 0x11    
   \              0xB3 0xD7    
   \              0x09 0x0C    
   \              0xB6 0xE9    
   \              0x10 0x6F    
   \              0x22         
   \   0000001E   0xEE 0x13          DC8 238, 19, 202, 179, 7, 5, 118, 201, 250, 49, 108, 8, 52, 255, 141
   \              0xCA 0xB3    
   \              0x07 0x05    
   \              0x76 0xC9    
   \              0xFA 0x31    
   \              0x6C 0x08    
   \              0x34 0xFF    
   \              0x8D         
   \   0000002D   0xC2 0x6C          DC8 194, 108, 56, 0, 67, 233, 84, 151, 175, 80, 75, 209, 65, 186, 149
   \              0x38 0x00    
   \              0x43 0xE9    
   \              0x54 0x97    
   \              0xAF 0x50    
   \              0x4B 0xD1    
   \              0x41 0xBA    
   \              0x95         
   \   0000003C   0x31 0x5A          DC8 49, 90, 11, 151
   \              0x0B 0x97    
    233          {
    234              0x24, 0x48, 0x6E, 0x56, 0x87, 0x62, 0x5A, 0xBD,
    235              0xBF, 0x17, 0xD9, 0xA2, 0xC4, 0x17, 0x1A, 0x01,
    236              0x94, 0xED, 0x8F, 0x1E, 0x11, 0xB3, 0xD7, 0x09,
    237              0x0C, 0xB6, 0xE9, 0x10, 0x6F, 0x22, 0xEE, 0x13,
    238              0xCA, 0xB3, 0x07, 0x05, 0x76, 0xC9, 0xFA, 0x31,
    239              0x6C, 0x08, 0x34, 0xFF, 0x8D, 0xC2, 0x6C, 0x38,
    240              0x00, 0x43, 0xE9, 0x54, 0x97, 0xAF, 0x50, 0x4B,
    241              0xD1, 0x41, 0xBA, 0x95, 0x31, 0x5A, 0x0B, 0x97
    242          };
    243          

   \                                 In section .text, align 4, keep-with-next
    244          static const unsigned char base64_test_enc[] =
   \                     base64_test_enc:
   \   00000000   0x4A 0x45          DC8 4AH, 45H, 68H, 75H, 56H, 6FH, 64H, 69H
   \              0x68 0x75    
   \              0x56 0x6F    
   \              0x64 0x69    
   \   00000008   0x57 0x72          DC8 57H, 72H, 32H, 2FH, 46H, 39H, 6DH, 69H
   \              0x32 0x2F    
   \              0x46 0x39    
   \              0x6D 0x69    
   \   00000010   0x78 0x42          DC8 78H, 42H, 63H, 61H, 41H, 5AH, 54H, 74H
   \              0x63 0x61    
   \              0x41 0x5A    
   \              0x54 0x74    
   \   00000018   0x6A 0x78          DC8 6AH, 78H, 34H, 52H, 73H, 39H, 63H, 4AH
   \              0x34 0x52    
   \              0x73 0x39    
   \              0x63 0x4A    
   \   00000020   0x44 0x4C          DC8 44H, 4CH, 62H, 70H, 45H, 47H, 38H, 69H
   \              0x62 0x70    
   \              0x45 0x47    
   \              0x38 0x69    
   \   00000028   0x37 0x68          DC8 37H, 68H, 50H, 4BH, 73H, 77H, 63H, 46H
   \              0x50 0x4B    
   \              0x73 0x77    
   \              0x63 0x46    
   \   00000030   0x64 0x73          DC8 64H, 73H, 6EH, 36H, 4DH, 57H, 77H, 49H
   \              0x6E 0x36    
   \              0x4D 0x57    
   \              0x77 0x49    
   \   00000038   0x4E 0x50          DC8 4EH, 50H, 2BH, 4EH, 77H, 6DH, 77H, 34H
   \              0x2B 0x4E    
   \              0x77 0x6D    
   \              0x77 0x34    
   \   00000040   0x41 0x45          DC8 41H, 45H, 50H, 70H, 56H, 4AH, 65H, 76H
   \              0x50 0x70    
   \              0x56 0x4A    
   \              0x65 0x76    
   \   00000048   0x55 0x45          DC8 55H, 45H, 76H, 52H, 51H, 62H, 71H, 56H
   \              0x76 0x52    
   \              0x51 0x62    
   \              0x71 0x56    
   \   00000050   0x4D 0x56          DC8 4DH, 56H, 6FH, 4CH, 6CH, 77H, 3DH, 3DH
   \              0x6F 0x4C    
   \              0x6C 0x77    
   \              0x3D 0x3D    
   \   00000058   0x00               DC8 0
   \   00000059   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    245              "JEhuVodiWr2/F9mixBcaAZTtjx4Rs9cJDLbpEG8i7hPK"
    246              "swcFdsn6MWwINP+Nwmw4AEPpVJevUEvRQbqVMVoLlw==";
    247          
    248          /*
    249           * Checkup routine
    250           */

   \                                 In section .text, align 4, keep-with-next
    251          int mbedtls_base64_self_test( int verbose )
    252          {
   \                     mbedtls_base64_self_test: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0A2             SUB      SP,SP,#+136
   \   00000004   0x0004             MOVS     R4,R0
    253              size_t len;
    254              const unsigned char *src;
    255              unsigned char buffer[128];
    256          
    257              if( verbose != 0 )
   \   00000006   0xD002             BEQ      ??mbedtls_base64_self_test_0
    258                  mbedtls_printf( "  Base64 encoding test: " );
   \   00000008   0x....             ADR.N    R0,?_0
   \   0000000A   0x.... 0x....      BL       printf
    259          
    260              src = base64_test_dec;
    261          
    262              if( mbedtls_base64_encode( buffer, sizeof( buffer ), &len, src, 64 ) != 0 ||
    263                   memcmp( base64_test_enc, buffer, 88 ) != 0 )
   \                     ??mbedtls_base64_self_test_0: (+1)
   \   0000000E   0xBF00             Nop      
   \   00000010   0x....             ADR.N    R6,base64_test_dec
   \   00000012   0x2040             MOVS     R0,#+64
   \   00000014   0x9000             STR      R0,[SP, #+0]
   \   00000016   0x0033             MOVS     R3,R6
   \   00000018   0xAA01             ADD      R2,SP,#+4
   \   0000001A   0x2180             MOVS     R1,#+128
   \   0000001C   0xA802             ADD      R0,SP,#+8
   \   0000001E   0x.... 0x....      BL       mbedtls_base64_encode
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD11E             BNE      ??mbedtls_base64_self_test_1
   \   00000026   0xBF00             Nop      
   \   00000028   0x....             ADR.N    R5,base64_test_enc
   \   0000002A   0x2258             MOVS     R2,#+88
   \   0000002C   0xA902             ADD      R1,SP,#+8
   \   0000002E   0x0028             MOVS     R0,R5
   \   00000030   0x.... 0x....      BL       memcmp
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD115             BNE      ??mbedtls_base64_self_test_1
    264              {
    265                  if( verbose != 0 )
    266                      mbedtls_printf( "failed\n" );
    267          
    268                  return( 1 );
    269              }
    270          
    271              if( verbose != 0 )
   \   00000038   0x2C00             CMP      R4,#+0
   \   0000003A   0xD002             BEQ      ??mbedtls_base64_self_test_2
    272                  mbedtls_printf( "passed\n  Base64 decoding test: " );
   \   0000003C   0x....             ADR.N    R0,?_2
   \   0000003E   0x.... 0x....      BL       printf
    273          
    274              src = base64_test_enc;
    275          
    276              if( mbedtls_base64_decode( buffer, sizeof( buffer ), &len, src, 88 ) != 0 ||
    277                   memcmp( base64_test_dec, buffer, 64 ) != 0 )
   \                     ??mbedtls_base64_self_test_2: (+1)
   \   00000042   0x2058             MOVS     R0,#+88
   \   00000044   0x9000             STR      R0,[SP, #+0]
   \   00000046   0x002B             MOVS     R3,R5
   \   00000048   0xAA01             ADD      R2,SP,#+4
   \   0000004A   0x2180             MOVS     R1,#+128
   \   0000004C   0xA802             ADD      R0,SP,#+8
   \   0000004E   0x.... 0x....      BL       mbedtls_base64_decode
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD106             BNE      ??mbedtls_base64_self_test_1
   \   00000056   0x2240             MOVS     R2,#+64
   \   00000058   0xA902             ADD      R1,SP,#+8
   \   0000005A   0x0030             MOVS     R0,R6
   \   0000005C   0x.... 0x....      BL       memcmp
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD006             BEQ      ??mbedtls_base64_self_test_3
    278              {
    279                  if( verbose != 0 )
   \                     ??mbedtls_base64_self_test_1: (+1)
   \   00000064   0x2C00             CMP      R4,#+0
   \   00000066   0xD002             BEQ      ??mbedtls_base64_self_test_4
    280                      mbedtls_printf( "failed\n" );
   \   00000068   0x....             ADR.N    R0,?_1
   \   0000006A   0x.... 0x....      BL       printf
    281          
    282                  return( 1 );
   \                     ??mbedtls_base64_self_test_4: (+1)
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0xE006             B        ??mbedtls_base64_self_test_5
    283              }
    284          
    285              if( verbose != 0 )
   \                     ??mbedtls_base64_self_test_3: (+1)
   \   00000072   0x2C00             CMP      R4,#+0
   \   00000074   0xD003             BEQ      ??mbedtls_base64_self_test_6
    286                  mbedtls_printf( "passed\n\n" );
   \   00000076   0xBF00             Nop      
   \   00000078   0x....             ADR.N    R0,?_3
   \   0000007A   0x.... 0x....      BL       printf
    287          
    288              return( 0 );
   \                     ??mbedtls_base64_self_test_6: (+1)
   \   0000007E   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_base64_self_test_5: (+1)
   \   00000080   0xB022             ADD      SP,SP,#+136
   \   00000082   0xBD70             POP      {R4-R6,PC}       ;; return
    289          }

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x20 0x20          DC8 "  Base64 encoding test: "
   \              0x42 0x61    
   \              0x73 0x65    
   \              0x36 0x34    
   \              0x20 0x65    
   \              0x6E 0x63    
   \              0x6F 0x64    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x3A 0x20    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x66 0x61          DC8 "failed\012"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x70 0x61          DC8 "passed\012  Base64 decoding test: "
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x20    
   \              0x20 0x42    
   \              0x61 0x73    
   \              0x65 0x36    
   \              0x34 0x20    
   \              0x64 0x65    
   \              0x63 0x6F    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x74    
   \              0x65 0x73    
   \              0x74 0x3A    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x70 0x61          DC8 "passed\012\012"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    290          
    291          #endif /* MBEDTLS_SELF_TEST */
    292          
    293          #endif /* MBEDTLS_BASE64_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      36   mbedtls_base64_decode
      32   mbedtls_base64_encode
        32 __aeabi_uidiv
        32 __aeabi_uidivmod
     152   mbedtls_base64_self_test
       152   -> mbedtls_base64_decode
       152   -> mbedtls_base64_encode
       152   -> memcmp
       152   -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      28  ?_0
       8  ?_1
      32  ?_2
      12  ?_3
     128  base64_dec_map
      64  base64_enc_map
      64  base64_test_dec
      92  base64_test_enc
     284  mbedtls_base64_decode
     250  mbedtls_base64_encode
     132  mbedtls_base64_self_test

 
 1 094 bytes in section .text
 
 1 094 bytes of CODE memory

Errors: none
Warnings: none
