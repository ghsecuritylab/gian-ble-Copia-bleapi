###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:27
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\mbedtls\src\ecp.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\ecp.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\ecp.s.txt -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\ecp.o
#        .\mbed-os\features\mbedtls\src\ecp.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\ecp.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\ecp.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\mbedtls\src\ecp.c
      1          /*
      2           *  Elliptic curves over GF(p): generic functions
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          /*
     23           * References:
     24           *
     25           * SEC1 http://www.secg.org/index.php?action=secg,docs_secg
     26           * GECC = Guide to Elliptic Curve Cryptography - Hankerson, Menezes, Vanstone
     27           * FIPS 186-3 http://csrc.nist.gov/publications/fips/fips186-3/fips_186-3.pdf
     28           * RFC 4492 for the related TLS structures and constants
     29           *
     30           * [Curve25519] http://cr.yp.to/ecdh/curve25519-20060209.pdf
     31           *
     32           * [2] CORON, Jean-S'ebastien. Resistance against differential power analysis
     33           *     for elliptic curve cryptosystems. In : Cryptographic Hardware and
     34           *     Embedded Systems. Springer Berlin Heidelberg, 1999. p. 292-302.
     35           *     <http://link.springer.com/chapter/10.1007/3-540-48059-5_25>
     36           *
     37           * [3] HEDABOU, Mustapha, PINEL, Pierre, et B'EN'ETEAU, Lucien. A comb method to
     38           *     render ECC resistant against Side Channel Attacks. IACR Cryptology
     39           *     ePrint Archive, 2004, vol. 2004, p. 342.
     40           *     <http://eprint.iacr.org/2004/342.pdf>
     41           */
     42          
     43          #if !defined(MBEDTLS_CONFIG_FILE)
     44          #include "mbedtls/config.h"
     45          #else
     46          #include MBEDTLS_CONFIG_FILE
     47          #endif
     48          
     49          #if defined(MBEDTLS_ECP_C)
     50          
     51          #include "mbedtls/ecp.h"
     52          #include "mbedtls/threading.h"
     53          
     54          #include <string.h>
     55          
     56          #if !defined(MBEDTLS_ECP_ALT)
     57          
     58          #if defined(MBEDTLS_PLATFORM_C)
     59          #include "mbedtls/platform.h"
     60          #else
     61          #include <stdlib.h>
     62          #include <stdio.h>
     63          #define mbedtls_printf     printf
     64          #define mbedtls_calloc    calloc
     65          #define mbedtls_free       free
     66          #endif
     67          
     68          #include "mbedtls/ecp_internal.h"
     69          
     70          #if ( defined(__ARMCC_VERSION) || defined(_MSC_VER) ) && \
     71              !defined(inline) && !defined(__cplusplus)
     72          #define inline __inline
     73          #endif
     74          
     75          /* Implementation that should never be optimized out by the compiler */
     76          static void mbedtls_zeroize( void *v, size_t n ) {
     77              volatile unsigned char *p = v; while( n-- ) *p++ = 0;
     78          }
     79          
     80          #if defined(MBEDTLS_SELF_TEST)
     81          /*
     82           * Counts of point addition and doubling, and field multiplications.
     83           * Used to test resistance of point multiplication to simple timing attacks.
     84           */

   \                                 In section .bss, align 4
     85          static unsigned long add_count, dbl_count, mul_count;
   \                     add_count:
   \   00000000                      DS8 4
   \   00000004                      DS8 4
   \   00000008                      DS8 4
     86          #endif
     87          
     88          #if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED) ||   \
     89              defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED) ||   \
     90              defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED) ||   \
     91              defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED) ||   \
     92              defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED) ||   \
     93              defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)   ||   \
     94              defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)   ||   \
     95              defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)   ||   \
     96              defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED) ||   \
     97              defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED) ||   \
     98              defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)
     99          #define ECP_SHORTWEIERSTRASS
    100          #endif
    101          
    102          #if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)
    103          #define ECP_MONTGOMERY
    104          #endif
    105          
    106          /*
    107           * Curve types: internal for now, might be exposed later
    108           */
    109          typedef enum
    110          {
    111              ECP_TYPE_NONE = 0,
    112              ECP_TYPE_SHORT_WEIERSTRASS,    /* y^2 = x^3 + a x + b      */
    113              ECP_TYPE_MONTGOMERY,           /* y^2 = x^3 + a x^2 + x    */
    114          } ecp_curve_type;
    115          
    116          /*
    117           * List of supported curves:
    118           *  - internal ID
    119           *  - TLS NamedCurve ID (RFC 4492 sec. 5.1.1, RFC 7071 sec. 2)
    120           *  - size in bits
    121           *  - readable name
    122           *
    123           * Curves are listed in order: largest curves first, and for a given size,
    124           * fastest curves first. This provides the default order for the SSL module.
    125           *
    126           * Reminder: update profiles in x509_crt.c when adding a new curves!
    127           */

   \                                 In section .text, align 4, keep-with-next
    128          static const mbedtls_ecp_curve_info ecp_supported_curves[] =
   \                     ecp_supported_curves:
   \   00000000   0x04 0x00          DC8 4, 0
   \   00000002   0x0018 0x0180      DC16 24, 384
   \   00000006   0x00 0x00          DC8 0, 0
   \   00000008   0x........         DC32 ?_0
   \   0000000C   0x03 0x00          DC8 3, 0
   \   0000000E   0x0017 0x0100      DC16 23, 256
   \   00000012   0x00 0x00          DC8 0, 0
   \   00000014   0x........         DC32 ?_1
   \   00000018   0x00 0x00          DC8 0, 0
   \   0000001A   0x0000 0x0000      DC16 0, 0
   \   0000001E   0x00 0x00          DC8 0, 0
   \   00000020   0x00000000         DC32 0H
    129          {
    130          #if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)
    131              { MBEDTLS_ECP_DP_SECP521R1,    25,     521,    "secp521r1"         },
    132          #endif
    133          #if defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)
    134              { MBEDTLS_ECP_DP_BP512R1,      28,     512,    "brainpoolP512r1"   },
    135          #endif
    136          #if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
    137              { MBEDTLS_ECP_DP_SECP384R1,    24,     384,    "secp384r1"         },
    138          #endif
    139          #if defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)
    140              { MBEDTLS_ECP_DP_BP384R1,      27,     384,    "brainpoolP384r1"   },
    141          #endif
    142          #if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
    143              { MBEDTLS_ECP_DP_SECP256R1,    23,     256,    "secp256r1"         },
    144          #endif
    145          #if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)
    146              { MBEDTLS_ECP_DP_SECP256K1,    22,     256,    "secp256k1"         },
    147          #endif
    148          #if defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)
    149              { MBEDTLS_ECP_DP_BP256R1,      26,     256,    "brainpoolP256r1"   },
    150          #endif
    151          #if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)
    152              { MBEDTLS_ECP_DP_SECP224R1,    21,     224,    "secp224r1"         },
    153          #endif
    154          #if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)
    155              { MBEDTLS_ECP_DP_SECP224K1,    20,     224,    "secp224k1"         },
    156          #endif
    157          #if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)
    158              { MBEDTLS_ECP_DP_SECP192R1,    19,     192,    "secp192r1"         },
    159          #endif
    160          #if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)
    161              { MBEDTLS_ECP_DP_SECP192K1,    18,     192,    "secp192k1"         },
    162          #endif
    163              { MBEDTLS_ECP_DP_NONE,          0,     0,      NULL                },
    164          };
    165          
    166          #define ECP_NB_CURVES   sizeof( ecp_supported_curves ) /    \
    167                                  sizeof( ecp_supported_curves[0] )
    168          
    169          static mbedtls_ecp_group_id ecp_supported_grp_id[ECP_NB_CURVES];
    170          
    171          /*
    172           * List of supported curves and associated info
    173           */

   \                                 In section .text, align 2, keep-with-next
    174          const mbedtls_ecp_curve_info *mbedtls_ecp_curve_list( void )
    175          {
    176              return( ecp_supported_curves );
   \                     mbedtls_ecp_curve_list: (+1)
   \   00000000   0x....             LDR      R0,??DataTable21
   \   00000002   0x4770             BX       LR               ;; return
    177          }
    178          
    179          /*
    180           * List of supported curves, group ID only
    181           */

   \                                 In section .text, align 2, keep-with-next
    182          const mbedtls_ecp_group_id *mbedtls_ecp_grp_id_list( void )
    183          {
    184              static int init_done = 0;
    185          
    186              if( ! init_done )
   \                     mbedtls_ecp_grp_id_list: (+1)
   \   00000000   0x....             LDR      R0,??DataTable21_1
   \   00000002   0x6841             LDR      R1,[R0, #+4]
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD000             BEQ      ??mbedtls_ecp_grp_id_list_0
   \   00000008   0x4770             BX       LR
    187              {
    188                  size_t i = 0;
   \                     ??mbedtls_ecp_grp_id_list_0: (+1)
   \   0000000A   0xB470             PUSH     {R4-R6}
   \   0000000C   0x2200             MOVS     R2,#+0
    189                  const mbedtls_ecp_curve_info *curve_info;
    190          
    191                  for( curve_info = mbedtls_ecp_curve_list();
   \   0000000E   0x....             LDR      R3,??DataTable21
   \   00000010   0x0004             MOVS     R4,R0
   \   00000012   0xE003             B        ??mbedtls_ecp_grp_id_list_1
    192                       curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
    193                       curve_info++ )
    194                  {
    195                      ecp_supported_grp_id[i++] = curve_info->grp_id;
   \                     ??mbedtls_ecp_grp_id_list_2: (+1)
   \   00000014   0x7025             STRB     R5,[R4, #+0]
   \   00000016   0x1C52             ADDS     R2,R2,#+1
    196                  }
   \   00000018   0x330C             ADDS     R3,R3,#+12
   \   0000001A   0x1C64             ADDS     R4,R4,#+1
   \                     ??mbedtls_ecp_grp_id_list_1: (+1)
   \   0000001C   0x781D             LDRB     R5,[R3, #+0]
   \   0000001E   0x002E             MOVS     R6,R5
   \   00000020   0xD1F8             BNE      ??mbedtls_ecp_grp_id_list_2
    197                  ecp_supported_grp_id[i] = MBEDTLS_ECP_DP_NONE;
   \   00000022   0x5481             STRB     R1,[R0, R2]
    198          
    199                  init_done = 1;
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0x6041             STR      R1,[R0, #+4]
    200              }
    201          
    202              return( ecp_supported_grp_id );
   \   00000028   0xBC70             POP      {R4-R6}
   \   0000002A   0x4770             BX       LR               ;; return
    203          }

   \                                 In section .bss, align 4
   \                     ecp_supported_grp_id:
   \   00000000                      DS8 4
   \   00000004                      DS8 4
    204          
    205          /*
    206           * Get the curve info for the internal identifier
    207           */

   \                                 In section .text, align 2, keep-with-next
    208          const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_grp_id( mbedtls_ecp_group_id grp_id )
    209          {
    210              const mbedtls_ecp_curve_info *curve_info;
    211          
    212              for( curve_info = mbedtls_ecp_curve_list();
   \                     mbedtls_ecp_curve_info_from_grp_id: (+1)
   \   00000000   0x....             LDR      R1,??DataTable21
   \   00000002   0xE000             B        ??mbedtls_ecp_curve_info_from_grp_id_0
    213                   curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
    214                   curve_info++ )
   \                     ??mbedtls_ecp_curve_info_from_grp_id_1: (+1)
   \   00000004   0x310C             ADDS     R1,R1,#+12
   \                     ??mbedtls_ecp_curve_info_from_grp_id_0: (+1)
   \   00000006   0x780A             LDRB     R2,[R1, #+0]
   \   00000008   0x0013             MOVS     R3,R2
   \   0000000A   0xD003             BEQ      ??mbedtls_ecp_curve_info_from_grp_id_2
    215              {
    216                  if( curve_info->grp_id == grp_id )
   \   0000000C   0x4282             CMP      R2,R0
   \   0000000E   0xD1F9             BNE      ??mbedtls_ecp_curve_info_from_grp_id_1
    217                      return( curve_info );
   \   00000010   0x0008             MOVS     R0,R1
   \   00000012   0x4770             BX       LR
    218              }
    219          
    220              return( NULL );
   \                     ??mbedtls_ecp_curve_info_from_grp_id_2: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x4770             BX       LR               ;; return
    221          }
    222          
    223          /*
    224           * Get the curve info from the TLS identifier
    225           */

   \                                 In section .text, align 2, keep-with-next
    226          const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_tls_id( uint16_t tls_id )
    227          {
    228              const mbedtls_ecp_curve_info *curve_info;
    229          
    230              for( curve_info = mbedtls_ecp_curve_list();
   \                     mbedtls_ecp_curve_info_from_tls_id: (+1)
   \   00000000   0x....             LDR      R1,??DataTable21
   \   00000002   0xE000             B        ??mbedtls_ecp_curve_info_from_tls_id_0
    231                   curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
    232                   curve_info++ )
   \                     ??mbedtls_ecp_curve_info_from_tls_id_1: (+1)
   \   00000004   0x310C             ADDS     R1,R1,#+12
   \                     ??mbedtls_ecp_curve_info_from_tls_id_0: (+1)
   \   00000006   0x780A             LDRB     R2,[R1, #+0]
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xD004             BEQ      ??mbedtls_ecp_curve_info_from_tls_id_2
    233              {
    234                  if( curve_info->tls_id == tls_id )
   \   0000000C   0x884A             LDRH     R2,[R1, #+2]
   \   0000000E   0x4282             CMP      R2,R0
   \   00000010   0xD1F8             BNE      ??mbedtls_ecp_curve_info_from_tls_id_1
    235                      return( curve_info );
   \   00000012   0x0008             MOVS     R0,R1
   \   00000014   0x4770             BX       LR
    236              }
    237          
    238              return( NULL );
   \                     ??mbedtls_ecp_curve_info_from_tls_id_2: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x4770             BX       LR               ;; return
    239          }
    240          
    241          /*
    242           * Get the curve info from the name
    243           */

   \                                 In section .text, align 2, keep-with-next
    244          const mbedtls_ecp_curve_info *mbedtls_ecp_curve_info_from_name( const char *name )
    245          {
   \                     mbedtls_ecp_curve_info_from_name: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    246              const mbedtls_ecp_curve_info *curve_info;
    247          
    248              for( curve_info = mbedtls_ecp_curve_list();
   \   00000004   0x....             LDR      R5,??DataTable21
   \   00000006   0xE000             B        ??mbedtls_ecp_curve_info_from_name_0
    249                   curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
    250                   curve_info++ )
   \                     ??mbedtls_ecp_curve_info_from_name_1: (+1)
   \   00000008   0x350C             ADDS     R5,R5,#+12
   \                     ??mbedtls_ecp_curve_info_from_name_0: (+1)
   \   0000000A   0x7828             LDRB     R0,[R5, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD006             BEQ      ??mbedtls_ecp_curve_info_from_name_2
    251              {
    252                  if( strcmp( curve_info->name, name ) == 0 )
   \   00000010   0x0021             MOVS     R1,R4
   \   00000012   0x68A8             LDR      R0,[R5, #+8]
   \   00000014   0x.... 0x....      BL       strcmp
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD1F5             BNE      ??mbedtls_ecp_curve_info_from_name_1
    253                      return( curve_info );
   \   0000001C   0x0028             MOVS     R0,R5
    254              }
    255          
    256              return( NULL );
   \                     ??mbedtls_ecp_curve_info_from_name_2: (+1)
   \   0000001E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    257          }
    258          
    259          /*
    260           * Get the type of a curve
    261           */
    262          static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
    263          {
    264              if( grp->G.X.p == NULL )
    265                  return( ECP_TYPE_NONE );
    266          
    267              if( grp->G.Y.p == NULL )
    268                  return( ECP_TYPE_MONTGOMERY );
    269              else
    270                  return( ECP_TYPE_SHORT_WEIERSTRASS );
    271          }
    272          
    273          /*
    274           * Initialize (the components of) a point
    275           */

   \                                 In section .text, align 2, keep-with-next
    276          void mbedtls_ecp_point_init( mbedtls_ecp_point *pt )
    277          {
   \                     mbedtls_ecp_point_init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    278              if( pt == NULL )
   \   00000004   0xD009             BEQ      ??mbedtls_ecp_point_init_0
    279                  return;
    280          
    281              mbedtls_mpi_init( &pt->X );
   \   00000006   0x.... 0x....      BL       mbedtls_mpi_init
    282              mbedtls_mpi_init( &pt->Y );
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x300C             ADDS     R0,R0,#+12
   \   0000000E   0x.... 0x....      BL       mbedtls_mpi_init
    283              mbedtls_mpi_init( &pt->Z );
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x3018             ADDS     R0,R0,#+24
   \   00000016   0x.... 0x....      BL       mbedtls_mpi_init
    284          }
   \                     ??mbedtls_ecp_point_init_0: (+1)
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
    285          
    286          /*
    287           * Initialize (the components of) a group
    288           */

   \                                 In section .text, align 2, keep-with-next
    289          void mbedtls_ecp_group_init( mbedtls_ecp_group *grp )
    290          {
    291              if( grp == NULL )
   \                     mbedtls_ecp_group_init: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD100             BNE      ??mbedtls_ecp_group_init_0
   \   00000004   0x4770             BX       LR
    292                  return;
    293          
    294              memset( grp, 0, sizeof( mbedtls_ecp_group ) );
   \                     ??mbedtls_ecp_group_init_0: (+1)
   \   00000006   0xB580             PUSH     {R7,LR}
   \   00000008   0x217C             MOVS     R1,#+124
   \   0000000A   0x.... 0x....      BL       __aeabi_memclr4
    295          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
    296          
    297          /*
    298           * Initialize (the components of) a key pair
    299           */

   \                                 In section .text, align 2, keep-with-next
    300          void mbedtls_ecp_keypair_init( mbedtls_ecp_keypair *key )
    301          {
   \                     mbedtls_ecp_keypair_init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    302              if( key == NULL )
   \   00000004   0xD013             BEQ      ??mbedtls_ecp_keypair_init_0
    303                  return;
    304          
    305              mbedtls_ecp_group_init( &key->grp );
   \   00000006   0x217C             MOVS     R1,#+124
   \   00000008   0x.... 0x....      BL       __aeabi_memclr4
    306              mbedtls_mpi_init( &key->d );
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x307C             ADDS     R0,R0,#+124
   \   00000010   0x.... 0x....      BL       mbedtls_mpi_init
    307              mbedtls_ecp_point_init( &key->Q );
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x3088             ADDS     R0,R0,#+136
   \   00000018   0xD009             BEQ      ??mbedtls_ecp_keypair_init_0
   \   0000001A   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x3094             ADDS     R0,R0,#+148
   \   00000022   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x30A0             ADDS     R0,R0,#+160
   \   0000002A   0x.... 0x....      BL       mbedtls_mpi_init
    308          }
   \                     ??mbedtls_ecp_keypair_init_0: (+1)
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
    309          
    310          /*
    311           * Unallocate (the components of) a point
    312           */

   \                                 In section .text, align 2, keep-with-next
    313          void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
    314          {
   \                     mbedtls_ecp_point_free: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    315              if( pt == NULL )
   \   00000004   0xD009             BEQ      ??mbedtls_ecp_point_free_0
    316                  return;
    317          
    318              mbedtls_mpi_free( &( pt->X ) );
   \   00000006   0x.... 0x....      BL       mbedtls_mpi_free
    319              mbedtls_mpi_free( &( pt->Y ) );
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x300C             ADDS     R0,R0,#+12
   \   0000000E   0x.... 0x....      BL       mbedtls_mpi_free
    320              mbedtls_mpi_free( &( pt->Z ) );
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x3018             ADDS     R0,R0,#+24
   \   00000016   0x.... 0x....      BL       mbedtls_mpi_free
    321          }
   \                     ??mbedtls_ecp_point_free_0: (+1)
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
    322          
    323          /*
    324           * Unallocate (the components of) a group
    325           */

   \                                 In section .text, align 2, keep-with-next
    326          void mbedtls_ecp_group_free( mbedtls_ecp_group *grp )
    327          {
   \                     mbedtls_ecp_group_free: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    328              size_t i;
    329          
    330              if( grp == NULL )
   \   00000004   0xD03F             BEQ      ??mbedtls_ecp_group_free_0
    331                  return;
    332          
    333              if( grp->h != 1 )
   \   00000006   0x6E20             LDR      R0,[R4, #+96]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD01D             BEQ      ??mbedtls_ecp_group_free_1
    334              {
    335                  mbedtls_mpi_free( &grp->P );
   \   0000000C   0x1D20             ADDS     R0,R4,#+4
   \   0000000E   0x.... 0x....      BL       mbedtls_mpi_free
    336                  mbedtls_mpi_free( &grp->A );
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x3010             ADDS     R0,R0,#+16
   \   00000016   0x.... 0x....      BL       mbedtls_mpi_free
    337                  mbedtls_mpi_free( &grp->B );
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x301C             ADDS     R0,R0,#+28
   \   0000001E   0x.... 0x....      BL       mbedtls_mpi_free
    338                  mbedtls_ecp_point_free( &grp->G );
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x3028             ADDS     R0,R0,#+40
   \   00000026   0xD00B             BEQ      ??mbedtls_ecp_group_free_2
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x3028             ADDS     R0,R0,#+40
   \   0000002C   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0x3034             ADDS     R0,R0,#+52
   \   00000034   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0x3040             ADDS     R0,R0,#+64
   \   0000003C   0x.... 0x....      BL       mbedtls_mpi_free
    339                  mbedtls_mpi_free( &grp->N );
   \                     ??mbedtls_ecp_group_free_2: (+1)
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0x304C             ADDS     R0,R0,#+76
   \   00000044   0x.... 0x....      BL       mbedtls_mpi_free
    340              }
    341          
    342              if( grp->T != NULL )
   \                     ??mbedtls_ecp_group_free_1: (+1)
   \   00000048   0x6F60             LDR      R0,[R4, #+116]
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD017             BEQ      ??mbedtls_ecp_group_free_3
    343              {
    344                  for( i = 0; i < grp->T_size; i++ )
   \   0000004E   0x2500             MOVS     R5,#+0
   \   00000050   0x2700             MOVS     R7,#+0
   \   00000052   0xE00E             B        ??mbedtls_ecp_group_free_4
    345                      mbedtls_ecp_point_free( &grp->T[i] );
   \                     ??mbedtls_ecp_group_free_5: (+1)
   \   00000054   0x1946             ADDS     R6,R0,R5
   \   00000056   0xD00A             BEQ      ??mbedtls_ecp_group_free_6
   \   00000058   0x0030             MOVS     R0,R6
   \   0000005A   0x.... 0x....      BL       mbedtls_mpi_free
   \   0000005E   0x0030             MOVS     R0,R6
   \   00000060   0x300C             ADDS     R0,R0,#+12
   \   00000062   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000066   0x0030             MOVS     R0,R6
   \   00000068   0x3018             ADDS     R0,R0,#+24
   \   0000006A   0x.... 0x....      BL       mbedtls_mpi_free
   \                     ??mbedtls_ecp_group_free_6: (+1)
   \   0000006E   0x1C7F             ADDS     R7,R7,#+1
   \   00000070   0x3524             ADDS     R5,R5,#+36
   \                     ??mbedtls_ecp_group_free_4: (+1)
   \   00000072   0x6F60             LDR      R0,[R4, #+116]
   \   00000074   0x6FA1             LDR      R1,[R4, #+120]
   \   00000076   0x428F             CMP      R7,R1
   \   00000078   0xD3EC             BCC      ??mbedtls_ecp_group_free_5
    346                  mbedtls_free( grp->T );
   \   0000007A   0x.... 0x....      BL       free
    347              }
    348          
    349              mbedtls_zeroize( grp, sizeof( mbedtls_ecp_group ) );
   \                     ??mbedtls_ecp_group_free_3: (+1)
   \   0000007E   0x217C             MOVS     R1,#+124
   \   00000080   0x0020             MOVS     R0,R4
   \   00000082   0x.... 0x....      BL       __aeabi_memclr
    350          }
   \                     ??mbedtls_ecp_group_free_0: (+1)
   \   00000086   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    351          
    352          /*
    353           * Unallocate (the components of) a key pair
    354           */

   \                                 In section .text, align 2, keep-with-next
    355          void mbedtls_ecp_keypair_free( mbedtls_ecp_keypair *key )
    356          {
   \                     mbedtls_ecp_keypair_free: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    357              if( key == NULL )
   \   00000004   0xD012             BEQ      ??mbedtls_ecp_keypair_free_0
    358                  return;
    359          
    360              mbedtls_ecp_group_free( &key->grp );
   \   00000006   0x.... 0x....      BL       mbedtls_ecp_group_free
    361              mbedtls_mpi_free( &key->d );
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x307C             ADDS     R0,R0,#+124
   \   0000000E   0x.... 0x....      BL       mbedtls_mpi_free
    362              mbedtls_ecp_point_free( &key->Q );
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x3088             ADDS     R0,R0,#+136
   \   00000016   0xD009             BEQ      ??mbedtls_ecp_keypair_free_0
   \   00000018   0x.... 0x....      BL       mbedtls_mpi_free
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x3094             ADDS     R0,R0,#+148
   \   00000020   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x30A0             ADDS     R0,R0,#+160
   \   00000028   0x.... 0x....      BL       mbedtls_mpi_free
    363          }
   \                     ??mbedtls_ecp_keypair_free_0: (+1)
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
    364          
    365          /*
    366           * Copy the contents of a point
    367           */

   \                                 In section .text, align 2, keep-with-next
    368          int mbedtls_ecp_copy( mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
    369          {
   \                     mbedtls_ecp_copy: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    370              int ret;
    371          
    372              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
   \   00000006   0x.... 0x....      BL       mbedtls_mpi_copy
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD10D             BNE      ??mbedtls_ecp_copy_0
    373              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
   \   0000000E   0x0029             MOVS     R1,R5
   \   00000010   0x310C             ADDS     R1,R1,#+12
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x300C             ADDS     R0,R0,#+12
   \   00000016   0x.... 0x....      BL       mbedtls_mpi_copy
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD105             BNE      ??mbedtls_ecp_copy_0
    374              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
   \   0000001E   0x0029             MOVS     R1,R5
   \   00000020   0x3118             ADDS     R1,R1,#+24
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x3018             ADDS     R0,R0,#+24
   \   00000026   0x.... 0x....      BL       mbedtls_mpi_copy
    375          
    376          cleanup:
    377              return( ret );
   \                     ??mbedtls_ecp_copy_0: (+1)
   \   0000002A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    378          }
    379          
    380          /*
    381           * Copy the contents of a group object
    382           */

   \                                 In section .text, align 2, keep-with-next
    383          int mbedtls_ecp_group_copy( mbedtls_ecp_group *dst, const mbedtls_ecp_group *src )
    384          {
   \                     mbedtls_ecp_group_copy: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    385              return mbedtls_ecp_group_load( dst, src->id );
   \   00000002   0x7809             LDRB     R1,[R1, #+0]
   \   00000004   0x.... 0x....      BL       mbedtls_ecp_group_load
   \   00000008   0xBD02             POP      {R1,PC}          ;; return
    386          }
    387          
    388          /*
    389           * Set point to zero
    390           */

   \                                 In section .text, align 2, keep-with-next
    391          int mbedtls_ecp_set_zero( mbedtls_ecp_point *pt )
    392          {
   \                     mbedtls_ecp_set_zero: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    393              int ret;
    394          
    395              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x.... 0x....      BL       mbedtls_mpi_lset
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD10B             BNE      ??mbedtls_ecp_set_zero_0
    396              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x300C             ADDS     R0,R0,#+12
   \   00000014   0x.... 0x....      BL       mbedtls_mpi_lset
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD104             BNE      ??mbedtls_ecp_set_zero_0
    397              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x3018             ADDS     R0,R0,#+24
   \   00000022   0x.... 0x....      BL       mbedtls_mpi_lset
    398          
    399          cleanup:
    400              return( ret );
   \                     ??mbedtls_ecp_set_zero_0: (+1)
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    401          }
    402          
    403          /*
    404           * Tell if a point is zero
    405           */

   \                                 In section .text, align 2, keep-with-next
    406          int mbedtls_ecp_is_zero( mbedtls_ecp_point *pt )
    407          {
   \                     mbedtls_ecp_is_zero: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    408              return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x3018             ADDS     R0,R0,#+24
   \   00000006   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   0000000A   0x1E40             SUBS     R0,R0,#+1
   \   0000000C   0x4180             SBCS     R0,R0,R0
   \   0000000E   0x0FC0             LSRS     R0,R0,#+31
   \   00000010   0xBD02             POP      {R1,PC}          ;; return
    409          }
    410          
    411          /*
    412           * Compare two points lazyly
    413           */

   \                                 In section .text, align 2, keep-with-next
    414          int mbedtls_ecp_point_cmp( const mbedtls_ecp_point *P,
    415                                     const mbedtls_ecp_point *Q )
    416          {
   \                     mbedtls_ecp_point_cmp: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    417              if( mbedtls_mpi_cmp_mpi( &P->X, &Q->X ) == 0 &&
    418                  mbedtls_mpi_cmp_mpi( &P->Y, &Q->Y ) == 0 &&
    419                  mbedtls_mpi_cmp_mpi( &P->Z, &Q->Z ) == 0 )
   \   00000006   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD10F             BNE      ??mbedtls_ecp_point_cmp_0
   \   0000000E   0x0029             MOVS     R1,R5
   \   00000010   0x310C             ADDS     R1,R1,#+12
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x300C             ADDS     R0,R0,#+12
   \   00000016   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD107             BNE      ??mbedtls_ecp_point_cmp_0
   \   0000001E   0x0029             MOVS     R1,R5
   \   00000020   0x3118             ADDS     R1,R1,#+24
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x3018             ADDS     R0,R0,#+24
   \   00000026   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD000             BEQ      ??mbedtls_ecp_point_cmp_1
    420              {
    421                  return( 0 );
    422              }
    423          
    424              return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \                     ??mbedtls_ecp_point_cmp_0: (+1)
   \   0000002E   0x....             LDR      R0,??DataTable28  ;; 0xffffb080
   \                     ??mbedtls_ecp_point_cmp_1: (+1)
   \   00000030   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    425          }
    426          
    427          /*
    428           * Import a non-zero point from ASCII strings
    429           */

   \                                 In section .text, align 2, keep-with-next
    430          int mbedtls_ecp_point_read_string( mbedtls_ecp_point *P, int radix,
    431                                     const char *x, const char *y )
    432          {
   \                     mbedtls_ecp_point_read_string: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x001E             MOVS     R6,R3
    433              int ret;
    434          
    435              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &P->X, radix, x ) );
   \   00000008   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD10C             BNE      ??mbedtls_ecp_point_read_string_0
    436              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &P->Y, radix, y ) );
   \   00000010   0x0032             MOVS     R2,R6
   \   00000012   0x0029             MOVS     R1,R5
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x300C             ADDS     R0,R0,#+12
   \   00000018   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD104             BNE      ??mbedtls_ecp_point_read_string_0
    437              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &P->Z, 1 ) );
   \   00000020   0x2101             MOVS     R1,#+1
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x3018             ADDS     R0,R0,#+24
   \   00000026   0x.... 0x....      BL       mbedtls_mpi_lset
    438          
    439          cleanup:
    440              return( ret );
   \                     ??mbedtls_ecp_point_read_string_0: (+1)
   \   0000002A   0xBD70             POP      {R4-R6,PC}       ;; return
    441          }
    442          
    443          /*
    444           * Export a point into unsigned binary data (SEC1 2.3.3)
    445           */

   \                                 In section .text, align 2, keep-with-next
    446          int mbedtls_ecp_point_write_binary( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *P,
    447                                      int format, size_t *olen,
    448                                      unsigned char *buf, size_t buflen )
    449          {
   \                     mbedtls_ecp_point_write_binary: (+1)
   \   00000000   0xB5FF             PUSH     {R0-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
    450              int ret = 0;
   \   00000004   0x2600             MOVS     R6,#+0
   \   00000006   0x2700             MOVS     R7,#+0
    451              size_t plen;
    452          
    453              if( format != MBEDTLS_ECP_PF_UNCOMPRESSED &&
    454                  format != MBEDTLS_ECP_PF_COMPRESSED )
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xD003             BEQ      ??mbedtls_ecp_point_write_binary_0
   \   0000000C   0x2A01             CMP      R2,#+1
   \   0000000E   0xD001             BEQ      ??mbedtls_ecp_point_write_binary_0
    455                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \   00000010   0x....             LDR      R0,??DataTable28  ;; 0xffffb080
   \   00000012   0xE044             B        ??mbedtls_ecp_point_write_binary_1
   \                     ??mbedtls_ecp_point_write_binary_0: (+1)
   \   00000014   0x9C0A             LDR      R4,[SP, #+40]
   \   00000016   0x9D0B             LDR      R5,[SP, #+44]
    456          
    457              /*
    458               * Common case: P == 0
    459               */
    460              if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x9802             LDR      R0,[SP, #+8]
   \   0000001C   0x3018             ADDS     R0,R0,#+24
   \   0000001E   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD107             BNE      ??mbedtls_ecp_point_write_binary_2
    461              {
    462                  if( buflen < 1 )
   \   00000026   0x2D00             CMP      R5,#+0
   \   00000028   0xD029             BEQ      ??mbedtls_ecp_point_write_binary_3
    463                      return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
    464          
    465                  buf[0] = 0x00;
   \   0000002A   0x7026             STRB     R6,[R4, #+0]
    466                  *olen = 1;
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x9904             LDR      R1,[SP, #+16]
   \   00000030   0x6008             STR      R0,[R1, #+0]
    467          
    468                  return( 0 );
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xE033             B        ??mbedtls_ecp_point_write_binary_1
    469              }
    470          
    471              plen = mbedtls_mpi_size( &grp->P );
   \                     ??mbedtls_ecp_point_write_binary_2: (+1)
   \   00000036   0x9801             LDR      R0,[SP, #+4]
   \   00000038   0x1D00             ADDS     R0,R0,#+4
   \   0000003A   0x.... 0x....      BL       mbedtls_mpi_size
   \   0000003E   0x0006             MOVS     R6,R0
    472          
    473              if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )
   \   00000040   0x9803             LDR      R0,[SP, #+12]
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD114             BNE      ??mbedtls_ecp_point_write_binary_4
    474              {
    475                  *olen = 2 * plen + 1;
   \   00000046   0x0070             LSLS     R0,R6,#+1
   \   00000048   0x1C40             ADDS     R0,R0,#+1
   \   0000004A   0x9904             LDR      R1,[SP, #+16]
   \   0000004C   0x6008             STR      R0,[R1, #+0]
    476          
    477                  if( buflen < *olen )
   \   0000004E   0x4285             CMP      R5,R0
   \   00000050   0xD315             BCC      ??mbedtls_ecp_point_write_binary_3
    478                      return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
    479          
    480                  buf[0] = 0x04;
   \   00000052   0x2004             MOVS     R0,#+4
   \   00000054   0x7020             STRB     R0,[R4, #+0]
    481                  MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   \   00000056   0x0032             MOVS     R2,R6
   \   00000058   0x1C61             ADDS     R1,R4,#+1
   \   0000005A   0x9802             LDR      R0,[SP, #+8]
   \   0000005C   0x.... 0x....      BL       mbedtls_mpi_write_binary
   \   00000060   0x0007             MOVS     R7,R0
   \   00000062   0xD11B             BNE      ??mbedtls_ecp_point_write_binary_5
    482                  MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );
   \   00000064   0x0032             MOVS     R2,R6
   \   00000066   0x19A0             ADDS     R0,R4,R6
   \   00000068   0x1C41             ADDS     R1,R0,#+1
   \   0000006A   0x9802             LDR      R0,[SP, #+8]
   \   0000006C   0x300C             ADDS     R0,R0,#+12
   \   0000006E   0xE012             B        ??mbedtls_ecp_point_write_binary_6
    483              }
    484              else if( format == MBEDTLS_ECP_PF_COMPRESSED )
   \                     ??mbedtls_ecp_point_write_binary_4: (+1)
   \   00000070   0x2801             CMP      R0,#+1
   \   00000072   0xD113             BNE      ??mbedtls_ecp_point_write_binary_5
    485              {
    486                  *olen = plen + 1;
   \   00000074   0x1C70             ADDS     R0,R6,#+1
   \   00000076   0x9904             LDR      R1,[SP, #+16]
   \   00000078   0x6008             STR      R0,[R1, #+0]
    487          
    488                  if( buflen < *olen )
   \   0000007A   0x4285             CMP      R5,R0
   \   0000007C   0xD201             BCS      ??mbedtls_ecp_point_write_binary_7
    489                      return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
   \                     ??mbedtls_ecp_point_write_binary_3: (+1)
   \   0000007E   0x....             LDR      R0,??DataTable28_1  ;; 0xffffb100
   \   00000080   0xE00D             B        ??mbedtls_ecp_point_write_binary_1
    490          
    491                  buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );
   \                     ??mbedtls_ecp_point_write_binary_7: (+1)
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x9802             LDR      R0,[SP, #+8]
   \   00000086   0x300C             ADDS     R0,R0,#+12
   \   00000088   0x.... 0x....      BL       mbedtls_mpi_get_bit
   \   0000008C   0x1C80             ADDS     R0,R0,#+2
   \   0000008E   0x7020             STRB     R0,[R4, #+0]
    492                  MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
   \   00000090   0x0032             MOVS     R2,R6
   \   00000092   0x1C61             ADDS     R1,R4,#+1
   \   00000094   0x9802             LDR      R0,[SP, #+8]
   \                     ??mbedtls_ecp_point_write_binary_6: (+1)
   \   00000096   0x.... 0x....      BL       mbedtls_mpi_write_binary
   \   0000009A   0x0007             MOVS     R7,R0
    493              }
    494          
    495          cleanup:
    496              return( ret );
   \                     ??mbedtls_ecp_point_write_binary_5: (+1)
   \   0000009C   0x0038             MOVS     R0,R7
   \                     ??mbedtls_ecp_point_write_binary_1: (+1)
   \   0000009E   0xB005             ADD      SP,SP,#+20
   \   000000A0   0xBDF0             POP      {R4-R7,PC}       ;; return
    497          }
    498          
    499          /*
    500           * Import a point from unsigned binary data (SEC1 2.3.4)
    501           */

   \                                 In section .text, align 2, keep-with-next
    502          int mbedtls_ecp_point_read_binary( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,
    503                                     const unsigned char *buf, size_t ilen )
    504          {
   \                     mbedtls_ecp_point_read_binary: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0015             MOVS     R5,R2
   \   00000006   0x001E             MOVS     R6,R3
    505              int ret;
    506              size_t plen;
    507          
    508              if( ilen < 1 )
   \   00000008   0xD015             BEQ      ??mbedtls_ecp_point_read_binary_0
    509                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    510          
    511              if( buf[0] == 0x00 )
   \   0000000A   0x7829             LDRB     R1,[R5, #+0]
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD105             BNE      ??mbedtls_ecp_point_read_binary_1
    512              {
    513                  if( ilen == 1 )
   \   00000010   0x2E01             CMP      R6,#+1
   \   00000012   0xD110             BNE      ??mbedtls_ecp_point_read_binary_0
    514                      return( mbedtls_ecp_set_zero( pt ) );
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x.... 0x....      BL       mbedtls_ecp_set_zero
   \   0000001A   0xBDF2             POP      {R1,R4-R7,PC}
    515                  else
    516                      return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    517              }
    518          
    519              plen = mbedtls_mpi_size( &grp->P );
   \                     ??mbedtls_ecp_point_read_binary_1: (+1)
   \   0000001C   0x1D00             ADDS     R0,R0,#+4
   \   0000001E   0x.... 0x....      BL       mbedtls_mpi_size
   \   00000022   0x0007             MOVS     R7,R0
    520          
    521              if( buf[0] != 0x04 )
   \   00000024   0x7828             LDRB     R0,[R5, #+0]
   \   00000026   0x2804             CMP      R0,#+4
   \   00000028   0xD001             BEQ      ??mbedtls_ecp_point_read_binary_2
    522                  return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   \   0000002A   0x....             LDR      R0,??DataTable29  ;; 0xffffb180
   \   0000002C   0xBDF2             POP      {R1,R4-R7,PC}
    523          
    524              if( ilen != 2 * plen + 1 )
   \                     ??mbedtls_ecp_point_read_binary_2: (+1)
   \   0000002E   0x0078             LSLS     R0,R7,#+1
   \   00000030   0x1C40             ADDS     R0,R0,#+1
   \   00000032   0x4286             CMP      R6,R0
   \   00000034   0xD001             BEQ      ??mbedtls_ecp_point_read_binary_3
    525                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \                     ??mbedtls_ecp_point_read_binary_0: (+1)
   \   00000036   0x....             LDR      R0,??DataTable28  ;; 0xffffb080
   \   00000038   0xBDF2             POP      {R1,R4-R7,PC}
    526          
    527              MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
   \                     ??mbedtls_ecp_point_read_binary_3: (+1)
   \   0000003A   0x003A             MOVS     R2,R7
   \   0000003C   0x1C69             ADDS     R1,R5,#+1
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x.... 0x....      BL       mbedtls_mpi_read_binary
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD10D             BNE      ??mbedtls_ecp_point_read_binary_4
    528              MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
   \   00000048   0x003A             MOVS     R2,R7
   \   0000004A   0x19E8             ADDS     R0,R5,R7
   \   0000004C   0x1C41             ADDS     R1,R0,#+1
   \   0000004E   0x0020             MOVS     R0,R4
   \   00000050   0x300C             ADDS     R0,R0,#+12
   \   00000052   0x.... 0x....      BL       mbedtls_mpi_read_binary
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD104             BNE      ??mbedtls_ecp_point_read_binary_4
    529              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
   \   0000005A   0x2101             MOVS     R1,#+1
   \   0000005C   0x0020             MOVS     R0,R4
   \   0000005E   0x3018             ADDS     R0,R0,#+24
   \   00000060   0x.... 0x....      BL       mbedtls_mpi_lset
    530          
    531          cleanup:
    532              return( ret );
   \                     ??mbedtls_ecp_point_read_binary_4: (+1)
   \   00000064   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    533          }
    534          
    535          /*
    536           * Import a point from a TLS ECPoint record (RFC 4492)
    537           *      struct {
    538           *          opaque point <1..2^8-1>;
    539           *      } ECPoint;
    540           */

   \                                 In section .text, align 2, keep-with-next
    541          int mbedtls_ecp_tls_read_point( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,
    542                                  const unsigned char **buf, size_t buf_len )
    543          {
   \                     mbedtls_ecp_tls_read_point: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x001C             MOVS     R4,R3
    544              unsigned char data_len;
    545              const unsigned char *buf_start;
    546          
    547              /*
    548               * We must have at least two bytes (1 for length, at least one for data)
    549               */
    550              if( buf_len < 2 )
   \   00000004   0x2C02             CMP      R4,#+2
   \   00000006   0xD308             BCC      ??mbedtls_ecp_tls_read_point_0
    551                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    552          
    553              data_len = *(*buf)++;
   \   00000008   0x6813             LDR      R3,[R2, #+0]
   \   0000000A   0x1C5D             ADDS     R5,R3,#+1
   \   0000000C   0x6015             STR      R5,[R2, #+0]
   \   0000000E   0x781B             LDRB     R3,[R3, #+0]
    554              if( data_len < 1 || data_len > buf_len - 1 )
   \   00000010   0x2B00             CMP      R3,#+0
   \   00000012   0xD002             BEQ      ??mbedtls_ecp_tls_read_point_0
   \   00000014   0x1E64             SUBS     R4,R4,#+1
   \   00000016   0x429C             CMP      R4,R3
   \   00000018   0xD201             BCS      ??mbedtls_ecp_tls_read_point_1
    555                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \                     ??mbedtls_ecp_tls_read_point_0: (+1)
   \   0000001A   0x....             LDR      R0,??DataTable28  ;; 0xffffb080
   \   0000001C   0xBD32             POP      {R1,R4,R5,PC}
    556          
    557              /*
    558               * Save buffer start for read_binary and update buf
    559               */
    560              buf_start = *buf;
   \                     ??mbedtls_ecp_tls_read_point_1: (+1)
   \   0000001E   0x462C             MOV      R4,R5
    561              *buf += data_len;
   \   00000020   0x18E5             ADDS     R5,R4,R3
   \   00000022   0x6015             STR      R5,[R2, #+0]
    562          
    563              return mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len );
   \   00000024   0x0022             MOVS     R2,R4
   \   00000026   0x.... 0x....      BL       mbedtls_ecp_point_read_binary
   \   0000002A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    564          }
    565          
    566          /*
    567           * Export a point as a TLS ECPoint record (RFC 4492)
    568           *      struct {
    569           *          opaque point <1..2^8-1>;
    570           *      } ECPoint;
    571           */

   \                                 In section .text, align 2, keep-with-next
    572          int mbedtls_ecp_tls_write_point( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt,
    573                                   int format, size_t *olen,
    574                                   unsigned char *buf, size_t blen )
    575          {
   \                     mbedtls_ecp_tls_write_point: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x001D             MOVS     R5,R3
   \   00000006   0x9B07             LDR      R3,[SP, #+28]
    576              int ret;
    577          
    578              /*
    579               * buffer length must be at least one, for our length byte
    580               */
    581              if( blen < 1 )
   \   00000008   0x2B00             CMP      R3,#+0
   \   0000000A   0xD101             BNE      ??mbedtls_ecp_tls_write_point_0
    582                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \   0000000C   0x....             LDR      R0,??DataTable28  ;; 0xffffb080
   \   0000000E   0xE00F             B        ??mbedtls_ecp_tls_write_point_1
   \                     ??mbedtls_ecp_tls_write_point_0: (+1)
   \   00000010   0x9C06             LDR      R4,[SP, #+24]
    583          
    584              if( ( ret = mbedtls_ecp_point_write_binary( grp, pt, format,
    585                              olen, buf + 1, blen - 1) ) != 0 )
   \   00000012   0x1E5B             SUBS     R3,R3,#+1
   \   00000014   0x9301             STR      R3,[SP, #+4]
   \   00000016   0x1C63             ADDS     R3,R4,#+1
   \   00000018   0x9300             STR      R3,[SP, #+0]
   \   0000001A   0x002B             MOVS     R3,R5
   \   0000001C   0x.... 0x....      BL       mbedtls_ecp_point_write_binary
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD105             BNE      ??mbedtls_ecp_tls_write_point_1
    586                  return( ret );
    587          
    588              /*
    589               * write length to the first byte and update total length
    590               */
    591              buf[0] = (unsigned char) *olen;
   \   00000024   0x6828             LDR      R0,[R5, #+0]
   \   00000026   0x7020             STRB     R0,[R4, #+0]
    592              ++*olen;
   \   00000028   0x6828             LDR      R0,[R5, #+0]
   \   0000002A   0x1C40             ADDS     R0,R0,#+1
   \   0000002C   0x6028             STR      R0,[R5, #+0]
    593          
    594              return( 0 );
   \   0000002E   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ecp_tls_write_point_1: (+1)
   \   00000030   0xB003             ADD      SP,SP,#+12
   \   00000032   0xBD30             POP      {R4,R5,PC}       ;; return
    595          }
    596          
    597          /*
    598           * Set a group from an ECParameters record (RFC 4492)
    599           */

   \                                 In section .text, align 4, keep-with-next
    600          int mbedtls_ecp_tls_read_group( mbedtls_ecp_group *grp, const unsigned char **buf, size_t len )
    601          {
   \                     mbedtls_ecp_tls_read_group: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    602              uint16_t tls_id;
    603              const mbedtls_ecp_curve_info *curve_info;
    604          
    605              /*
    606               * We expect at least three bytes (see below)
    607               */
    608              if( len < 3 )
   \   00000002   0x2A03             CMP      R2,#+3
   \   00000004   0xD305             BCC      ??mbedtls_ecp_tls_read_group_0
    609                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    610          
    611              /*
    612               * First byte is curve_type; only named_curve is handled
    613               */
    614              if( *(*buf)++ != MBEDTLS_ECP_TLS_NAMED_CURVE )
   \   00000006   0x680A             LDR      R2,[R1, #+0]
   \   00000008   0x1C53             ADDS     R3,R2,#+1
   \   0000000A   0x600B             STR      R3,[R1, #+0]
   \   0000000C   0x7812             LDRB     R2,[R2, #+0]
   \   0000000E   0x2A03             CMP      R2,#+3
   \   00000010   0xD001             BEQ      ??mbedtls_ecp_tls_read_group_1
    615                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \                     ??mbedtls_ecp_tls_read_group_0: (+1)
   \   00000012   0x....             LDR      R0,??DataTable28  ;; 0xffffb080
   \   00000014   0xBD10             POP      {R4,PC}
    616          
    617              /*
    618               * Next two bytes are the namedcurve value
    619               */
    620              tls_id = *(*buf)++;
   \                     ??mbedtls_ecp_tls_read_group_1: (+1)
   \   00000016   0x461A             MOV      R2,R3
   \   00000018   0x1C53             ADDS     R3,R2,#+1
   \   0000001A   0x600B             STR      R3,[R1, #+0]
   \   0000001C   0x7812             LDRB     R2,[R2, #+0]
    621              tls_id <<= 8;
    622              tls_id |= *(*buf)++;
   \   0000001E   0x1C5C             ADDS     R4,R3,#+1
   \   00000020   0x600C             STR      R4,[R1, #+0]
    623          
    624              if( ( curve_info = mbedtls_ecp_curve_info_from_tls_id( tls_id ) ) == NULL )
   \   00000022   0x0212             LSLS     R2,R2,#+8
   \   00000024   0x7819             LDRB     R1,[R3, #+0]
   \   00000026   0x430A             ORRS     R2,R2,R1
   \   00000028   0x....             ADR.N    R3,ecp_supported_curves
   \   0000002A   0xE000             B        ??mbedtls_ecp_tls_read_group_2
   \                     ??mbedtls_ecp_tls_read_group_3: (+1)
   \   0000002C   0x330C             ADDS     R3,R3,#+12
   \                     ??mbedtls_ecp_tls_read_group_2: (+1)
   \   0000002E   0x7819             LDRB     R1,[R3, #+0]
   \   00000030   0x000C             MOVS     R4,R1
   \   00000032   0xD004             BEQ      ??mbedtls_ecp_tls_read_group_4
   \   00000034   0x885C             LDRH     R4,[R3, #+2]
   \   00000036   0x4294             CMP      R4,R2
   \   00000038   0xD1F8             BNE      ??mbedtls_ecp_tls_read_group_3
   \   0000003A   0x2B00             CMP      R3,#+0
   \   0000003C   0xD101             BNE      ??mbedtls_ecp_tls_read_group_5
    625                  return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   \                     ??mbedtls_ecp_tls_read_group_4: (+1)
   \   0000003E   0x....             LDR      R0,??DataTable29  ;; 0xffffb180
   \   00000040   0xBD10             POP      {R4,PC}
    626          
    627              return mbedtls_ecp_group_load( grp, curve_info->grp_id );
   \                     ??mbedtls_ecp_tls_read_group_5: (+1)
   \   00000042   0x.... 0x....      BL       mbedtls_ecp_group_load
   \   00000046   0xBD10             POP      {R4,PC}          ;; return
    628          }
    629          
    630          /*
    631           * Write the ECParameters record corresponding to a group (RFC 4492)
    632           */

   \                                 In section .text, align 4, keep-with-next
    633          int mbedtls_ecp_tls_write_group( const mbedtls_ecp_group *grp, size_t *olen,
    634                                   unsigned char *buf, size_t blen )
    635          {
   \                     mbedtls_ecp_tls_write_group: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    636              const mbedtls_ecp_curve_info *curve_info;
    637          
    638              if( ( curve_info = mbedtls_ecp_curve_info_from_grp_id( grp->id ) ) == NULL )
   \   00000002   0x7804             LDRB     R4,[R0, #+0]
   \   00000004   0x....             ADR.N    R0,ecp_supported_curves
   \   00000006   0xE000             B        ??mbedtls_ecp_tls_write_group_0
   \                     ??mbedtls_ecp_tls_write_group_1: (+1)
   \   00000008   0x300C             ADDS     R0,R0,#+12
   \                     ??mbedtls_ecp_tls_write_group_0: (+1)
   \   0000000A   0x7805             LDRB     R5,[R0, #+0]
   \   0000000C   0x002E             MOVS     R6,R5
   \   0000000E   0xD009             BEQ      ??mbedtls_ecp_tls_write_group_2
   \   00000010   0x42A5             CMP      R5,R4
   \   00000012   0xD1F9             BNE      ??mbedtls_ecp_tls_write_group_1
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD005             BEQ      ??mbedtls_ecp_tls_write_group_2
    639                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
    640          
    641              /*
    642               * We are going to write 3 bytes (see below)
    643               */
    644              *olen = 3;
   \   00000018   0x2403             MOVS     R4,#+3
   \   0000001A   0x600C             STR      R4,[R1, #+0]
    645              if( blen < *olen )
   \   0000001C   0x2B03             CMP      R3,#+3
   \   0000001E   0xD203             BCS      ??mbedtls_ecp_tls_write_group_3
    646                  return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
   \   00000020   0x....             LDR      R0,??DataTable28_1  ;; 0xffffb100
   \   00000022   0xE009             B        ??mbedtls_ecp_tls_write_group_4
   \                     ??mbedtls_ecp_tls_write_group_2: (+1)
   \   00000024   0x....             LDR      R0,??DataTable28  ;; 0xffffb080
   \   00000026   0xE007             B        ??mbedtls_ecp_tls_write_group_4
    647          
    648              /*
    649               * First byte is curve_type, always named_curve
    650               */
    651              *buf++ = MBEDTLS_ECP_TLS_NAMED_CURVE;
   \                     ??mbedtls_ecp_tls_write_group_3: (+1)
   \   00000028   0x7014             STRB     R4,[R2, #+0]
   \   0000002A   0x1C52             ADDS     R2,R2,#+1
    652          
    653              /*
    654               * Next two bytes are the namedcurve value
    655               */
    656              buf[0] = curve_info->tls_id >> 8;
   \   0000002C   0x8841             LDRH     R1,[R0, #+2]
   \   0000002E   0x0A09             LSRS     R1,R1,#+8
   \   00000030   0x7011             STRB     R1,[R2, #+0]
    657              buf[1] = curve_info->tls_id & 0xFF;
   \   00000032   0x8840             LDRH     R0,[R0, #+2]
   \   00000034   0x7050             STRB     R0,[R2, #+1]
    658          
    659              return( 0 );
   \   00000036   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_ecp_tls_write_group_4: (+1)
   \   00000038   0xBC70             POP      {R4-R6}
   \   0000003A   0x4770             BX       LR               ;; return
    660          }
    661          
    662          /*
    663           * Wrapper around fast quasi-modp functions, with fall-back to mbedtls_mpi_mod_mpi.
    664           * See the documentation of struct mbedtls_ecp_group.
    665           *
    666           * This function is in the critial loop for mbedtls_ecp_mul, so pay attention to perf.
    667           */

   \                                 In section .text, align 2, keep-with-next
    668          static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
    669          {
   \                     ecp_modp: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    670              int ret;
    671          
    672              if( grp->modp == NULL )
   \   00000006   0x6E68             LDR      R0,[R5, #+100]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD105             BNE      ??ecp_modp_0
    673                  return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
   \   0000000C   0x1D2A             ADDS     R2,R5,#+4
   \   0000000E   0x0021             MOVS     R1,R4
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       mbedtls_mpi_mod_mpi
   \   00000016   0xBD70             POP      {R4-R6,PC}
    674          
    675              /* N->s < 0 is a much faster test, which fails only if N is 0 */
    676              if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
    677                  mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
   \                     ??ecp_modp_0: (+1)
   \   00000018   0x6820             LDR      R0,[R4, #+0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD505             BPL      ??ecp_modp_1
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD106             BNE      ??ecp_modp_2
   \                     ??ecp_modp_1: (+1)
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   00000030   0x6DA9             LDR      R1,[R5, #+88]
   \   00000032   0x0049             LSLS     R1,R1,#+1
   \   00000034   0x4281             CMP      R1,R0
   \   00000036   0xD201             BCS      ??ecp_modp_3
    678              {
    679                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \                     ??ecp_modp_2: (+1)
   \   00000038   0x....             LDR      R0,??DataTable28  ;; 0xffffb080
   \   0000003A   0xBD70             POP      {R4-R6,PC}
    680              }
    681          
    682              MBEDTLS_MPI_CHK( grp->modp( N ) );
   \                     ??ecp_modp_3: (+1)
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0x6E69             LDR      R1,[R5, #+100]
   \   00000040   0x4788             BLX      R1
   \   00000042   0x0006             MOVS     R6,R0
   \   00000044   0xD11D             BNE      ??ecp_modp_4
    683          
    684              /* N->s < 0 is a much faster test, which fails only if N is 0 */
    685              while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
   \                     ??ecp_modp_5: (+1)
   \   00000046   0x6820             LDR      R0,[R4, #+0]
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD50D             BPL      ??ecp_modp_6
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x0020             MOVS     R0,R4
   \   00000050   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD007             BEQ      ??ecp_modp_6
    686                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
   \   00000058   0x1D2A             ADDS     R2,R5,#+4
   \   0000005A   0x0021             MOVS     R1,R4
   \   0000005C   0x0020             MOVS     R0,R4
   \   0000005E   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   00000062   0x0006             MOVS     R6,R0
   \   00000064   0xD10D             BNE      ??ecp_modp_4
   \   00000066   0xE7EE             B        ??ecp_modp_5
    687          
    688              while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
   \                     ??ecp_modp_6: (+1)
   \   00000068   0x1D29             ADDS     R1,R5,#+4
   \   0000006A   0x0020             MOVS     R0,R4
   \   0000006C   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD406             BMI      ??ecp_modp_4
    689                  /* we known P, N and the result are positive */
    690                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
   \   00000074   0x1D2A             ADDS     R2,R5,#+4
   \   00000076   0x0021             MOVS     R1,R4
   \   00000078   0x0020             MOVS     R0,R4
   \   0000007A   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   0000007E   0x0006             MOVS     R6,R0
   \   00000080   0xD0F2             BEQ      ??ecp_modp_6
    691          
    692          cleanup:
    693              return( ret );
   \                     ??ecp_modp_4: (+1)
   \   00000082   0x0030             MOVS     R0,R6
   \   00000084   0xBD70             POP      {R4-R6,PC}       ;; return
    694          }
    695          
    696          /*
    697           * Fast mod-p functions expect their argument to be in the 0..p^2 range.
    698           *
    699           * In order to guarantee that, we need to ensure that operands of
    700           * mbedtls_mpi_mul_mpi are in the 0..p range. So, after each operation we will
    701           * bring the result back to this range.
    702           *
    703           * The following macros are shortcuts for doing that.
    704           */
    705          
    706          /*
    707           * Reduce a mbedtls_mpi mod p in-place, general case, to use after mbedtls_mpi_mul_mpi
    708           */
    709          #if defined(MBEDTLS_SELF_TEST)
    710          #define INC_MUL_COUNT   mul_count++;
    711          #else
    712          #define INC_MUL_COUNT
    713          #endif
    714          
    715          #define MOD_MUL( N )    do { MBEDTLS_MPI_CHK( ecp_modp( &N, grp ) ); INC_MUL_COUNT } \
    716                                  while( 0 )
    717          
    718          /*
    719           * Reduce a mbedtls_mpi mod p in-place, to use after mbedtls_mpi_sub_mpi
    720           * N->s < 0 is a very fast test, which fails only if N is 0
    721           */
    722          #define MOD_SUB( N )                                \
    723              while( N.s < 0 && mbedtls_mpi_cmp_int( &N, 0 ) != 0 )   \
    724                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &N, &N, &grp->P ) )
    725          
    726          /*
    727           * Reduce a mbedtls_mpi mod p in-place, to use after mbedtls_mpi_add_mpi and mbedtls_mpi_mul_int.
    728           * We known P, N and the result are positive, so sub_abs is correct, and
    729           * a bit faster.
    730           */
    731          #define MOD_ADD( N )                                \
    732              while( mbedtls_mpi_cmp_mpi( &N, &grp->P ) >= 0 )        \
    733                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &N, &N, &grp->P ) )
    734          
    735          #if defined(ECP_SHORTWEIERSTRASS)
    736          /*
    737           * For curves in short Weierstrass form, we do all the internal operations in
    738           * Jacobian coordinates.
    739           *
    740           * For multiplication, we'll use a comb method with coutermeasueres against
    741           * SPA, hence timing attacks.
    742           */
    743          
    744          /*
    745           * Normalize jacobian coordinates so that Z == 0 || Z == 1  (GECC 3.2.1)
    746           * Cost: 1N := 1I + 3M + 1S
    747           */

   \                                 In section .text, align 2, keep-with-next
    748          static int ecp_normalize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt )
    749          {
   \                     ecp_normalize_jac: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0007             MOVS     R7,R0
   \   00000006   0x000C             MOVS     R4,R1
    750              int ret;
    751              mbedtls_mpi Zi, ZZi;
    752          
    753              if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x3018             ADDS     R0,R0,#+24
   \   0000000E   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD061             BEQ      ??ecp_normalize_jac_0
    754                  return( 0 );
    755          
    756          #if defined(MBEDTLS_ECP_NORMALIZE_JAC_ALT)
    757              if ( mbedtls_internal_ecp_grp_capable( grp ) )
    758              {
    759                  return mbedtls_internal_ecp_normalize_jac( grp, pt );
    760              }
    761          #endif /* MBEDTLS_ECP_NORMALIZE_JAC_ALT */
    762              mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
   \   00000016   0xA803             ADD      R0,SP,#+12
   \   00000018   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000001C   0x4668             MOV      R0,SP
   \   0000001E   0x.... 0x....      BL       mbedtls_mpi_init
    763          
    764              /*
    765               * X = X / Z^2  mod p
    766               */
    767              MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
   \   00000022   0x1D3A             ADDS     R2,R7,#+4
   \   00000024   0x0021             MOVS     R1,R4
   \   00000026   0x3118             ADDS     R1,R1,#+24
   \   00000028   0xA803             ADD      R0,SP,#+12
   \   0000002A   0x.... 0x....      BL       mbedtls_mpi_inv_mod
   \   0000002E   0x0006             MOVS     R6,R0
   \   00000030   0xD14C             BNE      ??ecp_normalize_jac_1
    768              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
   \   00000032   0xAA03             ADD      R2,SP,#+12
   \   00000034   0xA903             ADD      R1,SP,#+12
   \   00000036   0x4668             MOV      R0,SP
   \   00000038   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000003C   0x0006             MOVS     R6,R0
   \   0000003E   0xD145             BNE      ??ecp_normalize_jac_1
   \   00000040   0x0039             MOVS     R1,R7
   \   00000042   0x4668             MOV      R0,SP
   \   00000044   0x.... 0x....      BL       ecp_modp
   \   00000048   0x0006             MOVS     R6,R0
   \   0000004A   0xD13F             BNE      ??ecp_normalize_jac_1
   \   0000004C   0x....             LDR      R5,??DataTable30
   \   0000004E   0x68A8             LDR      R0,[R5, #+8]
   \   00000050   0x1C40             ADDS     R0,R0,#+1
   \   00000052   0x60A8             STR      R0,[R5, #+8]
    769              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
   \   00000054   0x466A             MOV      R2,SP
   \   00000056   0x0021             MOVS     R1,R4
   \   00000058   0x0020             MOVS     R0,R4
   \   0000005A   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000005E   0x0006             MOVS     R6,R0
   \   00000060   0xD134             BNE      ??ecp_normalize_jac_1
   \   00000062   0x0039             MOVS     R1,R7
   \   00000064   0x0020             MOVS     R0,R4
   \   00000066   0x.... 0x....      BL       ecp_modp
   \   0000006A   0x0006             MOVS     R6,R0
   \   0000006C   0xD12E             BNE      ??ecp_normalize_jac_1
   \   0000006E   0x68A8             LDR      R0,[R5, #+8]
   \   00000070   0x1C40             ADDS     R0,R0,#+1
   \   00000072   0x60A8             STR      R0,[R5, #+8]
    770          
    771              /*
    772               * Y = Y / Z^3  mod p
    773               */
    774              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
   \   00000074   0x466A             MOV      R2,SP
   \   00000076   0x0021             MOVS     R1,R4
   \   00000078   0x310C             ADDS     R1,R1,#+12
   \   0000007A   0x0020             MOVS     R0,R4
   \   0000007C   0x300C             ADDS     R0,R0,#+12
   \   0000007E   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   00000082   0x0006             MOVS     R6,R0
   \   00000084   0xD122             BNE      ??ecp_normalize_jac_1
   \   00000086   0x0039             MOVS     R1,R7
   \   00000088   0x0020             MOVS     R0,R4
   \   0000008A   0x300C             ADDS     R0,R0,#+12
   \   0000008C   0x.... 0x....      BL       ecp_modp
   \   00000090   0x0006             MOVS     R6,R0
   \   00000092   0xD11B             BNE      ??ecp_normalize_jac_1
   \   00000094   0x68A8             LDR      R0,[R5, #+8]
   \   00000096   0x1C40             ADDS     R0,R0,#+1
   \   00000098   0x60A8             STR      R0,[R5, #+8]
    775              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
   \   0000009A   0xAA03             ADD      R2,SP,#+12
   \   0000009C   0x0021             MOVS     R1,R4
   \   0000009E   0x310C             ADDS     R1,R1,#+12
   \   000000A0   0x0020             MOVS     R0,R4
   \   000000A2   0x300C             ADDS     R0,R0,#+12
   \   000000A4   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000000A8   0x0006             MOVS     R6,R0
   \   000000AA   0xD10F             BNE      ??ecp_normalize_jac_1
   \   000000AC   0x0039             MOVS     R1,R7
   \   000000AE   0x0020             MOVS     R0,R4
   \   000000B0   0x300C             ADDS     R0,R0,#+12
   \   000000B2   0x.... 0x....      BL       ecp_modp
   \   000000B6   0x0006             MOVS     R6,R0
   \   000000B8   0xD108             BNE      ??ecp_normalize_jac_1
   \   000000BA   0x68A8             LDR      R0,[R5, #+8]
   \   000000BC   0x1C40             ADDS     R0,R0,#+1
   \   000000BE   0x60A8             STR      R0,[R5, #+8]
    776          
    777              /*
    778               * Z = 1
    779               */
    780              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
   \   000000C0   0x2101             MOVS     R1,#+1
   \   000000C2   0x0020             MOVS     R0,R4
   \   000000C4   0x3018             ADDS     R0,R0,#+24
   \   000000C6   0x.... 0x....      BL       mbedtls_mpi_lset
   \   000000CA   0x0006             MOVS     R6,R0
    781          
    782          cleanup:
    783          
    784              mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
   \                     ??ecp_normalize_jac_1: (+1)
   \   000000CC   0xA803             ADD      R0,SP,#+12
   \   000000CE   0x.... 0x....      BL       mbedtls_mpi_free
   \   000000D2   0x4668             MOV      R0,SP
   \   000000D4   0x.... 0x....      BL       mbedtls_mpi_free
    785          
    786              return( ret );
   \   000000D8   0x0030             MOVS     R0,R6
   \                     ??ecp_normalize_jac_0: (+1)
   \   000000DA   0xB007             ADD      SP,SP,#+28
   \   000000DC   0xBDF0             POP      {R4-R7,PC}       ;; return
    787          }
    788          
    789          /*
    790           * Normalize jacobian coordinates of an array of (pointers to) points,
    791           * using Montgomery's trick to perform only one inversion mod P.
    792           * (See for example Cohen's "A Course in Computational Algebraic Number
    793           * Theory", Algorithm 10.3.4.)
    794           *
    795           * Warning: fails (returning an error) if one of the points is zero!
    796           * This should never happen, see choice of w in ecp_mul_comb().
    797           *
    798           * Cost: 1N(t) := 1I + (6t - 3)M + 1S
    799           */

   \                                 In section .text, align 2, keep-with-next
    800          static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
    801                                             mbedtls_ecp_point *T[], size_t t_len )
    802          {
   \                     ecp_normalize_jac_many: (+1)
   \   00000000   0xB5F7             PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
    803              int ret;
    804              size_t i;
    805              mbedtls_mpi *c, u, Zi, ZZi;
    806          
    807              if( t_len < 2 )
   \   00000004   0x4610             MOV      R0,R2
   \   00000006   0x2802             CMP      R0,#+2
   \   00000008   0xD204             BCS      ??ecp_normalize_jac_many_0
    808                  return( ecp_normalize_jac( grp, *T ) );
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \   0000000C   0x980C             LDR      R0,[SP, #+48]
   \   0000000E   0x.... 0x....      BL       ecp_normalize_jac
   \   00000012   0xE0F7             B        ??ecp_normalize_jac_many_1
    809          
    810          #if defined(MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT)
    811              if ( mbedtls_internal_ecp_grp_capable( grp ) )
    812              {
    813                  return mbedtls_internal_ecp_normalize_jac_many(grp, T, t_len);
    814              }
    815          #endif
    816          
    817              if( ( c = mbedtls_calloc( t_len, sizeof( mbedtls_mpi ) ) ) == NULL )
   \                     ??ecp_normalize_jac_many_0: (+1)
   \   00000014   0x210C             MOVS     R1,#+12
   \   00000016   0x.... 0x....      BL       calloc
   \   0000001A   0x9001             STR      R0,[SP, #+4]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD101             BNE      ??ecp_normalize_jac_many_2
    818                  return( MBEDTLS_ERR_ECP_ALLOC_FAILED );
   \   00000020   0x....             LDR      R0,??DataTable30_1  ;; 0xffffb280
   \   00000022   0xE0EF             B        ??ecp_normalize_jac_many_1
    819          
    820              mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
   \                     ??ecp_normalize_jac_many_2: (+1)
   \   00000024   0xA806             ADD      R0,SP,#+24
   \   00000026   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000002A   0xA803             ADD      R0,SP,#+12
   \   0000002C   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000030   0xA809             ADD      R0,SP,#+36
   \   00000032   0x.... 0x....      BL       mbedtls_mpi_init
    821          
    822              /*
    823               * c[i] = Z_0 * ... * Z_i
    824               */
    825              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
   \   00000036   0x980D             LDR      R0,[SP, #+52]
   \   00000038   0x6801             LDR      R1,[R0, #+0]
   \   0000003A   0x3118             ADDS     R1,R1,#+24
   \   0000003C   0x9801             LDR      R0,[SP, #+4]
   \   0000003E   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000042   0x0006             MOVS     R6,R0
   \   00000044   0xD000             BEQ      .+4
   \   00000046   0xE0C8             B        ??ecp_normalize_jac_many_3
   \   00000048   0x980D             LDR      R0,[SP, #+52]
   \   0000004A   0x1D07             ADDS     R7,R0,#+4
   \   0000004C   0x9D01             LDR      R5,[SP, #+4]
   \   0000004E   0x350C             ADDS     R5,R5,#+12
   \   00000050   0x980E             LDR      R0,[SP, #+56]
   \   00000052   0x1E40             SUBS     R0,R0,#+1
   \   00000054   0x9002             STR      R0,[SP, #+8]
   \   00000056   0x9000             STR      R0,[SP, #+0]
   \   00000058   0x....             LDR      R4,??DataTable30
    826              for( i = 1; i < t_len; i++ )
    827              {
    828                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
   \                     ??ecp_normalize_jac_many_4: (+1)
   \   0000005A   0x683A             LDR      R2,[R7, #+0]
   \   0000005C   0x3218             ADDS     R2,R2,#+24
   \   0000005E   0x0029             MOVS     R1,R5
   \   00000060   0x390C             SUBS     R1,R1,#+12
   \   00000062   0x0028             MOVS     R0,R5
   \   00000064   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   00000068   0x0006             MOVS     R6,R0
   \   0000006A   0xD000             BEQ      .+4
   \   0000006C   0xE0B5             B        ??ecp_normalize_jac_many_3
    829                  MOD_MUL( c[i] );
   \   0000006E   0x990C             LDR      R1,[SP, #+48]
   \   00000070   0x0028             MOVS     R0,R5
   \   00000072   0x.... 0x....      BL       ecp_modp
   \   00000076   0x0006             MOVS     R6,R0
   \   00000078   0xD000             BEQ      .+4
   \   0000007A   0xE0AE             B        ??ecp_normalize_jac_many_3
   \   0000007C   0x68A0             LDR      R0,[R4, #+8]
   \   0000007E   0x1C40             ADDS     R0,R0,#+1
   \   00000080   0x60A0             STR      R0,[R4, #+8]
    830              }
   \   00000082   0x350C             ADDS     R5,R5,#+12
   \   00000084   0x1D3F             ADDS     R7,R7,#+4
   \   00000086   0x9800             LDR      R0,[SP, #+0]
   \   00000088   0x1E40             SUBS     R0,R0,#+1
   \   0000008A   0x9000             STR      R0,[SP, #+0]
   \   0000008C   0xD1E5             BNE      ??ecp_normalize_jac_many_4
    831          
    832              /*
    833               * u = 1 / (Z_0 * ... * Z_n) mod P
    834               */
    835              MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[t_len-1], &grp->P ) );
   \   0000008E   0x980C             LDR      R0,[SP, #+48]
   \   00000090   0x1D02             ADDS     R2,R0,#+4
   \   00000092   0x9801             LDR      R0,[SP, #+4]
   \   00000094   0x990E             LDR      R1,[SP, #+56]
   \   00000096   0x004B             LSLS     R3,R1,#+1
   \   00000098   0x1859             ADDS     R1,R3,R1
   \   0000009A   0x0089             LSLS     R1,R1,#+2
   \   0000009C   0x1841             ADDS     R1,R0,R1
   \   0000009E   0x390C             SUBS     R1,R1,#+12
   \   000000A0   0xA806             ADD      R0,SP,#+24
   \   000000A2   0x.... 0x....      BL       mbedtls_mpi_inv_mod
   \   000000A6   0x0006             MOVS     R6,R0
   \   000000A8   0xD000             BEQ      .+4
   \   000000AA   0xE096             B        ??ecp_normalize_jac_many_3
    836          
    837              for( i = t_len - 1; ; i-- )
   \   000000AC   0x9F02             LDR      R7,[SP, #+8]
   \   000000AE   0x980D             LDR      R0,[SP, #+52]
   \   000000B0   0x00B9             LSLS     R1,R7,#+2
   \   000000B2   0x1845             ADDS     R5,R0,R1
   \   000000B4   0x9801             LDR      R0,[SP, #+4]
   \   000000B6   0x0079             LSLS     R1,R7,#+1
   \   000000B8   0x19C9             ADDS     R1,R1,R7
   \   000000BA   0x0089             LSLS     R1,R1,#+2
   \   000000BC   0x1840             ADDS     R0,R0,R1
   \   000000BE   0x380C             SUBS     R0,R0,#+12
   \   000000C0   0x9000             STR      R0,[SP, #+0]
   \   000000C2   0xE004             B        ??ecp_normalize_jac_many_5
   \                     ??ecp_normalize_jac_many_6: (+1)
   \   000000C4   0x1E7F             SUBS     R7,R7,#+1
   \   000000C6   0x9800             LDR      R0,[SP, #+0]
   \   000000C8   0x380C             SUBS     R0,R0,#+12
   \   000000CA   0x9000             STR      R0,[SP, #+0]
   \   000000CC   0x1F2D             SUBS     R5,R5,#+4
    838              {
    839                  /*
    840                   * Zi = 1 / Z_i mod p
    841                   * u = 1 / (Z_0 * ... * Z_i) mod P
    842                   */
    843                  if( i == 0 ) {
   \                     ??ecp_normalize_jac_many_5: (+1)
   \   000000CE   0x2F00             CMP      R7,#+0
   \   000000D0   0xD106             BNE      ??ecp_normalize_jac_many_7
    844                      MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
   \   000000D2   0xA906             ADD      R1,SP,#+24
   \   000000D4   0xA803             ADD      R0,SP,#+12
   \   000000D6   0x.... 0x....      BL       mbedtls_mpi_copy
   \   000000DA   0x0006             MOVS     R6,R0
   \   000000DC   0xD17D             BNE      ??ecp_normalize_jac_many_3
   \   000000DE   0xE020             B        ??ecp_normalize_jac_many_8
    845                  }
    846                  else
    847                  {
    848                      MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
   \                     ??ecp_normalize_jac_many_7: (+1)
   \   000000E0   0x9A00             LDR      R2,[SP, #+0]
   \   000000E2   0xA906             ADD      R1,SP,#+24
   \   000000E4   0xA803             ADD      R0,SP,#+12
   \   000000E6   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000000EA   0x0006             MOVS     R6,R0
   \   000000EC   0xD175             BNE      ??ecp_normalize_jac_many_3
   \   000000EE   0x990C             LDR      R1,[SP, #+48]
   \   000000F0   0xA803             ADD      R0,SP,#+12
   \   000000F2   0x.... 0x....      BL       ecp_modp
   \   000000F6   0x0006             MOVS     R6,R0
   \   000000F8   0xD16F             BNE      ??ecp_normalize_jac_many_3
   \   000000FA   0x68A0             LDR      R0,[R4, #+8]
   \   000000FC   0x1C40             ADDS     R0,R0,#+1
   \   000000FE   0x60A0             STR      R0,[R4, #+8]
    849                      MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
   \   00000100   0x682A             LDR      R2,[R5, #+0]
   \   00000102   0x3218             ADDS     R2,R2,#+24
   \   00000104   0xA906             ADD      R1,SP,#+24
   \   00000106   0xA806             ADD      R0,SP,#+24
   \   00000108   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000010C   0x0006             MOVS     R6,R0
   \   0000010E   0xD164             BNE      ??ecp_normalize_jac_many_3
   \   00000110   0x990C             LDR      R1,[SP, #+48]
   \   00000112   0xA806             ADD      R0,SP,#+24
   \   00000114   0x.... 0x....      BL       ecp_modp
   \   00000118   0x0006             MOVS     R6,R0
   \   0000011A   0xD15E             BNE      ??ecp_normalize_jac_many_3
   \   0000011C   0x68A0             LDR      R0,[R4, #+8]
   \   0000011E   0x1C40             ADDS     R0,R0,#+1
   \   00000120   0x60A0             STR      R0,[R4, #+8]
    850                  }
    851          
    852                  /*
    853                   * proceed as in normalize()
    854                   */
    855                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
   \                     ??ecp_normalize_jac_many_8: (+1)
   \   00000122   0xAA03             ADD      R2,SP,#+12
   \   00000124   0xA903             ADD      R1,SP,#+12
   \   00000126   0xA809             ADD      R0,SP,#+36
   \   00000128   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000012C   0x0006             MOVS     R6,R0
   \   0000012E   0xD154             BNE      ??ecp_normalize_jac_many_3
   \   00000130   0x990C             LDR      R1,[SP, #+48]
   \   00000132   0xA809             ADD      R0,SP,#+36
   \   00000134   0x.... 0x....      BL       ecp_modp
   \   00000138   0x0006             MOVS     R6,R0
   \   0000013A   0xD14E             BNE      ??ecp_normalize_jac_many_3
   \   0000013C   0x68A0             LDR      R0,[R4, #+8]
   \   0000013E   0x1C40             ADDS     R0,R0,#+1
   \   00000140   0x60A0             STR      R0,[R4, #+8]
    856                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
   \   00000142   0x6829             LDR      R1,[R5, #+0]
   \   00000144   0xAA09             ADD      R2,SP,#+36
   \   00000146   0x0008             MOVS     R0,R1
   \   00000148   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000014C   0x0006             MOVS     R6,R0
   \   0000014E   0xD144             BNE      ??ecp_normalize_jac_many_3
   \   00000150   0x990C             LDR      R1,[SP, #+48]
   \   00000152   0x6828             LDR      R0,[R5, #+0]
   \   00000154   0x.... 0x....      BL       ecp_modp
   \   00000158   0x0006             MOVS     R6,R0
   \   0000015A   0xD13E             BNE      ??ecp_normalize_jac_many_3
   \   0000015C   0x68A0             LDR      R0,[R4, #+8]
   \   0000015E   0x1C40             ADDS     R0,R0,#+1
   \   00000160   0x60A0             STR      R0,[R4, #+8]
    857                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
   \   00000162   0x6828             LDR      R0,[R5, #+0]
   \   00000164   0xAA09             ADD      R2,SP,#+36
   \   00000166   0x0001             MOVS     R1,R0
   \   00000168   0x310C             ADDS     R1,R1,#+12
   \   0000016A   0x300C             ADDS     R0,R0,#+12
   \   0000016C   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   00000170   0x0006             MOVS     R6,R0
   \   00000172   0xD132             BNE      ??ecp_normalize_jac_many_3
   \   00000174   0x990C             LDR      R1,[SP, #+48]
   \   00000176   0x6828             LDR      R0,[R5, #+0]
   \   00000178   0x300C             ADDS     R0,R0,#+12
   \   0000017A   0x.... 0x....      BL       ecp_modp
   \   0000017E   0x0006             MOVS     R6,R0
   \   00000180   0xD12B             BNE      ??ecp_normalize_jac_many_3
   \   00000182   0x68A0             LDR      R0,[R4, #+8]
   \   00000184   0x1C40             ADDS     R0,R0,#+1
   \   00000186   0x60A0             STR      R0,[R4, #+8]
    858                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
   \   00000188   0x6828             LDR      R0,[R5, #+0]
   \   0000018A   0xAA03             ADD      R2,SP,#+12
   \   0000018C   0x0001             MOVS     R1,R0
   \   0000018E   0x310C             ADDS     R1,R1,#+12
   \   00000190   0x300C             ADDS     R0,R0,#+12
   \   00000192   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   00000196   0x0006             MOVS     R6,R0
   \   00000198   0xD11F             BNE      ??ecp_normalize_jac_many_3
   \   0000019A   0x990C             LDR      R1,[SP, #+48]
   \   0000019C   0x6828             LDR      R0,[R5, #+0]
   \   0000019E   0x300C             ADDS     R0,R0,#+12
   \   000001A0   0x.... 0x....      BL       ecp_modp
   \   000001A4   0x0006             MOVS     R6,R0
   \   000001A6   0xD118             BNE      ??ecp_normalize_jac_many_3
   \   000001A8   0x68A0             LDR      R0,[R4, #+8]
   \   000001AA   0x1C40             ADDS     R0,R0,#+1
   \   000001AC   0x60A0             STR      R0,[R4, #+8]
    859          
    860                  /*
    861                   * Post-precessing: reclaim some memory by shrinking coordinates
    862                   * - not storing Z (always 1)
    863                   * - shrinking other coordinates, but still keeping the same number of
    864                   *   limbs as P, as otherwise it will too likely be regrown too fast.
    865                   */
    866                  MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
   \   000001AE   0x980C             LDR      R0,[SP, #+48]
   \   000001B0   0x6881             LDR      R1,[R0, #+8]
   \   000001B2   0x6828             LDR      R0,[R5, #+0]
   \   000001B4   0x.... 0x....      BL       mbedtls_mpi_shrink
   \   000001B8   0x0006             MOVS     R6,R0
   \   000001BA   0xD10E             BNE      ??ecp_normalize_jac_many_3
    867                  MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
   \   000001BC   0x980C             LDR      R0,[SP, #+48]
   \   000001BE   0x6881             LDR      R1,[R0, #+8]
   \   000001C0   0x6828             LDR      R0,[R5, #+0]
   \   000001C2   0x300C             ADDS     R0,R0,#+12
   \   000001C4   0x.... 0x....      BL       mbedtls_mpi_shrink
   \   000001C8   0x0006             MOVS     R6,R0
   \   000001CA   0xD106             BNE      ??ecp_normalize_jac_many_3
    868                  mbedtls_mpi_free( &T[i]->Z );
   \   000001CC   0x6828             LDR      R0,[R5, #+0]
   \   000001CE   0x3018             ADDS     R0,R0,#+24
   \   000001D0   0x.... 0x....      BL       mbedtls_mpi_free
    869          
    870                  if( i == 0 )
   \   000001D4   0x2F00             CMP      R7,#+0
   \   000001D6   0xD000             BEQ      .+4
   \   000001D8   0xE774             B        ??ecp_normalize_jac_many_6
    871                      break;
    872              }
    873          
    874          cleanup:
    875          
    876              mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
   \                     ??ecp_normalize_jac_many_3: (+1)
   \   000001DA   0xA806             ADD      R0,SP,#+24
   \   000001DC   0x.... 0x....      BL       mbedtls_mpi_free
   \   000001E0   0xA803             ADD      R0,SP,#+12
   \   000001E2   0x.... 0x....      BL       mbedtls_mpi_free
   \   000001E6   0xA809             ADD      R0,SP,#+36
   \   000001E8   0x.... 0x....      BL       mbedtls_mpi_free
    877              for( i = 0; i < t_len; i++ )
   \   000001EC   0x9C01             LDR      R4,[SP, #+4]
   \   000001EE   0x9D0E             LDR      R5,[SP, #+56]
    878                  mbedtls_mpi_free( &c[i] );
   \                     ??ecp_normalize_jac_many_9: (+1)
   \   000001F0   0x0020             MOVS     R0,R4
   \   000001F2   0x.... 0x....      BL       mbedtls_mpi_free
   \   000001F6   0x340C             ADDS     R4,R4,#+12
   \   000001F8   0x1E6D             SUBS     R5,R5,#+1
   \   000001FA   0xD1F9             BNE      ??ecp_normalize_jac_many_9
    879              mbedtls_free( c );
   \   000001FC   0x9801             LDR      R0,[SP, #+4]
   \   000001FE   0x.... 0x....      BL       free
    880          
    881              return( ret );
   \   00000202   0x0030             MOVS     R0,R6
   \                     ??ecp_normalize_jac_many_1: (+1)
   \   00000204   0xB00F             ADD      SP,SP,#+60
   \   00000206   0xBDF0             POP      {R4-R7,PC}       ;; return
    882          }
    883          
    884          /*
    885           * Conditional point inversion: Q -> -Q = (Q.X, -Q.Y, Q.Z) without leak.
    886           * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
    887           */

   \                                 In section .text, align 2, keep-with-next
    888          static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
    889                                      mbedtls_ecp_point *Q,
    890                                      unsigned char inv )
    891          {
   \                     ecp_safe_invert_jac: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0015             MOVS     R5,R2
    892              int ret;
    893              unsigned char nonzero;
    894              mbedtls_mpi mQY;
    895          
    896              mbedtls_mpi_init( &mQY );
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x.... 0x....      BL       mbedtls_mpi_init
    897          
    898              /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    899              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
   \   00000010   0x0022             MOVS     R2,R4
   \   00000012   0x320C             ADDS     R2,R2,#+12
   \   00000014   0x1D31             ADDS     R1,R6,#+4
   \   00000016   0x4668             MOV      R0,SP
   \   00000018   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   0000001C   0x0006             MOVS     R6,R0
   \   0000001E   0xD10F             BNE      ??ecp_safe_invert_jac_0
    900              nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x300C             ADDS     R0,R0,#+12
   \   00000026   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   0000002A   0x1E42             SUBS     R2,R0,#+1
   \   0000002C   0x4192             SBCS     R2,R2,R2
   \   0000002E   0x43D2             MVNS     R2,R2
   \   00000030   0x0FD2             LSRS     R2,R2,#+31
    901              MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
   \   00000032   0x402A             ANDS     R2,R2,R5
   \   00000034   0x4669             MOV      R1,SP
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0x300C             ADDS     R0,R0,#+12
   \   0000003A   0x.... 0x....      BL       mbedtls_mpi_safe_cond_assign
   \   0000003E   0x0006             MOVS     R6,R0
    902          
    903          cleanup:
    904              mbedtls_mpi_free( &mQY );
   \                     ??ecp_safe_invert_jac_0: (+1)
   \   00000040   0x4668             MOV      R0,SP
   \   00000042   0x.... 0x....      BL       mbedtls_mpi_free
    905          
    906              return( ret );
   \   00000046   0x0030             MOVS     R0,R6
   \   00000048   0xB004             ADD      SP,SP,#+16
   \   0000004A   0xBD70             POP      {R4-R6,PC}       ;; return
    907          }
    908          
    909          /*
    910           * Point doubling R = 2 P, Jacobian coordinates
    911           *
    912           * Based on http://www.hyperelliptic.org/EFD/g1p/auto-shortw-jacobian.html#doubling-dbl-1998-cmo-2 .
    913           *
    914           * We follow the variable naming fairly closely. The formula variations that trade a MUL for a SQR
    915           * (plus a few ADDs) aren't useful as our bignum implementation doesn't distinguish squaring.
    916           *
    917           * Standard optimizations are applied when curve parameter A is one of { 0, -3 }.
    918           *
    919           * Cost: 1D := 3M + 4S          (A ==  0)
    920           *             4M + 4S          (A == -3)
    921           *             3M + 6S + 1a     otherwise
    922           */

   \                                 In section .text, align 4, keep-with-next
    923          static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
    924                                     const mbedtls_ecp_point *P )
    925          {
   \                     ecp_double_jac: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x0017             MOVS     R7,R2
    926              int ret;
    927              mbedtls_mpi M, S, T, U;
    928          
    929          #if defined(MBEDTLS_SELF_TEST)
    930              dbl_count++;
   \   00000008   0x4D1E             LDR      R5,??ecp_double_jac_0
   \   0000000A   0x6868             LDR      R0,[R5, #+4]
   \   0000000C   0x1C40             ADDS     R0,R0,#+1
   \   0000000E   0x6068             STR      R0,[R5, #+4]
    931          #endif
    932          
    933          #if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    934              if ( mbedtls_internal_ecp_grp_capable( grp ) )
    935              {
    936                  return mbedtls_internal_ecp_double_jac( grp, R, P );
    937              }
    938          #endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */
    939          
    940              mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
   \   00000010   0xA809             ADD      R0,SP,#+36
   \   00000012   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000016   0x4668             MOV      R0,SP
   \   00000018   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000001C   0xA803             ADD      R0,SP,#+12
   \   0000001E   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000022   0xA806             ADD      R0,SP,#+24
   \   00000024   0x.... 0x....      BL       mbedtls_mpi_init
    941          
    942              /* Special case for A = -3 */
    943              if( grp->A.p == NULL )
   \   00000028   0x69A0             LDR      R0,[R4, #+24]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD170             BNE      ??ecp_double_jac_1
    944              {
    945                  /* M = 3(X + Z^2)(X - Z^2) */
    946                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
   \   0000002E   0x003A             MOVS     R2,R7
   \   00000030   0x3218             ADDS     R2,R2,#+24
   \   00000032   0x0039             MOVS     R1,R7
   \   00000034   0x3118             ADDS     R1,R1,#+24
   \   00000036   0x4668             MOV      R0,SP
   \   00000038   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000003C   0x0006             MOVS     R6,R0
   \   0000003E   0xD000             BEQ      .+4
   \   00000040   0xE21E             B        ??ecp_double_jac_2
   \   00000042   0x0021             MOVS     R1,R4
   \   00000044   0x4668             MOV      R0,SP
   \   00000046   0x.... 0x....      BL       ecp_modp
   \   0000004A   0x0006             MOVS     R6,R0
   \   0000004C   0xD000             BEQ      .+4
   \   0000004E   0xE217             B        ??ecp_double_jac_2
   \   00000050   0x68A8             LDR      R0,[R5, #+8]
   \   00000052   0x1C40             ADDS     R0,R0,#+1
   \   00000054   0x60A8             STR      R0,[R5, #+8]
    947                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
   \   00000056   0x466A             MOV      R2,SP
   \   00000058   0x0039             MOVS     R1,R7
   \   0000005A   0xA803             ADD      R0,SP,#+12
   \   0000005C   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   00000060   0x0006             MOVS     R6,R0
   \   00000062   0xD000             BEQ      .+4
   \   00000064   0xE20C             B        ??ecp_double_jac_2
   \                     ??ecp_double_jac_3: (+1)
   \   00000066   0x1D21             ADDS     R1,R4,#+4
   \   00000068   0xA803             ADD      R0,SP,#+12
   \   0000006A   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD40A             BMI      ??ecp_double_jac_4
   \   00000072   0x1D22             ADDS     R2,R4,#+4
   \   00000074   0xA903             ADD      R1,SP,#+12
   \   00000076   0xA803             ADD      R0,SP,#+12
   \   00000078   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   0000007C   0x0006             MOVS     R6,R0
   \   0000007E   0xD000             BEQ      .+4
   \   00000080   0xE1FE             B        ??ecp_double_jac_2
   \   00000082   0xE7F0             B        ??ecp_double_jac_3
   \                     ??ecp_double_jac_0:
   \   00000084   0x........         DC32     add_count
    948                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
   \                     ??ecp_double_jac_4: (+1)
   \   00000088   0x466A             MOV      R2,SP
   \   0000008A   0x0039             MOVS     R1,R7
   \   0000008C   0xA806             ADD      R0,SP,#+24
   \   0000008E   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   00000092   0x0006             MOVS     R6,R0
   \   00000094   0xD000             BEQ      .+4
   \   00000096   0xE1F3             B        ??ecp_double_jac_2
   \                     ??ecp_double_jac_5: (+1)
   \   00000098   0x9806             LDR      R0,[SP, #+24]
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD50E             BPL      ??ecp_double_jac_6
   \   0000009E   0x2100             MOVS     R1,#+0
   \   000000A0   0xA806             ADD      R0,SP,#+24
   \   000000A2   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD008             BEQ      ??ecp_double_jac_6
   \   000000AA   0x1D22             ADDS     R2,R4,#+4
   \   000000AC   0xA906             ADD      R1,SP,#+24
   \   000000AE   0xA806             ADD      R0,SP,#+24
   \   000000B0   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   000000B4   0x0006             MOVS     R6,R0
   \   000000B6   0xD000             BEQ      .+4
   \   000000B8   0xE1E2             B        ??ecp_double_jac_2
   \   000000BA   0xE7ED             B        ??ecp_double_jac_5
    949                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
   \                     ??ecp_double_jac_6: (+1)
   \   000000BC   0xAA06             ADD      R2,SP,#+24
   \   000000BE   0xA903             ADD      R1,SP,#+12
   \   000000C0   0x4668             MOV      R0,SP
   \   000000C2   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000000C6   0x0006             MOVS     R6,R0
   \   000000C8   0xD000             BEQ      .+4
   \   000000CA   0xE1D9             B        ??ecp_double_jac_2
   \   000000CC   0x0021             MOVS     R1,R4
   \   000000CE   0x4668             MOV      R0,SP
   \   000000D0   0x.... 0x....      BL       ecp_modp
   \   000000D4   0x0006             MOVS     R6,R0
   \   000000D6   0xD000             BEQ      .+4
   \   000000D8   0xE1D2             B        ??ecp_double_jac_2
   \   000000DA   0x68A8             LDR      R0,[R5, #+8]
   \   000000DC   0x1C40             ADDS     R0,R0,#+1
   \   000000DE   0x60A8             STR      R0,[R5, #+8]
    950                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
   \   000000E0   0x2203             MOVS     R2,#+3
   \   000000E2   0x4669             MOV      R1,SP
   \   000000E4   0xA809             ADD      R0,SP,#+36
   \   000000E6   0x.... 0x....      BL       mbedtls_mpi_mul_int
   \   000000EA   0x0006             MOVS     R6,R0
   \   000000EC   0xD000             BEQ      .+4
   \   000000EE   0xE1C7             B        ??ecp_double_jac_2
   \                     ??ecp_double_jac_7: (+1)
   \   000000F0   0x1D21             ADDS     R1,R4,#+4
   \   000000F2   0xA809             ADD      R0,SP,#+36
   \   000000F4   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   000000F8   0x2800             CMP      R0,#+0
   \   000000FA   0xD500             BPL      .+4
   \   000000FC   0xE088             B        ??ecp_double_jac_8
   \   000000FE   0x1D22             ADDS     R2,R4,#+4
   \   00000100   0xA909             ADD      R1,SP,#+36
   \   00000102   0xA809             ADD      R0,SP,#+36
   \   00000104   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   00000108   0x0006             MOVS     R6,R0
   \   0000010A   0xD000             BEQ      .+4
   \   0000010C   0xE1B8             B        ??ecp_double_jac_2
   \   0000010E   0xE7EF             B        ??ecp_double_jac_7
    951              }
    952              else
    953              {
    954                  /* M = 3.X^2 */
    955                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
   \                     ??ecp_double_jac_1: (+1)
   \   00000110   0x003A             MOVS     R2,R7
   \   00000112   0x0039             MOVS     R1,R7
   \   00000114   0x4668             MOV      R0,SP
   \   00000116   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000011A   0x0006             MOVS     R6,R0
   \   0000011C   0xD000             BEQ      .+4
   \   0000011E   0xE1AF             B        ??ecp_double_jac_2
   \   00000120   0x0021             MOVS     R1,R4
   \   00000122   0x4668             MOV      R0,SP
   \   00000124   0x.... 0x....      BL       ecp_modp
   \   00000128   0x0006             MOVS     R6,R0
   \   0000012A   0xD000             BEQ      .+4
   \   0000012C   0xE1A8             B        ??ecp_double_jac_2
   \   0000012E   0x68A8             LDR      R0,[R5, #+8]
   \   00000130   0x1C40             ADDS     R0,R0,#+1
   \   00000132   0x60A8             STR      R0,[R5, #+8]
    956                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
   \   00000134   0x2203             MOVS     R2,#+3
   \   00000136   0x4669             MOV      R1,SP
   \   00000138   0xA809             ADD      R0,SP,#+36
   \   0000013A   0x.... 0x....      BL       mbedtls_mpi_mul_int
   \   0000013E   0x0006             MOVS     R6,R0
   \   00000140   0xD000             BEQ      .+4
   \   00000142   0xE19D             B        ??ecp_double_jac_2
   \                     ??ecp_double_jac_9: (+1)
   \   00000144   0x1D21             ADDS     R1,R4,#+4
   \   00000146   0xA809             ADD      R0,SP,#+36
   \   00000148   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000014C   0x2800             CMP      R0,#+0
   \   0000014E   0xD408             BMI      ??ecp_double_jac_10
   \   00000150   0x1D22             ADDS     R2,R4,#+4
   \   00000152   0xA909             ADD      R1,SP,#+36
   \   00000154   0xA809             ADD      R0,SP,#+36
   \   00000156   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   0000015A   0x0006             MOVS     R6,R0
   \   0000015C   0xD000             BEQ      .+4
   \   0000015E   0xE18F             B        ??ecp_double_jac_2
   \   00000160   0xE7F0             B        ??ecp_double_jac_9
    957          
    958                  /* Optimize away for "koblitz" curves with A = 0 */
    959                  if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
   \                     ??ecp_double_jac_10: (+1)
   \   00000162   0x2100             MOVS     R1,#+0
   \   00000164   0x0020             MOVS     R0,R4
   \   00000166   0x3010             ADDS     R0,R0,#+16
   \   00000168   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   0000016C   0x2800             CMP      R0,#+0
   \   0000016E   0xD04F             BEQ      ??ecp_double_jac_8
    960                  {
    961                      /* M += A.Z^4 */
    962                      MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
   \   00000170   0x003A             MOVS     R2,R7
   \   00000172   0x3218             ADDS     R2,R2,#+24
   \   00000174   0x0039             MOVS     R1,R7
   \   00000176   0x3118             ADDS     R1,R1,#+24
   \   00000178   0x4668             MOV      R0,SP
   \   0000017A   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000017E   0x0006             MOVS     R6,R0
   \   00000180   0xD000             BEQ      .+4
   \   00000182   0xE17D             B        ??ecp_double_jac_2
   \   00000184   0x0021             MOVS     R1,R4
   \   00000186   0x4668             MOV      R0,SP
   \   00000188   0x.... 0x....      BL       ecp_modp
   \   0000018C   0x0006             MOVS     R6,R0
   \   0000018E   0xD000             BEQ      .+4
   \   00000190   0xE176             B        ??ecp_double_jac_2
   \   00000192   0x68A8             LDR      R0,[R5, #+8]
   \   00000194   0x1C40             ADDS     R0,R0,#+1
   \   00000196   0x60A8             STR      R0,[R5, #+8]
    963                      MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
   \   00000198   0x466A             MOV      R2,SP
   \   0000019A   0x4669             MOV      R1,SP
   \   0000019C   0xA803             ADD      R0,SP,#+12
   \   0000019E   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000001A2   0x0006             MOVS     R6,R0
   \   000001A4   0xD000             BEQ      .+4
   \   000001A6   0xE16B             B        ??ecp_double_jac_2
   \   000001A8   0x0021             MOVS     R1,R4
   \   000001AA   0xA803             ADD      R0,SP,#+12
   \   000001AC   0x.... 0x....      BL       ecp_modp
   \   000001B0   0x0006             MOVS     R6,R0
   \   000001B2   0xD000             BEQ      .+4
   \   000001B4   0xE164             B        ??ecp_double_jac_2
   \   000001B6   0x68A8             LDR      R0,[R5, #+8]
   \   000001B8   0x1C40             ADDS     R0,R0,#+1
   \   000001BA   0x60A8             STR      R0,[R5, #+8]
    964                      MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
   \   000001BC   0x0022             MOVS     R2,R4
   \   000001BE   0x3210             ADDS     R2,R2,#+16
   \   000001C0   0xA903             ADD      R1,SP,#+12
   \   000001C2   0x4668             MOV      R0,SP
   \   000001C4   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000001C8   0x0006             MOVS     R6,R0
   \   000001CA   0xD000             BEQ      .+4
   \   000001CC   0xE158             B        ??ecp_double_jac_2
   \   000001CE   0x0021             MOVS     R1,R4
   \   000001D0   0x4668             MOV      R0,SP
   \   000001D2   0x.... 0x....      BL       ecp_modp
   \   000001D6   0x0006             MOVS     R6,R0
   \   000001D8   0xD000             BEQ      .+4
   \   000001DA   0xE151             B        ??ecp_double_jac_2
   \   000001DC   0x68A8             LDR      R0,[R5, #+8]
   \   000001DE   0x1C40             ADDS     R0,R0,#+1
   \   000001E0   0x60A8             STR      R0,[R5, #+8]
    965                      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
   \   000001E2   0x466A             MOV      R2,SP
   \   000001E4   0xA909             ADD      R1,SP,#+36
   \   000001E6   0xA809             ADD      R0,SP,#+36
   \   000001E8   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   000001EC   0x0006             MOVS     R6,R0
   \   000001EE   0xD000             BEQ      .+4
   \   000001F0   0xE146             B        ??ecp_double_jac_2
   \                     ??ecp_double_jac_11: (+1)
   \   000001F2   0x1D21             ADDS     R1,R4,#+4
   \   000001F4   0xA809             ADD      R0,SP,#+36
   \   000001F6   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   000001FA   0x2800             CMP      R0,#+0
   \   000001FC   0xD408             BMI      ??ecp_double_jac_8
   \   000001FE   0x1D22             ADDS     R2,R4,#+4
   \   00000200   0xA909             ADD      R1,SP,#+36
   \   00000202   0xA809             ADD      R0,SP,#+36
   \   00000204   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   00000208   0x0006             MOVS     R6,R0
   \   0000020A   0xD000             BEQ      .+4
   \   0000020C   0xE138             B        ??ecp_double_jac_2
   \   0000020E   0xE7F0             B        ??ecp_double_jac_11
    966                  }
    967              }
    968          
    969              /* S = 4.X.Y^2 */
    970              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
   \                     ??ecp_double_jac_8: (+1)
   \   00000210   0x003A             MOVS     R2,R7
   \   00000212   0x320C             ADDS     R2,R2,#+12
   \   00000214   0x0039             MOVS     R1,R7
   \   00000216   0x310C             ADDS     R1,R1,#+12
   \   00000218   0xA803             ADD      R0,SP,#+12
   \   0000021A   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000021E   0x0006             MOVS     R6,R0
   \   00000220   0xD000             BEQ      .+4
   \   00000222   0xE12D             B        ??ecp_double_jac_2
   \   00000224   0x0021             MOVS     R1,R4
   \   00000226   0xA803             ADD      R0,SP,#+12
   \   00000228   0x.... 0x....      BL       ecp_modp
   \   0000022C   0x0006             MOVS     R6,R0
   \   0000022E   0xD000             BEQ      .+4
   \   00000230   0xE126             B        ??ecp_double_jac_2
   \   00000232   0x68A8             LDR      R0,[R5, #+8]
   \   00000234   0x1C40             ADDS     R0,R0,#+1
   \   00000236   0x60A8             STR      R0,[R5, #+8]
    971              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
   \   00000238   0x2101             MOVS     R1,#+1
   \   0000023A   0xA803             ADD      R0,SP,#+12
   \   0000023C   0x.... 0x....      BL       mbedtls_mpi_shift_l
   \   00000240   0x0006             MOVS     R6,R0
   \   00000242   0xD000             BEQ      .+4
   \   00000244   0xE11C             B        ??ecp_double_jac_2
   \                     ??ecp_double_jac_12: (+1)
   \   00000246   0x1D21             ADDS     R1,R4,#+4
   \   00000248   0xA803             ADD      R0,SP,#+12
   \   0000024A   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000024E   0x2800             CMP      R0,#+0
   \   00000250   0xD408             BMI      ??ecp_double_jac_13
   \   00000252   0x1D22             ADDS     R2,R4,#+4
   \   00000254   0xA903             ADD      R1,SP,#+12
   \   00000256   0xA803             ADD      R0,SP,#+12
   \   00000258   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   0000025C   0x0006             MOVS     R6,R0
   \   0000025E   0xD000             BEQ      .+4
   \   00000260   0xE10E             B        ??ecp_double_jac_2
   \   00000262   0xE7F0             B        ??ecp_double_jac_12
    972              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
   \                     ??ecp_double_jac_13: (+1)
   \   00000264   0xAA03             ADD      R2,SP,#+12
   \   00000266   0x0039             MOVS     R1,R7
   \   00000268   0x4668             MOV      R0,SP
   \   0000026A   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000026E   0x0006             MOVS     R6,R0
   \   00000270   0xD000             BEQ      .+4
   \   00000272   0xE105             B        ??ecp_double_jac_2
   \   00000274   0x0021             MOVS     R1,R4
   \   00000276   0x4668             MOV      R0,SP
   \   00000278   0x.... 0x....      BL       ecp_modp
   \   0000027C   0x0006             MOVS     R6,R0
   \   0000027E   0xD000             BEQ      .+4
   \   00000280   0xE0FE             B        ??ecp_double_jac_2
   \   00000282   0x68A8             LDR      R0,[R5, #+8]
   \   00000284   0x1C40             ADDS     R0,R0,#+1
   \   00000286   0x60A8             STR      R0,[R5, #+8]
    973              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
   \   00000288   0x2101             MOVS     R1,#+1
   \   0000028A   0x4668             MOV      R0,SP
   \   0000028C   0x.... 0x....      BL       mbedtls_mpi_shift_l
   \   00000290   0x0006             MOVS     R6,R0
   \   00000292   0xD000             BEQ      .+4
   \   00000294   0xE0F4             B        ??ecp_double_jac_2
   \                     ??ecp_double_jac_14: (+1)
   \   00000296   0x1D21             ADDS     R1,R4,#+4
   \   00000298   0x4668             MOV      R0,SP
   \   0000029A   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000029E   0x2800             CMP      R0,#+0
   \   000002A0   0xD408             BMI      ??ecp_double_jac_15
   \   000002A2   0x1D22             ADDS     R2,R4,#+4
   \   000002A4   0x4669             MOV      R1,SP
   \   000002A6   0x4668             MOV      R0,SP
   \   000002A8   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   000002AC   0x0006             MOVS     R6,R0
   \   000002AE   0xD000             BEQ      .+4
   \   000002B0   0xE0E6             B        ??ecp_double_jac_2
   \   000002B2   0xE7F0             B        ??ecp_double_jac_14
    974          
    975              /* U = 8.Y^4 */
    976              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
   \                     ??ecp_double_jac_15: (+1)
   \   000002B4   0xAA03             ADD      R2,SP,#+12
   \   000002B6   0xA903             ADD      R1,SP,#+12
   \   000002B8   0xA806             ADD      R0,SP,#+24
   \   000002BA   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000002BE   0x0006             MOVS     R6,R0
   \   000002C0   0xD000             BEQ      .+4
   \   000002C2   0xE0DD             B        ??ecp_double_jac_2
   \   000002C4   0x0021             MOVS     R1,R4
   \   000002C6   0xA806             ADD      R0,SP,#+24
   \   000002C8   0x.... 0x....      BL       ecp_modp
   \   000002CC   0x0006             MOVS     R6,R0
   \   000002CE   0xD000             BEQ      .+4
   \   000002D0   0xE0D6             B        ??ecp_double_jac_2
   \   000002D2   0x68A8             LDR      R0,[R5, #+8]
   \   000002D4   0x1C40             ADDS     R0,R0,#+1
   \   000002D6   0x60A8             STR      R0,[R5, #+8]
    977              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
   \   000002D8   0x2101             MOVS     R1,#+1
   \   000002DA   0xA806             ADD      R0,SP,#+24
   \   000002DC   0x.... 0x....      BL       mbedtls_mpi_shift_l
   \   000002E0   0x0006             MOVS     R6,R0
   \   000002E2   0xD000             BEQ      .+4
   \   000002E4   0xE0CC             B        ??ecp_double_jac_2
   \                     ??ecp_double_jac_16: (+1)
   \   000002E6   0x1D21             ADDS     R1,R4,#+4
   \   000002E8   0xA806             ADD      R0,SP,#+24
   \   000002EA   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   000002EE   0x2800             CMP      R0,#+0
   \   000002F0   0xD408             BMI      ??ecp_double_jac_17
   \   000002F2   0x1D22             ADDS     R2,R4,#+4
   \   000002F4   0xA906             ADD      R1,SP,#+24
   \   000002F6   0xA806             ADD      R0,SP,#+24
   \   000002F8   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   000002FC   0x0006             MOVS     R6,R0
   \   000002FE   0xD000             BEQ      .+4
   \   00000300   0xE0BE             B        ??ecp_double_jac_2
   \   00000302   0xE7F0             B        ??ecp_double_jac_16
    978          
    979              /* T = M^2 - 2.S */
    980              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
   \                     ??ecp_double_jac_17: (+1)
   \   00000304   0xAA09             ADD      R2,SP,#+36
   \   00000306   0xA909             ADD      R1,SP,#+36
   \   00000308   0xA803             ADD      R0,SP,#+12
   \   0000030A   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000030E   0x0006             MOVS     R6,R0
   \   00000310   0xD000             BEQ      .+4
   \   00000312   0xE0B5             B        ??ecp_double_jac_2
   \   00000314   0x0021             MOVS     R1,R4
   \   00000316   0xA803             ADD      R0,SP,#+12
   \   00000318   0x.... 0x....      BL       ecp_modp
   \   0000031C   0x0006             MOVS     R6,R0
   \   0000031E   0xD000             BEQ      .+4
   \   00000320   0xE0AE             B        ??ecp_double_jac_2
   \   00000322   0x68A8             LDR      R0,[R5, #+8]
   \   00000324   0x1C40             ADDS     R0,R0,#+1
   \   00000326   0x60A8             STR      R0,[R5, #+8]
    981              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
   \   00000328   0x466A             MOV      R2,SP
   \   0000032A   0xA903             ADD      R1,SP,#+12
   \   0000032C   0xA803             ADD      R0,SP,#+12
   \   0000032E   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   00000332   0x0006             MOVS     R6,R0
   \   00000334   0xD000             BEQ      .+4
   \   00000336   0xE0A3             B        ??ecp_double_jac_2
   \                     ??ecp_double_jac_18: (+1)
   \   00000338   0x9803             LDR      R0,[SP, #+12]
   \   0000033A   0x2800             CMP      R0,#+0
   \   0000033C   0xD50E             BPL      ??ecp_double_jac_19
   \   0000033E   0x2100             MOVS     R1,#+0
   \   00000340   0xA803             ADD      R0,SP,#+12
   \   00000342   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   00000346   0x2800             CMP      R0,#+0
   \   00000348   0xD008             BEQ      ??ecp_double_jac_19
   \   0000034A   0x1D22             ADDS     R2,R4,#+4
   \   0000034C   0xA903             ADD      R1,SP,#+12
   \   0000034E   0xA803             ADD      R0,SP,#+12
   \   00000350   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   00000354   0x0006             MOVS     R6,R0
   \   00000356   0xD000             BEQ      .+4
   \   00000358   0xE092             B        ??ecp_double_jac_2
   \   0000035A   0xE7ED             B        ??ecp_double_jac_18
    982              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
   \                     ??ecp_double_jac_19: (+1)
   \   0000035C   0x466A             MOV      R2,SP
   \   0000035E   0xA903             ADD      R1,SP,#+12
   \   00000360   0xA803             ADD      R0,SP,#+12
   \   00000362   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   00000366   0x0006             MOVS     R6,R0
   \   00000368   0xD000             BEQ      .+4
   \   0000036A   0xE089             B        ??ecp_double_jac_2
   \                     ??ecp_double_jac_20: (+1)
   \   0000036C   0x9803             LDR      R0,[SP, #+12]
   \   0000036E   0x2800             CMP      R0,#+0
   \   00000370   0xD50D             BPL      ??ecp_double_jac_21
   \   00000372   0x2100             MOVS     R1,#+0
   \   00000374   0xA803             ADD      R0,SP,#+12
   \   00000376   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   0000037A   0x2800             CMP      R0,#+0
   \   0000037C   0xD007             BEQ      ??ecp_double_jac_21
   \   0000037E   0x1D22             ADDS     R2,R4,#+4
   \   00000380   0xA903             ADD      R1,SP,#+12
   \   00000382   0xA803             ADD      R0,SP,#+12
   \   00000384   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   00000388   0x0006             MOVS     R6,R0
   \   0000038A   0xD179             BNE      ??ecp_double_jac_2
   \   0000038C   0xE7EE             B        ??ecp_double_jac_20
    983          
    984              /* S = M(S - T) - U */
    985              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
   \                     ??ecp_double_jac_21: (+1)
   \   0000038E   0xAA03             ADD      R2,SP,#+12
   \   00000390   0x4669             MOV      R1,SP
   \   00000392   0x4668             MOV      R0,SP
   \   00000394   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   00000398   0x0006             MOVS     R6,R0
   \   0000039A   0xD171             BNE      ??ecp_double_jac_2
   \                     ??ecp_double_jac_22: (+1)
   \   0000039C   0x9800             LDR      R0,[SP, #+0]
   \   0000039E   0x2800             CMP      R0,#+0
   \   000003A0   0xD50D             BPL      ??ecp_double_jac_23
   \   000003A2   0x2100             MOVS     R1,#+0
   \   000003A4   0x4668             MOV      R0,SP
   \   000003A6   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   000003AA   0x2800             CMP      R0,#+0
   \   000003AC   0xD007             BEQ      ??ecp_double_jac_23
   \   000003AE   0x1D22             ADDS     R2,R4,#+4
   \   000003B0   0x4669             MOV      R1,SP
   \   000003B2   0x4668             MOV      R0,SP
   \   000003B4   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   000003B8   0x0006             MOVS     R6,R0
   \   000003BA   0xD161             BNE      ??ecp_double_jac_2
   \   000003BC   0xE7EE             B        ??ecp_double_jac_22
    986              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
   \                     ??ecp_double_jac_23: (+1)
   \   000003BE   0xAA09             ADD      R2,SP,#+36
   \   000003C0   0x4669             MOV      R1,SP
   \   000003C2   0x4668             MOV      R0,SP
   \   000003C4   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000003C8   0x0006             MOVS     R6,R0
   \   000003CA   0xD159             BNE      ??ecp_double_jac_2
   \   000003CC   0x0021             MOVS     R1,R4
   \   000003CE   0x4668             MOV      R0,SP
   \   000003D0   0x.... 0x....      BL       ecp_modp
   \   000003D4   0x0006             MOVS     R6,R0
   \   000003D6   0xD153             BNE      ??ecp_double_jac_2
   \   000003D8   0x68A8             LDR      R0,[R5, #+8]
   \   000003DA   0x1C40             ADDS     R0,R0,#+1
   \   000003DC   0x60A8             STR      R0,[R5, #+8]
    987              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
   \   000003DE   0xAA06             ADD      R2,SP,#+24
   \   000003E0   0x4669             MOV      R1,SP
   \   000003E2   0x4668             MOV      R0,SP
   \   000003E4   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   000003E8   0x0006             MOVS     R6,R0
   \   000003EA   0xD149             BNE      ??ecp_double_jac_2
   \                     ??ecp_double_jac_24: (+1)
   \   000003EC   0x9800             LDR      R0,[SP, #+0]
   \   000003EE   0x2800             CMP      R0,#+0
   \   000003F0   0xD50D             BPL      ??ecp_double_jac_25
   \   000003F2   0x2100             MOVS     R1,#+0
   \   000003F4   0x4668             MOV      R0,SP
   \   000003F6   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   000003FA   0x2800             CMP      R0,#+0
   \   000003FC   0xD007             BEQ      ??ecp_double_jac_25
   \   000003FE   0x1D22             ADDS     R2,R4,#+4
   \   00000400   0x4669             MOV      R1,SP
   \   00000402   0x4668             MOV      R0,SP
   \   00000404   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   00000408   0x0006             MOVS     R6,R0
   \   0000040A   0xD139             BNE      ??ecp_double_jac_2
   \   0000040C   0xE7EE             B        ??ecp_double_jac_24
    988          
    989              /* U = 2.Y.Z */
    990              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
   \                     ??ecp_double_jac_25: (+1)
   \   0000040E   0x003A             MOVS     R2,R7
   \   00000410   0x3218             ADDS     R2,R2,#+24
   \   00000412   0x0039             MOVS     R1,R7
   \   00000414   0x310C             ADDS     R1,R1,#+12
   \   00000416   0xA806             ADD      R0,SP,#+24
   \   00000418   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000041C   0x0006             MOVS     R6,R0
   \   0000041E   0xD12F             BNE      ??ecp_double_jac_2
   \   00000420   0x0021             MOVS     R1,R4
   \   00000422   0xA806             ADD      R0,SP,#+24
   \   00000424   0x.... 0x....      BL       ecp_modp
   \   00000428   0x0006             MOVS     R6,R0
   \   0000042A   0xD129             BNE      ??ecp_double_jac_2
   \   0000042C   0x68A8             LDR      R0,[R5, #+8]
   \   0000042E   0x1C40             ADDS     R0,R0,#+1
   \   00000430   0x60A8             STR      R0,[R5, #+8]
    991              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
   \   00000432   0x2101             MOVS     R1,#+1
   \   00000434   0xA806             ADD      R0,SP,#+24
   \   00000436   0x.... 0x....      BL       mbedtls_mpi_shift_l
   \   0000043A   0x0006             MOVS     R6,R0
   \   0000043C   0xD120             BNE      ??ecp_double_jac_2
   \                     ??ecp_double_jac_26: (+1)
   \   0000043E   0x1D21             ADDS     R1,R4,#+4
   \   00000440   0xA806             ADD      R0,SP,#+24
   \   00000442   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000446   0x2800             CMP      R0,#+0
   \   00000448   0xD407             BMI      ??ecp_double_jac_27
   \   0000044A   0x1D22             ADDS     R2,R4,#+4
   \   0000044C   0xA906             ADD      R1,SP,#+24
   \   0000044E   0xA806             ADD      R0,SP,#+24
   \   00000450   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   00000454   0x0006             MOVS     R6,R0
   \   00000456   0xD113             BNE      ??ecp_double_jac_2
   \   00000458   0xE7F1             B        ??ecp_double_jac_26
    992          
    993              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
   \                     ??ecp_double_jac_27: (+1)
   \   0000045A   0xA903             ADD      R1,SP,#+12
   \   0000045C   0x980C             LDR      R0,[SP, #+48]
   \   0000045E   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000462   0x0006             MOVS     R6,R0
   \   00000464   0xD10C             BNE      ??ecp_double_jac_2
    994              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
   \   00000466   0x4669             MOV      R1,SP
   \   00000468   0x980C             LDR      R0,[SP, #+48]
   \   0000046A   0x300C             ADDS     R0,R0,#+12
   \   0000046C   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000470   0x0006             MOVS     R6,R0
   \   00000472   0xD105             BNE      ??ecp_double_jac_2
    995              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
   \   00000474   0xA906             ADD      R1,SP,#+24
   \   00000476   0x980C             LDR      R0,[SP, #+48]
   \   00000478   0x3018             ADDS     R0,R0,#+24
   \   0000047A   0x.... 0x....      BL       mbedtls_mpi_copy
   \   0000047E   0x0006             MOVS     R6,R0
    996          
    997          cleanup:
    998              mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
   \                     ??ecp_double_jac_2: (+1)
   \   00000480   0xA809             ADD      R0,SP,#+36
   \   00000482   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000486   0x4668             MOV      R0,SP
   \   00000488   0x.... 0x....      BL       mbedtls_mpi_free
   \   0000048C   0xA803             ADD      R0,SP,#+12
   \   0000048E   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000492   0xA806             ADD      R0,SP,#+24
   \   00000494   0x.... 0x....      BL       mbedtls_mpi_free
    999          
   1000              return( ret );
   \   00000498   0x0030             MOVS     R0,R6
   \   0000049A   0xB00D             ADD      SP,SP,#+52
   \   0000049C   0xBDF0             POP      {R4-R7,PC}       ;; return
   1001          }
   1002          
   1003          /*
   1004           * Addition: R = P + Q, mixed affine-Jacobian coordinates (GECC 3.22)
   1005           *
   1006           * The coordinates of Q must be normalized (= affine),
   1007           * but those of P don't need to. R is not normalized.
   1008           *
   1009           * Special cases: (1) P or Q is zero, (2) R is zero, (3) P == Q.
   1010           * None of these cases can happen as intermediate step in ecp_mul_comb():
   1011           * - at each step, P, Q and R are multiples of the base point, the factor
   1012           *   being less than its order, so none of them is zero;
   1013           * - Q is an odd multiple of the base point, P an even multiple,
   1014           *   due to the choice of precomputed points in the modified comb method.
   1015           * So branches for these cases do not leak secret information.
   1016           *
   1017           * We accept Q->Z being unset (saving memory in tables) as meaning 1.
   1018           *
   1019           * Cost: 1A := 8M + 3S
   1020           */

   \                                 In section .text, align 4, keep-with-next
   1021          static int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
   1022                                    const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
   1023          {
   \                     ecp_add_mixed: (+1)
   \   00000000   0xB5FA             PUSH     {R1,R3-R7,LR}
   \   00000002   0xB095             SUB      SP,SP,#+84
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x0017             MOVS     R7,R2
   1024              int ret;
   1025              mbedtls_mpi T1, T2, T3, T4, X, Y, Z;
   1026          
   1027          #if defined(MBEDTLS_SELF_TEST)
   1028              add_count++;
   \   00000008   0x4C14             LDR      R4,??ecp_add_mixed_0
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x1C40             ADDS     R0,R0,#+1
   \   0000000E   0x6020             STR      R0,[R4, #+0]
   1029          #endif
   1030          
   1031          #if defined(MBEDTLS_ECP_ADD_MIXED_ALT)
   1032              if ( mbedtls_internal_ecp_grp_capable( grp ) )
   1033              {
   1034                  return mbedtls_internal_ecp_add_mixed( grp, R, P, Q );
   1035              }
   1036          #endif /* MBEDTLS_ECP_ADD_MIXED_ALT */
   1037          
   1038              /*
   1039               * Trivial cases: P == 0 or Q == 0 (case 1)
   1040               */
   1041              if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x0038             MOVS     R0,R7
   \   00000014   0x3018             ADDS     R0,R0,#+24
   \   00000016   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD101             BNE      ??ecp_add_mixed_1
   1042                  return( mbedtls_ecp_copy( R, Q ) );
   \   0000001E   0x9916             LDR      R1,[SP, #+88]
   \   00000020   0xE00B             B.N      ??ecp_add_mixed_2
   1043          
   1044              if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
   \                     ??ecp_add_mixed_1: (+1)
   \   00000022   0x9816             LDR      R0,[SP, #+88]
   \   00000024   0x6A00             LDR      R0,[R0, #+32]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD01C             BEQ      ??ecp_add_mixed_3
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x9816             LDR      R0,[SP, #+88]
   \   0000002E   0x3018             ADDS     R0,R0,#+24
   \   00000030   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD104             BNE      ??ecp_add_mixed_4
   1045                  return( mbedtls_ecp_copy( R, P ) );
   \   00000038   0x0039             MOVS     R1,R7
   \                     ??ecp_add_mixed_2: (+1)
   \   0000003A   0x9815             LDR      R0,[SP, #+84]
   \   0000003C   0x.... 0x....      BL       mbedtls_ecp_copy
   \   00000040   0xE1D9             B        ??ecp_add_mixed_5
   1046          
   1047              /*
   1048               * Make sure Q coordinates are normalized
   1049               */
   1050              if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
   \                     ??ecp_add_mixed_4: (+1)
   \   00000042   0x9816             LDR      R0,[SP, #+88]
   \   00000044   0x6A00             LDR      R0,[R0, #+32]
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD00C             BEQ      ??ecp_add_mixed_3
   \   0000004A   0x2101             MOVS     R1,#+1
   \   0000004C   0x9816             LDR      R0,[SP, #+88]
   \   0000004E   0x3018             ADDS     R0,R0,#+24
   \   00000050   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD005             BEQ      ??ecp_add_mixed_3
   1051                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \   00000058   0x4801             LDR      R0,??ecp_add_mixed_0+0x4  ;; 0xffffb080
   \   0000005A   0xE1CC             B        ??ecp_add_mixed_5
   \                     ??ecp_add_mixed_0:
   \   0000005C   0x........         DC32     add_count
   \   00000060   0xFFFFB080         DC32     0xffffb080
   1052          
   1053              mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
   \                     ??ecp_add_mixed_3: (+1)
   \   00000064   0x4668             MOV      R0,SP
   \   00000066   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000006A   0xA809             ADD      R0,SP,#+36
   \   0000006C   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000070   0xA803             ADD      R0,SP,#+12
   \   00000072   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000076   0xA80F             ADD      R0,SP,#+60
   \   00000078   0x.... 0x....      BL       mbedtls_mpi_init
   1054              mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
   \   0000007C   0xA806             ADD      R0,SP,#+24
   \   0000007E   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000082   0xA80C             ADD      R0,SP,#+48
   \   00000084   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000088   0xA812             ADD      R0,SP,#+72
   \   0000008A   0x.... 0x....      BL       mbedtls_mpi_init
   1055          
   1056              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
   \   0000008E   0x003A             MOVS     R2,R7
   \   00000090   0x3218             ADDS     R2,R2,#+24
   \   00000092   0x0039             MOVS     R1,R7
   \   00000094   0x3118             ADDS     R1,R1,#+24
   \   00000096   0x4668             MOV      R0,SP
   \   00000098   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000009C   0x0006             MOVS     R6,R0
   \   0000009E   0xD000             BEQ      .+4
   \   000000A0   0xE193             B        ??ecp_add_mixed_6
   \   000000A2   0x0029             MOVS     R1,R5
   \   000000A4   0x4668             MOV      R0,SP
   \   000000A6   0x.... 0x....      BL       ecp_modp
   \   000000AA   0x0006             MOVS     R6,R0
   \   000000AC   0xD000             BEQ      .+4
   \   000000AE   0xE18C             B        ??ecp_add_mixed_6
   \   000000B0   0x68A0             LDR      R0,[R4, #+8]
   \   000000B2   0x1C40             ADDS     R0,R0,#+1
   \   000000B4   0x60A0             STR      R0,[R4, #+8]
   1057              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
   \   000000B6   0x003A             MOVS     R2,R7
   \   000000B8   0x3218             ADDS     R2,R2,#+24
   \   000000BA   0x4669             MOV      R1,SP
   \   000000BC   0xA809             ADD      R0,SP,#+36
   \   000000BE   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000000C2   0x0006             MOVS     R6,R0
   \   000000C4   0xD000             BEQ      .+4
   \   000000C6   0xE180             B        ??ecp_add_mixed_6
   \   000000C8   0x0029             MOVS     R1,R5
   \   000000CA   0xA809             ADD      R0,SP,#+36
   \   000000CC   0x.... 0x....      BL       ecp_modp
   \   000000D0   0x0006             MOVS     R6,R0
   \   000000D2   0xD000             BEQ      .+4
   \   000000D4   0xE179             B        ??ecp_add_mixed_6
   \   000000D6   0x68A0             LDR      R0,[R4, #+8]
   \   000000D8   0x1C40             ADDS     R0,R0,#+1
   \   000000DA   0x60A0             STR      R0,[R4, #+8]
   1058              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
   \   000000DC   0x9A16             LDR      R2,[SP, #+88]
   \   000000DE   0x4669             MOV      R1,SP
   \   000000E0   0x4668             MOV      R0,SP
   \   000000E2   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000000E6   0x0006             MOVS     R6,R0
   \   000000E8   0xD000             BEQ      .+4
   \   000000EA   0xE16E             B        ??ecp_add_mixed_6
   \   000000EC   0x0029             MOVS     R1,R5
   \   000000EE   0x4668             MOV      R0,SP
   \   000000F0   0x.... 0x....      BL       ecp_modp
   \   000000F4   0x0006             MOVS     R6,R0
   \   000000F6   0xD000             BEQ      .+4
   \   000000F8   0xE167             B        ??ecp_add_mixed_6
   \   000000FA   0x68A0             LDR      R0,[R4, #+8]
   \   000000FC   0x1C40             ADDS     R0,R0,#+1
   \   000000FE   0x60A0             STR      R0,[R4, #+8]
   1059              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
   \   00000100   0x9A16             LDR      R2,[SP, #+88]
   \   00000102   0x320C             ADDS     R2,R2,#+12
   \   00000104   0xA909             ADD      R1,SP,#+36
   \   00000106   0xA809             ADD      R0,SP,#+36
   \   00000108   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000010C   0x0006             MOVS     R6,R0
   \   0000010E   0xD000             BEQ      .+4
   \   00000110   0xE15B             B        ??ecp_add_mixed_6
   \   00000112   0x0029             MOVS     R1,R5
   \   00000114   0xA809             ADD      R0,SP,#+36
   \   00000116   0x.... 0x....      BL       ecp_modp
   \   0000011A   0x0006             MOVS     R6,R0
   \   0000011C   0xD000             BEQ      .+4
   \   0000011E   0xE154             B        ??ecp_add_mixed_6
   \   00000120   0x68A0             LDR      R0,[R4, #+8]
   \   00000122   0x1C40             ADDS     R0,R0,#+1
   \   00000124   0x60A0             STR      R0,[R4, #+8]
   1060              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
   \   00000126   0x003A             MOVS     R2,R7
   \   00000128   0x4669             MOV      R1,SP
   \   0000012A   0x4668             MOV      R0,SP
   \   0000012C   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   00000130   0x0006             MOVS     R6,R0
   \   00000132   0xD000             BEQ      .+4
   \   00000134   0xE149             B        ??ecp_add_mixed_6
   \                     ??ecp_add_mixed_7: (+1)
   \   00000136   0x9800             LDR      R0,[SP, #+0]
   \   00000138   0x2800             CMP      R0,#+0
   \   0000013A   0xD50E             BPL      ??ecp_add_mixed_8
   \   0000013C   0x2100             MOVS     R1,#+0
   \   0000013E   0x4668             MOV      R0,SP
   \   00000140   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   00000144   0x2800             CMP      R0,#+0
   \   00000146   0xD008             BEQ      ??ecp_add_mixed_8
   \   00000148   0x1D2A             ADDS     R2,R5,#+4
   \   0000014A   0x4669             MOV      R1,SP
   \   0000014C   0x4668             MOV      R0,SP
   \   0000014E   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   00000152   0x0006             MOVS     R6,R0
   \   00000154   0xD000             BEQ      .+4
   \   00000156   0xE138             B        ??ecp_add_mixed_6
   \   00000158   0xE7ED             B        ??ecp_add_mixed_7
   1061              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
   \                     ??ecp_add_mixed_8: (+1)
   \   0000015A   0x003A             MOVS     R2,R7
   \   0000015C   0x320C             ADDS     R2,R2,#+12
   \   0000015E   0xA909             ADD      R1,SP,#+36
   \   00000160   0xA809             ADD      R0,SP,#+36
   \   00000162   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   00000166   0x0006             MOVS     R6,R0
   \   00000168   0xD000             BEQ      .+4
   \   0000016A   0xE12E             B        ??ecp_add_mixed_6
   \                     ??ecp_add_mixed_9: (+1)
   \   0000016C   0x9809             LDR      R0,[SP, #+36]
   \   0000016E   0x2800             CMP      R0,#+0
   \   00000170   0xD50E             BPL      ??ecp_add_mixed_10
   \   00000172   0x2100             MOVS     R1,#+0
   \   00000174   0xA809             ADD      R0,SP,#+36
   \   00000176   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   0000017A   0x2800             CMP      R0,#+0
   \   0000017C   0xD008             BEQ      ??ecp_add_mixed_10
   \   0000017E   0x1D2A             ADDS     R2,R5,#+4
   \   00000180   0xA909             ADD      R1,SP,#+36
   \   00000182   0xA809             ADD      R0,SP,#+36
   \   00000184   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   00000188   0x0006             MOVS     R6,R0
   \   0000018A   0xD000             BEQ      .+4
   \   0000018C   0xE11D             B        ??ecp_add_mixed_6
   \   0000018E   0xE7ED             B        ??ecp_add_mixed_9
   1062          
   1063              /* Special cases (2) and (3) */
   1064              if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
   \                     ??ecp_add_mixed_10: (+1)
   \   00000190   0x2100             MOVS     R1,#+0
   \   00000192   0x4668             MOV      R0,SP
   \   00000194   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   00000198   0x2800             CMP      R0,#+0
   \   0000019A   0xD10F             BNE      ??ecp_add_mixed_11
   1065              {
   1066                  if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
   \   0000019C   0x2100             MOVS     R1,#+0
   \   0000019E   0xA809             ADD      R0,SP,#+36
   \   000001A0   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   000001A4   0x2800             CMP      R0,#+0
   \   000001A6   0xD105             BNE      ??ecp_add_mixed_12
   1067                  {
   1068                      ret = ecp_double_jac( grp, R, P );
   \   000001A8   0x003A             MOVS     R2,R7
   \   000001AA   0x9915             LDR      R1,[SP, #+84]
   \   000001AC   0x0028             MOVS     R0,R5
   \   000001AE   0x.... 0x....      BL       ecp_double_jac
   \   000001B2   0xE109             B        ??ecp_add_mixed_13
   1069                      goto cleanup;
   1070                  }
   1071                  else
   1072                  {
   1073                      ret = mbedtls_ecp_set_zero( R );
   \                     ??ecp_add_mixed_12: (+1)
   \   000001B4   0x9815             LDR      R0,[SP, #+84]
   \   000001B6   0x.... 0x....      BL       mbedtls_ecp_set_zero
   \   000001BA   0xE105             B        ??ecp_add_mixed_13
   1074                      goto cleanup;
   1075                  }
   1076              }
   1077          
   1078              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
   \                     ??ecp_add_mixed_11: (+1)
   \   000001BC   0x466A             MOV      R2,SP
   \   000001BE   0x0039             MOVS     R1,R7
   \   000001C0   0x3118             ADDS     R1,R1,#+24
   \   000001C2   0xA812             ADD      R0,SP,#+72
   \   000001C4   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000001C8   0x0006             MOVS     R6,R0
   \   000001CA   0xD000             BEQ      .+4
   \   000001CC   0xE0FD             B        ??ecp_add_mixed_6
   \   000001CE   0x0029             MOVS     R1,R5
   \   000001D0   0xA812             ADD      R0,SP,#+72
   \   000001D2   0x.... 0x....      BL       ecp_modp
   \   000001D6   0x0006             MOVS     R6,R0
   \   000001D8   0xD000             BEQ      .+4
   \   000001DA   0xE0F6             B        ??ecp_add_mixed_6
   \   000001DC   0x68A0             LDR      R0,[R4, #+8]
   \   000001DE   0x1C40             ADDS     R0,R0,#+1
   \   000001E0   0x60A0             STR      R0,[R4, #+8]
   1079              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
   \   000001E2   0x466A             MOV      R2,SP
   \   000001E4   0x4669             MOV      R1,SP
   \   000001E6   0xA803             ADD      R0,SP,#+12
   \   000001E8   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000001EC   0x0006             MOVS     R6,R0
   \   000001EE   0xD000             BEQ      .+4
   \   000001F0   0xE0EB             B        ??ecp_add_mixed_6
   \   000001F2   0x0029             MOVS     R1,R5
   \   000001F4   0xA803             ADD      R0,SP,#+12
   \   000001F6   0x.... 0x....      BL       ecp_modp
   \   000001FA   0x0006             MOVS     R6,R0
   \   000001FC   0xD000             BEQ      .+4
   \   000001FE   0xE0E4             B        ??ecp_add_mixed_6
   \   00000200   0x68A0             LDR      R0,[R4, #+8]
   \   00000202   0x1C40             ADDS     R0,R0,#+1
   \   00000204   0x60A0             STR      R0,[R4, #+8]
   1080              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
   \   00000206   0x466A             MOV      R2,SP
   \   00000208   0xA903             ADD      R1,SP,#+12
   \   0000020A   0xA80F             ADD      R0,SP,#+60
   \   0000020C   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   00000210   0x0006             MOVS     R6,R0
   \   00000212   0xD000             BEQ      .+4
   \   00000214   0xE0D9             B        ??ecp_add_mixed_6
   \   00000216   0x0029             MOVS     R1,R5
   \   00000218   0xA80F             ADD      R0,SP,#+60
   \   0000021A   0x.... 0x....      BL       ecp_modp
   \   0000021E   0x0006             MOVS     R6,R0
   \   00000220   0xD000             BEQ      .+4
   \   00000222   0xE0D2             B        ??ecp_add_mixed_6
   \   00000224   0x68A0             LDR      R0,[R4, #+8]
   \   00000226   0x1C40             ADDS     R0,R0,#+1
   \   00000228   0x60A0             STR      R0,[R4, #+8]
   1081              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
   \   0000022A   0x003A             MOVS     R2,R7
   \   0000022C   0xA903             ADD      R1,SP,#+12
   \   0000022E   0xA803             ADD      R0,SP,#+12
   \   00000230   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   00000234   0x0006             MOVS     R6,R0
   \   00000236   0xD000             BEQ      .+4
   \   00000238   0xE0C7             B        ??ecp_add_mixed_6
   \   0000023A   0x0029             MOVS     R1,R5
   \   0000023C   0xA803             ADD      R0,SP,#+12
   \   0000023E   0x.... 0x....      BL       ecp_modp
   \   00000242   0x0006             MOVS     R6,R0
   \   00000244   0xD000             BEQ      .+4
   \   00000246   0xE0C0             B        ??ecp_add_mixed_6
   \   00000248   0x68A0             LDR      R0,[R4, #+8]
   \   0000024A   0x1C40             ADDS     R0,R0,#+1
   \   0000024C   0x60A0             STR      R0,[R4, #+8]
   1082              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
   \   0000024E   0x2202             MOVS     R2,#+2
   \   00000250   0xA903             ADD      R1,SP,#+12
   \   00000252   0x4668             MOV      R0,SP
   \   00000254   0x.... 0x....      BL       mbedtls_mpi_mul_int
   \   00000258   0x0006             MOVS     R6,R0
   \   0000025A   0xD000             BEQ      .+4
   \   0000025C   0xE0B5             B        ??ecp_add_mixed_6
   \                     ??ecp_add_mixed_14: (+1)
   \   0000025E   0x1D29             ADDS     R1,R5,#+4
   \   00000260   0x4668             MOV      R0,SP
   \   00000262   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000266   0x2800             CMP      R0,#+0
   \   00000268   0xD408             BMI      ??ecp_add_mixed_15
   \   0000026A   0x1D2A             ADDS     R2,R5,#+4
   \   0000026C   0x4669             MOV      R1,SP
   \   0000026E   0x4668             MOV      R0,SP
   \   00000270   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   00000274   0x0006             MOVS     R6,R0
   \   00000276   0xD000             BEQ      .+4
   \   00000278   0xE0A7             B        ??ecp_add_mixed_6
   \   0000027A   0xE7F0             B        ??ecp_add_mixed_14
   1083              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
   \                     ??ecp_add_mixed_15: (+1)
   \   0000027C   0xAA09             ADD      R2,SP,#+36
   \   0000027E   0xA909             ADD      R1,SP,#+36
   \   00000280   0xA806             ADD      R0,SP,#+24
   \   00000282   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   00000286   0x0006             MOVS     R6,R0
   \   00000288   0xD000             BEQ      .+4
   \   0000028A   0xE09E             B        ??ecp_add_mixed_6
   \   0000028C   0x0029             MOVS     R1,R5
   \   0000028E   0xA806             ADD      R0,SP,#+24
   \   00000290   0x.... 0x....      BL       ecp_modp
   \   00000294   0x0006             MOVS     R6,R0
   \   00000296   0xD000             BEQ      .+4
   \   00000298   0xE097             B        ??ecp_add_mixed_6
   \   0000029A   0x68A0             LDR      R0,[R4, #+8]
   \   0000029C   0x1C40             ADDS     R0,R0,#+1
   \   0000029E   0x60A0             STR      R0,[R4, #+8]
   1084              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
   \   000002A0   0x466A             MOV      R2,SP
   \   000002A2   0xA906             ADD      R1,SP,#+24
   \   000002A4   0xA806             ADD      R0,SP,#+24
   \   000002A6   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   000002AA   0x0006             MOVS     R6,R0
   \   000002AC   0xD000             BEQ      .+4
   \   000002AE   0xE08C             B        ??ecp_add_mixed_6
   \                     ??ecp_add_mixed_16: (+1)
   \   000002B0   0x9806             LDR      R0,[SP, #+24]
   \   000002B2   0x2800             CMP      R0,#+0
   \   000002B4   0xD50D             BPL      ??ecp_add_mixed_17
   \   000002B6   0x2100             MOVS     R1,#+0
   \   000002B8   0xA806             ADD      R0,SP,#+24
   \   000002BA   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   000002BE   0x2800             CMP      R0,#+0
   \   000002C0   0xD007             BEQ      ??ecp_add_mixed_17
   \   000002C2   0x1D2A             ADDS     R2,R5,#+4
   \   000002C4   0xA906             ADD      R1,SP,#+24
   \   000002C6   0xA806             ADD      R0,SP,#+24
   \   000002C8   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   000002CC   0x0006             MOVS     R6,R0
   \   000002CE   0xD17C             BNE      ??ecp_add_mixed_6
   \   000002D0   0xE7EE             B        ??ecp_add_mixed_16
   1085              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
   \                     ??ecp_add_mixed_17: (+1)
   \   000002D2   0xAA0F             ADD      R2,SP,#+60
   \   000002D4   0xA906             ADD      R1,SP,#+24
   \   000002D6   0xA806             ADD      R0,SP,#+24
   \   000002D8   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   000002DC   0x0006             MOVS     R6,R0
   \   000002DE   0xD174             BNE      ??ecp_add_mixed_6
   \                     ??ecp_add_mixed_18: (+1)
   \   000002E0   0x9806             LDR      R0,[SP, #+24]
   \   000002E2   0x2800             CMP      R0,#+0
   \   000002E4   0xD50D             BPL      ??ecp_add_mixed_19
   \   000002E6   0x2100             MOVS     R1,#+0
   \   000002E8   0xA806             ADD      R0,SP,#+24
   \   000002EA   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   000002EE   0x2800             CMP      R0,#+0
   \   000002F0   0xD007             BEQ      ??ecp_add_mixed_19
   \   000002F2   0x1D2A             ADDS     R2,R5,#+4
   \   000002F4   0xA906             ADD      R1,SP,#+24
   \   000002F6   0xA806             ADD      R0,SP,#+24
   \   000002F8   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   000002FC   0x0006             MOVS     R6,R0
   \   000002FE   0xD164             BNE      ??ecp_add_mixed_6
   \   00000300   0xE7EE             B        ??ecp_add_mixed_18
   1086              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
   \                     ??ecp_add_mixed_19: (+1)
   \   00000302   0xAA06             ADD      R2,SP,#+24
   \   00000304   0xA903             ADD      R1,SP,#+12
   \   00000306   0xA803             ADD      R0,SP,#+12
   \   00000308   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   0000030C   0x0006             MOVS     R6,R0
   \   0000030E   0xD15C             BNE      ??ecp_add_mixed_6
   \                     ??ecp_add_mixed_20: (+1)
   \   00000310   0x9803             LDR      R0,[SP, #+12]
   \   00000312   0x2800             CMP      R0,#+0
   \   00000314   0xD50D             BPL      ??ecp_add_mixed_21
   \   00000316   0x2100             MOVS     R1,#+0
   \   00000318   0xA803             ADD      R0,SP,#+12
   \   0000031A   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   0000031E   0x2800             CMP      R0,#+0
   \   00000320   0xD007             BEQ      ??ecp_add_mixed_21
   \   00000322   0x1D2A             ADDS     R2,R5,#+4
   \   00000324   0xA903             ADD      R1,SP,#+12
   \   00000326   0xA803             ADD      R0,SP,#+12
   \   00000328   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   0000032C   0x0006             MOVS     R6,R0
   \   0000032E   0xD14C             BNE      ??ecp_add_mixed_6
   \   00000330   0xE7EE             B        ??ecp_add_mixed_20
   1087              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
   \                     ??ecp_add_mixed_21: (+1)
   \   00000332   0xAA09             ADD      R2,SP,#+36
   \   00000334   0xA903             ADD      R1,SP,#+12
   \   00000336   0xA803             ADD      R0,SP,#+12
   \   00000338   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000033C   0x0006             MOVS     R6,R0
   \   0000033E   0xD144             BNE      ??ecp_add_mixed_6
   \   00000340   0x0029             MOVS     R1,R5
   \   00000342   0xA803             ADD      R0,SP,#+12
   \   00000344   0x.... 0x....      BL       ecp_modp
   \   00000348   0x0006             MOVS     R6,R0
   \   0000034A   0xD13E             BNE      ??ecp_add_mixed_6
   \   0000034C   0x68A0             LDR      R0,[R4, #+8]
   \   0000034E   0x1C40             ADDS     R0,R0,#+1
   \   00000350   0x60A0             STR      R0,[R4, #+8]
   1088              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
   \   00000352   0x003A             MOVS     R2,R7
   \   00000354   0x320C             ADDS     R2,R2,#+12
   \   00000356   0xA90F             ADD      R1,SP,#+60
   \   00000358   0xA80F             ADD      R0,SP,#+60
   \   0000035A   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000035E   0x0006             MOVS     R6,R0
   \   00000360   0xD133             BNE      ??ecp_add_mixed_6
   \   00000362   0x0029             MOVS     R1,R5
   \   00000364   0xA80F             ADD      R0,SP,#+60
   \   00000366   0x.... 0x....      BL       ecp_modp
   \   0000036A   0x0006             MOVS     R6,R0
   \   0000036C   0xD12D             BNE      ??ecp_add_mixed_6
   \   0000036E   0x68A0             LDR      R0,[R4, #+8]
   \   00000370   0x1C40             ADDS     R0,R0,#+1
   \   00000372   0x60A0             STR      R0,[R4, #+8]
   1089              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
   \   00000374   0xAA0F             ADD      R2,SP,#+60
   \   00000376   0xA903             ADD      R1,SP,#+12
   \   00000378   0xA80C             ADD      R0,SP,#+48
   \   0000037A   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   0000037E   0x0006             MOVS     R6,R0
   \   00000380   0xD123             BNE      ??ecp_add_mixed_6
   \                     ??ecp_add_mixed_22: (+1)
   \   00000382   0x980C             LDR      R0,[SP, #+48]
   \   00000384   0x2800             CMP      R0,#+0
   \   00000386   0xD50D             BPL      ??ecp_add_mixed_23
   \   00000388   0x2100             MOVS     R1,#+0
   \   0000038A   0xA80C             ADD      R0,SP,#+48
   \   0000038C   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   00000390   0x2800             CMP      R0,#+0
   \   00000392   0xD007             BEQ      ??ecp_add_mixed_23
   \   00000394   0x1D2A             ADDS     R2,R5,#+4
   \   00000396   0xA90C             ADD      R1,SP,#+48
   \   00000398   0xA80C             ADD      R0,SP,#+48
   \   0000039A   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   0000039E   0x0006             MOVS     R6,R0
   \   000003A0   0xD113             BNE      ??ecp_add_mixed_6
   \   000003A2   0xE7EE             B        ??ecp_add_mixed_22
   1090          
   1091              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
   \                     ??ecp_add_mixed_23: (+1)
   \   000003A4   0xA906             ADD      R1,SP,#+24
   \   000003A6   0x9815             LDR      R0,[SP, #+84]
   \   000003A8   0x.... 0x....      BL       mbedtls_mpi_copy
   \   000003AC   0x0006             MOVS     R6,R0
   \   000003AE   0xD10C             BNE      ??ecp_add_mixed_6
   1092              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
   \   000003B0   0xA90C             ADD      R1,SP,#+48
   \   000003B2   0x9815             LDR      R0,[SP, #+84]
   \   000003B4   0x300C             ADDS     R0,R0,#+12
   \   000003B6   0x.... 0x....      BL       mbedtls_mpi_copy
   \   000003BA   0x0006             MOVS     R6,R0
   \   000003BC   0xD105             BNE      ??ecp_add_mixed_6
   1093              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
   \   000003BE   0xA912             ADD      R1,SP,#+72
   \   000003C0   0x9815             LDR      R0,[SP, #+84]
   \   000003C2   0x3018             ADDS     R0,R0,#+24
   \   000003C4   0x.... 0x....      BL       mbedtls_mpi_copy
   \                     ??ecp_add_mixed_13: (+1)
   \   000003C8   0x0006             MOVS     R6,R0
   1094          
   1095          cleanup:
   1096          
   1097              mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
   \                     ??ecp_add_mixed_6: (+1)
   \   000003CA   0x4668             MOV      R0,SP
   \   000003CC   0x.... 0x....      BL       mbedtls_mpi_free
   \   000003D0   0xA809             ADD      R0,SP,#+36
   \   000003D2   0x.... 0x....      BL       mbedtls_mpi_free
   \   000003D6   0xA803             ADD      R0,SP,#+12
   \   000003D8   0x.... 0x....      BL       mbedtls_mpi_free
   \   000003DC   0xA80F             ADD      R0,SP,#+60
   \   000003DE   0x.... 0x....      BL       mbedtls_mpi_free
   1098              mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
   \   000003E2   0xA806             ADD      R0,SP,#+24
   \   000003E4   0x.... 0x....      BL       mbedtls_mpi_free
   \   000003E8   0xA80C             ADD      R0,SP,#+48
   \   000003EA   0x.... 0x....      BL       mbedtls_mpi_free
   \   000003EE   0xA812             ADD      R0,SP,#+72
   \   000003F0   0x.... 0x....      BL       mbedtls_mpi_free
   1099          
   1100              return( ret );
   \   000003F4   0x0030             MOVS     R0,R6
   \                     ??ecp_add_mixed_5: (+1)
   \   000003F6   0xB017             ADD      SP,SP,#+92
   \   000003F8   0xBDF0             POP      {R4-R7,PC}       ;; return
   1101          }
   1102          
   1103          /*
   1104           * Randomize jacobian coordinates:
   1105           * (X, Y, Z) -> (l^2 X, l^3 Y, l Z) for random l
   1106           * This is sort of the reverse operation of ecp_normalize_jac().
   1107           *
   1108           * This countermeasure was first suggested in [2].
   1109           */

   \                                 In section .text, align 2, keep-with-next
   1110          static int ecp_randomize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,
   1111                          int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
   1112          {
   \                     ecp_randomize_jac: (+1)
   \   00000000   0xB5FC             PUSH     {R2-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0007             MOVS     R7,R0
   \   00000006   0x000E             MOVS     R6,R1
   1113              int ret;
   1114              mbedtls_mpi l, ll;
   1115              size_t p_size;
   1116              int count = 0;
   \   00000008   0x2400             MOVS     R4,#+0
   1117          
   1118          #if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)
   1119              if ( mbedtls_internal_ecp_grp_capable( grp ) )
   1120              {
   1121                  return mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng );
   1122              }
   1123          #endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */
   1124          
   1125              p_size = ( grp->pbits + 7 ) / 8;
   \   0000000A   0x6DB8             LDR      R0,[R7, #+88]
   \   0000000C   0x1DC0             ADDS     R0,R0,#+7
   \   0000000E   0x08C0             LSRS     R0,R0,#+3
   \   00000010   0x9006             STR      R0,[SP, #+24]
   1126              mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000018   0xA803             ADD      R0,SP,#+12
   \   0000001A   0x.... 0x....      BL       mbedtls_mpi_init
   1127          
   1128              /* Generate l such that 1 < l < p */
   1129              do
   1130              {
   1131                  MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
   \                     ??ecp_randomize_jac_0: (+1)
   \   0000001E   0x9B08             LDR      R3,[SP, #+32]
   \   00000020   0x9A07             LDR      R2,[SP, #+28]
   \   00000022   0x9906             LDR      R1,[SP, #+24]
   \   00000024   0x4668             MOV      R0,SP
   \   00000026   0x.... 0x....      BL       mbedtls_mpi_fill_random
   \   0000002A   0x0005             MOVS     R5,R0
   \   0000002C   0xD16F             BNE      ??ecp_randomize_jac_1
   1132          
   1133                  while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
   \                     ??ecp_randomize_jac_2: (+1)
   \   0000002E   0x1D39             ADDS     R1,R7,#+4
   \   00000030   0x4668             MOV      R0,SP
   \   00000032   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD406             BMI      ??ecp_randomize_jac_3
   1134                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x4668             MOV      R0,SP
   \   0000003E   0x.... 0x....      BL       mbedtls_mpi_shift_r
   \   00000042   0x0005             MOVS     R5,R0
   \   00000044   0xD163             BNE      ??ecp_randomize_jac_1
   \   00000046   0xE7F2             B        ??ecp_randomize_jac_2
   1135          
   1136                  if( count++ > 10 )
   \                     ??ecp_randomize_jac_3: (+1)
   \   00000048   0x0020             MOVS     R0,R4
   \   0000004A   0x1C64             ADDS     R4,R4,#+1
   \   0000004C   0x280B             CMP      R0,#+11
   \   0000004E   0xDB01             BLT      ??ecp_randomize_jac_4
   1137                      return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
   \   00000050   0x....             LDR      R0,??DataTable33  ;; 0xffffb300
   \   00000052   0xE063             B        ??ecp_randomize_jac_5
   1138              }
   1139              while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
   \                     ??ecp_randomize_jac_4: (+1)
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x4668             MOV      R0,SP
   \   00000058   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   0000005C   0x2801             CMP      R0,#+1
   \   0000005E   0xDBDE             BLT      ??ecp_randomize_jac_0
   1140          
   1141              /* Z = l * Z */
   1142              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
   \   00000060   0x466A             MOV      R2,SP
   \   00000062   0x0031             MOVS     R1,R6
   \   00000064   0x3118             ADDS     R1,R1,#+24
   \   00000066   0x0030             MOVS     R0,R6
   \   00000068   0x3018             ADDS     R0,R0,#+24
   \   0000006A   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000006E   0x0005             MOVS     R5,R0
   \   00000070   0xD14D             BNE      ??ecp_randomize_jac_1
   \   00000072   0x0039             MOVS     R1,R7
   \   00000074   0x0030             MOVS     R0,R6
   \   00000076   0x3018             ADDS     R0,R0,#+24
   \   00000078   0x.... 0x....      BL       ecp_modp
   \   0000007C   0x0005             MOVS     R5,R0
   \   0000007E   0xD146             BNE      ??ecp_randomize_jac_1
   \   00000080   0x....             LDR      R4,??DataTable33_1
   \   00000082   0x68A0             LDR      R0,[R4, #+8]
   \   00000084   0x1C40             ADDS     R0,R0,#+1
   \   00000086   0x60A0             STR      R0,[R4, #+8]
   1143          
   1144              /* X = l^2 * X */
   1145              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
   \   00000088   0x466A             MOV      R2,SP
   \   0000008A   0x4669             MOV      R1,SP
   \   0000008C   0xA803             ADD      R0,SP,#+12
   \   0000008E   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   00000092   0x0005             MOVS     R5,R0
   \   00000094   0xD13B             BNE      ??ecp_randomize_jac_1
   \   00000096   0x0039             MOVS     R1,R7
   \   00000098   0xA803             ADD      R0,SP,#+12
   \   0000009A   0x.... 0x....      BL       ecp_modp
   \   0000009E   0x0005             MOVS     R5,R0
   \   000000A0   0xD135             BNE      ??ecp_randomize_jac_1
   \   000000A2   0x68A0             LDR      R0,[R4, #+8]
   \   000000A4   0x1C40             ADDS     R0,R0,#+1
   \   000000A6   0x60A0             STR      R0,[R4, #+8]
   1146              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
   \   000000A8   0xAA03             ADD      R2,SP,#+12
   \   000000AA   0x0031             MOVS     R1,R6
   \   000000AC   0x0030             MOVS     R0,R6
   \   000000AE   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000000B2   0x0005             MOVS     R5,R0
   \   000000B4   0xD12B             BNE      ??ecp_randomize_jac_1
   \   000000B6   0x0039             MOVS     R1,R7
   \   000000B8   0x0030             MOVS     R0,R6
   \   000000BA   0x.... 0x....      BL       ecp_modp
   \   000000BE   0x0005             MOVS     R5,R0
   \   000000C0   0xD125             BNE      ??ecp_randomize_jac_1
   \   000000C2   0x68A0             LDR      R0,[R4, #+8]
   \   000000C4   0x1C40             ADDS     R0,R0,#+1
   \   000000C6   0x60A0             STR      R0,[R4, #+8]
   1147          
   1148              /* Y = l^3 * Y */
   1149              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
   \   000000C8   0x466A             MOV      R2,SP
   \   000000CA   0xA903             ADD      R1,SP,#+12
   \   000000CC   0xA803             ADD      R0,SP,#+12
   \   000000CE   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000000D2   0x0005             MOVS     R5,R0
   \   000000D4   0xD11B             BNE      ??ecp_randomize_jac_1
   \   000000D6   0x0039             MOVS     R1,R7
   \   000000D8   0xA803             ADD      R0,SP,#+12
   \   000000DA   0x.... 0x....      BL       ecp_modp
   \   000000DE   0x0005             MOVS     R5,R0
   \   000000E0   0xD115             BNE      ??ecp_randomize_jac_1
   \   000000E2   0x68A0             LDR      R0,[R4, #+8]
   \   000000E4   0x1C40             ADDS     R0,R0,#+1
   \   000000E6   0x60A0             STR      R0,[R4, #+8]
   1150              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
   \   000000E8   0xAA03             ADD      R2,SP,#+12
   \   000000EA   0x0031             MOVS     R1,R6
   \   000000EC   0x310C             ADDS     R1,R1,#+12
   \   000000EE   0x0030             MOVS     R0,R6
   \   000000F0   0x300C             ADDS     R0,R0,#+12
   \   000000F2   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000000F6   0x0005             MOVS     R5,R0
   \   000000F8   0xD109             BNE      ??ecp_randomize_jac_1
   \   000000FA   0x0039             MOVS     R1,R7
   \   000000FC   0x0030             MOVS     R0,R6
   \   000000FE   0x300C             ADDS     R0,R0,#+12
   \   00000100   0x.... 0x....      BL       ecp_modp
   \   00000104   0x0005             MOVS     R5,R0
   \   00000106   0xD102             BNE      ??ecp_randomize_jac_1
   \   00000108   0x68A0             LDR      R0,[R4, #+8]
   \   0000010A   0x1C40             ADDS     R0,R0,#+1
   \   0000010C   0x60A0             STR      R0,[R4, #+8]
   1151          
   1152          cleanup:
   1153              mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
   \                     ??ecp_randomize_jac_1: (+1)
   \   0000010E   0x4668             MOV      R0,SP
   \   00000110   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000114   0xA803             ADD      R0,SP,#+12
   \   00000116   0x.... 0x....      BL       mbedtls_mpi_free
   1154          
   1155              return( ret );
   \   0000011A   0x0028             MOVS     R0,R5
   \                     ??ecp_randomize_jac_5: (+1)
   \   0000011C   0xB009             ADD      SP,SP,#+36
   \   0000011E   0xBDF0             POP      {R4-R7,PC}       ;; return
   1156          }
   1157          
   1158          /*
   1159           * Check and define parameters used by the comb method (see below for details)
   1160           */
   1161          #if MBEDTLS_ECP_WINDOW_SIZE < 2 || MBEDTLS_ECP_WINDOW_SIZE > 7
   1162          #error "MBEDTLS_ECP_WINDOW_SIZE out of bounds"
   1163          #endif
   1164          
   1165          /* d = ceil( n / w ) */
   1166          #define COMB_MAX_D      ( MBEDTLS_ECP_MAX_BITS + 1 ) / 2
   1167          
   1168          /* number of precomputed points */
   1169          #define COMB_MAX_PRE    ( 1 << ( MBEDTLS_ECP_WINDOW_SIZE - 1 ) )
   1170          
   1171          /*
   1172           * Compute the representation of m that will be used with our comb method.
   1173           *
   1174           * The basic comb method is described in GECC 3.44 for example. We use a
   1175           * modified version that provides resistance to SPA by avoiding zero
   1176           * digits in the representation as in [3]. We modify the method further by
   1177           * requiring that all K_i be odd, which has the small cost that our
   1178           * representation uses one more K_i, due to carries.
   1179           *
   1180           * Also, for the sake of compactness, only the seven low-order bits of x[i]
   1181           * are used to represent K_i, and the msb of x[i] encodes the the sign (s_i in
   1182           * the paper): it is set if and only if if s_i == -1;
   1183           *
   1184           * Calling conventions:
   1185           * - x is an array of size d + 1
   1186           * - w is the size, ie number of teeth, of the comb, and must be between
   1187           *   2 and 7 (in practice, between 2 and MBEDTLS_ECP_WINDOW_SIZE)
   1188           * - m is the MPI, expected to be odd and such that bitlength(m) <= w * d
   1189           *   (the result will be incorrect if these assumptions are not satisfied)
   1190           */

   \                                 In section .text, align 2, keep-with-next
   1191          static void ecp_comb_fixed( unsigned char x[], size_t d,
   1192                                      unsigned char w, const mbedtls_mpi *m )
   1193          {
   \                     ecp_comb_fixed: (+1)
   \   00000000   0xB5FD             PUSH     {R0,R2-R7,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x000F             MOVS     R7,R1
   1194              size_t i, j;
   1195              unsigned char c, cc, adjust;
   1196          
   1197              memset( x, 0, d+1 );
   \   00000006   0x1C49             ADDS     R1,R1,#+1
   \   00000008   0x.... 0x....      BL       __aeabi_memclr
   \   0000000C   0x2600             MOVS     R6,#+0
   \   0000000E   0x2F00             CMP      R7,#+0
   \   00000010   0xD01A             BEQ      ??ecp_comb_fixed_0
   \   00000012   0x9C02             LDR      R4,[SP, #+8]
   \   00000014   0x4668             MOV      R0,SP
   \   00000016   0x7B00             LDRB     R0,[R0, #+12]
   \   00000018   0x9000             STR      R0,[SP, #+0]
   1198          
   1199              /* First get the classical comb values (except for x_d = 0) */
   1200              for( i = 0; i < d; i++ )
   1201                  for( j = 0; j < w; j++ )
   \                     ??ecp_comb_fixed_1: (+1)
   \   0000001A   0x2500             MOVS     R5,#+0
   \   0000001C   0x4668             MOV      R0,SP
   \   0000001E   0x7B00             LDRB     R0,[R0, #+12]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD00D             BEQ      ??ecp_comb_fixed_2
   1202                      x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
   \                     ??ecp_comb_fixed_3: (+1)
   \   00000024   0x0038             MOVS     R0,R7
   \   00000026   0x4368             MULS     R0,R5,R0
   \   00000028   0x1831             ADDS     R1,R6,R0
   \   0000002A   0x9804             LDR      R0,[SP, #+16]
   \   0000002C   0x.... 0x....      BL       mbedtls_mpi_get_bit
   \   00000030   0x7821             LDRB     R1,[R4, #+0]
   \   00000032   0x40A8             LSLS     R0,R0,R5
   \   00000034   0x4308             ORRS     R0,R0,R1
   \   00000036   0x7020             STRB     R0,[R4, #+0]
   \   00000038   0x1C6D             ADDS     R5,R5,#+1
   \   0000003A   0x9800             LDR      R0,[SP, #+0]
   \   0000003C   0x4285             CMP      R5,R0
   \   0000003E   0xD3F1             BCC      ??ecp_comb_fixed_3
   \                     ??ecp_comb_fixed_2: (+1)
   \   00000040   0x1C76             ADDS     R6,R6,#+1
   \   00000042   0x1C64             ADDS     R4,R4,#+1
   \   00000044   0x42BE             CMP      R6,R7
   \   00000046   0xD3E8             BCC      ??ecp_comb_fixed_1
   1203          
   1204              /* Now make sure x_1 .. x_d are odd */
   1205              c = 0;
   \                     ??ecp_comb_fixed_0: (+1)
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x9000             STR      R0,[SP, #+0]
   \   0000004C   0x2001             MOVS     R0,#+1
   \   0000004E   0x2F00             CMP      R7,#+0
   \   00000050   0xD026             BEQ      ??ecp_comb_fixed_4
   \   00000052   0x9902             LDR      R1,[SP, #+8]
   \   00000054   0x1C49             ADDS     R1,R1,#+1
   1206              for( i = 1; i <= d; i++ )
   1207              {
   1208                  /* Add carry and update it */
   1209                  cc   = x[i] & c;
   \                     ??ecp_comb_fixed_5: (+1)
   \   00000056   0x780B             LDRB     R3,[R1, #+0]
   \   00000058   0x9A00             LDR      R2,[SP, #+0]
   \   0000005A   0x401A             ANDS     R2,R2,R3
   \   0000005C   0x466C             MOV      R4,SP
   \   0000005E   0x7162             STRB     R2,[R4, #+5]
   1210                  x[i] = x[i] ^ c;
   \   00000060   0x9A00             LDR      R2,[SP, #+0]
   \   00000062   0x405A             EORS     R2,R2,R3
   \   00000064   0x700A             STRB     R2,[R1, #+0]
   1211                  c = cc;
   1212          
   1213                  /* Adjust if needed, avoiding branches */
   1214                  adjust = 1 - ( x[i] & 0x01 );
   \   00000066   0x2301             MOVS     R3,#+1
   \   00000068   0x07D4             LSLS     R4,R2,#+31
   \   0000006A   0x0FE4             LSRS     R4,R4,#+31
   \   0000006C   0x1B1B             SUBS     R3,R3,R4
   \   0000006E   0xB2DB             UXTB     R3,R3
   \   00000070   0x1E4C             SUBS     R4,R1,#+1
   \   00000072   0x7824             LDRB     R4,[R4, #+0]
   \   00000074   0x001D             MOVS     R5,R3
   \   00000076   0x4365             MULS     R5,R4,R5
   \   00000078   0x466E             MOV      R6,SP
   \   0000007A   0x7135             STRB     R5,[R6, #+4]
   \   0000007C   0x466D             MOV      R5,SP
   \   0000007E   0x796D             LDRB     R5,[R5, #+5]
   \   00000080   0x7936             LDRB     R6,[R6, #+4]
   \   00000082   0x4016             ANDS     R6,R6,R2
   \   00000084   0x432E             ORRS     R6,R6,R5
   \   00000086   0x9600             STR      R6,[SP, #+0]
   1215                  c   |= x[i] & ( x[i-1] * adjust );
   1216                  x[i] = x[i] ^ ( x[i-1] * adjust );
   \   00000088   0x466D             MOV      R5,SP
   \   0000008A   0x792D             LDRB     R5,[R5, #+4]
   \   0000008C   0x4055             EORS     R5,R5,R2
   \   0000008E   0x700D             STRB     R5,[R1, #+0]
   1217                  x[i-1] |= adjust << 7;
   \   00000090   0x01DA             LSLS     R2,R3,#+7
   \   00000092   0x4322             ORRS     R2,R2,R4
   \   00000094   0x1E4B             SUBS     R3,R1,#+1
   \   00000096   0x701A             STRB     R2,[R3, #+0]
   1218              }
   \   00000098   0x1C40             ADDS     R0,R0,#+1
   \   0000009A   0x1C49             ADDS     R1,R1,#+1
   \   0000009C   0x4287             CMP      R7,R0
   \   0000009E   0xD2DA             BCS      ??ecp_comb_fixed_5
   1219          }
   \                     ??ecp_comb_fixed_4: (+1)
   \   000000A0   0xB005             ADD      SP,SP,#+20
   \   000000A2   0xBDF0             POP      {R4-R7,PC}       ;; return
   1220          
   1221          /*
   1222           * Precompute points for the comb method
   1223           *
   1224           * If i = i_{w-1} ... i_1 is the binary representation of i, then
   1225           * T[i] = i_{w-1} 2^{(w-1)d} P + ... + i_1 2^d P + P
   1226           *
   1227           * T must be able to hold 2^{w - 1} elements
   1228           *
   1229           * Cost: d(w-1) D + (2^{w-1} - 1) A + 1 N(w-1) + 1 N(2^{w-1} - 1)
   1230           */

   \                                 In section .text, align 2, keep-with-next
   1231          static int ecp_precompute_comb( const mbedtls_ecp_group *grp,
   1232                                          mbedtls_ecp_point T[], const mbedtls_ecp_point *P,
   1233                                          unsigned char w, size_t d )
   1234          {
   \                     ecp_precompute_comb: (+1)
   \   00000000   0xB5F3             PUSH     {R0,R1,R4-R7,LR}
   \   00000002   0xB0A3             SUB      SP,SP,#+140
   \   00000004   0x0011             MOVS     R1,R2
   \   00000006   0x001D             MOVS     R5,R3
   1235              int ret;
   1236              unsigned char i, k;
   1237              size_t j;
   1238              mbedtls_ecp_point *cur, *TT[COMB_MAX_PRE - 1];
   1239          
   1240              /*
   1241               * Set T[0] = P and
   1242               * T[2^{l-1}] = 2^{dl} P for l = 1 .. w-1 (this is not the final value)
   1243               */
   1244              MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
   \   00000008   0x9824             LDR      R0,[SP, #+144]
   \   0000000A   0x.... 0x....      BL       mbedtls_ecp_copy
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD178             BNE      ??ecp_precompute_comb_0
   \   00000012   0x2600             MOVS     R6,#+0
   \   00000014   0x2401             MOVS     R4,#+1
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x1E69             SUBS     R1,R5,#+1
   \   0000001A   0x4088             LSLS     R0,R0,R1
   \   0000001C   0x9002             STR      R0,[SP, #+8]
   \   0000001E   0xE033             B        ??ecp_precompute_comb_1
   1245          
   1246              k = 0;
   1247              for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
   1248              {
   1249                  cur = T + i;
   1250                  MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
   \                     ??ecp_precompute_comb_2: (+1)
   \   00000020   0x9824             LDR      R0,[SP, #+144]
   \   00000022   0x1061             ASRS     R1,R4,#+1
   \   00000024   0x00CA             LSLS     R2,R1,#+3
   \   00000026   0x1851             ADDS     R1,R2,R1
   \   00000028   0x0089             LSLS     R1,R1,#+2
   \   0000002A   0x1845             ADDS     R5,R0,R1
   \   0000002C   0x00E1             LSLS     R1,R4,#+3
   \   0000002E   0x1909             ADDS     R1,R1,R4
   \   00000030   0x0089             LSLS     R1,R1,#+2
   \   00000032   0x1847             ADDS     R7,R0,R1
   \   00000034   0x0029             MOVS     R1,R5
   \   00000036   0x0038             MOVS     R0,R7
   \   00000038   0x.... 0x....      BL       mbedtls_mpi_copy
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD10D             BNE      ??ecp_precompute_comb_3
   \   00000040   0x0029             MOVS     R1,R5
   \   00000042   0x310C             ADDS     R1,R1,#+12
   \   00000044   0x0038             MOVS     R0,R7
   \   00000046   0x300C             ADDS     R0,R0,#+12
   \   00000048   0x.... 0x....      BL       mbedtls_mpi_copy
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD105             BNE      ??ecp_precompute_comb_3
   \   00000050   0x0029             MOVS     R1,R5
   \   00000052   0x3118             ADDS     R1,R1,#+24
   \   00000054   0x0038             MOVS     R0,R7
   \   00000056   0x3018             ADDS     R0,R0,#+24
   \   00000058   0x.... 0x....      BL       mbedtls_mpi_copy
   \                     ??ecp_precompute_comb_3: (+1)
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD151             BNE      ??ecp_precompute_comb_0
   1251                  for( j = 0; j < d; j++ )
   \   00000060   0x982A             LDR      R0,[SP, #+168]
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD009             BEQ      ??ecp_precompute_comb_4
   \   00000066   0x4605             MOV      R5,R0
   1252                      MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
   \                     ??ecp_precompute_comb_5: (+1)
   \   00000068   0x003A             MOVS     R2,R7
   \   0000006A   0x0039             MOVS     R1,R7
   \   0000006C   0x9823             LDR      R0,[SP, #+140]
   \   0000006E   0x.... 0x....      BL       ecp_double_jac
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD146             BNE      ??ecp_precompute_comb_0
   \   00000076   0x1E6D             SUBS     R5,R5,#+1
   \   00000078   0xD1F6             BNE      ??ecp_precompute_comb_5
   1253          
   1254                  TT[k++] = cur;
   \                     ??ecp_precompute_comb_4: (+1)
   \   0000007A   0xA803             ADD      R0,SP,#+12
   \   0000007C   0xB2F6             UXTB     R6,R6
   \   0000007E   0x00B1             LSLS     R1,R6,#+2
   \   00000080   0x5047             STR      R7,[R0, R1]
   \   00000082   0x1C76             ADDS     R6,R6,#+1
   1255              }
   \   00000084   0x0664             LSLS     R4,R4,#+25
   \   00000086   0x0E24             LSRS     R4,R4,#+24
   \                     ??ecp_precompute_comb_1: (+1)
   \   00000088   0x9802             LDR      R0,[SP, #+8]
   \   0000008A   0x4284             CMP      R4,R0
   \   0000008C   0xD3C8             BCC      ??ecp_precompute_comb_2
   1256          
   1257              MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, k ) );
   \   0000008E   0xB2F2             UXTB     R2,R6
   \   00000090   0xA903             ADD      R1,SP,#+12
   \   00000092   0x9823             LDR      R0,[SP, #+140]
   \   00000094   0x.... 0x....      BL       ecp_normalize_jac_many
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xD133             BNE      ??ecp_precompute_comb_0
   1258          
   1259              /*
   1260               * Compute the remaining ones using the minimal number of additions
   1261               * Be careful to update T[2^l] only after using it!
   1262               */
   1263              k = 0;
   \   0000009C   0x2600             MOVS     R6,#+0
   1264              for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
   \   0000009E   0x2401             MOVS     R4,#+1
   \   000000A0   0xE028             B        ??ecp_precompute_comb_6
   1265              {
   1266                  j = i;
   \                     ??ecp_precompute_comb_7: (+1)
   \   000000A2   0x2C00             CMP      R4,#+0
   \   000000A4   0xD024             BEQ      ??ecp_precompute_comb_8
   \   000000A6   0x9824             LDR      R0,[SP, #+144]
   \   000000A8   0x00E1             LSLS     R1,R4,#+3
   \   000000AA   0x1909             ADDS     R1,R1,R4
   \   000000AC   0x0089             LSLS     R1,R1,#+2
   \   000000AE   0x1840             ADDS     R0,R0,R1
   \   000000B0   0x9001             STR      R0,[SP, #+4]
   \   000000B2   0x4607             MOV      R7,R0
   \   000000B4   0x3F24             SUBS     R7,R7,#+36
   \   000000B6   0x9824             LDR      R0,[SP, #+144]
   \   000000B8   0x0061             LSLS     R1,R4,#+1
   \   000000BA   0x00CA             LSLS     R2,R1,#+3
   \   000000BC   0x1851             ADDS     R1,R2,R1
   \   000000BE   0x0089             LSLS     R1,R1,#+2
   \   000000C0   0x1845             ADDS     R5,R0,R1
   \   000000C2   0x3D24             SUBS     R5,R5,#+36
   \   000000C4   0x9400             STR      R4,[SP, #+0]
   1267                  while( j-- )
   1268                  {
   1269                      MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
   \                     ??ecp_precompute_comb_9: (+1)
   \   000000C6   0x9B01             LDR      R3,[SP, #+4]
   \   000000C8   0x003A             MOVS     R2,R7
   \   000000CA   0x0029             MOVS     R1,R5
   \   000000CC   0x9823             LDR      R0,[SP, #+140]
   \   000000CE   0x.... 0x....      BL       ecp_add_mixed
   \   000000D2   0x9900             LDR      R1,[SP, #+0]
   \   000000D4   0x1E49             SUBS     R1,R1,#+1
   \   000000D6   0x9100             STR      R1,[SP, #+0]
   \   000000D8   0x2800             CMP      R0,#+0
   \   000000DA   0xD113             BNE      ??ecp_precompute_comb_0
   1270                      TT[k++] = &T[i + j];
   \   000000DC   0xA803             ADD      R0,SP,#+12
   \   000000DE   0xB2F6             UXTB     R6,R6
   \   000000E0   0x00B1             LSLS     R1,R6,#+2
   \   000000E2   0x5045             STR      R5,[R0, R1]
   \   000000E4   0x1C76             ADDS     R6,R6,#+1
   \   000000E6   0x3D24             SUBS     R5,R5,#+36
   \   000000E8   0x3F24             SUBS     R7,R7,#+36
   1271                  }
   \   000000EA   0x9800             LDR      R0,[SP, #+0]
   \   000000EC   0x2800             CMP      R0,#+0
   \   000000EE   0xD1EA             BNE      ??ecp_precompute_comb_9
   1272              }
   \                     ??ecp_precompute_comb_8: (+1)
   \   000000F0   0x0664             LSLS     R4,R4,#+25
   \   000000F2   0x0E24             LSRS     R4,R4,#+24
   \                     ??ecp_precompute_comb_6: (+1)
   \   000000F4   0x9802             LDR      R0,[SP, #+8]
   \   000000F6   0x4284             CMP      R4,R0
   \   000000F8   0xD3D3             BCC      ??ecp_precompute_comb_7
   1273          
   1274              MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, k ) );
   \   000000FA   0xB2F2             UXTB     R2,R6
   \   000000FC   0xA903             ADD      R1,SP,#+12
   \   000000FE   0x9823             LDR      R0,[SP, #+140]
   \   00000100   0x.... 0x....      BL       ecp_normalize_jac_many
   1275          
   1276          cleanup:
   1277          
   1278              return( ret );
   \                     ??ecp_precompute_comb_0: (+1)
   \   00000104   0xB025             ADD      SP,SP,#+148
   \   00000106   0xBDF0             POP      {R4-R7,PC}       ;; return
   1279          }
   1280          
   1281          /*
   1282           * Select precomputed point: R = sign(i) * T[ abs(i) / 2 ]
   1283           */

   \                                 In section .text, align 2, keep-with-next
   1284          static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
   1285                                      const mbedtls_ecp_point T[], unsigned char t_len,
   1286                                      unsigned char i )
   1287          {
   \                     ecp_select_comb: (+1)
   \   00000000   0xB578             PUSH     {R3-R6,LR}
   \   00000002   0xB40B             PUSH     {R0,R1,R3}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x9E0A             LDR      R6,[SP, #+40]
   1288              int ret;
   1289              unsigned char ii, j;
   1290          
   1291              /* Ignore the "sign" bit and scale down */
   1292              ii =  ( i & 0x7Fu ) >> 1;
   \   00000008   0x0670             LSLS     R0,R6,#+25
   \   0000000A   0x0E80             LSRS     R0,R0,#+26
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   1293          
   1294              /* Read the whole table to thwart cache-based timing attacks */
   1295              for( j = 0; j < t_len; j++ )
   \   0000000E   0x2500             MOVS     R5,#+0
   \   00000010   0x2B00             CMP      R3,#+0
   \   00000012   0xD020             BEQ      ??ecp_select_comb_0
   \   00000014   0x0014             MOVS     R4,R2
   1296              {
   1297                  MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
   \                     ??ecp_select_comb_1: (+1)
   \   00000016   0x9800             LDR      R0,[SP, #+0]
   \   00000018   0x4285             CMP      R5,R0
   \   0000001A   0xD101             BNE      ??ecp_select_comb_2
   \   0000001C   0x2201             MOVS     R2,#+1
   \   0000001E   0xE000             B        ??ecp_select_comb_3
   \                     ??ecp_select_comb_2: (+1)
   \   00000020   0x2200             MOVS     R2,#+0
   \                     ??ecp_select_comb_3: (+1)
   \   00000022   0x0021             MOVS     R1,R4
   \   00000024   0x9803             LDR      R0,[SP, #+12]
   \   00000026   0x.... 0x....      BL       mbedtls_mpi_safe_cond_assign
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD118             BNE      ??ecp_select_comb_4
   1298                  MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
   \   0000002E   0x9800             LDR      R0,[SP, #+0]
   \   00000030   0x4285             CMP      R5,R0
   \   00000032   0xD101             BNE      ??ecp_select_comb_5
   \   00000034   0x2201             MOVS     R2,#+1
   \   00000036   0xE000             B        ??ecp_select_comb_6
   \                     ??ecp_select_comb_5: (+1)
   \   00000038   0x2200             MOVS     R2,#+0
   \                     ??ecp_select_comb_6: (+1)
   \   0000003A   0x0021             MOVS     R1,R4
   \   0000003C   0x310C             ADDS     R1,R1,#+12
   \   0000003E   0x9803             LDR      R0,[SP, #+12]
   \   00000040   0x300C             ADDS     R0,R0,#+12
   \   00000042   0x.... 0x....      BL       mbedtls_mpi_safe_cond_assign
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD10A             BNE      ??ecp_select_comb_4
   1299              }
   \   0000004A   0x1C6D             ADDS     R5,R5,#+1
   \   0000004C   0x3424             ADDS     R4,R4,#+36
   \   0000004E   0x4668             MOV      R0,SP
   \   00000050   0x7C00             LDRB     R0,[R0, #+16]
   \   00000052   0x4285             CMP      R5,R0
   \   00000054   0xDBDF             BLT      ??ecp_select_comb_1
   1300          
   1301              /* Safely invert result if i is "negative" */
   1302              MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
   \                     ??ecp_select_comb_0: (+1)
   \   00000056   0x09F2             LSRS     R2,R6,#+7
   \   00000058   0x9903             LDR      R1,[SP, #+12]
   \   0000005A   0x9802             LDR      R0,[SP, #+8]
   \   0000005C   0x.... 0x....      BL       ecp_safe_invert_jac
   1303          
   1304          cleanup:
   1305              return( ret );
   \                     ??ecp_select_comb_4: (+1)
   \   00000060   0xB006             ADD      SP,SP,#+24
   \   00000062   0xBD70             POP      {R4-R6,PC}       ;; return
   1306          }
   1307          
   1308          /*
   1309           * Core multiplication algorithm for the (modified) comb method.
   1310           * This part is actually common with the basic comb method (GECC 3.44)
   1311           *
   1312           * Cost: d A + d D + 1 R
   1313           */

   \                                 In section .text, align 2, keep-with-next
   1314          static int ecp_mul_comb_core( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
   1315                                        const mbedtls_ecp_point T[], unsigned char t_len,
   1316                                        const unsigned char x[], size_t d,
   1317                                        int (*f_rng)(void *, unsigned char *, size_t),
   1318                                        void *p_rng )
   1319          {
   \                     ecp_mul_comb_core: (+1)
   \   00000000   0xB5FD             PUSH     {R0,R2-R7,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
   \   00000004   0x000D             MOVS     R5,R1
   1320              int ret;
   1321              mbedtls_ecp_point Txi;
   1322              size_t i;
   1323          
   1324              mbedtls_ecp_point_init( &Txi );
   \   00000006   0xA801             ADD      R0,SP,#+4
   \   00000008   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000000C   0xAF01             ADD      R7,SP,#+4
   \   0000000E   0x0038             MOVS     R0,R7
   \   00000010   0x300C             ADDS     R0,R0,#+12
   \   00000012   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000016   0x0038             MOVS     R0,R7
   \   00000018   0x3018             ADDS     R0,R0,#+24
   \   0000001A   0x.... 0x....      BL       mbedtls_mpi_init
   1325          
   1326              /* Start with a non-zero point and randomize its coordinates */
   1327              i = d;
   \   0000001E   0x9C13             LDR      R4,[SP, #+76]
   1328              MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, t_len, x[i] ) );
   \   00000020   0x9812             LDR      R0,[SP, #+72]
   \   00000022   0x5D00             LDRB     R0,[R0, R4]
   \   00000024   0x9000             STR      R0,[SP, #+0]
   \   00000026   0xA80C             ADD      R0,SP,#+48
   \   00000028   0x7803             LDRB     R3,[R0, #+0]
   \   0000002A   0x9A0B             LDR      R2,[SP, #+44]
   \   0000002C   0x0029             MOVS     R1,R5
   \   0000002E   0x980A             LDR      R0,[SP, #+40]
   \   00000030   0x.... 0x....      BL       ecp_select_comb
   \   00000034   0x0006             MOVS     R6,R0
   \   00000036   0xD12E             BNE      ??ecp_mul_comb_core_0
   1329              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
   \   00000038   0x2101             MOVS     R1,#+1
   \   0000003A   0x0028             MOVS     R0,R5
   \   0000003C   0x3018             ADDS     R0,R0,#+24
   \   0000003E   0x.... 0x....      BL       mbedtls_mpi_lset
   \   00000042   0x0006             MOVS     R6,R0
   \   00000044   0xD127             BNE      ??ecp_mul_comb_core_0
   \   00000046   0x9A14             LDR      R2,[SP, #+80]
   1330              if( f_rng != 0 )
   \   00000048   0x0010             MOVS     R0,R2
   \   0000004A   0xD006             BEQ      ??ecp_mul_comb_core_1
   1331                  MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
   \   0000004C   0x9B15             LDR      R3,[SP, #+84]
   \   0000004E   0x0029             MOVS     R1,R5
   \   00000050   0x980A             LDR      R0,[SP, #+40]
   \   00000052   0x.... 0x....      BL       ecp_randomize_jac
   \   00000056   0x0006             MOVS     R6,R0
   \   00000058   0xD11D             BNE      ??ecp_mul_comb_core_0
   1332          
   1333              while( i-- != 0 )
   \                     ??ecp_mul_comb_core_1: (+1)
   \   0000005A   0x2C00             CMP      R4,#+0
   \   0000005C   0xD01B             BEQ      ??ecp_mul_comb_core_0
   \   0000005E   0x1E64             SUBS     R4,R4,#+1
   1334              {
   1335                  MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
   \   00000060   0x002A             MOVS     R2,R5
   \   00000062   0x0029             MOVS     R1,R5
   \   00000064   0x980A             LDR      R0,[SP, #+40]
   \   00000066   0x.... 0x....      BL       ecp_double_jac
   \   0000006A   0x0006             MOVS     R6,R0
   \   0000006C   0xD113             BNE      ??ecp_mul_comb_core_0
   1336                  MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, t_len, x[i] ) );
   \   0000006E   0x9812             LDR      R0,[SP, #+72]
   \   00000070   0x5D00             LDRB     R0,[R0, R4]
   \   00000072   0x9000             STR      R0,[SP, #+0]
   \   00000074   0xA80C             ADD      R0,SP,#+48
   \   00000076   0x7803             LDRB     R3,[R0, #+0]
   \   00000078   0x9A0B             LDR      R2,[SP, #+44]
   \   0000007A   0xA901             ADD      R1,SP,#+4
   \   0000007C   0x980A             LDR      R0,[SP, #+40]
   \   0000007E   0x.... 0x....      BL       ecp_select_comb
   \   00000082   0x0006             MOVS     R6,R0
   \   00000084   0xD107             BNE      ??ecp_mul_comb_core_0
   1337                  MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
   \   00000086   0xAB01             ADD      R3,SP,#+4
   \   00000088   0x002A             MOVS     R2,R5
   \   0000008A   0x0029             MOVS     R1,R5
   \   0000008C   0x980A             LDR      R0,[SP, #+40]
   \   0000008E   0x.... 0x....      BL       ecp_add_mixed
   \   00000092   0x0006             MOVS     R6,R0
   \   00000094   0xD0E1             BEQ      ??ecp_mul_comb_core_1
   1338              }
   1339          
   1340          cleanup:
   1341          
   1342              mbedtls_ecp_point_free( &Txi );
   \                     ??ecp_mul_comb_core_0: (+1)
   \   00000096   0xA801             ADD      R0,SP,#+4
   \   00000098   0x.... 0x....      BL       mbedtls_mpi_free
   \   0000009C   0x0038             MOVS     R0,R7
   \   0000009E   0x300C             ADDS     R0,R0,#+12
   \   000000A0   0x.... 0x....      BL       mbedtls_mpi_free
   \   000000A4   0x0038             MOVS     R0,R7
   \   000000A6   0x3018             ADDS     R0,R0,#+24
   \   000000A8   0x.... 0x....      BL       mbedtls_mpi_free
   1343          
   1344              return( ret );
   \   000000AC   0x0030             MOVS     R0,R6
   \   000000AE   0xB00D             ADD      SP,SP,#+52
   \   000000B0   0xBDF0             POP      {R4-R7,PC}       ;; return
   1345          }
   1346          
   1347          /*
   1348           * Multiplication using the comb method,
   1349           * for curves in short Weierstrass form
   1350           */

   \                                 In section .text, align 2, keep-with-next
   1351          static int ecp_mul_comb( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
   1352                                   const mbedtls_mpi *m, const mbedtls_ecp_point *P,
   1353                                   int (*f_rng)(void *, unsigned char *, size_t),
   1354                                   void *p_rng )
   1355          {
   \                     ecp_mul_comb: (+1)
   \   00000000   0xB5F6             PUSH     {R1,R2,R4-R7,LR}
   \   00000002   0xB0D1             SUB      SP,SP,#+324
   \   00000004   0x0007             MOVS     R7,R0
   \   00000006   0x001E             MOVS     R6,R3
   1356              int ret;
   1357              unsigned char w, m_is_odd, p_eq_g, pre_len, i;
   1358              size_t d;
   1359              unsigned char k[COMB_MAX_D + 1];
   1360              mbedtls_ecp_point *T;
   1361              mbedtls_mpi M, mm;
   1362          
   1363              mbedtls_mpi_init( &M );
   \   00000008   0xA808             ADD      R0,SP,#+32
   \   0000000A   0x.... 0x....      BL       mbedtls_mpi_init
   1364              mbedtls_mpi_init( &mm );
   \   0000000E   0xA80B             ADD      R0,SP,#+44
   \   00000010   0x.... 0x....      BL       mbedtls_mpi_init
   1365          
   1366              /* we need N to be odd to trnaform m in an odd number, check now */
   1367              if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x0038             MOVS     R0,R7
   \   00000018   0x304C             ADDS     R0,R0,#+76
   \   0000001A   0x.... 0x....      BL       mbedtls_mpi_get_bit
   \   0000001E   0x2801             CMP      R0,#+1
   \   00000020   0xD001             BEQ      ??ecp_mul_comb_0
   1368                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \   00000022   0x....             LDR      R0,??DataTable35  ;; 0xffffb080
   \   00000024   0xE0C4             B        ??ecp_mul_comb_1
   1369          
   1370              /*
   1371               * Minimize the number of multiplications, that is minimize
   1372               * 10 * d * w + 18 * 2^(w-1) + 11 * d + 7 * w, with d = ceil( nbits / w )
   1373               * (see costs of the various parts, with 1S = 1M)
   1374               */
   1375              w = grp->nbits >= 384 ? 5 : 4;
   \                     ??ecp_mul_comb_0: (+1)
   \   00000026   0x6DF8             LDR      R0,[R7, #+92]
   \   00000028   0x21C0             MOVS     R1,#+192
   \   0000002A   0x0049             LSLS     R1,R1,#+1        ;; #+384
   \   0000002C   0x4288             CMP      R0,R1
   \   0000002E   0xD301             BCC      ??ecp_mul_comb_2
   \   00000030   0x2405             MOVS     R4,#+5
   \   00000032   0xE000             B        ??ecp_mul_comb_3
   \                     ??ecp_mul_comb_2: (+1)
   \   00000034   0x2404             MOVS     R4,#+4
   1376          
   1377              /*
   1378               * If P == G, pre-compute a bit more, since this may be re-used later.
   1379               * Just adding one avoids upping the cost of the first mul too much,
   1380               * and the memory cost too.
   1381               */
   1382          #if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1
   1383              p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
   1384                         mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );
   \                     ??ecp_mul_comb_3: (+1)
   \   00000036   0x0039             MOVS     R1,R7
   \   00000038   0x3134             ADDS     R1,R1,#+52
   \   0000003A   0x0030             MOVS     R0,R6
   \   0000003C   0x300C             ADDS     R0,R0,#+12
   \   0000003E   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD109             BNE      ??ecp_mul_comb_4
   \   00000046   0x0039             MOVS     R1,R7
   \   00000048   0x3128             ADDS     R1,R1,#+40
   \   0000004A   0x0030             MOVS     R0,R6
   \   0000004C   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD102             BNE      ??ecp_mul_comb_4
   \   00000054   0x2501             MOVS     R5,#+1
   1385              if( p_eq_g )
   1386                  w++;
   \   00000056   0x1C64             ADDS     R4,R4,#+1
   \   00000058   0xE000             B        ??ecp_mul_comb_5
   \                     ??ecp_mul_comb_4: (+1)
   \   0000005A   0x2500             MOVS     R5,#+0
   1387          #else
   1388              p_eq_g = 0;
   1389          #endif
   1390          
   1391              /*
   1392               * Make sure w is within bounds.
   1393               * (The last test is useful only for very small curves in the test suite.)
   1394               */
   1395              if( w > MBEDTLS_ECP_WINDOW_SIZE )
   \                     ??ecp_mul_comb_5: (+1)
   \   0000005C   0xB2E4             UXTB     R4,R4
   \   0000005E   0x2C07             CMP      R4,#+7
   \   00000060   0xDB00             BLT      ??ecp_mul_comb_6
   1396                  w = MBEDTLS_ECP_WINDOW_SIZE;
   \   00000062   0x2406             MOVS     R4,#+6
   1397              if( w >= grp->nbits )
   \                     ??ecp_mul_comb_6: (+1)
   \   00000064   0x6DF8             LDR      R0,[R7, #+92]
   \   00000066   0x4284             CMP      R4,R0
   \   00000068   0xD300             BCC      ??ecp_mul_comb_7
   1398                  w = 2;
   \   0000006A   0x2402             MOVS     R4,#+2
   \                     ??ecp_mul_comb_7: (+1)
   \   0000006C   0x2101             MOVS     R1,#+1
   \   0000006E   0x1E62             SUBS     R2,R4,#+1
   \   00000070   0x4091             LSLS     R1,R1,R2
   \   00000072   0xB2C9             UXTB     R1,R1
   \   00000074   0x9106             STR      R1,[SP, #+24]
   1399          
   1400              /* Other sizes that depend on w */
   1401              pre_len = 1U << ( w - 1 );
   1402              d = ( grp->nbits + w - 1 ) / w;
   \   00000076   0x0021             MOVS     R1,R4
   \   00000078   0x1840             ADDS     R0,R0,R1
   \   0000007A   0x1E40             SUBS     R0,R0,#+1
   \   0000007C   0x.... 0x....      BL       __aeabi_uidiv
   \   00000080   0x9007             STR      R0,[SP, #+28]
   1403          
   1404              /*
   1405               * Prepare precomputed points: if P == G we want to
   1406               * use grp->T if already initialized, or initialize it.
   1407               */
   1408              T = p_eq_g ? grp->T : NULL;
   \   00000082   0x2D00             CMP      R5,#+0
   \   00000084   0xD003             BEQ      ??ecp_mul_comb_8
   \   00000086   0x6F78             LDR      R0,[R7, #+116]
   \   00000088   0x9005             STR      R0,[SP, #+20]
   1409          
   1410              if( T == NULL )
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD118             BNE      ??ecp_mul_comb_9
   1411              {
   1412                  T = mbedtls_calloc( pre_len, sizeof( mbedtls_ecp_point ) );
   \                     ??ecp_mul_comb_8: (+1)
   \   0000008E   0x2124             MOVS     R1,#+36
   \   00000090   0x9806             LDR      R0,[SP, #+24]
   \   00000092   0x.... 0x....      BL       calloc
   \   00000096   0x9005             STR      R0,[SP, #+20]
   1413                  if( T == NULL )
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xD101             BNE      ??ecp_mul_comb_10
   \   0000009C   0x....             LDR      R6,??DataTable35_1  ;; 0xffffb280
   \   0000009E   0xE071             B        ??ecp_mul_comb_11
   1414                  {
   1415                      ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
   1416                      goto cleanup;
   1417                  }
   1418          
   1419                  MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d ) );
   \                     ??ecp_mul_comb_10: (+1)
   \   000000A0   0x9807             LDR      R0,[SP, #+28]
   \   000000A2   0x9000             STR      R0,[SP, #+0]
   \   000000A4   0x0023             MOVS     R3,R4
   \   000000A6   0x0032             MOVS     R2,R6
   \   000000A8   0x9905             LDR      R1,[SP, #+20]
   \   000000AA   0x0038             MOVS     R0,R7
   \   000000AC   0x.... 0x....      BL       ecp_precompute_comb
   \   000000B0   0x0006             MOVS     R6,R0
   \   000000B2   0xD14D             BNE      ??ecp_mul_comb_12
   1420          
   1421                  if( p_eq_g )
   \   000000B4   0x2D00             CMP      R5,#+0
   \   000000B6   0xD003             BEQ      ??ecp_mul_comb_9
   1422                  {
   1423                      grp->T = T;
   \   000000B8   0x9805             LDR      R0,[SP, #+20]
   \   000000BA   0x6778             STR      R0,[R7, #+116]
   1424                      grp->T_size = pre_len;
   \   000000BC   0x9806             LDR      R0,[SP, #+24]
   \   000000BE   0x67B8             STR      R0,[R7, #+120]
   1425                  }
   1426              }
   1427          
   1428              /*
   1429               * Make sure M is odd (M = m or M = N - m, since N is odd)
   1430               * using the fact that m * P = - (N - m) * P
   1431               */
   1432              m_is_odd = ( mbedtls_mpi_get_bit( m, 0 ) == 1 );
   \                     ??ecp_mul_comb_9: (+1)
   \   000000C0   0x2100             MOVS     R1,#+0
   \   000000C2   0x9852             LDR      R0,[SP, #+328]
   \   000000C4   0x.... 0x....      BL       mbedtls_mpi_get_bit
   \   000000C8   0x2801             CMP      R0,#+1
   \   000000CA   0xD101             BNE      ??ecp_mul_comb_13
   \   000000CC   0x2000             MOVS     R0,#+0
   \   000000CE   0xE000             B        ??ecp_mul_comb_14
   \                     ??ecp_mul_comb_13: (+1)
   \   000000D0   0x2001             MOVS     R0,#+1
   \                     ??ecp_mul_comb_14: (+1)
   \   000000D2   0x4669             MOV      R1,SP
   \   000000D4   0x7408             STRB     R0,[R1, #+16]
   1433              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
   \   000000D6   0x9952             LDR      R1,[SP, #+328]
   \   000000D8   0xA808             ADD      R0,SP,#+32
   \   000000DA   0x.... 0x....      BL       mbedtls_mpi_copy
   \   000000DE   0x0006             MOVS     R6,R0
   \   000000E0   0xD133             BNE      ??ecp_mul_comb_15
   1434              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
   \   000000E2   0x9A52             LDR      R2,[SP, #+328]
   \   000000E4   0x0039             MOVS     R1,R7
   \   000000E6   0x314C             ADDS     R1,R1,#+76
   \   000000E8   0xA80B             ADD      R0,SP,#+44
   \   000000EA   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   000000EE   0x0006             MOVS     R6,R0
   \   000000F0   0xD12B             BNE      ??ecp_mul_comb_15
   1435              MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, ! m_is_odd ) );
   \   000000F2   0x4668             MOV      R0,SP
   \   000000F4   0x7C02             LDRB     R2,[R0, #+16]
   \   000000F6   0xA90B             ADD      R1,SP,#+44
   \   000000F8   0xA808             ADD      R0,SP,#+32
   \   000000FA   0x.... 0x....      BL       mbedtls_mpi_safe_cond_assign
   \   000000FE   0x0006             MOVS     R6,R0
   \   00000100   0xD123             BNE      ??ecp_mul_comb_15
   1436          
   1437              /*
   1438               * Go for comb multiplication, R = M * P
   1439               */
   1440              ecp_comb_fixed( k, d, w, &M );
   \   00000102   0xAB08             ADD      R3,SP,#+32
   \   00000104   0x0022             MOVS     R2,R4
   \   00000106   0x9907             LDR      R1,[SP, #+28]
   \   00000108   0xA80E             ADD      R0,SP,#+56
   \   0000010A   0x.... 0x....      BL       ecp_comb_fixed
   1441              MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, R, T, pre_len, k, d, f_rng, p_rng ) );
   \   0000010E   0x9859             LDR      R0,[SP, #+356]
   \   00000110   0x9003             STR      R0,[SP, #+12]
   \   00000112   0x9858             LDR      R0,[SP, #+352]
   \   00000114   0x9002             STR      R0,[SP, #+8]
   \   00000116   0x9807             LDR      R0,[SP, #+28]
   \   00000118   0x9001             STR      R0,[SP, #+4]
   \   0000011A   0xA80E             ADD      R0,SP,#+56
   \   0000011C   0x9000             STR      R0,[SP, #+0]
   \   0000011E   0x9B06             LDR      R3,[SP, #+24]
   \   00000120   0xB2DB             UXTB     R3,R3
   \   00000122   0x9A05             LDR      R2,[SP, #+20]
   \   00000124   0x9951             LDR      R1,[SP, #+324]
   \   00000126   0x0038             MOVS     R0,R7
   \   00000128   0x.... 0x....      BL       ecp_mul_comb_core
   \   0000012C   0x0006             MOVS     R6,R0
   \   0000012E   0xD10C             BNE      ??ecp_mul_comb_15
   1442          
   1443              /*
   1444               * Now get m * P from M * P and normalize it
   1445               */
   1446              MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, ! m_is_odd ) );
   \   00000130   0x4668             MOV      R0,SP
   \   00000132   0x7C02             LDRB     R2,[R0, #+16]
   \   00000134   0x9951             LDR      R1,[SP, #+324]
   \   00000136   0x0038             MOVS     R0,R7
   \   00000138   0x.... 0x....      BL       ecp_safe_invert_jac
   \   0000013C   0x0006             MOVS     R6,R0
   \   0000013E   0xD104             BNE      ??ecp_mul_comb_15
   1447              MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );
   \   00000140   0x9951             LDR      R1,[SP, #+324]
   \   00000142   0x0038             MOVS     R0,R7
   \   00000144   0x.... 0x....      BL       ecp_normalize_jac
   \   00000148   0x0006             MOVS     R6,R0
   1448          
   1449          cleanup:
   1450          
   1451              if( T != NULL && ! p_eq_g )
   \                     ??ecp_mul_comb_15: (+1)
   \   0000014A   0x9805             LDR      R0,[SP, #+20]
   \   0000014C   0x2800             CMP      R0,#+0
   \   0000014E   0xD019             BEQ      ??ecp_mul_comb_11
   \                     ??ecp_mul_comb_12: (+1)
   \   00000150   0x2D00             CMP      R5,#+0
   \   00000152   0xD117             BNE      ??ecp_mul_comb_11
   1452              {
   1453                  for( i = 0; i < pre_len; i++ )
   \   00000154   0x9806             LDR      R0,[SP, #+24]
   \   00000156   0x2801             CMP      R0,#+1
   \   00000158   0xDB11             BLT      ??ecp_mul_comb_16
   \   0000015A   0x9C05             LDR      R4,[SP, #+20]
   \   0000015C   0x4605             MOV      R5,R0
   1454                      mbedtls_ecp_point_free( &T[i] );
   \                     ??ecp_mul_comb_17: (+1)
   \   0000015E   0x2C00             CMP      R4,#+0
   \   00000160   0xD00A             BEQ      ??ecp_mul_comb_18
   \   00000162   0x0020             MOVS     R0,R4
   \   00000164   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000168   0x0020             MOVS     R0,R4
   \   0000016A   0x300C             ADDS     R0,R0,#+12
   \   0000016C   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000170   0x0020             MOVS     R0,R4
   \   00000172   0x3018             ADDS     R0,R0,#+24
   \   00000174   0x.... 0x....      BL       mbedtls_mpi_free
   \                     ??ecp_mul_comb_18: (+1)
   \   00000178   0x3424             ADDS     R4,R4,#+36
   \   0000017A   0x1E6D             SUBS     R5,R5,#+1
   \   0000017C   0xD1EF             BNE      ??ecp_mul_comb_17
   1455                  mbedtls_free( T );
   \                     ??ecp_mul_comb_16: (+1)
   \   0000017E   0x9805             LDR      R0,[SP, #+20]
   \   00000180   0x.... 0x....      BL       free
   1456              }
   1457          
   1458              mbedtls_mpi_free( &M );
   \                     ??ecp_mul_comb_11: (+1)
   \   00000184   0xA808             ADD      R0,SP,#+32
   \   00000186   0x.... 0x....      BL       mbedtls_mpi_free
   1459              mbedtls_mpi_free( &mm );
   \   0000018A   0xA80B             ADD      R0,SP,#+44
   \   0000018C   0x.... 0x....      BL       mbedtls_mpi_free
   1460          
   1461              if( ret != 0 )
   \   00000190   0x2E00             CMP      R6,#+0
   \   00000192   0xD00C             BEQ      ??ecp_mul_comb_19
   1462                  mbedtls_ecp_point_free( R );
   \   00000194   0x9851             LDR      R0,[SP, #+324]
   \   00000196   0x2800             CMP      R0,#+0
   \   00000198   0xD009             BEQ      ??ecp_mul_comb_19
   \   0000019A   0x.... 0x....      BL       mbedtls_mpi_free
   \   0000019E   0x9851             LDR      R0,[SP, #+324]
   \   000001A0   0x300C             ADDS     R0,R0,#+12
   \   000001A2   0x.... 0x....      BL       mbedtls_mpi_free
   \   000001A6   0x9851             LDR      R0,[SP, #+324]
   \   000001A8   0x3018             ADDS     R0,R0,#+24
   \   000001AA   0x.... 0x....      BL       mbedtls_mpi_free
   1463          
   1464              return( ret );
   \                     ??ecp_mul_comb_19: (+1)
   \   000001AE   0x0030             MOVS     R0,R6
   \                     ??ecp_mul_comb_1: (+1)
   \   000001B0   0xB053             ADD      SP,SP,#+332
   \   000001B2   0xBDF0             POP      {R4-R7,PC}       ;; return
   1465          }
   1466          
   1467          #endif /* ECP_SHORTWEIERSTRASS */
   1468          
   1469          #if defined(ECP_MONTGOMERY)
   1470          /*
   1471           * For Montgomery curves, we do all the internal arithmetic in projective
   1472           * coordinates. Import/export of points uses only the x coordinates, which is
   1473           * internaly represented as X / Z.
   1474           *
   1475           * For scalar multiplication, we'll use a Montgomery ladder.
   1476           */
   1477          
   1478          /*
   1479           * Normalize Montgomery x/z coordinates: X = X/Z, Z = 1
   1480           * Cost: 1M + 1I
   1481           */
   1482          static int ecp_normalize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P )
   1483          {
   1484              int ret;
   1485          
   1486          #if defined(MBEDTLS_ECP_NORMALIZE_MXZ_ALT)
   1487              if ( mbedtls_internal_ecp_grp_capable( grp ) )
   1488              {
   1489                  return mbedtls_internal_ecp_normalize_mxz( grp, P );
   1490              }
   1491          #endif /* MBEDTLS_ECP_NORMALIZE_MXZ_ALT */
   1492          
   1493              MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &P->Z, &P->Z, &grp->P ) );
   1494              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &P->Z ) ); MOD_MUL( P->X );
   1495              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &P->Z, 1 ) );
   1496          
   1497          cleanup:
   1498              return( ret );
   1499          }
   1500          
   1501          /*
   1502           * Randomize projective x/z coordinates:
   1503           * (X, Z) -> (l X, l Z) for random l
   1504           * This is sort of the reverse operation of ecp_normalize_mxz().
   1505           *
   1506           * This countermeasure was first suggested in [2].
   1507           * Cost: 2M
   1508           */

   \                                 In section .text, align 2, keep-with-next
   1509          static int ecp_randomize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P,
   1510                          int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
   1511          {
   \                     ecp_randomize_mxz: (+1)
   \   00000000   0xB5FC             PUSH     {R2-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0007             MOVS     R7,R0
   \   00000006   0x000E             MOVS     R6,R1
   1512              int ret;
   1513              mbedtls_mpi l;
   1514              size_t p_size;
   1515              int count = 0;
   \   00000008   0x2400             MOVS     R4,#+0
   1516          
   1517          #if defined(MBEDTLS_ECP_RANDOMIZE_MXZ_ALT)
   1518              if ( mbedtls_internal_ecp_grp_capable( grp ) )
   1519              {
   1520                  return mbedtls_internal_ecp_randomize_mxz( grp, P, f_rng, p_rng );
   1521              }
   1522          #endif /* MBEDTLS_ECP_RANDOMIZE_MXZ_ALT */
   1523          
   1524              p_size = ( grp->pbits + 7 ) / 8;
   \   0000000A   0x6DB8             LDR      R0,[R7, #+88]
   \   0000000C   0x1DC0             ADDS     R0,R0,#+7
   \   0000000E   0x08C0             LSRS     R0,R0,#+3
   \   00000010   0x9003             STR      R0,[SP, #+12]
   1525              mbedtls_mpi_init( &l );
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x.... 0x....      BL       mbedtls_mpi_init
   1526          
   1527              /* Generate l such that 1 < l < p */
   1528              do
   1529              {
   1530                  MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
   \                     ??ecp_randomize_mxz_0: (+1)
   \   00000018   0x9B06             LDR      R3,[SP, #+24]
   \   0000001A   0x9A05             LDR      R2,[SP, #+20]
   \   0000001C   0x9903             LDR      R1,[SP, #+12]
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0x.... 0x....      BL       mbedtls_mpi_fill_random
   \   00000024   0x0005             MOVS     R5,R0
   \   00000026   0xD13C             BNE      ??ecp_randomize_mxz_1
   1531          
   1532                  while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
   \                     ??ecp_randomize_mxz_2: (+1)
   \   00000028   0x1D39             ADDS     R1,R7,#+4
   \   0000002A   0x4668             MOV      R0,SP
   \   0000002C   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD406             BMI      ??ecp_randomize_mxz_3
   1533                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
   \   00000034   0x2101             MOVS     R1,#+1
   \   00000036   0x4668             MOV      R0,SP
   \   00000038   0x.... 0x....      BL       mbedtls_mpi_shift_r
   \   0000003C   0x0005             MOVS     R5,R0
   \   0000003E   0xD130             BNE      ??ecp_randomize_mxz_1
   \   00000040   0xE7F2             B        ??ecp_randomize_mxz_2
   1534          
   1535                  if( count++ > 10 )
   \                     ??ecp_randomize_mxz_3: (+1)
   \   00000042   0x0020             MOVS     R0,R4
   \   00000044   0x1C64             ADDS     R4,R4,#+1
   \   00000046   0x280B             CMP      R0,#+11
   \   00000048   0xDB01             BLT      ??ecp_randomize_mxz_4
   1536                      return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
   \   0000004A   0x....             LDR      R0,??DataTable35_2  ;; 0xffffb300
   \   0000004C   0xE02D             B        ??ecp_randomize_mxz_5
   1537              }
   1538              while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
   \                     ??ecp_randomize_mxz_4: (+1)
   \   0000004E   0x2101             MOVS     R1,#+1
   \   00000050   0x4668             MOV      R0,SP
   \   00000052   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   00000056   0x2801             CMP      R0,#+1
   \   00000058   0xDBDE             BLT      ??ecp_randomize_mxz_0
   1539          
   1540              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &l ) ); MOD_MUL( P->X );
   \   0000005A   0x466A             MOV      R2,SP
   \   0000005C   0x0031             MOVS     R1,R6
   \   0000005E   0x0030             MOVS     R0,R6
   \   00000060   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   00000064   0x0005             MOVS     R5,R0
   \   00000066   0xD11C             BNE      ??ecp_randomize_mxz_1
   \   00000068   0x0039             MOVS     R1,R7
   \   0000006A   0x0030             MOVS     R0,R6
   \   0000006C   0x.... 0x....      BL       ecp_modp
   \   00000070   0x0005             MOVS     R5,R0
   \   00000072   0xD116             BNE      ??ecp_randomize_mxz_1
   \   00000074   0x....             LDR      R4,??DataTable35_3
   \   00000076   0x68A0             LDR      R0,[R4, #+8]
   \   00000078   0x1C40             ADDS     R0,R0,#+1
   \   0000007A   0x60A0             STR      R0,[R4, #+8]
   1541              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->Z, &P->Z, &l ) ); MOD_MUL( P->Z );
   \   0000007C   0x466A             MOV      R2,SP
   \   0000007E   0x0031             MOVS     R1,R6
   \   00000080   0x3118             ADDS     R1,R1,#+24
   \   00000082   0x0030             MOVS     R0,R6
   \   00000084   0x3018             ADDS     R0,R0,#+24
   \   00000086   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000008A   0x0005             MOVS     R5,R0
   \   0000008C   0xD109             BNE      ??ecp_randomize_mxz_1
   \   0000008E   0x0039             MOVS     R1,R7
   \   00000090   0x0030             MOVS     R0,R6
   \   00000092   0x3018             ADDS     R0,R0,#+24
   \   00000094   0x.... 0x....      BL       ecp_modp
   \   00000098   0x0005             MOVS     R5,R0
   \   0000009A   0xD102             BNE      ??ecp_randomize_mxz_1
   \   0000009C   0x68A0             LDR      R0,[R4, #+8]
   \   0000009E   0x1C40             ADDS     R0,R0,#+1
   \   000000A0   0x60A0             STR      R0,[R4, #+8]
   1542          
   1543          cleanup:
   1544              mbedtls_mpi_free( &l );
   \                     ??ecp_randomize_mxz_1: (+1)
   \   000000A2   0x4668             MOV      R0,SP
   \   000000A4   0x.... 0x....      BL       mbedtls_mpi_free
   1545          
   1546              return( ret );
   \   000000A8   0x0028             MOVS     R0,R5
   \                     ??ecp_randomize_mxz_5: (+1)
   \   000000AA   0xB007             ADD      SP,SP,#+28
   \   000000AC   0xBDF0             POP      {R4-R7,PC}       ;; return
   1547          }
   1548          
   1549          /*
   1550           * Double-and-add: R = 2P, S = P + Q, with d = X(P - Q),
   1551           * for Montgomery curves in x/z coordinates.
   1552           *
   1553           * http://www.hyperelliptic.org/EFD/g1p/auto-code/montgom/xz/ladder/mladd-1987-m.op3
   1554           * with
   1555           * d =  X1
   1556           * P = (X2, Z2)
   1557           * Q = (X3, Z3)
   1558           * R = (X4, Z4)
   1559           * S = (X5, Z5)
   1560           * and eliminating temporary variables tO, ..., t4.
   1561           *
   1562           * Cost: 5M + 4S
   1563           */

   \                                 In section .text, align 2, keep-with-next
   1564          static int ecp_double_add_mxz( const mbedtls_ecp_group *grp,
   1565                                         mbedtls_ecp_point *R, mbedtls_ecp_point *S,
   1566                                         const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q,
   1567                                         const mbedtls_mpi *d )
   1568          {
   \                     ecp_double_add_mxz: (+1)
   \   00000000   0xB5FA             PUSH     {R1,R3-R7,LR}
   \   00000002   0xB09B             SUB      SP,SP,#+108
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x0017             MOVS     R7,R2
   1569              int ret;
   1570              mbedtls_mpi A, AA, B, BB, E, C, D, DA, CB;
   1571          
   1572          #if defined(MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT)
   1573              if ( mbedtls_internal_ecp_grp_capable( grp ) )
   1574              {
   1575                  return mbedtls_internal_ecp_double_add_mxz( grp, R, S, P, Q, d );
   1576              }
   1577          #endif /* MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT */
   1578          
   1579              mbedtls_mpi_init( &A ); mbedtls_mpi_init( &AA ); mbedtls_mpi_init( &B );
   \   00000008   0xA809             ADD      R0,SP,#+36
   \   0000000A   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000000E   0xA818             ADD      R0,SP,#+96
   \   00000010   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000014   0x4668             MOV      R0,SP
   \   00000016   0x.... 0x....      BL       mbedtls_mpi_init
   1580              mbedtls_mpi_init( &BB ); mbedtls_mpi_init( &E ); mbedtls_mpi_init( &C );
   \   0000001A   0xA80F             ADD      R0,SP,#+60
   \   0000001C   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000020   0xA806             ADD      R0,SP,#+24
   \   00000022   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000026   0xA80C             ADD      R0,SP,#+48
   \   00000028   0x.... 0x....      BL       mbedtls_mpi_init
   1581              mbedtls_mpi_init( &D ); mbedtls_mpi_init( &DA ); mbedtls_mpi_init( &CB );
   \   0000002C   0xA803             ADD      R0,SP,#+12
   \   0000002E   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000032   0xA815             ADD      R0,SP,#+84
   \   00000034   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000038   0xA812             ADD      R0,SP,#+72
   \   0000003A   0x.... 0x....      BL       mbedtls_mpi_init
   1582          
   1583              MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &A,    &P->X,   &P->Z ) ); MOD_ADD( A    );
   \   0000003E   0x9A1C             LDR      R2,[SP, #+112]
   \   00000040   0x3218             ADDS     R2,R2,#+24
   \   00000042   0x991C             LDR      R1,[SP, #+112]
   \   00000044   0xA809             ADD      R0,SP,#+36
   \   00000046   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   0000004A   0x0006             MOVS     R6,R0
   \   0000004C   0xD000             BEQ      .+4
   \   0000004E   0xE177             B        ??ecp_double_add_mxz_0
   \                     ??ecp_double_add_mxz_1: (+1)
   \   00000050   0x1D21             ADDS     R1,R4,#+4
   \   00000052   0xA809             ADD      R0,SP,#+36
   \   00000054   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD408             BMI      ??ecp_double_add_mxz_2
   \   0000005C   0x1D22             ADDS     R2,R4,#+4
   \   0000005E   0xA909             ADD      R1,SP,#+36
   \   00000060   0xA809             ADD      R0,SP,#+36
   \   00000062   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   00000066   0x0006             MOVS     R6,R0
   \   00000068   0xD000             BEQ      .+4
   \   0000006A   0xE169             B        ??ecp_double_add_mxz_0
   \   0000006C   0xE7F0             B        ??ecp_double_add_mxz_1
   1584              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &AA,   &A,      &A    ) ); MOD_MUL( AA   );
   \                     ??ecp_double_add_mxz_2: (+1)
   \   0000006E   0xAA09             ADD      R2,SP,#+36
   \   00000070   0xA909             ADD      R1,SP,#+36
   \   00000072   0xA818             ADD      R0,SP,#+96
   \   00000074   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   00000078   0x0006             MOVS     R6,R0
   \   0000007A   0xD000             BEQ      .+4
   \   0000007C   0xE160             B        ??ecp_double_add_mxz_0
   \   0000007E   0x0021             MOVS     R1,R4
   \   00000080   0xA818             ADD      R0,SP,#+96
   \   00000082   0x.... 0x....      BL       ecp_modp
   \   00000086   0x0006             MOVS     R6,R0
   \   00000088   0xD000             BEQ      .+4
   \   0000008A   0xE159             B        ??ecp_double_add_mxz_0
   \   0000008C   0x....             LDR      R5,??DataTable36
   \   0000008E   0x68A8             LDR      R0,[R5, #+8]
   \   00000090   0x1C40             ADDS     R0,R0,#+1
   \   00000092   0x60A8             STR      R0,[R5, #+8]
   1585              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &B,    &P->X,   &P->Z ) ); MOD_SUB( B    );
   \   00000094   0x9A1C             LDR      R2,[SP, #+112]
   \   00000096   0x3218             ADDS     R2,R2,#+24
   \   00000098   0x991C             LDR      R1,[SP, #+112]
   \   0000009A   0x4668             MOV      R0,SP
   \   0000009C   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   000000A0   0x0006             MOVS     R6,R0
   \   000000A2   0xD000             BEQ      .+4
   \   000000A4   0xE14C             B        ??ecp_double_add_mxz_0
   \                     ??ecp_double_add_mxz_3: (+1)
   \   000000A6   0x9800             LDR      R0,[SP, #+0]
   \   000000A8   0x2800             CMP      R0,#+0
   \   000000AA   0xD50E             BPL      ??ecp_double_add_mxz_4
   \   000000AC   0x2100             MOVS     R1,#+0
   \   000000AE   0x4668             MOV      R0,SP
   \   000000B0   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   000000B4   0x2800             CMP      R0,#+0
   \   000000B6   0xD008             BEQ      ??ecp_double_add_mxz_4
   \   000000B8   0x1D22             ADDS     R2,R4,#+4
   \   000000BA   0x4669             MOV      R1,SP
   \   000000BC   0x4668             MOV      R0,SP
   \   000000BE   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   000000C2   0x0006             MOVS     R6,R0
   \   000000C4   0xD000             BEQ      .+4
   \   000000C6   0xE13B             B        ??ecp_double_add_mxz_0
   \   000000C8   0xE7ED             B        ??ecp_double_add_mxz_3
   1586              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &BB,   &B,      &B    ) ); MOD_MUL( BB   );
   \                     ??ecp_double_add_mxz_4: (+1)
   \   000000CA   0x466A             MOV      R2,SP
   \   000000CC   0x4669             MOV      R1,SP
   \   000000CE   0xA80F             ADD      R0,SP,#+60
   \   000000D0   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000000D4   0x0006             MOVS     R6,R0
   \   000000D6   0xD000             BEQ      .+4
   \   000000D8   0xE132             B        ??ecp_double_add_mxz_0
   \   000000DA   0x0021             MOVS     R1,R4
   \   000000DC   0xA80F             ADD      R0,SP,#+60
   \   000000DE   0x.... 0x....      BL       ecp_modp
   \   000000E2   0x0006             MOVS     R6,R0
   \   000000E4   0xD000             BEQ      .+4
   \   000000E6   0xE12B             B        ??ecp_double_add_mxz_0
   \   000000E8   0x68A8             LDR      R0,[R5, #+8]
   \   000000EA   0x1C40             ADDS     R0,R0,#+1
   \   000000EC   0x60A8             STR      R0,[R5, #+8]
   1587              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &E,    &AA,     &BB   ) ); MOD_SUB( E    );
   \   000000EE   0xAA0F             ADD      R2,SP,#+60
   \   000000F0   0xA918             ADD      R1,SP,#+96
   \   000000F2   0xA806             ADD      R0,SP,#+24
   \   000000F4   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   000000F8   0x0006             MOVS     R6,R0
   \   000000FA   0xD000             BEQ      .+4
   \   000000FC   0xE120             B        ??ecp_double_add_mxz_0
   \                     ??ecp_double_add_mxz_5: (+1)
   \   000000FE   0x9806             LDR      R0,[SP, #+24]
   \   00000100   0x2800             CMP      R0,#+0
   \   00000102   0xD50E             BPL      ??ecp_double_add_mxz_6
   \   00000104   0x2100             MOVS     R1,#+0
   \   00000106   0xA806             ADD      R0,SP,#+24
   \   00000108   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   0000010C   0x2800             CMP      R0,#+0
   \   0000010E   0xD008             BEQ      ??ecp_double_add_mxz_6
   \   00000110   0x1D22             ADDS     R2,R4,#+4
   \   00000112   0xA906             ADD      R1,SP,#+24
   \   00000114   0xA806             ADD      R0,SP,#+24
   \   00000116   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   0000011A   0x0006             MOVS     R6,R0
   \   0000011C   0xD000             BEQ      .+4
   \   0000011E   0xE10F             B        ??ecp_double_add_mxz_0
   \   00000120   0xE7ED             B        ??ecp_double_add_mxz_5
   1588              MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &C,    &Q->X,   &Q->Z ) ); MOD_ADD( C    );
   \                     ??ecp_double_add_mxz_6: (+1)
   \   00000122   0x9A22             LDR      R2,[SP, #+136]
   \   00000124   0x3218             ADDS     R2,R2,#+24
   \   00000126   0x9922             LDR      R1,[SP, #+136]
   \   00000128   0xA80C             ADD      R0,SP,#+48
   \   0000012A   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   0000012E   0x0006             MOVS     R6,R0
   \   00000130   0xD000             BEQ      .+4
   \   00000132   0xE105             B        ??ecp_double_add_mxz_0
   \                     ??ecp_double_add_mxz_7: (+1)
   \   00000134   0x1D21             ADDS     R1,R4,#+4
   \   00000136   0xA80C             ADD      R0,SP,#+48
   \   00000138   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000013C   0x2800             CMP      R0,#+0
   \   0000013E   0xD408             BMI      ??ecp_double_add_mxz_8
   \   00000140   0x1D22             ADDS     R2,R4,#+4
   \   00000142   0xA90C             ADD      R1,SP,#+48
   \   00000144   0xA80C             ADD      R0,SP,#+48
   \   00000146   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   0000014A   0x0006             MOVS     R6,R0
   \   0000014C   0xD000             BEQ      .+4
   \   0000014E   0xE0F7             B        ??ecp_double_add_mxz_0
   \   00000150   0xE7F0             B        ??ecp_double_add_mxz_7
   1589              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &D,    &Q->X,   &Q->Z ) ); MOD_SUB( D    );
   \                     ??ecp_double_add_mxz_8: (+1)
   \   00000152   0x9A22             LDR      R2,[SP, #+136]
   \   00000154   0x3218             ADDS     R2,R2,#+24
   \   00000156   0x9922             LDR      R1,[SP, #+136]
   \   00000158   0xA803             ADD      R0,SP,#+12
   \   0000015A   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   0000015E   0x0006             MOVS     R6,R0
   \   00000160   0xD000             BEQ      .+4
   \   00000162   0xE0ED             B        ??ecp_double_add_mxz_0
   \                     ??ecp_double_add_mxz_9: (+1)
   \   00000164   0x9803             LDR      R0,[SP, #+12]
   \   00000166   0x2800             CMP      R0,#+0
   \   00000168   0xD50E             BPL      ??ecp_double_add_mxz_10
   \   0000016A   0x2100             MOVS     R1,#+0
   \   0000016C   0xA803             ADD      R0,SP,#+12
   \   0000016E   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   00000172   0x2800             CMP      R0,#+0
   \   00000174   0xD008             BEQ      ??ecp_double_add_mxz_10
   \   00000176   0x1D22             ADDS     R2,R4,#+4
   \   00000178   0xA903             ADD      R1,SP,#+12
   \   0000017A   0xA803             ADD      R0,SP,#+12
   \   0000017C   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   00000180   0x0006             MOVS     R6,R0
   \   00000182   0xD000             BEQ      .+4
   \   00000184   0xE0DC             B        ??ecp_double_add_mxz_0
   \   00000186   0xE7ED             B        ??ecp_double_add_mxz_9
   1590              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DA,   &D,      &A    ) ); MOD_MUL( DA   );
   \                     ??ecp_double_add_mxz_10: (+1)
   \   00000188   0xAA09             ADD      R2,SP,#+36
   \   0000018A   0xA903             ADD      R1,SP,#+12
   \   0000018C   0xA815             ADD      R0,SP,#+84
   \   0000018E   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   00000192   0x0006             MOVS     R6,R0
   \   00000194   0xD000             BEQ      .+4
   \   00000196   0xE0D3             B        ??ecp_double_add_mxz_0
   \   00000198   0x0021             MOVS     R1,R4
   \   0000019A   0xA815             ADD      R0,SP,#+84
   \   0000019C   0x.... 0x....      BL       ecp_modp
   \   000001A0   0x0006             MOVS     R6,R0
   \   000001A2   0xD000             BEQ      .+4
   \   000001A4   0xE0CC             B        ??ecp_double_add_mxz_0
   \   000001A6   0x68A8             LDR      R0,[R5, #+8]
   \   000001A8   0x1C40             ADDS     R0,R0,#+1
   \   000001AA   0x60A8             STR      R0,[R5, #+8]
   1591              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &CB,   &C,      &B    ) ); MOD_MUL( CB   );
   \   000001AC   0x466A             MOV      R2,SP
   \   000001AE   0xA90C             ADD      R1,SP,#+48
   \   000001B0   0xA812             ADD      R0,SP,#+72
   \   000001B2   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000001B6   0x0006             MOVS     R6,R0
   \   000001B8   0xD000             BEQ      .+4
   \   000001BA   0xE0C1             B        ??ecp_double_add_mxz_0
   \   000001BC   0x0021             MOVS     R1,R4
   \   000001BE   0xA812             ADD      R0,SP,#+72
   \   000001C0   0x.... 0x....      BL       ecp_modp
   \   000001C4   0x0006             MOVS     R6,R0
   \   000001C6   0xD000             BEQ      .+4
   \   000001C8   0xE0BA             B        ??ecp_double_add_mxz_0
   \   000001CA   0x68A8             LDR      R0,[R5, #+8]
   \   000001CC   0x1C40             ADDS     R0,R0,#+1
   \   000001CE   0x60A8             STR      R0,[R5, #+8]
   1592              MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &S->X, &DA,     &CB   ) ); MOD_MUL( S->X );
   \   000001D0   0xAA12             ADD      R2,SP,#+72
   \   000001D2   0xA915             ADD      R1,SP,#+84
   \   000001D4   0x0038             MOVS     R0,R7
   \   000001D6   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   000001DA   0x0006             MOVS     R6,R0
   \   000001DC   0xD000             BEQ      .+4
   \   000001DE   0xE0AF             B        ??ecp_double_add_mxz_0
   \   000001E0   0x0021             MOVS     R1,R4
   \   000001E2   0x0038             MOVS     R0,R7
   \   000001E4   0x.... 0x....      BL       ecp_modp
   \   000001E8   0x0006             MOVS     R6,R0
   \   000001EA   0xD000             BEQ      .+4
   \   000001EC   0xE0A8             B        ??ecp_double_add_mxz_0
   \   000001EE   0x68A8             LDR      R0,[R5, #+8]
   \   000001F0   0x1C40             ADDS     R0,R0,#+1
   \   000001F2   0x60A8             STR      R0,[R5, #+8]
   1593              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->X, &S->X,   &S->X ) ); MOD_MUL( S->X );
   \   000001F4   0x003A             MOVS     R2,R7
   \   000001F6   0x0039             MOVS     R1,R7
   \   000001F8   0x0038             MOVS     R0,R7
   \   000001FA   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000001FE   0x0006             MOVS     R6,R0
   \   00000200   0xD000             BEQ      .+4
   \   00000202   0xE09D             B        ??ecp_double_add_mxz_0
   \   00000204   0x0021             MOVS     R1,R4
   \   00000206   0x0038             MOVS     R0,R7
   \   00000208   0x.... 0x....      BL       ecp_modp
   \   0000020C   0x0006             MOVS     R6,R0
   \   0000020E   0xD000             BEQ      .+4
   \   00000210   0xE096             B        ??ecp_double_add_mxz_0
   \   00000212   0x68A8             LDR      R0,[R5, #+8]
   \   00000214   0x1C40             ADDS     R0,R0,#+1
   \   00000216   0x60A8             STR      R0,[R5, #+8]
   1594              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S->Z, &DA,     &CB   ) ); MOD_SUB( S->Z );
   \   00000218   0xAA12             ADD      R2,SP,#+72
   \   0000021A   0xA915             ADD      R1,SP,#+84
   \   0000021C   0x0038             MOVS     R0,R7
   \   0000021E   0x3018             ADDS     R0,R0,#+24
   \   00000220   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   00000224   0x0006             MOVS     R6,R0
   \   00000226   0xD000             BEQ      .+4
   \   00000228   0xE08A             B        ??ecp_double_add_mxz_0
   \                     ??ecp_double_add_mxz_11: (+1)
   \   0000022A   0x69B8             LDR      R0,[R7, #+24]
   \   0000022C   0x2800             CMP      R0,#+0
   \   0000022E   0xD510             BPL      ??ecp_double_add_mxz_12
   \   00000230   0x2100             MOVS     R1,#+0
   \   00000232   0x0038             MOVS     R0,R7
   \   00000234   0x3018             ADDS     R0,R0,#+24
   \   00000236   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   0000023A   0x2800             CMP      R0,#+0
   \   0000023C   0xD009             BEQ      ??ecp_double_add_mxz_12
   \   0000023E   0x1D22             ADDS     R2,R4,#+4
   \   00000240   0x0039             MOVS     R1,R7
   \   00000242   0x3118             ADDS     R1,R1,#+24
   \   00000244   0x0038             MOVS     R0,R7
   \   00000246   0x3018             ADDS     R0,R0,#+24
   \   00000248   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   0000024C   0x0006             MOVS     R6,R0
   \   0000024E   0xD177             BNE      ??ecp_double_add_mxz_0
   \   00000250   0xE7EB             B        ??ecp_double_add_mxz_11
   1595              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, &S->Z,   &S->Z ) ); MOD_MUL( S->Z );
   \                     ??ecp_double_add_mxz_12: (+1)
   \   00000252   0x003A             MOVS     R2,R7
   \   00000254   0x3218             ADDS     R2,R2,#+24
   \   00000256   0x0039             MOVS     R1,R7
   \   00000258   0x3118             ADDS     R1,R1,#+24
   \   0000025A   0x0038             MOVS     R0,R7
   \   0000025C   0x3018             ADDS     R0,R0,#+24
   \   0000025E   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   00000262   0x0006             MOVS     R6,R0
   \   00000264   0xD16C             BNE      ??ecp_double_add_mxz_0
   \   00000266   0x0021             MOVS     R1,R4
   \   00000268   0x0038             MOVS     R0,R7
   \   0000026A   0x3018             ADDS     R0,R0,#+24
   \   0000026C   0x.... 0x....      BL       ecp_modp
   \   00000270   0x0006             MOVS     R6,R0
   \   00000272   0xD165             BNE      ??ecp_double_add_mxz_0
   \   00000274   0x68A8             LDR      R0,[R5, #+8]
   \   00000276   0x1C40             ADDS     R0,R0,#+1
   \   00000278   0x60A8             STR      R0,[R5, #+8]
   1596              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, d,       &S->Z ) ); MOD_MUL( S->Z );
   \   0000027A   0x003A             MOVS     R2,R7
   \   0000027C   0x3218             ADDS     R2,R2,#+24
   \   0000027E   0x9923             LDR      R1,[SP, #+140]
   \   00000280   0x0038             MOVS     R0,R7
   \   00000282   0x3018             ADDS     R0,R0,#+24
   \   00000284   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   00000288   0x0006             MOVS     R6,R0
   \   0000028A   0xD159             BNE      ??ecp_double_add_mxz_0
   \   0000028C   0x0021             MOVS     R1,R4
   \   0000028E   0x0038             MOVS     R0,R7
   \   00000290   0x3018             ADDS     R0,R0,#+24
   \   00000292   0x.... 0x....      BL       ecp_modp
   \   00000296   0x0006             MOVS     R6,R0
   \   00000298   0xD152             BNE      ??ecp_double_add_mxz_0
   \   0000029A   0x68A8             LDR      R0,[R5, #+8]
   \   0000029C   0x1C40             ADDS     R0,R0,#+1
   \   0000029E   0x60A8             STR      R0,[R5, #+8]
   1597              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->X, &AA,     &BB   ) ); MOD_MUL( R->X );
   \   000002A0   0xAA0F             ADD      R2,SP,#+60
   \   000002A2   0xA918             ADD      R1,SP,#+96
   \   000002A4   0x981B             LDR      R0,[SP, #+108]
   \   000002A6   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000002AA   0x0006             MOVS     R6,R0
   \   000002AC   0xD148             BNE      ??ecp_double_add_mxz_0
   \   000002AE   0x0021             MOVS     R1,R4
   \   000002B0   0x981B             LDR      R0,[SP, #+108]
   \   000002B2   0x.... 0x....      BL       ecp_modp
   \   000002B6   0x0006             MOVS     R6,R0
   \   000002B8   0xD142             BNE      ??ecp_double_add_mxz_0
   \   000002BA   0x68A8             LDR      R0,[R5, #+8]
   \   000002BC   0x1C40             ADDS     R0,R0,#+1
   \   000002BE   0x60A8             STR      R0,[R5, #+8]
   1598              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &grp->A, &E    ) ); MOD_MUL( R->Z );
   \   000002C0   0xAA06             ADD      R2,SP,#+24
   \   000002C2   0x0021             MOVS     R1,R4
   \   000002C4   0x3110             ADDS     R1,R1,#+16
   \   000002C6   0x981B             LDR      R0,[SP, #+108]
   \   000002C8   0x3018             ADDS     R0,R0,#+24
   \   000002CA   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000002CE   0x0006             MOVS     R6,R0
   \   000002D0   0xD136             BNE      ??ecp_double_add_mxz_0
   \   000002D2   0x0021             MOVS     R1,R4
   \   000002D4   0x981B             LDR      R0,[SP, #+108]
   \   000002D6   0x3018             ADDS     R0,R0,#+24
   \   000002D8   0x.... 0x....      BL       ecp_modp
   \   000002DC   0x0006             MOVS     R6,R0
   \   000002DE   0xD12F             BNE      ??ecp_double_add_mxz_0
   \   000002E0   0x68A8             LDR      R0,[R5, #+8]
   \   000002E2   0x1C40             ADDS     R0,R0,#+1
   \   000002E4   0x60A8             STR      R0,[R5, #+8]
   1599              MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &R->Z, &BB,     &R->Z ) ); MOD_ADD( R->Z );
   \   000002E6   0x9A1B             LDR      R2,[SP, #+108]
   \   000002E8   0x3218             ADDS     R2,R2,#+24
   \   000002EA   0xA90F             ADD      R1,SP,#+60
   \   000002EC   0x981B             LDR      R0,[SP, #+108]
   \   000002EE   0x3018             ADDS     R0,R0,#+24
   \   000002F0   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   000002F4   0x0006             MOVS     R6,R0
   \   000002F6   0xD123             BNE      ??ecp_double_add_mxz_0
   \                     ??ecp_double_add_mxz_13: (+1)
   \   000002F8   0x1D21             ADDS     R1,R4,#+4
   \   000002FA   0x981B             LDR      R0,[SP, #+108]
   \   000002FC   0x3018             ADDS     R0,R0,#+24
   \   000002FE   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000302   0x2800             CMP      R0,#+0
   \   00000304   0xD409             BMI      ??ecp_double_add_mxz_14
   \   00000306   0x1D22             ADDS     R2,R4,#+4
   \   00000308   0x991B             LDR      R1,[SP, #+108]
   \   0000030A   0x3118             ADDS     R1,R1,#+24
   \   0000030C   0x981B             LDR      R0,[SP, #+108]
   \   0000030E   0x3018             ADDS     R0,R0,#+24
   \   00000310   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   00000314   0x0006             MOVS     R6,R0
   \   00000316   0xD113             BNE      ??ecp_double_add_mxz_0
   \   00000318   0xE7EE             B        ??ecp_double_add_mxz_13
   1600              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &E,      &R->Z ) ); MOD_MUL( R->Z );
   \                     ??ecp_double_add_mxz_14: (+1)
   \   0000031A   0x9A1B             LDR      R2,[SP, #+108]
   \   0000031C   0x3218             ADDS     R2,R2,#+24
   \   0000031E   0xA906             ADD      R1,SP,#+24
   \   00000320   0x981B             LDR      R0,[SP, #+108]
   \   00000322   0x3018             ADDS     R0,R0,#+24
   \   00000324   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   00000328   0x0006             MOVS     R6,R0
   \   0000032A   0xD109             BNE      ??ecp_double_add_mxz_0
   \   0000032C   0x0021             MOVS     R1,R4
   \   0000032E   0x981B             LDR      R0,[SP, #+108]
   \   00000330   0x3018             ADDS     R0,R0,#+24
   \   00000332   0x.... 0x....      BL       ecp_modp
   \   00000336   0x0006             MOVS     R6,R0
   \   00000338   0xD102             BNE      ??ecp_double_add_mxz_0
   \   0000033A   0x68A8             LDR      R0,[R5, #+8]
   \   0000033C   0x1C40             ADDS     R0,R0,#+1
   \   0000033E   0x60A8             STR      R0,[R5, #+8]
   1601          
   1602          cleanup:
   1603              mbedtls_mpi_free( &A ); mbedtls_mpi_free( &AA ); mbedtls_mpi_free( &B );
   \                     ??ecp_double_add_mxz_0: (+1)
   \   00000340   0xA809             ADD      R0,SP,#+36
   \   00000342   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000346   0xA818             ADD      R0,SP,#+96
   \   00000348   0x.... 0x....      BL       mbedtls_mpi_free
   \   0000034C   0x4668             MOV      R0,SP
   \   0000034E   0x.... 0x....      BL       mbedtls_mpi_free
   1604              mbedtls_mpi_free( &BB ); mbedtls_mpi_free( &E ); mbedtls_mpi_free( &C );
   \   00000352   0xA80F             ADD      R0,SP,#+60
   \   00000354   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000358   0xA806             ADD      R0,SP,#+24
   \   0000035A   0x.... 0x....      BL       mbedtls_mpi_free
   \   0000035E   0xA80C             ADD      R0,SP,#+48
   \   00000360   0x.... 0x....      BL       mbedtls_mpi_free
   1605              mbedtls_mpi_free( &D ); mbedtls_mpi_free( &DA ); mbedtls_mpi_free( &CB );
   \   00000364   0xA803             ADD      R0,SP,#+12
   \   00000366   0x.... 0x....      BL       mbedtls_mpi_free
   \   0000036A   0xA815             ADD      R0,SP,#+84
   \   0000036C   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000370   0xA812             ADD      R0,SP,#+72
   \   00000372   0x.... 0x....      BL       mbedtls_mpi_free
   1606          
   1607              return( ret );
   \   00000376   0x0030             MOVS     R0,R6
   \   00000378   0xB01D             ADD      SP,SP,#+116
   \   0000037A   0xBDF0             POP      {R4-R7,PC}       ;; return
   1608          }
   1609          
   1610          /*
   1611           * Multiplication with Montgomery ladder in x/z coordinates,
   1612           * for curves in Montgomery form
   1613           */

   \                                 In section .text, align 2, keep-with-next
   1614          static int ecp_mul_mxz( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
   1615                                  const mbedtls_mpi *m, const mbedtls_ecp_point *P,
   1616                                  int (*f_rng)(void *, unsigned char *, size_t),
   1617                                  void *p_rng )
   1618          {
   \                     ecp_mul_mxz: (+1)
   \   00000000   0xB5F5             PUSH     {R0,R2,R4-R7,LR}
   \   00000002   0xB08F             SUB      SP,SP,#+60
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x001D             MOVS     R5,R3
   1619              int ret;
   1620              size_t i;
   1621              unsigned char b;
   1622              mbedtls_ecp_point RP;
   1623              mbedtls_mpi PX;
   1624          
   1625              mbedtls_ecp_point_init( &RP ); mbedtls_mpi_init( &PX );
   \   00000008   0xA802             ADD      R0,SP,#+8
   \   0000000A   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000000E   0xA802             ADD      R0,SP,#+8
   \   00000010   0x300C             ADDS     R0,R0,#+12
   \   00000012   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000016   0xA802             ADD      R0,SP,#+8
   \   00000018   0x3018             ADDS     R0,R0,#+24
   \   0000001A   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000001E   0xA80B             ADD      R0,SP,#+44
   \   00000020   0x.... 0x....      BL       mbedtls_mpi_init
   1626          
   1627              /* Save PX and read from P before writing to R, in case P == R */
   1628              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &PX, &P->X ) );
   \   00000024   0x0029             MOVS     R1,R5
   \   00000026   0xA80B             ADD      R0,SP,#+44
   \   00000028   0x.... 0x....      BL       mbedtls_mpi_copy
   \   0000002C   0x0006             MOVS     R6,R0
   \   0000002E   0xD000             BEQ      .+4
   \   00000030   0xE08F             B        ??ecp_mul_mxz_0
   1629              MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &RP, P ) );
   \   00000032   0x0029             MOVS     R1,R5
   \   00000034   0xA802             ADD      R0,SP,#+8
   \   00000036   0x.... 0x....      BL       mbedtls_ecp_copy
   \   0000003A   0x0006             MOVS     R6,R0
   \   0000003C   0xD000             BEQ      .+4
   \   0000003E   0xE088             B        ??ecp_mul_mxz_0
   1630          
   1631              /* Set R to zero in modified x/z coordinates */
   1632              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->X, 1 ) );
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x0020             MOVS     R0,R4
   \   00000044   0x.... 0x....      BL       mbedtls_mpi_lset
   \   00000048   0x0006             MOVS     R6,R0
   \   0000004A   0xD000             BEQ      .+4
   \   0000004C   0xE081             B        ??ecp_mul_mxz_0
   1633              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 0 ) );
   \   0000004E   0x2100             MOVS     R1,#+0
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0x3018             ADDS     R0,R0,#+24
   \   00000054   0x.... 0x....      BL       mbedtls_mpi_lset
   \   00000058   0x0006             MOVS     R6,R0
   \   0000005A   0xD17A             BNE      ??ecp_mul_mxz_0
   1634              mbedtls_mpi_free( &R->Y );
   \   0000005C   0x0020             MOVS     R0,R4
   \   0000005E   0x300C             ADDS     R0,R0,#+12
   \   00000060   0x.... 0x....      BL       mbedtls_mpi_free
   1635          
   1636              /* RP.X might be sligtly larger than P, so reduce it */
   1637              MOD_ADD( RP.X );
   \                     ??ecp_mul_mxz_1: (+1)
   \   00000064   0x980F             LDR      R0,[SP, #+60]
   \   00000066   0x1D01             ADDS     R1,R0,#+4
   \   00000068   0xA802             ADD      R0,SP,#+8
   \   0000006A   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD408             BMI      ??ecp_mul_mxz_2
   \   00000072   0x980F             LDR      R0,[SP, #+60]
   \   00000074   0x1D02             ADDS     R2,R0,#+4
   \   00000076   0xA902             ADD      R1,SP,#+8
   \   00000078   0xA802             ADD      R0,SP,#+8
   \   0000007A   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   0000007E   0x0006             MOVS     R6,R0
   \   00000080   0xD167             BNE      ??ecp_mul_mxz_0
   \   00000082   0xE7EF             B        ??ecp_mul_mxz_1
   \                     ??ecp_mul_mxz_2: (+1)
   \   00000084   0x9A16             LDR      R2,[SP, #+88]
   1638          
   1639              /* Randomize coordinates of the starting point */
   1640              if( f_rng != NULL )
   \   00000086   0x0010             MOVS     R0,R2
   \   00000088   0xD006             BEQ      ??ecp_mul_mxz_3
   1641                  MBEDTLS_MPI_CHK( ecp_randomize_mxz( grp, &RP, f_rng, p_rng ) );
   \   0000008A   0x9B17             LDR      R3,[SP, #+92]
   \   0000008C   0xA902             ADD      R1,SP,#+8
   \   0000008E   0x980F             LDR      R0,[SP, #+60]
   \   00000090   0x.... 0x....      BL       ecp_randomize_mxz
   \   00000094   0x0006             MOVS     R6,R0
   \   00000096   0xD15C             BNE      ??ecp_mul_mxz_0
   1642          
   1643              /* Loop invariant: R = result so far, RP = R + P */
   1644              i = mbedtls_mpi_bitlen( m ); /* one past the (zero-based) most significant bit */
   \                     ??ecp_mul_mxz_3: (+1)
   \   00000098   0x9810             LDR      R0,[SP, #+64]
   \   0000009A   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   0000009E   0x0005             MOVS     R5,R0
   \   000000A0   0xD035             BEQ      ??ecp_mul_mxz_4
   \                     ??ecp_mul_mxz_5: (+1)
   \   000000A2   0x1E6D             SUBS     R5,R5,#+1
   1645              while( i-- > 0 )
   1646              {
   1647                  b = mbedtls_mpi_get_bit( m, i );
   \   000000A4   0x0029             MOVS     R1,R5
   \   000000A6   0x9810             LDR      R0,[SP, #+64]
   \   000000A8   0x.... 0x....      BL       mbedtls_mpi_get_bit
   \   000000AC   0x0007             MOVS     R7,R0
   1648                  /*
   1649                   *  if (b) R = 2R + P else R = 2R,
   1650                   * which is:
   1651                   *  if (b) double_add( RP, R, RP, R )
   1652                   *  else   double_add( R, RP, R, RP )
   1653                   * but using safe conditional swaps to avoid leaks
   1654                   */
   1655                  MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
   \   000000AE   0xB2FA             UXTB     R2,R7
   \   000000B0   0xA902             ADD      R1,SP,#+8
   \   000000B2   0x0020             MOVS     R0,R4
   \   000000B4   0x.... 0x....      BL       mbedtls_mpi_safe_cond_swap
   \   000000B8   0x0006             MOVS     R6,R0
   \   000000BA   0xD14A             BNE      ??ecp_mul_mxz_0
   1656                  MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
   \   000000BC   0xB2FA             UXTB     R2,R7
   \   000000BE   0xA802             ADD      R0,SP,#+8
   \   000000C0   0x0001             MOVS     R1,R0
   \   000000C2   0x3118             ADDS     R1,R1,#+24
   \   000000C4   0x0020             MOVS     R0,R4
   \   000000C6   0x3018             ADDS     R0,R0,#+24
   \   000000C8   0x.... 0x....      BL       mbedtls_mpi_safe_cond_swap
   \   000000CC   0x0006             MOVS     R6,R0
   \   000000CE   0xD140             BNE      ??ecp_mul_mxz_0
   1657                  MBEDTLS_MPI_CHK( ecp_double_add_mxz( grp, R, &RP, R, &RP, &PX ) );
   \   000000D0   0xA80B             ADD      R0,SP,#+44
   \   000000D2   0x9001             STR      R0,[SP, #+4]
   \   000000D4   0xA802             ADD      R0,SP,#+8
   \   000000D6   0x9000             STR      R0,[SP, #+0]
   \   000000D8   0x0023             MOVS     R3,R4
   \   000000DA   0xAA02             ADD      R2,SP,#+8
   \   000000DC   0x0021             MOVS     R1,R4
   \   000000DE   0x980F             LDR      R0,[SP, #+60]
   \   000000E0   0x.... 0x....      BL       ecp_double_add_mxz
   \   000000E4   0x0006             MOVS     R6,R0
   \   000000E6   0xD134             BNE      ??ecp_mul_mxz_0
   1658                  MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
   \   000000E8   0xB2FA             UXTB     R2,R7
   \   000000EA   0xA902             ADD      R1,SP,#+8
   \   000000EC   0x0020             MOVS     R0,R4
   \   000000EE   0x.... 0x....      BL       mbedtls_mpi_safe_cond_swap
   \   000000F2   0x0006             MOVS     R6,R0
   \   000000F4   0xD12D             BNE      ??ecp_mul_mxz_0
   1659                  MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
   \   000000F6   0xB2FA             UXTB     R2,R7
   \   000000F8   0xA802             ADD      R0,SP,#+8
   \   000000FA   0x0001             MOVS     R1,R0
   \   000000FC   0x3118             ADDS     R1,R1,#+24
   \   000000FE   0x0020             MOVS     R0,R4
   \   00000100   0x3018             ADDS     R0,R0,#+24
   \   00000102   0x.... 0x....      BL       mbedtls_mpi_safe_cond_swap
   \   00000106   0x0006             MOVS     R6,R0
   \   00000108   0xD123             BNE      ??ecp_mul_mxz_0
   1660              }
   \   0000010A   0x2D00             CMP      R5,#+0
   \   0000010C   0xD1C9             BNE      ??ecp_mul_mxz_5
   1661          
   1662              MBEDTLS_MPI_CHK( ecp_normalize_mxz( grp, R ) );
   \                     ??ecp_mul_mxz_4: (+1)
   \   0000010E   0x980F             LDR      R0,[SP, #+60]
   \   00000110   0x1D02             ADDS     R2,R0,#+4
   \   00000112   0x0021             MOVS     R1,R4
   \   00000114   0x3118             ADDS     R1,R1,#+24
   \   00000116   0x0020             MOVS     R0,R4
   \   00000118   0x3018             ADDS     R0,R0,#+24
   \   0000011A   0x.... 0x....      BL       mbedtls_mpi_inv_mod
   \   0000011E   0x2800             CMP      R0,#+0
   \   00000120   0xD116             BNE      ??ecp_mul_mxz_6
   \   00000122   0x0022             MOVS     R2,R4
   \   00000124   0x3218             ADDS     R2,R2,#+24
   \   00000126   0x0021             MOVS     R1,R4
   \   00000128   0x0020             MOVS     R0,R4
   \   0000012A   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000012E   0x2800             CMP      R0,#+0
   \   00000130   0xD10E             BNE      ??ecp_mul_mxz_6
   \   00000132   0x990F             LDR      R1,[SP, #+60]
   \   00000134   0x0020             MOVS     R0,R4
   \   00000136   0x.... 0x....      BL       ecp_modp
   \   0000013A   0x2800             CMP      R0,#+0
   \   0000013C   0xD108             BNE      ??ecp_mul_mxz_6
   \   0000013E   0x....             LDR      R0,??DataTable40
   \   00000140   0x6881             LDR      R1,[R0, #+8]
   \   00000142   0x1C49             ADDS     R1,R1,#+1
   \   00000144   0x6081             STR      R1,[R0, #+8]
   \   00000146   0x2101             MOVS     R1,#+1
   \   00000148   0x0020             MOVS     R0,R4
   \   0000014A   0x3018             ADDS     R0,R0,#+24
   \   0000014C   0x.... 0x....      BL       mbedtls_mpi_lset
   \                     ??ecp_mul_mxz_6: (+1)
   \   00000150   0x0006             MOVS     R6,R0
   1663          
   1664          cleanup:
   1665              mbedtls_ecp_point_free( &RP ); mbedtls_mpi_free( &PX );
   \                     ??ecp_mul_mxz_0: (+1)
   \   00000152   0xA802             ADD      R0,SP,#+8
   \   00000154   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000158   0xA802             ADD      R0,SP,#+8
   \   0000015A   0x300C             ADDS     R0,R0,#+12
   \   0000015C   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000160   0xA802             ADD      R0,SP,#+8
   \   00000162   0x3018             ADDS     R0,R0,#+24
   \   00000164   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000168   0xA80B             ADD      R0,SP,#+44
   \   0000016A   0x.... 0x....      BL       mbedtls_mpi_free
   1666          
   1667              return( ret );
   \   0000016E   0x0030             MOVS     R0,R6
   \   00000170   0xB011             ADD      SP,SP,#+68
   \   00000172   0xBDF0             POP      {R4-R7,PC}       ;; return
   1668          }
   1669          
   1670          #endif /* ECP_MONTGOMERY */
   1671          
   1672          /*
   1673           * Multiplication R = m * P
   1674           */

   \                                 In section .text, align 2, keep-with-next
   1675          int mbedtls_ecp_mul( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
   1676                       const mbedtls_mpi *m, const mbedtls_ecp_point *P,
   1677                       int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
   1678          {
   \                     mbedtls_ecp_mul: (+1)
   \   00000000   0xB5FC             PUSH     {R2-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000F             MOVS     R7,R1
   1679              int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   1680          #if defined(MBEDTLS_ECP_INTERNAL_ALT)
   1681              char is_grp_capable = 0;
   1682          #endif
   1683          
   1684              /* Common sanity checks */
   1685              if( mbedtls_mpi_cmp_int( &P->Z, 1 ) != 0 )
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x4618             MOV      R0,R3
   \   0000000C   0x3018             ADDS     R0,R0,#+24
   \   0000000E   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD001             BEQ      ??mbedtls_ecp_mul_0
   1686                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \   00000016   0x....             LDR      R0,??DataTable41  ;; 0xffffb080
   \   00000018   0xE029             B        ??mbedtls_ecp_mul_1
   1687          
   1688              if( ( ret = mbedtls_ecp_check_privkey( grp, m ) ) != 0 ||
   1689                  ( ret = mbedtls_ecp_check_pubkey( grp, P ) ) != 0 )
   \                     ??mbedtls_ecp_mul_0: (+1)
   \   0000001A   0x9903             LDR      R1,[SP, #+12]
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      BL       mbedtls_ecp_check_privkey
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD123             BNE      ??mbedtls_ecp_mul_1
   \   00000026   0x9904             LDR      R1,[SP, #+16]
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x.... 0x....      BL       mbedtls_ecp_check_pubkey
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD11D             BNE      ??mbedtls_ecp_mul_1
   1690                  return( ret );
   1691          
   1692          #if defined(MBEDTLS_ECP_INTERNAL_ALT)
   1693              if ( is_grp_capable = mbedtls_internal_ecp_grp_capable( grp )  )
   1694              {
   1695                  MBEDTLS_MPI_CHK( mbedtls_internal_ecp_init( grp ) );
   1696              }
   1697          
   1698          #endif /* MBEDTLS_ECP_INTERNAL_ALT */
   1699          #if defined(ECP_MONTGOMERY)
   1700              if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
   \   00000032   0x6B21             LDR      R1,[R4, #+48]
   \   00000034   0x2900             CMP      R1,#+0
   \   00000036   0xD01A             BEQ      ??mbedtls_ecp_mul_1
   \   00000038   0x9E0A             LDR      R6,[SP, #+40]
   \   0000003A   0x9D0B             LDR      R5,[SP, #+44]
   \   0000003C   0x6BE1             LDR      R1,[R4, #+60]
   \   0000003E   0x2900             CMP      R1,#+0
   \   00000040   0xD10A             BNE      ??mbedtls_ecp_mul_2
   1701                  ret = ecp_mul_mxz( grp, R, m, P, f_rng, p_rng );
   \   00000042   0x9501             STR      R5,[SP, #+4]
   \   00000044   0x9600             STR      R6,[SP, #+0]
   \   00000046   0x9B04             LDR      R3,[SP, #+16]
   \   00000048   0x9A03             LDR      R2,[SP, #+12]
   \   0000004A   0x0039             MOVS     R1,R7
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0x.... 0x....      BL       ecp_mul_mxz
   1702          
   1703          #endif
   1704          #if defined(ECP_SHORTWEIERSTRASS)
   1705              if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   \   00000052   0x6B21             LDR      R1,[R4, #+48]
   \   00000054   0x2900             CMP      R1,#+0
   \   00000056   0xD00A             BEQ      ??mbedtls_ecp_mul_1
   \                     ??mbedtls_ecp_mul_2: (+1)
   \   00000058   0x6BE1             LDR      R1,[R4, #+60]
   \   0000005A   0x2900             CMP      R1,#+0
   \   0000005C   0xD007             BEQ      ??mbedtls_ecp_mul_1
   1706                  ret = ecp_mul_comb( grp, R, m, P, f_rng, p_rng );
   \   0000005E   0x9501             STR      R5,[SP, #+4]
   \   00000060   0x9600             STR      R6,[SP, #+0]
   \   00000062   0x9B04             LDR      R3,[SP, #+16]
   \   00000064   0x9A03             LDR      R2,[SP, #+12]
   \   00000066   0x0039             MOVS     R1,R7
   \   00000068   0x0020             MOVS     R0,R4
   \   0000006A   0x.... 0x....      BL       ecp_mul_comb
   1707          
   1708          #endif
   1709          #if defined(MBEDTLS_ECP_INTERNAL_ALT)
   1710          cleanup:
   1711          
   1712              if ( is_grp_capable )
   1713              {
   1714                  mbedtls_internal_ecp_free( grp );
   1715              }
   1716          
   1717          #endif /* MBEDTLS_ECP_INTERNAL_ALT */
   1718              return( ret );
   \                     ??mbedtls_ecp_mul_1: (+1)
   \   0000006E   0xB005             ADD      SP,SP,#+20
   \   00000070   0xBDF0             POP      {R4-R7,PC}       ;; return
   1719          }
   1720          
   1721          #if defined(ECP_SHORTWEIERSTRASS)
   1722          /*
   1723           * Check that an affine point is valid as a public key,
   1724           * short weierstrass curves (SEC1 3.2.3.1)
   1725           */

   \                                 In section .text, align 2, keep-with-next
   1726          static int ecp_check_pubkey_sw( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
   1727          {
   \                     ecp_check_pubkey_sw: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000F             MOVS     R7,R1
   1728              int ret;
   1729              mbedtls_mpi YY, RHS;
   1730          
   1731              /* pt coordinates must be normalized for our checks */
   1732              if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
   1733                  mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
   1734                  mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
   1735                  mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x0038             MOVS     R0,R7
   \   0000000C   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD413             BMI      ??ecp_check_pubkey_sw_0
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x0038             MOVS     R0,R7
   \   00000018   0x300C             ADDS     R0,R0,#+12
   \   0000001A   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD40C             BMI      ??ecp_check_pubkey_sw_0
   \   00000022   0x1D21             ADDS     R1,R4,#+4
   \   00000024   0x0038             MOVS     R0,R7
   \   00000026   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD506             BPL      ??ecp_check_pubkey_sw_0
   \   0000002E   0x1D21             ADDS     R1,R4,#+4
   \   00000030   0x0038             MOVS     R0,R7
   \   00000032   0x300C             ADDS     R0,R0,#+12
   \   00000034   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD401             BMI      ??ecp_check_pubkey_sw_1
   1736                  return( MBEDTLS_ERR_ECP_INVALID_KEY );
   \                     ??ecp_check_pubkey_sw_0: (+1)
   \   0000003C   0x....             LDR      R0,??DataTable42  ;; 0xffffb380
   \   0000003E   0xE08D             B        ??ecp_check_pubkey_sw_2
   1737          
   1738              mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
   \                     ??ecp_check_pubkey_sw_1: (+1)
   \   00000040   0xA803             ADD      R0,SP,#+12
   \   00000042   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000046   0x4668             MOV      R0,SP
   \   00000048   0x.... 0x....      BL       mbedtls_mpi_init
   1739          
   1740              /*
   1741               * YY = Y^2
   1742               * RHS = X (X^2 + A) + B = X^3 + A X + B
   1743               */
   1744              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
   \   0000004C   0x003A             MOVS     R2,R7
   \   0000004E   0x320C             ADDS     R2,R2,#+12
   \   00000050   0x0039             MOVS     R1,R7
   \   00000052   0x310C             ADDS     R1,R1,#+12
   \   00000054   0xA803             ADD      R0,SP,#+12
   \   00000056   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000005A   0x0005             MOVS     R5,R0
   \   0000005C   0xD177             BNE      ??ecp_check_pubkey_sw_3
   \   0000005E   0x0021             MOVS     R1,R4
   \   00000060   0xA803             ADD      R0,SP,#+12
   \   00000062   0x.... 0x....      BL       ecp_modp
   \   00000066   0x0005             MOVS     R5,R0
   \   00000068   0xD171             BNE      ??ecp_check_pubkey_sw_3
   \   0000006A   0x....             LDR      R6,??DataTable40
   \   0000006C   0x68B0             LDR      R0,[R6, #+8]
   \   0000006E   0x1C40             ADDS     R0,R0,#+1
   \   00000070   0x60B0             STR      R0,[R6, #+8]
   1745              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
   \   00000072   0x003A             MOVS     R2,R7
   \   00000074   0x0039             MOVS     R1,R7
   \   00000076   0x4668             MOV      R0,SP
   \   00000078   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000007C   0x0005             MOVS     R5,R0
   \   0000007E   0xD166             BNE      ??ecp_check_pubkey_sw_3
   \   00000080   0x0021             MOVS     R1,R4
   \   00000082   0x4668             MOV      R0,SP
   \   00000084   0x.... 0x....      BL       ecp_modp
   \   00000088   0x0005             MOVS     R5,R0
   \   0000008A   0xD160             BNE      ??ecp_check_pubkey_sw_3
   \   0000008C   0x68B0             LDR      R0,[R6, #+8]
   \   0000008E   0x1C40             ADDS     R0,R0,#+1
   \   00000090   0x60B0             STR      R0,[R6, #+8]
   1746          
   1747              /* Special case for A = -3 */
   1748              if( grp->A.p == NULL )
   \   00000092   0x69A0             LDR      R0,[R4, #+24]
   \   00000094   0x2800             CMP      R0,#+0
   \   00000096   0xD117             BNE      ??ecp_check_pubkey_sw_4
   1749              {
   1750                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
   \   00000098   0x2203             MOVS     R2,#+3
   \   0000009A   0x4669             MOV      R1,SP
   \   0000009C   0x4668             MOV      R0,SP
   \   0000009E   0x.... 0x....      BL       mbedtls_mpi_sub_int
   \   000000A2   0x0005             MOVS     R5,R0
   \   000000A4   0xD153             BNE      ??ecp_check_pubkey_sw_3
   \                     ??ecp_check_pubkey_sw_5: (+1)
   \   000000A6   0x9800             LDR      R0,[SP, #+0]
   \   000000A8   0x2800             CMP      R0,#+0
   \   000000AA   0xD523             BPL      ??ecp_check_pubkey_sw_6
   \   000000AC   0x2100             MOVS     R1,#+0
   \   000000AE   0x4668             MOV      R0,SP
   \   000000B0   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   000000B4   0x2800             CMP      R0,#+0
   \   000000B6   0xD01D             BEQ      ??ecp_check_pubkey_sw_6
   \   000000B8   0x1D22             ADDS     R2,R4,#+4
   \   000000BA   0x4669             MOV      R1,SP
   \   000000BC   0x4668             MOV      R0,SP
   \   000000BE   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   000000C2   0x0005             MOVS     R5,R0
   \   000000C4   0xD143             BNE      ??ecp_check_pubkey_sw_3
   \   000000C6   0xE7EE             B        ??ecp_check_pubkey_sw_5
   1751              }
   1752              else
   1753              {
   1754                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
   \                     ??ecp_check_pubkey_sw_4: (+1)
   \   000000C8   0x0022             MOVS     R2,R4
   \   000000CA   0x3210             ADDS     R2,R2,#+16
   \   000000CC   0x4669             MOV      R1,SP
   \   000000CE   0x4668             MOV      R0,SP
   \   000000D0   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   000000D4   0x0005             MOVS     R5,R0
   \   000000D6   0xD13A             BNE      ??ecp_check_pubkey_sw_3
   \                     ??ecp_check_pubkey_sw_7: (+1)
   \   000000D8   0x1D21             ADDS     R1,R4,#+4
   \   000000DA   0x4668             MOV      R0,SP
   \   000000DC   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   000000E0   0x2800             CMP      R0,#+0
   \   000000E2   0xD407             BMI      ??ecp_check_pubkey_sw_6
   \   000000E4   0x1D22             ADDS     R2,R4,#+4
   \   000000E6   0x4669             MOV      R1,SP
   \   000000E8   0x4668             MOV      R0,SP
   \   000000EA   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   000000EE   0x0005             MOVS     R5,R0
   \   000000F0   0xD12D             BNE      ??ecp_check_pubkey_sw_3
   \   000000F2   0xE7F1             B        ??ecp_check_pubkey_sw_7
   1755              }
   1756          
   1757              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
   \                     ??ecp_check_pubkey_sw_6: (+1)
   \   000000F4   0x003A             MOVS     R2,R7
   \   000000F6   0x4669             MOV      R1,SP
   \   000000F8   0x4668             MOV      R0,SP
   \   000000FA   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000000FE   0x0005             MOVS     R5,R0
   \   00000100   0xD125             BNE      ??ecp_check_pubkey_sw_3
   \   00000102   0x0021             MOVS     R1,R4
   \   00000104   0x4668             MOV      R0,SP
   \   00000106   0x.... 0x....      BL       ecp_modp
   \   0000010A   0x0005             MOVS     R5,R0
   \   0000010C   0xD11F             BNE      ??ecp_check_pubkey_sw_3
   \   0000010E   0x68B0             LDR      R0,[R6, #+8]
   \   00000110   0x1C40             ADDS     R0,R0,#+1
   \   00000112   0x60B0             STR      R0,[R6, #+8]
   1758              MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
   \   00000114   0x0022             MOVS     R2,R4
   \   00000116   0x321C             ADDS     R2,R2,#+28
   \   00000118   0x4669             MOV      R1,SP
   \   0000011A   0x4668             MOV      R0,SP
   \   0000011C   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   00000120   0x0005             MOVS     R5,R0
   \   00000122   0xD114             BNE      ??ecp_check_pubkey_sw_3
   \                     ??ecp_check_pubkey_sw_8: (+1)
   \   00000124   0x1D21             ADDS     R1,R4,#+4
   \   00000126   0x4668             MOV      R0,SP
   \   00000128   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000012C   0x2800             CMP      R0,#+0
   \   0000012E   0xD407             BMI      ??ecp_check_pubkey_sw_9
   \   00000130   0x1D22             ADDS     R2,R4,#+4
   \   00000132   0x4669             MOV      R1,SP
   \   00000134   0x4668             MOV      R0,SP
   \   00000136   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   0000013A   0x0005             MOVS     R5,R0
   \   0000013C   0xD107             BNE      ??ecp_check_pubkey_sw_3
   \   0000013E   0xE7F1             B        ??ecp_check_pubkey_sw_8
   1759          
   1760              if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
   \                     ??ecp_check_pubkey_sw_9: (+1)
   \   00000140   0x4669             MOV      R1,SP
   \   00000142   0xA803             ADD      R0,SP,#+12
   \   00000144   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000148   0x2800             CMP      R0,#+0
   \   0000014A   0xD000             BEQ      ??ecp_check_pubkey_sw_3
   1761                  ret = MBEDTLS_ERR_ECP_INVALID_KEY;
   \   0000014C   0x....             LDR      R5,??DataTable42  ;; 0xffffb380
   1762          
   1763          cleanup:
   1764          
   1765              mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
   \                     ??ecp_check_pubkey_sw_3: (+1)
   \   0000014E   0xA803             ADD      R0,SP,#+12
   \   00000150   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000154   0x4668             MOV      R0,SP
   \   00000156   0x.... 0x....      BL       mbedtls_mpi_free
   1766          
   1767              return( ret );
   \   0000015A   0x0028             MOVS     R0,R5
   \                     ??ecp_check_pubkey_sw_2: (+1)
   \   0000015C   0xB007             ADD      SP,SP,#+28
   \   0000015E   0xBDF0             POP      {R4-R7,PC}       ;; return
   1768          }
   1769          #endif /* ECP_SHORTWEIERSTRASS */
   1770          
   1771          /*
   1772           * R = m * P with shortcuts for m == 1 and m == -1
   1773           * NOT constant-time - ONLY for short Weierstrass!
   1774           */

   \                                 In section .text, align 2, keep-with-next
   1775          static int mbedtls_ecp_mul_shortcuts( mbedtls_ecp_group *grp,
   1776                                                mbedtls_ecp_point *R,
   1777                                                const mbedtls_mpi *m,
   1778                                                const mbedtls_ecp_point *P )
   1779          {
   \                     mbedtls_ecp_mul_shortcuts: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0017             MOVS     R7,R2
   \   0000000A   0x001D             MOVS     R5,R3
   1780              int ret;
   1781          
   1782              if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x0038             MOVS     R0,R7
   \   00000010   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD104             BNE      ??mbedtls_ecp_mul_shortcuts_0
   1783              {
   1784                  MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
   \   00000018   0x0029             MOVS     R1,R5
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       mbedtls_ecp_copy
   \   00000020   0xE024             B        ??mbedtls_ecp_mul_shortcuts_1
   1785              }
   1786              else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
   \                     ??mbedtls_ecp_mul_shortcuts_0: (+1)
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000026   0x0038             MOVS     R0,R7
   \   00000028   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD114             BNE      ??mbedtls_ecp_mul_shortcuts_2
   1787              {
   1788                  MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
   \   00000030   0x0029             MOVS     R1,R5
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0x.... 0x....      BL       mbedtls_ecp_copy
   \   00000038   0x0005             MOVS     R5,R0
   \   0000003A   0xD118             BNE      ??mbedtls_ecp_mul_shortcuts_3
   1789                  if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x300C             ADDS     R0,R0,#+12
   \   00000042   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD011             BEQ      ??mbedtls_ecp_mul_shortcuts_3
   1790                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
   \   0000004A   0x0022             MOVS     R2,R4
   \   0000004C   0x320C             ADDS     R2,R2,#+12
   \   0000004E   0x1D31             ADDS     R1,R6,#+4
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0x300C             ADDS     R0,R0,#+12
   \   00000054   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   00000058   0xE008             B        ??mbedtls_ecp_mul_shortcuts_1
   1791              }
   1792              else
   1793              {
   1794                  MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, R, m, P, NULL, NULL ) );
   \                     ??mbedtls_ecp_mul_shortcuts_2: (+1)
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x9001             STR      R0,[SP, #+4]
   \   0000005E   0x9000             STR      R0,[SP, #+0]
   \   00000060   0x002B             MOVS     R3,R5
   \   00000062   0x003A             MOVS     R2,R7
   \   00000064   0x0021             MOVS     R1,R4
   \   00000066   0x0030             MOVS     R0,R6
   \   00000068   0x.... 0x....      BL       mbedtls_ecp_mul
   \                     ??mbedtls_ecp_mul_shortcuts_1: (+1)
   \   0000006C   0x0005             MOVS     R5,R0
   1795              }
   1796          
   1797          cleanup:
   1798              return( ret );
   \                     ??mbedtls_ecp_mul_shortcuts_3: (+1)
   \   0000006E   0x0028             MOVS     R0,R5
   \   00000070   0xB003             ADD      SP,SP,#+12
   \   00000072   0xBDF0             POP      {R4-R7,PC}       ;; return
   1799          }
   1800          
   1801          /*
   1802           * Linear combination
   1803           * NOT constant-time
   1804           */

   \                                 In section .text, align 2, keep-with-next
   1805          int mbedtls_ecp_muladd( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
   1806                       const mbedtls_mpi *m, const mbedtls_ecp_point *P,
   1807                       const mbedtls_mpi *n, const mbedtls_ecp_point *Q )
   1808          {
   \                     mbedtls_ecp_muladd: (+1)
   \   00000000   0xB5F4             PUSH     {R2,R4-R7,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000F             MOVS     R7,R1
   \   00000008   0x001E             MOVS     R6,R3
   1809              int ret;
   1810              mbedtls_ecp_point mP;
   1811          #if defined(MBEDTLS_ECP_INTERNAL_ALT)
   1812              char is_grp_capable = 0;
   1813          #endif
   1814          
   1815              if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
   \   0000000A   0x6B28             LDR      R0,[R5, #+48]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD039             BEQ      ??mbedtls_ecp_muladd_0
   \   00000010   0x6BE8             LDR      R0,[R5, #+60]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD036             BEQ      ??mbedtls_ecp_muladd_0
   1816                  return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
   1817          
   1818              mbedtls_ecp_point_init( &mP );
   \   00000016   0x4668             MOV      R0,SP
   \   00000018   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000001C   0x466C             MOV      R4,SP
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x300C             ADDS     R0,R0,#+12
   \   00000022   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x3018             ADDS     R0,R0,#+24
   \   0000002A   0x.... 0x....      BL       mbedtls_mpi_init
   1819          
   1820              MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, &mP, m, P ) );
   \   0000002E   0x0033             MOVS     R3,R6
   \   00000030   0x9A0A             LDR      R2,[SP, #+40]
   \   00000032   0x4669             MOV      R1,SP
   \   00000034   0x0028             MOVS     R0,R5
   \   00000036   0x.... 0x....      BL       mbedtls_ecp_mul_shortcuts
   \   0000003A   0x0006             MOVS     R6,R0
   \   0000003C   0xD114             BNE      ??mbedtls_ecp_muladd_1
   1821              MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, R,   n, Q ) );
   \   0000003E   0x9B11             LDR      R3,[SP, #+68]
   \   00000040   0x9A10             LDR      R2,[SP, #+64]
   \   00000042   0x0039             MOVS     R1,R7
   \   00000044   0x0028             MOVS     R0,R5
   \   00000046   0x.... 0x....      BL       mbedtls_ecp_mul_shortcuts
   \   0000004A   0x0006             MOVS     R6,R0
   \   0000004C   0xD10C             BNE      ??mbedtls_ecp_muladd_1
   1822          
   1823          #if defined(MBEDTLS_ECP_INTERNAL_ALT)
   1824              if (  is_grp_capable = mbedtls_internal_ecp_grp_capable( grp )  )
   1825              {
   1826                  MBEDTLS_MPI_CHK( mbedtls_internal_ecp_init( grp ) );
   1827              }
   1828          
   1829          #endif /* MBEDTLS_ECP_INTERNAL_ALT */
   1830              MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, &mP, R ) );
   \   0000004E   0x003B             MOVS     R3,R7
   \   00000050   0x466A             MOV      R2,SP
   \   00000052   0x0039             MOVS     R1,R7
   \   00000054   0x0028             MOVS     R0,R5
   \   00000056   0x.... 0x....      BL       ecp_add_mixed
   \   0000005A   0x0006             MOVS     R6,R0
   \   0000005C   0xD104             BNE      ??mbedtls_ecp_muladd_1
   1831              MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );
   \   0000005E   0x0039             MOVS     R1,R7
   \   00000060   0x0028             MOVS     R0,R5
   \   00000062   0x.... 0x....      BL       ecp_normalize_jac
   \   00000066   0x0006             MOVS     R6,R0
   1832          
   1833          cleanup:
   1834          
   1835          #if defined(MBEDTLS_ECP_INTERNAL_ALT)
   1836              if ( is_grp_capable )
   1837              {
   1838                  mbedtls_internal_ecp_free( grp );
   1839              }
   1840          
   1841          #endif /* MBEDTLS_ECP_INTERNAL_ALT */
   1842              mbedtls_ecp_point_free( &mP );
   \                     ??mbedtls_ecp_muladd_1: (+1)
   \   00000068   0x4668             MOV      R0,SP
   \   0000006A   0x.... 0x....      BL       mbedtls_mpi_free
   \   0000006E   0x0020             MOVS     R0,R4
   \   00000070   0x300C             ADDS     R0,R0,#+12
   \   00000072   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000076   0x0020             MOVS     R0,R4
   \   00000078   0x3018             ADDS     R0,R0,#+24
   \   0000007A   0x.... 0x....      BL       mbedtls_mpi_free
   1843          
   1844              return( ret );
   \   0000007E   0x0030             MOVS     R0,R6
   \                     ??mbedtls_ecp_muladd_2: (+1)
   \   00000080   0xB00B             ADD      SP,SP,#+44
   \   00000082   0xBDF0             POP      {R4-R7,PC}       ;; return
   \                     ??mbedtls_ecp_muladd_0: (+1)
   \   00000084   0x....             LDR      R0,??DataTable44  ;; 0xffffb180
   \   00000086   0xE7FB             B        ??mbedtls_ecp_muladd_2
   1845          }
   1846          
   1847          
   1848          #if defined(ECP_MONTGOMERY)
   1849          /*
   1850           * Check validity of a public key for Montgomery curves with x-only schemes
   1851           */
   1852          static int ecp_check_pubkey_mx( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
   1853          {
   1854              /* [Curve25519 p. 5] Just check X is the correct number of bytes */
   1855              if( mbedtls_mpi_size( &pt->X ) > ( grp->nbits + 7 ) / 8 )
   1856                  return( MBEDTLS_ERR_ECP_INVALID_KEY );
   1857          
   1858              return( 0 );
   1859          }
   1860          #endif /* ECP_MONTGOMERY */
   1861          
   1862          /*
   1863           * Check that a point is valid as a public key
   1864           */

   \                                 In section .text, align 2, keep-with-next
   1865          int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
   1866          {
   \                     mbedtls_ecp_check_pubkey: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1867              /* Must use affine coordinates */
   1868              if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x0028             MOVS     R0,R5
   \   0000000A   0x3018             ADDS     R0,R0,#+24
   \   0000000C   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD10D             BNE      ??mbedtls_ecp_check_pubkey_0
   1869                  return( MBEDTLS_ERR_ECP_INVALID_KEY );
   1870          
   1871          #if defined(ECP_MONTGOMERY)
   1872              if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
   \   00000014   0x6B20             LDR      R0,[R4, #+48]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD013             BEQ      ??mbedtls_ecp_check_pubkey_1
   \   0000001A   0x6BE0             LDR      R0,[R4, #+60]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD10B             BNE      ??mbedtls_ecp_check_pubkey_2
   1873                  return( ecp_check_pubkey_mx( grp, pt ) );
   \   00000020   0x0028             MOVS     R0,R5
   \   00000022   0x.... 0x....      BL       mbedtls_mpi_size
   \   00000026   0x6DE1             LDR      R1,[R4, #+92]
   \   00000028   0x1DC9             ADDS     R1,R1,#+7
   \   0000002A   0x08C9             LSRS     R1,R1,#+3
   \   0000002C   0x4281             CMP      R1,R0
   \   0000002E   0xD201             BCS      ??mbedtls_ecp_check_pubkey_3
   \                     ??mbedtls_ecp_check_pubkey_0: (+1)
   \   00000030   0x....             LDR      R0,??DataTable42  ;; 0xffffb380
   \   00000032   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??mbedtls_ecp_check_pubkey_3: (+1)
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xBD32             POP      {R1,R4,R5,PC}
   1874          #endif
   1875          #if defined(ECP_SHORTWEIERSTRASS)
   1876              if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   1877                  return( ecp_check_pubkey_sw( grp, pt ) );
   \                     ??mbedtls_ecp_check_pubkey_2: (+1)
   \   00000038   0x0029             MOVS     R1,R5
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x.... 0x....      BL       ecp_check_pubkey_sw
   \   00000040   0xBD32             POP      {R1,R4,R5,PC}
   1878          #endif
   1879              return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \                     ??mbedtls_ecp_check_pubkey_1: (+1)
   \   00000042   0x....             LDR      R0,??DataTable41  ;; 0xffffb080
   \   00000044   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1880          }
   1881          
   1882          /*
   1883           * Check that an mbedtls_mpi is valid as a private key
   1884           */

   \                                 In section .text, align 2, keep-with-next
   1885          int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp, const mbedtls_mpi *d )
   1886          {
   \                     mbedtls_ecp_check_privkey: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1887          #if defined(ECP_MONTGOMERY)
   1888              if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
   \   00000006   0x6B20             LDR      R0,[R4, #+48]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD02C             BEQ      ??mbedtls_ecp_check_privkey_0
   \   0000000C   0x6BE0             LDR      R0,[R4, #+60]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD11A             BNE      ??mbedtls_ecp_check_privkey_1
   1889              {
   1890                  /* see [Curve25519] page 5 */
   1891                  if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||
   1892                      mbedtls_mpi_get_bit( d, 1 ) != 0 ||
   1893                      mbedtls_mpi_get_bit( d, 2 ) != 0 ||
   1894                      mbedtls_mpi_bitlen( d ) - 1 != grp->nbits ) /* mbedtls_mpi_bitlen is one-based! */
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0x.... 0x....      BL       mbedtls_mpi_get_bit
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD121             BNE      ??mbedtls_ecp_check_privkey_2
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x0028             MOVS     R0,R5
   \   00000022   0x.... 0x....      BL       mbedtls_mpi_get_bit
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD11B             BNE      ??mbedtls_ecp_check_privkey_2
   \   0000002A   0x2102             MOVS     R1,#+2
   \   0000002C   0x0028             MOVS     R0,R5
   \   0000002E   0x.... 0x....      BL       mbedtls_mpi_get_bit
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD115             BNE      ??mbedtls_ecp_check_privkey_2
   \   00000036   0x0028             MOVS     R0,R5
   \   00000038   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   0000003C   0x1E40             SUBS     R0,R0,#+1
   \   0000003E   0x6DE1             LDR      R1,[R4, #+92]
   \   00000040   0x4288             CMP      R0,R1
   \   00000042   0xD10E             BNE      ??mbedtls_ecp_check_privkey_2
   1895                      return( MBEDTLS_ERR_ECP_INVALID_KEY );
   1896                  else
   1897                      return( 0 );
   1898              }
   1899          #endif /* ECP_MONTGOMERY */
   1900          #if defined(ECP_SHORTWEIERSTRASS)
   1901              if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   1902              {
   1903                  /* see SEC1 3.2 */
   1904                  if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   1905                      mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
   1906                      return( MBEDTLS_ERR_ECP_INVALID_KEY );
   1907                  else
   1908                      return( 0 );
   \                     ??mbedtls_ecp_check_privkey_3: (+1)
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??mbedtls_ecp_check_privkey_1: (+1)
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x0028             MOVS     R0,R5
   \   0000004C   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD406             BMI      ??mbedtls_ecp_check_privkey_2
   \   00000054   0x0021             MOVS     R1,R4
   \   00000056   0x314C             ADDS     R1,R1,#+76
   \   00000058   0x0028             MOVS     R0,R5
   \   0000005A   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD4F0             BMI      ??mbedtls_ecp_check_privkey_3
   \                     ??mbedtls_ecp_check_privkey_2: (+1)
   \   00000062   0x....             LDR      R0,??DataTable42  ;; 0xffffb380
   \   00000064   0xBD32             POP      {R1,R4,R5,PC}
   1909              }
   1910          #endif /* ECP_SHORTWEIERSTRASS */
   1911          
   1912              return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \                     ??mbedtls_ecp_check_privkey_0: (+1)
   \   00000066   0x....             LDR      R0,??DataTable44_1  ;; 0xffffb080
   \   00000068   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1913          }
   1914          
   1915          /*
   1916           * Generate a keypair with configurable base point
   1917           */

   \                                 In section .text, align 2, keep-with-next
   1918          int mbedtls_ecp_gen_keypair_base( mbedtls_ecp_group *grp,
   1919                               const mbedtls_ecp_point *G,
   1920                               mbedtls_mpi *d, mbedtls_ecp_point *Q,
   1921                               int (*f_rng)(void *, unsigned char *, size_t),
   1922                               void *p_rng )
   1923          {
   \                     mbedtls_ecp_gen_keypair_base: (+1)
   \   00000000   0xB5FA             PUSH     {R1,R3-R7,LR}
   \   00000002   0xB093             SUB      SP,SP,#+76
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x0015             MOVS     R5,R2
   1924              int ret;
   1925              size_t n_size = ( grp->nbits + 7 ) / 8;
   \   00000008   0x6DF0             LDR      R0,[R6, #+92]
   \   0000000A   0x1DC0             ADDS     R0,R0,#+7
   \   0000000C   0x08C0             LSRS     R0,R0,#+3
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   1926          
   1927          #if defined(ECP_MONTGOMERY)
   1928              if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
   \   00000010   0x6B30             LDR      R0,[R6, #+48]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD070             BEQ      ??mbedtls_ecp_gen_keypair_base_0
   \   00000016   0x9F1A             LDR      R7,[SP, #+104]
   \   00000018   0x6BF0             LDR      R0,[R6, #+60]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD136             BNE      ??mbedtls_ecp_gen_keypair_base_1
   1929              {
   1930                  /* [M225] page 5 */
   1931                  size_t b;
   1932          
   1933                  do {
   1934                      MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( d, n_size, f_rng, p_rng ) );
   \                     ??mbedtls_ecp_gen_keypair_base_2: (+1)
   \   0000001E   0x9B1B             LDR      R3,[SP, #+108]
   \   00000020   0x003A             MOVS     R2,R7
   \   00000022   0x9900             LDR      R1,[SP, #+0]
   \   00000024   0x0028             MOVS     R0,R5
   \   00000026   0x.... 0x....      BL       mbedtls_mpi_fill_random
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD111             BNE      ??mbedtls_ecp_gen_keypair_base_3
   1935                  } while( mbedtls_mpi_bitlen( d ) == 0);
   \   0000002E   0x0028             MOVS     R0,R5
   \   00000030   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD0F2             BEQ      ??mbedtls_ecp_gen_keypair_base_2
   1936          
   1937                  /* Make sure the most significant bit is nbits */
   1938                  b = mbedtls_mpi_bitlen( d ) - 1; /* mbedtls_mpi_bitlen is one-based */
   \   00000038   0x0028             MOVS     R0,R5
   \   0000003A   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   0000003E   0x1E40             SUBS     R0,R0,#+1
   1939                  if( b > grp->nbits )
   \   00000040   0x6DF1             LDR      R1,[R6, #+92]
   \   00000042   0x4281             CMP      R1,R0
   \   00000044   0xD208             BCS      ??mbedtls_ecp_gen_keypair_base_4
   1940                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, b - grp->nbits ) );
   \   00000046   0x1A41             SUBS     R1,R0,R1
   \   00000048   0x0028             MOVS     R0,R5
   \   0000004A   0x.... 0x....      BL       mbedtls_mpi_shift_r
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD008             BEQ      ??mbedtls_ecp_gen_keypair_base_5
   1941                  else
   1942                      MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, grp->nbits, 1 ) );
   1943          
   1944                  /* Make sure the last three bits are unset */
   1945                  MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 0, 0 ) );
   1946                  MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 1, 0 ) );
   1947                  MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 2, 0 ) );
   1948              }
   1949              else
   1950          #endif /* ECP_MONTGOMERY */
   1951          #if defined(ECP_SHORTWEIERSTRASS)
   1952              if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
   1953              {
   1954                  /* SEC1 3.2.1: Generate d such that 1 <= n < N */
   1955                  int count = 0;
   1956                  unsigned char rnd[MBEDTLS_ECP_MAX_BYTES];
   1957          
   1958                  /*
   1959                   * Match the procedure given in RFC 6979 (deterministic ECDSA):
   1960                   * - use the same byte ordering;
   1961                   * - keep the leftmost nbits bits of the generated octet string;
   1962                   * - try until result is in the desired range.
   1963                   * This also avoids any biais, which is especially important for ECDSA.
   1964                   */
   1965                  do
   1966                  {
   1967                      MBEDTLS_MPI_CHK( f_rng( p_rng, rnd, n_size ) );
   1968                      MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( d, rnd, n_size ) );
   1969                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
   1970          
   1971                      /*
   1972                       * Each try has at worst a probability 1/2 of failing (the msb has
   1973                       * a probability 1/2 of being 0, and then the result will be < N),
   1974                       * so after 30 tries failure probability is a most 2**(-30).
   1975                       *
   1976                       * For most curves, 1 try is enough with overwhelming probability,
   1977                       * since N starts with a lot of 1s in binary, but some curves
   1978                       * such as secp224k1 are actually very close to the worst case.
   1979                       */
   1980                      if( ++count > 30 )
   1981                          return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
   1982                  }
   1983                  while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
   1984                         mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
   1985              }
   1986              else
   1987          #endif /* ECP_SHORTWEIERSTRASS */
   1988                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   1989          
   1990          cleanup:
   1991              if( ret != 0 )
   \                     ??mbedtls_ecp_gen_keypair_base_3: (+1)
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD045             BEQ      ??mbedtls_ecp_gen_keypair_base_6
   1992                  return( ret );
   \   00000056   0xE04D             B        ??mbedtls_ecp_gen_keypair_base_7
   \                     ??mbedtls_ecp_gen_keypair_base_4: (+1)
   \   00000058   0x2201             MOVS     R2,#+1
   \   0000005A   0x0028             MOVS     R0,R5
   \   0000005C   0x.... 0x....      BL       mbedtls_mpi_set_bit
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD1F6             BNE      ??mbedtls_ecp_gen_keypair_base_3
   \                     ??mbedtls_ecp_gen_keypair_base_5: (+1)
   \   00000064   0x2200             MOVS     R2,#+0
   \   00000066   0x2100             MOVS     R1,#+0
   \   00000068   0x0028             MOVS     R0,R5
   \   0000006A   0x.... 0x....      BL       mbedtls_mpi_set_bit
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD1EF             BNE      ??mbedtls_ecp_gen_keypair_base_3
   \   00000072   0x2200             MOVS     R2,#+0
   \   00000074   0x2101             MOVS     R1,#+1
   \   00000076   0x0028             MOVS     R0,R5
   \   00000078   0x.... 0x....      BL       mbedtls_mpi_set_bit
   \   0000007C   0x2800             CMP      R0,#+0
   \   0000007E   0xD1E8             BNE      ??mbedtls_ecp_gen_keypair_base_3
   \   00000080   0x2200             MOVS     R2,#+0
   \   00000082   0x2102             MOVS     R1,#+2
   \   00000084   0x0028             MOVS     R0,R5
   \   00000086   0x.... 0x....      BL       mbedtls_mpi_set_bit
   \   0000008A   0xE7E2             B        ??mbedtls_ecp_gen_keypair_base_3
   \                     ??mbedtls_ecp_gen_keypair_base_1: (+1)
   \   0000008C   0x2400             MOVS     R4,#+0
   \   0000008E   0x9800             LDR      R0,[SP, #+0]
   \   00000090   0x00C0             LSLS     R0,R0,#+3
   \   00000092   0x9001             STR      R0,[SP, #+4]
   \                     ??mbedtls_ecp_gen_keypair_base_8: (+1)
   \   00000094   0x9A00             LDR      R2,[SP, #+0]
   \   00000096   0xA902             ADD      R1,SP,#+8
   \   00000098   0x981B             LDR      R0,[SP, #+108]
   \   0000009A   0x47B8             BLX      R7
   \   0000009C   0x2800             CMP      R0,#+0
   \   0000009E   0xD1D8             BNE      ??mbedtls_ecp_gen_keypair_base_3
   \   000000A0   0x9A00             LDR      R2,[SP, #+0]
   \   000000A2   0xA902             ADD      R1,SP,#+8
   \   000000A4   0x0028             MOVS     R0,R5
   \   000000A6   0x.... 0x....      BL       mbedtls_mpi_read_binary
   \   000000AA   0x2800             CMP      R0,#+0
   \   000000AC   0xD1D1             BNE      ??mbedtls_ecp_gen_keypair_base_3
   \   000000AE   0x9801             LDR      R0,[SP, #+4]
   \   000000B0   0x6DF1             LDR      R1,[R6, #+92]
   \   000000B2   0x1A41             SUBS     R1,R0,R1
   \   000000B4   0x0028             MOVS     R0,R5
   \   000000B6   0x.... 0x....      BL       mbedtls_mpi_shift_r
   \   000000BA   0x2800             CMP      R0,#+0
   \   000000BC   0xD1C9             BNE      ??mbedtls_ecp_gen_keypair_base_3
   \   000000BE   0x1C64             ADDS     R4,R4,#+1
   \   000000C0   0x2C1F             CMP      R4,#+31
   \   000000C2   0xDB01             BLT      ??mbedtls_ecp_gen_keypair_base_9
   \   000000C4   0x....             LDR      R0,??DataTable44_2  ;; 0xffffb300
   \   000000C6   0xE015             B        ??mbedtls_ecp_gen_keypair_base_7
   \                     ??mbedtls_ecp_gen_keypair_base_9: (+1)
   \   000000C8   0x2101             MOVS     R1,#+1
   \   000000CA   0x0028             MOVS     R0,R5
   \   000000CC   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   000000D0   0x2800             CMP      R0,#+0
   \   000000D2   0xD4DF             BMI      ??mbedtls_ecp_gen_keypair_base_8
   \   000000D4   0x0031             MOVS     R1,R6
   \   000000D6   0x314C             ADDS     R1,R1,#+76
   \   000000D8   0x0028             MOVS     R0,R5
   \   000000DA   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   000000DE   0x2800             CMP      R0,#+0
   \   000000E0   0xD5D8             BPL      ??mbedtls_ecp_gen_keypair_base_8
   1993          
   1994              return( mbedtls_ecp_mul( grp, Q, d, G, f_rng, p_rng ) );
   \                     ??mbedtls_ecp_gen_keypair_base_6: (+1)
   \   000000E2   0x981B             LDR      R0,[SP, #+108]
   \   000000E4   0x9001             STR      R0,[SP, #+4]
   \   000000E6   0x9700             STR      R7,[SP, #+0]
   \   000000E8   0x9B13             LDR      R3,[SP, #+76]
   \   000000EA   0x002A             MOVS     R2,R5
   \   000000EC   0x9914             LDR      R1,[SP, #+80]
   \   000000EE   0x0030             MOVS     R0,R6
   \   000000F0   0x.... 0x....      BL       mbedtls_ecp_mul
   \                     ??mbedtls_ecp_gen_keypair_base_7: (+1)
   \   000000F4   0xB015             ADD      SP,SP,#+84
   \   000000F6   0xBDF0             POP      {R4-R7,PC}       ;; return
   \                     ??mbedtls_ecp_gen_keypair_base_0: (+1)
   \   000000F8   0x....             LDR      R0,??DataTable44_1  ;; 0xffffb080
   \   000000FA   0xE7FB             B        ??mbedtls_ecp_gen_keypair_base_7
   1995          }
   1996          
   1997          /*
   1998           * Generate key pair, wrapper for conventional base point
   1999           */

   \                                 In section .text, align 2, keep-with-next
   2000          int mbedtls_ecp_gen_keypair( mbedtls_ecp_group *grp,
   2001                                       mbedtls_mpi *d, mbedtls_ecp_point *Q,
   2002                                       int (*f_rng)(void *, unsigned char *, size_t),
   2003                                       void *p_rng )
   2004          {
   \                     mbedtls_ecp_gen_keypair: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   2005              return( mbedtls_ecp_gen_keypair_base( grp, &grp->G, d, Q, f_rng, p_rng ) );
   \   00000002   0x9C04             LDR      R4,[SP, #+16]
   \   00000004   0x9401             STR      R4,[SP, #+4]
   \   00000006   0x9300             STR      R3,[SP, #+0]
   \   00000008   0x0013             MOVS     R3,R2
   \   0000000A   0x000A             MOVS     R2,R1
   \   0000000C   0x0001             MOVS     R1,R0
   \   0000000E   0x3128             ADDS     R1,R1,#+40
   \   00000010   0x.... 0x....      BL       mbedtls_ecp_gen_keypair_base
   \   00000014   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   2006          }
   2007          
   2008          /*
   2009           * Generate a keypair, prettier wrapper
   2010           */

   \                                 In section .text, align 2, keep-with-next
   2011          int mbedtls_ecp_gen_key( mbedtls_ecp_group_id grp_id, mbedtls_ecp_keypair *key,
   2012                          int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
   2013          {
   \                     mbedtls_ecp_gen_key: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0016             MOVS     R6,R2
   \   00000006   0x001D             MOVS     R5,R3
   2014              int ret;
   2015          
   2016              if( ( ret = mbedtls_ecp_group_load( &key->grp, grp_id ) ) != 0 )
   \   00000008   0x0001             MOVS     R1,R0
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       mbedtls_ecp_group_load
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD10A             BNE      ??mbedtls_ecp_gen_key_0
   2017                  return( ret );
   2018          
   2019              return( mbedtls_ecp_gen_keypair( &key->grp, &key->d, &key->Q, f_rng, p_rng ) );
   \   00000014   0x9501             STR      R5,[SP, #+4]
   \   00000016   0x9600             STR      R6,[SP, #+0]
   \   00000018   0x0023             MOVS     R3,R4
   \   0000001A   0x3388             ADDS     R3,R3,#+136
   \   0000001C   0x0022             MOVS     R2,R4
   \   0000001E   0x327C             ADDS     R2,R2,#+124
   \   00000020   0x0021             MOVS     R1,R4
   \   00000022   0x3128             ADDS     R1,R1,#+40
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       mbedtls_ecp_gen_keypair_base
   \                     ??mbedtls_ecp_gen_key_0: (+1)
   \   0000002A   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   2020          }
   2021          
   2022          /*
   2023           * Check a public-private key pair
   2024           */

   \                                 In section .text, align 2, keep-with-next
   2025          int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
   2026          {
   \                     mbedtls_ecp_check_pub_priv: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB0AB             SUB      SP,SP,#+172
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000C             MOVS     R4,R1
   2027              int ret;
   2028              mbedtls_ecp_point Q;
   2029              mbedtls_ecp_group grp;
   2030          
   2031              if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
   2032                  pub->grp.id != prv->grp.id ||
   2033                  mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
   2034                  mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
   2035                  mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
   \   00000008   0x7828             LDRB     R0,[R5, #+0]
   \   0000000A   0x0001             MOVS     R1,R0
   \   0000000C   0xD01B             BEQ      ??mbedtls_ecp_check_pub_priv_0
   \   0000000E   0x7821             LDRB     R1,[R4, #+0]
   \   00000010   0x4288             CMP      R0,R1
   \   00000012   0xD118             BNE      ??mbedtls_ecp_check_pub_priv_0
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0x3188             ADDS     R1,R1,#+136
   \   00000018   0x0028             MOVS     R0,R5
   \   0000001A   0x3088             ADDS     R0,R0,#+136
   \   0000001C   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD110             BNE      ??mbedtls_ecp_check_pub_priv_0
   \   00000024   0x0021             MOVS     R1,R4
   \   00000026   0x3194             ADDS     R1,R1,#+148
   \   00000028   0x0028             MOVS     R0,R5
   \   0000002A   0x3094             ADDS     R0,R0,#+148
   \   0000002C   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD108             BNE      ??mbedtls_ecp_check_pub_priv_0
   \   00000034   0x0027             MOVS     R7,R4
   \   00000036   0x37A0             ADDS     R7,R7,#+160
   \   00000038   0x0039             MOVS     R1,R7
   \   0000003A   0x0028             MOVS     R0,R5
   \   0000003C   0x30A0             ADDS     R0,R0,#+160
   \   0000003E   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD001             BEQ      ??mbedtls_ecp_check_pub_priv_1
   2036              {
   2037                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \                     ??mbedtls_ecp_check_pub_priv_0: (+1)
   \   00000046   0x....             LDR      R0,??DataTable44_1  ;; 0xffffb080
   \   00000048   0xE046             B        ??mbedtls_ecp_check_pub_priv_2
   2038              }
   2039          
   2040              mbedtls_ecp_point_init( &Q );
   \                     ??mbedtls_ecp_check_pub_priv_1: (+1)
   \   0000004A   0xA802             ADD      R0,SP,#+8
   \   0000004C   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000050   0xAD02             ADD      R5,SP,#+8
   \   00000052   0x0028             MOVS     R0,R5
   \   00000054   0x300C             ADDS     R0,R0,#+12
   \   00000056   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000005A   0x0028             MOVS     R0,R5
   \   0000005C   0x3018             ADDS     R0,R0,#+24
   \   0000005E   0x.... 0x....      BL       mbedtls_mpi_init
   2041              mbedtls_ecp_group_init( &grp );
   \   00000062   0x217C             MOVS     R1,#+124
   \   00000064   0xA80B             ADD      R0,SP,#+44
   \   00000066   0x.... 0x....      BL       __aeabi_memclr4
   2042          
   2043              /* mbedtls_ecp_mul() needs a non-const group... */
   2044              mbedtls_ecp_group_copy( &grp, &prv->grp );
   \   0000006A   0x7821             LDRB     R1,[R4, #+0]
   \   0000006C   0xA80B             ADD      R0,SP,#+44
   \   0000006E   0x.... 0x....      BL       mbedtls_ecp_group_load
   2045          
   2046              /* Also checks d is valid */
   2047              MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x9001             STR      R0,[SP, #+4]
   \   00000076   0x9000             STR      R0,[SP, #+0]
   \   00000078   0x0023             MOVS     R3,R4
   \   0000007A   0x3328             ADDS     R3,R3,#+40
   \   0000007C   0x0022             MOVS     R2,R4
   \   0000007E   0x327C             ADDS     R2,R2,#+124
   \   00000080   0xA902             ADD      R1,SP,#+8
   \   00000082   0xA80B             ADD      R0,SP,#+44
   \   00000084   0x.... 0x....      BL       mbedtls_ecp_mul
   \   00000088   0x0006             MOVS     R6,R0
   \   0000008A   0xD116             BNE      ??mbedtls_ecp_check_pub_priv_3
   2048          
   2049              if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
   2050                  mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
   2051                  mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
   \   0000008C   0x0021             MOVS     R1,R4
   \   0000008E   0x3188             ADDS     R1,R1,#+136
   \   00000090   0xA802             ADD      R0,SP,#+8
   \   00000092   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD10E             BNE      ??mbedtls_ecp_check_pub_priv_4
   \   0000009A   0x0021             MOVS     R1,R4
   \   0000009C   0x3194             ADDS     R1,R1,#+148
   \   0000009E   0x0028             MOVS     R0,R5
   \   000000A0   0x300C             ADDS     R0,R0,#+12
   \   000000A2   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD106             BNE      ??mbedtls_ecp_check_pub_priv_4
   \   000000AA   0x0039             MOVS     R1,R7
   \   000000AC   0x0028             MOVS     R0,R5
   \   000000AE   0x3018             ADDS     R0,R0,#+24
   \   000000B0   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   000000B4   0x2800             CMP      R0,#+0
   \   000000B6   0xD000             BEQ      ??mbedtls_ecp_check_pub_priv_3
   2052              {
   2053                  ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   \                     ??mbedtls_ecp_check_pub_priv_4: (+1)
   \   000000B8   0x....             LDR      R6,??DataTable44_1  ;; 0xffffb080
   2054                  goto cleanup;
   2055              }
   2056          
   2057          cleanup:
   2058              mbedtls_ecp_point_free( &Q );
   \                     ??mbedtls_ecp_check_pub_priv_3: (+1)
   \   000000BA   0xA802             ADD      R0,SP,#+8
   \   000000BC   0x.... 0x....      BL       mbedtls_mpi_free
   \   000000C0   0x0028             MOVS     R0,R5
   \   000000C2   0x300C             ADDS     R0,R0,#+12
   \   000000C4   0x.... 0x....      BL       mbedtls_mpi_free
   \   000000C8   0x0028             MOVS     R0,R5
   \   000000CA   0x3018             ADDS     R0,R0,#+24
   \   000000CC   0x.... 0x....      BL       mbedtls_mpi_free
   2059              mbedtls_ecp_group_free( &grp );
   \   000000D0   0xA80B             ADD      R0,SP,#+44
   \   000000D2   0x.... 0x....      BL       mbedtls_ecp_group_free
   2060          
   2061              return( ret );
   \   000000D6   0x0030             MOVS     R0,R6
   \                     ??mbedtls_ecp_check_pub_priv_2: (+1)
   \   000000D8   0xB02B             ADD      SP,SP,#+172
   \   000000DA   0xBDF0             POP      {R4-R7,PC}       ;; return
   2062          }
   2063          
   2064          #if defined(MBEDTLS_SELF_TEST)
   2065          
   2066          /*
   2067           * Checkup routine
   2068           */

   \                                 In section .text, align 4, keep-with-next
   2069          int mbedtls_ecp_self_test( int verbose )
   2070          {
   \                     mbedtls_ecp_self_test: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB0C0             SUB      SP,SP,#+256
   2071              int ret;
   2072              size_t i;
   2073              mbedtls_ecp_group grp;
   2074              mbedtls_ecp_point R, P;
   2075              mbedtls_mpi m;
   2076              unsigned long add_c_prev, dbl_c_prev, mul_c_prev;
   2077              /* exponents especially adapted for secp192r1 */
   2078              const char *exponents[] =
   2079              {
   2080                  "000000000000000000000000000000000000000000000001", /* one */
   2081                  "FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22830", /* N - 1 */
   2082                  "5EA6F389A38B8BC81E767753B15AA5569E1782E30ABE7D25", /* random */
   2083                  "400000000000000000000000000000000000000000000000", /* one and zeros */
   2084                  "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", /* all ones */
   2085                  "555555555555555555555555555555555555555555555555", /* 101010... */
   2086              };
   \   00000004   0xA81A             ADD      R0,SP,#+104
   \   00000006   0x....             LDR      R1,??DataTable45
   \   00000008   0x2218             MOVS     R2,#+24
   \   0000000A   0x.... 0x....      BL       __aeabi_memcpy4
   2087          
   2088              mbedtls_ecp_group_init( &grp );
   \   0000000E   0x217C             MOVS     R1,#+124
   \   00000010   0xA820             ADD      R0,SP,#+128
   \   00000012   0x.... 0x....      BL       __aeabi_memclr4
   2089              mbedtls_ecp_point_init( &R );
   \   00000016   0xA811             ADD      R0,SP,#+68
   \   00000018   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000001C   0xA811             ADD      R0,SP,#+68
   \   0000001E   0x300C             ADDS     R0,R0,#+12
   \   00000020   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000024   0xA811             ADD      R0,SP,#+68
   \   00000026   0x3018             ADDS     R0,R0,#+24
   \   00000028   0x.... 0x....      BL       mbedtls_mpi_init
   2090              mbedtls_ecp_point_init( &P );
   \   0000002C   0xA808             ADD      R0,SP,#+32
   \   0000002E   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000032   0xA808             ADD      R0,SP,#+32
   \   00000034   0x300C             ADDS     R0,R0,#+12
   \   00000036   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000003A   0xA808             ADD      R0,SP,#+32
   \   0000003C   0x3018             ADDS     R0,R0,#+24
   \   0000003E   0x.... 0x....      BL       mbedtls_mpi_init
   2091              mbedtls_mpi_init( &m );
   \   00000042   0xA805             ADD      R0,SP,#+20
   \   00000044   0x.... 0x....      BL       mbedtls_mpi_init
   2092          
   2093              /* Use secp192r1 if available, or any available curve */
   2094          #if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)
   2095              MBEDTLS_MPI_CHK( mbedtls_ecp_group_load( &grp, MBEDTLS_ECP_DP_SECP192R1 ) );
   2096          #else
   2097              MBEDTLS_MPI_CHK( mbedtls_ecp_group_load( &grp, mbedtls_ecp_curve_list()->grp_id ) );
   \   00000048   0x2104             MOVS     R1,#+4
   \   0000004A   0xA820             ADD      R0,SP,#+128
   \   0000004C   0x.... 0x....      BL       mbedtls_ecp_group_load
   \   00000050   0x0006             MOVS     R6,R0
   \   00000052   0xD000             BEQ      .+4
   \   00000054   0xE0C8             B        ??mbedtls_ecp_self_test_0
   2098          #endif
   2099          
   2100              if( verbose != 0 )
   \   00000056   0x9840             LDR      R0,[SP, #+256]
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD002             BEQ      ??mbedtls_ecp_self_test_1
   2101                  mbedtls_printf( "  ECP test #1 (constant op_count, base point G): " );
   \   0000005C   0x....             LDR      R0,??DataTable45_1
   \   0000005E   0x.... 0x....      BL       printf
   2102          
   2103              /* Do a dummy multiplication first to trigger precomputation */
   2104              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &m, 2 ) );
   \                     ??mbedtls_ecp_self_test_1: (+1)
   \   00000062   0x2102             MOVS     R1,#+2
   \   00000064   0xA805             ADD      R0,SP,#+20
   \   00000066   0x.... 0x....      BL       mbedtls_mpi_lset
   \   0000006A   0x0006             MOVS     R6,R0
   \   0000006C   0xD000             BEQ      .+4
   \   0000006E   0xE0BB             B        ??mbedtls_ecp_self_test_0
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x9001             STR      R0,[SP, #+4]
   \   00000074   0x9000             STR      R0,[SP, #+0]
   \   00000076   0xA820             ADD      R0,SP,#+128
   \   00000078   0x0003             MOVS     R3,R0
   \   0000007A   0x3328             ADDS     R3,R3,#+40
   \   0000007C   0xAA05             ADD      R2,SP,#+20
   \   0000007E   0xA908             ADD      R1,SP,#+32
   2105              MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &P, &m, &grp.G, NULL, NULL ) );
   \   00000080   0x.... 0x....      BL       mbedtls_ecp_mul
   \   00000084   0x0006             MOVS     R6,R0
   \   00000086   0xD000             BEQ      .+4
   \   00000088   0xE0AE             B        ??mbedtls_ecp_self_test_0
   2106          
   2107              add_count = 0;
   \   0000008A   0x....             LDR      R5,??DataTable45_2
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x6028             STR      R0,[R5, #+0]
   2108              dbl_count = 0;
   \   00000090   0x6068             STR      R0,[R5, #+4]
   2109              mul_count = 0;
   \   00000092   0x60A8             STR      R0,[R5, #+8]
   2110              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[0] ) );
   \   00000094   0x9A1A             LDR      R2,[SP, #+104]
   \   00000096   0x2110             MOVS     R1,#+16
   \   00000098   0xA805             ADD      R0,SP,#+20
   \   0000009A   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   0000009E   0x0006             MOVS     R6,R0
   \   000000A0   0xD000             BEQ      .+4
   \   000000A2   0xE0A1             B        ??mbedtls_ecp_self_test_0
   2111              MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &grp.G, NULL, NULL ) );
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0x9001             STR      R0,[SP, #+4]
   \   000000A8   0x9000             STR      R0,[SP, #+0]
   \   000000AA   0xA820             ADD      R0,SP,#+128
   \   000000AC   0x0003             MOVS     R3,R0
   \   000000AE   0x3328             ADDS     R3,R3,#+40
   \   000000B0   0xAA05             ADD      R2,SP,#+20
   \   000000B2   0xA911             ADD      R1,SP,#+68
   \   000000B4   0x.... 0x....      BL       mbedtls_ecp_mul
   \   000000B8   0x0006             MOVS     R6,R0
   \   000000BA   0xD000             BEQ      .+4
   \   000000BC   0xE094             B        ??mbedtls_ecp_self_test_0
   \   000000BE   0x2401             MOVS     R4,#+1
   \   000000C0   0xA81A             ADD      R0,SP,#+104
   \   000000C2   0x1D00             ADDS     R0,R0,#+4
   \   000000C4   0x9002             STR      R0,[SP, #+8]
   2112          
   2113              for( i = 1; i < sizeof( exponents ) / sizeof( exponents[0] ); i++ )
   2114              {
   2115                  add_c_prev = add_count;
   \                     ??mbedtls_ecp_self_test_2: (+1)
   \   000000C6   0x682F             LDR      R7,[R5, #+0]
   2116                  dbl_c_prev = dbl_count;
   \   000000C8   0x6868             LDR      R0,[R5, #+4]
   \   000000CA   0x9004             STR      R0,[SP, #+16]
   2117                  mul_c_prev = mul_count;
   \   000000CC   0x68A8             LDR      R0,[R5, #+8]
   \   000000CE   0x9003             STR      R0,[SP, #+12]
   2118                  add_count = 0;
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0x6028             STR      R0,[R5, #+0]
   2119                  dbl_count = 0;
   \   000000D4   0x6068             STR      R0,[R5, #+4]
   2120                  mul_count = 0;
   \   000000D6   0x60A8             STR      R0,[R5, #+8]
   2121          
   2122                  MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[i] ) );
   \   000000D8   0x9802             LDR      R0,[SP, #+8]
   \   000000DA   0x6802             LDR      R2,[R0, #+0]
   \   000000DC   0x2110             MOVS     R1,#+16
   \   000000DE   0xA805             ADD      R0,SP,#+20
   \   000000E0   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   000000E4   0x0006             MOVS     R6,R0
   \   000000E6   0xD000             BEQ      .+4
   \   000000E8   0xE07E             B        ??mbedtls_ecp_self_test_0
   2123                  MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &grp.G, NULL, NULL ) );
   \   000000EA   0x2000             MOVS     R0,#+0
   \   000000EC   0x9001             STR      R0,[SP, #+4]
   \   000000EE   0x9000             STR      R0,[SP, #+0]
   \   000000F0   0xA820             ADD      R0,SP,#+128
   \   000000F2   0x0003             MOVS     R3,R0
   \   000000F4   0x3328             ADDS     R3,R3,#+40
   \   000000F6   0xAA05             ADD      R2,SP,#+20
   \   000000F8   0xA911             ADD      R1,SP,#+68
   \   000000FA   0x.... 0x....      BL       mbedtls_ecp_mul
   \   000000FE   0x0006             MOVS     R6,R0
   \   00000100   0xD172             BNE      ??mbedtls_ecp_self_test_0
   2124          
   2125                  if( add_count != add_c_prev ||
   2126                      dbl_count != dbl_c_prev ||
   2127                      mul_count != mul_c_prev )
   \   00000102   0x6828             LDR      R0,[R5, #+0]
   \   00000104   0x42B8             CMP      R0,R7
   \   00000106   0xD159             BNE      ??mbedtls_ecp_self_test_3
   \   00000108   0x6868             LDR      R0,[R5, #+4]
   \   0000010A   0x9904             LDR      R1,[SP, #+16]
   \   0000010C   0x4288             CMP      R0,R1
   \   0000010E   0xD155             BNE      ??mbedtls_ecp_self_test_3
   \   00000110   0x68A8             LDR      R0,[R5, #+8]
   \   00000112   0x9903             LDR      R1,[SP, #+12]
   \   00000114   0x4288             CMP      R0,R1
   \   00000116   0xD151             BNE      ??mbedtls_ecp_self_test_3
   2128                  {
   2129                      if( verbose != 0 )
   2130                          mbedtls_printf( "failed (%u)\n", (unsigned int) i );
   2131          
   2132                      ret = 1;
   2133                      goto cleanup;
   2134                  }
   2135              }
   \   00000118   0x1C64             ADDS     R4,R4,#+1
   \   0000011A   0x9802             LDR      R0,[SP, #+8]
   \   0000011C   0x1D00             ADDS     R0,R0,#+4
   \   0000011E   0x9002             STR      R0,[SP, #+8]
   \   00000120   0x2C06             CMP      R4,#+6
   \   00000122   0xD3D0             BCC      ??mbedtls_ecp_self_test_2
   2136          
   2137              if( verbose != 0 )
   \   00000124   0x9840             LDR      R0,[SP, #+256]
   \   00000126   0x2800             CMP      R0,#+0
   \   00000128   0xD007             BEQ      ??mbedtls_ecp_self_test_4
   2138                  mbedtls_printf( "passed\n" );
   \   0000012A   0xBF00             Nop      
   \   0000012C   0x....             ADR.N    R0,?_10
   \   0000012E   0x.... 0x....      BL       printf
   2139          
   2140              if( verbose != 0 )
   2141                  mbedtls_printf( "  ECP test #2 (constant op_count, other point): " );
   \   00000132   0xBF00             Nop      
   \   00000134   0x....             ADR.N    R0,?_11
   \   00000136   0x.... 0x....      BL       printf
   2142              /* We computed P = 2G last time, use it */
   2143          
   2144              add_count = 0;
   \                     ??mbedtls_ecp_self_test_4: (+1)
   \   0000013A   0x2000             MOVS     R0,#+0
   \   0000013C   0x6028             STR      R0,[R5, #+0]
   2145              dbl_count = 0;
   \   0000013E   0x6068             STR      R0,[R5, #+4]
   2146              mul_count = 0;
   \   00000140   0x60A8             STR      R0,[R5, #+8]
   2147              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[0] ) );
   \   00000142   0x9A1A             LDR      R2,[SP, #+104]
   \   00000144   0x2110             MOVS     R1,#+16
   \   00000146   0xA805             ADD      R0,SP,#+20
   \   00000148   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   0000014C   0x0006             MOVS     R6,R0
   \   0000014E   0xD14B             BNE      ??mbedtls_ecp_self_test_0
   2148              MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &P, NULL, NULL ) );
   \   00000150   0x2000             MOVS     R0,#+0
   \   00000152   0x9001             STR      R0,[SP, #+4]
   \   00000154   0x9000             STR      R0,[SP, #+0]
   \   00000156   0xAB08             ADD      R3,SP,#+32
   \   00000158   0xAA05             ADD      R2,SP,#+20
   \   0000015A   0xA911             ADD      R1,SP,#+68
   \   0000015C   0xA820             ADD      R0,SP,#+128
   \   0000015E   0x.... 0x....      BL       mbedtls_ecp_mul
   \   00000162   0x0006             MOVS     R6,R0
   \   00000164   0xD140             BNE      ??mbedtls_ecp_self_test_0
   2149          
   2150              for( i = 1; i < sizeof( exponents ) / sizeof( exponents[0] ); i++ )
   \   00000166   0x2401             MOVS     R4,#+1
   \   00000168   0xA81A             ADD      R0,SP,#+104
   \   0000016A   0x1D00             ADDS     R0,R0,#+4
   \   0000016C   0x9002             STR      R0,[SP, #+8]
   2151              {
   2152                  add_c_prev = add_count;
   \                     ??mbedtls_ecp_self_test_5: (+1)
   \   0000016E   0x682F             LDR      R7,[R5, #+0]
   2153                  dbl_c_prev = dbl_count;
   \   00000170   0x6868             LDR      R0,[R5, #+4]
   \   00000172   0x9004             STR      R0,[SP, #+16]
   2154                  mul_c_prev = mul_count;
   \   00000174   0x68A8             LDR      R0,[R5, #+8]
   \   00000176   0x9003             STR      R0,[SP, #+12]
   2155                  add_count = 0;
   \   00000178   0x2000             MOVS     R0,#+0
   \   0000017A   0x6028             STR      R0,[R5, #+0]
   2156                  dbl_count = 0;
   \   0000017C   0x6068             STR      R0,[R5, #+4]
   2157                  mul_count = 0;
   \   0000017E   0x60A8             STR      R0,[R5, #+8]
   2158          
   2159                  MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &m, 16, exponents[i] ) );
   \   00000180   0x9802             LDR      R0,[SP, #+8]
   \   00000182   0x6802             LDR      R2,[R0, #+0]
   \   00000184   0x2110             MOVS     R1,#+16
   \   00000186   0xA805             ADD      R0,SP,#+20
   \   00000188   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   0000018C   0x0006             MOVS     R6,R0
   \   0000018E   0xD12B             BNE      ??mbedtls_ecp_self_test_0
   2160                  MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &R, &m, &P, NULL, NULL ) );
   \   00000190   0x2000             MOVS     R0,#+0
   \   00000192   0x9001             STR      R0,[SP, #+4]
   \   00000194   0x9000             STR      R0,[SP, #+0]
   \   00000196   0xAB08             ADD      R3,SP,#+32
   \   00000198   0xAA05             ADD      R2,SP,#+20
   \   0000019A   0xA911             ADD      R1,SP,#+68
   \   0000019C   0xA820             ADD      R0,SP,#+128
   \   0000019E   0x.... 0x....      BL       mbedtls_ecp_mul
   \   000001A2   0x0006             MOVS     R6,R0
   \   000001A4   0xD120             BNE      ??mbedtls_ecp_self_test_0
   2161          
   2162                  if( add_count != add_c_prev ||
   2163                      dbl_count != dbl_c_prev ||
   2164                      mul_count != mul_c_prev )
   \   000001A6   0x6828             LDR      R0,[R5, #+0]
   \   000001A8   0x42B8             CMP      R0,R7
   \   000001AA   0xD107             BNE      ??mbedtls_ecp_self_test_3
   \   000001AC   0x6868             LDR      R0,[R5, #+4]
   \   000001AE   0x9904             LDR      R1,[SP, #+16]
   \   000001B0   0x4288             CMP      R0,R1
   \   000001B2   0xD103             BNE      ??mbedtls_ecp_self_test_3
   \   000001B4   0x68A8             LDR      R0,[R5, #+8]
   \   000001B6   0x9903             LDR      R1,[SP, #+12]
   \   000001B8   0x4288             CMP      R0,R1
   \   000001BA   0xD008             BEQ      ??mbedtls_ecp_self_test_6
   2165                  {
   2166                      if( verbose != 0 )
   \                     ??mbedtls_ecp_self_test_3: (+1)
   \   000001BC   0x9840             LDR      R0,[SP, #+256]
   \   000001BE   0x2800             CMP      R0,#+0
   \   000001C0   0xD003             BEQ      ??mbedtls_ecp_self_test_7
   2167                          mbedtls_printf( "failed (%u)\n", (unsigned int) i );
   \   000001C2   0x0021             MOVS     R1,R4
   \   000001C4   0x....             ADR.N    R0,?_9
   \   000001C6   0x.... 0x....      BL       printf
   2168          
   2169                      ret = 1;
   \                     ??mbedtls_ecp_self_test_7: (+1)
   \   000001CA   0x2601             MOVS     R6,#+1
   2170                      goto cleanup;
   \   000001CC   0xE015             B        ??mbedtls_ecp_self_test_8
   2171                  }
   2172              }
   \                     ??mbedtls_ecp_self_test_6: (+1)
   \   000001CE   0x1C64             ADDS     R4,R4,#+1
   \   000001D0   0x9802             LDR      R0,[SP, #+8]
   \   000001D2   0x1D00             ADDS     R0,R0,#+4
   \   000001D4   0x9002             STR      R0,[SP, #+8]
   \   000001D6   0x2C06             CMP      R4,#+6
   \   000001D8   0xD3C9             BCC      ??mbedtls_ecp_self_test_5
   2173          
   2174              if( verbose != 0 )
   \   000001DA   0x9840             LDR      R0,[SP, #+256]
   \   000001DC   0x2800             CMP      R0,#+0
   \   000001DE   0xD00C             BEQ      ??mbedtls_ecp_self_test_8
   2175                  mbedtls_printf( "passed\n" );
   \   000001E0   0x....             ADR.N    R0,?_10
   \   000001E2   0x.... 0x....      BL       printf
   \   000001E6   0xE008             B        ??mbedtls_ecp_self_test_8
   2176          
   2177          cleanup:
   2178          
   2179              if( ret < 0 && verbose != 0 )
   \                     ??mbedtls_ecp_self_test_0: (+1)
   \   000001E8   0x2E00             CMP      R6,#+0
   \   000001EA   0xD506             BPL      ??mbedtls_ecp_self_test_8
   \   000001EC   0x9840             LDR      R0,[SP, #+256]
   \   000001EE   0x2800             CMP      R0,#+0
   \   000001F0   0xD003             BEQ      ??mbedtls_ecp_self_test_8
   2180                  mbedtls_printf( "Unexpected error, return code = %08X\n", ret );
   \   000001F2   0x0031             MOVS     R1,R6
   \   000001F4   0x....             ADR.N    R0,?_12
   \   000001F6   0x.... 0x....      BL       printf
   2181          
   2182              mbedtls_ecp_group_free( &grp );
   \                     ??mbedtls_ecp_self_test_8: (+1)
   \   000001FA   0xA820             ADD      R0,SP,#+128
   \   000001FC   0x.... 0x....      BL       mbedtls_ecp_group_free
   2183              mbedtls_ecp_point_free( &R );
   \   00000200   0xA811             ADD      R0,SP,#+68
   \   00000202   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000206   0xA811             ADD      R0,SP,#+68
   \   00000208   0x300C             ADDS     R0,R0,#+12
   \   0000020A   0x.... 0x....      BL       mbedtls_mpi_free
   \   0000020E   0xA811             ADD      R0,SP,#+68
   \   00000210   0x3018             ADDS     R0,R0,#+24
   \   00000212   0x.... 0x....      BL       mbedtls_mpi_free
   2184              mbedtls_ecp_point_free( &P );
   \   00000216   0xA808             ADD      R0,SP,#+32
   \   00000218   0x.... 0x....      BL       mbedtls_mpi_free
   \   0000021C   0xA808             ADD      R0,SP,#+32
   \   0000021E   0x300C             ADDS     R0,R0,#+12
   \   00000220   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000224   0xA808             ADD      R0,SP,#+32
   \   00000226   0x3018             ADDS     R0,R0,#+24
   \   00000228   0x.... 0x....      BL       mbedtls_mpi_free
   2185              mbedtls_mpi_free( &m );
   \   0000022C   0xA805             ADD      R0,SP,#+20
   \   0000022E   0x.... 0x....      BL       mbedtls_mpi_free
   2186          
   2187              if( verbose != 0 )
   \   00000232   0x9840             LDR      R0,[SP, #+256]
   \   00000234   0x2800             CMP      R0,#+0
   \   00000236   0xD002             BEQ      ??mbedtls_ecp_self_test_9
   2188                  mbedtls_printf( "\n" );
   \   00000238   0x....             ADR      R0,??DataTable45_3  ;; "\n"
   \   0000023A   0x.... 0x....      BL       printf
   2189          
   2190              return( ret );
   \                     ??mbedtls_ecp_self_test_9: (+1)
   \   0000023E   0x0030             MOVS     R0,R6
   \   00000240   0xB041             ADD      SP,SP,#+260
   \   00000242   0xBDF0             POP      {R4-R7,PC}       ;; return
   2191          }

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_14:
   \   00000000   0x........         DC32 ?_2, ?_3, ?_4, ?_5, ?_6, ?_7
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   0x........         DC32     ecp_supported_curves

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_1:
   \   00000000   0x........         DC32     ecp_supported_grp_id

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28:
   \   00000000   0xFFFFB080         DC32     0xffffb080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable28_1:
   \   00000000   0xFFFFB100         DC32     0xffffb100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   0xFFFFB180         DC32     0xffffb180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   0x........         DC32     add_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30_1:
   \   00000000   0xFFFFB280         DC32     0xffffb280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33:
   \   00000000   0xFFFFB300         DC32     0xffffb300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_1:
   \   00000000   0x........         DC32     add_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35:
   \   00000000   0xFFFFB080         DC32     0xffffb080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_1:
   \   00000000   0xFFFFB280         DC32     0xffffb280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_2:
   \   00000000   0xFFFFB300         DC32     0xffffb300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_3:
   \   00000000   0x........         DC32     add_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36:
   \   00000000   0x........         DC32     add_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40:
   \   00000000   0x........         DC32     add_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41:
   \   00000000   0xFFFFB080         DC32     0xffffb080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42:
   \   00000000   0xFFFFB380         DC32     0xffffb380

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44:
   \   00000000   0xFFFFB180         DC32     0xffffb180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_1:
   \   00000000   0xFFFFB080         DC32     0xffffb080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_2:
   \   00000000   0xFFFFB300         DC32     0xffffb300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45:
   \   00000000   0x........         DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_1:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_2:
   \   00000000   0x........         DC32     add_count

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_3:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x66 0x61          DC8 "failed (%u)\012"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x28    
   \              0x25 0x75    
   \              0x29 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x70 0x61          DC8 "passed\012"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_11:
   \   00000000   0x20 0x20          DC8 "  ECP test #2 (constant op_count, other point): "
   \              0x45 0x43    
   \              0x50 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x20 0x23    
   \              0x32 0x20    
   \              0x28 0x63    
   \              0x6F 0x6E    
   \              0x73 0x74    
   \              0x61 0x6E    
   \              0x74 0x20    
   \              0x6F 0x70    
   \              0x5F 0x63    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x2C 0x20    
   \              0x6F 0x74    
   \              0x68 0x65    
   \              0x72 0x20    
   \              0x70 0x6F    
   \              0x69 0x6E    
   \              0x74 0x29    
   \              0x3A 0x20    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_12:
   \   00000000   0x55 0x6E          DC8 "Unexpected error, return code = %08X\012"
   \              0x65 0x78    
   \              0x70 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x2C 0x20    
   \              0x72 0x65    
   \              0x74 0x75    
   \              0x72 0x6E    
   \              0x20 0x63    
   \              0x6F 0x64    
   \              0x65 0x20    
   \              0x3D 0x20    
   \              0x25 0x30    
   \              0x38 0x58    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x73 0x65          DC8 "secp384r1"
   \              0x63 0x70    
   \              0x33 0x38    
   \              0x34 0x72    
   \              0x31 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x73 0x65          DC8 "secp256r1"
   \              0x63 0x70    
   \              0x32 0x35    
   \              0x36 0x72    
   \              0x31 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x30 0x30          DC8 "000000000000000000000000000000000000000000000001"
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x31    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x46 0x46          DC8 "FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22830"
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x39 0x39    
   \              0x44 0x45    
   \              0x46 0x38    
   \              0x33 0x36    
   \              0x31 0x34    
   \              0x36 0x42    
   \              0x43 0x39    
   \              0x42 0x31    
   \              0x42 0x34    
   \              0x44 0x32    
   \              0x32 0x38    
   \              0x33 0x30    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x35 0x45          DC8 "5EA6F389A38B8BC81E767753B15AA5569E1782E30ABE7D25"
   \              0x41 0x36    
   \              0x46 0x33    
   \              0x38 0x39    
   \              0x41 0x33    
   \              0x38 0x42    
   \              0x38 0x42    
   \              0x43 0x38    
   \              0x31 0x45    
   \              0x37 0x36    
   \              0x37 0x37    
   \              0x35 0x33    
   \              0x42 0x31    
   \              0x35 0x41    
   \              0x41 0x35    
   \              0x35 0x36    
   \              0x39 0x45    
   \              0x31 0x37    
   \              0x38 0x32    
   \              0x45 0x33    
   \              0x30 0x41    
   \              0x42 0x45    
   \              0x37 0x44    
   \              0x32 0x35    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x34 0x30          DC8 "400000000000000000000000000000000000000000000000"
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x30 0x30    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x37 0x46          DC8 "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x46 0x46    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x35 0x35          DC8 "555555555555555555555555555555555555555555555555"
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x35 0x35    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x20 0x20          DC8 "  ECP test #1 (constant op_count, base point G): "
   \              0x45 0x43    
   \              0x50 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x20 0x23    
   \              0x31 0x20    
   \              0x28 0x63    
   \              0x6F 0x6E    
   \              0x73 0x74    
   \              0x61 0x6E    
   \              0x74 0x20    
   \              0x6F 0x70    
   \              0x5F 0x63    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x2C 0x20    
   \              0x62 0x61    
   \              0x73 0x65    
   \              0x20 0x70    
   \              0x6F 0x69    
   \              0x6E 0x74    
   \              0x20 0x47    
   \              0x29 0x3A    
   \              0x20 0x00    
   \   00000032   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_13:
   \   00000000   0x0A 0x00          DC8 "\012"
   2192          
   2193          #endif /* MBEDTLS_SELF_TEST */
   2194          
   2195          #endif /* !MBEDTLS_ECP_ALT */
   2196          
   2197          #endif /* MBEDTLS_ECP_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     112   ecp_add_mixed
       112   -> ecp_double_jac
       112   -> ecp_modp
       112   -> mbedtls_ecp_copy
       112   -> mbedtls_ecp_set_zero
       112   -> mbedtls_mpi_add_mpi
       112   -> mbedtls_mpi_cmp_int
       112   -> mbedtls_mpi_cmp_mpi
       112   -> mbedtls_mpi_copy
       112   -> mbedtls_mpi_free
       112   -> mbedtls_mpi_init
       112   -> mbedtls_mpi_mul_int
       112   -> mbedtls_mpi_mul_mpi
       112   -> mbedtls_mpi_sub_abs
       112   -> mbedtls_mpi_sub_mpi
      48   ecp_check_pubkey_sw
        48   -> ecp_modp
        48   -> mbedtls_mpi_add_mpi
        48   -> mbedtls_mpi_cmp_int
        48   -> mbedtls_mpi_cmp_mpi
        48   -> mbedtls_mpi_free
        48   -> mbedtls_mpi_init
        48   -> mbedtls_mpi_mul_mpi
        48   -> mbedtls_mpi_sub_abs
        48   -> mbedtls_mpi_sub_int
      40   ecp_comb_fixed
        40   -> __aeabi_memclr
        40   -> mbedtls_mpi_get_bit
     136   ecp_double_add_mxz
       136   -> ecp_modp
       136   -> mbedtls_mpi_add_mpi
       136   -> mbedtls_mpi_cmp_int
       136   -> mbedtls_mpi_cmp_mpi
       136   -> mbedtls_mpi_free
       136   -> mbedtls_mpi_init
       136   -> mbedtls_mpi_mul_mpi
       136   -> mbedtls_mpi_sub_abs
       136   -> mbedtls_mpi_sub_mpi
      72   ecp_double_jac
        72   -> ecp_modp
        72   -> mbedtls_mpi_add_mpi
        72   -> mbedtls_mpi_cmp_int
        72   -> mbedtls_mpi_cmp_mpi
        72   -> mbedtls_mpi_copy
        72   -> mbedtls_mpi_free
        72   -> mbedtls_mpi_init
        72   -> mbedtls_mpi_mul_int
        72   -> mbedtls_mpi_mul_mpi
        72   -> mbedtls_mpi_shift_l
        72   -> mbedtls_mpi_sub_abs
        72   -> mbedtls_mpi_sub_mpi
      16   ecp_modp
        16   -- Indirect call
        16   -> mbedtls_mpi_add_mpi
        16   -> mbedtls_mpi_bitlen
        16   -> mbedtls_mpi_cmp_int
        16   -> mbedtls_mpi_cmp_mpi
        16   -> mbedtls_mpi_mod_mpi
        16   -> mbedtls_mpi_sub_abs
     352   ecp_mul_comb
       352   -> calloc
       352   -> ecp_comb_fixed
       352   -> ecp_mul_comb_core
       352   -> ecp_normalize_jac
       352   -> ecp_precompute_comb
       352   -> ecp_safe_invert_jac
       352   -> free
       352   -> mbedtls_mpi_cmp_mpi
       352   -> mbedtls_mpi_copy
       352   -> mbedtls_mpi_free
       352   -> mbedtls_mpi_get_bit
       352   -> mbedtls_mpi_init
       352   -> mbedtls_mpi_safe_cond_assign
       352   -> mbedtls_mpi_sub_mpi
       352 __aeabi_uidiv
      72   ecp_mul_comb_core
        72   -> ecp_add_mixed
        72   -> ecp_double_jac
        72   -> ecp_randomize_jac
        72   -> ecp_select_comb
        72   -> mbedtls_mpi_free
        72   -> mbedtls_mpi_init
        72   -> mbedtls_mpi_lset
      88   ecp_mul_mxz
        88   -> ecp_double_add_mxz
        88   -> ecp_modp
        88   -> ecp_randomize_mxz
        88   -> mbedtls_ecp_copy
        88   -> mbedtls_mpi_bitlen
        88   -> mbedtls_mpi_cmp_mpi
        88   -> mbedtls_mpi_copy
        88   -> mbedtls_mpi_free
        88   -> mbedtls_mpi_get_bit
        88   -> mbedtls_mpi_init
        88   -> mbedtls_mpi_inv_mod
        88   -> mbedtls_mpi_lset
        88   -> mbedtls_mpi_mul_mpi
        88   -> mbedtls_mpi_safe_cond_swap
        88   -> mbedtls_mpi_sub_abs
      48   ecp_normalize_jac
        48   -> ecp_modp
        48   -> mbedtls_mpi_cmp_int
        48   -> mbedtls_mpi_free
        48   -> mbedtls_mpi_init
        48   -> mbedtls_mpi_inv_mod
        48   -> mbedtls_mpi_lset
        48   -> mbedtls_mpi_mul_mpi
      80   ecp_normalize_jac_many
        80   -> calloc
        80   -> ecp_modp
        80   -> ecp_normalize_jac
        80   -> free
        80   -> mbedtls_mpi_copy
        80   -> mbedtls_mpi_free
        80   -> mbedtls_mpi_init
        80   -> mbedtls_mpi_inv_mod
        80   -> mbedtls_mpi_mul_mpi
        80   -> mbedtls_mpi_shrink
     168   ecp_precompute_comb
       168   -> ecp_add_mixed
       168   -> ecp_double_jac
       168   -> ecp_normalize_jac_many
       168   -> mbedtls_ecp_copy
       168   -> mbedtls_mpi_copy
      56   ecp_randomize_jac
        56   -> ecp_modp
        56   -> mbedtls_mpi_cmp_int
        56   -> mbedtls_mpi_cmp_mpi
        56   -> mbedtls_mpi_fill_random
        56   -> mbedtls_mpi_free
        56   -> mbedtls_mpi_init
        56   -> mbedtls_mpi_mul_mpi
        56   -> mbedtls_mpi_shift_r
      48   ecp_randomize_mxz
        48   -> ecp_modp
        48   -> mbedtls_mpi_cmp_int
        48   -> mbedtls_mpi_cmp_mpi
        48   -> mbedtls_mpi_fill_random
        48   -> mbedtls_mpi_free
        48   -> mbedtls_mpi_init
        48   -> mbedtls_mpi_mul_mpi
        48   -> mbedtls_mpi_shift_r
      32   ecp_safe_invert_jac
        32   -> mbedtls_mpi_cmp_int
        32   -> mbedtls_mpi_free
        32   -> mbedtls_mpi_init
        32   -> mbedtls_mpi_safe_cond_assign
        32   -> mbedtls_mpi_sub_mpi
      40   ecp_select_comb
        40   -> ecp_safe_invert_jac
        40   -> mbedtls_mpi_safe_cond_assign
      16   mbedtls_ecp_check_privkey
        16   -> mbedtls_mpi_bitlen
        16   -> mbedtls_mpi_cmp_int
        16   -> mbedtls_mpi_cmp_mpi
        16   -> mbedtls_mpi_get_bit
     192   mbedtls_ecp_check_pub_priv
       192   -> __aeabi_memclr4
       192   -> mbedtls_ecp_group_free
       192   -> mbedtls_ecp_group_load
       192   -> mbedtls_ecp_mul
       192   -> mbedtls_mpi_cmp_mpi
       192   -> mbedtls_mpi_free
       192   -> mbedtls_mpi_init
      16   mbedtls_ecp_check_pubkey
        16   -> ecp_check_pubkey_sw
        16   -> mbedtls_mpi_cmp_int
        16   -> mbedtls_mpi_size
      16   mbedtls_ecp_copy
        16   -> mbedtls_mpi_copy
       0   mbedtls_ecp_curve_info_from_grp_id
      16   mbedtls_ecp_curve_info_from_name
        16   -> strcmp
       0   mbedtls_ecp_curve_info_from_tls_id
       0   mbedtls_ecp_curve_list
      24   mbedtls_ecp_gen_key
        24   -> mbedtls_ecp_gen_keypair_base
        24   -> mbedtls_ecp_group_load
      16   mbedtls_ecp_gen_keypair
        16   -> mbedtls_ecp_gen_keypair_base
     104   mbedtls_ecp_gen_keypair_base
       104   -- Indirect call
       104   -> mbedtls_ecp_mul
       104   -> mbedtls_mpi_bitlen
       104   -> mbedtls_mpi_cmp_int
       104   -> mbedtls_mpi_cmp_mpi
       104   -> mbedtls_mpi_fill_random
       104   -> mbedtls_mpi_read_binary
       104   -> mbedtls_mpi_set_bit
       104   -> mbedtls_mpi_shift_r
       8   mbedtls_ecp_group_copy
         8   -> mbedtls_ecp_group_load
      24   mbedtls_ecp_group_free
        24   -> __aeabi_memclr
        24   -> free
        24   -> mbedtls_mpi_free
       8   mbedtls_ecp_group_init
         8   -> __aeabi_memclr4
      12   mbedtls_ecp_grp_id_list
       8   mbedtls_ecp_is_zero
         8   -> mbedtls_mpi_cmp_int
       8   mbedtls_ecp_keypair_free
         8   -> mbedtls_ecp_group_free
         8   -> mbedtls_mpi_free
       8   mbedtls_ecp_keypair_init
         8   -> __aeabi_memclr4
         8   -> mbedtls_mpi_init
      40   mbedtls_ecp_mul
        40   -> ecp_mul_comb
        40   -> ecp_mul_mxz
        40   -> mbedtls_ecp_check_privkey
        40   -> mbedtls_ecp_check_pubkey
        40   -> mbedtls_mpi_cmp_int
      32   mbedtls_ecp_mul_shortcuts
        32   -> mbedtls_ecp_copy
        32   -> mbedtls_ecp_mul
        32   -> mbedtls_mpi_cmp_int
        32   -> mbedtls_mpi_sub_mpi
      64   mbedtls_ecp_muladd
        64   -> ecp_add_mixed
        64   -> ecp_normalize_jac
        64   -> mbedtls_ecp_mul_shortcuts
        64   -> mbedtls_mpi_free
        64   -> mbedtls_mpi_init
      16   mbedtls_ecp_point_cmp
        16   -> mbedtls_mpi_cmp_mpi
       8   mbedtls_ecp_point_free
         8   -> mbedtls_mpi_free
       8   mbedtls_ecp_point_init
         8   -> mbedtls_mpi_init
      24   mbedtls_ecp_point_read_binary
        24   -> mbedtls_ecp_set_zero
        24   -> mbedtls_mpi_lset
        24   -> mbedtls_mpi_read_binary
        24   -> mbedtls_mpi_size
      16   mbedtls_ecp_point_read_string
        16   -> mbedtls_mpi_lset
        16   -> mbedtls_mpi_read_string
      40   mbedtls_ecp_point_write_binary
        40   -> mbedtls_mpi_cmp_int
        40   -> mbedtls_mpi_get_bit
        40   -> mbedtls_mpi_size
        40   -> mbedtls_mpi_write_binary
     280   mbedtls_ecp_self_test
       280   -> __aeabi_memclr4
       280   -> __aeabi_memcpy4
       280   -> mbedtls_ecp_group_free
       280   -> mbedtls_ecp_group_load
       280   -> mbedtls_ecp_mul
       280   -> mbedtls_mpi_free
       280   -> mbedtls_mpi_init
       280   -> mbedtls_mpi_lset
       280   -> mbedtls_mpi_read_string
       280   -> printf
       8   mbedtls_ecp_set_zero
         8   -> mbedtls_mpi_lset
       8   mbedtls_ecp_tls_read_group
         8   -> mbedtls_ecp_group_load
      16   mbedtls_ecp_tls_read_point
        16   -> mbedtls_ecp_point_read_binary
      12   mbedtls_ecp_tls_write_group
      24   mbedtls_ecp_tls_write_point
        24   -> mbedtls_ecp_point_write_binary


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable21
       4  ??DataTable21_1
       4  ??DataTable28
       4  ??DataTable28_1
       4  ??DataTable29
       4  ??DataTable30
       4  ??DataTable30_1
       4  ??DataTable33
       4  ??DataTable33_1
       4  ??DataTable35
       4  ??DataTable35_1
       4  ??DataTable35_2
       4  ??DataTable35_3
       4  ??DataTable36
       4  ??DataTable40
       4  ??DataTable41
       4  ??DataTable42
       4  ??DataTable44
       4  ??DataTable44_1
       4  ??DataTable44_2
       4  ??DataTable45
       4  ??DataTable45_1
       4  ??DataTable45_2
       4  ??DataTable45_3
      12  ?_0
      12  ?_1
       8  ?_10
      52  ?_11
      40  ?_12
       2  ?_13
      24  ?_14
      52  ?_2
      52  ?_3
      52  ?_4
      52  ?_5
      52  ?_6
      52  ?_7
      52  ?_8
      16  ?_9
      12  add_count
          dbl_count
          mul_count
    1018  ecp_add_mixed
     352  ecp_check_pubkey_sw
     164  ecp_comb_fixed
     892  ecp_double_add_mxz
    1182  ecp_double_jac
     134  ecp_modp
     436  ecp_mul_comb
     178  ecp_mul_comb_core
     372  ecp_mul_mxz
     222  ecp_normalize_jac
     520  ecp_normalize_jac_many
     264  ecp_precompute_comb
     288  ecp_randomize_jac
     174  ecp_randomize_mxz
      76  ecp_safe_invert_jac
     100  ecp_select_comb
      36  ecp_supported_curves
       8  ecp_supported_grp_id
          init_done
     106  mbedtls_ecp_check_privkey
     220  mbedtls_ecp_check_pub_priv
      70  mbedtls_ecp_check_pubkey
      44  mbedtls_ecp_copy
      24  mbedtls_ecp_curve_info_from_grp_id
      32  mbedtls_ecp_curve_info_from_name
      26  mbedtls_ecp_curve_info_from_tls_id
       4  mbedtls_ecp_curve_list
      44  mbedtls_ecp_gen_key
      22  mbedtls_ecp_gen_keypair
     252  mbedtls_ecp_gen_keypair_base
      10  mbedtls_ecp_group_copy
     136  mbedtls_ecp_group_free
      16  mbedtls_ecp_group_init
      44  mbedtls_ecp_grp_id_list
      18  mbedtls_ecp_is_zero
      46  mbedtls_ecp_keypair_free
      48  mbedtls_ecp_keypair_init
     114  mbedtls_ecp_mul
     116  mbedtls_ecp_mul_shortcuts
     136  mbedtls_ecp_muladd
      50  mbedtls_ecp_point_cmp
      28  mbedtls_ecp_point_free
      28  mbedtls_ecp_point_init
     102  mbedtls_ecp_point_read_binary
      44  mbedtls_ecp_point_read_string
     162  mbedtls_ecp_point_write_binary
     580  mbedtls_ecp_self_test
      40  mbedtls_ecp_set_zero
      72  mbedtls_ecp_tls_read_group
      44  mbedtls_ecp_tls_read_point
      60  mbedtls_ecp_tls_write_group
      52  mbedtls_ecp_tls_write_point

 
    20 bytes in section .bss
   414 bytes in section .rodata
 9 410 bytes in section .text
 
 9 410 bytes of CODE  memory
   414 bytes of CONST memory
    20 bytes of DATA  memory

Errors: none
Warnings: none
