###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:25
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\mbedtls\src\ecdsa.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\ecdsa.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\ecdsa.s.txt
#        -o .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\ecdsa.o
#        .\mbed-os\features\mbedtls\src\ecdsa.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\ecdsa.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\ecdsa.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\mbedtls\src\ecdsa.c
      1          /*
      2           *  Elliptic curve DSA
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          /*
     23           * References:
     24           *
     25           * SEC1 http://www.secg.org/index.php?action=secg,docs_secg
     26           */
     27          
     28          #if !defined(MBEDTLS_CONFIG_FILE)
     29          #include "mbedtls/config.h"
     30          #else
     31          #include MBEDTLS_CONFIG_FILE
     32          #endif
     33          
     34          #if defined(MBEDTLS_ECDSA_C)
     35          
     36          #include "mbedtls/ecdsa.h"
     37          #include "mbedtls/asn1write.h"
     38          
     39          #include <string.h>
     40          
     41          #if defined(MBEDTLS_ECDSA_DETERMINISTIC)
     42          #include "mbedtls/hmac_drbg.h"
     43          #endif
     44          
     45          /*
     46           * Derive a suitable integer for group grp from a buffer of length len
     47           * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
     48           */

   \                                 In section .text, align 2, keep-with-next
     49          static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
     50                                 const unsigned char *buf, size_t blen )
     51          {
   \                     derive_mpi: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x0011             MOVS     R1,R2
     52              int ret;
     53              size_t n_size = ( grp->nbits + 7 ) / 8;
   \   00000008   0x6DE0             LDR      R0,[R4, #+92]
   \   0000000A   0x1DC0             ADDS     R0,R0,#+7
   \   0000000C   0x08C7             LSRS     R7,R0,#+3
     54              size_t use_size = blen > n_size ? n_size : blen;
   \   0000000E   0x429F             CMP      R7,R3
   \   00000010   0xD900             BLS      ??derive_mpi_0
   \   00000012   0x001F             MOVS     R7,R3
     55          
     56              MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
   \                     ??derive_mpi_0: (+1)
   \   00000014   0x003A             MOVS     R2,R7
   \   00000016   0x0030             MOVS     R0,R6
   \   00000018   0x.... 0x....      BL       mbedtls_mpi_read_binary
   \   0000001C   0x0005             MOVS     R5,R0
   \   0000001E   0xD117             BNE      ??derive_mpi_1
     57              if( use_size * 8 > grp->nbits )
   \   00000020   0x6DE0             LDR      R0,[R4, #+92]
   \   00000022   0x00F9             LSLS     R1,R7,#+3
   \   00000024   0x4288             CMP      R0,R1
   \   00000026   0xD205             BCS      ??derive_mpi_2
     58                  MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
   \   00000028   0x1A09             SUBS     R1,R1,R0
   \   0000002A   0x0030             MOVS     R0,R6
   \   0000002C   0x.... 0x....      BL       mbedtls_mpi_shift_r
   \   00000030   0x0005             MOVS     R5,R0
   \   00000032   0xD10D             BNE      ??derive_mpi_1
     59          
     60              /* While at it, reduce modulo N */
     61              if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
   \                     ??derive_mpi_2: (+1)
   \   00000034   0x0021             MOVS     R1,R4
   \   00000036   0x314C             ADDS     R1,R1,#+76
   \   00000038   0x0030             MOVS     R0,R6
   \   0000003A   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD406             BMI      ??derive_mpi_1
     62                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
   \   00000042   0x0022             MOVS     R2,R4
   \   00000044   0x324C             ADDS     R2,R2,#+76
   \   00000046   0x0031             MOVS     R1,R6
   \   00000048   0x0030             MOVS     R0,R6
   \   0000004A   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   0000004E   0x0005             MOVS     R5,R0
     63          
     64          cleanup:
     65              return( ret );
   \                     ??derive_mpi_1: (+1)
   \   00000050   0x0028             MOVS     R0,R5
   \   00000052   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     66          }
     67          
     68          /*
     69           * Compute ECDSA signature of a hashed message (SEC1 4.1.3)
     70           * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)
     71           */

   \                                 In section .text, align 2, keep-with-next
     72          int mbedtls_ecdsa_sign( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,
     73                          const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
     74                          int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
     75          {
   \                     mbedtls_ecdsa_sign: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0xB094             SUB      SP,SP,#+80
   \   00000004   0x0007             MOVS     R7,R0
     76              int ret, key_tries, sign_tries, blind_tries;
     77              mbedtls_ecp_point R;
     78              mbedtls_mpi k, e, t;
     79          
     80              /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
     81              if( grp->N.p == NULL )
   \   00000006   0x6D78             LDR      R0,[R7, #+84]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD101             BNE      ??mbedtls_ecdsa_sign_0
     82                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \   0000000C   0x....             LDR      R0,??DataTable1  ;; 0xffffb080
   \   0000000E   0xE0A6             B        ??mbedtls_ecdsa_sign_1
     83          
     84              mbedtls_ecp_point_init( &R );
   \                     ??mbedtls_ecdsa_sign_0: (+1)
   \   00000010   0xA80B             ADD      R0,SP,#+44
   \   00000012   0x.... 0x....      BL       mbedtls_ecp_point_init
     85              mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
   \   00000016   0xA808             ADD      R0,SP,#+32
   \   00000018   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000001C   0xA805             ADD      R0,SP,#+20
   \   0000001E   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000022   0xA802             ADD      R0,SP,#+8
   \   00000024   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x9001             STR      R0,[SP, #+4]
     86          
     87              sign_tries = 0;
     88              do
     89              {
     90                  /*
     91                   * Steps 1-3: generate a suitable ephemeral keypair
     92                   * and set r = xR mod n
     93                   */
     94                  key_tries = 0;
   \                     ??mbedtls_ecdsa_sign_2: (+1)
   \   0000002C   0x2400             MOVS     R4,#+0
     95                  do
     96                  {
     97                      MBEDTLS_MPI_CHK( mbedtls_ecp_gen_keypair( grp, &k, &R, f_rng, p_rng ) );
   \                     ??mbedtls_ecdsa_sign_3: (+1)
   \   0000002E   0x981F             LDR      R0,[SP, #+124]
   \   00000030   0x9000             STR      R0,[SP, #+0]
   \   00000032   0x9B1E             LDR      R3,[SP, #+120]
   \   00000034   0xAA0B             ADD      R2,SP,#+44
   \   00000036   0xA908             ADD      R1,SP,#+32
   \   00000038   0x0038             MOVS     R0,R7
   \   0000003A   0x.... 0x....      BL       mbedtls_ecp_gen_keypair
   \   0000003E   0x0005             MOVS     R5,R0
   \   00000040   0xD000             BEQ      .+4
   \   00000042   0xE07F             B        ??mbedtls_ecdsa_sign_4
     98                      MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( r, &R.X, &grp->N ) );
   \   00000044   0x003A             MOVS     R2,R7
   \   00000046   0x324C             ADDS     R2,R2,#+76
   \   00000048   0xA90B             ADD      R1,SP,#+44
   \   0000004A   0x9814             LDR      R0,[SP, #+80]
   \   0000004C   0x.... 0x....      BL       mbedtls_mpi_mod_mpi
   \   00000050   0x0005             MOVS     R5,R0
   \   00000052   0xD177             BNE      ??mbedtls_ecdsa_sign_4
     99          
    100                      if( key_tries++ > 10 )
   \   00000054   0x2C0B             CMP      R4,#+11
   \   00000056   0xDA6A             BGE      ??mbedtls_ecdsa_sign_5
   \   00000058   0x1C64             ADDS     R4,R4,#+1
    101                      {
    102                          ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
    103                          goto cleanup;
    104                      }
    105                  }
    106                  while( mbedtls_mpi_cmp_int( r, 0 ) == 0 );
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0x9814             LDR      R0,[SP, #+80]
   \   0000005E   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD0E3             BEQ      ??mbedtls_ecdsa_sign_3
    107          
    108                  /*
    109                   * Step 5: derive MPI from hashed message
    110                   */
    111                  MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
   \   00000066   0x9B1D             LDR      R3,[SP, #+116]
   \   00000068   0x9A1C             LDR      R2,[SP, #+112]
   \   0000006A   0xA905             ADD      R1,SP,#+20
   \   0000006C   0x0038             MOVS     R0,R7
   \   0000006E   0x.... 0x....      BL       derive_mpi
   \   00000072   0x0005             MOVS     R5,R0
   \   00000074   0xD166             BNE      ??mbedtls_ecdsa_sign_4
    112          
    113                  /*
    114                   * Generate a random value to blind inv_mod in next step,
    115                   * avoiding a potential timing leak.
    116                   */
    117                  blind_tries = 0;
   \   00000076   0x2400             MOVS     R4,#+0
    118                  do
    119                  {
    120                      size_t n_size = ( grp->nbits + 7 ) / 8;
   \                     ??mbedtls_ecdsa_sign_6: (+1)
   \   00000078   0x6DF8             LDR      R0,[R7, #+92]
   \   0000007A   0x1DC0             ADDS     R0,R0,#+7
   \   0000007C   0x08C6             LSRS     R6,R0,#+3
    121                      MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &t, n_size, f_rng, p_rng ) );
   \   0000007E   0x9B1F             LDR      R3,[SP, #+124]
   \   00000080   0x9A1E             LDR      R2,[SP, #+120]
   \   00000082   0x0031             MOVS     R1,R6
   \   00000084   0xA802             ADD      R0,SP,#+8
   \   00000086   0x.... 0x....      BL       mbedtls_mpi_fill_random
   \   0000008A   0x0005             MOVS     R5,R0
   \   0000008C   0xD15A             BNE      ??mbedtls_ecdsa_sign_4
    122                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &t, 8 * n_size - grp->nbits ) );
   \   0000008E   0x00F0             LSLS     R0,R6,#+3
   \   00000090   0x6DF9             LDR      R1,[R7, #+92]
   \   00000092   0x1A41             SUBS     R1,R0,R1
   \   00000094   0xA802             ADD      R0,SP,#+8
   \   00000096   0x.... 0x....      BL       mbedtls_mpi_shift_r
   \   0000009A   0x0005             MOVS     R5,R0
   \   0000009C   0xD152             BNE      ??mbedtls_ecdsa_sign_4
    123          
    124                      /* See mbedtls_ecp_gen_keypair() */
    125                      if( ++blind_tries > 30 )
   \   0000009E   0x1C64             ADDS     R4,R4,#+1
   \   000000A0   0x2C1F             CMP      R4,#+31
   \   000000A2   0xDB01             BLT      ??mbedtls_ecdsa_sign_7
    126                          return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
   \   000000A4   0x....             LDR      R0,??DataTable2  ;; 0xffffb300
   \   000000A6   0xE05A             B        ??mbedtls_ecdsa_sign_1
    127                  }
    128                  while( mbedtls_mpi_cmp_int( &t, 1 ) < 0 ||
    129                         mbedtls_mpi_cmp_mpi( &t, &grp->N ) >= 0 );
   \                     ??mbedtls_ecdsa_sign_7: (+1)
   \   000000A8   0x2101             MOVS     R1,#+1
   \   000000AA   0xA802             ADD      R0,SP,#+8
   \   000000AC   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   000000B0   0x2800             CMP      R0,#+0
   \   000000B2   0xD4E1             BMI      ??mbedtls_ecdsa_sign_6
   \   000000B4   0x0039             MOVS     R1,R7
   \   000000B6   0x314C             ADDS     R1,R1,#+76
   \   000000B8   0xA802             ADD      R0,SP,#+8
   \   000000BA   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   000000BE   0x2800             CMP      R0,#+0
   \   000000C0   0xD5DA             BPL      ??mbedtls_ecdsa_sign_6
    130          
    131                  /*
    132                   * Step 6: compute s = (e + r * d) / k = t (e + rd) / (kt) mod n
    133                   */
    134                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, r, d ) );
   \   000000C2   0x9A16             LDR      R2,[SP, #+88]
   \   000000C4   0x9914             LDR      R1,[SP, #+80]
   \   000000C6   0x9815             LDR      R0,[SP, #+84]
   \   000000C8   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000000CC   0x0005             MOVS     R5,R0
   \   000000CE   0xD139             BNE      ??mbedtls_ecdsa_sign_4
    135                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );
   \   000000D0   0x9A15             LDR      R2,[SP, #+84]
   \   000000D2   0xA905             ADD      R1,SP,#+20
   \   000000D4   0xA805             ADD      R0,SP,#+20
   \   000000D6   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   000000DA   0x0005             MOVS     R5,R0
   \   000000DC   0xD132             BNE      ??mbedtls_ecdsa_sign_4
    136                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );
   \   000000DE   0xAA02             ADD      R2,SP,#+8
   \   000000E0   0xA905             ADD      R1,SP,#+20
   \   000000E2   0xA805             ADD      R0,SP,#+20
   \   000000E4   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000000E8   0x0005             MOVS     R5,R0
   \   000000EA   0xD12B             BNE      ??mbedtls_ecdsa_sign_4
    137                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &k, &k, &t ) );
   \   000000EC   0xAA02             ADD      R2,SP,#+8
   \   000000EE   0xA908             ADD      R1,SP,#+32
   \   000000F0   0xA808             ADD      R0,SP,#+32
   \   000000F2   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000000F6   0x0005             MOVS     R5,R0
   \   000000F8   0xD124             BNE      ??mbedtls_ecdsa_sign_4
    138                  MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, &k, &grp->N ) );
   \   000000FA   0x003A             MOVS     R2,R7
   \   000000FC   0x324C             ADDS     R2,R2,#+76
   \   000000FE   0xA908             ADD      R1,SP,#+32
   \   00000100   0x9815             LDR      R0,[SP, #+84]
   \   00000102   0x.... 0x....      BL       mbedtls_mpi_inv_mod
   \   00000106   0x0005             MOVS     R5,R0
   \   00000108   0xD11C             BNE      ??mbedtls_ecdsa_sign_4
    139                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );
   \   0000010A   0xAA05             ADD      R2,SP,#+20
   \   0000010C   0x9915             LDR      R1,[SP, #+84]
   \   0000010E   0x4608             MOV      R0,R1
   \   00000110   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   00000114   0x0005             MOVS     R5,R0
   \   00000116   0xD115             BNE      ??mbedtls_ecdsa_sign_4
    140                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );
   \   00000118   0x003A             MOVS     R2,R7
   \   0000011A   0x324C             ADDS     R2,R2,#+76
   \   0000011C   0x9915             LDR      R1,[SP, #+84]
   \   0000011E   0x4608             MOV      R0,R1
   \   00000120   0x.... 0x....      BL       mbedtls_mpi_mod_mpi
   \   00000124   0x0005             MOVS     R5,R0
   \   00000126   0xD10D             BNE      ??mbedtls_ecdsa_sign_4
    141          
    142                  if( sign_tries++ > 10 )
   \   00000128   0x9801             LDR      R0,[SP, #+4]
   \   0000012A   0x280B             CMP      R0,#+11
   \   0000012C   0xDB01             BLT      ??mbedtls_ecdsa_sign_8
    143                  {
    144                      ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
   \                     ??mbedtls_ecdsa_sign_5: (+1)
   \   0000012E   0x....             LDR      R5,??DataTable2  ;; 0xffffb300
    145                      goto cleanup;
   \   00000130   0xE008             B        ??mbedtls_ecdsa_sign_4
    146                  }
    147              }
   \                     ??mbedtls_ecdsa_sign_8: (+1)
   \   00000132   0x1C40             ADDS     R0,R0,#+1
   \   00000134   0x9001             STR      R0,[SP, #+4]
    148              while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );
   \   00000136   0x2100             MOVS     R1,#+0
   \   00000138   0x9815             LDR      R0,[SP, #+84]
   \   0000013A   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   0000013E   0x2800             CMP      R0,#+0
   \   00000140   0xD100             BNE      .+4
   \   00000142   0xE773             B        ??mbedtls_ecdsa_sign_2
    149          
    150          cleanup:
    151              mbedtls_ecp_point_free( &R );
   \                     ??mbedtls_ecdsa_sign_4: (+1)
   \   00000144   0xA80B             ADD      R0,SP,#+44
   \   00000146   0x.... 0x....      BL       mbedtls_ecp_point_free
    152              mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );
   \   0000014A   0xA808             ADD      R0,SP,#+32
   \   0000014C   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000150   0xA805             ADD      R0,SP,#+20
   \   00000152   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000156   0xA802             ADD      R0,SP,#+8
   \   00000158   0x.... 0x....      BL       mbedtls_mpi_free
    153          
    154              return( ret );
   \   0000015C   0x0028             MOVS     R0,R5
   \                     ??mbedtls_ecdsa_sign_1: (+1)
   \   0000015E   0xB017             ADD      SP,SP,#+92
   \   00000160   0xBDF0             POP      {R4-R7,PC}       ;; return
    155          }
    156          
    157          #if defined(MBEDTLS_ECDSA_DETERMINISTIC)
    158          /*
    159           * Deterministic signature wrapper
    160           */

   \                                 In section .text, align 2, keep-with-next
    161          int mbedtls_ecdsa_sign_det( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,
    162                              const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
    163                              mbedtls_md_type_t md_alg )
    164          {
   \                     mbedtls_ecdsa_sign_det: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0xB0C2             SUB      SP,SP,#+264
   \   00000004   0x0005             MOVS     R5,R0
    165              int ret;
    166              mbedtls_hmac_drbg_context rng_ctx;
    167              unsigned char data[2 * MBEDTLS_ECP_MAX_BYTES];
    168              size_t grp_len = ( grp->nbits + 7 ) / 8;
   \   00000006   0x6DE8             LDR      R0,[R5, #+92]
   \   00000008   0x1DC0             ADDS     R0,R0,#+7
   \   0000000A   0x08C4             LSRS     R4,R0,#+3
    169              const mbedtls_md_info_t *md_info;
    170              mbedtls_mpi h;
    171          
    172              if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
   \   0000000C   0x984C             LDR      R0,[SP, #+304]
   \   0000000E   0x.... 0x....      BL       mbedtls_md_info_from_type
   \   00000012   0x0007             MOVS     R7,R0
   \   00000014   0xD101             BNE      ??mbedtls_ecdsa_sign_det_0
    173                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \   00000016   0x....             LDR      R0,??DataTable1  ;; 0xffffb080
   \   00000018   0xE038             B        ??mbedtls_ecdsa_sign_det_1
    174          
    175              mbedtls_mpi_init( &h );
   \                     ??mbedtls_ecdsa_sign_det_0: (+1)
   \   0000001A   0xA804             ADD      R0,SP,#+16
   \   0000001C   0x.... 0x....      BL       mbedtls_mpi_init
    176              mbedtls_hmac_drbg_init( &rng_ctx );
   \   00000020   0xA828             ADD      R0,SP,#+160
   \   00000022   0x.... 0x....      BL       mbedtls_hmac_drbg_init
    177          
    178              /* Use private key and message hash (reduced) to initialize HMAC_DRBG */
    179              MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( d, data, grp_len ) );
   \   00000026   0x0022             MOVS     R2,R4
   \   00000028   0xA907             ADD      R1,SP,#+28
   \   0000002A   0x9844             LDR      R0,[SP, #+272]
   \   0000002C   0x.... 0x....      BL       mbedtls_mpi_write_binary
   \   00000030   0x0006             MOVS     R6,R0
   \   00000032   0xD124             BNE      ??mbedtls_ecdsa_sign_det_2
    180              MBEDTLS_MPI_CHK( derive_mpi( grp, &h, buf, blen ) );
   \   00000034   0x9B4B             LDR      R3,[SP, #+300]
   \   00000036   0x9A4A             LDR      R2,[SP, #+296]
   \   00000038   0xA904             ADD      R1,SP,#+16
   \   0000003A   0x0028             MOVS     R0,R5
   \   0000003C   0x.... 0x....      BL       derive_mpi
   \   00000040   0x0006             MOVS     R6,R0
   \   00000042   0xD11C             BNE      ??mbedtls_ecdsa_sign_det_2
    181              MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &h, data + grp_len, grp_len ) );
   \   00000044   0x0022             MOVS     R2,R4
   \   00000046   0xA807             ADD      R0,SP,#+28
   \   00000048   0x1901             ADDS     R1,R0,R4
   \   0000004A   0xA804             ADD      R0,SP,#+16
   \   0000004C   0x.... 0x....      BL       mbedtls_mpi_write_binary
   \   00000050   0x0006             MOVS     R6,R0
   \   00000052   0xD114             BNE      ??mbedtls_ecdsa_sign_det_2
    182              mbedtls_hmac_drbg_seed_buf( &rng_ctx, md_info, data, 2 * grp_len );
   \   00000054   0x0063             LSLS     R3,R4,#+1
   \   00000056   0xAA07             ADD      R2,SP,#+28
   \   00000058   0x0039             MOVS     R1,R7
   \   0000005A   0xA828             ADD      R0,SP,#+160
   \   0000005C   0x.... 0x....      BL       mbedtls_hmac_drbg_seed_buf
    183          
    184              ret = mbedtls_ecdsa_sign( grp, r, s, d, buf, blen,
    185                                mbedtls_hmac_drbg_random, &rng_ctx );
   \   00000060   0xA828             ADD      R0,SP,#+160
   \   00000062   0x9003             STR      R0,[SP, #+12]
   \   00000064   0x....             LDR      R0,??DataTable3
   \   00000066   0x9002             STR      R0,[SP, #+8]
   \   00000068   0x984B             LDR      R0,[SP, #+300]
   \   0000006A   0x9001             STR      R0,[SP, #+4]
   \   0000006C   0x984A             LDR      R0,[SP, #+296]
   \   0000006E   0x9000             STR      R0,[SP, #+0]
   \   00000070   0x9B44             LDR      R3,[SP, #+272]
   \   00000072   0x9A43             LDR      R2,[SP, #+268]
   \   00000074   0x9942             LDR      R1,[SP, #+264]
   \   00000076   0x0028             MOVS     R0,R5
   \   00000078   0x.... 0x....      BL       mbedtls_ecdsa_sign
   \   0000007C   0x0006             MOVS     R6,R0
    186          
    187          cleanup:
    188              mbedtls_hmac_drbg_free( &rng_ctx );
   \                     ??mbedtls_ecdsa_sign_det_2: (+1)
   \   0000007E   0xA828             ADD      R0,SP,#+160
   \   00000080   0x.... 0x....      BL       mbedtls_hmac_drbg_free
    189              mbedtls_mpi_free( &h );
   \   00000084   0xA804             ADD      R0,SP,#+16
   \   00000086   0x.... 0x....      BL       mbedtls_mpi_free
    190          
    191              return( ret );
   \   0000008A   0x0030             MOVS     R0,R6
   \                     ??mbedtls_ecdsa_sign_det_1: (+1)
   \   0000008C   0xB045             ADD      SP,SP,#+276
   \   0000008E   0xBDF0             POP      {R4-R7,PC}       ;; return
    192          }
    193          #endif /* MBEDTLS_ECDSA_DETERMINISTIC */
    194          
    195          /*
    196           * Verify ECDSA signature of hashed message (SEC1 4.1.4)
    197           * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)
    198           */

   \                                 In section .text, align 2, keep-with-next
    199          int mbedtls_ecdsa_verify( mbedtls_ecp_group *grp,
    200                            const unsigned char *buf, size_t blen,
    201                            const mbedtls_ecp_point *Q, const mbedtls_mpi *r, const mbedtls_mpi *s)
    202          {
   \                     mbedtls_ecdsa_verify: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0xB098             SUB      SP,SP,#+96
   \   00000004   0x0004             MOVS     R4,R0
    203              int ret;
    204              mbedtls_mpi e, s_inv, u1, u2;
    205              mbedtls_ecp_point R;
    206          
    207              mbedtls_ecp_point_init( &R );
   \   00000006   0xA80E             ADD      R0,SP,#+56
   \   00000008   0x.... 0x....      BL       mbedtls_ecp_point_init
    208              mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv ); mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
   \   0000000C   0xA80B             ADD      R0,SP,#+44
   \   0000000E   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000012   0xA808             ADD      R0,SP,#+32
   \   00000014   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000018   0xA805             ADD      R0,SP,#+20
   \   0000001A   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000001E   0xA802             ADD      R0,SP,#+8
   \   00000020   0x.... 0x....      BL       mbedtls_mpi_init
    209          
    210              /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    211              if( grp->N.p == NULL )
   \   00000024   0x6D60             LDR      R0,[R4, #+84]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD101             BNE      ??mbedtls_ecdsa_verify_0
    212                  return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
   \   0000002A   0x....             LDR      R0,??DataTable3_1  ;; 0xffffb080
   \   0000002C   0xE080             B        ??mbedtls_ecdsa_verify_1
   \                     ??mbedtls_ecdsa_verify_0: (+1)
   \   0000002E   0x9E20             LDR      R6,[SP, #+128]
    213          
    214              /*
    215               * Step 1: make sure r and s are in range 1..n-1
    216               */
    217              if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
    218                  mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0x0030             MOVS     R0,R6
   \   00000034   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD468             BMI      ??mbedtls_ecdsa_verify_2
   \   0000003C   0x0021             MOVS     R1,R4
   \   0000003E   0x314C             ADDS     R1,R1,#+76
   \   00000040   0x0030             MOVS     R0,R6
   \   00000042   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD561             BPL      ??mbedtls_ecdsa_verify_2
   \   0000004A   0x9F21             LDR      R7,[SP, #+132]
   \   0000004C   0x2101             MOVS     R1,#+1
   \   0000004E   0x0038             MOVS     R0,R7
   \   00000050   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD45A             BMI      ??mbedtls_ecdsa_verify_2
   \   00000058   0x0021             MOVS     R1,R4
   \   0000005A   0x314C             ADDS     R1,R1,#+76
   \   0000005C   0x0038             MOVS     R0,R7
   \   0000005E   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD553             BPL      ??mbedtls_ecdsa_verify_2
    219              {
    220                  ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
    221                  goto cleanup;
    222              }
    223          
    224              /*
    225               * Additional precaution: make sure Q is valid
    226               */
    227              MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, Q ) );
   \   00000066   0x991A             LDR      R1,[SP, #+104]
   \   00000068   0x0020             MOVS     R0,R4
   \   0000006A   0x.... 0x....      BL       mbedtls_ecp_check_pubkey
   \   0000006E   0x0005             MOVS     R5,R0
   \   00000070   0xD14E             BNE      ??mbedtls_ecdsa_verify_3
    228          
    229              /*
    230               * Step 3: derive MPI from hashed message
    231               */
    232              MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
   \   00000072   0x9B19             LDR      R3,[SP, #+100]
   \   00000074   0x9A18             LDR      R2,[SP, #+96]
   \   00000076   0xA90B             ADD      R1,SP,#+44
   \   00000078   0x0020             MOVS     R0,R4
   \   0000007A   0x.... 0x....      BL       derive_mpi
   \   0000007E   0x0005             MOVS     R5,R0
   \   00000080   0xD146             BNE      ??mbedtls_ecdsa_verify_3
    233          
    234              /*
    235               * Step 4: u1 = e / s mod n, u2 = r / s mod n
    236               */
    237              MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
   \   00000082   0x0022             MOVS     R2,R4
   \   00000084   0x324C             ADDS     R2,R2,#+76
   \   00000086   0x0039             MOVS     R1,R7
   \   00000088   0xA808             ADD      R0,SP,#+32
   \   0000008A   0x.... 0x....      BL       mbedtls_mpi_inv_mod
   \   0000008E   0x0005             MOVS     R5,R0
   \   00000090   0xD13E             BNE      ??mbedtls_ecdsa_verify_3
    238          
    239              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u1, &e, &s_inv ) );
   \   00000092   0xAA08             ADD      R2,SP,#+32
   \   00000094   0xA90B             ADD      R1,SP,#+44
   \   00000096   0xA805             ADD      R0,SP,#+20
   \   00000098   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000009C   0x0005             MOVS     R5,R0
   \   0000009E   0xD137             BNE      ??mbedtls_ecdsa_verify_3
    240              MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &u1, &u1, &grp->N ) );
   \   000000A0   0x0022             MOVS     R2,R4
   \   000000A2   0x324C             ADDS     R2,R2,#+76
   \   000000A4   0xA905             ADD      R1,SP,#+20
   \   000000A6   0xA805             ADD      R0,SP,#+20
   \   000000A8   0x.... 0x....      BL       mbedtls_mpi_mod_mpi
   \   000000AC   0x0005             MOVS     R5,R0
   \   000000AE   0xD12F             BNE      ??mbedtls_ecdsa_verify_3
    241          
    242              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u2, r, &s_inv ) );
   \   000000B0   0xAA08             ADD      R2,SP,#+32
   \   000000B2   0x0031             MOVS     R1,R6
   \   000000B4   0xA802             ADD      R0,SP,#+8
   \   000000B6   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000000BA   0x0005             MOVS     R5,R0
   \   000000BC   0xD128             BNE      ??mbedtls_ecdsa_verify_3
    243              MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &u2, &u2, &grp->N ) );
   \   000000BE   0x0022             MOVS     R2,R4
   \   000000C0   0x324C             ADDS     R2,R2,#+76
   \   000000C2   0xA902             ADD      R1,SP,#+8
   \   000000C4   0xA802             ADD      R0,SP,#+8
   \   000000C6   0x.... 0x....      BL       mbedtls_mpi_mod_mpi
   \   000000CA   0x0005             MOVS     R5,R0
   \   000000CC   0xD120             BNE      ??mbedtls_ecdsa_verify_3
    244          
    245              /*
    246               * Step 5: R = u1 G + u2 Q
    247               *
    248               * Since we're not using any secret data, no need to pass a RNG to
    249               * mbedtls_ecp_mul() for countermesures.
    250               */
    251              MBEDTLS_MPI_CHK( mbedtls_ecp_muladd( grp, &R, &u1, &grp->G, &u2, Q ) );
   \   000000CE   0x981A             LDR      R0,[SP, #+104]
   \   000000D0   0x9001             STR      R0,[SP, #+4]
   \   000000D2   0xA802             ADD      R0,SP,#+8
   \   000000D4   0x9000             STR      R0,[SP, #+0]
   \   000000D6   0x0023             MOVS     R3,R4
   \   000000D8   0x3328             ADDS     R3,R3,#+40
   \   000000DA   0xAA05             ADD      R2,SP,#+20
   \   000000DC   0xA90E             ADD      R1,SP,#+56
   \   000000DE   0x0020             MOVS     R0,R4
   \   000000E0   0x.... 0x....      BL       mbedtls_ecp_muladd
   \   000000E4   0x0005             MOVS     R5,R0
   \   000000E6   0xD113             BNE      ??mbedtls_ecdsa_verify_3
    252          
    253              if( mbedtls_ecp_is_zero( &R ) )
   \   000000E8   0xA80E             ADD      R0,SP,#+56
   \   000000EA   0x.... 0x....      BL       mbedtls_ecp_is_zero
   \   000000EE   0x2800             CMP      R0,#+0
   \   000000F0   0xD10D             BNE      ??mbedtls_ecdsa_verify_2
    254              {
    255                  ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
    256                  goto cleanup;
    257              }
    258          
    259              /*
    260               * Step 6: convert xR to an integer (no-op)
    261               * Step 7: reduce xR mod n (gives v)
    262               */
    263              MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
   \   000000F2   0x0022             MOVS     R2,R4
   \   000000F4   0x324C             ADDS     R2,R2,#+76
   \   000000F6   0xA90E             ADD      R1,SP,#+56
   \   000000F8   0xA80E             ADD      R0,SP,#+56
   \   000000FA   0x.... 0x....      BL       mbedtls_mpi_mod_mpi
   \   000000FE   0x0005             MOVS     R5,R0
   \   00000100   0xD106             BNE      ??mbedtls_ecdsa_verify_3
    264          
    265              /*
    266               * Step 8: check if v (that is, R.X) is equal to r
    267               */
    268              if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
   \   00000102   0x0031             MOVS     R1,R6
   \   00000104   0xA80E             ADD      R0,SP,#+56
   \   00000106   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000010A   0x2800             CMP      R0,#+0
   \   0000010C   0xD000             BEQ      ??mbedtls_ecdsa_verify_3
    269              {
    270                  ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
   \                     ??mbedtls_ecdsa_verify_2: (+1)
   \   0000010E   0x....             LDR      R5,??DataTable3_2  ;; 0xffffb200
    271                  goto cleanup;
    272              }
    273          
    274          cleanup:
    275              mbedtls_ecp_point_free( &R );
   \                     ??mbedtls_ecdsa_verify_3: (+1)
   \   00000110   0xA80E             ADD      R0,SP,#+56
   \   00000112   0x.... 0x....      BL       mbedtls_ecp_point_free
    276              mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv ); mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
   \   00000116   0xA80B             ADD      R0,SP,#+44
   \   00000118   0x.... 0x....      BL       mbedtls_mpi_free
   \   0000011C   0xA808             ADD      R0,SP,#+32
   \   0000011E   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000122   0xA805             ADD      R0,SP,#+20
   \   00000124   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000128   0xA802             ADD      R0,SP,#+8
   \   0000012A   0x.... 0x....      BL       mbedtls_mpi_free
    277          
    278              return( ret );
   \   0000012E   0x0028             MOVS     R0,R5
   \                     ??mbedtls_ecdsa_verify_1: (+1)
   \   00000130   0xB01B             ADD      SP,SP,#+108
   \   00000132   0xBDF0             POP      {R4-R7,PC}       ;; return
    279          }
    280          
    281          /*
    282           * Convert a signature (given by context) to ASN.1
    283           */
    284          static int ecdsa_signature_to_asn1( const mbedtls_mpi *r, const mbedtls_mpi *s,
    285                                              unsigned char *sig, size_t *slen )
    286          {
    287              int ret;
    288              unsigned char buf[MBEDTLS_ECDSA_MAX_LEN];
    289              unsigned char *p = buf + sizeof( buf );
    290              size_t len = 0;
    291          
    292              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
    293              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );
    294          
    295              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
    296              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
    297                                                 MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) );
    298          
    299              memcpy( sig, p, len );
    300              *slen = len;
    301          
    302              return( 0 );
    303          }
    304          
    305          /*
    306           * Compute and write signature
    307           */

   \                                 In section .text, align 2, keep-with-next
    308          int mbedtls_ecdsa_write_signature( mbedtls_ecdsa_context *ctx, mbedtls_md_type_t md_alg,
    309                                     const unsigned char *hash, size_t hlen,
    310                                     unsigned char *sig, size_t *slen,
    311                                     int (*f_rng)(void *, unsigned char *, size_t),
    312                                     void *p_rng )
    313          {
   \                     mbedtls_ecdsa_write_signature: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB0AD             SUB      SP,SP,#+180
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000F             MOVS     R7,R1
   \   00000008   0x0015             MOVS     R5,R2
   \   0000000A   0x001E             MOVS     R6,R3
    314              int ret;
    315              mbedtls_mpi r, s;
    316          
    317              mbedtls_mpi_init( &r );
   \   0000000C   0xA806             ADD      R0,SP,#+24
   \   0000000E   0x.... 0x....      BL       mbedtls_mpi_init
    318              mbedtls_mpi_init( &s );
   \   00000012   0xA803             ADD      R0,SP,#+12
   \   00000014   0x.... 0x....      BL       mbedtls_mpi_init
    319          
    320          #if defined(MBEDTLS_ECDSA_DETERMINISTIC)
    321              (void) f_rng;
    322              (void) p_rng;
    323          
    324              MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign_det( &ctx->grp, &r, &s, &ctx->d,
    325                                       hash, hlen, md_alg ) );
   \   00000018   0x9702             STR      R7,[SP, #+8]
   \   0000001A   0x9601             STR      R6,[SP, #+4]
   \   0000001C   0x9500             STR      R5,[SP, #+0]
   \   0000001E   0x0023             MOVS     R3,R4
   \   00000020   0x337C             ADDS     R3,R3,#+124
   \   00000022   0xAA03             ADD      R2,SP,#+12
   \   00000024   0xA906             ADD      R1,SP,#+24
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x.... 0x....      BL       mbedtls_ecdsa_sign_det
   \   0000002C   0x0006             MOVS     R6,R0
   \   0000002E   0xD12F             BNE      ??mbedtls_ecdsa_write_signature_0
    326          #else
    327              (void) md_alg;
    328          
    329              MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ctx->grp, &r, &s, &ctx->d,
    330                                   hash, hlen, f_rng, p_rng ) );
    331          #endif
    332          
    333              MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );
   \   00000030   0xA809             ADD      R0,SP,#+36
   \   00000032   0x308D             ADDS     R0,R0,#+141
   \   00000034   0x9000             STR      R0,[SP, #+0]
   \   00000036   0xAA03             ADD      R2,SP,#+12
   \   00000038   0xA909             ADD      R1,SP,#+36
   \   0000003A   0x4668             MOV      R0,SP
   \   0000003C   0x.... 0x....      BL       mbedtls_asn1_write_mpi
   \   00000040   0x0004             MOVS     R4,R0
   \   00000042   0xD501             BPL      ??mbedtls_ecdsa_write_signature_1
   \   00000044   0x0026             MOVS     R6,R4
   \   00000046   0xE023             B        ??mbedtls_ecdsa_write_signature_0
   \                     ??mbedtls_ecdsa_write_signature_1: (+1)
   \   00000048   0xAA06             ADD      R2,SP,#+24
   \   0000004A   0xA909             ADD      R1,SP,#+36
   \   0000004C   0x4668             MOV      R0,SP
   \   0000004E   0x.... 0x....      BL       mbedtls_asn1_write_mpi
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD501             BPL      ??mbedtls_ecdsa_write_signature_2
   \   00000056   0x0006             MOVS     R6,R0
   \   00000058   0xE01A             B        ??mbedtls_ecdsa_write_signature_0
   \                     ??mbedtls_ecdsa_write_signature_2: (+1)
   \   0000005A   0x1824             ADDS     R4,R4,R0
   \   0000005C   0x0022             MOVS     R2,R4
   \   0000005E   0xA909             ADD      R1,SP,#+36
   \   00000060   0x4668             MOV      R0,SP
   \   00000062   0x.... 0x....      BL       mbedtls_asn1_write_len
   \   00000066   0x0005             MOVS     R5,R0
   \   00000068   0xD501             BPL      ??mbedtls_ecdsa_write_signature_3
   \   0000006A   0x002E             MOVS     R6,R5
   \   0000006C   0xE010             B        ??mbedtls_ecdsa_write_signature_0
   \                     ??mbedtls_ecdsa_write_signature_3: (+1)
   \   0000006E   0x2230             MOVS     R2,#+48
   \   00000070   0xA909             ADD      R1,SP,#+36
   \   00000072   0x4668             MOV      R0,SP
   \   00000074   0x.... 0x....      BL       mbedtls_asn1_write_tag
   \   00000078   0x0006             MOVS     R6,R0
   \   0000007A   0xD409             BMI      ??mbedtls_ecdsa_write_signature_0
   \   0000007C   0x19A8             ADDS     R0,R5,R6
   \   0000007E   0x1824             ADDS     R4,R4,R0
   \   00000080   0x0022             MOVS     R2,R4
   \   00000082   0x9900             LDR      R1,[SP, #+0]
   \   00000084   0x9832             LDR      R0,[SP, #+200]
   \   00000086   0x.... 0x....      BL       __aeabi_memcpy
   \   0000008A   0x9833             LDR      R0,[SP, #+204]
   \   0000008C   0x6004             STR      R4,[R0, #+0]
   \   0000008E   0x2600             MOVS     R6,#+0
    334          
    335          cleanup:
    336              mbedtls_mpi_free( &r );
   \                     ??mbedtls_ecdsa_write_signature_0: (+1)
   \   00000090   0xA806             ADD      R0,SP,#+24
   \   00000092   0x.... 0x....      BL       mbedtls_mpi_free
    337              mbedtls_mpi_free( &s );
   \   00000096   0xA803             ADD      R0,SP,#+12
   \   00000098   0x.... 0x....      BL       mbedtls_mpi_free
    338          
    339              return( ret );
   \   0000009C   0x0030             MOVS     R0,R6
   \   0000009E   0xB02D             ADD      SP,SP,#+180
   \   000000A0   0xBDF0             POP      {R4-R7,PC}       ;; return
    340          }
    341          
    342          #if ! defined(MBEDTLS_DEPRECATED_REMOVED) && \
    343              defined(MBEDTLS_ECDSA_DETERMINISTIC)

   \                                 In section .text, align 2, keep-with-next
    344          int mbedtls_ecdsa_write_signature_det( mbedtls_ecdsa_context *ctx,
    345                                         const unsigned char *hash, size_t hlen,
    346                                         unsigned char *sig, size_t *slen,
    347                                         mbedtls_md_type_t md_alg )
    348          {
   \                     mbedtls_ecdsa_write_signature_det: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
    349              return( mbedtls_ecdsa_write_signature( ctx, md_alg, hash, hlen, sig, slen,
    350                                             NULL, NULL ) );
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x9403             STR      R4,[SP, #+12]
   \   00000008   0x9402             STR      R4,[SP, #+8]
   \   0000000A   0x9C06             LDR      R4,[SP, #+24]
   \   0000000C   0x9401             STR      R4,[SP, #+4]
   \   0000000E   0x9300             STR      R3,[SP, #+0]
   \   00000010   0x0013             MOVS     R3,R2
   \   00000012   0x000A             MOVS     R2,R1
   \   00000014   0x9907             LDR      R1,[SP, #+28]
   \   00000016   0x.... 0x....      BL       mbedtls_ecdsa_write_signature
   \   0000001A   0xB004             ADD      SP,SP,#+16
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    351          }
    352          #endif
    353          
    354          /*
    355           * Read and check signature
    356           */

   \                                 In section .text, align 2, keep-with-next
    357          int mbedtls_ecdsa_read_signature( mbedtls_ecdsa_context *ctx,
    358                                    const unsigned char *hash, size_t hlen,
    359                                    const unsigned char *sig, size_t slen )
    360          {
   \                     mbedtls_ecdsa_read_signature: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000F             MOVS     R7,R1
   \   00000008   0x0015             MOVS     R5,R2
   \   0000000A   0x001E             MOVS     R6,R3
    361              int ret;
    362              unsigned char *p = (unsigned char *) sig;
   \   0000000C   0x9602             STR      R6,[SP, #+8]
    363              const unsigned char *end = sig + slen;
    364              size_t len;
    365              mbedtls_mpi r, s;
    366          
    367              mbedtls_mpi_init( &r );
   \   0000000E   0xA807             ADD      R0,SP,#+28
   \   00000010   0x.... 0x....      BL       mbedtls_mpi_init
    368              mbedtls_mpi_init( &s );
   \   00000014   0xA804             ADD      R0,SP,#+16
   \   00000016   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000001A   0x9810             LDR      R0,[SP, #+64]
    369          
    370              if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
    371                              MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \   0000001C   0x1836             ADDS     R6,R6,R0
   \   0000001E   0x2330             MOVS     R3,#+48
   \   00000020   0xAA03             ADD      R2,SP,#+12
   \   00000022   0x0031             MOVS     R1,R6
   \   00000024   0xA802             ADD      R0,SP,#+8
   \   00000026   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD114             BNE      ??mbedtls_ecdsa_read_signature_0
    372              {
    373                  ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
    374                  goto cleanup;
    375              }
    376          
    377              if( p + len != end )
   \   0000002E   0x9802             LDR      R0,[SP, #+8]
   \   00000030   0x9903             LDR      R1,[SP, #+12]
   \   00000032   0x1840             ADDS     R0,R0,R1
   \   00000034   0x42B0             CMP      R0,R6
   \   00000036   0xD001             BEQ      ??mbedtls_ecdsa_read_signature_1
    378              {
    379                  ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
    380                        MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
   \   00000038   0x....             LDR      R4,??DataTable3_3  ;; 0xffffb01a
    381                  goto cleanup;
   \   0000003A   0xE021             B        ??mbedtls_ecdsa_read_signature_2
    382              }
    383          
    384              if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
    385                  ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
   \                     ??mbedtls_ecdsa_read_signature_1: (+1)
   \   0000003C   0xAA07             ADD      R2,SP,#+28
   \   0000003E   0x0031             MOVS     R1,R6
   \   00000040   0xA802             ADD      R0,SP,#+8
   \   00000042   0x.... 0x....      BL       mbedtls_asn1_get_mpi
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD106             BNE      ??mbedtls_ecdsa_read_signature_0
   \   0000004A   0xAA04             ADD      R2,SP,#+16
   \   0000004C   0x0031             MOVS     R1,R6
   \   0000004E   0xA802             ADD      R0,SP,#+8
   \   00000050   0x.... 0x....      BL       mbedtls_asn1_get_mpi
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD002             BEQ      ??mbedtls_ecdsa_read_signature_3
    386              {
    387                  ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
   \                     ??mbedtls_ecdsa_read_signature_0: (+1)
   \   00000058   0x....             LDR      R1,??DataTable3_1  ;; 0xffffb080
   \   0000005A   0x1844             ADDS     R4,R0,R1
    388                  goto cleanup;
   \   0000005C   0xE010             B        ??mbedtls_ecdsa_read_signature_2
    389              }
    390          
    391              if( ( ret = mbedtls_ecdsa_verify( &ctx->grp, hash, hlen,
    392                                        &ctx->Q, &r, &s ) ) != 0 )
   \                     ??mbedtls_ecdsa_read_signature_3: (+1)
   \   0000005E   0xA804             ADD      R0,SP,#+16
   \   00000060   0x9001             STR      R0,[SP, #+4]
   \   00000062   0xA807             ADD      R0,SP,#+28
   \   00000064   0x9000             STR      R0,[SP, #+0]
   \   00000066   0x0023             MOVS     R3,R4
   \   00000068   0x3388             ADDS     R3,R3,#+136
   \   0000006A   0x002A             MOVS     R2,R5
   \   0000006C   0x0039             MOVS     R1,R7
   \   0000006E   0x0020             MOVS     R0,R4
   \   00000070   0x.... 0x....      BL       mbedtls_ecdsa_verify
   \   00000074   0x0004             MOVS     R4,R0
   \   00000076   0xD103             BNE      ??mbedtls_ecdsa_read_signature_2
    393                  goto cleanup;
    394          
    395              if( p != end )
   \   00000078   0x9802             LDR      R0,[SP, #+8]
   \   0000007A   0x42B0             CMP      R0,R6
   \   0000007C   0xD000             BEQ      ??mbedtls_ecdsa_read_signature_2
    396                  ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;
   \   0000007E   0x....             LDR      R4,??DataTable3_4  ;; 0xffffb400
    397          
    398          cleanup:
    399              mbedtls_mpi_free( &r );
   \                     ??mbedtls_ecdsa_read_signature_2: (+1)
   \   00000080   0xA807             ADD      R0,SP,#+28
   \   00000082   0x.... 0x....      BL       mbedtls_mpi_free
    400              mbedtls_mpi_free( &s );
   \   00000086   0xA804             ADD      R0,SP,#+16
   \   00000088   0x.... 0x....      BL       mbedtls_mpi_free
    401          
    402              return( ret );
   \   0000008C   0x0020             MOVS     R0,R4
   \   0000008E   0xB00B             ADD      SP,SP,#+44
   \   00000090   0xBDF0             POP      {R4-R7,PC}       ;; return
    403          }
    404          
    405          /*
    406           * Generate key pair
    407           */

   \                                 In section .text, align 2, keep-with-next
    408          int mbedtls_ecdsa_genkey( mbedtls_ecdsa_context *ctx, mbedtls_ecp_group_id gid,
    409                            int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
    410          {
   \                     mbedtls_ecdsa_genkey: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001D             MOVS     R5,R3
    411              return( mbedtls_ecp_group_load( &ctx->grp, gid ) ||
    412                      mbedtls_ecp_gen_keypair( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) );
   \   0000000A   0x.... 0x....      BL       mbedtls_ecp_group_load
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD10D             BNE      ??mbedtls_ecdsa_genkey_0
   \   00000012   0x9500             STR      R5,[SP, #+0]
   \   00000014   0x0033             MOVS     R3,R6
   \   00000016   0x0022             MOVS     R2,R4
   \   00000018   0x3288             ADDS     R2,R2,#+136
   \   0000001A   0x0021             MOVS     R1,R4
   \   0000001C   0x317C             ADDS     R1,R1,#+124
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x.... 0x....      BL       mbedtls_ecp_gen_keypair
   \   00000024   0x1E40             SUBS     R0,R0,#+1
   \   00000026   0x4180             SBCS     R0,R0,R0
   \   00000028   0x43C0             MVNS     R0,R0
   \   0000002A   0x0FC0             LSRS     R0,R0,#+31
   \   0000002C   0xBD76             POP      {R1,R2,R4-R6,PC}
   \                     ??mbedtls_ecdsa_genkey_0: (+1)
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    413          }
    414          
    415          /*
    416           * Set context from an mbedtls_ecp_keypair
    417           */

   \                                 In section .text, align 2, keep-with-next
    418          int mbedtls_ecdsa_from_keypair( mbedtls_ecdsa_context *ctx, const mbedtls_ecp_keypair *key )
    419          {
   \                     mbedtls_ecdsa_from_keypair: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    420              int ret;
    421          
    422              if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
    423                  ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
    424                  ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )
   \   00000006   0x.... 0x....      BL       mbedtls_ecp_group_copy
   \   0000000A   0x0006             MOVS     R6,R0
   \   0000000C   0xD10F             BNE      ??mbedtls_ecdsa_from_keypair_0
   \   0000000E   0x0029             MOVS     R1,R5
   \   00000010   0x317C             ADDS     R1,R1,#+124
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x307C             ADDS     R0,R0,#+124
   \   00000016   0x.... 0x....      BL       mbedtls_mpi_copy
   \   0000001A   0x0006             MOVS     R6,R0
   \   0000001C   0xD107             BNE      ??mbedtls_ecdsa_from_keypair_0
   \   0000001E   0x0029             MOVS     R1,R5
   \   00000020   0x3188             ADDS     R1,R1,#+136
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x3088             ADDS     R0,R0,#+136
   \   00000026   0x.... 0x....      BL       mbedtls_ecp_copy
   \   0000002A   0x0006             MOVS     R6,R0
   \   0000002C   0xD002             BEQ      ??mbedtls_ecdsa_from_keypair_1
    425              {
    426                  mbedtls_ecdsa_free( ctx );
   \                     ??mbedtls_ecdsa_from_keypair_0: (+1)
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0x.... 0x....      BL       mbedtls_ecp_keypair_free
    427              }
    428          
    429              return( ret );
   \                     ??mbedtls_ecdsa_from_keypair_1: (+1)
   \   00000034   0x0030             MOVS     R0,R6
   \   00000036   0xBD70             POP      {R4-R6,PC}       ;; return
    430          }
    431          
    432          /*
    433           * Initialize context
    434           */

   \                                 In section .text, align 2, keep-with-next
    435          void mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx )
    436          {
   \                     mbedtls_ecdsa_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    437              mbedtls_ecp_keypair_init( ctx );
   \   00000002   0x.... 0x....      BL       mbedtls_ecp_keypair_init
    438          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    439          
    440          /*
    441           * Free context
    442           */

   \                                 In section .text, align 2, keep-with-next
    443          void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
    444          {
   \                     mbedtls_ecdsa_free: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    445              mbedtls_ecp_keypair_free( ctx );
   \   00000002   0x.... 0x....      BL       mbedtls_ecp_keypair_free
    446          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0xFFFFB080         DC32     0xffffb080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0xFFFFB300         DC32     0xffffb300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     mbedtls_hmac_drbg_random

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0xFFFFB080         DC32     0xffffb080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0xFFFFB200         DC32     0xffffb200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0xFFFFB01A         DC32     0xffffb01a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0xFFFFB400         DC32     0xffffb400
    447          
    448          #endif /* MBEDTLS_ECDSA_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   derive_mpi
        24   -> mbedtls_mpi_cmp_mpi
        24   -> mbedtls_mpi_read_binary
        24   -> mbedtls_mpi_shift_r
        24   -> mbedtls_mpi_sub_mpi
       8   mbedtls_ecdsa_free
         8   -> mbedtls_ecp_keypair_free
      16   mbedtls_ecdsa_from_keypair
        16   -> mbedtls_ecp_copy
        16   -> mbedtls_ecp_group_copy
        16   -> mbedtls_ecp_keypair_free
        16   -> mbedtls_mpi_copy
      24   mbedtls_ecdsa_genkey
        24   -> mbedtls_ecp_gen_keypair
        24   -> mbedtls_ecp_group_load
       8   mbedtls_ecdsa_init
         8   -> mbedtls_ecp_keypair_init
      64   mbedtls_ecdsa_read_signature
        64   -> mbedtls_asn1_get_mpi
        64   -> mbedtls_asn1_get_tag
        64   -> mbedtls_ecdsa_verify
        64   -> mbedtls_mpi_free
        64   -> mbedtls_mpi_init
     112   mbedtls_ecdsa_sign
       112   -> derive_mpi
       112   -> mbedtls_ecp_gen_keypair
       112   -> mbedtls_ecp_point_free
       112   -> mbedtls_ecp_point_init
       112   -> mbedtls_mpi_add_mpi
       112   -> mbedtls_mpi_cmp_int
       112   -> mbedtls_mpi_cmp_mpi
       112   -> mbedtls_mpi_fill_random
       112   -> mbedtls_mpi_free
       112   -> mbedtls_mpi_init
       112   -> mbedtls_mpi_inv_mod
       112   -> mbedtls_mpi_mod_mpi
       112   -> mbedtls_mpi_mul_mpi
       112   -> mbedtls_mpi_shift_r
     296   mbedtls_ecdsa_sign_det
       296   -> derive_mpi
       296   -> mbedtls_ecdsa_sign
       296   -> mbedtls_hmac_drbg_free
       296   -> mbedtls_hmac_drbg_init
       296   -> mbedtls_hmac_drbg_seed_buf
       296   -> mbedtls_md_info_from_type
       296   -> mbedtls_mpi_free
       296   -> mbedtls_mpi_init
       296   -> mbedtls_mpi_write_binary
     128   mbedtls_ecdsa_verify
       128   -> derive_mpi
       128   -> mbedtls_ecp_check_pubkey
       128   -> mbedtls_ecp_is_zero
       128   -> mbedtls_ecp_muladd
       128   -> mbedtls_ecp_point_free
       128   -> mbedtls_ecp_point_init
       128   -> mbedtls_mpi_cmp_int
       128   -> mbedtls_mpi_cmp_mpi
       128   -> mbedtls_mpi_free
       128   -> mbedtls_mpi_init
       128   -> mbedtls_mpi_inv_mod
       128   -> mbedtls_mpi_mod_mpi
       128   -> mbedtls_mpi_mul_mpi
     200   mbedtls_ecdsa_write_signature
       200   -> __aeabi_memcpy
       200   -> mbedtls_asn1_write_len
       200   -> mbedtls_asn1_write_mpi
       200   -> mbedtls_asn1_write_tag
       200   -> mbedtls_ecdsa_sign_det
       200   -> mbedtls_mpi_free
       200   -> mbedtls_mpi_init
      24   mbedtls_ecdsa_write_signature_det
        24   -> mbedtls_ecdsa_write_signature


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable2
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
      84  derive_mpi
       8  mbedtls_ecdsa_free
      56  mbedtls_ecdsa_from_keypair
      50  mbedtls_ecdsa_genkey
       8  mbedtls_ecdsa_init
     146  mbedtls_ecdsa_read_signature
     354  mbedtls_ecdsa_sign
     144  mbedtls_ecdsa_sign_det
     308  mbedtls_ecdsa_verify
     162  mbedtls_ecdsa_write_signature
      30  mbedtls_ecdsa_write_signature_det

 
 1 378 bytes in section .text
 
 1 378 bytes of CODE memory

Errors: none
Warnings: none
