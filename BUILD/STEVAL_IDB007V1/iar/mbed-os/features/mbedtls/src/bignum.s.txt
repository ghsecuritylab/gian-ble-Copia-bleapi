###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:25
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\mbedtls\src\bignum.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\bignum.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\bignum.s.txt
#        -o .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\bignum.o
#        .\mbed-os\features\mbedtls\src\bignum.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\bignum.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\bignum.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\mbedtls\src\bignum.c
      1          /*
      2           *  Multi-precision integer library
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          /*
     23           *  The following sources were referenced in the design of this Multi-precision
     24           *  Integer library:
     25           *
     26           *  [1] Handbook of Applied Cryptography - 1997
     27           *      Menezes, van Oorschot and Vanstone
     28           *
     29           *  [2] Multi-Precision Math
     30           *      Tom St Denis
     31           *      https://github.com/libtom/libtommath/blob/develop/tommath.pdf
     32           *
     33           *  [3] GNU Multi-Precision Arithmetic Library
     34           *      https://gmplib.org/manual/index.html
     35           *
     36           */
     37          
     38          #if !defined(MBEDTLS_CONFIG_FILE)
     39          #include "mbedtls/config.h"
     40          #else
     41          #include MBEDTLS_CONFIG_FILE
     42          #endif
     43          
     44          #if defined(MBEDTLS_BIGNUM_C)
     45          
     46          #include "mbedtls/bignum.h"
     47          #include "mbedtls/bn_mul.h"
     48          
     49          #include <string.h>
     50          
     51          #if defined(MBEDTLS_PLATFORM_C)
     52          #include "mbedtls/platform.h"
     53          #else
     54          #include <stdio.h>
     55          #include <stdlib.h>
     56          #define mbedtls_printf     printf
     57          #define mbedtls_calloc    calloc
     58          #define mbedtls_free       free
     59          #endif
     60          
     61          /* Implementation that should never be optimized out by the compiler */

   \                                 In section .text, align 2, keep-with-next
     62          static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {
     63              volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
   \                     mbedtls_mpi_zeroize: (+1)
   \   00000000   0x2900             CMP      R1,#+0
   \   00000002   0xD100             BNE      ??mbedtls_mpi_zeroize_0
   \   00000004   0x4770             BX       LR
   \                     ??mbedtls_mpi_zeroize_0: (+1)
   \   00000006   0xB580             PUSH     {R7,LR}
   \   00000008   0x0089             LSLS     R1,R1,#+2
   \   0000000A   0x.... 0x....      BL       __aeabi_memclr
     64          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
     65          
     66          #define ciL    (sizeof(mbedtls_mpi_uint))         /* chars in limb  */
     67          #define biL    (ciL << 3)               /* bits  in limb  */
     68          #define biH    (ciL << 2)               /* half limb size */
     69          
     70          #define MPI_SIZE_T_MAX  ( (size_t) -1 ) /* SIZE_T_MAX is not standard */
     71          
     72          /*
     73           * Convert between bits/chars and number of limbs
     74           * Divide first in order to avoid potential overflows
     75           */
     76          #define BITS_TO_LIMBS(i)  ( (i) / biL + ( (i) % biL != 0 ) )
     77          #define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )
     78          
     79          /*
     80           * Initialize one MPI
     81           */

   \                                 In section .text, align 2, keep-with-next
     82          void mbedtls_mpi_init( mbedtls_mpi *X )
     83          {
     84              if( X == NULL )
   \                     mbedtls_mpi_init: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD004             BEQ      ??mbedtls_mpi_init_0
     85                  return;
     86          
     87              X->s = 1;
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x6001             STR      R1,[R0, #+0]
     88              X->n = 0;
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x6041             STR      R1,[R0, #+4]
     89              X->p = NULL;
   \   0000000C   0x6081             STR      R1,[R0, #+8]
     90          }
   \                     ??mbedtls_mpi_init_0: (+1)
   \   0000000E   0x4770             BX       LR               ;; return
     91          
     92          /*
     93           * Unallocate one MPI
     94           */

   \                                 In section .text, align 2, keep-with-next
     95          void mbedtls_mpi_free( mbedtls_mpi *X )
     96          {
   \                     mbedtls_mpi_free: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     97              if( X == NULL )
   \   00000004   0xD00D             BEQ      ??mbedtls_mpi_free_0
     98                  return;
     99          
    100              if( X->p != NULL )
   \   00000006   0x68A0             LDR      R0,[R4, #+8]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD005             BEQ      ??mbedtls_mpi_free_1
    101              {
    102                  mbedtls_mpi_zeroize( X->p, X->n );
   \   0000000C   0x6861             LDR      R1,[R4, #+4]
   \   0000000E   0x.... 0x....      BL       mbedtls_mpi_zeroize
    103                  mbedtls_free( X->p );
   \   00000012   0x68A0             LDR      R0,[R4, #+8]
   \   00000014   0x.... 0x....      BL       free
    104              }
    105          
    106              X->s = 1;
   \                     ??mbedtls_mpi_free_1: (+1)
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x6020             STR      R0,[R4, #+0]
    107              X->n = 0;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x6060             STR      R0,[R4, #+4]
    108              X->p = NULL;
   \   00000020   0x60A0             STR      R0,[R4, #+8]
    109          }
   \                     ??mbedtls_mpi_free_0: (+1)
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    110          
    111          /*
    112           * Enlarge to the specified number of limbs
    113           */

   \                                 In section .text, align 2, keep-with-next
    114          int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
    115          {
   \                     mbedtls_mpi_grow: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    116              mbedtls_mpi_uint *p;
    117          
    118              if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
   \   00000006   0x....             LDR      R0,??DataTable20  ;; 0x2711
   \   00000008   0x4285             CMP      R5,R0
   \   0000000A   0xD208             BCS      ??mbedtls_mpi_grow_0
    119                  return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    120          
    121              if( X->n < nblimbs )
   \   0000000C   0x6860             LDR      R0,[R4, #+4]
   \   0000000E   0x42A8             CMP      R0,R5
   \   00000010   0xD219             BCS      ??mbedtls_mpi_grow_1
    122              {
    123                  if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
   \   00000012   0x2104             MOVS     R1,#+4
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0x.... 0x....      BL       calloc
   \   0000001A   0x0006             MOVS     R6,R0
   \   0000001C   0xD102             BNE      ??mbedtls_mpi_grow_2
    124                      return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   \                     ??mbedtls_mpi_grow_0: (+1)
   \   0000001E   0x200F             MOVS     R0,#+15
   \   00000020   0x43C0             MVNS     R0,R0            ;; #-16
   \   00000022   0xBD70             POP      {R4-R6,PC}
    125          
    126                  if( X->p != NULL )
   \                     ??mbedtls_mpi_grow_2: (+1)
   \   00000024   0x68A1             LDR      R1,[R4, #+8]
   \   00000026   0x2900             CMP      R1,#+0
   \   00000028   0xD00B             BEQ      ??mbedtls_mpi_grow_3
    127                  {
    128                      memcpy( p, X->p, X->n * ciL );
   \   0000002A   0x6860             LDR      R0,[R4, #+4]
   \   0000002C   0x0082             LSLS     R2,R0,#+2
   \   0000002E   0x0030             MOVS     R0,R6
   \   00000030   0x.... 0x....      BL       __aeabi_memcpy
    129                      mbedtls_mpi_zeroize( X->p, X->n );
   \   00000034   0x6861             LDR      R1,[R4, #+4]
   \   00000036   0x68A0             LDR      R0,[R4, #+8]
   \   00000038   0x.... 0x....      BL       mbedtls_mpi_zeroize
    130                      mbedtls_free( X->p );
   \   0000003C   0x68A0             LDR      R0,[R4, #+8]
   \   0000003E   0x.... 0x....      BL       free
    131                  }
    132          
    133                  X->n = nblimbs;
   \                     ??mbedtls_mpi_grow_3: (+1)
   \   00000042   0x6065             STR      R5,[R4, #+4]
    134                  X->p = p;
   \   00000044   0x60A6             STR      R6,[R4, #+8]
    135              }
    136          
    137              return( 0 );
   \                     ??mbedtls_mpi_grow_1: (+1)
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0xBD70             POP      {R4-R6,PC}       ;; return
    138          }
    139          
    140          /*
    141           * Resize down as much as possible,
    142           * while keeping at least the specified number of limbs
    143           */

   \                                 In section .text, align 2, keep-with-next
    144          int mbedtls_mpi_shrink( mbedtls_mpi *X, size_t nblimbs )
    145          {
   \                     mbedtls_mpi_shrink: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    146              mbedtls_mpi_uint *p;
    147              size_t i;
    148          
    149              /* Actually resize up in this case */
    150              if( X->n <= nblimbs )
   \   00000004   0x6866             LDR      R6,[R4, #+4]
   \   00000006   0x42B1             CMP      R1,R6
   \   00000008   0xD302             BCC      ??mbedtls_mpi_shrink_0
    151                  return( mbedtls_mpi_grow( X, nblimbs ) );
   \   0000000A   0x.... 0x....      BL       mbedtls_mpi_grow
   \   0000000E   0xBD70             POP      {R4-R6,PC}
    152          
    153              for( i = X->n - 1; i > 0; i-- )
   \                     ??mbedtls_mpi_shrink_0: (+1)
   \   00000010   0x1E76             SUBS     R6,R6,#+1
   \   00000012   0x68A0             LDR      R0,[R4, #+8]
   \   00000014   0x00B2             LSLS     R2,R6,#+2
   \   00000016   0x1880             ADDS     R0,R0,R2
   \   00000018   0xE001             B        ??mbedtls_mpi_shrink_1
   \                     ??mbedtls_mpi_shrink_2: (+1)
   \   0000001A   0x1E76             SUBS     R6,R6,#+1
   \   0000001C   0x1F00             SUBS     R0,R0,#+4
   \                     ??mbedtls_mpi_shrink_1: (+1)
   \   0000001E   0x2E00             CMP      R6,#+0
   \   00000020   0xD002             BEQ      ??mbedtls_mpi_shrink_3
    154                  if( X->p[i] != 0 )
   \   00000022   0x6802             LDR      R2,[R0, #+0]
   \   00000024   0x2A00             CMP      R2,#+0
   \   00000026   0xD0F8             BEQ      ??mbedtls_mpi_shrink_2
    155                      break;
    156              i++;
   \                     ??mbedtls_mpi_shrink_3: (+1)
   \   00000028   0x1C76             ADDS     R6,R6,#+1
    157          
    158              if( i < nblimbs )
   \   0000002A   0x428E             CMP      R6,R1
   \   0000002C   0xD200             BCS      ??mbedtls_mpi_shrink_4
   \   0000002E   0x000E             MOVS     R6,R1
    159                  i = nblimbs;
    160          
    161              if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )
   \                     ??mbedtls_mpi_shrink_4: (+1)
   \   00000030   0x2104             MOVS     R1,#+4
   \   00000032   0x0030             MOVS     R0,R6
   \   00000034   0x.... 0x....      BL       calloc
   \   00000038   0x0005             MOVS     R5,R0
   \   0000003A   0xD102             BNE      ??mbedtls_mpi_shrink_5
    162                  return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   \   0000003C   0x200F             MOVS     R0,#+15
   \   0000003E   0x43C0             MVNS     R0,R0            ;; #-16
   \   00000040   0xBD70             POP      {R4-R6,PC}
    163          
    164              if( X->p != NULL )
   \                     ??mbedtls_mpi_shrink_5: (+1)
   \   00000042   0x68A1             LDR      R1,[R4, #+8]
   \   00000044   0x2900             CMP      R1,#+0
   \   00000046   0xD009             BEQ      ??mbedtls_mpi_shrink_6
    165              {
    166                  memcpy( p, X->p, i * ciL );
   \   00000048   0x00B2             LSLS     R2,R6,#+2
   \   0000004A   0x.... 0x....      BL       __aeabi_memcpy
    167                  mbedtls_mpi_zeroize( X->p, X->n );
   \   0000004E   0x6861             LDR      R1,[R4, #+4]
   \   00000050   0x68A0             LDR      R0,[R4, #+8]
   \   00000052   0x.... 0x....      BL       mbedtls_mpi_zeroize
    168                  mbedtls_free( X->p );
   \   00000056   0x68A0             LDR      R0,[R4, #+8]
   \   00000058   0x.... 0x....      BL       free
    169              }
    170          
    171              X->n = i;
   \                     ??mbedtls_mpi_shrink_6: (+1)
   \   0000005C   0x6066             STR      R6,[R4, #+4]
    172              X->p = p;
   \   0000005E   0x60A5             STR      R5,[R4, #+8]
    173          
    174              return( 0 );
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0xBD70             POP      {R4-R6,PC}       ;; return
    175          }
    176          
    177          /*
    178           * Copy the contents of Y into X
    179           */

   \                                 In section .text, align 2, keep-with-next
    180          int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
    181          {
   \                     mbedtls_mpi_copy: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    182              int ret;
    183              size_t i;
    184          
    185              if( X == Y )
   \   00000006   0x42AC             CMP      R4,R5
   \   00000008   0xD005             BEQ      ??mbedtls_mpi_copy_0
    186                  return( 0 );
    187          
    188              if( Y->p == NULL )
   \   0000000A   0x68A8             LDR      R0,[R5, #+8]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD104             BNE      ??mbedtls_mpi_copy_1
    189              {
    190                  mbedtls_mpi_free( X );
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       mbedtls_mpi_free
    191                  return( 0 );
   \                     ??mbedtls_mpi_copy_0: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xBDF2             POP      {R1,R4-R7,PC}
    192              }
    193          
    194              for( i = Y->n - 1; i > 0; i-- )
   \                     ??mbedtls_mpi_copy_1: (+1)
   \   0000001A   0x686E             LDR      R6,[R5, #+4]
   \   0000001C   0x1E76             SUBS     R6,R6,#+1
   \   0000001E   0x00B1             LSLS     R1,R6,#+2
   \   00000020   0x1840             ADDS     R0,R0,R1
   \   00000022   0xE001             B        ??mbedtls_mpi_copy_2
   \                     ??mbedtls_mpi_copy_3: (+1)
   \   00000024   0x1E76             SUBS     R6,R6,#+1
   \   00000026   0x1F00             SUBS     R0,R0,#+4
   \                     ??mbedtls_mpi_copy_2: (+1)
   \   00000028   0x2E00             CMP      R6,#+0
   \   0000002A   0xD002             BEQ      ??mbedtls_mpi_copy_4
    195                  if( Y->p[i] != 0 )
   \   0000002C   0x6801             LDR      R1,[R0, #+0]
   \   0000002E   0x2900             CMP      R1,#+0
   \   00000030   0xD0F8             BEQ      ??mbedtls_mpi_copy_3
    196                      break;
    197              i++;
   \                     ??mbedtls_mpi_copy_4: (+1)
   \   00000032   0x1C76             ADDS     R6,R6,#+1
    198          
    199              X->s = Y->s;
   \   00000034   0x6828             LDR      R0,[R5, #+0]
   \   00000036   0x6020             STR      R0,[R4, #+0]
    200          
    201              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
   \   00000038   0x0031             MOVS     R1,R6
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x.... 0x....      BL       mbedtls_mpi_grow
   \   00000040   0x0007             MOVS     R7,R0
   \   00000042   0xD109             BNE      ??mbedtls_mpi_copy_5
    202          
    203              memset( X->p, 0, X->n * ciL );
   \   00000044   0x6860             LDR      R0,[R4, #+4]
   \   00000046   0x0081             LSLS     R1,R0,#+2
   \   00000048   0x68A0             LDR      R0,[R4, #+8]
   \   0000004A   0x.... 0x....      BL       __aeabi_memclr4
    204              memcpy( X->p, Y->p, i * ciL );
   \   0000004E   0x00B2             LSLS     R2,R6,#+2
   \   00000050   0x68A9             LDR      R1,[R5, #+8]
   \   00000052   0x68A0             LDR      R0,[R4, #+8]
   \   00000054   0x.... 0x....      BL       __aeabi_memcpy4
    205          
    206          cleanup:
    207          
    208              return( ret );
   \                     ??mbedtls_mpi_copy_5: (+1)
   \   00000058   0x0038             MOVS     R0,R7
   \   0000005A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    209          }
    210          
    211          /*
    212           * Swap the contents of X and Y
    213           */

   \                                 In section .text, align 2, keep-with-next
    214          void mbedtls_mpi_swap( mbedtls_mpi *X, mbedtls_mpi *Y )
    215          {
   \                     mbedtls_mpi_swap: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0xB083             SUB      SP,SP,#+12
    216              mbedtls_mpi T;
    217          
    218              memcpy( &T,  X, sizeof( mbedtls_mpi ) );
   \   00000004   0x466A             MOV      R2,SP
   \   00000006   0xC838             LDM      R0!,{R3-R5}
   \   00000008   0xC238             STM      R2!,{R3-R5}
   \   0000000A   0x380C             SUBS     R0,R0,#+12
    219              memcpy(  X,  Y, sizeof( mbedtls_mpi ) );
   \   0000000C   0xC91C             LDM      R1!,{R2-R4}
   \   0000000E   0xC01C             STM      R0!,{R2-R4}
   \   00000010   0x390C             SUBS     R1,R1,#+12
    220              memcpy(  Y, &T, sizeof( mbedtls_mpi ) );
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0xC81C             LDM      R0!,{R2-R4}
   \   00000016   0xC11C             STM      R1!,{R2-R4}
    221          }
   \   00000018   0xB003             ADD      SP,SP,#+12
   \   0000001A   0xBC30             POP      {R4,R5}
   \   0000001C   0x4770             BX       LR               ;; return
    222          
    223          /*
    224           * Conditionally assign X = Y, without leaking information
    225           * about whether the assignment was made or not.
    226           * (Leaking information about the respective sizes of X and Y is ok however.)
    227           */

   \                                 In section .text, align 2, keep-with-next
    228          int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned char assign )
    229          {
   \                     mbedtls_mpi_safe_cond_assign: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    230              int ret = 0;
    231              size_t i;
    232          
    233              /* make sure assign is 0 or 1 in a time-constant manner */
    234              assign = (assign | (unsigned char)-assign) >> 7;
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x4251             RSBS     R1,R2,#+0
   \   0000000C   0x4311             ORRS     R1,R1,R2
   \   0000000E   0x0609             LSLS     R1,R1,#+24
   \   00000010   0x0FC9             LSRS     R1,R1,#+31
   \   00000012   0x7201             STRB     R1,[R0, #+8]
    235          
    236              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
   \   00000014   0x6869             LDR      R1,[R5, #+4]
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x.... 0x....      BL       mbedtls_mpi_grow
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD12D             BNE      ??mbedtls_mpi_safe_cond_assign_0
    237          
    238              X->s = X->s * ( 1 - assign ) + Y->s * assign;
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x7A09             LDRB     R1,[R1, #+8]
   \   00000024   0x2201             MOVS     R2,#+1
   \   00000026   0x1A52             SUBS     R2,R2,R1
   \   00000028   0x9200             STR      R2,[SP, #+0]
   \   0000002A   0x6822             LDR      R2,[R4, #+0]
   \   0000002C   0x9B00             LDR      R3,[SP, #+0]
   \   0000002E   0x435A             MULS     R2,R3,R2
   \   00000030   0x682B             LDR      R3,[R5, #+0]
   \   00000032   0x434B             MULS     R3,R1,R3
   \   00000034   0x18D1             ADDS     R1,R2,R3
   \   00000036   0x6021             STR      R1,[R4, #+0]
    239          
    240              for( i = 0; i < Y->n; i++ )
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0x68A2             LDR      R2,[R4, #+8]
   \   0000003C   0x9201             STR      R2,[SP, #+4]
   \   0000003E   0x68AB             LDR      R3,[R5, #+8]
   \   00000040   0xE00D             B        ??mbedtls_mpi_safe_cond_assign_1
    241                  X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;
   \                     ??mbedtls_mpi_safe_cond_assign_2: (+1)
   \   00000042   0x6816             LDR      R6,[R2, #+0]
   \   00000044   0x9F00             LDR      R7,[SP, #+0]
   \   00000046   0x437E             MULS     R6,R7,R6
   \   00000048   0x46B4             MOV      R12,R6
   \   0000004A   0x681F             LDR      R7,[R3, #+0]
   \   0000004C   0x466E             MOV      R6,SP
   \   0000004E   0x7A36             LDRB     R6,[R6, #+8]
   \   00000050   0x4377             MULS     R7,R6,R7
   \   00000052   0x4666             MOV      R6,R12
   \   00000054   0x19F6             ADDS     R6,R6,R7
   \   00000056   0x6016             STR      R6,[R2, #+0]
   \   00000058   0x1C49             ADDS     R1,R1,#+1
   \   0000005A   0x1D1B             ADDS     R3,R3,#+4
   \   0000005C   0x1D12             ADDS     R2,R2,#+4
   \                     ??mbedtls_mpi_safe_cond_assign_1: (+1)
   \   0000005E   0x686E             LDR      R6,[R5, #+4]
   \   00000060   0x42B1             CMP      R1,R6
   \   00000062   0xD3EE             BCC      ??mbedtls_mpi_safe_cond_assign_2
    242          
    243              for( ; i < X->n; i++ )
   \                     ??mbedtls_mpi_safe_cond_assign_3: (+1)
   \   00000064   0x6862             LDR      R2,[R4, #+4]
   \   00000066   0x4291             CMP      R1,R2
   \   00000068   0xD208             BCS      ??mbedtls_mpi_safe_cond_assign_0
    244                  X->p[i] *= ( 1 - assign );
   \   0000006A   0x9A01             LDR      R2,[SP, #+4]
   \   0000006C   0x008B             LSLS     R3,R1,#+2
   \   0000006E   0x18D2             ADDS     R2,R2,R3
   \   00000070   0x6813             LDR      R3,[R2, #+0]
   \   00000072   0x9D00             LDR      R5,[SP, #+0]
   \   00000074   0x436B             MULS     R3,R5,R3
   \   00000076   0x6013             STR      R3,[R2, #+0]
   \   00000078   0x1C49             ADDS     R1,R1,#+1
   \   0000007A   0xE7F3             B        ??mbedtls_mpi_safe_cond_assign_3
    245          
    246          cleanup:
    247              return( ret );
   \                     ??mbedtls_mpi_safe_cond_assign_0: (+1)
   \   0000007C   0xB003             ADD      SP,SP,#+12
   \   0000007E   0xBDF0             POP      {R4-R7,PC}       ;; return
    248          }
    249          
    250          /*
    251           * Conditionally swap X and Y, without leaking information
    252           * about whether the swap was made or not.
    253           * Here it is not ok to simply swap the pointers, which whould lead to
    254           * different memory access patterns when X and Y are used afterwards.
    255           */

   \                                 In section .text, align 2, keep-with-next
    256          int mbedtls_mpi_safe_cond_swap( mbedtls_mpi *X, mbedtls_mpi *Y, unsigned char swap )
    257          {
   \                     mbedtls_mpi_safe_cond_swap: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0016             MOVS     R6,R2
    258              int ret, s;
    259              size_t i;
    260              mbedtls_mpi_uint tmp;
    261          
    262              if( X == Y )
   \   0000000A   0x42A5             CMP      R5,R4
   \   0000000C   0xD101             BNE      ??mbedtls_mpi_safe_cond_swap_0
    263                  return( 0 );
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE03A             B        ??mbedtls_mpi_safe_cond_swap_1
    264          
    265              /* make sure swap is 0 or 1 in a time-constant manner */
    266              swap = (swap | (unsigned char)-swap) >> 7;
   \                     ??mbedtls_mpi_safe_cond_swap_0: (+1)
   \   00000012   0x4270             RSBS     R0,R6,#+0
   \   00000014   0x4330             ORRS     R0,R0,R6
   \   00000016   0x0606             LSLS     R6,R0,#+24
   \   00000018   0x0FF6             LSRS     R6,R6,#+31
    267          
    268              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
   \   0000001A   0x6861             LDR      R1,[R4, #+4]
   \   0000001C   0x0028             MOVS     R0,R5
   \   0000001E   0x.... 0x....      BL       mbedtls_mpi_grow
   \   00000022   0x9001             STR      R0,[SP, #+4]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD12E             BNE      ??mbedtls_mpi_safe_cond_swap_2
    269              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( Y, X->n ) );
   \   00000028   0x6869             LDR      R1,[R5, #+4]
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x.... 0x....      BL       mbedtls_mpi_grow
   \   00000030   0x9001             STR      R0,[SP, #+4]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD127             BNE      ??mbedtls_mpi_safe_cond_swap_2
    270          
    271              s = X->s;
   \   00000036   0x6828             LDR      R0,[R5, #+0]
    272              X->s = X->s * ( 1 - swap ) + Y->s * swap;
   \   00000038   0x2101             MOVS     R1,#+1
   \   0000003A   0x1B89             SUBS     R1,R1,R6
   \   0000003C   0x9100             STR      R1,[SP, #+0]
   \   0000003E   0x0002             MOVS     R2,R0
   \   00000040   0x434A             MULS     R2,R1,R2
   \   00000042   0x6821             LDR      R1,[R4, #+0]
   \   00000044   0x4371             MULS     R1,R6,R1
   \   00000046   0x1851             ADDS     R1,R2,R1
   \   00000048   0x6029             STR      R1,[R5, #+0]
    273              Y->s = Y->s * ( 1 - swap ) +    s * swap;
   \   0000004A   0x6821             LDR      R1,[R4, #+0]
   \   0000004C   0x9A00             LDR      R2,[SP, #+0]
   \   0000004E   0x4351             MULS     R1,R2,R1
   \   00000050   0x4370             MULS     R0,R6,R0
   \   00000052   0x1808             ADDS     R0,R1,R0
   \   00000054   0x6020             STR      R0,[R4, #+0]
    274          
    275          
    276              for( i = 0; i < X->n; i++ )
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x68A9             LDR      R1,[R5, #+8]
   \   0000005A   0x68A2             LDR      R2,[R4, #+8]
   \   0000005C   0xE010             B        ??mbedtls_mpi_safe_cond_swap_3
    277              {
    278                  tmp = X->p[i];
   \                     ??mbedtls_mpi_safe_cond_swap_4: (+1)
   \   0000005E   0x680C             LDR      R4,[R1, #+0]
   \   00000060   0x0023             MOVS     R3,R4
    279                  X->p[i] = X->p[i] * ( 1 - swap ) + Y->p[i] * swap;
   \   00000062   0x9F00             LDR      R7,[SP, #+0]
   \   00000064   0x437C             MULS     R4,R7,R4
   \   00000066   0x6817             LDR      R7,[R2, #+0]
   \   00000068   0x4377             MULS     R7,R6,R7
   \   0000006A   0x19E4             ADDS     R4,R4,R7
   \   0000006C   0x600C             STR      R4,[R1, #+0]
    280                  Y->p[i] = Y->p[i] * ( 1 - swap ) +     tmp * swap;
   \   0000006E   0x6814             LDR      R4,[R2, #+0]
   \   00000070   0x9F00             LDR      R7,[SP, #+0]
   \   00000072   0x437C             MULS     R4,R7,R4
   \   00000074   0x4373             MULS     R3,R6,R3
   \   00000076   0x18E3             ADDS     R3,R4,R3
   \   00000078   0x6013             STR      R3,[R2, #+0]
    281              }
   \   0000007A   0x1C40             ADDS     R0,R0,#+1
   \   0000007C   0x1D12             ADDS     R2,R2,#+4
   \   0000007E   0x1D09             ADDS     R1,R1,#+4
   \                     ??mbedtls_mpi_safe_cond_swap_3: (+1)
   \   00000080   0x686B             LDR      R3,[R5, #+4]
   \   00000082   0x4298             CMP      R0,R3
   \   00000084   0xD3EB             BCC      ??mbedtls_mpi_safe_cond_swap_4
    282          
    283          cleanup:
    284              return( ret );
   \                     ??mbedtls_mpi_safe_cond_swap_2: (+1)
   \   00000086   0x9801             LDR      R0,[SP, #+4]
   \                     ??mbedtls_mpi_safe_cond_swap_1: (+1)
   \   00000088   0xB003             ADD      SP,SP,#+12
   \   0000008A   0xBDF0             POP      {R4-R7,PC}       ;; return
    285          }
    286          
    287          /*
    288           * Set value from integer
    289           */

   \                                 In section .text, align 2, keep-with-next
    290          int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
    291          {
   \                     mbedtls_mpi_lset: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    292              int ret;
    293          
    294              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x.... 0x....      BL       mbedtls_mpi_grow
   \   0000000C   0x0006             MOVS     R6,R0
   \   0000000E   0xD112             BNE      ??mbedtls_mpi_lset_0
    295              memset( X->p, 0, X->n * ciL );
   \   00000010   0x6868             LDR      R0,[R5, #+4]
   \   00000012   0x0081             LSLS     R1,R0,#+2
   \   00000014   0x68A8             LDR      R0,[R5, #+8]
   \   00000016   0x.... 0x....      BL       __aeabi_memclr4
    296          
    297              X->p[0] = ( z < 0 ) ? -z : z;
   \   0000001A   0x2C00             CMP      R4,#+0
   \   0000001C   0xD501             BPL      ??mbedtls_mpi_lset_1
   \   0000001E   0x4260             RSBS     R0,R4,#+0
   \   00000020   0xE000             B        ??mbedtls_mpi_lset_2
   \                     ??mbedtls_mpi_lset_1: (+1)
   \   00000022   0x0020             MOVS     R0,R4
   \                     ??mbedtls_mpi_lset_2: (+1)
   \   00000024   0x68A9             LDR      R1,[R5, #+8]
   \   00000026   0x6008             STR      R0,[R1, #+0]
    298              X->s    = ( z < 0 ) ? -1 : 1;
   \   00000028   0x2C00             CMP      R4,#+0
   \   0000002A   0xD502             BPL      ??mbedtls_mpi_lset_3
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000030   0xE000             B        ??mbedtls_mpi_lset_4
   \                     ??mbedtls_mpi_lset_3: (+1)
   \   00000032   0x2001             MOVS     R0,#+1
   \                     ??mbedtls_mpi_lset_4: (+1)
   \   00000034   0x6028             STR      R0,[R5, #+0]
    299          
    300          cleanup:
    301          
    302              return( ret );
   \                     ??mbedtls_mpi_lset_0: (+1)
   \   00000036   0x0030             MOVS     R0,R6
   \   00000038   0xBD70             POP      {R4-R6,PC}       ;; return
    303          }
    304          
    305          /*
    306           * Get a specific bit
    307           */

   \                                 In section .text, align 2, keep-with-next
    308          int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
    309          {
    310              if( X->n * biL <= pos )
   \                     mbedtls_mpi_get_bit: (+1)
   \   00000000   0x6842             LDR      R2,[R0, #+4]
   \   00000002   0x0152             LSLS     R2,R2,#+5
   \   00000004   0x4291             CMP      R1,R2
   \   00000006   0xD301             BCC      ??mbedtls_mpi_get_bit_0
    311                  return( 0 );
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x4770             BX       LR
    312          
    313              return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
   \                     ??mbedtls_mpi_get_bit_0: (+1)
   \   0000000C   0x6880             LDR      R0,[R0, #+8]
   \   0000000E   0x094A             LSRS     R2,R1,#+5
   \   00000010   0x0092             LSLS     R2,R2,#+2
   \   00000012   0x5882             LDR      R2,[R0, R2]
   \   00000014   0x06C8             LSLS     R0,R1,#+27
   \   00000016   0x0EC0             LSRS     R0,R0,#+27
   \   00000018   0x40C2             LSRS     R2,R2,R0
   \   0000001A   0x07D0             LSLS     R0,R2,#+31
   \   0000001C   0x0FC0             LSRS     R0,R0,#+31
   \   0000001E   0x4770             BX       LR               ;; return
    314          }
    315          
    316          /*
    317           * Set a bit to a specific value of 0 or 1
    318           */

   \                                 In section .text, align 2, keep-with-next
    319          int mbedtls_mpi_set_bit( mbedtls_mpi *X, size_t pos, unsigned char val )
    320          {
   \                     mbedtls_mpi_set_bit: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0015             MOVS     R5,R2
    321              int ret = 0;
   \   00000006   0x2000             MOVS     R0,#+0
    322              size_t off = pos / biL;
   \   00000008   0x094E             LSRS     R6,R1,#+5
    323              size_t idx = pos % biL;
   \   0000000A   0x06CF             LSLS     R7,R1,#+27
   \   0000000C   0x0EFF             LSRS     R7,R7,#+27
    324          
    325              if( val != 0 && val != 1 )
   \   0000000E   0x002A             MOVS     R2,R5
   \   00000010   0xD004             BEQ      ??mbedtls_mpi_set_bit_0
   \   00000012   0x2D01             CMP      R5,#+1
   \   00000014   0xD002             BEQ      ??mbedtls_mpi_set_bit_0
    326                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   \   00000016   0x2003             MOVS     R0,#+3
   \   00000018   0x43C0             MVNS     R0,R0            ;; #-4
   \   0000001A   0xBDF2             POP      {R1,R4-R7,PC}
    327          
    328              if( X->n * biL <= pos )
   \                     ??mbedtls_mpi_set_bit_0: (+1)
   \   0000001C   0x6862             LDR      R2,[R4, #+4]
   \   0000001E   0x0152             LSLS     R2,R2,#+5
   \   00000020   0x4291             CMP      R1,R2
   \   00000022   0xD309             BCC      ??mbedtls_mpi_set_bit_1
    329              {
    330                  if( val == 0 )
   \   00000024   0x0028             MOVS     R0,R5
   \   00000026   0xD101             BNE      ??mbedtls_mpi_set_bit_2
    331                      return( 0 );
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xBDF2             POP      {R1,R4-R7,PC}
    332          
    333                  MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, off + 1 ) );
   \                     ??mbedtls_mpi_set_bit_2: (+1)
   \   0000002C   0x1C71             ADDS     R1,R6,#+1
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0x.... 0x....      BL       mbedtls_mpi_grow
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD10A             BNE      ??mbedtls_mpi_set_bit_3
    334              }
    335          
    336              X->p[off] &= ~( (mbedtls_mpi_uint) 0x01 << idx );
   \                     ??mbedtls_mpi_set_bit_1: (+1)
   \   00000038   0x68A1             LDR      R1,[R4, #+8]
   \   0000003A   0x00B2             LSLS     R2,R6,#+2
   \   0000003C   0x1889             ADDS     R1,R1,R2
   \   0000003E   0x680A             LDR      R2,[R1, #+0]
   \   00000040   0x2301             MOVS     R3,#+1
   \   00000042   0x40BB             LSLS     R3,R3,R7
   \   00000044   0x439A             BICS     R2,R2,R3
   \   00000046   0x600A             STR      R2,[R1, #+0]
    337              X->p[off] |= (mbedtls_mpi_uint) val << idx;
   \   00000048   0x40BD             LSLS     R5,R5,R7
   \   0000004A   0x4315             ORRS     R5,R5,R2
   \   0000004C   0x600D             STR      R5,[R1, #+0]
    338          
    339          cleanup:
    340          
    341              return( ret );
   \                     ??mbedtls_mpi_set_bit_3: (+1)
   \   0000004E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    342          }
    343          
    344          /*
    345           * Return the number of less significant zero-bits
    346           */

   \                                 In section .text, align 2, keep-with-next
    347          size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
    348          {
   \                     mbedtls_mpi_lsb: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
   \   00000002   0x0001             MOVS     R1,R0
    349              size_t i, j, count = 0;
   \   00000004   0x2000             MOVS     R0,#+0
    350          
    351              for( i = 0; i < X->n; i++ )
   \   00000006   0x2400             MOVS     R4,#+0
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0x2301             MOVS     R3,#+1
   \   0000000C   0xE005             B        ??mbedtls_mpi_lsb_0
    352                  for( j = 0; j < biL; j++, count++ )
   \                     ??mbedtls_mpi_lsb_1: (+1)
   \   0000000E   0x1C76             ADDS     R6,R6,#+1
   \   00000010   0x1C40             ADDS     R0,R0,#+1
   \   00000012   0x2E20             CMP      R6,#+32
   \   00000014   0xD305             BCC      ??mbedtls_mpi_lsb_2
   \   00000016   0x1C64             ADDS     R4,R4,#+1
   \   00000018   0x1D2D             ADDS     R5,R5,#+4
   \                     ??mbedtls_mpi_lsb_0: (+1)
   \   0000001A   0x684E             LDR      R6,[R1, #+4]
   \   0000001C   0x42B4             CMP      R4,R6
   \   0000001E   0xD206             BCS      ??mbedtls_mpi_lsb_3
   \   00000020   0x2600             MOVS     R6,#+0
    353                      if( ( ( X->p[i] >> j ) & 1 ) != 0 )
   \                     ??mbedtls_mpi_lsb_2: (+1)
   \   00000022   0x688F             LDR      R7,[R1, #+8]
   \   00000024   0x597F             LDR      R7,[R7, R5]
   \   00000026   0x40F7             LSRS     R7,R7,R6
   \   00000028   0x401F             ANDS     R7,R7,R3
   \   0000002A   0xD0F0             BEQ      ??mbedtls_mpi_lsb_1
    354                          return( count );
   \   0000002C   0xE000             B        ??mbedtls_mpi_lsb_4
    355          
    356              return( 0 );
   \                     ??mbedtls_mpi_lsb_3: (+1)
   \   0000002E   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_mpi_lsb_4: (+1)
   \   00000030   0xBCF0             POP      {R4-R7}
   \   00000032   0x4770             BX       LR               ;; return
    357          }
    358          
    359          /*
    360           * Count leading zero bits in a given integer
    361           */
    362          static size_t mbedtls_clz( const mbedtls_mpi_uint x )
    363          {
    364              size_t j;
    365              mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    366          
    367              for( j = 0; j < biL; j++ )
    368              {
    369                  if( x & mask ) break;
    370          
    371                  mask >>= 1;
    372              }
    373          
    374              return j;
    375          }
    376          
    377          /*
    378           * Return the number of bits
    379           */

   \                                 In section .text, align 2, keep-with-next
    380          size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
    381          {
    382              size_t i, j;
    383          
    384              if( X->n == 0 )
   \                     mbedtls_mpi_bitlen: (+1)
   \   00000000   0x6841             LDR      R1,[R0, #+4]
   \   00000002   0x2900             CMP      R1,#+0
   \   00000004   0xD101             BNE      ??mbedtls_mpi_bitlen_0
    385                  return( 0 );
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x4770             BX       LR
    386          
    387              for( i = X->n - 1; i > 0; i-- )
   \                     ??mbedtls_mpi_bitlen_0: (+1)
   \   0000000A   0x1E49             SUBS     R1,R1,#+1
   \   0000000C   0x6880             LDR      R0,[R0, #+8]
   \   0000000E   0x008A             LSLS     R2,R1,#+2
   \   00000010   0x1882             ADDS     R2,R0,R2
   \   00000012   0xE001             B        ??mbedtls_mpi_bitlen_1
   \                     ??mbedtls_mpi_bitlen_2: (+1)
   \   00000014   0x1E49             SUBS     R1,R1,#+1
   \   00000016   0x1F12             SUBS     R2,R2,#+4
   \                     ??mbedtls_mpi_bitlen_1: (+1)
   \   00000018   0x2900             CMP      R1,#+0
   \   0000001A   0xD002             BEQ      ??mbedtls_mpi_bitlen_3
    388                  if( X->p[i] != 0 )
   \   0000001C   0x6813             LDR      R3,[R2, #+0]
   \   0000001E   0x2B00             CMP      R3,#+0
   \   00000020   0xD0F8             BEQ      ??mbedtls_mpi_bitlen_2
    389                      break;
    390          
    391              j = biL - mbedtls_clz( X->p[i] );
   \                     ??mbedtls_mpi_bitlen_3: (+1)
   \   00000022   0x008A             LSLS     R2,R1,#+2
   \   00000024   0x5880             LDR      R0,[R0, R2]
   \   00000026   0x2280             MOVS     R2,#+128
   \   00000028   0x0612             LSLS     R2,R2,#+24       ;; #-2147483648
   \   0000002A   0x2300             MOVS     R3,#+0
   \                     ??mbedtls_mpi_bitlen_4: (+1)
   \   0000002C   0x4210             TST      R0,R2
   \   0000002E   0xD103             BNE      ??mbedtls_mpi_bitlen_5
   \   00000030   0x0852             LSRS     R2,R2,#+1
   \   00000032   0x1C5B             ADDS     R3,R3,#+1
   \   00000034   0x2B20             CMP      R3,#+32
   \   00000036   0xD3F9             BCC      ??mbedtls_mpi_bitlen_4
    392          
    393              return( ( i * biL ) + j );
   \                     ??mbedtls_mpi_bitlen_5: (+1)
   \   00000038   0x0148             LSLS     R0,R1,#+5
   \   0000003A   0x3020             ADDS     R0,R0,#+32
   \   0000003C   0x1AC0             SUBS     R0,R0,R3
   \   0000003E   0x4770             BX       LR               ;; return
    394          }
    395          
    396          /*
    397           * Return the total size in bytes
    398           */

   \                                 In section .text, align 2, keep-with-next
    399          size_t mbedtls_mpi_size( const mbedtls_mpi *X )
    400          {
   \                     mbedtls_mpi_size: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    401              return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
   \   00000002   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   00000006   0x1DC0             ADDS     R0,R0,#+7
   \   00000008   0x08C0             LSRS     R0,R0,#+3
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
    402          }
    403          
    404          /*
    405           * Convert an ASCII character to digit value
    406           */
    407          static int mpi_get_digit( mbedtls_mpi_uint *d, int radix, char c )
    408          {
    409              *d = 255;
    410          
    411              if( c >= 0x30 && c <= 0x39 ) *d = c - 0x30;
    412              if( c >= 0x41 && c <= 0x46 ) *d = c - 0x37;
    413              if( c >= 0x61 && c <= 0x66 ) *d = c - 0x57;
    414          
    415              if( *d >= (mbedtls_mpi_uint) radix )
    416                  return( MBEDTLS_ERR_MPI_INVALID_CHARACTER );
    417          
    418              return( 0 );
    419          }
    420          
    421          /*
    422           * Import from an ASCII string
    423           */

   \                                 In section .text, align 2, keep-with-next
    424          int mbedtls_mpi_read_string( mbedtls_mpi *X, int radix, const char *s )
    425          {
   \                     mbedtls_mpi_read_string: (+1)
   \   00000000   0xB5F6             PUSH     {R1,R2,R4-R7,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   \   00000004   0x0007             MOVS     R7,R0
    426              int ret;
    427              size_t i, j, slen, n;
    428              mbedtls_mpi_uint d;
    429              mbedtls_mpi T;
    430          
    431              if( radix < 2 || radix > 16 )
   \   00000006   0x1E88             SUBS     R0,R1,#+2
   \   00000008   0x280F             CMP      R0,#+15
   \   0000000A   0xD20E             BCS      ??mbedtls_mpi_read_string_0
    432                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    433          
    434              mbedtls_mpi_init( &T );
   \   0000000C   0xA803             ADD      R0,SP,#+12
   \   0000000E   0x.... 0x....      BL       mbedtls_mpi_init
    435          
    436              slen = strlen( s );
   \   00000012   0x980A             LDR      R0,[SP, #+40]
   \   00000014   0x.... 0x....      BL       strlen
   \   00000018   0x9000             STR      R0,[SP, #+0]
    437          
    438              if( radix == 16 )
   \   0000001A   0x9809             LDR      R0,[SP, #+36]
   \   0000001C   0x2810             CMP      R0,#+16
   \   0000001E   0xD167             BNE      ??mbedtls_mpi_read_string_1
    439              {
    440                  if( slen > MPI_SIZE_T_MAX >> 2 )
   \   00000020   0x9800             LDR      R0,[SP, #+0]
   \   00000022   0x2180             MOVS     R1,#+128
   \   00000024   0x05C9             LSLS     R1,R1,#+23       ;; #+1073741824
   \   00000026   0x4288             CMP      R0,R1
   \   00000028   0xD302             BCC      ??mbedtls_mpi_read_string_2
    441                      return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   \                     ??mbedtls_mpi_read_string_0: (+1)
   \   0000002A   0x2003             MOVS     R0,#+3
   \   0000002C   0x43C0             MVNS     R0,R0            ;; #-4
   \   0000002E   0xE0C8             B        ??mbedtls_mpi_read_string_3
    442          
    443                  n = BITS_TO_LIMBS( slen << 2 );
   \                     ??mbedtls_mpi_read_string_2: (+1)
   \   00000030   0x0080             LSLS     R0,R0,#+2
   \   00000032   0x06C1             LSLS     R1,R0,#+27
   \   00000034   0x0EC9             LSRS     R1,R1,#+27
   \   00000036   0x1E49             SUBS     R1,R1,#+1
   \   00000038   0x4189             SBCS     R1,R1,R1
   \   0000003A   0x43C9             MVNS     R1,R1
   \   0000003C   0x0FC9             LSRS     R1,R1,#+31
    444          
    445                  MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n ) );
   \   0000003E   0x0940             LSRS     R0,R0,#+5
   \   00000040   0x1841             ADDS     R1,R0,R1
   \   00000042   0x0038             MOVS     R0,R7
   \   00000044   0x.... 0x....      BL       mbedtls_mpi_grow
   \   00000048   0x0006             MOVS     R6,R0
   \   0000004A   0xD000             BEQ      .+4
   \   0000004C   0xE0B5             B        ??mbedtls_mpi_read_string_4
    446                  MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   \   0000004E   0x2101             MOVS     R1,#+1
   \   00000050   0x0038             MOVS     R0,R7
   \   00000052   0x.... 0x....      BL       mbedtls_mpi_grow
   \   00000056   0x0006             MOVS     R6,R0
   \   00000058   0xD109             BNE      ??mbedtls_mpi_read_string_5
   \   0000005A   0x6878             LDR      R0,[R7, #+4]
   \   0000005C   0x0081             LSLS     R1,R0,#+2
   \   0000005E   0x68B8             LDR      R0,[R7, #+8]
   \   00000060   0x.... 0x....      BL       __aeabi_memclr4
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x68B9             LDR      R1,[R7, #+8]
   \   00000068   0x6008             STR      R0,[R1, #+0]
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0x6038             STR      R0,[R7, #+0]
   \                     ??mbedtls_mpi_read_string_5: (+1)
   \   0000006E   0x2E00             CMP      R6,#+0
   \   00000070   0xD000             BEQ      .+4
   \   00000072   0xE0A2             B        ??mbedtls_mpi_read_string_4
    447          
    448                  for( i = slen, j = 0; i > 0; i--, j++ )
   \   00000074   0x9D00             LDR      R5,[SP, #+0]
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x2D00             CMP      R5,#+0
   \   0000007A   0xD100             BNE      .+4
   \   0000007C   0xE09D             B        ??mbedtls_mpi_read_string_4
   \   0000007E   0x990A             LDR      R1,[SP, #+40]
   \   00000080   0x1949             ADDS     R1,R1,R5
   \   00000082   0x1E49             SUBS     R1,R1,#+1
    449                  {
    450                      if( i == 1 && s[i - 1] == '-' )
   \                     ??mbedtls_mpi_read_string_6: (+1)
   \   00000084   0x2D01             CMP      R5,#+1
   \   00000086   0xD107             BNE      ??mbedtls_mpi_read_string_7
   \   00000088   0x9A0A             LDR      R2,[SP, #+40]
   \   0000008A   0x7812             LDRB     R2,[R2, #+0]
   \   0000008C   0x2A2D             CMP      R2,#+45
   \   0000008E   0xD103             BNE      ??mbedtls_mpi_read_string_7
    451                      {
    452                          X->s = -1;
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000094   0x6038             STR      R0,[R7, #+0]
    453                          break;
   \   00000096   0xE090             B        ??mbedtls_mpi_read_string_4
    454                      }
    455          
    456                      MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i - 1] ) );
   \                     ??mbedtls_mpi_read_string_7: (+1)
   \   00000098   0x780A             LDRB     R2,[R1, #+0]
   \   0000009A   0x24FF             MOVS     R4,#+255
   \   0000009C   0x0013             MOVS     R3,R2
   \   0000009E   0x001E             MOVS     R6,R3
   \   000000A0   0x3E30             SUBS     R6,R6,#+48
   \   000000A2   0x2E0A             CMP      R6,#+10
   \   000000A4   0xD201             BCS      ??mbedtls_mpi_read_string_8
   \   000000A6   0x0014             MOVS     R4,R2
   \   000000A8   0x3C30             SUBS     R4,R4,#+48
   \                     ??mbedtls_mpi_read_string_8: (+1)
   \   000000AA   0x001E             MOVS     R6,R3
   \   000000AC   0x3E41             SUBS     R6,R6,#+65
   \   000000AE   0x2E06             CMP      R6,#+6
   \   000000B0   0xD201             BCS      ??mbedtls_mpi_read_string_9
   \   000000B2   0x0014             MOVS     R4,R2
   \   000000B4   0x3C37             SUBS     R4,R4,#+55
   \                     ??mbedtls_mpi_read_string_9: (+1)
   \   000000B6   0x3B61             SUBS     R3,R3,#+97
   \   000000B8   0x2B06             CMP      R3,#+6
   \   000000BA   0xD201             BCS      ??mbedtls_mpi_read_string_10
   \   000000BC   0x3A57             SUBS     R2,R2,#+87
   \   000000BE   0x0014             MOVS     R4,R2
   \                     ??mbedtls_mpi_read_string_10: (+1)
   \   000000C0   0x2C10             CMP      R4,#+16
   \   000000C2   0xD250             BCS      ??mbedtls_mpi_read_string_11
   \   000000C4   0x2600             MOVS     R6,#+0
    457                      X->p[j / ( 2 * ciL )] |= d << ( ( j % ( 2 * ciL ) ) << 2 );
   \   000000C6   0x68BA             LDR      R2,[R7, #+8]
   \   000000C8   0x08C3             LSRS     R3,R0,#+3
   \   000000CA   0x009B             LSLS     R3,R3,#+2
   \   000000CC   0x18D2             ADDS     R2,R2,R3
   \   000000CE   0x6813             LDR      R3,[R2, #+0]
   \   000000D0   0x9300             STR      R3,[SP, #+0]
   \   000000D2   0x46A4             MOV      R12,R4
   \   000000D4   0x0084             LSLS     R4,R0,#+2
   \   000000D6   0x231C             MOVS     R3,#+28
   \   000000D8   0x4023             ANDS     R3,R3,R4
   \   000000DA   0x4664             MOV      R4,R12
   \   000000DC   0x409C             LSLS     R4,R4,R3
   \   000000DE   0x9B00             LDR      R3,[SP, #+0]
   \   000000E0   0x431C             ORRS     R4,R4,R3
   \   000000E2   0x6014             STR      R4,[R2, #+0]
    458                  }
   \   000000E4   0x1E6D             SUBS     R5,R5,#+1
   \   000000E6   0x1C40             ADDS     R0,R0,#+1
   \   000000E8   0x1E49             SUBS     R1,R1,#+1
   \   000000EA   0x2D00             CMP      R5,#+0
   \   000000EC   0xD065             BEQ      ??mbedtls_mpi_read_string_4
   \   000000EE   0xE7C9             B        ??mbedtls_mpi_read_string_6
    459              }
    460              else
    461              {
    462                  MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   \                     ??mbedtls_mpi_read_string_1: (+1)
   \   000000F0   0x2101             MOVS     R1,#+1
   \   000000F2   0x0038             MOVS     R0,R7
   \   000000F4   0x.... 0x....      BL       mbedtls_mpi_grow
   \   000000F8   0x0006             MOVS     R6,R0
   \   000000FA   0xD109             BNE      ??mbedtls_mpi_read_string_12
   \   000000FC   0x6878             LDR      R0,[R7, #+4]
   \   000000FE   0x0081             LSLS     R1,R0,#+2
   \   00000100   0x68B8             LDR      R0,[R7, #+8]
   \   00000102   0x.... 0x....      BL       __aeabi_memclr4
   \   00000106   0x2000             MOVS     R0,#+0
   \   00000108   0x68B9             LDR      R1,[R7, #+8]
   \   0000010A   0x6008             STR      R0,[R1, #+0]
   \   0000010C   0x2001             MOVS     R0,#+1
   \   0000010E   0x6038             STR      R0,[R7, #+0]
   \                     ??mbedtls_mpi_read_string_12: (+1)
   \   00000110   0x2E00             CMP      R6,#+0
   \   00000112   0xD152             BNE      ??mbedtls_mpi_read_string_4
    463          
    464                  for( i = 0; i < slen; i++ )
   \   00000114   0x2500             MOVS     R5,#+0
   \   00000116   0x9800             LDR      R0,[SP, #+0]
   \   00000118   0x2800             CMP      R0,#+0
   \   0000011A   0xD04E             BEQ      ??mbedtls_mpi_read_string_4
   \   0000011C   0x980A             LDR      R0,[SP, #+40]
   \   0000011E   0x9001             STR      R0,[SP, #+4]
   \   00000120   0xE001             B        ??mbedtls_mpi_read_string_13
    465                  {
    466                      if( i == 0 && s[i] == '-' )
   \                     ??mbedtls_mpi_read_string_14: (+1)
   \   00000122   0x2D00             CMP      R5,#+0
   \   00000124   0xD107             BNE      ??mbedtls_mpi_read_string_15
   \                     ??mbedtls_mpi_read_string_13: (+1)
   \   00000126   0x980A             LDR      R0,[SP, #+40]
   \   00000128   0x7800             LDRB     R0,[R0, #+0]
   \   0000012A   0x282D             CMP      R0,#+45
   \   0000012C   0xD103             BNE      ??mbedtls_mpi_read_string_15
    467                      {
    468                          X->s = -1;
   \   0000012E   0x2000             MOVS     R0,#+0
   \   00000130   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000132   0x6038             STR      R0,[R7, #+0]
    469                          continue;
   \   00000134   0xE03A             B        ??mbedtls_mpi_read_string_16
    470                      }
    471          
    472                      MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i] ) );
   \                     ??mbedtls_mpi_read_string_15: (+1)
   \   00000136   0x9801             LDR      R0,[SP, #+4]
   \   00000138   0x7800             LDRB     R0,[R0, #+0]
   \   0000013A   0x24FF             MOVS     R4,#+255
   \   0000013C   0x0001             MOVS     R1,R0
   \   0000013E   0x000A             MOVS     R2,R1
   \   00000140   0x3A30             SUBS     R2,R2,#+48
   \   00000142   0x2A0A             CMP      R2,#+10
   \   00000144   0xD201             BCS      ??mbedtls_mpi_read_string_17
   \   00000146   0x0004             MOVS     R4,R0
   \   00000148   0x3C30             SUBS     R4,R4,#+48
   \                     ??mbedtls_mpi_read_string_17: (+1)
   \   0000014A   0x000A             MOVS     R2,R1
   \   0000014C   0x3A41             SUBS     R2,R2,#+65
   \   0000014E   0x2A06             CMP      R2,#+6
   \   00000150   0xD201             BCS      ??mbedtls_mpi_read_string_18
   \   00000152   0x0004             MOVS     R4,R0
   \   00000154   0x3C37             SUBS     R4,R4,#+55
   \                     ??mbedtls_mpi_read_string_18: (+1)
   \   00000156   0x3961             SUBS     R1,R1,#+97
   \   00000158   0x2906             CMP      R1,#+6
   \   0000015A   0xD201             BCS      ??mbedtls_mpi_read_string_19
   \   0000015C   0x0004             MOVS     R4,R0
   \   0000015E   0x3C57             SUBS     R4,R4,#+87
   \                     ??mbedtls_mpi_read_string_19: (+1)
   \   00000160   0x9809             LDR      R0,[SP, #+36]
   \   00000162   0x4284             CMP      R4,R0
   \   00000164   0xD302             BCC      ??mbedtls_mpi_read_string_20
   \                     ??mbedtls_mpi_read_string_11: (+1)
   \   00000166   0x2605             MOVS     R6,#+5
   \   00000168   0x43F6             MVNS     R6,R6            ;; #-6
   \   0000016A   0xE026             B        ??mbedtls_mpi_read_string_4
    473                      MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T, X, radix ) );
   \                     ??mbedtls_mpi_read_string_20: (+1)
   \   0000016C   0x2001             MOVS     R0,#+1
   \   0000016E   0x9006             STR      R0,[SP, #+24]
   \   00000170   0x9007             STR      R0,[SP, #+28]
   \   00000172   0xA802             ADD      R0,SP,#+8
   \   00000174   0x9008             STR      R0,[SP, #+32]
   \   00000176   0x9809             LDR      R0,[SP, #+36]
   \   00000178   0x9002             STR      R0,[SP, #+8]
   \   0000017A   0xAA06             ADD      R2,SP,#+24
   \   0000017C   0x0039             MOVS     R1,R7
   \   0000017E   0xA803             ADD      R0,SP,#+12
   \   00000180   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   00000184   0x0006             MOVS     R6,R0
   \   00000186   0xD118             BNE      ??mbedtls_mpi_read_string_4
    474          
    475                      if( X->s == 1 )
   \   00000188   0x6838             LDR      R0,[R7, #+0]
   \   0000018A   0x2801             CMP      R0,#+1
   \   0000018C   0xD107             BNE      ??mbedtls_mpi_read_string_21
    476                      {
    477                          MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, &T, d ) );
   \   0000018E   0x0022             MOVS     R2,R4
   \   00000190   0xA903             ADD      R1,SP,#+12
   \   00000192   0x0038             MOVS     R0,R7
   \   00000194   0x.... 0x....      BL       mbedtls_mpi_add_int
   \   00000198   0x0006             MOVS     R6,R0
   \   0000019A   0xD10E             BNE      ??mbedtls_mpi_read_string_4
   \   0000019C   0xE006             B        ??mbedtls_mpi_read_string_16
    478                      }
    479                      else
    480                      {
    481                          MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( X, &T, d ) );
   \                     ??mbedtls_mpi_read_string_21: (+1)
   \   0000019E   0x0022             MOVS     R2,R4
   \   000001A0   0xA903             ADD      R1,SP,#+12
   \   000001A2   0x0038             MOVS     R0,R7
   \   000001A4   0x.... 0x....      BL       mbedtls_mpi_sub_int
   \   000001A8   0x0006             MOVS     R6,R0
   \   000001AA   0xD106             BNE      ??mbedtls_mpi_read_string_4
    482                      }
    483                  }
   \                     ??mbedtls_mpi_read_string_16: (+1)
   \   000001AC   0x1C6D             ADDS     R5,R5,#+1
   \   000001AE   0x9801             LDR      R0,[SP, #+4]
   \   000001B0   0x1C40             ADDS     R0,R0,#+1
   \   000001B2   0x9001             STR      R0,[SP, #+4]
   \   000001B4   0x9800             LDR      R0,[SP, #+0]
   \   000001B6   0x4285             CMP      R5,R0
   \   000001B8   0xD3B3             BCC      ??mbedtls_mpi_read_string_14
    484              }
    485          
    486          cleanup:
    487          
    488              mbedtls_mpi_free( &T );
   \                     ??mbedtls_mpi_read_string_4: (+1)
   \   000001BA   0xA803             ADD      R0,SP,#+12
   \   000001BC   0x.... 0x....      BL       mbedtls_mpi_free
    489          
    490              return( ret );
   \   000001C0   0x0030             MOVS     R0,R6
   \                     ??mbedtls_mpi_read_string_3: (+1)
   \   000001C2   0xB00B             ADD      SP,SP,#+44
   \   000001C4   0xBDF0             POP      {R4-R7,PC}       ;; return
    491          }
    492          
    493          /*
    494           * Helper to write the digits high-order first
    495           */

   \                                 In section .text, align 2, keep-with-next
    496          static int mpi_write_hlp( mbedtls_mpi *X, int radix, char **p )
    497          {
   \                     mpi_write_hlp: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x0017             MOVS     R7,R2
    498              int ret;
    499              mbedtls_mpi_uint r;
    500          
    501              if( radix < 2 || radix > 16 )
   \   00000008   0x1EB0             SUBS     R0,R6,#+2
   \   0000000A   0x280F             CMP      R0,#+15
   \   0000000C   0xD302             BCC      ??mpi_write_hlp_0
    502                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0x43C0             MVNS     R0,R0            ;; #-4
   \   00000012   0xE03E             B        ??mpi_write_hlp_1
    503          
    504              MBEDTLS_MPI_CHK( mbedtls_mpi_mod_int( &r, X, radix ) );
   \                     ??mpi_write_hlp_0: (+1)
   \   00000014   0x0032             MOVS     R2,R6
   \   00000016   0x9906             LDR      R1,[SP, #+24]
   \   00000018   0xA801             ADD      R0,SP,#+4
   \   0000001A   0x.... 0x....      BL       mbedtls_mpi_mod_int
   \   0000001E   0x0005             MOVS     R5,R0
   \   00000020   0xD136             BNE      ??mpi_write_hlp_2
    505              MBEDTLS_MPI_CHK( mbedtls_mpi_div_int( X, NULL, X, radix ) );
   \   00000022   0x2401             MOVS     R4,#+1
   \   00000024   0x2E00             CMP      R6,#+0
   \   00000026   0xD504             BPL      ??mpi_write_hlp_3
   \   00000028   0x4270             RSBS     R0,R6,#+0
   \   0000002A   0x9000             STR      R0,[SP, #+0]
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000030   0xE001             B        ??mpi_write_hlp_4
   \                     ??mpi_write_hlp_3: (+1)
   \   00000032   0x9600             STR      R6,[SP, #+0]
   \   00000034   0x2001             MOVS     R0,#+1
   \                     ??mpi_write_hlp_4: (+1)
   \   00000036   0x9002             STR      R0,[SP, #+8]
   \   00000038   0x9403             STR      R4,[SP, #+12]
   \   0000003A   0x4668             MOV      R0,SP
   \   0000003C   0x9004             STR      R0,[SP, #+16]
   \   0000003E   0xAB02             ADD      R3,SP,#+8
   \   00000040   0x9A06             LDR      R2,[SP, #+24]
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x4610             MOV      R0,R2
   \   00000046   0x.... 0x....      BL       mbedtls_mpi_div_mpi
   \   0000004A   0x0005             MOVS     R5,R0
   \   0000004C   0xD120             BNE      ??mpi_write_hlp_2
    506          
    507              if( mbedtls_mpi_cmp_int( X, 0 ) != 0 )
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x9000             STR      R0,[SP, #+0]
   \   00000052   0x9402             STR      R4,[SP, #+8]
   \   00000054   0x9403             STR      R4,[SP, #+12]
   \   00000056   0x4668             MOV      R0,SP
   \   00000058   0x9004             STR      R0,[SP, #+16]
   \   0000005A   0xA902             ADD      R1,SP,#+8
   \   0000005C   0x9806             LDR      R0,[SP, #+24]
   \   0000005E   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD006             BEQ      ??mpi_write_hlp_5
    508                  MBEDTLS_MPI_CHK( mpi_write_hlp( X, radix, p ) );
   \   00000066   0x003A             MOVS     R2,R7
   \   00000068   0x0031             MOVS     R1,R6
   \   0000006A   0x9806             LDR      R0,[SP, #+24]
   \   0000006C   0xF7FF 0xFFC8      BL       mpi_write_hlp
   \   00000070   0x0005             MOVS     R5,R0
   \   00000072   0xD10D             BNE      ??mpi_write_hlp_2
    509          
    510              if( r < 10 )
   \                     ??mpi_write_hlp_5: (+1)
   \   00000074   0x6838             LDR      R0,[R7, #+0]
   \   00000076   0x9901             LDR      R1,[SP, #+4]
   \   00000078   0x290A             CMP      R1,#+10
   \   0000007A   0xD204             BCS      ??mpi_write_hlp_6
    511                  *(*p)++ = (char)( r + 0x30 );
   \   0000007C   0x1C41             ADDS     R1,R0,#+1
   \   0000007E   0x6039             STR      R1,[R7, #+0]
   \   00000080   0x9901             LDR      R1,[SP, #+4]
   \   00000082   0x3130             ADDS     R1,R1,#+48
   \   00000084   0xE003             B        ??mpi_write_hlp_7
    512              else
    513                  *(*p)++ = (char)( r + 0x37 );
   \                     ??mpi_write_hlp_6: (+1)
   \   00000086   0x1C41             ADDS     R1,R0,#+1
   \   00000088   0x6039             STR      R1,[R7, #+0]
   \   0000008A   0x9901             LDR      R1,[SP, #+4]
   \   0000008C   0x3137             ADDS     R1,R1,#+55
   \                     ??mpi_write_hlp_7: (+1)
   \   0000008E   0x7001             STRB     R1,[R0, #+0]
    514          
    515          cleanup:
    516          
    517              return( ret );
   \                     ??mpi_write_hlp_2: (+1)
   \   00000090   0x0028             MOVS     R0,R5
   \                     ??mpi_write_hlp_1: (+1)
   \   00000092   0xB007             ADD      SP,SP,#+28
   \   00000094   0xBDF0             POP      {R4-R7,PC}       ;; return
    518          }
    519          
    520          /*
    521           * Export into an ASCII string
    522           */

   \                                 In section .text, align 4, keep-with-next
    523          int mbedtls_mpi_write_string( const mbedtls_mpi *X, int radix,
    524                                        char *buf, size_t buflen, size_t *olen )
    525          {
   \                     mbedtls_mpi_write_string: (+1)
   \   00000000   0xB5F5             PUSH     {R0,R2,R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x001D             MOVS     R5,R3
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9002             STR      R0,[SP, #+8]
    526              int ret = 0;
    527              size_t n;
    528              char *p;
    529              mbedtls_mpi T;
    530          
    531              if( radix < 2 || radix > 16 )
   \   0000000C   0x1EA0             SUBS     R0,R4,#+2
   \   0000000E   0x280F             CMP      R0,#+15
   \   00000010   0xD301             BCC      ??mbedtls_mpi_write_string_0
    532                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   \   00000012   0x2003             MOVS     R0,#+3
   \   00000014   0xE012             B.N      ??mbedtls_mpi_write_string_1
    533          
    534              n = mbedtls_mpi_bitlen( X );
   \                     ??mbedtls_mpi_write_string_0: (+1)
   \   00000016   0x9807             LDR      R0,[SP, #+28]
   \   00000018   0x.... 0x....      BL       mbedtls_mpi_bitlen
    535              if( radix >=  4 ) n >>= 1;
   \   0000001C   0x2C04             CMP      R4,#+4
   \   0000001E   0xDB00             BLT      ??mbedtls_mpi_write_string_2
   \   00000020   0x0840             LSRS     R0,R0,#+1
    536              if( radix >= 16 ) n >>= 1;
   \                     ??mbedtls_mpi_write_string_2: (+1)
   \   00000022   0x2C10             CMP      R4,#+16
   \   00000024   0xDB00             BLT      ??mbedtls_mpi_write_string_3
   \   00000026   0x0840             LSRS     R0,R0,#+1
   \                     ??mbedtls_mpi_write_string_3: (+1)
   \   00000028   0x1C41             ADDS     R1,R0,#+1
   \   0000002A   0x07CA             LSLS     R2,R1,#+31
   \   0000002C   0x0FD2             LSRS     R2,R2,#+31
   \   0000002E   0x1CD2             ADDS     R2,R2,#+3
   \   00000030   0x1880             ADDS     R0,R0,R2
    537              /*
    538               * Round up the buffer length to an even value to ensure that there is
    539               * enough room for hexadecimal values that can be represented in an odd
    540               * number of digits.
    541               */
    542              n += 3 + ( ( n + 1 ) & 1 );
    543          
    544              if( buflen < n )
   \   00000032   0x4285             CMP      R5,R0
   \   00000034   0xD204             BCS      ??mbedtls_mpi_write_string_4
    545              {
    546                  *olen = n;
   \   00000036   0x990E             LDR      R1,[SP, #+56]
   \   00000038   0x6008             STR      R0,[R1, #+0]
    547                  return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
   \   0000003A   0x2007             MOVS     R0,#+7
   \                     ??mbedtls_mpi_write_string_1: (+1)
   \   0000003C   0x43C0             MVNS     R0,R0            ;; #-8
   \   0000003E   0xE06C             B        ??mbedtls_mpi_write_string_5
    548              }
    549          
    550              p = buf;
   \                     ??mbedtls_mpi_write_string_4: (+1)
   \   00000040   0x9808             LDR      R0,[SP, #+32]
   \   00000042   0x9000             STR      R0,[SP, #+0]
    551              mbedtls_mpi_init( &T );
   \   00000044   0xA803             ADD      R0,SP,#+12
   \   00000046   0x.... 0x....      BL       mbedtls_mpi_init
    552          
    553              if( X->s == -1 )
   \   0000004A   0x2500             MOVS     R5,#+0
   \   0000004C   0x43ED             MVNS     R5,R5            ;; #-1
   \   0000004E   0x9807             LDR      R0,[SP, #+28]
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0x42A8             CMP      R0,R5
   \   00000054   0xD105             BNE      ??mbedtls_mpi_write_string_6
    554                  *p++ = '-';
   \   00000056   0x202D             MOVS     R0,#+45
   \   00000058   0x9900             LDR      R1,[SP, #+0]
   \   0000005A   0x7008             STRB     R0,[R1, #+0]
   \   0000005C   0x9800             LDR      R0,[SP, #+0]
   \   0000005E   0x1C40             ADDS     R0,R0,#+1
   \   00000060   0x9000             STR      R0,[SP, #+0]
    555          
    556              if( radix == 16 )
   \                     ??mbedtls_mpi_write_string_6: (+1)
   \   00000062   0x2C10             CMP      R4,#+16
   \   00000064   0xD137             BNE      ??mbedtls_mpi_write_string_7
    557              {
    558                  int c;
    559                  size_t i, j, k;
    560          
    561                  for( i = X->n, k = 0; i > 0; i-- )
   \   00000066   0x9807             LDR      R0,[SP, #+28]
   \   00000068   0x6840             LDR      R0,[R0, #+4]
   \   0000006A   0x2100             MOVS     R1,#+0
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD046             BEQ      ??mbedtls_mpi_write_string_8
   \   00000070   0x0082             LSLS     R2,R0,#+2
   \   00000072   0x9201             STR      R2,[SP, #+4]
    562                  {
    563                      for( j = ciL; j > 0; j-- )
   \                     ??mbedtls_mpi_write_string_9: (+1)
   \   00000074   0x1D02             ADDS     R2,R0,#+4
   \   00000076   0x2318             MOVS     R3,#+24
   \   00000078   0x2404             MOVS     R4,#+4
    564                      {
    565                          c = ( X->p[i - 1] >> ( ( j - 1 ) << 3) ) & 0xFF;
   \                     ??mbedtls_mpi_write_string_10: (+1)
   \   0000007A   0x9D07             LDR      R5,[SP, #+28]
   \   0000007C   0x68AD             LDR      R5,[R5, #+8]
   \   0000007E   0x9E01             LDR      R6,[SP, #+4]
   \   00000080   0x19AD             ADDS     R5,R5,R6
   \   00000082   0x1F2D             SUBS     R5,R5,#+4
   \   00000084   0x682D             LDR      R5,[R5, #+0]
   \   00000086   0x40DD             LSRS     R5,R5,R3
   \   00000088   0xB2ED             UXTB     R5,R5
   \   0000008A   0x2D00             CMP      R5,#+0
    566          
    567                          if( c == 0 && k == 0 && ( i + j ) != 2 )
   \   0000008C   0xD103             BNE      ??mbedtls_mpi_write_string_11
   \   0000008E   0x2900             CMP      R1,#+0
   \   00000090   0xD101             BNE      ??mbedtls_mpi_write_string_11
   \   00000092   0x2A02             CMP      R2,#+2
   \   00000094   0xD114             BNE      ??mbedtls_mpi_write_string_12
    568                              continue;
    569          
    570                          *(p++) = "0123456789ABCDEF" [c / 16];
   \                     ??mbedtls_mpi_write_string_11: (+1)
   \   00000096   0x2100             MOVS     R1,#+0
   \   00000098   0x1949             ADDS     R1,R1,R5
   \   0000009A   0x0909             LSRS     R1,R1,#+4
   \   0000009C   0x....             ADR.N    R6,?_0
   \   0000009E   0x5C76             LDRB     R6,[R6, R1]
   \   000000A0   0x9F00             LDR      R7,[SP, #+0]
   \   000000A2   0x703E             STRB     R6,[R7, #+0]
   \   000000A4   0x9E00             LDR      R6,[SP, #+0]
   \   000000A6   0x1C76             ADDS     R6,R6,#+1
   \   000000A8   0x9600             STR      R6,[SP, #+0]
    571                          *(p++) = "0123456789ABCDEF" [c % 16];
   \   000000AA   0xBF00             Nop      
   \   000000AC   0x....             ADR.N    R6,?_0
   \   000000AE   0x0109             LSLS     R1,R1,#+4
   \   000000B0   0x1A69             SUBS     R1,R5,R1
   \   000000B2   0x5C71             LDRB     R1,[R6, R1]
   \   000000B4   0x9D00             LDR      R5,[SP, #+0]
   \   000000B6   0x7029             STRB     R1,[R5, #+0]
   \   000000B8   0x9900             LDR      R1,[SP, #+0]
   \   000000BA   0x1C49             ADDS     R1,R1,#+1
   \   000000BC   0x9100             STR      R1,[SP, #+0]
    572                          k = 1;
   \   000000BE   0x2101             MOVS     R1,#+1
    573                      }
   \                     ??mbedtls_mpi_write_string_12: (+1)
   \   000000C0   0x3B08             SUBS     R3,R3,#+8
   \   000000C2   0x1E52             SUBS     R2,R2,#+1
   \   000000C4   0x1E64             SUBS     R4,R4,#+1
   \   000000C6   0xD1D8             BNE      ??mbedtls_mpi_write_string_10
    574                  }
   \   000000C8   0x1E40             SUBS     R0,R0,#+1
   \   000000CA   0x9A01             LDR      R2,[SP, #+4]
   \   000000CC   0x1F12             SUBS     R2,R2,#+4
   \   000000CE   0x9201             STR      R2,[SP, #+4]
   \   000000D0   0x2800             CMP      R0,#+0
   \   000000D2   0xD1CF             BNE      ??mbedtls_mpi_write_string_9
   \   000000D4   0xE013             B        ??mbedtls_mpi_write_string_8
    575              }
    576              else
    577              {
    578                  MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T, X ) );
   \                     ??mbedtls_mpi_write_string_7: (+1)
   \   000000D6   0x9907             LDR      R1,[SP, #+28]
   \   000000D8   0xA803             ADD      R0,SP,#+12
   \   000000DA   0x.... 0x....      BL       mbedtls_mpi_copy
   \   000000DE   0x9002             STR      R0,[SP, #+8]
   \   000000E0   0x2800             CMP      R0,#+0
   \   000000E2   0xD116             BNE      ??mbedtls_mpi_write_string_13
    579          
    580                  if( T.s == -1 )
   \   000000E4   0x9803             LDR      R0,[SP, #+12]
   \   000000E6   0x42A8             CMP      R0,R5
   \   000000E8   0xD101             BNE      ??mbedtls_mpi_write_string_14
    581                      T.s = 1;
   \   000000EA   0x2001             MOVS     R0,#+1
   \   000000EC   0x9003             STR      R0,[SP, #+12]
    582          
    583                  MBEDTLS_MPI_CHK( mpi_write_hlp( &T, radix, &p ) );
   \                     ??mbedtls_mpi_write_string_14: (+1)
   \   000000EE   0x466A             MOV      R2,SP
   \   000000F0   0x0021             MOVS     R1,R4
   \   000000F2   0xA803             ADD      R0,SP,#+12
   \   000000F4   0x.... 0x....      BL       mpi_write_hlp
   \   000000F8   0x9002             STR      R0,[SP, #+8]
   \   000000FA   0x2800             CMP      R0,#+0
   \   000000FC   0xD109             BNE      ??mbedtls_mpi_write_string_13
    584              }
    585          
    586              *p++ = '\0';
   \                     ??mbedtls_mpi_write_string_8: (+1)
   \   000000FE   0x2000             MOVS     R0,#+0
   \   00000100   0x9900             LDR      R1,[SP, #+0]
   \   00000102   0x7008             STRB     R0,[R1, #+0]
   \   00000104   0x9800             LDR      R0,[SP, #+0]
   \   00000106   0x1C40             ADDS     R0,R0,#+1
   \   00000108   0x9000             STR      R0,[SP, #+0]
    587              *olen = p - buf;
   \   0000010A   0x9908             LDR      R1,[SP, #+32]
   \   0000010C   0x1A40             SUBS     R0,R0,R1
   \   0000010E   0x990E             LDR      R1,[SP, #+56]
   \   00000110   0x6008             STR      R0,[R1, #+0]
    588          
    589          cleanup:
    590          
    591              mbedtls_mpi_free( &T );
   \                     ??mbedtls_mpi_write_string_13: (+1)
   \   00000112   0xA803             ADD      R0,SP,#+12
   \   00000114   0x.... 0x....      BL       mbedtls_mpi_free
    592          
    593              return( ret );
   \   00000118   0x9802             LDR      R0,[SP, #+8]
   \                     ??mbedtls_mpi_write_string_5: (+1)
   \   0000011A   0xB009             ADD      SP,SP,#+36
   \   0000011C   0xBDF0             POP      {R4-R7,PC}       ;; return
    594          }
    595          
    596          #if defined(MBEDTLS_FS_IO)
    597          /*
    598           * Read X from an opened file
    599           */
    600          int mbedtls_mpi_read_file( mbedtls_mpi *X, int radix, FILE *fin )
    601          {
    602              mbedtls_mpi_uint d;
    603              size_t slen;
    604              char *p;
    605              /*
    606               * Buffer should have space for (short) label and decimal formatted MPI,
    607               * newline characters and '\0'
    608               */
    609              char s[ MBEDTLS_MPI_RW_BUFFER_SIZE ];
    610          
    611              memset( s, 0, sizeof( s ) );
    612              if( fgets( s, sizeof( s ) - 1, fin ) == NULL )
    613                  return( MBEDTLS_ERR_MPI_FILE_IO_ERROR );
    614          
    615              slen = strlen( s );
    616              if( slen == sizeof( s ) - 2 )
    617                  return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    618          
    619              if( slen > 0 && s[slen - 1] == '\n' ) { slen--; s[slen] = '\0'; }
    620              if( slen > 0 && s[slen - 1] == '\r' ) { slen--; s[slen] = '\0'; }
    621          
    622              p = s + slen;
    623              while( p-- > s )
    624                  if( mpi_get_digit( &d, radix, *p ) != 0 )
    625                      break;
    626          
    627              return( mbedtls_mpi_read_string( X, radix, p + 1 ) );
    628          }
    629          
    630          /*
    631           * Write X into an opened file (or stdout if fout == NULL)
    632           */
    633          int mbedtls_mpi_write_file( const char *p, const mbedtls_mpi *X, int radix, FILE *fout )
    634          {
    635              int ret;
    636              size_t n, slen, plen;
    637              /*
    638               * Buffer should have space for (short) label and decimal formatted MPI,
    639               * newline characters and '\0'
    640               */
    641              char s[ MBEDTLS_MPI_RW_BUFFER_SIZE ];
    642          
    643              memset( s, 0, sizeof( s ) );
    644          
    645              MBEDTLS_MPI_CHK( mbedtls_mpi_write_string( X, radix, s, sizeof( s ) - 2, &n ) );
    646          
    647              if( p == NULL ) p = "";
    648          
    649              plen = strlen( p );
    650              slen = strlen( s );
    651              s[slen++] = '\r';
    652              s[slen++] = '\n';
    653          
    654              if( fout != NULL )
    655              {
    656                  if( fwrite( p, 1, plen, fout ) != plen ||
    657                      fwrite( s, 1, slen, fout ) != slen )
    658                      return( MBEDTLS_ERR_MPI_FILE_IO_ERROR );
    659              }
    660              else
    661                  mbedtls_printf( "%s%s", p, s );
    662          
    663          cleanup:
    664          
    665              return( ret );
    666          }
    667          #endif /* MBEDTLS_FS_IO */
    668          
    669          /*
    670           * Import X from unsigned binary data, big endian
    671           */

   \                                 In section .text, align 2, keep-with-next
    672          int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
    673          {
   \                     mbedtls_mpi_read_binary: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x000F             MOVS     R7,R1
   \   00000006   0x0015             MOVS     R5,R2
    674              int ret;
    675              size_t i, j, n;
    676          
    677              for( n = 0; n < buflen; n++ )
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0x2400             MOVS     R4,#+0
   \   0000000C   0x0038             MOVS     R0,R7
   \   0000000E   0xE001             B        ??mbedtls_mpi_read_binary_0
   \                     ??mbedtls_mpi_read_binary_1: (+1)
   \   00000010   0x1C64             ADDS     R4,R4,#+1
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \                     ??mbedtls_mpi_read_binary_0: (+1)
   \   00000014   0x42AC             CMP      R4,R5
   \   00000016   0xD202             BCS      ??mbedtls_mpi_read_binary_2
    678                  if( buf[n] != 0 )
   \   00000018   0x7801             LDRB     R1,[R0, #+0]
   \   0000001A   0x2900             CMP      R1,#+0
   \   0000001C   0xD0F8             BEQ      ??mbedtls_mpi_read_binary_1
   \                     ??mbedtls_mpi_read_binary_2: (+1)
   \   0000001E   0x1B28             SUBS     R0,R5,R4
   \   00000020   0x0780             LSLS     R0,R0,#+30
   \   00000022   0x0F80             LSRS     R0,R0,#+30
   \   00000024   0x1E40             SUBS     R0,R0,#+1
   \   00000026   0x4180             SBCS     R0,R0,R0
   \   00000028   0x43C0             MVNS     R0,R0
   \   0000002A   0x0FC0             LSRS     R0,R0,#+31
   \   0000002C   0x1B29             SUBS     R1,R5,R4
   \   0000002E   0x0889             LSRS     R1,R1,#+2
   \   00000030   0x1809             ADDS     R1,R1,R0
   \   00000032   0x9802             LDR      R0,[SP, #+8]
    679                      break;
    680          
    681              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, CHARS_TO_LIMBS( buflen - n ) ) );
   \   00000034   0x.... 0x....      BL       mbedtls_mpi_grow
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD12E             BNE      ??mbedtls_mpi_read_binary_3
    682              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   \   0000003C   0x2101             MOVS     R1,#+1
   \   0000003E   0x9802             LDR      R0,[SP, #+8]
   \   00000040   0x.... 0x....      BL       mbedtls_mpi_grow
   \   00000044   0x9000             STR      R0,[SP, #+0]
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD10C             BNE      ??mbedtls_mpi_read_binary_4
   \   0000004A   0x9802             LDR      R0,[SP, #+8]
   \   0000004C   0x6840             LDR      R0,[R0, #+4]
   \   0000004E   0x0081             LSLS     R1,R0,#+2
   \   00000050   0x9802             LDR      R0,[SP, #+8]
   \   00000052   0x6880             LDR      R0,[R0, #+8]
   \   00000054   0x.... 0x....      BL       __aeabi_memclr4
   \   00000058   0x9802             LDR      R0,[SP, #+8]
   \   0000005A   0x6880             LDR      R0,[R0, #+8]
   \   0000005C   0x6006             STR      R6,[R0, #+0]
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0x9902             LDR      R1,[SP, #+8]
   \   00000062   0x6008             STR      R0,[R1, #+0]
   \                     ??mbedtls_mpi_read_binary_4: (+1)
   \   00000064   0x9800             LDR      R0,[SP, #+0]
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD117             BNE      ??mbedtls_mpi_read_binary_3
    683          
    684              for( i = buflen, j = 0; i > n; i--, j++ )
   \   0000006A   0x42AC             CMP      R4,R5
   \   0000006C   0xD215             BCS      ??mbedtls_mpi_read_binary_3
   \   0000006E   0x1979             ADDS     R1,R7,R5
   \   00000070   0x1E49             SUBS     R1,R1,#+1
   \   00000072   0x1B2A             SUBS     R2,R5,R4
   \   00000074   0x2318             MOVS     R3,#+24
    685                  X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
   \                     ??mbedtls_mpi_read_binary_5: (+1)
   \   00000076   0x9C02             LDR      R4,[SP, #+8]
   \   00000078   0x68A4             LDR      R4,[R4, #+8]
   \   0000007A   0x08B5             LSRS     R5,R6,#+2
   \   0000007C   0x00AD             LSLS     R5,R5,#+2
   \   0000007E   0x1964             ADDS     R4,R4,R5
   \   00000080   0x6825             LDR      R5,[R4, #+0]
   \   00000082   0x46AC             MOV      R12,R5
   \   00000084   0x780F             LDRB     R7,[R1, #+0]
   \   00000086   0x00F5             LSLS     R5,R6,#+3
   \   00000088   0x401D             ANDS     R5,R5,R3
   \   0000008A   0x40AF             LSLS     R7,R7,R5
   \   0000008C   0x4665             MOV      R5,R12
   \   0000008E   0x432F             ORRS     R7,R7,R5
   \   00000090   0x6027             STR      R7,[R4, #+0]
   \   00000092   0x1C76             ADDS     R6,R6,#+1
   \   00000094   0x1E49             SUBS     R1,R1,#+1
   \   00000096   0x1E52             SUBS     R2,R2,#+1
   \   00000098   0xD1ED             BNE      ??mbedtls_mpi_read_binary_5
    686          
    687          cleanup:
    688          
    689              return( ret );
   \                     ??mbedtls_mpi_read_binary_3: (+1)
   \   0000009A   0xB003             ADD      SP,SP,#+12
   \   0000009C   0xBDF0             POP      {R4-R7,PC}       ;; return
    690          }
    691          
    692          /*
    693           * Export X into unsigned binary data, big endian
    694           */

   \                                 In section .text, align 2, keep-with-next
    695          int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
    696          {
   \                     mbedtls_mpi_write_binary: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0006             MOVS     R6,R0
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0015             MOVS     R5,R2
    697              size_t i, j, n;
    698          
    699              n = mbedtls_mpi_size( X );
   \   00000008   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   0000000C   0x1DC0             ADDS     R0,R0,#+7
   \   0000000E   0x08C7             LSRS     R7,R0,#+3
    700          
    701              if( buflen < n )
   \   00000010   0x42BD             CMP      R5,R7
   \   00000012   0xD202             BCS      ??mbedtls_mpi_write_binary_0
    702                  return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
   \   00000014   0x2007             MOVS     R0,#+7
   \   00000016   0x43C0             MVNS     R0,R0            ;; #-8
   \   00000018   0xBDF2             POP      {R1,R4-R7,PC}
    703          
    704              memset( buf, 0, buflen );
   \                     ??mbedtls_mpi_write_binary_0: (+1)
   \   0000001A   0x0029             MOVS     R1,R5
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      BL       __aeabi_memclr
    705          
    706              for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x2F00             CMP      R7,#+0
   \   00000026   0xD00E             BEQ      ??mbedtls_mpi_write_binary_1
   \   00000028   0x1961             ADDS     R1,R4,R5
   \   0000002A   0x1E49             SUBS     R1,R1,#+1
   \   0000002C   0x2218             MOVS     R2,#+24
    707                  buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
   \                     ??mbedtls_mpi_write_binary_2: (+1)
   \   0000002E   0x68B3             LDR      R3,[R6, #+8]
   \   00000030   0x0884             LSRS     R4,R0,#+2
   \   00000032   0x00A4             LSLS     R4,R4,#+2
   \   00000034   0x591B             LDR      R3,[R3, R4]
   \   00000036   0x00C4             LSLS     R4,R0,#+3
   \   00000038   0x4014             ANDS     R4,R4,R2
   \   0000003A   0x40E3             LSRS     R3,R3,R4
   \   0000003C   0x700B             STRB     R3,[R1, #+0]
   \   0000003E   0x1C40             ADDS     R0,R0,#+1
   \   00000040   0x1E49             SUBS     R1,R1,#+1
   \   00000042   0x1E7F             SUBS     R7,R7,#+1
   \   00000044   0xD1F3             BNE      ??mbedtls_mpi_write_binary_2
    708          
    709              return( 0 );
   \                     ??mbedtls_mpi_write_binary_1: (+1)
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    710          }
    711          
    712          /*
    713           * Left-shift: X <<= count
    714           */

   \                                 In section .text, align 2, keep-with-next
    715          int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
    716          {
   \                     mbedtls_mpi_shift_l: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x2500             MOVS     R5,#+0
    717              int ret;
    718              size_t i, v0, t1;
    719              mbedtls_mpi_uint r0 = 0, r1;
    720          
    721              v0 = count / (biL    );
   \   00000008   0x4608             MOV      R0,R1
   \   0000000A   0x0947             LSRS     R7,R0,#+5
    722              t1 = count & (biL - 1);
   \   0000000C   0x261F             MOVS     R6,#+31
   \   0000000E   0x4030             ANDS     R0,R0,R6
   \   00000010   0x9000             STR      R0,[SP, #+0]
    723          
    724              i = mbedtls_mpi_bitlen( X ) + count;
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   00000018   0x9902             LDR      R1,[SP, #+8]
   \   0000001A   0x1841             ADDS     R1,R0,R1
    725          
    726              if( X->n * biL < i )
   \   0000001C   0x6860             LDR      R0,[R4, #+4]
   \   0000001E   0x0140             LSLS     R0,R0,#+5
   \   00000020   0x4288             CMP      R0,R1
   \   00000022   0xD20C             BCS      ??mbedtls_mpi_shift_l_0
    727                  MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
   \   00000024   0x400E             ANDS     R6,R6,R1
   \   00000026   0x1E70             SUBS     R0,R6,#+1
   \   00000028   0x4180             SBCS     R0,R0,R0
   \   0000002A   0x43C0             MVNS     R0,R0
   \   0000002C   0x0FC0             LSRS     R0,R0,#+31
   \   0000002E   0x0949             LSRS     R1,R1,#+5
   \   00000030   0x1809             ADDS     R1,R1,R0
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0x.... 0x....      BL       mbedtls_mpi_grow
   \   00000038   0x9001             STR      R0,[SP, #+4]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD135             BNE      ??mbedtls_mpi_shift_l_1
    728          
    729              ret = 0;
   \                     ??mbedtls_mpi_shift_l_0: (+1)
   \   0000003E   0x9501             STR      R5,[SP, #+4]
    730          
    731              /*
    732               * shift by count / limb_size
    733               */
    734              if( v0 > 0 )
   \   00000040   0x2F00             CMP      R7,#+0
   \   00000042   0xD01A             BEQ      ??mbedtls_mpi_shift_l_2
    735              {
    736                  for( i = X->n; i > v0; i-- )
   \   00000044   0x6861             LDR      R1,[R4, #+4]
   \   00000046   0x428F             CMP      R7,R1
   \   00000048   0xD20E             BCS      ??mbedtls_mpi_shift_l_3
   \   0000004A   0x68A2             LDR      R2,[R4, #+8]
   \   0000004C   0x0088             LSLS     R0,R1,#+2
   \   0000004E   0x1810             ADDS     R0,R2,R0
   \   00000050   0x1F00             SUBS     R0,R0,#+4
   \   00000052   0x1BCB             SUBS     R3,R1,R7
   \   00000054   0x009B             LSLS     R3,R3,#+2
   \   00000056   0x18D2             ADDS     R2,R2,R3
   \   00000058   0x1F12             SUBS     R2,R2,#+4
    737                      X->p[i - 1] = X->p[i - v0 - 1];
   \                     ??mbedtls_mpi_shift_l_4: (+1)
   \   0000005A   0x6813             LDR      R3,[R2, #+0]
   \   0000005C   0x6003             STR      R3,[R0, #+0]
   \   0000005E   0x1E49             SUBS     R1,R1,#+1
   \   00000060   0x1F12             SUBS     R2,R2,#+4
   \   00000062   0x1F00             SUBS     R0,R0,#+4
   \   00000064   0x428F             CMP      R7,R1
   \   00000066   0xD3F8             BCC      ??mbedtls_mpi_shift_l_4
    738          
    739                  for( ; i > 0; i-- )
   \                     ??mbedtls_mpi_shift_l_3: (+1)
   \   00000068   0x2900             CMP      R1,#+0
   \   0000006A   0xD006             BEQ      ??mbedtls_mpi_shift_l_2
    740                      X->p[i - 1] = 0;
   \   0000006C   0x68A0             LDR      R0,[R4, #+8]
   \   0000006E   0x008A             LSLS     R2,R1,#+2
   \   00000070   0x1880             ADDS     R0,R0,R2
   \   00000072   0x1F00             SUBS     R0,R0,#+4
   \   00000074   0x6005             STR      R5,[R0, #+0]
   \   00000076   0x1E49             SUBS     R1,R1,#+1
   \   00000078   0xE7F6             B        ??mbedtls_mpi_shift_l_3
    741              }
    742          
    743              /*
    744               * shift by count % limb_size
    745               */
    746              if( t1 > 0 )
   \                     ??mbedtls_mpi_shift_l_2: (+1)
   \   0000007A   0x9800             LDR      R0,[SP, #+0]
   \   0000007C   0x2800             CMP      R0,#+0
   \   0000007E   0xD014             BEQ      ??mbedtls_mpi_shift_l_1
    747              {
    748                  for( i = v0; i < X->n; i++ )
   \   00000080   0x0039             MOVS     R1,R7
   \   00000082   0x68A0             LDR      R0,[R4, #+8]
   \   00000084   0x008A             LSLS     R2,R1,#+2
   \   00000086   0x1882             ADDS     R2,R0,R2
   \   00000088   0x2020             MOVS     R0,#+32
   \   0000008A   0x9B00             LDR      R3,[SP, #+0]
   \   0000008C   0x1AC3             SUBS     R3,R0,R3
   \   0000008E   0xE009             B        ??mbedtls_mpi_shift_l_5
    749                  {
    750                      r1 = X->p[i] >> (biL - t1);
   \                     ??mbedtls_mpi_shift_l_6: (+1)
   \   00000090   0x6816             LDR      R6,[R2, #+0]
   \   00000092   0x0030             MOVS     R0,R6
   \   00000094   0x40D8             LSRS     R0,R0,R3
    751                      X->p[i] <<= t1;
    752                      X->p[i] |= r0;
   \   00000096   0x9F00             LDR      R7,[SP, #+0]
   \   00000098   0x40BE             LSLS     R6,R6,R7
   \   0000009A   0x4335             ORRS     R5,R5,R6
   \   0000009C   0x6015             STR      R5,[R2, #+0]
    753                      r0 = r1;
   \   0000009E   0x0005             MOVS     R5,R0
    754                  }
   \   000000A0   0x1C49             ADDS     R1,R1,#+1
   \   000000A2   0x1D12             ADDS     R2,R2,#+4
   \                     ??mbedtls_mpi_shift_l_5: (+1)
   \   000000A4   0x6860             LDR      R0,[R4, #+4]
   \   000000A6   0x4281             CMP      R1,R0
   \   000000A8   0xD3F2             BCC      ??mbedtls_mpi_shift_l_6
    755              }
    756          
    757          cleanup:
    758          
    759              return( ret );
   \                     ??mbedtls_mpi_shift_l_1: (+1)
   \   000000AA   0x9801             LDR      R0,[SP, #+4]
   \   000000AC   0xB003             ADD      SP,SP,#+12
   \   000000AE   0xBDF0             POP      {R4-R7,PC}       ;; return
    760          }
    761          
    762          /*
    763           * Right-shift: X >>= count
    764           */

   \                                 In section .text, align 2, keep-with-next
    765          int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
    766          {
   \                     mbedtls_mpi_shift_r: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
    767              size_t i, v0, v1;
    768              mbedtls_mpi_uint r0 = 0, r1;
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x2200             MOVS     R2,#+0
    769          
    770              v0 = count /  biL;
   \   0000000A   0x0948             LSRS     R0,R1,#+5
    771              v1 = count & (biL - 1);
   \   0000000C   0x06C9             LSLS     R1,R1,#+27
   \   0000000E   0x0EC9             LSRS     R1,R1,#+27
   \   00000010   0x9100             STR      R1,[SP, #+0]
    772          
    773              if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
   \   00000012   0x6861             LDR      R1,[R4, #+4]
   \   00000014   0x4281             CMP      R1,R0
   \   00000016   0xD304             BCC      ??mbedtls_mpi_shift_r_0
   \   00000018   0x4288             CMP      R0,R1
   \   0000001A   0xD113             BNE      ??mbedtls_mpi_shift_r_1
   \   0000001C   0x9900             LDR      R1,[SP, #+0]
   \   0000001E   0x2900             CMP      R1,#+0
   \   00000020   0xD010             BEQ      ??mbedtls_mpi_shift_r_1
    774                  return mbedtls_mpi_lset( X, 0 );
   \                     ??mbedtls_mpi_shift_r_0: (+1)
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       mbedtls_mpi_grow
   \   0000002A   0x0006             MOVS     R6,R0
   \   0000002C   0xD108             BNE      ??mbedtls_mpi_shift_r_2
   \   0000002E   0x6860             LDR      R0,[R4, #+4]
   \   00000030   0x0081             LSLS     R1,R0,#+2
   \   00000032   0x68A0             LDR      R0,[R4, #+8]
   \   00000034   0x.... 0x....      BL       __aeabi_memclr4
   \   00000038   0x68A0             LDR      R0,[R4, #+8]
   \   0000003A   0x6005             STR      R5,[R0, #+0]
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x6020             STR      R0,[R4, #+0]
   \                     ??mbedtls_mpi_shift_r_2: (+1)
   \   00000040   0x0030             MOVS     R0,R6
   \   00000042   0xE031             B        ??mbedtls_mpi_shift_r_3
    775          
    776              /*
    777               * shift by count / limb_size
    778               */
    779              if( v0 > 0 )
   \                     ??mbedtls_mpi_shift_r_1: (+1)
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD016             BEQ      ??mbedtls_mpi_shift_r_4
    780              {
    781                  for( i = 0; i < X->n - v0; i++ )
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0x68A3             LDR      R3,[R4, #+8]
   \   0000004C   0x9301             STR      R3,[SP, #+4]
   \   0000004E   0x0087             LSLS     R7,R0,#+2
   \   00000050   0x19DE             ADDS     R6,R3,R7
   \   00000052   0xE004             B        ??mbedtls_mpi_shift_r_5
    782                      X->p[i] = X->p[i + v0];
   \                     ??mbedtls_mpi_shift_r_6: (+1)
   \   00000054   0x6837             LDR      R7,[R6, #+0]
   \   00000056   0x601F             STR      R7,[R3, #+0]
   \   00000058   0x1C49             ADDS     R1,R1,#+1
   \   0000005A   0x1D36             ADDS     R6,R6,#+4
   \   0000005C   0x1D1B             ADDS     R3,R3,#+4
   \                     ??mbedtls_mpi_shift_r_5: (+1)
   \   0000005E   0x6867             LDR      R7,[R4, #+4]
   \   00000060   0x1A3F             SUBS     R7,R7,R0
   \   00000062   0x42B9             CMP      R1,R7
   \   00000064   0xD3F6             BCC      ??mbedtls_mpi_shift_r_6
    783          
    784                  for( ; i < X->n; i++ )
   \                     ??mbedtls_mpi_shift_r_7: (+1)
   \   00000066   0x6860             LDR      R0,[R4, #+4]
   \   00000068   0x4281             CMP      R1,R0
   \   0000006A   0xD204             BCS      ??mbedtls_mpi_shift_r_4
    785                      X->p[i] = 0;
   \   0000006C   0x9801             LDR      R0,[SP, #+4]
   \   0000006E   0x008B             LSLS     R3,R1,#+2
   \   00000070   0x50C5             STR      R5,[R0, R3]
   \   00000072   0x1C49             ADDS     R1,R1,#+1
   \   00000074   0xE7F7             B        ??mbedtls_mpi_shift_r_7
    786              }
    787          
    788              /*
    789               * shift by count % limb_size
    790               */
    791              if( v1 > 0 )
   \                     ??mbedtls_mpi_shift_r_4: (+1)
   \   00000076   0x9800             LDR      R0,[SP, #+0]
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD014             BEQ      ??mbedtls_mpi_shift_r_8
    792              {
    793                  for( i = X->n; i > 0; i-- )
   \   0000007C   0x6861             LDR      R1,[R4, #+4]
   \   0000007E   0x2900             CMP      R1,#+0
   \   00000080   0xD011             BEQ      ??mbedtls_mpi_shift_r_8
   \   00000082   0x68A0             LDR      R0,[R4, #+8]
   \   00000084   0x008B             LSLS     R3,R1,#+2
   \   00000086   0x18C3             ADDS     R3,R0,R3
   \   00000088   0x1F1B             SUBS     R3,R3,#+4
   \   0000008A   0x2020             MOVS     R0,#+32
   \   0000008C   0x9C00             LDR      R4,[SP, #+0]
   \   0000008E   0x1B04             SUBS     R4,R0,R4
    794                  {
    795                      r1 = X->p[i - 1] << (biL - v1);
   \                     ??mbedtls_mpi_shift_r_9: (+1)
   \   00000090   0x681D             LDR      R5,[R3, #+0]
   \   00000092   0x0028             MOVS     R0,R5
   \   00000094   0x40A0             LSLS     R0,R0,R4
    796                      X->p[i - 1] >>= v1;
    797                      X->p[i - 1] |= r0;
   \   00000096   0x9E00             LDR      R6,[SP, #+0]
   \   00000098   0x40F5             LSRS     R5,R5,R6
   \   0000009A   0x432A             ORRS     R2,R2,R5
   \   0000009C   0x601A             STR      R2,[R3, #+0]
    798                      r0 = r1;
   \   0000009E   0x0002             MOVS     R2,R0
    799                  }
   \   000000A0   0x1F1B             SUBS     R3,R3,#+4
   \   000000A2   0x1E49             SUBS     R1,R1,#+1
   \   000000A4   0xD1F4             BNE      ??mbedtls_mpi_shift_r_9
    800              }
    801          
    802              return( 0 );
   \                     ??mbedtls_mpi_shift_r_8: (+1)
   \   000000A6   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_mpi_shift_r_3: (+1)
   \   000000A8   0xB003             ADD      SP,SP,#+12
   \   000000AA   0xBDF0             POP      {R4-R7,PC}       ;; return
    803          }
    804          
    805          /*
    806           * Compare unsigned values
    807           */

   \                                 In section .text, align 2, keep-with-next
    808          int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
    809          {
   \                     mbedtls_mpi_cmp_abs: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    810              size_t i, j;
    811          
    812              for( i = X->n; i > 0; i-- )
   \   00000002   0x6842             LDR      R2,[R0, #+4]
   \   00000004   0x6880             LDR      R0,[R0, #+8]
   \   00000006   0x0093             LSLS     R3,R2,#+2
   \   00000008   0x18C3             ADDS     R3,R0,R3
   \   0000000A   0xE000             B        ??mbedtls_mpi_cmp_abs_0
   \                     ??mbedtls_mpi_cmp_abs_1: (+1)
   \   0000000C   0x1E52             SUBS     R2,R2,#+1
   \                     ??mbedtls_mpi_cmp_abs_0: (+1)
   \   0000000E   0x1F1B             SUBS     R3,R3,#+4
   \   00000010   0x2A00             CMP      R2,#+0
   \   00000012   0xD002             BEQ      ??mbedtls_mpi_cmp_abs_2
    813                  if( X->p[i - 1] != 0 )
   \   00000014   0x681C             LDR      R4,[R3, #+0]
   \   00000016   0x2C00             CMP      R4,#+0
   \   00000018   0xD0F8             BEQ      ??mbedtls_mpi_cmp_abs_1
    814                      break;
    815          
    816              for( j = Y->n; j > 0; j-- )
   \                     ??mbedtls_mpi_cmp_abs_2: (+1)
   \   0000001A   0x684B             LDR      R3,[R1, #+4]
   \   0000001C   0x6889             LDR      R1,[R1, #+8]
   \   0000001E   0x009C             LSLS     R4,R3,#+2
   \   00000020   0x190C             ADDS     R4,R1,R4
   \   00000022   0xE000             B        ??mbedtls_mpi_cmp_abs_3
   \                     ??mbedtls_mpi_cmp_abs_4: (+1)
   \   00000024   0x1E5B             SUBS     R3,R3,#+1
   \                     ??mbedtls_mpi_cmp_abs_3: (+1)
   \   00000026   0x1F24             SUBS     R4,R4,#+4
   \   00000028   0x2B00             CMP      R3,#+0
   \   0000002A   0xD002             BEQ      ??mbedtls_mpi_cmp_abs_5
    817                  if( Y->p[j - 1] != 0 )
   \   0000002C   0x6825             LDR      R5,[R4, #+0]
   \   0000002E   0x2D00             CMP      R5,#+0
   \   00000030   0xD0F8             BEQ      ??mbedtls_mpi_cmp_abs_4
    818                      break;
    819          
    820              if( i == 0 && j == 0 )
   \                     ??mbedtls_mpi_cmp_abs_5: (+1)
   \   00000032   0x001C             MOVS     R4,R3
   \   00000034   0x4314             ORRS     R4,R4,R2
   \   00000036   0xD017             BEQ      ??mbedtls_mpi_cmp_abs_6
    821                  return( 0 );
    822          
    823              if( i > j ) return(  1 );
   \   00000038   0x4293             CMP      R3,R2
   \   0000003A   0xD30E             BCC      ??mbedtls_mpi_cmp_abs_7
    824              if( j > i ) return( -1 );
   \   0000003C   0x429A             CMP      R2,R3
   \   0000003E   0xD201             BCS      ??mbedtls_mpi_cmp_abs_8
   \   00000040   0xE00F             B        ??mbedtls_mpi_cmp_abs_9
    825          
    826              for( ; i > 0; i-- )
   \                     ??mbedtls_mpi_cmp_abs_10: (+1)
   \   00000042   0x1E52             SUBS     R2,R2,#+1
   \                     ??mbedtls_mpi_cmp_abs_8: (+1)
   \   00000044   0x2A00             CMP      R2,#+0
   \   00000046   0xD00F             BEQ      ??mbedtls_mpi_cmp_abs_6
    827              {
    828                  if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
   \   00000048   0x0093             LSLS     R3,R2,#+2
   \   0000004A   0x18C4             ADDS     R4,R0,R3
   \   0000004C   0x1F24             SUBS     R4,R4,#+4
   \   0000004E   0x6824             LDR      R4,[R4, #+0]
   \   00000050   0x18CB             ADDS     R3,R1,R3
   \   00000052   0x1F1B             SUBS     R3,R3,#+4
   \   00000054   0x681B             LDR      R3,[R3, #+0]
   \   00000056   0x42A3             CMP      R3,R4
   \   00000058   0xD201             BCS      ??mbedtls_mpi_cmp_abs_11
   \                     ??mbedtls_mpi_cmp_abs_7: (+1)
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0xE005             B        ??mbedtls_mpi_cmp_abs_12
    829                  if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
   \                     ??mbedtls_mpi_cmp_abs_11: (+1)
   \   0000005E   0x429C             CMP      R4,R3
   \   00000060   0xD2EF             BCS      ??mbedtls_mpi_cmp_abs_10
   \                     ??mbedtls_mpi_cmp_abs_9: (+1)
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000066   0xE000             B        ??mbedtls_mpi_cmp_abs_12
    830              }
    831          
    832              return( 0 );
   \                     ??mbedtls_mpi_cmp_abs_6: (+1)
   \   00000068   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_mpi_cmp_abs_12: (+1)
   \   0000006A   0xBC30             POP      {R4,R5}
   \   0000006C   0x4770             BX       LR               ;; return
    833          }
    834          
    835          /*
    836           * Compare signed values
    837           */

   \                                 In section .text, align 2, keep-with-next
    838          int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
    839          {
   \                     mbedtls_mpi_cmp_mpi: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
    840              size_t i, j;
    841          
    842              for( i = X->n; i > 0; i-- )
   \   00000002   0x6842             LDR      R2,[R0, #+4]
   \   00000004   0x6883             LDR      R3,[R0, #+8]
   \   00000006   0x0094             LSLS     R4,R2,#+2
   \   00000008   0x191C             ADDS     R4,R3,R4
   \   0000000A   0xE000             B        ??mbedtls_mpi_cmp_mpi_0
   \                     ??mbedtls_mpi_cmp_mpi_1: (+1)
   \   0000000C   0x1E52             SUBS     R2,R2,#+1
   \                     ??mbedtls_mpi_cmp_mpi_0: (+1)
   \   0000000E   0x1F24             SUBS     R4,R4,#+4
   \   00000010   0x2A00             CMP      R2,#+0
   \   00000012   0xD002             BEQ      ??mbedtls_mpi_cmp_mpi_2
    843                  if( X->p[i - 1] != 0 )
   \   00000014   0x6825             LDR      R5,[R4, #+0]
   \   00000016   0x2D00             CMP      R5,#+0
   \   00000018   0xD0F8             BEQ      ??mbedtls_mpi_cmp_mpi_1
    844                      break;
    845          
    846              for( j = Y->n; j > 0; j-- )
   \                     ??mbedtls_mpi_cmp_mpi_2: (+1)
   \   0000001A   0x684D             LDR      R5,[R1, #+4]
   \   0000001C   0x688C             LDR      R4,[R1, #+8]
   \   0000001E   0x00AE             LSLS     R6,R5,#+2
   \   00000020   0x19A6             ADDS     R6,R4,R6
   \   00000022   0xE000             B        ??mbedtls_mpi_cmp_mpi_3
   \                     ??mbedtls_mpi_cmp_mpi_4: (+1)
   \   00000024   0x1E6D             SUBS     R5,R5,#+1
   \                     ??mbedtls_mpi_cmp_mpi_3: (+1)
   \   00000026   0x1F36             SUBS     R6,R6,#+4
   \   00000028   0x2D00             CMP      R5,#+0
   \   0000002A   0xD002             BEQ      ??mbedtls_mpi_cmp_mpi_5
    847                  if( Y->p[j - 1] != 0 )
   \   0000002C   0x6837             LDR      R7,[R6, #+0]
   \   0000002E   0x2F00             CMP      R7,#+0
   \   00000030   0xD0F8             BEQ      ??mbedtls_mpi_cmp_mpi_4
    848                      break;
    849          
    850              if( i == 0 && j == 0 )
   \                     ??mbedtls_mpi_cmp_mpi_5: (+1)
   \   00000032   0x002E             MOVS     R6,R5
   \   00000034   0x4316             ORRS     R6,R6,R2
   \   00000036   0xD026             BEQ      ??mbedtls_mpi_cmp_mpi_6
    851                  return( 0 );
    852          
    853              if( i > j ) return(  X->s );
   \   00000038   0x4295             CMP      R5,R2
   \   0000003A   0xD31E             BCC      ??mbedtls_mpi_cmp_mpi_7
    854              if( j > i ) return( -Y->s );
   \   0000003C   0x680E             LDR      R6,[R1, #+0]
   \   0000003E   0x42AA             CMP      R2,R5
   \   00000040   0xD201             BCS      ??mbedtls_mpi_cmp_mpi_8
   \   00000042   0x4270             RSBS     R0,R6,#+0
   \   00000044   0xE020             B        ??mbedtls_mpi_cmp_mpi_9
    855          
    856              if( X->s > 0 && Y->s < 0 ) return(  1 );
   \                     ??mbedtls_mpi_cmp_mpi_8: (+1)
   \   00000046   0x6801             LDR      R1,[R0, #+0]
   \   00000048   0x2901             CMP      R1,#+1
   \   0000004A   0xDB03             BLT      ??mbedtls_mpi_cmp_mpi_10
   \   0000004C   0x2E00             CMP      R6,#+0
   \   0000004E   0xD509             BPL      ??mbedtls_mpi_cmp_mpi_11
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0xE019             B        ??mbedtls_mpi_cmp_mpi_9
    857              if( Y->s > 0 && X->s < 0 ) return( -1 );
   \                     ??mbedtls_mpi_cmp_mpi_10: (+1)
   \   00000054   0x2E01             CMP      R6,#+1
   \   00000056   0xDB05             BLT      ??mbedtls_mpi_cmp_mpi_11
   \   00000058   0x2900             CMP      R1,#+0
   \   0000005A   0xD503             BPL      ??mbedtls_mpi_cmp_mpi_11
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000060   0xE012             B        ??mbedtls_mpi_cmp_mpi_9
    858          
    859              for( ; i > 0; i-- )
   \                     ??mbedtls_mpi_cmp_mpi_12: (+1)
   \   00000062   0x1E52             SUBS     R2,R2,#+1
   \                     ??mbedtls_mpi_cmp_mpi_11: (+1)
   \   00000064   0x2A00             CMP      R2,#+0
   \   00000066   0xD00E             BEQ      ??mbedtls_mpi_cmp_mpi_6
    860              {
    861                  if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
   \   00000068   0x0096             LSLS     R6,R2,#+2
   \   0000006A   0x199D             ADDS     R5,R3,R6
   \   0000006C   0x1F2D             SUBS     R5,R5,#+4
   \   0000006E   0x682D             LDR      R5,[R5, #+0]
   \   00000070   0x19A6             ADDS     R6,R4,R6
   \   00000072   0x1F36             SUBS     R6,R6,#+4
   \   00000074   0x6836             LDR      R6,[R6, #+0]
   \   00000076   0x42AE             CMP      R6,R5
   \   00000078   0xD201             BCS      ??mbedtls_mpi_cmp_mpi_13
   \                     ??mbedtls_mpi_cmp_mpi_7: (+1)
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0xE004             B        ??mbedtls_mpi_cmp_mpi_9
    862                  if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
   \                     ??mbedtls_mpi_cmp_mpi_13: (+1)
   \   0000007E   0x42B5             CMP      R5,R6
   \   00000080   0xD2EF             BCS      ??mbedtls_mpi_cmp_mpi_12
   \   00000082   0x4248             RSBS     R0,R1,#+0
   \   00000084   0xE000             B        ??mbedtls_mpi_cmp_mpi_9
    863              }
    864          
    865              return( 0 );
   \                     ??mbedtls_mpi_cmp_mpi_6: (+1)
   \   00000086   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_mpi_cmp_mpi_9: (+1)
   \   00000088   0xBCF0             POP      {R4-R7}
   \   0000008A   0x4770             BX       LR               ;; return
    866          }
    867          
    868          /*
    869           * Compare signed values
    870           */

   \                                 In section .text, align 2, keep-with-next
    871          int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
    872          {
   \                     mbedtls_mpi_cmp_int: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    873              mbedtls_mpi Y;
    874              mbedtls_mpi_uint p[1];
    875          
    876              *p  = ( z < 0 ) ? -z : z;
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD504             BPL      ??mbedtls_mpi_cmp_int_0
   \   0000000A   0x424B             RSBS     R3,R1,#+0
   \   0000000C   0x9300             STR      R3,[SP, #+0]
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000012   0xE001             B        ??mbedtls_mpi_cmp_int_1
   \                     ??mbedtls_mpi_cmp_int_0: (+1)
   \   00000014   0x9100             STR      R1,[SP, #+0]
   \   00000016   0x2101             MOVS     R1,#+1
   \                     ??mbedtls_mpi_cmp_int_1: (+1)
   \   00000018   0x9101             STR      R1,[SP, #+4]
    877              Y.s = ( z < 0 ) ? -1 : 1;
    878              Y.n = 1;
   \   0000001A   0x9202             STR      R2,[SP, #+8]
    879              Y.p = p;
   \   0000001C   0x4669             MOV      R1,SP
   \   0000001E   0x9103             STR      R1,[SP, #+12]
    880          
    881              return( mbedtls_mpi_cmp_mpi( X, &Y ) );
   \   00000020   0xA901             ADD      R1,SP,#+4
   \   00000022   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000026   0xB005             ADD      SP,SP,#+20
   \   00000028   0xBD00             POP      {PC}             ;; return
    882          }
    883          
    884          /*
    885           * Unsigned addition: X = |A| + |B|  (HAC 14.7)
    886           */

   \                                 In section .text, align 2, keep-with-next
    887          int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
    888          {
   \                     mbedtls_mpi_add_abs: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0007             MOVS     R7,R0
   \   00000004   0x0014             MOVS     R4,R2
    889              int ret;
    890              size_t i, j;
    891              mbedtls_mpi_uint *o, *p, c, tmp;
    892          
    893              if( X == B )
   \   00000006   0x42A7             CMP      R7,R4
   \   00000008   0xD101             BNE      ??mbedtls_mpi_add_abs_0
    894              {
    895                  const mbedtls_mpi *T = A; A = X; B = T;
   \   0000000A   0x000C             MOVS     R4,R1
   \   0000000C   0x0039             MOVS     R1,R7
    896              }
    897          
    898              if( X != A )
   \                     ??mbedtls_mpi_add_abs_0: (+1)
   \   0000000E   0x428F             CMP      R7,R1
   \   00000010   0xD004             BEQ      ??mbedtls_mpi_add_abs_1
    899                  MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
   \   00000012   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000016   0x9000             STR      R0,[SP, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD144             BNE      ??mbedtls_mpi_add_abs_2
    900          
    901              /*
    902               * X should always be positive as a result of unsigned additions.
    903               */
    904              X->s = 1;
   \                     ??mbedtls_mpi_add_abs_1: (+1)
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x6038             STR      R0,[R7, #+0]
    905          
    906              for( j = B->n; j > 0; j-- )
   \   00000020   0x6866             LDR      R6,[R4, #+4]
   \   00000022   0x68A0             LDR      R0,[R4, #+8]
   \   00000024   0x00B1             LSLS     R1,R6,#+2
   \   00000026   0x1840             ADDS     R0,R0,R1
   \   00000028   0xE000             B        ??mbedtls_mpi_add_abs_3
   \                     ??mbedtls_mpi_add_abs_4: (+1)
   \   0000002A   0x1E76             SUBS     R6,R6,#+1
   \                     ??mbedtls_mpi_add_abs_3: (+1)
   \   0000002C   0x1F00             SUBS     R0,R0,#+4
   \   0000002E   0x2E00             CMP      R6,#+0
   \   00000030   0xD002             BEQ      ??mbedtls_mpi_add_abs_5
    907                  if( B->p[j - 1] != 0 )
   \   00000032   0x6801             LDR      R1,[R0, #+0]
   \   00000034   0x2900             CMP      R1,#+0
   \   00000036   0xD0F8             BEQ      ??mbedtls_mpi_add_abs_4
    908                      break;
    909          
    910              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
   \                     ??mbedtls_mpi_add_abs_5: (+1)
   \   00000038   0x0031             MOVS     R1,R6
   \   0000003A   0x0038             MOVS     R0,R7
   \   0000003C   0x.... 0x....      BL       mbedtls_mpi_grow
   \   00000040   0x9000             STR      R0,[SP, #+0]
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD12F             BNE      ??mbedtls_mpi_add_abs_2
    911          
    912              o = B->p; p = X->p; c = 0;
   \   00000046   0x68A1             LDR      R1,[R4, #+8]
   \   00000048   0x68B8             LDR      R0,[R7, #+8]
   \   0000004A   0x2400             MOVS     R4,#+0
    913          
    914              /*
    915               * tmp is used because it might happen that p == o
    916               */
    917              for( i = 0; i < j; i++, o++, p++ )
   \   0000004C   0x2500             MOVS     R5,#+0
   \   0000004E   0x2E00             CMP      R6,#+0
   \   00000050   0xD029             BEQ      ??mbedtls_mpi_add_abs_2
    918              {
    919                  tmp= *o;
   \                     ??mbedtls_mpi_add_abs_6: (+1)
   \   00000052   0x680A             LDR      R2,[R1, #+0]
    920                  *p +=  c; c  = ( *p <  c );
   \   00000054   0x6803             LDR      R3,[R0, #+0]
   \   00000056   0x191B             ADDS     R3,R3,R4
   \   00000058   0x6003             STR      R3,[R0, #+0]
   \   0000005A   0x42A3             CMP      R3,R4
   \   0000005C   0x41A4             SBCS     R4,R4,R4
   \   0000005E   0x0FE4             LSRS     R4,R4,#+31
    921                  *p += tmp; c += ( *p < tmp );
   \   00000060   0x189B             ADDS     R3,R3,R2
   \   00000062   0x6003             STR      R3,[R0, #+0]
   \   00000064   0x4293             CMP      R3,R2
   \   00000066   0xD200             BCS      ??mbedtls_mpi_add_abs_7
   \   00000068   0x1C64             ADDS     R4,R4,#+1
    922              }
   \                     ??mbedtls_mpi_add_abs_7: (+1)
   \   0000006A   0x1C6D             ADDS     R5,R5,#+1
   \   0000006C   0x1D09             ADDS     R1,R1,#+4
   \   0000006E   0x1D00             ADDS     R0,R0,#+4
   \   00000070   0x42B5             CMP      R5,R6
   \   00000072   0xD3EE             BCC      ??mbedtls_mpi_add_abs_6
    923          
    924              while( c != 0 )
   \                     ??mbedtls_mpi_add_abs_8: (+1)
   \   00000074   0x2C00             CMP      R4,#+0
   \   00000076   0xD016             BEQ      ??mbedtls_mpi_add_abs_2
    925              {
    926                  if( i >= X->n )
   \   00000078   0x1C6E             ADDS     R6,R5,#+1
   \   0000007A   0x6879             LDR      R1,[R7, #+4]
   \   0000007C   0x428D             CMP      R5,R1
   \   0000007E   0xD309             BCC      ??mbedtls_mpi_add_abs_9
    927                  {
    928                      MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
   \   00000080   0x0031             MOVS     R1,R6
   \   00000082   0x0038             MOVS     R0,R7
   \   00000084   0x.... 0x....      BL       mbedtls_mpi_grow
   \   00000088   0x9000             STR      R0,[SP, #+0]
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD10B             BNE      ??mbedtls_mpi_add_abs_2
    929                      p = X->p + i;
   \   0000008E   0x68B8             LDR      R0,[R7, #+8]
   \   00000090   0x00A9             LSLS     R1,R5,#+2
   \   00000092   0x1840             ADDS     R0,R0,R1
    930                  }
    931          
    932                  *p += c; c = ( *p < c ); i++; p++;
   \                     ??mbedtls_mpi_add_abs_9: (+1)
   \   00000094   0x6801             LDR      R1,[R0, #+0]
   \   00000096   0x1909             ADDS     R1,R1,R4
   \   00000098   0x6001             STR      R1,[R0, #+0]
   \   0000009A   0x42A1             CMP      R1,R4
   \   0000009C   0x41A4             SBCS     R4,R4,R4
   \   0000009E   0x0FE4             LSRS     R4,R4,#+31
   \   000000A0   0x0035             MOVS     R5,R6
   \   000000A2   0x1D00             ADDS     R0,R0,#+4
   \   000000A4   0xE7E6             B        ??mbedtls_mpi_add_abs_8
    933              }
    934          
    935          cleanup:
    936          
    937              return( ret );
   \                     ??mbedtls_mpi_add_abs_2: (+1)
   \   000000A6   0x9800             LDR      R0,[SP, #+0]
   \   000000A8   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    938          }
    939          
    940          /*
    941           * Helper for mbedtls_mpi subtraction
    942           */

   \                                 In section .text, align 2, keep-with-next
    943          static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
    944          {
    945              size_t i;
    946              mbedtls_mpi_uint c, z;
    947          
    948              for( i = c = 0; i < n; i++, s++, d++ )
   \                     mpi_sub_hlp: (+1)
   \   00000000   0x2300             MOVS     R3,#+0
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD100             BNE      ??mpi_sub_hlp_0
   \   00000006   0x4770             BX       LR
   \                     ??mpi_sub_hlp_0: (+1)
   \   00000008   0xB470             PUSH     {R4-R6}
    949              {
    950                  z = ( *d <  c );     *d -=  c;
   \                     ??mpi_sub_hlp_1: (+1)
   \   0000000A   0x6815             LDR      R5,[R2, #+0]
   \   0000000C   0x429D             CMP      R5,R3
   \   0000000E   0x41A4             SBCS     R4,R4,R4
   \   00000010   0x0FE4             LSRS     R4,R4,#+31
   \   00000012   0x1AED             SUBS     R5,R5,R3
   \   00000014   0x6015             STR      R5,[R2, #+0]
    951                  c = ( *d < *s ) + z; *d -= *s;
   \   00000016   0x680E             LDR      R6,[R1, #+0]
   \   00000018   0x42B5             CMP      R5,R6
   \   0000001A   0x419B             SBCS     R3,R3,R3
   \   0000001C   0x0FDB             LSRS     R3,R3,#+31
   \   0000001E   0x191B             ADDS     R3,R3,R4
   \   00000020   0x1BAC             SUBS     R4,R5,R6
   \   00000022   0x6014             STR      R4,[R2, #+0]
    952              }
   \   00000024   0x1D09             ADDS     R1,R1,#+4
   \   00000026   0x1D12             ADDS     R2,R2,#+4
   \   00000028   0x1E40             SUBS     R0,R0,#+1
   \   0000002A   0xD1EE             BNE      ??mpi_sub_hlp_1
    953          
    954              while( c != 0 )
   \                     ??mpi_sub_hlp_2: (+1)
   \   0000002C   0x2B00             CMP      R3,#+0
   \   0000002E   0xD008             BEQ      ??mpi_sub_hlp_3
    955              {
    956                  z = ( *d < c ); *d -= c;
   \   00000030   0x6810             LDR      R0,[R2, #+0]
   \   00000032   0x4298             CMP      R0,R3
   \   00000034   0x4189             SBCS     R1,R1,R1
   \   00000036   0x0FC9             LSRS     R1,R1,#+31
   \   00000038   0x1AC0             SUBS     R0,R0,R3
   \   0000003A   0x6010             STR      R0,[R2, #+0]
    957                  c = z; i++; d++;
   \   0000003C   0x000B             MOVS     R3,R1
   \   0000003E   0x1D12             ADDS     R2,R2,#+4
   \   00000040   0xE7F4             B        ??mpi_sub_hlp_2
    958              }
    959          }
   \                     ??mpi_sub_hlp_3: (+1)
   \   00000042   0xBC70             POP      {R4-R6}
   \   00000044   0x4770             BX       LR               ;; return
    960          
    961          /*
    962           * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
    963           */

   \                                 In section .text, align 2, keep-with-next
    964          int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
    965          {
   \                     mbedtls_mpi_sub_abs: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000F             MOVS     R7,R1
   \   00000008   0x0015             MOVS     R5,R2
    966              mbedtls_mpi TB;
    967              int ret;
    968              size_t n;
    969          
    970              if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0x0038             MOVS     R0,R7
   \   0000000E   0x.... 0x....      BL       mbedtls_mpi_cmp_abs
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD502             BPL      ??mbedtls_mpi_sub_abs_0
    971                  return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
   \   00000016   0x2009             MOVS     R0,#+9
   \   00000018   0x43C0             MVNS     R0,R0            ;; #-10
   \   0000001A   0xE029             B        ??mbedtls_mpi_sub_abs_1
    972          
    973              mbedtls_mpi_init( &TB );
   \                     ??mbedtls_mpi_sub_abs_0: (+1)
   \   0000001C   0x4668             MOV      R0,SP
   \   0000001E   0x.... 0x....      BL       mbedtls_mpi_init
    974          
    975              if( X == B )
   \   00000022   0x42AC             CMP      R4,R5
   \   00000024   0xD106             BNE      ??mbedtls_mpi_sub_abs_2
    976              {
    977                  MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
   \   00000026   0x0029             MOVS     R1,R5
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x.... 0x....      BL       mbedtls_mpi_copy
   \   0000002E   0x0006             MOVS     R6,R0
   \   00000030   0xD11A             BNE      ??mbedtls_mpi_sub_abs_3
    978                  B = &TB;
   \   00000032   0x466D             MOV      R5,SP
    979              }
    980          
    981              if( X != A )
   \                     ??mbedtls_mpi_sub_abs_2: (+1)
   \   00000034   0x42BC             CMP      R4,R7
   \   00000036   0xD005             BEQ      ??mbedtls_mpi_sub_abs_4
    982                  MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
   \   00000038   0x0039             MOVS     R1,R7
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000040   0x0006             MOVS     R6,R0
   \   00000042   0xD111             BNE      ??mbedtls_mpi_sub_abs_3
    983          
    984              /*
    985               * X should always be positive as a result of unsigned subtractions.
    986               */
    987              X->s = 1;
   \                     ??mbedtls_mpi_sub_abs_4: (+1)
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x6020             STR      R0,[R4, #+0]
    988          
    989              ret = 0;
   \   00000048   0x2600             MOVS     R6,#+0
    990          
    991              for( n = B->n; n > 0; n-- )
   \   0000004A   0x6868             LDR      R0,[R5, #+4]
   \   0000004C   0x68A9             LDR      R1,[R5, #+8]
   \   0000004E   0x0082             LSLS     R2,R0,#+2
   \   00000050   0x188A             ADDS     R2,R1,R2
   \   00000052   0xE000             B        ??mbedtls_mpi_sub_abs_5
   \                     ??mbedtls_mpi_sub_abs_6: (+1)
   \   00000054   0x1E40             SUBS     R0,R0,#+1
   \                     ??mbedtls_mpi_sub_abs_5: (+1)
   \   00000056   0x1F12             SUBS     R2,R2,#+4
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD002             BEQ      ??mbedtls_mpi_sub_abs_7
    992                  if( B->p[n - 1] != 0 )
   \   0000005C   0x6813             LDR      R3,[R2, #+0]
   \   0000005E   0x2B00             CMP      R3,#+0
   \   00000060   0xD0F8             BEQ      ??mbedtls_mpi_sub_abs_6
    993                      break;
    994          
    995              mpi_sub_hlp( n, B->p, X->p );
   \                     ??mbedtls_mpi_sub_abs_7: (+1)
   \   00000062   0x68A2             LDR      R2,[R4, #+8]
   \   00000064   0x.... 0x....      BL       mpi_sub_hlp
    996          
    997          cleanup:
    998          
    999              mbedtls_mpi_free( &TB );
   \                     ??mbedtls_mpi_sub_abs_3: (+1)
   \   00000068   0x4668             MOV      R0,SP
   \   0000006A   0x.... 0x....      BL       mbedtls_mpi_free
   1000          
   1001              return( ret );
   \   0000006E   0x0030             MOVS     R0,R6
   \                     ??mbedtls_mpi_sub_abs_1: (+1)
   \   00000070   0xB003             ADD      SP,SP,#+12
   \   00000072   0xBDF0             POP      {R4-R7,PC}       ;; return
   1002          }
   1003          
   1004          /*
   1005           * Signed addition: X = A + B
   1006           */

   \                                 In section .text, align 2, keep-with-next
   1007          int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
   1008          {
   \                     mbedtls_mpi_add_mpi: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0006             MOVS     R6,R0
   \   00000004   0x000F             MOVS     R7,R1
   \   00000006   0x0015             MOVS     R5,R2
   1009              int ret, s = A->s;
   \   00000008   0x6838             LDR      R0,[R7, #+0]
   \   0000000A   0x0004             MOVS     R4,R0
   1010          
   1011              if( A->s * B->s < 0 )
   \   0000000C   0x6829             LDR      R1,[R5, #+0]
   \   0000000E   0x4348             MULS     R0,R1,R0
   \   00000010   0xD515             BPL      ??mbedtls_mpi_add_mpi_0
   1012              {
   1013                  if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
   \   00000012   0x0029             MOVS     R1,R5
   \   00000014   0x0038             MOVS     R0,R7
   \   00000016   0x.... 0x....      BL       mbedtls_mpi_cmp_abs
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD405             BMI      ??mbedtls_mpi_add_mpi_1
   1014                  {
   1015                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
   \   0000001E   0x002A             MOVS     R2,R5
   \   00000020   0x0039             MOVS     R1,R7
   \   00000022   0x0030             MOVS     R0,R6
   \   00000024   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   00000028   0xE00D             B        ??mbedtls_mpi_add_mpi_2
   1016                      X->s =  s;
   1017                  }
   1018                  else
   1019                  {
   1020                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
   \                     ??mbedtls_mpi_add_mpi_1: (+1)
   \   0000002A   0x003A             MOVS     R2,R7
   \   0000002C   0x0029             MOVS     R1,R5
   \   0000002E   0x0030             MOVS     R0,R6
   \   00000030   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD109             BNE      ??mbedtls_mpi_add_mpi_3
   1021                      X->s = -s;
   \   00000038   0x4261             RSBS     R1,R4,#+0
   \   0000003A   0x6031             STR      R1,[R6, #+0]
   \   0000003C   0xBDF2             POP      {R1,R4-R7,PC}
   1022                  }
   1023              }
   1024              else
   1025              {
   1026                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
   \                     ??mbedtls_mpi_add_mpi_0: (+1)
   \   0000003E   0x0039             MOVS     R1,R7
   \   00000040   0x0030             MOVS     R0,R6
   \   00000042   0x.... 0x....      BL       mbedtls_mpi_add_abs
   \                     ??mbedtls_mpi_add_mpi_2: (+1)
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD100             BNE      ??mbedtls_mpi_add_mpi_3
   1027                  X->s = s;
   \   0000004A   0x6034             STR      R4,[R6, #+0]
   1028              }
   1029          
   1030          cleanup:
   1031          
   1032              return( ret );
   \                     ??mbedtls_mpi_add_mpi_3: (+1)
   \   0000004C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   1033          }
   1034          
   1035          /*
   1036           * Signed subtraction: X = A - B
   1037           */

   \                                 In section .text, align 2, keep-with-next
   1038          int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
   1039          {
   \                     mbedtls_mpi_sub_mpi: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0006             MOVS     R6,R0
   \   00000004   0x000F             MOVS     R7,R1
   \   00000006   0x0015             MOVS     R5,R2
   1040              int ret, s = A->s;
   \   00000008   0x6838             LDR      R0,[R7, #+0]
   \   0000000A   0x0004             MOVS     R4,R0
   1041          
   1042              if( A->s * B->s > 0 )
   \   0000000C   0x6829             LDR      R1,[R5, #+0]
   \   0000000E   0x4348             MULS     R0,R1,R0
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xDB15             BLT      ??mbedtls_mpi_sub_mpi_0
   1043              {
   1044                  if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
   \   00000014   0x0029             MOVS     R1,R5
   \   00000016   0x0038             MOVS     R0,R7
   \   00000018   0x.... 0x....      BL       mbedtls_mpi_cmp_abs
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD405             BMI      ??mbedtls_mpi_sub_mpi_1
   1045                  {
   1046                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
   \   00000020   0x002A             MOVS     R2,R5
   \   00000022   0x0039             MOVS     R1,R7
   \   00000024   0x0030             MOVS     R0,R6
   \   00000026   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   0000002A   0xE00D             B        ??mbedtls_mpi_sub_mpi_2
   1047                      X->s =  s;
   1048                  }
   1049                  else
   1050                  {
   1051                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
   \                     ??mbedtls_mpi_sub_mpi_1: (+1)
   \   0000002C   0x003A             MOVS     R2,R7
   \   0000002E   0x0029             MOVS     R1,R5
   \   00000030   0x0030             MOVS     R0,R6
   \   00000032   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD109             BNE      ??mbedtls_mpi_sub_mpi_3
   1052                      X->s = -s;
   \   0000003A   0x4261             RSBS     R1,R4,#+0
   \   0000003C   0x6031             STR      R1,[R6, #+0]
   \   0000003E   0xBDF2             POP      {R1,R4-R7,PC}
   1053                  }
   1054              }
   1055              else
   1056              {
   1057                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
   \                     ??mbedtls_mpi_sub_mpi_0: (+1)
   \   00000040   0x0039             MOVS     R1,R7
   \   00000042   0x0030             MOVS     R0,R6
   \   00000044   0x.... 0x....      BL       mbedtls_mpi_add_abs
   \                     ??mbedtls_mpi_sub_mpi_2: (+1)
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD100             BNE      ??mbedtls_mpi_sub_mpi_3
   1058                  X->s = s;
   \   0000004C   0x6034             STR      R4,[R6, #+0]
   1059              }
   1060          
   1061          cleanup:
   1062          
   1063              return( ret );
   \                     ??mbedtls_mpi_sub_mpi_3: (+1)
   \   0000004E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   1064          }
   1065          
   1066          /*
   1067           * Signed addition: X = A + b
   1068           */

   \                                 In section .text, align 2, keep-with-next
   1069          int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
   1070          {
   \                     mbedtls_mpi_add_int: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   1071              mbedtls_mpi _B;
   1072              mbedtls_mpi_uint p[1];
   1073          
   1074              p[0] = ( b < 0 ) ? -b : b;
   \   00000004   0x2301             MOVS     R3,#+1
   \   00000006   0x2A00             CMP      R2,#+0
   \   00000008   0xD504             BPL      ??mbedtls_mpi_add_int_0
   \   0000000A   0x4254             RSBS     R4,R2,#+0
   \   0000000C   0x9400             STR      R4,[SP, #+0]
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0x43D2             MVNS     R2,R2            ;; #-1
   \   00000012   0xE001             B        ??mbedtls_mpi_add_int_1
   \                     ??mbedtls_mpi_add_int_0: (+1)
   \   00000014   0x9200             STR      R2,[SP, #+0]
   \   00000016   0x2201             MOVS     R2,#+1
   \                     ??mbedtls_mpi_add_int_1: (+1)
   \   00000018   0x9201             STR      R2,[SP, #+4]
   1075              _B.s = ( b < 0 ) ? -1 : 1;
   1076              _B.n = 1;
   \   0000001A   0x9302             STR      R3,[SP, #+8]
   1077              _B.p = p;
   \   0000001C   0x466A             MOV      R2,SP
   \   0000001E   0x9203             STR      R2,[SP, #+12]
   1078          
   1079              return( mbedtls_mpi_add_mpi( X, A, &_B ) );
   \   00000020   0xAA01             ADD      R2,SP,#+4
   \   00000022   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   00000026   0xB004             ADD      SP,SP,#+16
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
   1080          }
   1081          
   1082          /*
   1083           * Signed subtraction: X = A - b
   1084           */

   \                                 In section .text, align 2, keep-with-next
   1085          int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
   1086          {
   \                     mbedtls_mpi_sub_int: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   1087              mbedtls_mpi _B;
   1088              mbedtls_mpi_uint p[1];
   1089          
   1090              p[0] = ( b < 0 ) ? -b : b;
   \   00000004   0x2301             MOVS     R3,#+1
   \   00000006   0x2A00             CMP      R2,#+0
   \   00000008   0xD504             BPL      ??mbedtls_mpi_sub_int_0
   \   0000000A   0x4254             RSBS     R4,R2,#+0
   \   0000000C   0x9400             STR      R4,[SP, #+0]
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0x43D2             MVNS     R2,R2            ;; #-1
   \   00000012   0xE001             B        ??mbedtls_mpi_sub_int_1
   \                     ??mbedtls_mpi_sub_int_0: (+1)
   \   00000014   0x9200             STR      R2,[SP, #+0]
   \   00000016   0x2201             MOVS     R2,#+1
   \                     ??mbedtls_mpi_sub_int_1: (+1)
   \   00000018   0x9201             STR      R2,[SP, #+4]
   1091              _B.s = ( b < 0 ) ? -1 : 1;
   1092              _B.n = 1;
   \   0000001A   0x9302             STR      R3,[SP, #+8]
   1093              _B.p = p;
   \   0000001C   0x466A             MOV      R2,SP
   \   0000001E   0x9203             STR      R2,[SP, #+12]
   1094          
   1095              return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
   \   00000020   0xAA01             ADD      R2,SP,#+4
   \   00000022   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   00000026   0xB004             ADD      SP,SP,#+16
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
   1096          }
   1097          
   1098          /*
   1099           * Helper for mbedtls_mpi multiplication
   1100           */

   \                                 In section .text, align 2, keep-with-next
   1101          static
   1102          #if defined(__APPLE__) && defined(__arm__)
   1103          /*
   1104           * Apple LLVM version 4.2 (clang-425.0.24) (based on LLVM 3.2svn)
   1105           * appears to need this to prevent bad ARM code generation at -O3.
   1106           */
   1107          __attribute__ ((noinline))
   1108          #endif
   1109          void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
   1110          {
   \                     mpi_mul_hlp: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0007             MOVS     R7,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0014             MOVS     R4,R2
   1111              mbedtls_mpi_uint c = 0, t = 0;
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0x2F10             CMP      R7,#+16
   \   0000000C   0xD200             BCS      .+4
   \   0000000E   0xE135             B        ??mpi_mul_hlp_0
   1112          
   1113          #if defined(MULADDC_HUIT)
   1114              for( ; i >= 8; i -= 8 )
   1115              {
   1116                  MULADDC_INIT
   1117                  MULADDC_HUIT
   1118                  MULADDC_STOP
   1119              }
   1120          
   1121              for( ; i > 0; i-- )
   1122              {
   1123                  MULADDC_INIT
   1124                  MULADDC_CORE
   1125                  MULADDC_STOP
   1126              }
   1127          #else /* MULADDC_HUIT */
   1128              for( ; i >= 16; i -= 16 )
   1129              {
   1130                  MULADDC_INIT
   1131                  MULADDC_CORE   MULADDC_CORE
   \                     ??mpi_mul_hlp_1: (+1)
   \   00000010   0x6828             LDR      R0,[R5, #+0]
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x9A00             LDR      R2,[SP, #+0]
   \   00000016   0x2300             MOVS     R3,#+0
   \   00000018   0x.... 0x....      BL       __aeabi_lmul
   \   0000001C   0x000A             MOVS     R2,R1
   \   0000001E   0x1980             ADDS     R0,R0,R6
   \   00000020   0x42B0             CMP      R0,R6
   \   00000022   0xD200             BCS      ??mpi_mul_hlp_2
   \   00000024   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_2: (+1)
   \   00000026   0x6821             LDR      R1,[R4, #+0]
   \   00000028   0x1840             ADDS     R0,R0,R1
   \   0000002A   0x4288             CMP      R0,R1
   \   0000002C   0xD201             BCS      ??mpi_mul_hlp_3
   \   0000002E   0x1C56             ADDS     R6,R2,#+1
   \   00000030   0xE000             B        ??mpi_mul_hlp_4
   \                     ??mpi_mul_hlp_3: (+1)
   \   00000032   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_4: (+1)
   \   00000034   0x6020             STR      R0,[R4, #+0]
   \   00000036   0x6868             LDR      R0,[R5, #+4]
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0x9A00             LDR      R2,[SP, #+0]
   \   0000003C   0x2300             MOVS     R3,#+0
   \   0000003E   0x.... 0x....      BL       __aeabi_lmul
   \   00000042   0x000A             MOVS     R2,R1
   \   00000044   0x1980             ADDS     R0,R0,R6
   \   00000046   0x42B0             CMP      R0,R6
   \   00000048   0xD200             BCS      ??mpi_mul_hlp_5
   \   0000004A   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_5: (+1)
   \   0000004C   0x6861             LDR      R1,[R4, #+4]
   \   0000004E   0x1840             ADDS     R0,R0,R1
   \   00000050   0x4288             CMP      R0,R1
   \   00000052   0xD201             BCS      ??mpi_mul_hlp_6
   \   00000054   0x1C56             ADDS     R6,R2,#+1
   \   00000056   0xE000             B        ??mpi_mul_hlp_7
   \                     ??mpi_mul_hlp_6: (+1)
   \   00000058   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_7: (+1)
   \   0000005A   0x6060             STR      R0,[R4, #+4]
   1132                  MULADDC_CORE   MULADDC_CORE
   \   0000005C   0x68A8             LDR      R0,[R5, #+8]
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0x9A00             LDR      R2,[SP, #+0]
   \   00000062   0x2300             MOVS     R3,#+0
   \   00000064   0x.... 0x....      BL       __aeabi_lmul
   \   00000068   0x000A             MOVS     R2,R1
   \   0000006A   0x1980             ADDS     R0,R0,R6
   \   0000006C   0x42B0             CMP      R0,R6
   \   0000006E   0xD200             BCS      ??mpi_mul_hlp_8
   \   00000070   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_8: (+1)
   \   00000072   0x68A1             LDR      R1,[R4, #+8]
   \   00000074   0x1840             ADDS     R0,R0,R1
   \   00000076   0x4288             CMP      R0,R1
   \   00000078   0xD201             BCS      ??mpi_mul_hlp_9
   \   0000007A   0x1C56             ADDS     R6,R2,#+1
   \   0000007C   0xE000             B        ??mpi_mul_hlp_10
   \                     ??mpi_mul_hlp_9: (+1)
   \   0000007E   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_10: (+1)
   \   00000080   0x60A0             STR      R0,[R4, #+8]
   \   00000082   0x68E8             LDR      R0,[R5, #+12]
   \   00000084   0x2100             MOVS     R1,#+0
   \   00000086   0x9A00             LDR      R2,[SP, #+0]
   \   00000088   0x2300             MOVS     R3,#+0
   \   0000008A   0x.... 0x....      BL       __aeabi_lmul
   \   0000008E   0x000A             MOVS     R2,R1
   \   00000090   0x1980             ADDS     R0,R0,R6
   \   00000092   0x42B0             CMP      R0,R6
   \   00000094   0xD200             BCS      ??mpi_mul_hlp_11
   \   00000096   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_11: (+1)
   \   00000098   0x68E1             LDR      R1,[R4, #+12]
   \   0000009A   0x1840             ADDS     R0,R0,R1
   \   0000009C   0x4288             CMP      R0,R1
   \   0000009E   0xD201             BCS      ??mpi_mul_hlp_12
   \   000000A0   0x1C56             ADDS     R6,R2,#+1
   \   000000A2   0xE000             B        ??mpi_mul_hlp_13
   \                     ??mpi_mul_hlp_12: (+1)
   \   000000A4   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_13: (+1)
   \   000000A6   0x60E0             STR      R0,[R4, #+12]
   1133                  MULADDC_CORE   MULADDC_CORE
   \   000000A8   0x6928             LDR      R0,[R5, #+16]
   \   000000AA   0x2100             MOVS     R1,#+0
   \   000000AC   0x9A00             LDR      R2,[SP, #+0]
   \   000000AE   0x2300             MOVS     R3,#+0
   \   000000B0   0x.... 0x....      BL       __aeabi_lmul
   \   000000B4   0x000A             MOVS     R2,R1
   \   000000B6   0x1980             ADDS     R0,R0,R6
   \   000000B8   0x42B0             CMP      R0,R6
   \   000000BA   0xD200             BCS      ??mpi_mul_hlp_14
   \   000000BC   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_14: (+1)
   \   000000BE   0x6921             LDR      R1,[R4, #+16]
   \   000000C0   0x1840             ADDS     R0,R0,R1
   \   000000C2   0x4288             CMP      R0,R1
   \   000000C4   0xD201             BCS      ??mpi_mul_hlp_15
   \   000000C6   0x1C56             ADDS     R6,R2,#+1
   \   000000C8   0xE000             B        ??mpi_mul_hlp_16
   \                     ??mpi_mul_hlp_15: (+1)
   \   000000CA   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_16: (+1)
   \   000000CC   0x6120             STR      R0,[R4, #+16]
   \   000000CE   0x6968             LDR      R0,[R5, #+20]
   \   000000D0   0x2100             MOVS     R1,#+0
   \   000000D2   0x9A00             LDR      R2,[SP, #+0]
   \   000000D4   0x2300             MOVS     R3,#+0
   \   000000D6   0x.... 0x....      BL       __aeabi_lmul
   \   000000DA   0x000A             MOVS     R2,R1
   \   000000DC   0x1980             ADDS     R0,R0,R6
   \   000000DE   0x42B0             CMP      R0,R6
   \   000000E0   0xD200             BCS      ??mpi_mul_hlp_17
   \   000000E2   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_17: (+1)
   \   000000E4   0x6961             LDR      R1,[R4, #+20]
   \   000000E6   0x1840             ADDS     R0,R0,R1
   \   000000E8   0x4288             CMP      R0,R1
   \   000000EA   0xD201             BCS      ??mpi_mul_hlp_18
   \   000000EC   0x1C56             ADDS     R6,R2,#+1
   \   000000EE   0xE000             B        ??mpi_mul_hlp_19
   \                     ??mpi_mul_hlp_18: (+1)
   \   000000F0   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_19: (+1)
   \   000000F2   0x6160             STR      R0,[R4, #+20]
   1134                  MULADDC_CORE   MULADDC_CORE
   \   000000F4   0x69A8             LDR      R0,[R5, #+24]
   \   000000F6   0x2100             MOVS     R1,#+0
   \   000000F8   0x9A00             LDR      R2,[SP, #+0]
   \   000000FA   0x2300             MOVS     R3,#+0
   \   000000FC   0x.... 0x....      BL       __aeabi_lmul
   \   00000100   0x000A             MOVS     R2,R1
   \   00000102   0x1980             ADDS     R0,R0,R6
   \   00000104   0x42B0             CMP      R0,R6
   \   00000106   0xD200             BCS      ??mpi_mul_hlp_20
   \   00000108   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_20: (+1)
   \   0000010A   0x69A1             LDR      R1,[R4, #+24]
   \   0000010C   0x1840             ADDS     R0,R0,R1
   \   0000010E   0x4288             CMP      R0,R1
   \   00000110   0xD201             BCS      ??mpi_mul_hlp_21
   \   00000112   0x1C56             ADDS     R6,R2,#+1
   \   00000114   0xE000             B        ??mpi_mul_hlp_22
   \                     ??mpi_mul_hlp_21: (+1)
   \   00000116   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_22: (+1)
   \   00000118   0x61A0             STR      R0,[R4, #+24]
   \   0000011A   0x69E8             LDR      R0,[R5, #+28]
   \   0000011C   0x2100             MOVS     R1,#+0
   \   0000011E   0x9A00             LDR      R2,[SP, #+0]
   \   00000120   0x2300             MOVS     R3,#+0
   \   00000122   0x.... 0x....      BL       __aeabi_lmul
   \   00000126   0x000A             MOVS     R2,R1
   \   00000128   0x1980             ADDS     R0,R0,R6
   \   0000012A   0x42B0             CMP      R0,R6
   \   0000012C   0xD200             BCS      ??mpi_mul_hlp_23
   \   0000012E   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_23: (+1)
   \   00000130   0x69E1             LDR      R1,[R4, #+28]
   \   00000132   0x1840             ADDS     R0,R0,R1
   \   00000134   0x4288             CMP      R0,R1
   \   00000136   0xD201             BCS      ??mpi_mul_hlp_24
   \   00000138   0x1C56             ADDS     R6,R2,#+1
   \   0000013A   0xE000             B        ??mpi_mul_hlp_25
   \                     ??mpi_mul_hlp_24: (+1)
   \   0000013C   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_25: (+1)
   \   0000013E   0x61E0             STR      R0,[R4, #+28]
   1135          
   1136                  MULADDC_CORE   MULADDC_CORE
   \   00000140   0x6A28             LDR      R0,[R5, #+32]
   \   00000142   0x2100             MOVS     R1,#+0
   \   00000144   0x9A00             LDR      R2,[SP, #+0]
   \   00000146   0x2300             MOVS     R3,#+0
   \   00000148   0x.... 0x....      BL       __aeabi_lmul
   \   0000014C   0x000A             MOVS     R2,R1
   \   0000014E   0x1980             ADDS     R0,R0,R6
   \   00000150   0x42B0             CMP      R0,R6
   \   00000152   0xD200             BCS      ??mpi_mul_hlp_26
   \   00000154   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_26: (+1)
   \   00000156   0x6A21             LDR      R1,[R4, #+32]
   \   00000158   0x1840             ADDS     R0,R0,R1
   \   0000015A   0x4288             CMP      R0,R1
   \   0000015C   0xD201             BCS      ??mpi_mul_hlp_27
   \   0000015E   0x1C56             ADDS     R6,R2,#+1
   \   00000160   0xE000             B        ??mpi_mul_hlp_28
   \                     ??mpi_mul_hlp_27: (+1)
   \   00000162   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_28: (+1)
   \   00000164   0x6220             STR      R0,[R4, #+32]
   \   00000166   0x6A68             LDR      R0,[R5, #+36]
   \   00000168   0x2100             MOVS     R1,#+0
   \   0000016A   0x9A00             LDR      R2,[SP, #+0]
   \   0000016C   0x2300             MOVS     R3,#+0
   \   0000016E   0x.... 0x....      BL       __aeabi_lmul
   \   00000172   0x000A             MOVS     R2,R1
   \   00000174   0x1980             ADDS     R0,R0,R6
   \   00000176   0x42B0             CMP      R0,R6
   \   00000178   0xD200             BCS      ??mpi_mul_hlp_29
   \   0000017A   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_29: (+1)
   \   0000017C   0x6A61             LDR      R1,[R4, #+36]
   \   0000017E   0x1840             ADDS     R0,R0,R1
   \   00000180   0x4288             CMP      R0,R1
   \   00000182   0xD201             BCS      ??mpi_mul_hlp_30
   \   00000184   0x1C56             ADDS     R6,R2,#+1
   \   00000186   0xE000             B        ??mpi_mul_hlp_31
   \                     ??mpi_mul_hlp_30: (+1)
   \   00000188   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_31: (+1)
   \   0000018A   0x6260             STR      R0,[R4, #+36]
   1137                  MULADDC_CORE   MULADDC_CORE
   \   0000018C   0x6AA8             LDR      R0,[R5, #+40]
   \   0000018E   0x2100             MOVS     R1,#+0
   \   00000190   0x9A00             LDR      R2,[SP, #+0]
   \   00000192   0x2300             MOVS     R3,#+0
   \   00000194   0x.... 0x....      BL       __aeabi_lmul
   \   00000198   0x000A             MOVS     R2,R1
   \   0000019A   0x1980             ADDS     R0,R0,R6
   \   0000019C   0x42B0             CMP      R0,R6
   \   0000019E   0xD200             BCS      ??mpi_mul_hlp_32
   \   000001A0   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_32: (+1)
   \   000001A2   0x6AA1             LDR      R1,[R4, #+40]
   \   000001A4   0x1840             ADDS     R0,R0,R1
   \   000001A6   0x4288             CMP      R0,R1
   \   000001A8   0xD201             BCS      ??mpi_mul_hlp_33
   \   000001AA   0x1C56             ADDS     R6,R2,#+1
   \   000001AC   0xE000             B        ??mpi_mul_hlp_34
   \                     ??mpi_mul_hlp_33: (+1)
   \   000001AE   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_34: (+1)
   \   000001B0   0x62A0             STR      R0,[R4, #+40]
   \   000001B2   0x6AE8             LDR      R0,[R5, #+44]
   \   000001B4   0x2100             MOVS     R1,#+0
   \   000001B6   0x9A00             LDR      R2,[SP, #+0]
   \   000001B8   0x2300             MOVS     R3,#+0
   \   000001BA   0x.... 0x....      BL       __aeabi_lmul
   \   000001BE   0x000A             MOVS     R2,R1
   \   000001C0   0x1980             ADDS     R0,R0,R6
   \   000001C2   0x42B0             CMP      R0,R6
   \   000001C4   0xD200             BCS      ??mpi_mul_hlp_35
   \   000001C6   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_35: (+1)
   \   000001C8   0x6AE1             LDR      R1,[R4, #+44]
   \   000001CA   0x1840             ADDS     R0,R0,R1
   \   000001CC   0x4288             CMP      R0,R1
   \   000001CE   0xD201             BCS      ??mpi_mul_hlp_36
   \   000001D0   0x1C56             ADDS     R6,R2,#+1
   \   000001D2   0xE000             B        ??mpi_mul_hlp_37
   \                     ??mpi_mul_hlp_36: (+1)
   \   000001D4   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_37: (+1)
   \   000001D6   0x62E0             STR      R0,[R4, #+44]
   1138                  MULADDC_CORE   MULADDC_CORE
   \   000001D8   0x6B28             LDR      R0,[R5, #+48]
   \   000001DA   0x2100             MOVS     R1,#+0
   \   000001DC   0x9A00             LDR      R2,[SP, #+0]
   \   000001DE   0x2300             MOVS     R3,#+0
   \   000001E0   0x.... 0x....      BL       __aeabi_lmul
   \   000001E4   0x000A             MOVS     R2,R1
   \   000001E6   0x1980             ADDS     R0,R0,R6
   \   000001E8   0x42B0             CMP      R0,R6
   \   000001EA   0xD200             BCS      ??mpi_mul_hlp_38
   \   000001EC   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_38: (+1)
   \   000001EE   0x6B21             LDR      R1,[R4, #+48]
   \   000001F0   0x1840             ADDS     R0,R0,R1
   \   000001F2   0x4288             CMP      R0,R1
   \   000001F4   0xD201             BCS      ??mpi_mul_hlp_39
   \   000001F6   0x1C56             ADDS     R6,R2,#+1
   \   000001F8   0xE000             B        ??mpi_mul_hlp_40
   \                     ??mpi_mul_hlp_39: (+1)
   \   000001FA   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_40: (+1)
   \   000001FC   0x6320             STR      R0,[R4, #+48]
   \   000001FE   0x6B68             LDR      R0,[R5, #+52]
   \   00000200   0x2100             MOVS     R1,#+0
   \   00000202   0x9A00             LDR      R2,[SP, #+0]
   \   00000204   0x2300             MOVS     R3,#+0
   \   00000206   0x.... 0x....      BL       __aeabi_lmul
   \   0000020A   0x000A             MOVS     R2,R1
   \   0000020C   0x1980             ADDS     R0,R0,R6
   \   0000020E   0x42B0             CMP      R0,R6
   \   00000210   0xD200             BCS      ??mpi_mul_hlp_41
   \   00000212   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_41: (+1)
   \   00000214   0x6B61             LDR      R1,[R4, #+52]
   \   00000216   0x1840             ADDS     R0,R0,R1
   \   00000218   0x4288             CMP      R0,R1
   \   0000021A   0xD201             BCS      ??mpi_mul_hlp_42
   \   0000021C   0x1C56             ADDS     R6,R2,#+1
   \   0000021E   0xE000             B        ??mpi_mul_hlp_43
   \                     ??mpi_mul_hlp_42: (+1)
   \   00000220   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_43: (+1)
   \   00000222   0x6360             STR      R0,[R4, #+52]
   1139                  MULADDC_CORE   MULADDC_CORE
   \   00000224   0x6BA8             LDR      R0,[R5, #+56]
   \   00000226   0x2100             MOVS     R1,#+0
   \   00000228   0x9A00             LDR      R2,[SP, #+0]
   \   0000022A   0x2300             MOVS     R3,#+0
   \   0000022C   0x.... 0x....      BL       __aeabi_lmul
   \   00000230   0x000A             MOVS     R2,R1
   \   00000232   0x1980             ADDS     R0,R0,R6
   \   00000234   0x42B0             CMP      R0,R6
   \   00000236   0xD200             BCS      ??mpi_mul_hlp_44
   \   00000238   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_44: (+1)
   \   0000023A   0x6BA1             LDR      R1,[R4, #+56]
   \   0000023C   0x1840             ADDS     R0,R0,R1
   \   0000023E   0x4288             CMP      R0,R1
   \   00000240   0xD201             BCS      ??mpi_mul_hlp_45
   \   00000242   0x1C56             ADDS     R6,R2,#+1
   \   00000244   0xE000             B        ??mpi_mul_hlp_46
   \                     ??mpi_mul_hlp_45: (+1)
   \   00000246   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_46: (+1)
   \   00000248   0x63A0             STR      R0,[R4, #+56]
   \   0000024A   0x6BE8             LDR      R0,[R5, #+60]
   \   0000024C   0x2100             MOVS     R1,#+0
   \   0000024E   0x9A00             LDR      R2,[SP, #+0]
   \   00000250   0x2300             MOVS     R3,#+0
   \   00000252   0x.... 0x....      BL       __aeabi_lmul
   \   00000256   0x3540             ADDS     R5,R5,#+64
   \   00000258   0x000A             MOVS     R2,R1
   \   0000025A   0x1980             ADDS     R0,R0,R6
   \   0000025C   0x42B0             CMP      R0,R6
   \   0000025E   0xD200             BCS      ??mpi_mul_hlp_47
   \   00000260   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_47: (+1)
   \   00000262   0x6BE1             LDR      R1,[R4, #+60]
   \   00000264   0x1840             ADDS     R0,R0,R1
   \   00000266   0x4288             CMP      R0,R1
   \   00000268   0xD201             BCS      ??mpi_mul_hlp_48
   \   0000026A   0x1C56             ADDS     R6,R2,#+1
   \   0000026C   0xE000             B        ??mpi_mul_hlp_49
   \                     ??mpi_mul_hlp_48: (+1)
   \   0000026E   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_49: (+1)
   \   00000270   0x63E0             STR      R0,[R4, #+60]
   \   00000272   0x3440             ADDS     R4,R4,#+64
   1140                  MULADDC_STOP
   1141              }
   \   00000274   0x3F10             SUBS     R7,R7,#+16
   \   00000276   0x2F10             CMP      R7,#+16
   \   00000278   0xD300             BCC      .+4
   \   0000027A   0xE6C9             B        ??mpi_mul_hlp_1
   1142          
   1143              for( ; i >= 8; i -= 8 )
   \                     ??mpi_mul_hlp_0: (+1)
   \   0000027C   0x2F08             CMP      R7,#+8
   \   0000027E   0xD215             BCS      ??mpi_mul_hlp_50
   \   00000280   0x2F00             CMP      R7,#+0
   \   00000282   0xD100             BNE      .+4
   \   00000284   0xE0B4             B        ??mpi_mul_hlp_51
   1144              {
   1145                  MULADDC_INIT
   1146                  MULADDC_CORE   MULADDC_CORE
   1147                  MULADDC_CORE   MULADDC_CORE
   1148          
   1149                  MULADDC_CORE   MULADDC_CORE
   1150                  MULADDC_CORE   MULADDC_CORE
   1151                  MULADDC_STOP
   1152              }
   1153          
   1154              for( ; i > 0; i-- )
   1155              {
   1156                  MULADDC_INIT
   1157                  MULADDC_CORE
   \                     ??mpi_mul_hlp_52: (+1)
   \   00000286   0x6828             LDR      R0,[R5, #+0]
   \   00000288   0x2100             MOVS     R1,#+0
   \   0000028A   0x9A00             LDR      R2,[SP, #+0]
   \   0000028C   0x2300             MOVS     R3,#+0
   \   0000028E   0x.... 0x....      BL       __aeabi_lmul
   \   00000292   0x1D2D             ADDS     R5,R5,#+4
   \   00000294   0x000A             MOVS     R2,R1
   \   00000296   0x1980             ADDS     R0,R0,R6
   \   00000298   0x42B0             CMP      R0,R6
   \   0000029A   0xD200             BCS      ??mpi_mul_hlp_53
   \   0000029C   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_53: (+1)
   \   0000029E   0x6821             LDR      R1,[R4, #+0]
   \   000002A0   0x1840             ADDS     R0,R0,R1
   \   000002A2   0x4288             CMP      R0,R1
   \   000002A4   0xD300             BCC      .+4
   \   000002A6   0xE09D             B        ??mpi_mul_hlp_54
   \   000002A8   0x1C56             ADDS     R6,R2,#+1
   \   000002AA   0xE09C             B        ??mpi_mul_hlp_55
   \                     ??mpi_mul_hlp_50: (+1)
   \   000002AC   0x6828             LDR      R0,[R5, #+0]
   \   000002AE   0x2100             MOVS     R1,#+0
   \   000002B0   0x9A00             LDR      R2,[SP, #+0]
   \   000002B2   0x2300             MOVS     R3,#+0
   \   000002B4   0x.... 0x....      BL       __aeabi_lmul
   \   000002B8   0x000A             MOVS     R2,R1
   \   000002BA   0x1980             ADDS     R0,R0,R6
   \   000002BC   0x42B0             CMP      R0,R6
   \   000002BE   0xD200             BCS      ??mpi_mul_hlp_56
   \   000002C0   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_56: (+1)
   \   000002C2   0x6821             LDR      R1,[R4, #+0]
   \   000002C4   0x1840             ADDS     R0,R0,R1
   \   000002C6   0x4288             CMP      R0,R1
   \   000002C8   0xD201             BCS      ??mpi_mul_hlp_57
   \   000002CA   0x1C56             ADDS     R6,R2,#+1
   \   000002CC   0xE000             B        ??mpi_mul_hlp_58
   \                     ??mpi_mul_hlp_57: (+1)
   \   000002CE   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_58: (+1)
   \   000002D0   0x6020             STR      R0,[R4, #+0]
   \   000002D2   0x6868             LDR      R0,[R5, #+4]
   \   000002D4   0x2100             MOVS     R1,#+0
   \   000002D6   0x9A00             LDR      R2,[SP, #+0]
   \   000002D8   0x2300             MOVS     R3,#+0
   \   000002DA   0x.... 0x....      BL       __aeabi_lmul
   \   000002DE   0x000A             MOVS     R2,R1
   \   000002E0   0x1980             ADDS     R0,R0,R6
   \   000002E2   0x42B0             CMP      R0,R6
   \   000002E4   0xD200             BCS      ??mpi_mul_hlp_59
   \   000002E6   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_59: (+1)
   \   000002E8   0x6861             LDR      R1,[R4, #+4]
   \   000002EA   0x1840             ADDS     R0,R0,R1
   \   000002EC   0x4288             CMP      R0,R1
   \   000002EE   0xD201             BCS      ??mpi_mul_hlp_60
   \   000002F0   0x1C56             ADDS     R6,R2,#+1
   \   000002F2   0xE000             B        ??mpi_mul_hlp_61
   \                     ??mpi_mul_hlp_60: (+1)
   \   000002F4   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_61: (+1)
   \   000002F6   0x6060             STR      R0,[R4, #+4]
   \   000002F8   0x68A8             LDR      R0,[R5, #+8]
   \   000002FA   0x2100             MOVS     R1,#+0
   \   000002FC   0x9A00             LDR      R2,[SP, #+0]
   \   000002FE   0x2300             MOVS     R3,#+0
   \   00000300   0x.... 0x....      BL       __aeabi_lmul
   \   00000304   0x000A             MOVS     R2,R1
   \   00000306   0x1980             ADDS     R0,R0,R6
   \   00000308   0x42B0             CMP      R0,R6
   \   0000030A   0xD200             BCS      ??mpi_mul_hlp_62
   \   0000030C   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_62: (+1)
   \   0000030E   0x68A1             LDR      R1,[R4, #+8]
   \   00000310   0x1840             ADDS     R0,R0,R1
   \   00000312   0x4288             CMP      R0,R1
   \   00000314   0xD201             BCS      ??mpi_mul_hlp_63
   \   00000316   0x1C56             ADDS     R6,R2,#+1
   \   00000318   0xE000             B        ??mpi_mul_hlp_64
   \                     ??mpi_mul_hlp_63: (+1)
   \   0000031A   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_64: (+1)
   \   0000031C   0x60A0             STR      R0,[R4, #+8]
   \   0000031E   0x68E8             LDR      R0,[R5, #+12]
   \   00000320   0x2100             MOVS     R1,#+0
   \   00000322   0x9A00             LDR      R2,[SP, #+0]
   \   00000324   0x2300             MOVS     R3,#+0
   \   00000326   0x.... 0x....      BL       __aeabi_lmul
   \   0000032A   0x000A             MOVS     R2,R1
   \   0000032C   0x1980             ADDS     R0,R0,R6
   \   0000032E   0x42B0             CMP      R0,R6
   \   00000330   0xD200             BCS      ??mpi_mul_hlp_65
   \   00000332   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_65: (+1)
   \   00000334   0x68E1             LDR      R1,[R4, #+12]
   \   00000336   0x1840             ADDS     R0,R0,R1
   \   00000338   0x4288             CMP      R0,R1
   \   0000033A   0xD201             BCS      ??mpi_mul_hlp_66
   \   0000033C   0x1C56             ADDS     R6,R2,#+1
   \   0000033E   0xE000             B        ??mpi_mul_hlp_67
   \                     ??mpi_mul_hlp_66: (+1)
   \   00000340   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_67: (+1)
   \   00000342   0x60E0             STR      R0,[R4, #+12]
   \   00000344   0x6928             LDR      R0,[R5, #+16]
   \   00000346   0x2100             MOVS     R1,#+0
   \   00000348   0x9A00             LDR      R2,[SP, #+0]
   \   0000034A   0x2300             MOVS     R3,#+0
   \   0000034C   0x.... 0x....      BL       __aeabi_lmul
   \   00000350   0x000A             MOVS     R2,R1
   \   00000352   0x1980             ADDS     R0,R0,R6
   \   00000354   0x42B0             CMP      R0,R6
   \   00000356   0xD200             BCS      ??mpi_mul_hlp_68
   \   00000358   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_68: (+1)
   \   0000035A   0x6921             LDR      R1,[R4, #+16]
   \   0000035C   0x1840             ADDS     R0,R0,R1
   \   0000035E   0x4288             CMP      R0,R1
   \   00000360   0xD201             BCS      ??mpi_mul_hlp_69
   \   00000362   0x1C56             ADDS     R6,R2,#+1
   \   00000364   0xE000             B        ??mpi_mul_hlp_70
   \                     ??mpi_mul_hlp_69: (+1)
   \   00000366   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_70: (+1)
   \   00000368   0x6120             STR      R0,[R4, #+16]
   \   0000036A   0x6968             LDR      R0,[R5, #+20]
   \   0000036C   0x2100             MOVS     R1,#+0
   \   0000036E   0x9A00             LDR      R2,[SP, #+0]
   \   00000370   0x2300             MOVS     R3,#+0
   \   00000372   0x.... 0x....      BL       __aeabi_lmul
   \   00000376   0x000A             MOVS     R2,R1
   \   00000378   0x1980             ADDS     R0,R0,R6
   \   0000037A   0x42B0             CMP      R0,R6
   \   0000037C   0xD200             BCS      ??mpi_mul_hlp_71
   \   0000037E   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_71: (+1)
   \   00000380   0x6961             LDR      R1,[R4, #+20]
   \   00000382   0x1840             ADDS     R0,R0,R1
   \   00000384   0x4288             CMP      R0,R1
   \   00000386   0xD201             BCS      ??mpi_mul_hlp_72
   \   00000388   0x1C56             ADDS     R6,R2,#+1
   \   0000038A   0xE000             B        ??mpi_mul_hlp_73
   \                     ??mpi_mul_hlp_72: (+1)
   \   0000038C   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_73: (+1)
   \   0000038E   0x6160             STR      R0,[R4, #+20]
   \   00000390   0x69A8             LDR      R0,[R5, #+24]
   \   00000392   0x2100             MOVS     R1,#+0
   \   00000394   0x9A00             LDR      R2,[SP, #+0]
   \   00000396   0x2300             MOVS     R3,#+0
   \   00000398   0x.... 0x....      BL       __aeabi_lmul
   \   0000039C   0x000A             MOVS     R2,R1
   \   0000039E   0x1980             ADDS     R0,R0,R6
   \   000003A0   0x42B0             CMP      R0,R6
   \   000003A2   0xD200             BCS      ??mpi_mul_hlp_74
   \   000003A4   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_74: (+1)
   \   000003A6   0x69A1             LDR      R1,[R4, #+24]
   \   000003A8   0x1840             ADDS     R0,R0,R1
   \   000003AA   0x4288             CMP      R0,R1
   \   000003AC   0xD201             BCS      ??mpi_mul_hlp_75
   \   000003AE   0x1C56             ADDS     R6,R2,#+1
   \   000003B0   0xE000             B        ??mpi_mul_hlp_76
   \                     ??mpi_mul_hlp_75: (+1)
   \   000003B2   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_76: (+1)
   \   000003B4   0x61A0             STR      R0,[R4, #+24]
   \   000003B6   0x69E8             LDR      R0,[R5, #+28]
   \   000003B8   0x2100             MOVS     R1,#+0
   \   000003BA   0x9A00             LDR      R2,[SP, #+0]
   \   000003BC   0x2300             MOVS     R3,#+0
   \   000003BE   0x.... 0x....      BL       __aeabi_lmul
   \   000003C2   0x3520             ADDS     R5,R5,#+32
   \   000003C4   0x000A             MOVS     R2,R1
   \   000003C6   0x1980             ADDS     R0,R0,R6
   \   000003C8   0x42B0             CMP      R0,R6
   \   000003CA   0xD200             BCS      ??mpi_mul_hlp_77
   \   000003CC   0x1C52             ADDS     R2,R2,#+1
   \                     ??mpi_mul_hlp_77: (+1)
   \   000003CE   0x69E1             LDR      R1,[R4, #+28]
   \   000003D0   0x1840             ADDS     R0,R0,R1
   \   000003D2   0x4288             CMP      R0,R1
   \   000003D4   0xD201             BCS      ??mpi_mul_hlp_78
   \   000003D6   0x1C56             ADDS     R6,R2,#+1
   \   000003D8   0xE000             B        ??mpi_mul_hlp_79
   \                     ??mpi_mul_hlp_78: (+1)
   \   000003DA   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_79: (+1)
   \   000003DC   0x61E0             STR      R0,[R4, #+28]
   \   000003DE   0x3420             ADDS     R4,R4,#+32
   \   000003E0   0x3F08             SUBS     R7,R7,#+8
   \   000003E2   0xE74B             B        ??mpi_mul_hlp_0
   \                     ??mpi_mul_hlp_54: (+1)
   \   000003E4   0x0016             MOVS     R6,R2
   \                     ??mpi_mul_hlp_55: (+1)
   \   000003E6   0x6020             STR      R0,[R4, #+0]
   \   000003E8   0x1D24             ADDS     R4,R4,#+4
   1158                  MULADDC_STOP
   1159              }
   \   000003EA   0x1E7F             SUBS     R7,R7,#+1
   \   000003EC   0xD000             BEQ      .+4
   \   000003EE   0xE74A             B        ??mpi_mul_hlp_52
   1160          #endif /* MULADDC_HUIT */
   1161          
   1162              t++;
   1163          
   1164              do {
   1165                  *d += c; c = ( *d < c ); d++;
   \                     ??mpi_mul_hlp_51: (+1)
   \   000003F0   0x6820             LDR      R0,[R4, #+0]
   \   000003F2   0x1980             ADDS     R0,R0,R6
   \   000003F4   0x6020             STR      R0,[R4, #+0]
   \   000003F6   0x42B0             CMP      R0,R6
   \   000003F8   0xD202             BCS      ??mpi_mul_hlp_80
   \   000003FA   0x2601             MOVS     R6,#+1
   \   000003FC   0x1D24             ADDS     R4,R4,#+4
   \   000003FE   0xE7F7             B        ??mpi_mul_hlp_51
   1166              }
   1167              while( c != 0 );
   1168          }
   \                     ??mpi_mul_hlp_80: (+1)
   \   00000400   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
   1169          
   1170          /*
   1171           * Baseline multiplication: X = A * B  (HAC 14.12)
   1172           */

   \                                 In section .text, align 2, keep-with-next
   1173          int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
   1174          {
   \                     mbedtls_mpi_mul_mpi: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x000F             MOVS     R7,R1
   \   00000006   0x0016             MOVS     R6,R2
   1175              int ret;
   1176              size_t i, j;
   1177              mbedtls_mpi TA, TB;
   1178          
   1179              mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
   \   00000008   0xA805             ADD      R0,SP,#+20
   \   0000000A   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000000E   0xA802             ADD      R0,SP,#+8
   \   00000010   0x.... 0x....      BL       mbedtls_mpi_init
   1180          
   1181              if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
   \   00000014   0x9808             LDR      R0,[SP, #+32]
   \   00000016   0x42B8             CMP      R0,R7
   \   00000018   0xD107             BNE      ??mbedtls_mpi_mul_mpi_0
   \   0000001A   0x0039             MOVS     R1,R7
   \   0000001C   0xA805             ADD      R0,SP,#+20
   \   0000001E   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000022   0x9001             STR      R0,[SP, #+4]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD160             BNE      ??mbedtls_mpi_mul_mpi_1
   \   00000028   0xAF05             ADD      R7,SP,#+20
   1182              if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
   \                     ??mbedtls_mpi_mul_mpi_0: (+1)
   \   0000002A   0x9808             LDR      R0,[SP, #+32]
   \   0000002C   0x42B0             CMP      R0,R6
   \   0000002E   0xD107             BNE      ??mbedtls_mpi_mul_mpi_2
   \   00000030   0x0031             MOVS     R1,R6
   \   00000032   0xA802             ADD      R0,SP,#+8
   \   00000034   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000038   0x9001             STR      R0,[SP, #+4]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD155             BNE      ??mbedtls_mpi_mul_mpi_1
   \   0000003E   0xAE02             ADD      R6,SP,#+8
   1183          
   1184              for( i = A->n; i > 0; i-- )
   \                     ??mbedtls_mpi_mul_mpi_2: (+1)
   \   00000040   0x687C             LDR      R4,[R7, #+4]
   \   00000042   0x68B8             LDR      R0,[R7, #+8]
   \   00000044   0x00A1             LSLS     R1,R4,#+2
   \   00000046   0x1840             ADDS     R0,R0,R1
   \   00000048   0xE000             B        ??mbedtls_mpi_mul_mpi_3
   \                     ??mbedtls_mpi_mul_mpi_4: (+1)
   \   0000004A   0x1E64             SUBS     R4,R4,#+1
   \                     ??mbedtls_mpi_mul_mpi_3: (+1)
   \   0000004C   0x1F00             SUBS     R0,R0,#+4
   \   0000004E   0x2C00             CMP      R4,#+0
   \   00000050   0xD002             BEQ      ??mbedtls_mpi_mul_mpi_5
   1185                  if( A->p[i - 1] != 0 )
   \   00000052   0x6801             LDR      R1,[R0, #+0]
   \   00000054   0x2900             CMP      R1,#+0
   \   00000056   0xD0F8             BEQ      ??mbedtls_mpi_mul_mpi_4
   1186                      break;
   1187          
   1188              for( j = B->n; j > 0; j-- )
   \                     ??mbedtls_mpi_mul_mpi_5: (+1)
   \   00000058   0x6875             LDR      R5,[R6, #+4]
   \   0000005A   0x68B0             LDR      R0,[R6, #+8]
   \   0000005C   0x00A9             LSLS     R1,R5,#+2
   \   0000005E   0x1840             ADDS     R0,R0,R1
   \   00000060   0xE000             B        ??mbedtls_mpi_mul_mpi_6
   \                     ??mbedtls_mpi_mul_mpi_7: (+1)
   \   00000062   0x1E6D             SUBS     R5,R5,#+1
   \                     ??mbedtls_mpi_mul_mpi_6: (+1)
   \   00000064   0x1F00             SUBS     R0,R0,#+4
   \   00000066   0x2D00             CMP      R5,#+0
   \   00000068   0xD002             BEQ      ??mbedtls_mpi_mul_mpi_8
   1189                  if( B->p[j - 1] != 0 )
   \   0000006A   0x6801             LDR      R1,[R0, #+0]
   \   0000006C   0x2900             CMP      R1,#+0
   \   0000006E   0xD0F8             BEQ      ??mbedtls_mpi_mul_mpi_7
   1190                      break;
   1191          
   1192              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
   \                     ??mbedtls_mpi_mul_mpi_8: (+1)
   \   00000070   0x1961             ADDS     R1,R4,R5
   \   00000072   0x9808             LDR      R0,[SP, #+32]
   \   00000074   0x.... 0x....      BL       mbedtls_mpi_grow
   \   00000078   0x9001             STR      R0,[SP, #+4]
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD135             BNE      ??mbedtls_mpi_mul_mpi_1
   1193              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
   \   0000007E   0x2101             MOVS     R1,#+1
   \   00000080   0x9808             LDR      R0,[SP, #+32]
   \   00000082   0x.... 0x....      BL       mbedtls_mpi_grow
   \   00000086   0x9000             STR      R0,[SP, #+0]
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD10D             BNE      ??mbedtls_mpi_mul_mpi_9
   \   0000008C   0x9808             LDR      R0,[SP, #+32]
   \   0000008E   0x6840             LDR      R0,[R0, #+4]
   \   00000090   0x0081             LSLS     R1,R0,#+2
   \   00000092   0x9808             LDR      R0,[SP, #+32]
   \   00000094   0x6880             LDR      R0,[R0, #+8]
   \   00000096   0x.... 0x....      BL       __aeabi_memclr4
   \   0000009A   0x2000             MOVS     R0,#+0
   \   0000009C   0x9908             LDR      R1,[SP, #+32]
   \   0000009E   0x6889             LDR      R1,[R1, #+8]
   \   000000A0   0x6008             STR      R0,[R1, #+0]
   \   000000A2   0x2001             MOVS     R0,#+1
   \   000000A4   0x9908             LDR      R1,[SP, #+32]
   \   000000A6   0x6008             STR      R0,[R1, #+0]
   \                     ??mbedtls_mpi_mul_mpi_9: (+1)
   \   000000A8   0x9800             LDR      R0,[SP, #+0]
   \   000000AA   0x9001             STR      R0,[SP, #+4]
   \   000000AC   0x2800             CMP      R0,#+0
   \   000000AE   0xD11C             BNE      ??mbedtls_mpi_mul_mpi_1
   1194          
   1195              for( i++; j > 0; j-- )
   \   000000B0   0x1C64             ADDS     R4,R4,#+1
   \   000000B2   0x2D00             CMP      R5,#+0
   \   000000B4   0xD014             BEQ      ??mbedtls_mpi_mul_mpi_10
   \   000000B6   0x00A8             LSLS     R0,R5,#+2
   \   000000B8   0x9000             STR      R0,[SP, #+0]
   \   000000BA   0x1E64             SUBS     R4,R4,#+1
   1196                  mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );
   \                     ??mbedtls_mpi_mul_mpi_11: (+1)
   \   000000BC   0x68B0             LDR      R0,[R6, #+8]
   \   000000BE   0x9900             LDR      R1,[SP, #+0]
   \   000000C0   0x1840             ADDS     R0,R0,R1
   \   000000C2   0x1F00             SUBS     R0,R0,#+4
   \   000000C4   0x6803             LDR      R3,[R0, #+0]
   \   000000C6   0x9808             LDR      R0,[SP, #+32]
   \   000000C8   0x6880             LDR      R0,[R0, #+8]
   \   000000CA   0x1842             ADDS     R2,R0,R1
   \   000000CC   0x1F12             SUBS     R2,R2,#+4
   \   000000CE   0x68B9             LDR      R1,[R7, #+8]
   \   000000D0   0x0020             MOVS     R0,R4
   \   000000D2   0x.... 0x....      BL       mpi_mul_hlp
   \   000000D6   0x9800             LDR      R0,[SP, #+0]
   \   000000D8   0x1F00             SUBS     R0,R0,#+4
   \   000000DA   0x9000             STR      R0,[SP, #+0]
   \   000000DC   0x1E6D             SUBS     R5,R5,#+1
   \   000000DE   0xD1ED             BNE      ??mbedtls_mpi_mul_mpi_11
   1197          
   1198              X->s = A->s * B->s;
   \                     ??mbedtls_mpi_mul_mpi_10: (+1)
   \   000000E0   0x6838             LDR      R0,[R7, #+0]
   \   000000E2   0x6831             LDR      R1,[R6, #+0]
   \   000000E4   0x4348             MULS     R0,R1,R0
   \   000000E6   0x9908             LDR      R1,[SP, #+32]
   \   000000E8   0x6008             STR      R0,[R1, #+0]
   1199          
   1200          cleanup:
   1201          
   1202              mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
   \                     ??mbedtls_mpi_mul_mpi_1: (+1)
   \   000000EA   0xA802             ADD      R0,SP,#+8
   \   000000EC   0x.... 0x....      BL       mbedtls_mpi_free
   \   000000F0   0xA805             ADD      R0,SP,#+20
   \   000000F2   0x.... 0x....      BL       mbedtls_mpi_free
   1203          
   1204              return( ret );
   \   000000F6   0x9801             LDR      R0,[SP, #+4]
   \   000000F8   0xB009             ADD      SP,SP,#+36
   \   000000FA   0xBDF0             POP      {R4-R7,PC}       ;; return
   1205          }
   1206          
   1207          /*
   1208           * Baseline multiplication: X = A * b
   1209           */

   \                                 In section .text, align 2, keep-with-next
   1210          int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
   1211          {
   \                     mbedtls_mpi_mul_int: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   1212              mbedtls_mpi _B;
   1213              mbedtls_mpi_uint p[1];
   1214          
   1215              _B.s = 1;
   \   00000004   0x2301             MOVS     R3,#+1
   \   00000006   0x9301             STR      R3,[SP, #+4]
   1216              _B.n = 1;
   \   00000008   0x9302             STR      R3,[SP, #+8]
   1217              _B.p = p;
   \   0000000A   0x466B             MOV      R3,SP
   \   0000000C   0x9303             STR      R3,[SP, #+12]
   1218              p[0] = b;
   \   0000000E   0x9200             STR      R2,[SP, #+0]
   1219          
   1220              return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
   \   00000010   0xAA01             ADD      R2,SP,#+4
   \   00000012   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   00000016   0xB005             ADD      SP,SP,#+20
   \   00000018   0xBD00             POP      {PC}             ;; return
   1221          }
   1222          
   1223          /*
   1224           * Unsigned integer divide - double mbedtls_mpi_uint dividend, u1/u0, and
   1225           * mbedtls_mpi_uint divisor, d
   1226           */
   1227          static mbedtls_mpi_uint mbedtls_int_div_int( mbedtls_mpi_uint u1,
   1228                      mbedtls_mpi_uint u0, mbedtls_mpi_uint d, mbedtls_mpi_uint *r )
   1229          {
   1230          #if defined(MBEDTLS_HAVE_UDBL)
   1231              mbedtls_t_udbl dividend, quotient;
   1232          #else
   1233              const mbedtls_mpi_uint radix = (mbedtls_mpi_uint) 1 << biH;
   1234              const mbedtls_mpi_uint uint_halfword_mask = ( (mbedtls_mpi_uint) 1 << biH ) - 1;
   1235              mbedtls_mpi_uint d0, d1, q0, q1, rAX, r0, quotient;
   1236              mbedtls_mpi_uint u0_msw, u0_lsw;
   1237              size_t s;
   1238          #endif
   1239          
   1240              /*
   1241               * Check for overflow
   1242               */
   1243              if( 0 == d || u1 >= d )
   1244              {
   1245                  if (r != NULL) *r = ~0;
   1246          
   1247                  return ( ~0 );
   1248              }
   1249          
   1250          #if defined(MBEDTLS_HAVE_UDBL)
   1251              dividend  = (mbedtls_t_udbl) u1 << biL;
   1252              dividend |= (mbedtls_t_udbl) u0;
   1253              quotient = dividend / d;
   1254              if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )
   1255                  quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;
   1256          
   1257              if( r != NULL )
   1258                  *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );
   1259          
   1260              return (mbedtls_mpi_uint) quotient;
   1261          #else
   1262          
   1263              /*
   1264               * Algorithm D, Section 4.3.1 - The Art of Computer Programming
   1265               *   Vol. 2 - Seminumerical Algorithms, Knuth
   1266               */
   1267          
   1268              /*
   1269               * Normalize the divisor, d, and dividend, u0, u1
   1270               */
   1271              s = mbedtls_clz( d );
   1272              d = d << s;
   1273          
   1274              u1 = u1 << s;
   1275              u1 |= ( u0 >> ( biL - s ) ) & ( -(mbedtls_mpi_sint)s >> ( biL - 1 ) );
   1276              u0 =  u0 << s;
   1277          
   1278              d1 = d >> biH;
   1279              d0 = d & uint_halfword_mask;
   1280          
   1281              u0_msw = u0 >> biH;
   1282              u0_lsw = u0 & uint_halfword_mask;
   1283          
   1284              /*
   1285               * Find the first quotient and remainder
   1286               */
   1287              q1 = u1 / d1;
   1288              r0 = u1 - d1 * q1;
   1289          
   1290              while( q1 >= radix || ( q1 * d0 > radix * r0 + u0_msw ) )
   1291              {
   1292                  q1 -= 1;
   1293                  r0 += d1;
   1294          
   1295                  if ( r0 >= radix ) break;
   1296              }
   1297          
   1298              rAX = ( u1 * radix ) + ( u0_msw - q1 * d );
   1299              q0 = rAX / d1;
   1300              r0 = rAX - q0 * d1;
   1301          
   1302              while( q0 >= radix || ( q0 * d0 > radix * r0 + u0_lsw ) )
   1303              {
   1304                  q0 -= 1;
   1305                  r0 += d1;
   1306          
   1307                  if ( r0 >= radix ) break;
   1308              }
   1309          
   1310              if (r != NULL)
   1311                  *r = ( rAX * radix + u0_lsw - q0 * d ) >> s;
   1312          
   1313              quotient = q1 * radix + q0;
   1314          
   1315              return quotient;
   1316          #endif
   1317          }
   1318          
   1319          /*
   1320           * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
   1321           */

   \                                 In section .text, align 2, keep-with-next
   1322          int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
   1323          {
   \                     mbedtls_mpi_div_mpi: (+1)
   \   00000000   0xB5FF             PUSH     {R0-R7,LR}
   \   00000002   0xB099             SUB      SP,SP,#+100
   1324              int ret;
   1325              size_t i, n, t, k;
   1326              mbedtls_mpi X, Y, Z, T1, T2;
   1327          
   1328              if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
   \   00000004   0x2600             MOVS     R6,#+0
   \   00000006   0x9600             STR      R6,[SP, #+0]
   \   00000008   0x2401             MOVS     R4,#+1
   \   0000000A   0x9402             STR      R4,[SP, #+8]
   \   0000000C   0x9403             STR      R4,[SP, #+12]
   \   0000000E   0x4668             MOV      R0,SP
   \   00000010   0x9004             STR      R0,[SP, #+16]
   \   00000012   0xA902             ADD      R1,SP,#+8
   \   00000014   0x981C             LDR      R0,[SP, #+112]
   \   00000016   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD102             BNE      ??mbedtls_mpi_div_mpi_0
   1329                  return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
   \   0000001E   0x200B             MOVS     R0,#+11
   \   00000020   0x43C0             MVNS     R0,R0            ;; #-12
   \   00000022   0xE1D3             B        ??mbedtls_mpi_div_mpi_1
   1330          
   1331              mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
   \                     ??mbedtls_mpi_div_mpi_0: (+1)
   \   00000024   0xA807             ADD      R0,SP,#+28
   \   00000026   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000002A   0xA80E             ADD      R0,SP,#+56
   \   0000002C   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000030   0xA813             ADD      R0,SP,#+76
   \   00000032   0x.... 0x....      BL       mbedtls_mpi_init
   1332              mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
   \   00000036   0xA80B             ADD      R0,SP,#+44
   \   00000038   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000003C   0xA816             ADD      R0,SP,#+88
   \   0000003E   0x.... 0x....      BL       mbedtls_mpi_init
   1333          
   1334              if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
   \   00000042   0x991C             LDR      R1,[SP, #+112]
   \   00000044   0x981B             LDR      R0,[SP, #+108]
   \   00000046   0x.... 0x....      BL       mbedtls_mpi_cmp_abs
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD521             BPL      ??mbedtls_mpi_div_mpi_2
   1335              {
   1336                  if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
   \   0000004E   0x9819             LDR      R0,[SP, #+100]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD013             BEQ      ??mbedtls_mpi_div_mpi_3
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x.... 0x....      BL       mbedtls_mpi_grow
   \   0000005A   0x0005             MOVS     R5,R0
   \   0000005C   0xD10B             BNE      ??mbedtls_mpi_div_mpi_4
   \   0000005E   0x9819             LDR      R0,[SP, #+100]
   \   00000060   0x6840             LDR      R0,[R0, #+4]
   \   00000062   0x0081             LSLS     R1,R0,#+2
   \   00000064   0x9819             LDR      R0,[SP, #+100]
   \   00000066   0x6880             LDR      R0,[R0, #+8]
   \   00000068   0x.... 0x....      BL       __aeabi_memclr4
   \   0000006C   0x9819             LDR      R0,[SP, #+100]
   \   0000006E   0x6880             LDR      R0,[R0, #+8]
   \   00000070   0x6006             STR      R6,[R0, #+0]
   \   00000072   0x9819             LDR      R0,[SP, #+100]
   \   00000074   0x6004             STR      R4,[R0, #+0]
   \                     ??mbedtls_mpi_div_mpi_4: (+1)
   \   00000076   0x2D00             CMP      R5,#+0
   \   00000078   0xD000             BEQ      .+4
   \   0000007A   0xE197             B        ??mbedtls_mpi_div_mpi_5
   1337                  if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
   \                     ??mbedtls_mpi_div_mpi_3: (+1)
   \   0000007C   0x981A             LDR      R0,[SP, #+104]
   \   0000007E   0x2800             CMP      R0,#+0
   \   00000080   0xD005             BEQ      ??mbedtls_mpi_div_mpi_6
   \   00000082   0x991B             LDR      R1,[SP, #+108]
   \   00000084   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000088   0x0005             MOVS     R5,R0
   \   0000008A   0xD000             BEQ      .+4
   \   0000008C   0xE18E             B        ??mbedtls_mpi_div_mpi_5
   1338                  return( 0 );
   \                     ??mbedtls_mpi_div_mpi_6: (+1)
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0xE19C             B        ??mbedtls_mpi_div_mpi_1
   1339              }
   1340          
   1341              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
   \                     ??mbedtls_mpi_div_mpi_2: (+1)
   \   00000092   0x991B             LDR      R1,[SP, #+108]
   \   00000094   0xA807             ADD      R0,SP,#+28
   \   00000096   0x.... 0x....      BL       mbedtls_mpi_copy
   \   0000009A   0x0005             MOVS     R5,R0
   \   0000009C   0xD000             BEQ      .+4
   \   0000009E   0xE185             B        ??mbedtls_mpi_div_mpi_5
   1342              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
   \   000000A0   0x991C             LDR      R1,[SP, #+112]
   \   000000A2   0xA80E             ADD      R0,SP,#+56
   \   000000A4   0x.... 0x....      BL       mbedtls_mpi_copy
   \   000000A8   0x0005             MOVS     R5,R0
   \   000000AA   0xD000             BEQ      .+4
   \   000000AC   0xE17E             B        ??mbedtls_mpi_div_mpi_5
   1343              X.s = Y.s = 1;
   \   000000AE   0x940E             STR      R4,[SP, #+56]
   \   000000B0   0x9407             STR      R4,[SP, #+28]
   1344          
   1345              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
   \   000000B2   0x981B             LDR      R0,[SP, #+108]
   \   000000B4   0x6841             LDR      R1,[R0, #+4]
   \   000000B6   0x1C89             ADDS     R1,R1,#+2
   \   000000B8   0xA813             ADD      R0,SP,#+76
   \   000000BA   0x.... 0x....      BL       mbedtls_mpi_grow
   \   000000BE   0x0005             MOVS     R5,R0
   \   000000C0   0xD000             BEQ      .+4
   \   000000C2   0xE173             B        ??mbedtls_mpi_div_mpi_5
   1346              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
   \   000000C4   0x2101             MOVS     R1,#+1
   \   000000C6   0xA813             ADD      R0,SP,#+76
   \   000000C8   0x.... 0x....      BL       mbedtls_mpi_grow
   \   000000CC   0x0005             MOVS     R5,R0
   \   000000CE   0xD107             BNE      ??mbedtls_mpi_div_mpi_7
   \   000000D0   0x9814             LDR      R0,[SP, #+80]
   \   000000D2   0x0081             LSLS     R1,R0,#+2
   \   000000D4   0x9815             LDR      R0,[SP, #+84]
   \   000000D6   0x.... 0x....      BL       __aeabi_memclr4
   \   000000DA   0x9815             LDR      R0,[SP, #+84]
   \   000000DC   0x6006             STR      R6,[R0, #+0]
   \   000000DE   0x9413             STR      R4,[SP, #+76]
   \                     ??mbedtls_mpi_div_mpi_7: (+1)
   \   000000E0   0x2D00             CMP      R5,#+0
   \   000000E2   0xD000             BEQ      .+4
   \   000000E4   0xE162             B        ??mbedtls_mpi_div_mpi_5
   1347              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
   \   000000E6   0x2102             MOVS     R1,#+2
   \   000000E8   0xA80B             ADD      R0,SP,#+44
   \   000000EA   0x.... 0x....      BL       mbedtls_mpi_grow
   \   000000EE   0x0005             MOVS     R5,R0
   \   000000F0   0xD000             BEQ      .+4
   \   000000F2   0xE15B             B        ??mbedtls_mpi_div_mpi_5
   1348              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
   \   000000F4   0x2103             MOVS     R1,#+3
   \   000000F6   0xA816             ADD      R0,SP,#+88
   \   000000F8   0x.... 0x....      BL       mbedtls_mpi_grow
   \   000000FC   0x0005             MOVS     R5,R0
   \   000000FE   0xD000             BEQ      .+4
   \   00000100   0xE154             B        ??mbedtls_mpi_div_mpi_5
   1349          
   1350              k = mbedtls_mpi_bitlen( &Y ) % biL;
   \   00000102   0xA80E             ADD      R0,SP,#+56
   \   00000104   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   00000108   0x06C0             LSLS     R0,R0,#+27
   \   0000010A   0x0EC0             LSRS     R0,R0,#+27
   1351              if( k < biL - 1 )
   \   0000010C   0x281F             CMP      R0,#+31
   \   0000010E   0xD211             BCS      ??mbedtls_mpi_div_mpi_8
   1352              {
   1353                  k = biL - 1 - k;
   \   00000110   0x211F             MOVS     R1,#+31
   \   00000112   0x1A08             SUBS     R0,R1,R0
   \   00000114   0x9012             STR      R0,[SP, #+72]
   1354                  MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
   \   00000116   0x4601             MOV      R1,R0
   \   00000118   0xA807             ADD      R0,SP,#+28
   \   0000011A   0x.... 0x....      BL       mbedtls_mpi_shift_l
   \   0000011E   0x0005             MOVS     R5,R0
   \   00000120   0xD000             BEQ      .+4
   \   00000122   0xE143             B        ??mbedtls_mpi_div_mpi_5
   1355                  MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
   \   00000124   0x9912             LDR      R1,[SP, #+72]
   \   00000126   0xA80E             ADD      R0,SP,#+56
   \   00000128   0x.... 0x....      BL       mbedtls_mpi_shift_l
   \   0000012C   0x0005             MOVS     R5,R0
   \   0000012E   0xD000             BEQ      .+4
   \   00000130   0xE13C             B        ??mbedtls_mpi_div_mpi_5
   \   00000132   0xE000             B        ??mbedtls_mpi_div_mpi_9
   1356              }
   1357              else k = 0;
   \                     ??mbedtls_mpi_div_mpi_8: (+1)
   \   00000134   0x9612             STR      R6,[SP, #+72]
   1358          
   1359              n = X.n - 1;
   \                     ??mbedtls_mpi_div_mpi_9: (+1)
   \   00000136   0x9F08             LDR      R7,[SP, #+32]
   \   00000138   0x1E7F             SUBS     R7,R7,#+1
   1360              t = Y.n - 1;
   \   0000013A   0x980F             LDR      R0,[SP, #+60]
   \   0000013C   0x1E40             SUBS     R0,R0,#+1
   \   0000013E   0x900A             STR      R0,[SP, #+40]
   1361              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
   \   00000140   0x1A38             SUBS     R0,R7,R0
   \   00000142   0x9001             STR      R0,[SP, #+4]
   \   00000144   0x0140             LSLS     R0,R0,#+5
   \   00000146   0x9000             STR      R0,[SP, #+0]
   \   00000148   0x4601             MOV      R1,R0
   \   0000014A   0xA80E             ADD      R0,SP,#+56
   \   0000014C   0x.... 0x....      BL       mbedtls_mpi_shift_l
   \   00000150   0x0005             MOVS     R5,R0
   \   00000152   0xD000             BEQ      .+4
   \   00000154   0xE12A             B        ??mbedtls_mpi_div_mpi_5
   1362          
   1363              while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
   \                     ??mbedtls_mpi_div_mpi_10: (+1)
   \   00000156   0xA90E             ADD      R1,SP,#+56
   \   00000158   0xA807             ADD      R0,SP,#+28
   \   0000015A   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000015E   0x2800             CMP      R0,#+0
   \   00000160   0xD40F             BMI      ??mbedtls_mpi_div_mpi_11
   \   00000162   0x9815             LDR      R0,[SP, #+84]
   \   00000164   0x9901             LDR      R1,[SP, #+4]
   \   00000166   0x0089             LSLS     R1,R1,#+2
   \   00000168   0x1840             ADDS     R0,R0,R1
   \   0000016A   0x6801             LDR      R1,[R0, #+0]
   \   0000016C   0x1C49             ADDS     R1,R1,#+1
   \   0000016E   0x6001             STR      R1,[R0, #+0]
   1364              {
   1365                  Z.p[n - t]++;
   1366                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
   \   00000170   0xAA0E             ADD      R2,SP,#+56
   \   00000172   0xA907             ADD      R1,SP,#+28
   \   00000174   0xA807             ADD      R0,SP,#+28
   \   00000176   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   0000017A   0x0005             MOVS     R5,R0
   \   0000017C   0xD000             BEQ      .+4
   \   0000017E   0xE115             B        ??mbedtls_mpi_div_mpi_5
   \   00000180   0xE7E9             B        ??mbedtls_mpi_div_mpi_10
   1367              }
   1368              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
   \                     ??mbedtls_mpi_div_mpi_11: (+1)
   \   00000182   0x9900             LDR      R1,[SP, #+0]
   \   00000184   0xA80E             ADD      R0,SP,#+56
   \   00000186   0x.... 0x....      BL       mbedtls_mpi_shift_r
   \   0000018A   0x0005             MOVS     R5,R0
   \   0000018C   0xD000             BEQ      .+4
   \   0000018E   0xE10D             B        ??mbedtls_mpi_div_mpi_5
   1369          
   1370              for( i = n; i > t ; i-- )
   \   00000190   0x9706             STR      R7,[SP, #+24]
   \   00000192   0x980A             LDR      R0,[SP, #+40]
   \   00000194   0x42B8             CMP      R0,R7
   \   00000196   0xD300             BCC      .+4
   \   00000198   0xE0DA             B        ??mbedtls_mpi_div_mpi_12
   \   0000019A   0x00B8             LSLS     R0,R7,#+2
   \   0000019C   0x9005             STR      R0,[SP, #+20]
   \   0000019E   0x9801             LDR      R0,[SP, #+4]
   \   000001A0   0x0087             LSLS     R7,R0,#+2
   \   000001A2   0x1E40             SUBS     R0,R0,#+1
   \   000001A4   0x0140             LSLS     R0,R0,#+5
   \   000001A6   0x9011             STR      R0,[SP, #+68]
   \   000001A8   0x980A             LDR      R0,[SP, #+40]
   \   000001AA   0x0080             LSLS     R0,R0,#+2
   \   000001AC   0x9001             STR      R0,[SP, #+4]
   1371              {
   1372                  if( X.p[i] >= Y.p[t] )
   \                     ??mbedtls_mpi_div_mpi_13: (+1)
   \   000001AE   0x9810             LDR      R0,[SP, #+64]
   \   000001B0   0x9901             LDR      R1,[SP, #+4]
   \   000001B2   0x5842             LDR      R2,[R0, R1]
   \   000001B4   0x9809             LDR      R0,[SP, #+36]
   \   000001B6   0x9905             LDR      R1,[SP, #+20]
   \   000001B8   0x1840             ADDS     R0,R0,R1
   \   000001BA   0x6801             LDR      R1,[R0, #+0]
   \   000001BC   0x4291             CMP      R1,R2
   \   000001BE   0xD20C             BCS      ??mbedtls_mpi_div_mpi_14
   1373                      Z.p[i - t - 1] = ~0;
   1374                  else
   1375                  {
   1376                      Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
   1377                                                                      Y.p[t], NULL);
   \   000001C0   0x2A00             CMP      R2,#+0
   \   000001C2   0xD00A             BEQ      ??mbedtls_mpi_div_mpi_14
   \   000001C4   0x1F00             SUBS     R0,R0,#+4
   \   000001C6   0x6800             LDR      R0,[R0, #+0]
   \   000001C8   0x2300             MOVS     R3,#+0
   \   000001CA   0x.... 0x....      BL       __aeabi_uldivmod
   \   000001CE   0x2901             CMP      R1,#+1
   \   000001D0   0xD301             BCC      ??mbedtls_mpi_div_mpi_15
   \   000001D2   0x2000             MOVS     R0,#+0
   \   000001D4   0x43C0             MVNS     R0,R0            ;; #-1
   \                     ??mbedtls_mpi_div_mpi_15: (+1)
   \   000001D6   0x1C40             ADDS     R0,R0,#+1
   \   000001D8   0xE000             B        ??mbedtls_mpi_div_mpi_16
   \                     ??mbedtls_mpi_div_mpi_14: (+1)
   \   000001DA   0x2000             MOVS     R0,#+0
   1378                  }
   1379          
   1380                  Z.p[i - t - 1]++;
   \                     ??mbedtls_mpi_div_mpi_16: (+1)
   \   000001DC   0x9915             LDR      R1,[SP, #+84]
   \   000001DE   0x19C9             ADDS     R1,R1,R7
   \   000001E0   0x1F09             SUBS     R1,R1,#+4
   \   000001E2   0x6008             STR      R0,[R1, #+0]
   1381                  do
   1382                  {
   1383                      Z.p[i - t - 1]--;
   \                     ??mbedtls_mpi_div_mpi_17: (+1)
   \   000001E4   0x9815             LDR      R0,[SP, #+84]
   \   000001E6   0x19C0             ADDS     R0,R0,R7
   \   000001E8   0x1F00             SUBS     R0,R0,#+4
   \   000001EA   0x6801             LDR      R1,[R0, #+0]
   \   000001EC   0x1E49             SUBS     R1,R1,#+1
   \   000001EE   0x6001             STR      R1,[R0, #+0]
   1384          
   1385                      MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
   \   000001F0   0x2101             MOVS     R1,#+1
   \   000001F2   0xA80B             ADD      R0,SP,#+44
   \   000001F4   0x.... 0x....      BL       mbedtls_mpi_grow
   \   000001F8   0x0005             MOVS     R5,R0
   \   000001FA   0xD107             BNE      ??mbedtls_mpi_div_mpi_18
   \   000001FC   0x980C             LDR      R0,[SP, #+48]
   \   000001FE   0x0081             LSLS     R1,R0,#+2
   \   00000200   0x980D             LDR      R0,[SP, #+52]
   \   00000202   0x.... 0x....      BL       __aeabi_memclr4
   \   00000206   0x980D             LDR      R0,[SP, #+52]
   \   00000208   0x6006             STR      R6,[R0, #+0]
   \   0000020A   0x940B             STR      R4,[SP, #+44]
   \                     ??mbedtls_mpi_div_mpi_18: (+1)
   \   0000020C   0x2D00             CMP      R5,#+0
   \   0000020E   0xD000             BEQ      .+4
   \   00000210   0xE0CC             B        ??mbedtls_mpi_div_mpi_5
   1386                      T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
   \   00000212   0x980A             LDR      R0,[SP, #+40]
   \   00000214   0x2800             CMP      R0,#+0
   \   00000216   0xD004             BEQ      ??mbedtls_mpi_div_mpi_19
   \   00000218   0x9810             LDR      R0,[SP, #+64]
   \   0000021A   0x9901             LDR      R1,[SP, #+4]
   \   0000021C   0x1840             ADDS     R0,R0,R1
   \   0000021E   0x1F00             SUBS     R0,R0,#+4
   \   00000220   0x6800             LDR      R0,[R0, #+0]
   \                     ??mbedtls_mpi_div_mpi_19: (+1)
   \   00000222   0x990D             LDR      R1,[SP, #+52]
   \   00000224   0x6008             STR      R0,[R1, #+0]
   1387                      T1.p[1] = Y.p[t];
   \   00000226   0x9810             LDR      R0,[SP, #+64]
   \   00000228   0x9A01             LDR      R2,[SP, #+4]
   \   0000022A   0x5880             LDR      R0,[R0, R2]
   \   0000022C   0x6048             STR      R0,[R1, #+4]
   1388                      MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
   \   0000022E   0x9815             LDR      R0,[SP, #+84]
   \   00000230   0x19C0             ADDS     R0,R0,R7
   \   00000232   0x1F00             SUBS     R0,R0,#+4
   \   00000234   0x6800             LDR      R0,[R0, #+0]
   \   00000236   0x9402             STR      R4,[SP, #+8]
   \   00000238   0x9403             STR      R4,[SP, #+12]
   \   0000023A   0x4669             MOV      R1,SP
   \   0000023C   0x9104             STR      R1,[SP, #+16]
   \   0000023E   0x9000             STR      R0,[SP, #+0]
   \   00000240   0xAA02             ADD      R2,SP,#+8
   \   00000242   0xA90B             ADD      R1,SP,#+44
   \   00000244   0xA80B             ADD      R0,SP,#+44
   \   00000246   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000024A   0x0005             MOVS     R5,R0
   \   0000024C   0xD000             BEQ      .+4
   \   0000024E   0xE0AD             B        ??mbedtls_mpi_div_mpi_5
   1389          
   1390                      MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
   \   00000250   0x2101             MOVS     R1,#+1
   \   00000252   0xA816             ADD      R0,SP,#+88
   \   00000254   0x.... 0x....      BL       mbedtls_mpi_grow
   \   00000258   0x0005             MOVS     R5,R0
   \   0000025A   0xD107             BNE      ??mbedtls_mpi_div_mpi_20
   \   0000025C   0x9817             LDR      R0,[SP, #+92]
   \   0000025E   0x0081             LSLS     R1,R0,#+2
   \   00000260   0x9818             LDR      R0,[SP, #+96]
   \   00000262   0x.... 0x....      BL       __aeabi_memclr4
   \   00000266   0x9818             LDR      R0,[SP, #+96]
   \   00000268   0x6006             STR      R6,[R0, #+0]
   \   0000026A   0x9416             STR      R4,[SP, #+88]
   \                     ??mbedtls_mpi_div_mpi_20: (+1)
   \   0000026C   0x2D00             CMP      R5,#+0
   \   0000026E   0xD000             BEQ      .+4
   \   00000270   0xE09C             B        ??mbedtls_mpi_div_mpi_5
   1391                      T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
   \   00000272   0x9806             LDR      R0,[SP, #+24]
   \   00000274   0x2802             CMP      R0,#+2
   \   00000276   0xD201             BCS      ??mbedtls_mpi_div_mpi_21
   \   00000278   0x2100             MOVS     R1,#+0
   \   0000027A   0xE004             B        ??mbedtls_mpi_div_mpi_22
   \                     ??mbedtls_mpi_div_mpi_21: (+1)
   \   0000027C   0x9809             LDR      R0,[SP, #+36]
   \   0000027E   0x9905             LDR      R1,[SP, #+20]
   \   00000280   0x1840             ADDS     R0,R0,R1
   \   00000282   0x3808             SUBS     R0,R0,#+8
   \   00000284   0x6801             LDR      R1,[R0, #+0]
   \                     ??mbedtls_mpi_div_mpi_22: (+1)
   \   00000286   0x9818             LDR      R0,[SP, #+96]
   \   00000288   0x6001             STR      R1,[R0, #+0]
   1392                      T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
   \   0000028A   0x9906             LDR      R1,[SP, #+24]
   \   0000028C   0x2900             CMP      R1,#+0
   \   0000028E   0xD004             BEQ      ??mbedtls_mpi_div_mpi_23
   \   00000290   0x9909             LDR      R1,[SP, #+36]
   \   00000292   0x9A05             LDR      R2,[SP, #+20]
   \   00000294   0x1889             ADDS     R1,R1,R2
   \   00000296   0x3908             SUBS     R1,R1,#+8
   \   00000298   0x6849             LDR      R1,[R1, #+4]
   \                     ??mbedtls_mpi_div_mpi_23: (+1)
   \   0000029A   0x6041             STR      R1,[R0, #+4]
   1393                      T2.p[2] = X.p[i];
   \   0000029C   0x9909             LDR      R1,[SP, #+36]
   \   0000029E   0x9A05             LDR      R2,[SP, #+20]
   \   000002A0   0x5889             LDR      R1,[R1, R2]
   \   000002A2   0x6081             STR      R1,[R0, #+8]
   1394                  }
   1395                  while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
   \   000002A4   0xA916             ADD      R1,SP,#+88
   \   000002A6   0xA80B             ADD      R0,SP,#+44
   \   000002A8   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   000002AC   0x2801             CMP      R0,#+1
   \   000002AE   0xDA99             BGE      ??mbedtls_mpi_div_mpi_17
   1396          
   1397                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
   \   000002B0   0x9815             LDR      R0,[SP, #+84]
   \   000002B2   0x19C0             ADDS     R0,R0,R7
   \   000002B4   0x1F00             SUBS     R0,R0,#+4
   \   000002B6   0x6800             LDR      R0,[R0, #+0]
   \   000002B8   0x9402             STR      R4,[SP, #+8]
   \   000002BA   0x9403             STR      R4,[SP, #+12]
   \   000002BC   0x4669             MOV      R1,SP
   \   000002BE   0x9104             STR      R1,[SP, #+16]
   \   000002C0   0x9000             STR      R0,[SP, #+0]
   \   000002C2   0xAA02             ADD      R2,SP,#+8
   \   000002C4   0xA90E             ADD      R1,SP,#+56
   \   000002C6   0xA80B             ADD      R0,SP,#+44
   \   000002C8   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000002CC   0x0005             MOVS     R5,R0
   \   000002CE   0xD16D             BNE      ??mbedtls_mpi_div_mpi_5
   1398                  MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
   \   000002D0   0x9911             LDR      R1,[SP, #+68]
   \   000002D2   0xA80B             ADD      R0,SP,#+44
   \   000002D4   0x.... 0x....      BL       mbedtls_mpi_shift_l
   \   000002D8   0x0005             MOVS     R5,R0
   \   000002DA   0xD167             BNE      ??mbedtls_mpi_div_mpi_5
   1399                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
   \   000002DC   0xAA0B             ADD      R2,SP,#+44
   \   000002DE   0xA907             ADD      R1,SP,#+28
   \   000002E0   0xA807             ADD      R0,SP,#+28
   \   000002E2   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   000002E6   0x0005             MOVS     R5,R0
   \   000002E8   0xD160             BNE      ??mbedtls_mpi_div_mpi_5
   1400          
   1401                  if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
   \   000002EA   0x9600             STR      R6,[SP, #+0]
   \   000002EC   0x9402             STR      R4,[SP, #+8]
   \   000002EE   0x9403             STR      R4,[SP, #+12]
   \   000002F0   0x4668             MOV      R0,SP
   \   000002F2   0x9004             STR      R0,[SP, #+16]
   \   000002F4   0xA902             ADD      R1,SP,#+8
   \   000002F6   0xA807             ADD      R0,SP,#+28
   \   000002F8   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   000002FC   0x2800             CMP      R0,#+0
   \   000002FE   0xD518             BPL      ??mbedtls_mpi_div_mpi_24
   1402                  {
   1403                      MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
   \   00000300   0xA90E             ADD      R1,SP,#+56
   \   00000302   0xA80B             ADD      R0,SP,#+44
   \   00000304   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000308   0x0005             MOVS     R5,R0
   \   0000030A   0xD14F             BNE      ??mbedtls_mpi_div_mpi_5
   1404                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
   \   0000030C   0x9911             LDR      R1,[SP, #+68]
   \   0000030E   0xA80B             ADD      R0,SP,#+44
   \   00000310   0x.... 0x....      BL       mbedtls_mpi_shift_l
   \   00000314   0x0005             MOVS     R5,R0
   \   00000316   0xD149             BNE      ??mbedtls_mpi_div_mpi_5
   1405                      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
   \   00000318   0xAA0B             ADD      R2,SP,#+44
   \   0000031A   0xA907             ADD      R1,SP,#+28
   \   0000031C   0xA807             ADD      R0,SP,#+28
   \   0000031E   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   00000322   0x0005             MOVS     R5,R0
   \   00000324   0xD142             BNE      ??mbedtls_mpi_div_mpi_5
   1406                      Z.p[i - t - 1]--;
   \   00000326   0x9815             LDR      R0,[SP, #+84]
   \   00000328   0x19C0             ADDS     R0,R0,R7
   \   0000032A   0x1F00             SUBS     R0,R0,#+4
   \   0000032C   0x6801             LDR      R1,[R0, #+0]
   \   0000032E   0x1E49             SUBS     R1,R1,#+1
   \   00000330   0x6001             STR      R1,[R0, #+0]
   1407                  }
   1408              }
   \                     ??mbedtls_mpi_div_mpi_24: (+1)
   \   00000332   0x9806             LDR      R0,[SP, #+24]
   \   00000334   0x1E40             SUBS     R0,R0,#+1
   \   00000336   0x9006             STR      R0,[SP, #+24]
   \   00000338   0x9811             LDR      R0,[SP, #+68]
   \   0000033A   0x3820             SUBS     R0,R0,#+32
   \   0000033C   0x9011             STR      R0,[SP, #+68]
   \   0000033E   0x1F3F             SUBS     R7,R7,#+4
   \   00000340   0x9805             LDR      R0,[SP, #+20]
   \   00000342   0x1F00             SUBS     R0,R0,#+4
   \   00000344   0x9005             STR      R0,[SP, #+20]
   \   00000346   0x980A             LDR      R0,[SP, #+40]
   \   00000348   0x9906             LDR      R1,[SP, #+24]
   \   0000034A   0x4288             CMP      R0,R1
   \   0000034C   0xD200             BCS      .+4
   \   0000034E   0xE72E             B        ??mbedtls_mpi_div_mpi_13
   1409          
   1410              if( Q != NULL )
   \                     ??mbedtls_mpi_div_mpi_12: (+1)
   \   00000350   0x9819             LDR      R0,[SP, #+100]
   \   00000352   0x2800             CMP      R0,#+0
   \   00000354   0xD00B             BEQ      ??mbedtls_mpi_div_mpi_25
   1411              {
   1412                  MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
   \   00000356   0xA913             ADD      R1,SP,#+76
   \   00000358   0x.... 0x....      BL       mbedtls_mpi_copy
   \   0000035C   0x0005             MOVS     R5,R0
   \   0000035E   0xD125             BNE      ??mbedtls_mpi_div_mpi_5
   1413                  Q->s = A->s * B->s;
   \   00000360   0x981B             LDR      R0,[SP, #+108]
   \   00000362   0x6800             LDR      R0,[R0, #+0]
   \   00000364   0x991C             LDR      R1,[SP, #+112]
   \   00000366   0x6809             LDR      R1,[R1, #+0]
   \   00000368   0x4348             MULS     R0,R1,R0
   \   0000036A   0x9919             LDR      R1,[SP, #+100]
   \   0000036C   0x6008             STR      R0,[R1, #+0]
   1414              }
   1415          
   1416              if( R != NULL )
   \                     ??mbedtls_mpi_div_mpi_25: (+1)
   \   0000036E   0x981A             LDR      R0,[SP, #+104]
   \   00000370   0x2800             CMP      R0,#+0
   \   00000372   0xD01B             BEQ      ??mbedtls_mpi_div_mpi_5
   1417              {
   1418                  MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
   \   00000374   0x9912             LDR      R1,[SP, #+72]
   \   00000376   0xA807             ADD      R0,SP,#+28
   \   00000378   0x.... 0x....      BL       mbedtls_mpi_shift_r
   \   0000037C   0x0005             MOVS     R5,R0
   \   0000037E   0xD115             BNE      ??mbedtls_mpi_div_mpi_5
   1419                  X.s = A->s;
   \   00000380   0x981B             LDR      R0,[SP, #+108]
   \   00000382   0x6800             LDR      R0,[R0, #+0]
   \   00000384   0x9007             STR      R0,[SP, #+28]
   1420                  MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
   \   00000386   0xA907             ADD      R1,SP,#+28
   \   00000388   0x981A             LDR      R0,[SP, #+104]
   \   0000038A   0x.... 0x....      BL       mbedtls_mpi_copy
   \   0000038E   0x0005             MOVS     R5,R0
   \   00000390   0xD10C             BNE      ??mbedtls_mpi_div_mpi_5
   1421          
   1422                  if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
   \   00000392   0x9600             STR      R6,[SP, #+0]
   \   00000394   0x9402             STR      R4,[SP, #+8]
   \   00000396   0x9403             STR      R4,[SP, #+12]
   \   00000398   0x4668             MOV      R0,SP
   \   0000039A   0x9004             STR      R0,[SP, #+16]
   \   0000039C   0xA902             ADD      R1,SP,#+8
   \   0000039E   0x981A             LDR      R0,[SP, #+104]
   \   000003A0   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   000003A4   0x2800             CMP      R0,#+0
   \   000003A6   0xD101             BNE      ??mbedtls_mpi_div_mpi_5
   1423                      R->s = 1;
   \   000003A8   0x981A             LDR      R0,[SP, #+104]
   \   000003AA   0x6004             STR      R4,[R0, #+0]
   1424              }
   1425          
   1426          cleanup:
   1427          
   1428              mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
   \                     ??mbedtls_mpi_div_mpi_5: (+1)
   \   000003AC   0xA807             ADD      R0,SP,#+28
   \   000003AE   0x.... 0x....      BL       mbedtls_mpi_free
   \   000003B2   0xA80E             ADD      R0,SP,#+56
   \   000003B4   0x.... 0x....      BL       mbedtls_mpi_free
   \   000003B8   0xA813             ADD      R0,SP,#+76
   \   000003BA   0x.... 0x....      BL       mbedtls_mpi_free
   1429              mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
   \   000003BE   0xA80B             ADD      R0,SP,#+44
   \   000003C0   0x.... 0x....      BL       mbedtls_mpi_free
   \   000003C4   0xA816             ADD      R0,SP,#+88
   \   000003C6   0x.... 0x....      BL       mbedtls_mpi_free
   1430          
   1431              return( ret );
   \   000003CA   0x0028             MOVS     R0,R5
   \                     ??mbedtls_mpi_div_mpi_1: (+1)
   \   000003CC   0xB01D             ADD      SP,SP,#+116
   \   000003CE   0xBDF0             POP      {R4-R7,PC}       ;; return
   1432          }
   1433          
   1434          /*
   1435           * Division by int: A = Q * b + R
   1436           */

   \                                 In section .text, align 2, keep-with-next
   1437          int mbedtls_mpi_div_int( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, mbedtls_mpi_sint b )
   1438          {
   \                     mbedtls_mpi_div_int: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   1439              mbedtls_mpi _B;
   1440              mbedtls_mpi_uint p[1];
   1441          
   1442              p[0] = ( b < 0 ) ? -b : b;
   \   00000004   0x2401             MOVS     R4,#+1
   \   00000006   0x2B00             CMP      R3,#+0
   \   00000008   0xD504             BPL      ??mbedtls_mpi_div_int_0
   \   0000000A   0x425D             RSBS     R5,R3,#+0
   \   0000000C   0x9500             STR      R5,[SP, #+0]
   \   0000000E   0x2300             MOVS     R3,#+0
   \   00000010   0x43DB             MVNS     R3,R3            ;; #-1
   \   00000012   0xE001             B        ??mbedtls_mpi_div_int_1
   \                     ??mbedtls_mpi_div_int_0: (+1)
   \   00000014   0x9300             STR      R3,[SP, #+0]
   \   00000016   0x2301             MOVS     R3,#+1
   \                     ??mbedtls_mpi_div_int_1: (+1)
   \   00000018   0x9301             STR      R3,[SP, #+4]
   1443              _B.s = ( b < 0 ) ? -1 : 1;
   1444              _B.n = 1;
   \   0000001A   0x9402             STR      R4,[SP, #+8]
   1445              _B.p = p;
   \   0000001C   0x466B             MOV      R3,SP
   \   0000001E   0x9303             STR      R3,[SP, #+12]
   1446          
   1447              return( mbedtls_mpi_div_mpi( Q, R, A, &_B ) );
   \   00000020   0xAB01             ADD      R3,SP,#+4
   \   00000022   0x.... 0x....      BL       mbedtls_mpi_div_mpi
   \   00000026   0xB005             ADD      SP,SP,#+20
   \   00000028   0xBD30             POP      {R4,R5,PC}       ;; return
   1448          }
   1449          
   1450          /*
   1451           * Modulo: R = A mod B
   1452           */

   \                                 In section .text, align 2, keep-with-next
   1453          int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
   1454          {
   \                     mbedtls_mpi_mod_mpi: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x0015             MOVS     R5,R2
   1455              int ret;
   1456          
   1457              if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
   \   00000008   0x2700             MOVS     R7,#+0
   \   0000000A   0x9700             STR      R7,[SP, #+0]
   \   0000000C   0x2601             MOVS     R6,#+1
   \   0000000E   0x9602             STR      R6,[SP, #+8]
   \   00000010   0x9603             STR      R6,[SP, #+12]
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x9004             STR      R0,[SP, #+16]
   \   00000016   0xA902             ADD      R1,SP,#+8
   \   00000018   0x0028             MOVS     R0,R5
   \   0000001A   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD502             BPL      ??mbedtls_mpi_mod_mpi_0
   1458                  return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
   \   00000022   0x2009             MOVS     R0,#+9
   \   00000024   0x43C0             MVNS     R0,R0            ;; #-10
   \   00000026   0xE02B             B        ??mbedtls_mpi_mod_mpi_1
   1459          
   1460              MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
   \                     ??mbedtls_mpi_mod_mpi_0: (+1)
   \   00000028   0x002B             MOVS     R3,R5
   \   0000002A   0x9A06             LDR      R2,[SP, #+24]
   \   0000002C   0x0021             MOVS     R1,R4
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      BL       mbedtls_mpi_div_mpi
   \   00000034   0x9001             STR      R0,[SP, #+4]
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD121             BNE      ??mbedtls_mpi_mod_mpi_2
   1461          
   1462              while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
   \                     ??mbedtls_mpi_mod_mpi_3: (+1)
   \   0000003A   0x9700             STR      R7,[SP, #+0]
   \   0000003C   0x9602             STR      R6,[SP, #+8]
   \   0000003E   0x9603             STR      R6,[SP, #+12]
   \   00000040   0x4668             MOV      R0,SP
   \   00000042   0x9004             STR      R0,[SP, #+16]
   \   00000044   0xA902             ADD      R1,SP,#+8
   \   00000046   0x0020             MOVS     R0,R4
   \   00000048   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD508             BPL      ??mbedtls_mpi_mod_mpi_4
   1463                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
   \   00000050   0x002A             MOVS     R2,R5
   \   00000052   0x0021             MOVS     R1,R4
   \   00000054   0x0020             MOVS     R0,R4
   \   00000056   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD10E             BNE      ??mbedtls_mpi_mod_mpi_2
   \   00000060   0xE7EB             B        ??mbedtls_mpi_mod_mpi_3
   1464          
   1465              while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
   \                     ??mbedtls_mpi_mod_mpi_4: (+1)
   \   00000062   0x0029             MOVS     R1,R5
   \   00000064   0x0020             MOVS     R0,R4
   \   00000066   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xD407             BMI      ??mbedtls_mpi_mod_mpi_2
   1466                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
   \   0000006E   0x002A             MOVS     R2,R5
   \   00000070   0x0021             MOVS     R1,R4
   \   00000072   0x0020             MOVS     R0,R4
   \   00000074   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   00000078   0x9001             STR      R0,[SP, #+4]
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD0F1             BEQ      ??mbedtls_mpi_mod_mpi_4
   1467          
   1468          cleanup:
   1469          
   1470              return( ret );
   \                     ??mbedtls_mpi_mod_mpi_2: (+1)
   \   0000007E   0x9801             LDR      R0,[SP, #+4]
   \                     ??mbedtls_mpi_mod_mpi_1: (+1)
   \   00000080   0xB007             ADD      SP,SP,#+28
   \   00000082   0xBDF0             POP      {R4-R7,PC}       ;; return
   1471          }
   1472          
   1473          /*
   1474           * Modulo: r = A mod b
   1475           */

   \                                 In section .text, align 2, keep-with-next
   1476          int mbedtls_mpi_mod_int( mbedtls_mpi_uint *r, const mbedtls_mpi *A, mbedtls_mpi_sint b )
   1477          {
   \                     mbedtls_mpi_mod_int: (+1)
   \   00000000   0xB5F3             PUSH     {R0,R1,R4-R7,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0014             MOVS     R4,R2
   1478              size_t i;
   1479              mbedtls_mpi_uint x, y, z;
   1480          
   1481              if( b == 0 )
   \   00000006   0xD101             BNE      ??mbedtls_mpi_mod_int_0
   1482                  return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
   \   00000008   0x200B             MOVS     R0,#+11
   \   0000000A   0xE001             B.N      ??mbedtls_mpi_mod_int_1
   1483          
   1484              if( b < 0 )
   \                     ??mbedtls_mpi_mod_int_0: (+1)
   \   0000000C   0xD502             BPL      ??mbedtls_mpi_mod_int_2
   1485                  return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
   \   0000000E   0x2009             MOVS     R0,#+9
   \                     ??mbedtls_mpi_mod_int_1: (+1)
   \   00000010   0x43C0             MVNS     R0,R0            ;; #-10
   \   00000012   0xE03A             B        ??mbedtls_mpi_mod_int_3
   1486          
   1487              /*
   1488               * handle trivial cases
   1489               */
   1490              if( b == 1 )
   \                     ??mbedtls_mpi_mod_int_2: (+1)
   \   00000014   0x2C01             CMP      R4,#+1
   \   00000016   0xD103             BNE      ??mbedtls_mpi_mod_int_4
   1491              {
   1492                  *r = 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x9902             LDR      R1,[SP, #+8]
   \   0000001C   0x6008             STR      R0,[R1, #+0]
   1493                  return( 0 );
   \   0000001E   0xE034             B        ??mbedtls_mpi_mod_int_3
   1494              }
   1495          
   1496              if( b == 2 )
   \                     ??mbedtls_mpi_mod_int_4: (+1)
   \   00000020   0x2C02             CMP      R4,#+2
   \   00000022   0xD106             BNE      ??mbedtls_mpi_mod_int_5
   1497              {
   1498                  *r = A->p[0] & 1;
   \   00000024   0x6888             LDR      R0,[R1, #+8]
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0x07C1             LSLS     R1,R0,#+31
   \   0000002A   0x0FC9             LSRS     R1,R1,#+31
   \   0000002C   0x9802             LDR      R0,[SP, #+8]
   \   0000002E   0x6001             STR      R1,[R0, #+0]
   1499                  return( 0 );
   \   00000030   0xE02A             B        ??mbedtls_mpi_mod_int_6
   1500              }
   1501          
   1502              /*
   1503               * general case
   1504               */
   1505              for( i = A->n, y = 0; i > 0; i-- )
   \                     ??mbedtls_mpi_mod_int_5: (+1)
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x684E             LDR      R6,[R1, #+4]
   \   00000036   0x2E00             CMP      R6,#+0
   \   00000038   0xD024             BEQ      ??mbedtls_mpi_mod_int_7
   \   0000003A   0x6889             LDR      R1,[R1, #+8]
   \   0000003C   0x00B2             LSLS     R2,R6,#+2
   \   0000003E   0x188D             ADDS     R5,R1,R2
   \   00000040   0x1F2D             SUBS     R5,R5,#+4
   1506              {
   1507                  x  = A->p[i - 1];
   \                     ??mbedtls_mpi_mod_int_8: (+1)
   \   00000042   0x682F             LDR      R7,[R5, #+0]
   1508                  y  = ( y << biH ) | ( x >> biH );
   \   00000044   0x0400             LSLS     R0,R0,#+16
   \   00000046   0x0C39             LSRS     R1,R7,#+16
   \   00000048   0x4301             ORRS     R1,R1,R0
   \   0000004A   0x9101             STR      R1,[SP, #+4]
   1509                  z  = y / b;
   1510                  y -= z * b;
   1511          
   1512                  x <<= biH;
   1513                  y  = ( y << biH ) | ( x >> biH );
   \   0000004C   0x9901             LDR      R1,[SP, #+4]
   \   0000004E   0x9100             STR      R1,[SP, #+0]
   \   00000050   0x9801             LDR      R0,[SP, #+4]
   \   00000052   0x0021             MOVS     R1,R4
   \   00000054   0x.... 0x....      BL       __aeabi_uidiv
   \   00000058   0x4360             MULS     R0,R4,R0
   \   0000005A   0x9900             LDR      R1,[SP, #+0]
   \   0000005C   0x1A08             SUBS     R0,R1,R0
   \   0000005E   0x0400             LSLS     R0,R0,#+16
   \   00000060   0xB2BF             UXTH     R7,R7
   \   00000062   0x4307             ORRS     R7,R7,R0
   1514                  z  = y / b;
   1515                  y -= z * b;
   \   00000064   0x0038             MOVS     R0,R7
   \   00000066   0x0021             MOVS     R1,R4
   \   00000068   0x.... 0x....      BL       __aeabi_uidiv
   \   0000006C   0x4360             MULS     R0,R4,R0
   \   0000006E   0x1A38             SUBS     R0,R7,R0
   1516              }
   \   00000070   0x1F2D             SUBS     R5,R5,#+4
   \   00000072   0x1E76             SUBS     R6,R6,#+1
   \   00000074   0xD1E5             BNE      ??mbedtls_mpi_mod_int_8
   1517          
   1518              /*
   1519               * If A is negative, then the current y represents a negative value.
   1520               * Flipping it to the positive side.
   1521               */
   1522              if( A->s < 0 && y != 0 )
   \   00000076   0x9903             LDR      R1,[SP, #+12]
   \   00000078   0x6809             LDR      R1,[R1, #+0]
   \   0000007A   0x2900             CMP      R1,#+0
   \   0000007C   0xD502             BPL      ??mbedtls_mpi_mod_int_7
   \   0000007E   0x2800             CMP      R0,#+0
   \   00000080   0xD000             BEQ      ??mbedtls_mpi_mod_int_7
   1523                  y = b - y;
   \   00000082   0x1A20             SUBS     R0,R4,R0
   1524          
   1525              *r = y;
   \                     ??mbedtls_mpi_mod_int_7: (+1)
   \   00000084   0x9902             LDR      R1,[SP, #+8]
   \   00000086   0x6008             STR      R0,[R1, #+0]
   1526          
   1527              return( 0 );
   \                     ??mbedtls_mpi_mod_int_6: (+1)
   \   00000088   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_mpi_mod_int_3: (+1)
   \   0000008A   0xB004             ADD      SP,SP,#+16
   \   0000008C   0xBDF0             POP      {R4-R7,PC}       ;; return
   1528          }
   1529          
   1530          /*
   1531           * Fast Montgomery initialization (thanks to Tom St Denis)
   1532           */
   1533          static void mpi_montg_init( mbedtls_mpi_uint *mm, const mbedtls_mpi *N )
   1534          {
   1535              mbedtls_mpi_uint x, m0 = N->p[0];
   1536              unsigned int i;
   1537          
   1538              x  = m0;
   1539              x += ( ( m0 + 2 ) & 4 ) << 1;
   1540          
   1541              for( i = biL; i >= 8; i /= 2 )
   1542                  x *= ( 2 - ( m0 * x ) );
   1543          
   1544              *mm = ~x + 1;
   1545          }
   1546          
   1547          /*
   1548           * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
   1549           */

   \                                 In section .text, align 2, keep-with-next
   1550          static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
   1551                                   const mbedtls_mpi *T )
   1552          {
   \                     mpi_montmul: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0006             MOVS     R6,R0
   1553              size_t i, n, m;
   1554              mbedtls_mpi_uint u0, u1, *d;
   1555          
   1556              if( T->n < N->n + 1 || T->p == NULL )
   \   00000006   0x980E             LDR      R0,[SP, #+56]
   \   00000008   0x6841             LDR      R1,[R0, #+4]
   \   0000000A   0x6850             LDR      R0,[R2, #+4]
   \   0000000C   0x1C40             ADDS     R0,R0,#+1
   \   0000000E   0x4281             CMP      R1,R0
   \   00000010   0xD303             BCC      ??mpi_montmul_0
   \   00000012   0x980E             LDR      R0,[SP, #+56]
   \   00000014   0x6880             LDR      R0,[R0, #+8]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD102             BNE      ??mpi_montmul_1
   1557                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   \                     ??mpi_montmul_0: (+1)
   \   0000001A   0x2003             MOVS     R0,#+3
   \   0000001C   0x43C0             MVNS     R0,R0            ;; #-4
   \   0000001E   0xE05B             B        ??mpi_montmul_2
   1558          
   1559              memset( T->p, 0, T->n * ciL );
   \                     ??mpi_montmul_1: (+1)
   \   00000020   0x0089             LSLS     R1,R1,#+2
   \   00000022   0x.... 0x....      BL       __aeabi_memclr4
   1560          
   1561              d = T->p;
   \   00000026   0x980E             LDR      R0,[SP, #+56]
   \   00000028   0x6884             LDR      R4,[R0, #+8]
   1562              n = N->n;
   \   0000002A   0x9807             LDR      R0,[SP, #+28]
   \   0000002C   0x6840             LDR      R0,[R0, #+4]
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   1563              m = ( B->n < n ) ? B->n : n;
   \   00000030   0x9806             LDR      R0,[SP, #+24]
   \   00000032   0x6840             LDR      R0,[R0, #+4]
   \   00000034   0x9900             LDR      R1,[SP, #+0]
   \   00000036   0x4288             CMP      R0,R1
   \   00000038   0xD900             BLS      ??mpi_montmul_3
   \   0000003A   0x0008             MOVS     R0,R1
   \                     ??mpi_montmul_3: (+1)
   \   0000003C   0x9005             STR      R0,[SP, #+20]
   1564          
   1565              for( i = 0; i < n; i++ )
   \   0000003E   0x9800             LDR      R0,[SP, #+0]
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD031             BEQ      ??mpi_montmul_4
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x9003             STR      R0,[SP, #+12]
   \   00000048   0x9800             LDR      R0,[SP, #+0]
   \   0000004A   0x0080             LSLS     R0,R0,#+2
   \   0000004C   0x1820             ADDS     R0,R4,R0
   \   0000004E   0x3008             ADDS     R0,R0,#+8
   \   00000050   0x9002             STR      R0,[SP, #+8]
   \   00000052   0x9800             LDR      R0,[SP, #+0]
   \   00000054   0x9001             STR      R0,[SP, #+4]
   1566              {
   1567                  /*
   1568                   * T = (T + u0*B + u1*N) / 2^biL
   1569                   */
   1570                  u0 = A->p[i];
   \                     ??mpi_montmul_5: (+1)
   \   00000056   0x68B0             LDR      R0,[R6, #+8]
   \   00000058   0x9903             LDR      R1,[SP, #+12]
   \   0000005A   0x5847             LDR      R7,[R0, R1]
   1571                  u1 = ( d[0] + u0 * B->p[0] ) * mm;
   \   0000005C   0x9806             LDR      R0,[SP, #+24]
   \   0000005E   0x6880             LDR      R0,[R0, #+8]
   \   00000060   0x9004             STR      R0,[SP, #+16]
   \   00000062   0x6820             LDR      R0,[R4, #+0]
   \   00000064   0x9904             LDR      R1,[SP, #+16]
   \   00000066   0x6809             LDR      R1,[R1, #+0]
   \   00000068   0x4379             MULS     R1,R7,R1
   \   0000006A   0x1845             ADDS     R5,R0,R1
   \   0000006C   0x9808             LDR      R0,[SP, #+32]
   \   0000006E   0x4345             MULS     R5,R0,R5
   1572          
   1573                  mpi_mul_hlp( m, B->p, d, u0 );
   \   00000070   0x003B             MOVS     R3,R7
   \   00000072   0x0022             MOVS     R2,R4
   \   00000074   0x9904             LDR      R1,[SP, #+16]
   \   00000076   0x9805             LDR      R0,[SP, #+20]
   \   00000078   0x.... 0x....      BL       mpi_mul_hlp
   1574                  mpi_mul_hlp( n, N->p, d, u1 );
   \   0000007C   0x002B             MOVS     R3,R5
   \   0000007E   0x0022             MOVS     R2,R4
   \   00000080   0x9807             LDR      R0,[SP, #+28]
   \   00000082   0x6881             LDR      R1,[R0, #+8]
   \   00000084   0x9800             LDR      R0,[SP, #+0]
   \   00000086   0x.... 0x....      BL       mpi_mul_hlp
   1575          
   1576                  *d++ = u0; d[n + 1] = 0;
   \   0000008A   0x6027             STR      R7,[R4, #+0]
   \   0000008C   0x1D24             ADDS     R4,R4,#+4
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x9902             LDR      R1,[SP, #+8]
   \   00000092   0x6008             STR      R0,[R1, #+0]
   1577              }
   \   00000094   0x9802             LDR      R0,[SP, #+8]
   \   00000096   0x1D00             ADDS     R0,R0,#+4
   \   00000098   0x9002             STR      R0,[SP, #+8]
   \   0000009A   0x9803             LDR      R0,[SP, #+12]
   \   0000009C   0x1D00             ADDS     R0,R0,#+4
   \   0000009E   0x9003             STR      R0,[SP, #+12]
   \   000000A0   0x9801             LDR      R0,[SP, #+4]
   \   000000A2   0x1E40             SUBS     R0,R0,#+1
   \   000000A4   0x9001             STR      R0,[SP, #+4]
   \   000000A6   0xD1D6             BNE      ??mpi_montmul_5
   1578          
   1579              memcpy( A->p, d, ( n + 1 ) * ciL );
   \                     ??mpi_montmul_4: (+1)
   \   000000A8   0x9800             LDR      R0,[SP, #+0]
   \   000000AA   0x1C40             ADDS     R0,R0,#+1
   \   000000AC   0x0082             LSLS     R2,R0,#+2
   \   000000AE   0x0021             MOVS     R1,R4
   \   000000B0   0x68B0             LDR      R0,[R6, #+8]
   \   000000B2   0x.... 0x....      BL       __aeabi_memcpy4
   1580          
   1581              if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
   \   000000B6   0x9907             LDR      R1,[SP, #+28]
   \   000000B8   0x0030             MOVS     R0,R6
   \   000000BA   0x.... 0x....      BL       mbedtls_mpi_cmp_abs
   \   000000BE   0x2800             CMP      R0,#+0
   \   000000C0   0xD403             BMI      ??mpi_montmul_6
   1582                  mpi_sub_hlp( n, N->p, A->p );
   \   000000C2   0x68B2             LDR      R2,[R6, #+8]
   \   000000C4   0x9807             LDR      R0,[SP, #+28]
   \   000000C6   0x6881             LDR      R1,[R0, #+8]
   \   000000C8   0xE002             B        ??mpi_montmul_7
   1583              else
   1584                  /* prevent timing attacks */
   1585                  mpi_sub_hlp( n, A->p, T->p );
   \                     ??mpi_montmul_6: (+1)
   \   000000CA   0x980E             LDR      R0,[SP, #+56]
   \   000000CC   0x6882             LDR      R2,[R0, #+8]
   \   000000CE   0x68B1             LDR      R1,[R6, #+8]
   \                     ??mpi_montmul_7: (+1)
   \   000000D0   0x9800             LDR      R0,[SP, #+0]
   \   000000D2   0x.... 0x....      BL       mpi_sub_hlp
   1586          
   1587              return( 0 );
   \   000000D6   0x2000             MOVS     R0,#+0
   \                     ??mpi_montmul_2: (+1)
   \   000000D8   0xB009             ADD      SP,SP,#+36
   \   000000DA   0xBDF0             POP      {R4-R7,PC}       ;; return
   1588          }
   1589          
   1590          /*
   1591           * Montgomery reduction: A = A * R^-1 mod N
   1592           */

   \                                 In section .text, align 2, keep-with-next
   1593          static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
   1594          {
   \                     mpi_montred: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   1595              mbedtls_mpi_uint z = 1;
   \   00000004   0x2401             MOVS     R4,#+1
   \   00000006   0x9401             STR      R4,[SP, #+4]
   1596              mbedtls_mpi U;
   1597          
   1598              U.n = U.s = (int) z;
   \   00000008   0x9402             STR      R4,[SP, #+8]
   \   0000000A   0x9403             STR      R4,[SP, #+12]
   1599              U.p = &z;
   \   0000000C   0xAC01             ADD      R4,SP,#+4
   \   0000000E   0x9404             STR      R4,[SP, #+16]
   1600          
   1601              return( mpi_montmul( A, &U, N, mm, T ) );
   \   00000010   0x9300             STR      R3,[SP, #+0]
   \   00000012   0x0013             MOVS     R3,R2
   \   00000014   0x000A             MOVS     R2,R1
   \   00000016   0xA902             ADD      R1,SP,#+8
   \   00000018   0x.... 0x....      BL       mpi_montmul
   \   0000001C   0xB006             ADD      SP,SP,#+24
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
   1602          }
   1603          
   1604          /*
   1605           * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
   1606           */

   \                                 In section .text, align 4, keep-with-next
   1607          int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
   1608          {
   \                     mbedtls_mpi_exp_mod: (+1)
   \   00000000   0xB5FD             PUSH     {R0,R2-R7,LR}
   \   00000002   0x48CC             LDR      R0,??mbedtls_mpi_exp_mod_0  ;; 0xfffff9c0
   \   00000004   0x4485             ADD      SP,SP,R0
   \   00000006   0x000D             MOVS     R5,R1
   1609              int ret;
   1610              size_t wbits, wsize, one = 1;
   1611              size_t i, j, nblimbs;
   1612              size_t bufsize, nbits;
   1613              mbedtls_mpi_uint ei, mm, state;
   1614              mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
   1615              int neg;
   1616          
   1617              if( mbedtls_mpi_cmp_int( N, 0 ) < 0 || ( N->p[0] & 1 ) == 0 )
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9000             STR      R0,[SP, #+0]
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x9002             STR      R0,[SP, #+8]
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x9003             STR      R0,[SP, #+12]
   \   00000016   0xA901             ADD      R1,SP,#+4
   \   00000018   0x20C9             MOVS     R0,#+201
   \   0000001A   0x00C0             LSLS     R0,R0,#+3        ;; #+1608
   \   0000001C   0x4468             ADD      R0,R0,SP
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD416             BMI      ??mbedtls_mpi_exp_mod_1
   \   00000028   0x20C9             MOVS     R0,#+201
   \   0000002A   0x00C0             LSLS     R0,R0,#+3        ;; #+1608
   \   0000002C   0x4468             ADD      R0,R0,SP
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x6880             LDR      R0,[R0, #+8]
   \   00000032   0x7800             LDRB     R0,[R0, #+0]
   \   00000034   0x07C0             LSLS     R0,R0,#+31
   \   00000036   0xD50E             BPL      ??mbedtls_mpi_exp_mod_1
   1618                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   1619          
   1620              if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x9000             STR      R0,[SP, #+0]
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x9001             STR      R0,[SP, #+4]
   \   00000040   0x9002             STR      R0,[SP, #+8]
   \   00000042   0x4668             MOV      R0,SP
   \   00000044   0x9003             STR      R0,[SP, #+12]
   \   00000046   0xA901             ADD      R1,SP,#+4
   \   00000048   0x48BB             LDR      R0,??mbedtls_mpi_exp_mod_0+0x4  ;; 0x644
   \   0000004A   0x4468             ADD      R0,R0,SP
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD502             BPL      ??mbedtls_mpi_exp_mod_2
   1621                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   \                     ??mbedtls_mpi_exp_mod_1: (+1)
   \   00000056   0x2003             MOVS     R0,#+3
   \   00000058   0x43C0             MVNS     R0,R0            ;; #-4
   \   0000005A   0xE229             B        ??mbedtls_mpi_exp_mod_3
   1622          
   1623              /*
   1624               * Init temps and window size
   1625               */
   1626              mpi_montg_init( &mm, N );
   \                     ??mbedtls_mpi_exp_mod_2: (+1)
   \   0000005C   0x20C9             MOVS     R0,#+201
   \   0000005E   0x00C0             LSLS     R0,R0,#+3        ;; #+1608
   \   00000060   0x4468             ADD      R0,R0,SP
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0x6880             LDR      R0,[R0, #+8]
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x1C81             ADDS     R1,R0,#+2
   \   0000006A   0x0049             LSLS     R1,R1,#+1
   \   0000006C   0x2208             MOVS     R2,#+8
   \   0000006E   0x4011             ANDS     R1,R1,R2
   \   00000070   0x1841             ADDS     R1,R0,R1
   \   00000072   0x2220             MOVS     R2,#+32
   \                     ??mbedtls_mpi_exp_mod_4: (+1)
   \   00000074   0x2302             MOVS     R3,#+2
   \   00000076   0x000C             MOVS     R4,R1
   \   00000078   0x4344             MULS     R4,R0,R4
   \   0000007A   0x1B1B             SUBS     R3,R3,R4
   \   0000007C   0x434B             MULS     R3,R1,R3
   \   0000007E   0x0019             MOVS     R1,R3
   \   00000080   0x0852             LSRS     R2,R2,#+1
   \   00000082   0x2A08             CMP      R2,#+8
   \   00000084   0xD2F6             BCS      ??mbedtls_mpi_exp_mod_4
   \   00000086   0x43C8             MVNS     R0,R1
   \   00000088   0x1C40             ADDS     R0,R0,#+1
   \   0000008A   0x9001             STR      R0,[SP, #+4]
   1627              mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
   \   0000008C   0xA805             ADD      R0,SP,#+20
   \   0000008E   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000092   0xA808             ADD      R0,SP,#+32
   \   00000094   0x.... 0x....      BL       mbedtls_mpi_init
   1628              mbedtls_mpi_init( &Apos );
   \   00000098   0xA80C             ADD      R0,SP,#+48
   \   0000009A   0x.... 0x....      BL       mbedtls_mpi_init
   1629              memset( W, 0, sizeof( W ) );
   \   0000009E   0x21C0             MOVS     R1,#+192
   \   000000A0   0x00C9             LSLS     R1,R1,#+3        ;; #+1536
   \   000000A2   0xA80F             ADD      R0,SP,#+60
   \   000000A4   0x.... 0x....      BL       __aeabi_memclr4
   1630          
   1631              i = mbedtls_mpi_bitlen( E );
   \   000000A8   0x48A3             LDR      R0,??mbedtls_mpi_exp_mod_0+0x4  ;; 0x644
   \   000000AA   0x4468             ADD      R0,R0,SP
   \   000000AC   0x6800             LDR      R0,[R0, #+0]
   \   000000AE   0x.... 0x....      BL       mbedtls_mpi_bitlen
   1632          
   1633              wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
   1634                      ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;
   \   000000B2   0x21A8             MOVS     R1,#+168
   \   000000B4   0x0089             LSLS     R1,R1,#+2        ;; #+672
   \   000000B6   0x4288             CMP      R0,R1
   \   000000B8   0xD301             BCC      ??mbedtls_mpi_exp_mod_5
   \   000000BA   0x2706             MOVS     R7,#+6
   \   000000BC   0xE00C             B        ??mbedtls_mpi_exp_mod_6
   \                     ??mbedtls_mpi_exp_mod_5: (+1)
   \   000000BE   0x28F0             CMP      R0,#+240
   \   000000C0   0xD301             BCC      ??mbedtls_mpi_exp_mod_7
   \   000000C2   0x2705             MOVS     R7,#+5
   \   000000C4   0xE008             B        ??mbedtls_mpi_exp_mod_6
   \                     ??mbedtls_mpi_exp_mod_7: (+1)
   \   000000C6   0x2850             CMP      R0,#+80
   \   000000C8   0xD301             BCC      ??mbedtls_mpi_exp_mod_8
   \   000000CA   0x2704             MOVS     R7,#+4
   \   000000CC   0xE004             B        ??mbedtls_mpi_exp_mod_6
   \                     ??mbedtls_mpi_exp_mod_8: (+1)
   \   000000CE   0x2818             CMP      R0,#+24
   \   000000D0   0xD301             BCC      ??mbedtls_mpi_exp_mod_9
   \   000000D2   0x2703             MOVS     R7,#+3
   \   000000D4   0xE000             B        ??mbedtls_mpi_exp_mod_6
   \                     ??mbedtls_mpi_exp_mod_9: (+1)
   \   000000D6   0x2701             MOVS     R7,#+1
   1635          
   1636              if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
   1637                  wsize = MBEDTLS_MPI_WINDOW_SIZE;
   1638          
   1639              j = N->n + 1;
   \                     ??mbedtls_mpi_exp_mod_6: (+1)
   \   000000D8   0x20C9             MOVS     R0,#+201
   \   000000DA   0x00C0             LSLS     R0,R0,#+3        ;; #+1608
   \   000000DC   0x4468             ADD      R0,R0,SP
   \   000000DE   0x6800             LDR      R0,[R0, #+0]
   \   000000E0   0x6844             LDR      R4,[R0, #+4]
   \   000000E2   0x1C64             ADDS     R4,R4,#+1
   1640              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
   \   000000E4   0x0021             MOVS     R1,R4
   \   000000E6   0x20C8             MOVS     R0,#+200
   \   000000E8   0x00C0             LSLS     R0,R0,#+3        ;; #+1600
   \   000000EA   0x4468             ADD      R0,R0,SP
   \   000000EC   0x6800             LDR      R0,[R0, #+0]
   \   000000EE   0x.... 0x....      BL       mbedtls_mpi_grow
   \   000000F2   0x0006             MOVS     R6,R0
   \   000000F4   0xD000             BEQ      .+4
   \   000000F6   0xE1AD             B        ??mbedtls_mpi_exp_mod_10
   \   000000F8   0x0021             MOVS     R1,R4
   \   000000FA   0xA80F             ADD      R0,SP,#+60
   \   000000FC   0x300C             ADDS     R0,R0,#+12
   1641              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
   \   000000FE   0x.... 0x....      BL       mbedtls_mpi_grow
   \   00000102   0x0006             MOVS     R6,R0
   \   00000104   0xD000             BEQ      .+4
   \   00000106   0xE1A5             B        ??mbedtls_mpi_exp_mod_10
   1642              MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
   \   00000108   0x0061             LSLS     R1,R4,#+1
   \   0000010A   0xA808             ADD      R0,SP,#+32
   \   0000010C   0x.... 0x....      BL       mbedtls_mpi_grow
   \   00000110   0x0006             MOVS     R6,R0
   \   00000112   0xD000             BEQ      .+4
   \   00000114   0xE19E             B        ??mbedtls_mpi_exp_mod_10
   \   00000116   0x6828             LDR      R0,[R5, #+0]
   \   00000118   0x2100             MOVS     R1,#+0
   \   0000011A   0x43C9             MVNS     R1,R1            ;; #-1
   \   0000011C   0x4288             CMP      R0,R1
   \   0000011E   0xD14D             BNE      ??mbedtls_mpi_exp_mod_11
   \   00000120   0x2001             MOVS     R0,#+1
   \   00000122   0x900B             STR      R0,[SP, #+44]
   1643          
   1644              /*
   1645               * Compensate for negative A (and correct at the end)
   1646               */
   1647              neg = ( A->s == -1 );
   1648              if( neg )
   1649              {
   1650                  MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
   \   00000124   0x0029             MOVS     R1,R5
   \   00000126   0xA80C             ADD      R0,SP,#+48
   \   00000128   0x.... 0x....      BL       mbedtls_mpi_copy
   \   0000012C   0x0006             MOVS     R6,R0
   \   0000012E   0xD000             BEQ      .+4
   \   00000130   0xE190             B        ??mbedtls_mpi_exp_mod_10
   1651                  Apos.s = 1;
   \   00000132   0x2001             MOVS     R0,#+1
   \   00000134   0x900C             STR      R0,[SP, #+48]
   1652                  A = &Apos;
   \   00000136   0xAD0C             ADD      R5,SP,#+48
   1653              }
   1654          
   1655              /*
   1656               * If 1st call, pre-compute R^2 mod N
   1657               */
   1658              if( _RR == NULL || _RR->p == NULL )
   \                     ??mbedtls_mpi_exp_mod_12: (+1)
   \   00000138   0x20CC             MOVS     R0,#+204
   \   0000013A   0x00C0             LSLS     R0,R0,#+3        ;; #+1632
   \   0000013C   0x4468             ADD      R0,R0,SP
   \   0000013E   0x6800             LDR      R0,[R0, #+0]
   \   00000140   0x2800             CMP      R0,#+0
   \   00000142   0xD006             BEQ      ??mbedtls_mpi_exp_mod_13
   \   00000144   0x20CC             MOVS     R0,#+204
   \   00000146   0x00C0             LSLS     R0,R0,#+3        ;; #+1632
   \   00000148   0x4468             ADD      R0,R0,SP
   \   0000014A   0x6800             LDR      R0,[R0, #+0]
   \   0000014C   0x6880             LDR      R0,[R0, #+8]
   \   0000014E   0x2800             CMP      R0,#+0
   \   00000150   0xD137             BNE      ??mbedtls_mpi_exp_mod_14
   1659              {
   1660                  MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
   \                     ??mbedtls_mpi_exp_mod_13: (+1)
   \   00000152   0x2101             MOVS     R1,#+1
   \   00000154   0xA805             ADD      R0,SP,#+20
   \   00000156   0x.... 0x....      BL       mbedtls_mpi_grow
   \   0000015A   0x0006             MOVS     R6,R0
   \   0000015C   0xD108             BNE      ??mbedtls_mpi_exp_mod_15
   \   0000015E   0x9806             LDR      R0,[SP, #+24]
   \   00000160   0x0081             LSLS     R1,R0,#+2
   \   00000162   0x9807             LDR      R0,[SP, #+28]
   \   00000164   0x.... 0x....      BL       __aeabi_memclr4
   \   00000168   0x2001             MOVS     R0,#+1
   \   0000016A   0x9907             LDR      R1,[SP, #+28]
   \   0000016C   0x6008             STR      R0,[R1, #+0]
   \   0000016E   0x9005             STR      R0,[SP, #+20]
   \                     ??mbedtls_mpi_exp_mod_15: (+1)
   \   00000170   0x2E00             CMP      R6,#+0
   \   00000172   0xD000             BEQ      .+4
   \   00000174   0xE16E             B        ??mbedtls_mpi_exp_mod_10
   1661                  MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
   \   00000176   0x20C9             MOVS     R0,#+201
   \   00000178   0x00C0             LSLS     R0,R0,#+3        ;; #+1608
   \   0000017A   0x4468             ADD      R0,R0,SP
   \   0000017C   0x6800             LDR      R0,[R0, #+0]
   \   0000017E   0x6840             LDR      R0,[R0, #+4]
   \   00000180   0x0181             LSLS     R1,R0,#+6
   \   00000182   0xA805             ADD      R0,SP,#+20
   \   00000184   0x.... 0x....      BL       mbedtls_mpi_shift_l
   \   00000188   0x0006             MOVS     R6,R0
   \   0000018A   0xD000             BEQ      .+4
   \   0000018C   0xE162             B        ??mbedtls_mpi_exp_mod_10
   1662                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
   \   0000018E   0x22C9             MOVS     R2,#+201
   \   00000190   0x00D2             LSLS     R2,R2,#+3        ;; #+1608
   \   00000192   0x446A             ADD      R2,R2,SP
   \   00000194   0x6812             LDR      R2,[R2, #+0]
   \   00000196   0xA905             ADD      R1,SP,#+20
   \   00000198   0xA805             ADD      R0,SP,#+20
   \   0000019A   0x.... 0x....      BL       mbedtls_mpi_mod_mpi
   \   0000019E   0x0006             MOVS     R6,R0
   \   000001A0   0xD000             BEQ      .+4
   \   000001A2   0xE157             B        ??mbedtls_mpi_exp_mod_10
   1663          
   1664                  if( _RR != NULL )
   \   000001A4   0x20CC             MOVS     R0,#+204
   \   000001A6   0x00C0             LSLS     R0,R0,#+3        ;; #+1632
   \   000001A8   0x4468             ADD      R0,R0,SP
   \   000001AA   0x6800             LDR      R0,[R0, #+0]
   \   000001AC   0x2800             CMP      R0,#+0
   \   000001AE   0xD00F             BEQ      ??mbedtls_mpi_exp_mod_16
   1665                      memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
   \   000001B0   0xA805             ADD      R0,SP,#+20
   \   000001B2   0x21CC             MOVS     R1,#+204
   \   000001B4   0x00C9             LSLS     R1,R1,#+3        ;; #+1632
   \   000001B6   0x4469             ADD      R1,R1,SP
   \   000001B8   0x6809             LDR      R1,[R1, #+0]
   \   000001BA   0xE007             B        ??mbedtls_mpi_exp_mod_17
   1666              }
   \                     ??mbedtls_mpi_exp_mod_11: (+1)
   \   000001BC   0x2000             MOVS     R0,#+0
   \   000001BE   0x900B             STR      R0,[SP, #+44]
   \   000001C0   0xE7BA             B        ??mbedtls_mpi_exp_mod_12
   1667              else
   1668                  memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
   \                     ??mbedtls_mpi_exp_mod_14: (+1)
   \   000001C2   0x20CC             MOVS     R0,#+204
   \   000001C4   0x00C0             LSLS     R0,R0,#+3        ;; #+1632
   \   000001C6   0x4468             ADD      R0,R0,SP
   \   000001C8   0x6800             LDR      R0,[R0, #+0]
   \   000001CA   0xA905             ADD      R1,SP,#+20
   \                     ??mbedtls_mpi_exp_mod_17: (+1)
   \   000001CC   0xC81C             LDM      R0!,{R2-R4}
   \   000001CE   0xC11C             STM      R1!,{R2-R4}
   1669          
   1670              /*
   1671               * W[1] = A * R^2 * R^-1 mod N = A * R mod N
   1672               */
   1673              if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
   \                     ??mbedtls_mpi_exp_mod_16: (+1)
   \   000001D0   0x21C9             MOVS     R1,#+201
   \   000001D2   0x00C9             LSLS     R1,R1,#+3        ;; #+1608
   \   000001D4   0x4469             ADD      R1,R1,SP
   \   000001D6   0x6809             LDR      R1,[R1, #+0]
   \   000001D8   0x0028             MOVS     R0,R5
   \   000001DA   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   000001DE   0x2800             CMP      R0,#+0
   \   000001E0   0xD40C             BMI      ??mbedtls_mpi_exp_mod_18
   1674                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
   \   000001E2   0x22C9             MOVS     R2,#+201
   \   000001E4   0x00D2             LSLS     R2,R2,#+3        ;; #+1608
   \   000001E6   0x446A             ADD      R2,R2,SP
   \   000001E8   0x6812             LDR      R2,[R2, #+0]
   \   000001EA   0x0029             MOVS     R1,R5
   \   000001EC   0xA80F             ADD      R0,SP,#+60
   \   000001EE   0x300C             ADDS     R0,R0,#+12
   \   000001F0   0x.... 0x....      BL       mbedtls_mpi_mod_mpi
   \   000001F4   0x0006             MOVS     R6,R0
   \   000001F6   0xD000             BEQ      .+4
   \   000001F8   0xE12C             B        ??mbedtls_mpi_exp_mod_10
   \   000001FA   0xE007             B        ??mbedtls_mpi_exp_mod_19
   1675              else
   1676                  MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
   \                     ??mbedtls_mpi_exp_mod_18: (+1)
   \   000001FC   0x0029             MOVS     R1,R5
   \   000001FE   0xA80F             ADD      R0,SP,#+60
   \   00000200   0x300C             ADDS     R0,R0,#+12
   \   00000202   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000206   0x0006             MOVS     R6,R0
   \   00000208   0xD000             BEQ      .+4
   \   0000020A   0xE123             B        ??mbedtls_mpi_exp_mod_10
   1677          
   1678              MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
   \                     ??mbedtls_mpi_exp_mod_19: (+1)
   \   0000020C   0xA808             ADD      R0,SP,#+32
   \   0000020E   0x9000             STR      R0,[SP, #+0]
   \   00000210   0x9B01             LDR      R3,[SP, #+4]
   \   00000212   0x22C9             MOVS     R2,#+201
   \   00000214   0x00D2             LSLS     R2,R2,#+3        ;; #+1608
   \   00000216   0x446A             ADD      R2,R2,SP
   \   00000218   0x6812             LDR      R2,[R2, #+0]
   \   0000021A   0xA905             ADD      R1,SP,#+20
   \   0000021C   0xA80F             ADD      R0,SP,#+60
   \   0000021E   0x300C             ADDS     R0,R0,#+12
   \   00000220   0x.... 0x....      BL       mpi_montmul
   \   00000224   0x0006             MOVS     R6,R0
   \   00000226   0xD000             BEQ      .+4
   \   00000228   0xE114             B        ??mbedtls_mpi_exp_mod_10
   1679          
   1680              /*
   1681               * X = R^2 * R^-1 mod N = R mod N
   1682               */
   1683              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
   \   0000022A   0xA905             ADD      R1,SP,#+20
   \   0000022C   0x20C8             MOVS     R0,#+200
   \   0000022E   0x00C0             LSLS     R0,R0,#+3        ;; #+1600
   \   00000230   0x4468             ADD      R0,R0,SP
   \   00000232   0x6800             LDR      R0,[R0, #+0]
   \   00000234   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000238   0x0006             MOVS     R6,R0
   \   0000023A   0xD000             BEQ      .+4
   \   0000023C   0xE10A             B        ??mbedtls_mpi_exp_mod_10
   1684              MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
   \   0000023E   0xAB08             ADD      R3,SP,#+32
   \   00000240   0x9A01             LDR      R2,[SP, #+4]
   \   00000242   0x21C9             MOVS     R1,#+201
   \   00000244   0x00C9             LSLS     R1,R1,#+3        ;; #+1608
   \   00000246   0x4469             ADD      R1,R1,SP
   \   00000248   0x6809             LDR      R1,[R1, #+0]
   \   0000024A   0x20C8             MOVS     R0,#+200
   \   0000024C   0x00C0             LSLS     R0,R0,#+3        ;; #+1600
   \   0000024E   0x4468             ADD      R0,R0,SP
   \   00000250   0x6800             LDR      R0,[R0, #+0]
   \   00000252   0x.... 0x....      BL       mpi_montred
   \   00000256   0x0006             MOVS     R6,R0
   \   00000258   0xD000             BEQ      .+4
   \   0000025A   0xE0FB             B        ??mbedtls_mpi_exp_mod_10
   1685          
   1686              if( wsize > 1 )
   \   0000025C   0x2F02             CMP      R7,#+2
   \   0000025E   0xD35F             BCC      ??mbedtls_mpi_exp_mod_20
   1687              {
   1688                  /*
   1689                   * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)
   1690                   */
   1691                  j =  one << ( wsize - 1 );
   \   00000260   0x2401             MOVS     R4,#+1
   \   00000262   0x1E78             SUBS     R0,R7,#+1
   \   00000264   0x4084             LSLS     R4,R4,R0
   1692          
   1693                  MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
   \   00000266   0xA80F             ADD      R0,SP,#+60
   \   00000268   0x0061             LSLS     R1,R4,#+1
   \   0000026A   0x1909             ADDS     R1,R1,R4
   \   0000026C   0x0089             LSLS     R1,R1,#+2
   \   0000026E   0x1840             ADDS     R0,R0,R1
   \   00000270   0x9002             STR      R0,[SP, #+8]
   \   00000272   0x20C9             MOVS     R0,#+201
   \   00000274   0x00C0             LSLS     R0,R0,#+3        ;; #+1608
   \   00000276   0x4468             ADD      R0,R0,SP
   \   00000278   0x6800             LDR      R0,[R0, #+0]
   \   0000027A   0x6841             LDR      R1,[R0, #+4]
   \   0000027C   0x1C49             ADDS     R1,R1,#+1
   \   0000027E   0x9802             LDR      R0,[SP, #+8]
   \   00000280   0x.... 0x....      BL       mbedtls_mpi_grow
   \   00000284   0x0006             MOVS     R6,R0
   \   00000286   0xD000             BEQ      .+4
   \   00000288   0xE0E4             B        ??mbedtls_mpi_exp_mod_10
   1694                  MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
   \   0000028A   0xA80F             ADD      R0,SP,#+60
   \   0000028C   0x0001             MOVS     R1,R0
   \   0000028E   0x310C             ADDS     R1,R1,#+12
   \   00000290   0x9802             LDR      R0,[SP, #+8]
   \   00000292   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000296   0x0006             MOVS     R6,R0
   \   00000298   0xD000             BEQ      .+4
   \   0000029A   0xE0DB             B        ??mbedtls_mpi_exp_mod_10
   1695          
   1696                  for( i = 0; i < wsize - 1; i++ )
   \   0000029C   0x1E7D             SUBS     R5,R7,#+1
   \   0000029E   0xD00F             BEQ      ??mbedtls_mpi_exp_mod_21
   1697                      MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
   \                     ??mbedtls_mpi_exp_mod_22: (+1)
   \   000002A0   0xA808             ADD      R0,SP,#+32
   \   000002A2   0x9000             STR      R0,[SP, #+0]
   \   000002A4   0x9B01             LDR      R3,[SP, #+4]
   \   000002A6   0x22C9             MOVS     R2,#+201
   \   000002A8   0x00D2             LSLS     R2,R2,#+3        ;; #+1608
   \   000002AA   0x446A             ADD      R2,R2,SP
   \   000002AC   0x6812             LDR      R2,[R2, #+0]
   \   000002AE   0x9902             LDR      R1,[SP, #+8]
   \   000002B0   0x4608             MOV      R0,R1
   \   000002B2   0x.... 0x....      BL       mpi_montmul
   \   000002B6   0x0006             MOVS     R6,R0
   \   000002B8   0xD000             BEQ      .+4
   \   000002BA   0xE0CB             B        ??mbedtls_mpi_exp_mod_10
   \   000002BC   0x1E6D             SUBS     R5,R5,#+1
   \   000002BE   0xD1EF             BNE      ??mbedtls_mpi_exp_mod_22
   1698          
   1699                  /*
   1700                   * W[i] = W[i - 1] * W[1]
   1701                   */
   1702                  for( i = j + 1; i < ( one << wsize ); i++ )
   \                     ??mbedtls_mpi_exp_mod_21: (+1)
   \   000002C0   0x2001             MOVS     R0,#+1
   \   000002C2   0x40B8             LSLS     R0,R0,R7
   \   000002C4   0x1C61             ADDS     R1,R4,#+1
   \   000002C6   0x4281             CMP      R1,R0
   \   000002C8   0xD22A             BCS      ??mbedtls_mpi_exp_mod_20
   \   000002CA   0x9D02             LDR      R5,[SP, #+8]
   \   000002CC   0x350C             ADDS     R5,R5,#+12
   \   000002CE   0x1B04             SUBS     R4,R0,R4
   \   000002D0   0x1E64             SUBS     R4,R4,#+1
   1703                  {
   1704                      MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
   \                     ??mbedtls_mpi_exp_mod_23: (+1)
   \   000002D2   0x20C9             MOVS     R0,#+201
   \   000002D4   0x00C0             LSLS     R0,R0,#+3        ;; #+1608
   \   000002D6   0x4468             ADD      R0,R0,SP
   \   000002D8   0x6800             LDR      R0,[R0, #+0]
   \   000002DA   0x6841             LDR      R1,[R0, #+4]
   \   000002DC   0x1C49             ADDS     R1,R1,#+1
   \   000002DE   0x0028             MOVS     R0,R5
   \   000002E0   0x.... 0x....      BL       mbedtls_mpi_grow
   \   000002E4   0x0006             MOVS     R6,R0
   \   000002E6   0xD000             BEQ      .+4
   \   000002E8   0xE0B4             B        ??mbedtls_mpi_exp_mod_10
   1705                      MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
   \   000002EA   0x0029             MOVS     R1,R5
   \   000002EC   0x390C             SUBS     R1,R1,#+12
   \   000002EE   0x0028             MOVS     R0,R5
   \   000002F0   0x.... 0x....      BL       mbedtls_mpi_copy
   \   000002F4   0x0006             MOVS     R6,R0
   \   000002F6   0xD000             BEQ      .+4
   \   000002F8   0xE0AC             B        ??mbedtls_mpi_exp_mod_10
   1706          
   1707                      MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
   \   000002FA   0xA808             ADD      R0,SP,#+32
   \   000002FC   0x9000             STR      R0,[SP, #+0]
   \   000002FE   0x9B01             LDR      R3,[SP, #+4]
   \   00000300   0x22C9             MOVS     R2,#+201
   \   00000302   0x00D2             LSLS     R2,R2,#+3        ;; #+1608
   \   00000304   0x446A             ADD      R2,R2,SP
   \   00000306   0x6812             LDR      R2,[R2, #+0]
   \   00000308   0xA80F             ADD      R0,SP,#+60
   \   0000030A   0x0001             MOVS     R1,R0
   \   0000030C   0x310C             ADDS     R1,R1,#+12
   \   0000030E   0x0028             MOVS     R0,R5
   \   00000310   0x.... 0x....      BL       mpi_montmul
   \   00000314   0x0006             MOVS     R6,R0
   \   00000316   0xD000             BEQ      .+4
   \   00000318   0xE09C             B        ??mbedtls_mpi_exp_mod_10
   1708                  }
   \   0000031A   0x350C             ADDS     R5,R5,#+12
   \   0000031C   0x1E64             SUBS     R4,R4,#+1
   \   0000031E   0xD1D8             BNE      ??mbedtls_mpi_exp_mod_23
   1709              }
   1710          
   1711              nblimbs = E->n;
   \                     ??mbedtls_mpi_exp_mod_20: (+1)
   \   00000320   0x4805             LDR      R0,??mbedtls_mpi_exp_mod_0+0x4  ;; 0x644
   \   00000322   0x4468             ADD      R0,R0,SP
   \   00000324   0x6800             LDR      R0,[R0, #+0]
   \   00000326   0x6840             LDR      R0,[R0, #+4]
   \   00000328   0x9004             STR      R0,[SP, #+16]
   1712              bufsize = 0;
   1713              nbits   = 0;
   \   0000032A   0x2500             MOVS     R5,#+0
   1714              wbits   = 0;
   \   0000032C   0x2400             MOVS     R4,#+0
   1715              state   = 0;
   \   0000032E   0x9403             STR      R4,[SP, #+12]
   \   00000330   0xE031             B        ??mbedtls_mpi_exp_mod_24
   \   00000332   0xBF00             Nop      
   \                     ??mbedtls_mpi_exp_mod_0:
   \   00000334   0xFFFFF9C0         DC32     0xfffff9c0
   \   00000338   0x00000644         DC32     0x644
   1716          
   1717              while( 1 )
   1718              {
   1719                  if( bufsize == 0 )
   1720                  {
   1721                      if( nblimbs == 0 )
   1722                          break;
   1723          
   1724                      nblimbs--;
   \                     ??mbedtls_mpi_exp_mod_25: (+1)
   \   0000033C   0x1E40             SUBS     R0,R0,#+1
   \   0000033E   0x9004             STR      R0,[SP, #+16]
   1725          
   1726                      bufsize = sizeof( mbedtls_mpi_uint ) << 3;
   \   00000340   0x2020             MOVS     R0,#+32
   \   00000342   0x9002             STR      R0,[SP, #+8]
   1727                  }
   1728          
   1729                  bufsize--;
   \                     ??mbedtls_mpi_exp_mod_26: (+1)
   \   00000344   0x9802             LDR      R0,[SP, #+8]
   \   00000346   0x1E40             SUBS     R0,R0,#+1
   \   00000348   0x9002             STR      R0,[SP, #+8]
   1730          
   1731                  ei = (E->p[nblimbs] >> bufsize) & 1;
   \   0000034A   0x....             LDR      R0,??DataTable22  ;; 0x644
   \   0000034C   0x4468             ADD      R0,R0,SP
   \   0000034E   0x6800             LDR      R0,[R0, #+0]
   \   00000350   0x6880             LDR      R0,[R0, #+8]
   \   00000352   0x9904             LDR      R1,[SP, #+16]
   \   00000354   0x0089             LSLS     R1,R1,#+2
   \   00000356   0x5841             LDR      R1,[R0, R1]
   \   00000358   0x9802             LDR      R0,[SP, #+8]
   \   0000035A   0x40C1             LSRS     R1,R1,R0
   \   0000035C   0x07C8             LSLS     R0,R1,#+31
   \   0000035E   0x0FC0             LSRS     R0,R0,#+31
   1732          
   1733                  /*
   1734                   * skip leading 0s
   1735                   */
   1736                  if( ei == 0 && state == 0 )
   \   00000360   0xD000             BEQ      .+4
   \   00000362   0xE0A8             B        ??mbedtls_mpi_exp_mod_27
   \   00000364   0x9903             LDR      R1,[SP, #+12]
   \   00000366   0x2900             CMP      R1,#+0
   \   00000368   0xD012             BEQ      ??mbedtls_mpi_exp_mod_28
   \   0000036A   0x2901             CMP      R1,#+1
   \   0000036C   0xD000             BEQ      .+4
   \   0000036E   0xE0A2             B        ??mbedtls_mpi_exp_mod_27
   1737                      continue;
   1738          
   1739                  if( ei == 0 && state == 1 )
   1740                  {
   1741                      /*
   1742                       * out of window, square X
   1743                       */
   1744                      MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   \   00000370   0xA808             ADD      R0,SP,#+32
   \   00000372   0x9000             STR      R0,[SP, #+0]
   \   00000374   0x9B01             LDR      R3,[SP, #+4]
   \   00000376   0x22C9             MOVS     R2,#+201
   \   00000378   0x00D2             LSLS     R2,R2,#+3        ;; #+1608
   \   0000037A   0x446A             ADD      R2,R2,SP
   \   0000037C   0x6812             LDR      R2,[R2, #+0]
   \   0000037E   0x21C8             MOVS     R1,#+200
   \   00000380   0x00C9             LSLS     R1,R1,#+3        ;; #+1600
   \   00000382   0x4469             ADD      R1,R1,SP
   \   00000384   0x6809             LDR      R1,[R1, #+0]
   \   00000386   0x4608             MOV      R0,R1
   \   00000388   0x.... 0x....      BL       mpi_montmul
   \   0000038C   0x0006             MOVS     R6,R0
   \   0000038E   0xD161             BNE      ??mbedtls_mpi_exp_mod_10
   1745                      continue;
   1746                  }
   \                     ??mbedtls_mpi_exp_mod_28: (+1)
   \   00000390   0x9802             LDR      R0,[SP, #+8]
   \   00000392   0x2800             CMP      R0,#+0
   \   00000394   0xD1D6             BNE      ??mbedtls_mpi_exp_mod_26
   \                     ??mbedtls_mpi_exp_mod_24: (+1)
   \   00000396   0x9804             LDR      R0,[SP, #+16]
   \   00000398   0x2800             CMP      R0,#+0
   \   0000039A   0xD1CF             BNE      ??mbedtls_mpi_exp_mod_25
   1747          
   1748                  /*
   1749                   * add ei to current window
   1750                   */
   1751                  state = 2;
   1752          
   1753                  nbits++;
   1754                  wbits |= ( ei << ( wsize - nbits ) );
   1755          
   1756                  if( nbits == wsize )
   1757                  {
   1758                      /*
   1759                       * X = X^wsize R^-1 mod N
   1760                       */
   1761                      for( i = 0; i < wsize; i++ )
   1762                          MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   1763          
   1764                      /*
   1765                       * X = X * W[wbits] R^-1 mod N
   1766                       */
   1767                      MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
   1768          
   1769                      state--;
   1770                      nbits = 0;
   1771                      wbits = 0;
   1772                  }
   1773              }
   1774          
   1775              /*
   1776               * process the remaining bits
   1777               */
   1778              for( i = 0; i < nbits; i++ )
   \   0000039C   0x2D00             CMP      R5,#+0
   \   0000039E   0xD028             BEQ      ??mbedtls_mpi_exp_mod_29
   1779              {
   1780                  MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
   \                     ??mbedtls_mpi_exp_mod_30: (+1)
   \   000003A0   0xA808             ADD      R0,SP,#+32
   \   000003A2   0x9000             STR      R0,[SP, #+0]
   \   000003A4   0x9B01             LDR      R3,[SP, #+4]
   \   000003A6   0x22C9             MOVS     R2,#+201
   \   000003A8   0x00D2             LSLS     R2,R2,#+3        ;; #+1608
   \   000003AA   0x446A             ADD      R2,R2,SP
   \   000003AC   0x6812             LDR      R2,[R2, #+0]
   \   000003AE   0x21C8             MOVS     R1,#+200
   \   000003B0   0x00C9             LSLS     R1,R1,#+3        ;; #+1600
   \   000003B2   0x4469             ADD      R1,R1,SP
   \   000003B4   0x6809             LDR      R1,[R1, #+0]
   \   000003B6   0x4608             MOV      R0,R1
   \   000003B8   0x.... 0x....      BL       mpi_montmul
   \   000003BC   0x0006             MOVS     R6,R0
   \   000003BE   0xD149             BNE      ??mbedtls_mpi_exp_mod_10
   1781          
   1782                  wbits <<= 1;
   \   000003C0   0x0064             LSLS     R4,R4,#+1
   1783          
   1784                  if( ( wbits & ( one << wsize ) ) != 0 )
   \   000003C2   0x0020             MOVS     R0,R4
   \   000003C4   0x40F8             LSRS     R0,R0,R7
   \   000003C6   0x07C0             LSLS     R0,R0,#+31
   \   000003C8   0xD511             BPL      ??mbedtls_mpi_exp_mod_31
   1785                      MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
   \   000003CA   0xA808             ADD      R0,SP,#+32
   \   000003CC   0x9000             STR      R0,[SP, #+0]
   \   000003CE   0x9B01             LDR      R3,[SP, #+4]
   \   000003D0   0x22C9             MOVS     R2,#+201
   \   000003D2   0x00D2             LSLS     R2,R2,#+3        ;; #+1608
   \   000003D4   0x446A             ADD      R2,R2,SP
   \   000003D6   0x6812             LDR      R2,[R2, #+0]
   \   000003D8   0xA80F             ADD      R0,SP,#+60
   \   000003DA   0x0001             MOVS     R1,R0
   \   000003DC   0x310C             ADDS     R1,R1,#+12
   \   000003DE   0x20C8             MOVS     R0,#+200
   \   000003E0   0x00C0             LSLS     R0,R0,#+3        ;; #+1600
   \   000003E2   0x4468             ADD      R0,R0,SP
   \   000003E4   0x6800             LDR      R0,[R0, #+0]
   \   000003E6   0x.... 0x....      BL       mpi_montmul
   \   000003EA   0x0006             MOVS     R6,R0
   \   000003EC   0xD132             BNE      ??mbedtls_mpi_exp_mod_10
   1786              }
   \                     ??mbedtls_mpi_exp_mod_31: (+1)
   \   000003EE   0x1E6D             SUBS     R5,R5,#+1
   \   000003F0   0xD1D6             BNE      ??mbedtls_mpi_exp_mod_30
   1787          
   1788              /*
   1789               * X = A^E * R * R^-1 mod N = A^E mod N
   1790               */
   1791              MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
   \                     ??mbedtls_mpi_exp_mod_29: (+1)
   \   000003F2   0xAB08             ADD      R3,SP,#+32
   \   000003F4   0x9A01             LDR      R2,[SP, #+4]
   \   000003F6   0x21C9             MOVS     R1,#+201
   \   000003F8   0x00C9             LSLS     R1,R1,#+3        ;; #+1608
   \   000003FA   0x4469             ADD      R1,R1,SP
   \   000003FC   0x6809             LDR      R1,[R1, #+0]
   \   000003FE   0x20C8             MOVS     R0,#+200
   \   00000400   0x00C0             LSLS     R0,R0,#+3        ;; #+1600
   \   00000402   0x4468             ADD      R0,R0,SP
   \   00000404   0x6800             LDR      R0,[R0, #+0]
   \   00000406   0x.... 0x....      BL       mpi_montred
   \   0000040A   0x0006             MOVS     R6,R0
   \   0000040C   0xD122             BNE      ??mbedtls_mpi_exp_mod_10
   1792          
   1793              if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
   \   0000040E   0x980B             LDR      R0,[SP, #+44]
   \   00000410   0x2800             CMP      R0,#+0
   \   00000412   0xD01F             BEQ      ??mbedtls_mpi_exp_mod_10
   \   00000414   0x....             LDR      R0,??DataTable22  ;; 0x644
   \   00000416   0x4468             ADD      R0,R0,SP
   \   00000418   0x6800             LDR      R0,[R0, #+0]
   \   0000041A   0x6840             LDR      R0,[R0, #+4]
   \   0000041C   0x2800             CMP      R0,#+0
   \   0000041E   0xD019             BEQ      ??mbedtls_mpi_exp_mod_10
   \   00000420   0x....             LDR      R0,??DataTable22  ;; 0x644
   \   00000422   0x4468             ADD      R0,R0,SP
   \   00000424   0x6800             LDR      R0,[R0, #+0]
   \   00000426   0x6880             LDR      R0,[R0, #+8]
   \   00000428   0x7800             LDRB     R0,[R0, #+0]
   \   0000042A   0x07C0             LSLS     R0,R0,#+31
   \   0000042C   0xD512             BPL      ??mbedtls_mpi_exp_mod_10
   1794              {
   1795                  X->s = -1;
   \   0000042E   0x2000             MOVS     R0,#+0
   \   00000430   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000432   0x21C8             MOVS     R1,#+200
   \   00000434   0x00C9             LSLS     R1,R1,#+3        ;; #+1600
   \   00000436   0x4469             ADD      R1,R1,SP
   \   00000438   0x6809             LDR      R1,[R1, #+0]
   \   0000043A   0x6008             STR      R0,[R1, #+0]
   1796                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
   \   0000043C   0x22C8             MOVS     R2,#+200
   \   0000043E   0x00D2             LSLS     R2,R2,#+3        ;; #+1600
   \   00000440   0x446A             ADD      R2,R2,SP
   \   00000442   0x6812             LDR      R2,[R2, #+0]
   \   00000444   0x21C9             MOVS     R1,#+201
   \   00000446   0x00C9             LSLS     R1,R1,#+3        ;; #+1608
   \   00000448   0x4469             ADD      R1,R1,SP
   \   0000044A   0x6809             LDR      R1,[R1, #+0]
   \   0000044C   0x4610             MOV      R0,R2
   \   0000044E   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   00000452   0x0006             MOVS     R6,R0
   1797              }
   1798          
   1799          cleanup:
   1800          
   1801              for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
   \                     ??mbedtls_mpi_exp_mod_10: (+1)
   \   00000454   0x2101             MOVS     R1,#+1
   \   00000456   0x1E78             SUBS     R0,R7,#+1
   \   00000458   0x4081             LSLS     R1,R1,R0
   \   0000045A   0x2001             MOVS     R0,#+1
   \   0000045C   0x40B8             LSLS     R0,R0,R7
   \   0000045E   0x4281             CMP      R1,R0
   \   00000460   0xD20B             BCS      ??mbedtls_mpi_exp_mod_32
   \   00000462   0xAA0F             ADD      R2,SP,#+60
   \   00000464   0x004B             LSLS     R3,R1,#+1
   \   00000466   0x185B             ADDS     R3,R3,R1
   \   00000468   0x009B             LSLS     R3,R3,#+2
   \   0000046A   0x18D4             ADDS     R4,R2,R3
   \   0000046C   0x1A45             SUBS     R5,R0,R1
   1802                  mbedtls_mpi_free( &W[i] );
   \                     ??mbedtls_mpi_exp_mod_33: (+1)
   \   0000046E   0x0020             MOVS     R0,R4
   \   00000470   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000474   0x340C             ADDS     R4,R4,#+12
   \   00000476   0x1E6D             SUBS     R5,R5,#+1
   \   00000478   0xD1F9             BNE      ??mbedtls_mpi_exp_mod_33
   1803          
   1804              mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
   \                     ??mbedtls_mpi_exp_mod_32: (+1)
   \   0000047A   0xA80F             ADD      R0,SP,#+60
   \   0000047C   0x300C             ADDS     R0,R0,#+12
   \   0000047E   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000482   0xA808             ADD      R0,SP,#+32
   \   00000484   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000488   0xA80C             ADD      R0,SP,#+48
   \   0000048A   0x.... 0x....      BL       mbedtls_mpi_free
   1805          
   1806              if( _RR == NULL || _RR->p == NULL )
   \   0000048E   0x20CC             MOVS     R0,#+204
   \   00000490   0x00C0             LSLS     R0,R0,#+3        ;; #+1632
   \   00000492   0x4468             ADD      R0,R0,SP
   \   00000494   0x6800             LDR      R0,[R0, #+0]
   \   00000496   0x2800             CMP      R0,#+0
   \   00000498   0xD006             BEQ      ??mbedtls_mpi_exp_mod_34
   \   0000049A   0x20CC             MOVS     R0,#+204
   \   0000049C   0x00C0             LSLS     R0,R0,#+3        ;; #+1632
   \   0000049E   0x4468             ADD      R0,R0,SP
   \   000004A0   0x6800             LDR      R0,[R0, #+0]
   \   000004A2   0x6880             LDR      R0,[R0, #+8]
   \   000004A4   0x2800             CMP      R0,#+0
   \   000004A6   0xD102             BNE      ??mbedtls_mpi_exp_mod_35
   1807                  mbedtls_mpi_free( &RR );
   \                     ??mbedtls_mpi_exp_mod_34: (+1)
   \   000004A8   0xA805             ADD      R0,SP,#+20
   \   000004AA   0x.... 0x....      BL       mbedtls_mpi_free
   1808          
   1809              return( ret );
   \                     ??mbedtls_mpi_exp_mod_35: (+1)
   \   000004AE   0x0030             MOVS     R0,R6
   \                     ??mbedtls_mpi_exp_mod_3: (+1)
   \   000004B0   0x....             LDR      R1,??DataTable22_1  ;; 0x64c
   \   000004B2   0x448D             ADD      SP,SP,R1
   \   000004B4   0xBDF0             POP      {R4-R7,PC}       ;; return
   \                     ??mbedtls_mpi_exp_mod_27: (+1)
   \   000004B6   0x2102             MOVS     R1,#+2
   \   000004B8   0x9103             STR      R1,[SP, #+12]
   \   000004BA   0x1C6D             ADDS     R5,R5,#+1
   \   000004BC   0x1B79             SUBS     R1,R7,R5
   \   000004BE   0x4088             LSLS     R0,R0,R1
   \   000004C0   0x4320             ORRS     R0,R0,R4
   \   000004C2   0x0004             MOVS     R4,R0
   \   000004C4   0x42BD             CMP      R5,R7
   \   000004C6   0xD000             BEQ      .+4
   \   000004C8   0xE762             B        ??mbedtls_mpi_exp_mod_28
   \   000004CA   0x003D             MOVS     R5,R7
   \                     ??mbedtls_mpi_exp_mod_36: (+1)
   \   000004CC   0xA808             ADD      R0,SP,#+32
   \   000004CE   0x9000             STR      R0,[SP, #+0]
   \   000004D0   0x9B01             LDR      R3,[SP, #+4]
   \   000004D2   0x22C9             MOVS     R2,#+201
   \   000004D4   0x00D2             LSLS     R2,R2,#+3        ;; #+1608
   \   000004D6   0x446A             ADD      R2,R2,SP
   \   000004D8   0x6812             LDR      R2,[R2, #+0]
   \   000004DA   0x21C8             MOVS     R1,#+200
   \   000004DC   0x00C9             LSLS     R1,R1,#+3        ;; #+1600
   \   000004DE   0x4469             ADD      R1,R1,SP
   \   000004E0   0x6809             LDR      R1,[R1, #+0]
   \   000004E2   0x4608             MOV      R0,R1
   \   000004E4   0x.... 0x....      BL       mpi_montmul
   \   000004E8   0x0006             MOVS     R6,R0
   \   000004EA   0xD1B3             BNE      ??mbedtls_mpi_exp_mod_10
   \   000004EC   0x1E6D             SUBS     R5,R5,#+1
   \   000004EE   0xD1ED             BNE      ??mbedtls_mpi_exp_mod_36
   \   000004F0   0xA808             ADD      R0,SP,#+32
   \   000004F2   0x9000             STR      R0,[SP, #+0]
   \   000004F4   0x9B01             LDR      R3,[SP, #+4]
   \   000004F6   0x22C9             MOVS     R2,#+201
   \   000004F8   0x00D2             LSLS     R2,R2,#+3        ;; #+1608
   \   000004FA   0x446A             ADD      R2,R2,SP
   \   000004FC   0x6812             LDR      R2,[R2, #+0]
   \   000004FE   0xA80F             ADD      R0,SP,#+60
   \   00000500   0x0061             LSLS     R1,R4,#+1
   \   00000502   0x1909             ADDS     R1,R1,R4
   \   00000504   0x0089             LSLS     R1,R1,#+2
   \   00000506   0x1841             ADDS     R1,R0,R1
   \   00000508   0x20C8             MOVS     R0,#+200
   \   0000050A   0x00C0             LSLS     R0,R0,#+3        ;; #+1600
   \   0000050C   0x4468             ADD      R0,R0,SP
   \   0000050E   0x6800             LDR      R0,[R0, #+0]
   \   00000510   0x.... 0x....      BL       mpi_montmul
   \   00000514   0x0006             MOVS     R6,R0
   \   00000516   0xD19D             BNE      ??mbedtls_mpi_exp_mod_10
   \   00000518   0x2001             MOVS     R0,#+1
   \   0000051A   0x9003             STR      R0,[SP, #+12]
   \   0000051C   0x2400             MOVS     R4,#+0
   \   0000051E   0xE737             B        ??mbedtls_mpi_exp_mod_28
   1810          }
   1811          
   1812          /*
   1813           * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
   1814           */

   \                                 In section .text, align 2, keep-with-next
   1815          int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
   1816          {
   \                     mbedtls_mpi_gcd: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0017             MOVS     R7,R2
   1817              int ret;
   1818              size_t lz, lzt;
   1819              mbedtls_mpi TG, TA, TB;
   1820          
   1821              mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
   \   0000000A   0xA80A             ADD      R0,SP,#+40
   \   0000000C   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000010   0xA803             ADD      R0,SP,#+12
   \   00000012   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000016   0x4668             MOV      R0,SP
   \   00000018   0x.... 0x....      BL       mbedtls_mpi_init
   1822          
   1823              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
   \   0000001C   0x0021             MOVS     R1,R4
   \   0000001E   0xA803             ADD      R0,SP,#+12
   \   00000020   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000024   0x0006             MOVS     R6,R0
   \   00000026   0xD166             BNE      ??mbedtls_mpi_gcd_0
   1824              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
   \   00000028   0x0039             MOVS     R1,R7
   \   0000002A   0x4668             MOV      R0,SP
   \   0000002C   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000030   0x0006             MOVS     R6,R0
   \   00000032   0xD160             BNE      ??mbedtls_mpi_gcd_0
   1825          
   1826              lz = mbedtls_mpi_lsb( &TA );
   \   00000034   0xA803             ADD      R0,SP,#+12
   \   00000036   0x.... 0x....      BL       mbedtls_mpi_lsb
   \   0000003A   0x0004             MOVS     R4,R0
   1827              lzt = mbedtls_mpi_lsb( &TB );
   \   0000003C   0x4668             MOV      R0,SP
   \   0000003E   0x.... 0x....      BL       mbedtls_mpi_lsb
   1828          
   1829              if( lzt < lz )
   \   00000042   0x42A0             CMP      R0,R4
   \   00000044   0xD900             BLS      ??mbedtls_mpi_gcd_1
   \   00000046   0x0020             MOVS     R0,R4
   \                     ??mbedtls_mpi_gcd_1: (+1)
   \   00000048   0x0007             MOVS     R7,R0
   1830                  lz = lzt;
   1831          
   1832              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
   \   0000004A   0x0039             MOVS     R1,R7
   \   0000004C   0xA803             ADD      R0,SP,#+12
   \   0000004E   0x.... 0x....      BL       mbedtls_mpi_shift_r
   \   00000052   0x0006             MOVS     R6,R0
   \   00000054   0xD14F             BNE      ??mbedtls_mpi_gcd_0
   1833              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
   \   00000056   0x0039             MOVS     R1,R7
   \   00000058   0x4668             MOV      R0,SP
   \   0000005A   0x.... 0x....      BL       mbedtls_mpi_shift_r
   \   0000005E   0x0006             MOVS     R6,R0
   \   00000060   0xD149             BNE      ??mbedtls_mpi_gcd_0
   1834          
   1835              TA.s = TB.s = 1;
   \   00000062   0x2401             MOVS     R4,#+1
   \   00000064   0x9400             STR      R4,[SP, #+0]
   \   00000066   0x9403             STR      R4,[SP, #+12]
   1836          
   1837              while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
   \                     ??mbedtls_mpi_gcd_2: (+1)
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x9006             STR      R0,[SP, #+24]
   \   0000006C   0x9407             STR      R4,[SP, #+28]
   \   0000006E   0x9408             STR      R4,[SP, #+32]
   \   00000070   0xA806             ADD      R0,SP,#+24
   \   00000072   0x9009             STR      R0,[SP, #+36]
   \   00000074   0xA907             ADD      R1,SP,#+28
   \   00000076   0xA803             ADD      R0,SP,#+12
   \   00000078   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000007C   0x2800             CMP      R0,#+0
   \   0000007E   0xD02F             BEQ      ??mbedtls_mpi_gcd_3
   1838              {
   1839                  MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
   \   00000080   0xA803             ADD      R0,SP,#+12
   \   00000082   0x.... 0x....      BL       mbedtls_mpi_lsb
   \   00000086   0x0001             MOVS     R1,R0
   \   00000088   0xA803             ADD      R0,SP,#+12
   \   0000008A   0x.... 0x....      BL       mbedtls_mpi_shift_r
   \   0000008E   0x0006             MOVS     R6,R0
   \   00000090   0xD131             BNE      ??mbedtls_mpi_gcd_0
   1840                  MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
   \   00000092   0x4668             MOV      R0,SP
   \   00000094   0x.... 0x....      BL       mbedtls_mpi_lsb
   \   00000098   0x0001             MOVS     R1,R0
   \   0000009A   0x4668             MOV      R0,SP
   \   0000009C   0x.... 0x....      BL       mbedtls_mpi_shift_r
   \   000000A0   0x0006             MOVS     R6,R0
   \   000000A2   0xD128             BNE      ??mbedtls_mpi_gcd_0
   1841          
   1842                  if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
   \   000000A4   0x4669             MOV      R1,SP
   \   000000A6   0xA803             ADD      R0,SP,#+12
   \   000000A8   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   000000AC   0x2800             CMP      R0,#+0
   \   000000AE   0xD40D             BMI      ??mbedtls_mpi_gcd_4
   1843                  {
   1844                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
   \   000000B0   0x466A             MOV      R2,SP
   \   000000B2   0xA903             ADD      R1,SP,#+12
   \   000000B4   0xA803             ADD      R0,SP,#+12
   \   000000B6   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   000000BA   0x0006             MOVS     R6,R0
   \   000000BC   0xD11B             BNE      ??mbedtls_mpi_gcd_0
   1845                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
   \   000000BE   0x2101             MOVS     R1,#+1
   \   000000C0   0xA803             ADD      R0,SP,#+12
   \                     ??mbedtls_mpi_gcd_5: (+1)
   \   000000C2   0x.... 0x....      BL       mbedtls_mpi_shift_r
   \   000000C6   0x0006             MOVS     R6,R0
   \   000000C8   0xD115             BNE      ??mbedtls_mpi_gcd_0
   \   000000CA   0xE7CD             B        ??mbedtls_mpi_gcd_2
   1846                  }
   1847                  else
   1848                  {
   1849                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
   \                     ??mbedtls_mpi_gcd_4: (+1)
   \   000000CC   0xAA03             ADD      R2,SP,#+12
   \   000000CE   0x4669             MOV      R1,SP
   \   000000D0   0x4668             MOV      R0,SP
   \   000000D2   0x.... 0x....      BL       mbedtls_mpi_sub_abs
   \   000000D6   0x0006             MOVS     R6,R0
   \   000000D8   0xD10D             BNE      ??mbedtls_mpi_gcd_0
   1850                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
   \   000000DA   0x2101             MOVS     R1,#+1
   \   000000DC   0x4668             MOV      R0,SP
   \   000000DE   0xE7F0             B.N      ??mbedtls_mpi_gcd_5
   1851                  }
   1852              }
   1853          
   1854              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
   \                     ??mbedtls_mpi_gcd_3: (+1)
   \   000000E0   0x0039             MOVS     R1,R7
   \   000000E2   0x4668             MOV      R0,SP
   \   000000E4   0x.... 0x....      BL       mbedtls_mpi_shift_l
   \   000000E8   0x0006             MOVS     R6,R0
   \   000000EA   0xD104             BNE      ??mbedtls_mpi_gcd_0
   1855              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
   \   000000EC   0x4669             MOV      R1,SP
   \   000000EE   0x0028             MOVS     R0,R5
   \   000000F0   0x.... 0x....      BL       mbedtls_mpi_copy
   \   000000F4   0x0006             MOVS     R6,R0
   1856          
   1857          cleanup:
   1858          
   1859              mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
   \                     ??mbedtls_mpi_gcd_0: (+1)
   \   000000F6   0xA80A             ADD      R0,SP,#+40
   \   000000F8   0x.... 0x....      BL       mbedtls_mpi_free
   \   000000FC   0xA803             ADD      R0,SP,#+12
   \   000000FE   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000102   0x4668             MOV      R0,SP
   \   00000104   0x.... 0x....      BL       mbedtls_mpi_free
   1860          
   1861              return( ret );
   \   00000108   0x0030             MOVS     R0,R6
   \   0000010A   0xB00D             ADD      SP,SP,#+52
   \   0000010C   0xBDF0             POP      {R4-R7,PC}       ;; return
   1862          }
   1863          
   1864          /*
   1865           * Fill X with size bytes of random.
   1866           *
   1867           * Use a temporary bytes representation to make sure the result is the same
   1868           * regardless of the platform endianness (useful when f_rng is actually
   1869           * deterministic, eg for tests).
   1870           */

   \                                 In section .text, align 2, keep-with-next
   1871          int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
   1872                               int (*f_rng)(void *, unsigned char *, size_t),
   1873                               void *p_rng )
   1874          {
   \                     mbedtls_mpi_fill_random: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x....             LDR      R4,??DataTable22_2  ;; 0xfffffc00
   \   00000004   0x44A5             ADD      SP,SP,R4
   \   00000006   0x0005             MOVS     R5,R0
   \   00000008   0x000C             MOVS     R4,R1
   \   0000000A   0x0016             MOVS     R6,R2
   1875              int ret;
   1876              unsigned char buf[MBEDTLS_MPI_MAX_SIZE];
   1877          
   1878              if( size > MBEDTLS_MPI_MAX_SIZE )
   \   0000000C   0x....             LDR      R0,??DataTable22_3  ;; 0x401
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD302             BCC      ??mbedtls_mpi_fill_random_0
   1879                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   \   00000012   0x2003             MOVS     R0,#+3
   \   00000014   0x43C0             MVNS     R0,R0            ;; #-4
   \   00000016   0xE00A             B        ??mbedtls_mpi_fill_random_1
   1880          
   1881              MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
   \                     ??mbedtls_mpi_fill_random_0: (+1)
   \   00000018   0x0022             MOVS     R2,R4
   \   0000001A   0x4669             MOV      R1,SP
   \   0000001C   0x0018             MOVS     R0,R3
   \   0000001E   0x47B0             BLX      R6
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD104             BNE      ??mbedtls_mpi_fill_random_1
   1882              MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );
   \   00000024   0x0022             MOVS     R2,R4
   \   00000026   0x4669             MOV      R1,SP
   \   00000028   0x0028             MOVS     R0,R5
   \   0000002A   0x.... 0x....      BL       mbedtls_mpi_read_binary
   1883          
   1884          cleanup:
   1885              return( ret );
   \                     ??mbedtls_mpi_fill_random_1: (+1)
   \   0000002E   0x2180             MOVS     R1,#+128
   \   00000030   0x00C9             LSLS     R1,R1,#+3        ;; #+1024
   \   00000032   0x448D             ADD      SP,SP,R1
   \   00000034   0xBD70             POP      {R4-R6,PC}       ;; return
   1886          }
   1887          
   1888          /*
   1889           * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
   1890           */

   \                                 In section .text, align 2, keep-with-next
   1891          int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
   1892          {
   \                     mbedtls_mpi_inv_mod: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB0A0             SUB      SP,SP,#+128
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0017             MOVS     R7,R2
   1893              int ret;
   1894              mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;
   1895          
   1896              if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
   \   00000008   0x2501             MOVS     R5,#+1
   \   0000000A   0x9503             STR      R5,[SP, #+12]
   \   0000000C   0x9507             STR      R5,[SP, #+28]
   \   0000000E   0x9508             STR      R5,[SP, #+32]
   \   00000010   0xA803             ADD      R0,SP,#+12
   \   00000012   0x9009             STR      R0,[SP, #+36]
   \   00000014   0xA907             ADD      R1,SP,#+28
   \   00000016   0x0038             MOVS     R0,R7
   \   00000018   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000001C   0x2801             CMP      R0,#+1
   \   0000001E   0xDA02             BGE      ??mbedtls_mpi_inv_mod_0
   1897                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   \   00000020   0x2003             MOVS     R0,#+3
   \   00000022   0x43C0             MVNS     R0,R0            ;; #-4
   \   00000024   0xE1C7             B        ??mbedtls_mpi_inv_mod_1
   1898          
   1899              mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
   \                     ??mbedtls_mpi_inv_mod_0: (+1)
   \   00000026   0xA819             ADD      R0,SP,#+100
   \   00000028   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000002C   0xA813             ADD      R0,SP,#+76
   \   0000002E   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000032   0xA810             ADD      R0,SP,#+64
   \   00000034   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000038   0xA80D             ADD      R0,SP,#+52
   \   0000003A   0x.... 0x....      BL       mbedtls_mpi_init
   1900              mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
   \   0000003E   0xA81C             ADD      R0,SP,#+112
   \   00000040   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000044   0xA816             ADD      R0,SP,#+88
   \   00000046   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000004A   0xA80A             ADD      R0,SP,#+40
   \   0000004C   0x.... 0x....      BL       mbedtls_mpi_init
   1901              mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );
   \   00000050   0x4668             MOV      R0,SP
   \   00000052   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000056   0xA804             ADD      R0,SP,#+16
   \   00000058   0x.... 0x....      BL       mbedtls_mpi_init
   1902          
   1903              MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
   \   0000005C   0x003A             MOVS     R2,R7
   \   0000005E   0x0021             MOVS     R1,R4
   \   00000060   0xA81C             ADD      R0,SP,#+112
   \   00000062   0x.... 0x....      BL       mbedtls_mpi_gcd
   \   00000066   0x0006             MOVS     R6,R0
   \   00000068   0xD000             BEQ      .+4
   \   0000006A   0xE188             B        ??mbedtls_mpi_inv_mod_2
   1904          
   1905              if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
   \   0000006C   0x9503             STR      R5,[SP, #+12]
   \   0000006E   0x9507             STR      R5,[SP, #+28]
   \   00000070   0x9508             STR      R5,[SP, #+32]
   \   00000072   0xA803             ADD      R0,SP,#+12
   \   00000074   0x9009             STR      R0,[SP, #+36]
   \   00000076   0xA907             ADD      R1,SP,#+28
   \   00000078   0xA81C             ADD      R0,SP,#+112
   \   0000007A   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000007E   0x2800             CMP      R0,#+0
   \   00000080   0xD002             BEQ      ??mbedtls_mpi_inv_mod_3
   1906              {
   1907                  ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
   \   00000082   0x260D             MOVS     R6,#+13
   \   00000084   0x43F6             MVNS     R6,R6            ;; #-14
   1908                  goto cleanup;
   \   00000086   0xE17A             B        ??mbedtls_mpi_inv_mod_2
   1909              }
   1910          
   1911              MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
   \                     ??mbedtls_mpi_inv_mod_3: (+1)
   \   00000088   0x003A             MOVS     R2,R7
   \   0000008A   0x0021             MOVS     R1,R4
   \   0000008C   0xA819             ADD      R0,SP,#+100
   \   0000008E   0x.... 0x....      BL       mbedtls_mpi_mod_mpi
   \   00000092   0x0006             MOVS     R6,R0
   \   00000094   0xD000             BEQ      .+4
   \   00000096   0xE172             B        ??mbedtls_mpi_inv_mod_2
   1912              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
   \   00000098   0xA919             ADD      R1,SP,#+100
   \   0000009A   0xA813             ADD      R0,SP,#+76
   \   0000009C   0x.... 0x....      BL       mbedtls_mpi_copy
   \   000000A0   0x0006             MOVS     R6,R0
   \   000000A2   0xD000             BEQ      .+4
   \   000000A4   0xE16B             B        ??mbedtls_mpi_inv_mod_2
   1913              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
   \   000000A6   0x0039             MOVS     R1,R7
   \   000000A8   0xA816             ADD      R0,SP,#+88
   \   000000AA   0x.... 0x....      BL       mbedtls_mpi_copy
   \   000000AE   0x0006             MOVS     R6,R0
   \   000000B0   0xD000             BEQ      .+4
   \   000000B2   0xE164             B        ??mbedtls_mpi_inv_mod_2
   1914              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
   \   000000B4   0x0039             MOVS     R1,R7
   \   000000B6   0xA80A             ADD      R0,SP,#+40
   \   000000B8   0x.... 0x....      BL       mbedtls_mpi_copy
   \   000000BC   0x0006             MOVS     R6,R0
   \   000000BE   0xD000             BEQ      .+4
   \   000000C0   0xE15D             B        ??mbedtls_mpi_inv_mod_2
   1915          
   1916              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
   \   000000C2   0x2101             MOVS     R1,#+1
   \   000000C4   0xA810             ADD      R0,SP,#+64
   \   000000C6   0x.... 0x....      BL       mbedtls_mpi_grow
   \   000000CA   0x0006             MOVS     R6,R0
   \   000000CC   0xD107             BNE      ??mbedtls_mpi_inv_mod_4
   \   000000CE   0x9811             LDR      R0,[SP, #+68]
   \   000000D0   0x0081             LSLS     R1,R0,#+2
   \   000000D2   0x9812             LDR      R0,[SP, #+72]
   \   000000D4   0x.... 0x....      BL       __aeabi_memclr4
   \   000000D8   0x9812             LDR      R0,[SP, #+72]
   \   000000DA   0x6005             STR      R5,[R0, #+0]
   \   000000DC   0x9510             STR      R5,[SP, #+64]
   \                     ??mbedtls_mpi_inv_mod_4: (+1)
   \   000000DE   0x2E00             CMP      R6,#+0
   \   000000E0   0xD000             BEQ      .+4
   \   000000E2   0xE14C             B        ??mbedtls_mpi_inv_mod_2
   1917              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
   \   000000E4   0x2101             MOVS     R1,#+1
   \   000000E6   0xA80D             ADD      R0,SP,#+52
   \   000000E8   0x.... 0x....      BL       mbedtls_mpi_grow
   \   000000EC   0x0006             MOVS     R6,R0
   \   000000EE   0xD108             BNE      ??mbedtls_mpi_inv_mod_5
   \   000000F0   0x980E             LDR      R0,[SP, #+56]
   \   000000F2   0x0081             LSLS     R1,R0,#+2
   \   000000F4   0x980F             LDR      R0,[SP, #+60]
   \   000000F6   0x.... 0x....      BL       __aeabi_memclr4
   \   000000FA   0x2000             MOVS     R0,#+0
   \   000000FC   0x990F             LDR      R1,[SP, #+60]
   \   000000FE   0x6008             STR      R0,[R1, #+0]
   \   00000100   0x950D             STR      R5,[SP, #+52]
   \                     ??mbedtls_mpi_inv_mod_5: (+1)
   \   00000102   0x2E00             CMP      R6,#+0
   \   00000104   0xD000             BEQ      .+4
   \   00000106   0xE13A             B        ??mbedtls_mpi_inv_mod_2
   1918              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
   \   00000108   0x2101             MOVS     R1,#+1
   \   0000010A   0x4668             MOV      R0,SP
   \   0000010C   0x.... 0x....      BL       mbedtls_mpi_grow
   \   00000110   0x0006             MOVS     R6,R0
   \   00000112   0xD108             BNE      ??mbedtls_mpi_inv_mod_6
   \   00000114   0x9801             LDR      R0,[SP, #+4]
   \   00000116   0x0081             LSLS     R1,R0,#+2
   \   00000118   0x9802             LDR      R0,[SP, #+8]
   \   0000011A   0x.... 0x....      BL       __aeabi_memclr4
   \   0000011E   0x2000             MOVS     R0,#+0
   \   00000120   0x9902             LDR      R1,[SP, #+8]
   \   00000122   0x6008             STR      R0,[R1, #+0]
   \   00000124   0x9500             STR      R5,[SP, #+0]
   \                     ??mbedtls_mpi_inv_mod_6: (+1)
   \   00000126   0x2E00             CMP      R6,#+0
   \   00000128   0xD000             BEQ      .+4
   \   0000012A   0xE128             B        ??mbedtls_mpi_inv_mod_2
   1919              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
   \   0000012C   0x2101             MOVS     R1,#+1
   \   0000012E   0xA804             ADD      R0,SP,#+16
   \   00000130   0x.... 0x....      BL       mbedtls_mpi_grow
   \   00000134   0x0006             MOVS     R6,R0
   \   00000136   0xD107             BNE      ??mbedtls_mpi_inv_mod_7
   \   00000138   0x9805             LDR      R0,[SP, #+20]
   \   0000013A   0x0081             LSLS     R1,R0,#+2
   \   0000013C   0x9806             LDR      R0,[SP, #+24]
   \   0000013E   0x.... 0x....      BL       __aeabi_memclr4
   \   00000142   0x9806             LDR      R0,[SP, #+24]
   \   00000144   0x6005             STR      R5,[R0, #+0]
   \   00000146   0x9504             STR      R5,[SP, #+16]
   \                     ??mbedtls_mpi_inv_mod_7: (+1)
   \   00000148   0x2E00             CMP      R6,#+0
   \   0000014A   0xD000             BEQ      .+4
   \   0000014C   0xE117             B        ??mbedtls_mpi_inv_mod_2
   1920          
   1921              do
   1922              {
   1923                  while( ( TU.p[0] & 1 ) == 0 )
   \                     ??mbedtls_mpi_inv_mod_8: (+1)
   \   0000014E   0x9815             LDR      R0,[SP, #+84]
   \   00000150   0x6800             LDR      R0,[R0, #+0]
   \   00000152   0x4028             ANDS     R0,R0,R5
   \   00000154   0xD000             BEQ      .+4
   \   00000156   0xE089             B        ??mbedtls_mpi_inv_mod_9
   1924                  {
   1925                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
   \   00000158   0x2101             MOVS     R1,#+1
   \   0000015A   0xA813             ADD      R0,SP,#+76
   \   0000015C   0x.... 0x....      BL       mbedtls_mpi_shift_r
   \   00000160   0x0006             MOVS     R6,R0
   \   00000162   0xD000             BEQ      .+4
   \   00000164   0xE10B             B        ??mbedtls_mpi_inv_mod_2
   1926          
   1927                      if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
   \   00000166   0x9812             LDR      R0,[SP, #+72]
   \   00000168   0x6800             LDR      R0,[R0, #+0]
   \   0000016A   0x4028             ANDS     R0,R0,R5
   \   0000016C   0xD103             BNE      ??mbedtls_mpi_inv_mod_10
   \   0000016E   0x980F             LDR      R0,[SP, #+60]
   \   00000170   0x6800             LDR      R0,[R0, #+0]
   \   00000172   0x4028             ANDS     R0,R0,R5
   \   00000174   0xD00F             BEQ      ??mbedtls_mpi_inv_mod_11
   1928                      {
   1929                          MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
   \                     ??mbedtls_mpi_inv_mod_10: (+1)
   \   00000176   0xAA16             ADD      R2,SP,#+88
   \   00000178   0xA910             ADD      R1,SP,#+64
   \   0000017A   0xA810             ADD      R0,SP,#+64
   \   0000017C   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   00000180   0x0006             MOVS     R6,R0
   \   00000182   0xD000             BEQ      .+4
   \   00000184   0xE0FB             B        ??mbedtls_mpi_inv_mod_2
   1930                          MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
   \   00000186   0xAA19             ADD      R2,SP,#+100
   \   00000188   0xA90D             ADD      R1,SP,#+52
   \   0000018A   0xA80D             ADD      R0,SP,#+52
   \   0000018C   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   00000190   0x0006             MOVS     R6,R0
   \   00000192   0xD000             BEQ      .+4
   \   00000194   0xE0F3             B        ??mbedtls_mpi_inv_mod_2
   1931                      }
   1932          
   1933                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
   \                     ??mbedtls_mpi_inv_mod_11: (+1)
   \   00000196   0x2101             MOVS     R1,#+1
   \   00000198   0xA810             ADD      R0,SP,#+64
   \   0000019A   0x.... 0x....      BL       mbedtls_mpi_shift_r
   \   0000019E   0x0006             MOVS     R6,R0
   \   000001A0   0xD000             BEQ      .+4
   \   000001A2   0xE0EC             B        ??mbedtls_mpi_inv_mod_2
   1934                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
   \   000001A4   0x2101             MOVS     R1,#+1
   \   000001A6   0xA80D             ADD      R0,SP,#+52
   \   000001A8   0x.... 0x....      BL       mbedtls_mpi_shift_r
   \   000001AC   0x0006             MOVS     R6,R0
   \   000001AE   0xD000             BEQ      .+4
   \   000001B0   0xE0E5             B        ??mbedtls_mpi_inv_mod_2
   \   000001B2   0xE7CC             B        ??mbedtls_mpi_inv_mod_8
   1935                  }
   1936          
   1937                  while( ( TV.p[0] & 1 ) == 0 )
   1938                  {
   1939                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
   \                     ??mbedtls_mpi_inv_mod_12: (+1)
   \   000001B4   0x2101             MOVS     R1,#+1
   \   000001B6   0xA80A             ADD      R0,SP,#+40
   \   000001B8   0x.... 0x....      BL       mbedtls_mpi_grow
   \   000001BC   0x0006             MOVS     R6,R0
   \   000001BE   0xD107             BNE      ??mbedtls_mpi_inv_mod_13
   \   000001C0   0x980B             LDR      R0,[SP, #+44]
   \   000001C2   0x0081             LSLS     R1,R0,#+2
   \   000001C4   0x980C             LDR      R0,[SP, #+48]
   \   000001C6   0x.... 0x....      BL       __aeabi_memclr4
   \   000001CA   0x980C             LDR      R0,[SP, #+48]
   \   000001CC   0x6004             STR      R4,[R0, #+0]
   \   000001CE   0x950A             STR      R5,[SP, #+40]
   \                     ??mbedtls_mpi_inv_mod_13: (+1)
   \   000001D0   0x2E00             CMP      R6,#+0
   \   000001D2   0xD000             BEQ      .+4
   \   000001D4   0xE0D3             B        ??mbedtls_mpi_inv_mod_2
   1940          
   1941                      if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
   \                     ??mbedtls_mpi_inv_mod_14: (+1)
   \   000001D6   0x9802             LDR      R0,[SP, #+8]
   \   000001D8   0x6800             LDR      R0,[R0, #+0]
   \   000001DA   0x4028             ANDS     R0,R0,R5
   \   000001DC   0xD103             BNE      ??mbedtls_mpi_inv_mod_15
   \   000001DE   0x9806             LDR      R0,[SP, #+24]
   \   000001E0   0x6800             LDR      R0,[R0, #+0]
   \   000001E2   0x4028             ANDS     R0,R0,R5
   \   000001E4   0xD00F             BEQ      ??mbedtls_mpi_inv_mod_16
   1942                      {
   1943                          MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
   \                     ??mbedtls_mpi_inv_mod_15: (+1)
   \   000001E6   0xAA16             ADD      R2,SP,#+88
   \   000001E8   0x4669             MOV      R1,SP
   \   000001EA   0x4668             MOV      R0,SP
   \   000001EC   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   000001F0   0x0006             MOVS     R6,R0
   \   000001F2   0xD000             BEQ      .+4
   \   000001F4   0xE0C3             B        ??mbedtls_mpi_inv_mod_2
   1944                          MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
   \   000001F6   0xAA19             ADD      R2,SP,#+100
   \   000001F8   0xA904             ADD      R1,SP,#+16
   \   000001FA   0xA804             ADD      R0,SP,#+16
   \   000001FC   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   00000200   0x0006             MOVS     R6,R0
   \   00000202   0xD000             BEQ      .+4
   \   00000204   0xE0BB             B        ??mbedtls_mpi_inv_mod_2
   1945                      }
   1946          
   1947                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
   \                     ??mbedtls_mpi_inv_mod_16: (+1)
   \   00000206   0x2000             MOVS     R0,#+0
   \   00000208   0x9901             LDR      R1,[SP, #+4]
   \   0000020A   0x2900             CMP      R1,#+0
   \   0000020C   0xD00D             BEQ      ??mbedtls_mpi_inv_mod_17
   \   0000020E   0x9A02             LDR      R2,[SP, #+8]
   \   00000210   0x008B             LSLS     R3,R1,#+2
   \   00000212   0x18D2             ADDS     R2,R2,R3
   \   00000214   0x1F12             SUBS     R2,R2,#+4
   \                     ??mbedtls_mpi_inv_mod_18: (+1)
   \   00000216   0x6816             LDR      R6,[R2, #+0]
   \   00000218   0x07F3             LSLS     R3,R6,#+31
   \   0000021A   0x0876             LSRS     R6,R6,#+1
   \   0000021C   0x4330             ORRS     R0,R0,R6
   \   0000021E   0x6010             STR      R0,[R2, #+0]
   \   00000220   0x0018             MOVS     R0,R3
   \   00000222   0x1F12             SUBS     R2,R2,#+4
   \   00000224   0x1E49             SUBS     R1,R1,#+1
   \   00000226   0xD011             BEQ      ??mbedtls_mpi_inv_mod_19
   \   00000228   0xE7F5             B        ??mbedtls_mpi_inv_mod_18
   \                     ??mbedtls_mpi_inv_mod_17: (+1)
   \   0000022A   0x2101             MOVS     R1,#+1
   \   0000022C   0x4668             MOV      R0,SP
   \   0000022E   0x.... 0x....      BL       mbedtls_mpi_grow
   \   00000232   0x0006             MOVS     R6,R0
   \   00000234   0xD107             BNE      ??mbedtls_mpi_inv_mod_20
   \   00000236   0x9801             LDR      R0,[SP, #+4]
   \   00000238   0x0081             LSLS     R1,R0,#+2
   \   0000023A   0x9802             LDR      R0,[SP, #+8]
   \   0000023C   0x.... 0x....      BL       __aeabi_memclr4
   \   00000240   0x9802             LDR      R0,[SP, #+8]
   \   00000242   0x6004             STR      R4,[R0, #+0]
   \   00000244   0x9500             STR      R5,[SP, #+0]
   \                     ??mbedtls_mpi_inv_mod_20: (+1)
   \   00000246   0x2E00             CMP      R6,#+0
   \   00000248   0xD000             BEQ      .+4
   \   0000024A   0xE098             B        ??mbedtls_mpi_inv_mod_2
   1948                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
   \                     ??mbedtls_mpi_inv_mod_19: (+1)
   \   0000024C   0x9805             LDR      R0,[SP, #+20]
   \   0000024E   0x2800             CMP      R0,#+0
   \   00000250   0xD021             BEQ      ??mbedtls_mpi_inv_mod_21
   \   00000252   0x9906             LDR      R1,[SP, #+24]
   \   00000254   0x0082             LSLS     R2,R0,#+2
   \   00000256   0x1889             ADDS     R1,R1,R2
   \   00000258   0x1F09             SUBS     R1,R1,#+4
   \                     ??mbedtls_mpi_inv_mod_22: (+1)
   \   0000025A   0x680A             LDR      R2,[R1, #+0]
   \   0000025C   0x07D3             LSLS     R3,R2,#+31
   \   0000025E   0x0852             LSRS     R2,R2,#+1
   \   00000260   0x4314             ORRS     R4,R4,R2
   \   00000262   0x600C             STR      R4,[R1, #+0]
   \   00000264   0x001C             MOVS     R4,R3
   \   00000266   0x1F09             SUBS     R1,R1,#+4
   \   00000268   0x1E40             SUBS     R0,R0,#+1
   \   0000026A   0xD1F6             BNE      ??mbedtls_mpi_inv_mod_22
   \                     ??mbedtls_mpi_inv_mod_9: (+1)
   \   0000026C   0x9A0C             LDR      R2,[SP, #+48]
   \   0000026E   0x6810             LDR      R0,[R2, #+0]
   \   00000270   0x4028             ANDS     R0,R0,R5
   \   00000272   0xD121             BNE      ??mbedtls_mpi_inv_mod_23
   \   00000274   0x2400             MOVS     R4,#+0
   \   00000276   0x990B             LDR      R1,[SP, #+44]
   \   00000278   0x2900             CMP      R1,#+0
   \   0000027A   0xD09B             BEQ      ??mbedtls_mpi_inv_mod_12
   \   0000027C   0x008B             LSLS     R3,R1,#+2
   \   0000027E   0x18D2             ADDS     R2,R2,R3
   \   00000280   0x1F12             SUBS     R2,R2,#+4
   \                     ??mbedtls_mpi_inv_mod_24: (+1)
   \   00000282   0x6816             LDR      R6,[R2, #+0]
   \   00000284   0x07F3             LSLS     R3,R6,#+31
   \   00000286   0x0876             LSRS     R6,R6,#+1
   \   00000288   0x4330             ORRS     R0,R0,R6
   \   0000028A   0x6010             STR      R0,[R2, #+0]
   \   0000028C   0x0018             MOVS     R0,R3
   \   0000028E   0x1F12             SUBS     R2,R2,#+4
   \   00000290   0x1E49             SUBS     R1,R1,#+1
   \   00000292   0xD0A0             BEQ      ??mbedtls_mpi_inv_mod_14
   \   00000294   0xE7F5             B        ??mbedtls_mpi_inv_mod_24
   \                     ??mbedtls_mpi_inv_mod_21: (+1)
   \   00000296   0x2101             MOVS     R1,#+1
   \   00000298   0xA804             ADD      R0,SP,#+16
   \   0000029A   0x.... 0x....      BL       mbedtls_mpi_grow
   \   0000029E   0x0006             MOVS     R6,R0
   \   000002A0   0xD107             BNE      ??mbedtls_mpi_inv_mod_25
   \   000002A2   0x9805             LDR      R0,[SP, #+20]
   \   000002A4   0x0081             LSLS     R1,R0,#+2
   \   000002A6   0x9806             LDR      R0,[SP, #+24]
   \   000002A8   0x.... 0x....      BL       __aeabi_memclr4
   \   000002AC   0x9806             LDR      R0,[SP, #+24]
   \   000002AE   0x6004             STR      R4,[R0, #+0]
   \   000002B0   0x9504             STR      R5,[SP, #+16]
   1949                  }
   \                     ??mbedtls_mpi_inv_mod_25: (+1)
   \   000002B2   0x2E00             CMP      R6,#+0
   \   000002B4   0xD163             BNE      ??mbedtls_mpi_inv_mod_2
   \   000002B6   0xE7D9             B        ??mbedtls_mpi_inv_mod_9
   1950          
   1951                  if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
   \                     ??mbedtls_mpi_inv_mod_23: (+1)
   \   000002B8   0xA90A             ADD      R1,SP,#+40
   \   000002BA   0xA813             ADD      R0,SP,#+76
   \   000002BC   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   000002C0   0x2800             CMP      R0,#+0
   \   000002C2   0xD415             BMI      ??mbedtls_mpi_inv_mod_26
   1952                  {
   1953                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
   \   000002C4   0xAA0A             ADD      R2,SP,#+40
   \   000002C6   0xA913             ADD      R1,SP,#+76
   \   000002C8   0xA813             ADD      R0,SP,#+76
   \   000002CA   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   000002CE   0x0006             MOVS     R6,R0
   \   000002D0   0xD155             BNE      ??mbedtls_mpi_inv_mod_2
   1954                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
   \   000002D2   0x466A             MOV      R2,SP
   \   000002D4   0xA910             ADD      R1,SP,#+64
   \   000002D6   0xA810             ADD      R0,SP,#+64
   \   000002D8   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   000002DC   0x0006             MOVS     R6,R0
   \   000002DE   0xD14E             BNE      ??mbedtls_mpi_inv_mod_2
   1955                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
   \   000002E0   0xAA04             ADD      R2,SP,#+16
   \   000002E2   0xA90D             ADD      R1,SP,#+52
   \   000002E4   0xA80D             ADD      R0,SP,#+52
   \   000002E6   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   000002EA   0x0006             MOVS     R6,R0
   \   000002EC   0xD147             BNE      ??mbedtls_mpi_inv_mod_2
   \   000002EE   0xE014             B        ??mbedtls_mpi_inv_mod_27
   1956                  }
   1957                  else
   1958                  {
   1959                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
   \                     ??mbedtls_mpi_inv_mod_26: (+1)
   \   000002F0   0xAA13             ADD      R2,SP,#+76
   \   000002F2   0xA90A             ADD      R1,SP,#+40
   \   000002F4   0xA80A             ADD      R0,SP,#+40
   \   000002F6   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   000002FA   0x0006             MOVS     R6,R0
   \   000002FC   0xD13F             BNE      ??mbedtls_mpi_inv_mod_2
   1960                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
   \   000002FE   0xAA10             ADD      R2,SP,#+64
   \   00000300   0x4669             MOV      R1,SP
   \   00000302   0x4668             MOV      R0,SP
   \   00000304   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   00000308   0x0006             MOVS     R6,R0
   \   0000030A   0xD138             BNE      ??mbedtls_mpi_inv_mod_2
   1961                      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
   \   0000030C   0xAA0D             ADD      R2,SP,#+52
   \   0000030E   0xA904             ADD      R1,SP,#+16
   \   00000310   0xA804             ADD      R0,SP,#+16
   \   00000312   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   00000316   0x0006             MOVS     R6,R0
   \   00000318   0xD131             BNE      ??mbedtls_mpi_inv_mod_2
   1962                  }
   1963              }
   1964              while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
   \                     ??mbedtls_mpi_inv_mod_27: (+1)
   \   0000031A   0x2400             MOVS     R4,#+0
   \   0000031C   0x9403             STR      R4,[SP, #+12]
   \   0000031E   0x9507             STR      R5,[SP, #+28]
   \   00000320   0x9508             STR      R5,[SP, #+32]
   \   00000322   0xA803             ADD      R0,SP,#+12
   \   00000324   0x9009             STR      R0,[SP, #+36]
   \   00000326   0xA907             ADD      R1,SP,#+28
   \   00000328   0xA813             ADD      R0,SP,#+76
   \   0000032A   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000032E   0x2800             CMP      R0,#+0
   \   00000330   0xD000             BEQ      .+4
   \   00000332   0xE70C             B        ??mbedtls_mpi_inv_mod_8
   1965          
   1966              while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
   \                     ??mbedtls_mpi_inv_mod_28: (+1)
   \   00000334   0x9403             STR      R4,[SP, #+12]
   \   00000336   0x9507             STR      R5,[SP, #+28]
   \   00000338   0x9508             STR      R5,[SP, #+32]
   \   0000033A   0xA803             ADD      R0,SP,#+12
   \   0000033C   0x9009             STR      R0,[SP, #+36]
   \   0000033E   0xA907             ADD      R1,SP,#+28
   \   00000340   0x4668             MOV      R0,SP
   \   00000342   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000346   0x2800             CMP      R0,#+0
   \   00000348   0xD50E             BPL      ??mbedtls_mpi_inv_mod_29
   1967                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
   \   0000034A   0x003A             MOVS     R2,R7
   \   0000034C   0x4669             MOV      R1,SP
   \   0000034E   0x4668             MOV      R0,SP
   \   00000350   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   00000354   0x0006             MOVS     R6,R0
   \   00000356   0xD112             BNE      ??mbedtls_mpi_inv_mod_2
   \   00000358   0xE7EC             B        ??mbedtls_mpi_inv_mod_28
   1968          
   1969              while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
   1970                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
   \                     ??mbedtls_mpi_inv_mod_30: (+1)
   \   0000035A   0x003A             MOVS     R2,R7
   \   0000035C   0x4669             MOV      R1,SP
   \   0000035E   0x4668             MOV      R0,SP
   \   00000360   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   00000364   0x0006             MOVS     R6,R0
   \   00000366   0xD10A             BNE      ??mbedtls_mpi_inv_mod_2
   \                     ??mbedtls_mpi_inv_mod_29: (+1)
   \   00000368   0x0039             MOVS     R1,R7
   \   0000036A   0x4668             MOV      R0,SP
   \   0000036C   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000370   0x2800             CMP      R0,#+0
   \   00000372   0xD5F2             BPL      ??mbedtls_mpi_inv_mod_30
   1971          
   1972              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
   \   00000374   0x4669             MOV      R1,SP
   \   00000376   0x9820             LDR      R0,[SP, #+128]
   \   00000378   0x.... 0x....      BL       mbedtls_mpi_copy
   \   0000037C   0x0006             MOVS     R6,R0
   1973          
   1974          cleanup:
   1975          
   1976              mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
   \                     ??mbedtls_mpi_inv_mod_2: (+1)
   \   0000037E   0xA819             ADD      R0,SP,#+100
   \   00000380   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000384   0xA813             ADD      R0,SP,#+76
   \   00000386   0x.... 0x....      BL       mbedtls_mpi_free
   \   0000038A   0xA810             ADD      R0,SP,#+64
   \   0000038C   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000390   0xA80D             ADD      R0,SP,#+52
   \   00000392   0x.... 0x....      BL       mbedtls_mpi_free
   1977              mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
   \   00000396   0xA81C             ADD      R0,SP,#+112
   \   00000398   0x.... 0x....      BL       mbedtls_mpi_free
   \   0000039C   0xA816             ADD      R0,SP,#+88
   \   0000039E   0x.... 0x....      BL       mbedtls_mpi_free
   \   000003A2   0xA80A             ADD      R0,SP,#+40
   \   000003A4   0x.... 0x....      BL       mbedtls_mpi_free
   1978              mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
   \   000003A8   0x4668             MOV      R0,SP
   \   000003AA   0x.... 0x....      BL       mbedtls_mpi_free
   \   000003AE   0xA804             ADD      R0,SP,#+16
   \   000003B0   0x.... 0x....      BL       mbedtls_mpi_free
   1979          
   1980              return( ret );
   \   000003B4   0x0030             MOVS     R0,R6
   \                     ??mbedtls_mpi_inv_mod_1: (+1)
   \   000003B6   0xB021             ADD      SP,SP,#+132
   \   000003B8   0xBDF0             POP      {R4-R7,PC}       ;; return
   1981          }
   1982          
   1983          #if defined(MBEDTLS_GENPRIME)
   1984          
   1985          static const int small_prime[] =
   1986          {
   1987                  3,    5,    7,   11,   13,   17,   19,   23,
   1988                 29,   31,   37,   41,   43,   47,   53,   59,
   1989                 61,   67,   71,   73,   79,   83,   89,   97,
   1990                101,  103,  107,  109,  113,  127,  131,  137,
   1991                139,  149,  151,  157,  163,  167,  173,  179,
   1992                181,  191,  193,  197,  199,  211,  223,  227,
   1993                229,  233,  239,  241,  251,  257,  263,  269,
   1994                271,  277,  281,  283,  293,  307,  311,  313,
   1995                317,  331,  337,  347,  349,  353,  359,  367,
   1996                373,  379,  383,  389,  397,  401,  409,  419,
   1997                421,  431,  433,  439,  443,  449,  457,  461,
   1998                463,  467,  479,  487,  491,  499,  503,  509,
   1999                521,  523,  541,  547,  557,  563,  569,  571,
   2000                577,  587,  593,  599,  601,  607,  613,  617,
   2001                619,  631,  641,  643,  647,  653,  659,  661,
   2002                673,  677,  683,  691,  701,  709,  719,  727,
   2003                733,  739,  743,  751,  757,  761,  769,  773,
   2004                787,  797,  809,  811,  821,  823,  827,  829,
   2005                839,  853,  857,  859,  863,  877,  881,  883,
   2006                887,  907,  911,  919,  929,  937,  941,  947,
   2007                953,  967,  971,  977,  983,  991,  997, -103
   2008          };
   2009          
   2010          /*
   2011           * Small divisors test (X must be positive)
   2012           *
   2013           * Return values:
   2014           * 0: no small factor (possible prime, more tests needed)
   2015           * 1: certain prime
   2016           * MBEDTLS_ERR_MPI_NOT_ACCEPTABLE: certain non-prime
   2017           * other negative: error
   2018           */
   2019          static int mpi_check_small_factors( const mbedtls_mpi *X )
   2020          {
   2021              int ret = 0;
   2022              size_t i;
   2023              mbedtls_mpi_uint r;
   2024          
   2025              if( ( X->p[0] & 1 ) == 0 )
   2026                  return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );
   2027          
   2028              for( i = 0; small_prime[i] > 0; i++ )
   2029              {
   2030                  if( mbedtls_mpi_cmp_int( X, small_prime[i] ) <= 0 )
   2031                      return( 1 );
   2032          
   2033                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_int( &r, X, small_prime[i] ) );
   2034          
   2035                  if( r == 0 )
   2036                      return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );
   2037              }
   2038          
   2039          cleanup:
   2040              return( ret );
   2041          }
   2042          
   2043          /*
   2044           * Miller-Rabin pseudo-primality test  (HAC 4.24)
   2045           */
   2046          static int mpi_miller_rabin( const mbedtls_mpi *X,
   2047                                       int (*f_rng)(void *, unsigned char *, size_t),
   2048                                       void *p_rng )
   2049          {
   2050              int ret, count;
   2051              size_t i, j, k, n, s;
   2052              mbedtls_mpi W, R, T, A, RR;
   2053          
   2054              mbedtls_mpi_init( &W ); mbedtls_mpi_init( &R ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &A );
   2055              mbedtls_mpi_init( &RR );
   2056          
   2057              /*
   2058               * W = |X| - 1
   2059               * R = W >> lsb( W )
   2060               */
   2061              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &W, X, 1 ) );
   2062              s = mbedtls_mpi_lsb( &W );
   2063              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R, &W ) );
   2064              MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &R, s ) );
   2065          
   2066              i = mbedtls_mpi_bitlen( X );
   2067              /*
   2068               * HAC, table 4.4
   2069               */
   2070              n = ( ( i >= 1300 ) ?  2 : ( i >=  850 ) ?  3 :
   2071                    ( i >=  650 ) ?  4 : ( i >=  350 ) ?  8 :
   2072                    ( i >=  250 ) ? 12 : ( i >=  150 ) ? 18 : 27 );
   2073          
   2074              for( i = 0; i < n; i++ )
   2075              {
   2076                  /*
   2077                   * pick a random A, 1 < A < |X| - 1
   2078                   */
   2079                  MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &A, X->n * ciL, f_rng, p_rng ) );
   2080          
   2081                  if( mbedtls_mpi_cmp_mpi( &A, &W ) >= 0 )
   2082                  {
   2083                      j = mbedtls_mpi_bitlen( &A ) - mbedtls_mpi_bitlen( &W );
   2084                      MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &A, j + 1 ) );
   2085                  }
   2086                  A.p[0] |= 3;
   2087          
   2088                  count = 0;
   2089                  do {
   2090                      MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &A, X->n * ciL, f_rng, p_rng ) );
   2091          
   2092                      j = mbedtls_mpi_bitlen( &A );
   2093                      k = mbedtls_mpi_bitlen( &W );
   2094                      if (j > k) {
   2095                          MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &A, j - k ) );
   2096                      }
   2097          
   2098                      if (count++ > 30) {
   2099                          return MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
   2100                      }
   2101          
   2102                  } while ( mbedtls_mpi_cmp_mpi( &A, &W ) >= 0 ||
   2103                            mbedtls_mpi_cmp_int( &A, 1 )  <= 0    );
   2104          
   2105                  /*
   2106                   * A = A^R mod |X|
   2107                   */
   2108                  MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &A, &A, &R, X, &RR ) );
   2109          
   2110                  if( mbedtls_mpi_cmp_mpi( &A, &W ) == 0 ||
   2111                      mbedtls_mpi_cmp_int( &A,  1 ) == 0 )
   2112                      continue;
   2113          
   2114                  j = 1;
   2115                  while( j < s && mbedtls_mpi_cmp_mpi( &A, &W ) != 0 )
   2116                  {
   2117                      /*
   2118                       * A = A * A mod |X|
   2119                       */
   2120                      MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &A, &A ) );
   2121                      MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &A, &T, X  ) );
   2122          
   2123                      if( mbedtls_mpi_cmp_int( &A, 1 ) == 0 )
   2124                          break;
   2125          
   2126                      j++;
   2127                  }
   2128          
   2129                  /*
   2130                   * not prime if A != |X| - 1 or A == 1
   2131                   */
   2132                  if( mbedtls_mpi_cmp_mpi( &A, &W ) != 0 ||
   2133                      mbedtls_mpi_cmp_int( &A,  1 ) == 0 )
   2134                  {
   2135                      ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
   2136                      break;
   2137                  }
   2138              }
   2139          
   2140          cleanup:
   2141              mbedtls_mpi_free( &W ); mbedtls_mpi_free( &R ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &A );
   2142              mbedtls_mpi_free( &RR );
   2143          
   2144              return( ret );
   2145          }
   2146          
   2147          /*
   2148           * Pseudo-primality test: small factors, then Miller-Rabin
   2149           */
   2150          int mbedtls_mpi_is_prime( const mbedtls_mpi *X,
   2151                            int (*f_rng)(void *, unsigned char *, size_t),
   2152                            void *p_rng )
   2153          {
   2154              int ret;
   2155              mbedtls_mpi XX;
   2156          
   2157              XX.s = 1;
   2158              XX.n = X->n;
   2159              XX.p = X->p;
   2160          
   2161              if( mbedtls_mpi_cmp_int( &XX, 0 ) == 0 ||
   2162                  mbedtls_mpi_cmp_int( &XX, 1 ) == 0 )
   2163                  return( MBEDTLS_ERR_MPI_NOT_ACCEPTABLE );
   2164          
   2165              if( mbedtls_mpi_cmp_int( &XX, 2 ) == 0 )
   2166                  return( 0 );
   2167          
   2168              if( ( ret = mpi_check_small_factors( &XX ) ) != 0 )
   2169              {
   2170                  if( ret == 1 )
   2171                      return( 0 );
   2172          
   2173                  return( ret );
   2174              }
   2175          
   2176              return( mpi_miller_rabin( &XX, f_rng, p_rng ) );
   2177          }
   2178          
   2179          /*
   2180           * Prime number generation
   2181           */
   2182          int mbedtls_mpi_gen_prime( mbedtls_mpi *X, size_t nbits, int dh_flag,
   2183                             int (*f_rng)(void *, unsigned char *, size_t),
   2184                             void *p_rng )
   2185          {
   2186              int ret;
   2187              size_t k, n;
   2188              mbedtls_mpi_uint r;
   2189              mbedtls_mpi Y;
   2190          
   2191              if( nbits < 3 || nbits > MBEDTLS_MPI_MAX_BITS )
   2192                  return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
   2193          
   2194              mbedtls_mpi_init( &Y );
   2195          
   2196              n = BITS_TO_LIMBS( nbits );
   2197          
   2198              MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( X, n * ciL, f_rng, p_rng ) );
   2199          
   2200              k = mbedtls_mpi_bitlen( X );
   2201              if( k > nbits ) MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( X, k - nbits + 1 ) );
   2202          
   2203              mbedtls_mpi_set_bit( X, nbits-1, 1 );
   2204          
   2205              X->p[0] |= 1;
   2206          
   2207              if( dh_flag == 0 )
   2208              {
   2209                  while( ( ret = mbedtls_mpi_is_prime( X, f_rng, p_rng ) ) != 0 )
   2210                  {
   2211                      if( ret != MBEDTLS_ERR_MPI_NOT_ACCEPTABLE )
   2212                          goto cleanup;
   2213          
   2214                      MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, X, 2 ) );
   2215                  }
   2216              }
   2217              else
   2218              {
   2219                  /*
   2220                   * An necessary condition for Y and X = 2Y + 1 to be prime
   2221                   * is X = 2 mod 3 (which is equivalent to Y = 2 mod 3).
   2222                   * Make sure it is satisfied, while keeping X = 3 mod 4
   2223                   */
   2224          
   2225                  X->p[0] |= 2;
   2226          
   2227                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_int( &r, X, 3 ) );
   2228                  if( r == 0 )
   2229                      MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, X, 8 ) );
   2230                  else if( r == 1 )
   2231                      MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, X, 4 ) );
   2232          
   2233                  /* Set Y = (X-1) / 2, which is X / 2 because X is odd */
   2234                  MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, X ) );
   2235                  MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, 1 ) );
   2236          
   2237                  while( 1 )
   2238                  {
   2239                      /*
   2240                       * First, check small factors for X and Y
   2241                       * before doing Miller-Rabin on any of them
   2242                       */
   2243                      if( ( ret = mpi_check_small_factors(  X         ) ) == 0 &&
   2244                          ( ret = mpi_check_small_factors( &Y         ) ) == 0 &&
   2245                          ( ret = mpi_miller_rabin(  X, f_rng, p_rng  ) ) == 0 &&
   2246                          ( ret = mpi_miller_rabin( &Y, f_rng, p_rng  ) ) == 0 )
   2247                      {
   2248                          break;
   2249                      }
   2250          
   2251                      if( ret != MBEDTLS_ERR_MPI_NOT_ACCEPTABLE )
   2252                          goto cleanup;
   2253          
   2254                      /*
   2255                       * Next candidates. We want to preserve Y = (X-1) / 2 and
   2256                       * Y = 1 mod 2 and Y = 2 mod 3 (eq X = 3 mod 4 and X = 2 mod 3)
   2257                       * so up Y by 6 and X by 12.
   2258                       */
   2259                      MBEDTLS_MPI_CHK( mbedtls_mpi_add_int(  X,  X, 12 ) );
   2260                      MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &Y, &Y, 6  ) );
   2261                  }
   2262              }
   2263          
   2264          cleanup:
   2265          
   2266              mbedtls_mpi_free( &Y );
   2267          
   2268              return( ret );
   2269          }
   2270          
   2271          #endif /* MBEDTLS_GENPRIME */
   2272          
   2273          #if defined(MBEDTLS_SELF_TEST)
   2274          
   2275          #define GCD_PAIR_COUNT  3
   2276          

   \                                 In section .rodata, align 4, keep-with-next
   2277          static const int gcd_pairs[GCD_PAIR_COUNT][3] =
   \                     gcd_pairs:
   \   00000000   0x000002B5         DC32 693, 609, 21, 1764, 868, 28, 768454923, 542167814, 1
   \              0x00000261   
   \              0x00000015   
   \              0x000006E4   
   \              0x00000364   
   \              0x0000001C   
   \              0x2DCDB10B   
   \              0x2050D306   
   \              0x00000001   
   2278          {
   2279              { 693, 609, 21 },
   2280              { 1764, 868, 28 },
   2281              { 768454923, 542167814, 1 }
   2282          };
   2283          
   2284          /*
   2285           * Checkup routine
   2286           */

   \                                 In section .text, align 4, keep-with-next
   2287          int mbedtls_mpi_self_test( int verbose )
   2288          {
   \                     mbedtls_mpi_self_test: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB097             SUB      SP,SP,#+92
   \   00000004   0x0007             MOVS     R7,R0
   2289              int ret, i;
   2290              mbedtls_mpi A, E, N, X, Y, U, V;
   2291          
   2292              mbedtls_mpi_init( &A ); mbedtls_mpi_init( &E ); mbedtls_mpi_init( &N ); mbedtls_mpi_init( &X );
   \   00000006   0xA80A             ADD      R0,SP,#+40
   \   00000008   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000000C   0xA813             ADD      R0,SP,#+76
   \   0000000E   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000012   0xA80D             ADD      R0,SP,#+52
   \   00000014   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000018   0xA804             ADD      R0,SP,#+16
   \   0000001A   0x.... 0x....      BL       mbedtls_mpi_init
   2293              mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &U ); mbedtls_mpi_init( &V );
   \   0000001E   0x2601             MOVS     R6,#+1
   \   00000020   0x9607             STR      R6,[SP, #+28]
   \   00000022   0x2400             MOVS     R4,#+0
   \   00000024   0x9408             STR      R4,[SP, #+32]
   \   00000026   0x9409             STR      R4,[SP, #+36]
   \   00000028   0x9601             STR      R6,[SP, #+4]
   \   0000002A   0x9402             STR      R4,[SP, #+8]
   \   0000002C   0x9403             STR      R4,[SP, #+12]
   \   0000002E   0x9610             STR      R6,[SP, #+64]
   \   00000030   0x9411             STR      R4,[SP, #+68]
   \   00000032   0x9412             STR      R4,[SP, #+72]
   2294          
   2295              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &A, 16,
   2296                  "EFE021C2645FD1DC586E69184AF4A31E" \
   2297                  "D5F53E93B5F123FA41680867BA110131" \
   2298                  "944FE7952E2517337780CB0DB80E61AA" \
   2299                  "E7C8DDC6C5C6AADEB34EB38A2F40D5E6" ) );
   \   00000034   0x....             ADR.N    R2,?_1
   \   00000036   0x2110             MOVS     R1,#+16
   \   00000038   0xA80A             ADD      R0,SP,#+40
   \   0000003A   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   0000003E   0x0005             MOVS     R5,R0
   \   00000040   0xD000             BEQ      .+4
   \   00000042   0xE0D7             B        ??mbedtls_mpi_self_test_0
   2300          
   2301              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &E, 16,
   2302                  "B2E7EFD37075B9F03FF989C7C5051C20" \
   2303                  "34D2A323810251127E7BF8625A4F49A5" \
   2304                  "F3E27F4DA8BD59C47D6DAABA4C8127BD" \
   2305                  "5B5C25763222FEFCCFC38B832366C29E" ) );
   \   00000044   0x....             ADR.N    R2,?_2
   \   00000046   0x2110             MOVS     R1,#+16
   \   00000048   0xA813             ADD      R0,SP,#+76
   \   0000004A   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   0000004E   0x0005             MOVS     R5,R0
   \   00000050   0xD000             BEQ      .+4
   \   00000052   0xE0CF             B        ??mbedtls_mpi_self_test_0
   2306          
   2307              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &N, 16,
   2308                  "0066A198186C18C10B2F5ED9B522752A" \
   2309                  "9830B69916E535C8F047518A889A43A5" \
   2310                  "94B6BED27A168D31D4A52F88925AA8F5" ) );
   \   00000054   0x....             LDR      R2,??DataTable23
   \   00000056   0x2110             MOVS     R1,#+16
   \   00000058   0xA80D             ADD      R0,SP,#+52
   \   0000005A   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   0000005E   0x0005             MOVS     R5,R0
   \   00000060   0xD000             BEQ      .+4
   \   00000062   0xE0C7             B        ??mbedtls_mpi_self_test_0
   2311          
   2312              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X, &A, &N ) );
   \   00000064   0xAA0D             ADD      R2,SP,#+52
   \   00000066   0xA90A             ADD      R1,SP,#+40
   \   00000068   0xA804             ADD      R0,SP,#+16
   \   0000006A   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000006E   0x0005             MOVS     R5,R0
   \   00000070   0xD000             BEQ      .+4
   \   00000072   0xE0BF             B        ??mbedtls_mpi_self_test_0
   2313          
   2314              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &U, 16,
   2315                  "602AB7ECA597A3D6B56FF9829A5E8B85" \
   2316                  "9E857EA95A03512E2BAE7391688D264A" \
   2317                  "A5663B0341DB9CCFD2C4C5F421FEC814" \
   2318                  "8001B72E848A38CAE1C65F78E56ABDEF" \
   2319                  "E12D3C039B8A02D6BE593F0BBBDA56F1" \
   2320                  "ECF677152EF804370C1A305CAF3B5BF1" \
   2321                  "30879B56C61DE584A0F53A2447A51E" ) );
   \   00000074   0x....             LDR      R2,??DataTable23_1
   \   00000076   0x2110             MOVS     R1,#+16
   \   00000078   0xA801             ADD      R0,SP,#+4
   \   0000007A   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   0000007E   0x0005             MOVS     R5,R0
   \   00000080   0xD000             BEQ      .+4
   \   00000082   0xE0B7             B        ??mbedtls_mpi_self_test_0
   2322          
   2323              if( verbose != 0 )
   \   00000084   0x2F00             CMP      R7,#+0
   \   00000086   0xD002             BEQ      ??mbedtls_mpi_self_test_1
   2324                  mbedtls_printf( "  MPI test #1 (mul_mpi): " );
   \   00000088   0x....             LDR      R0,??DataTable23_2
   \   0000008A   0x.... 0x....      BL       printf
   2325          
   2326              if( mbedtls_mpi_cmp_mpi( &X, &U ) != 0 )
   \                     ??mbedtls_mpi_self_test_1: (+1)
   \   0000008E   0xA901             ADD      R1,SP,#+4
   \   00000090   0xA804             ADD      R0,SP,#+16
   \   00000092   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD16C             BNE      ??mbedtls_mpi_self_test_2
   2327              {
   2328                  if( verbose != 0 )
   2329                      mbedtls_printf( "failed\n" );
   2330          
   2331                  ret = 1;
   2332                  goto cleanup;
   2333              }
   2334          
   2335              if( verbose != 0 )
   \   0000009A   0x2F00             CMP      R7,#+0
   \   0000009C   0xD002             BEQ      ??mbedtls_mpi_self_test_3
   2336                  mbedtls_printf( "passed\n" );
   \   0000009E   0x....             LDR      R0,??DataTable23_3
   \   000000A0   0x.... 0x....      BL       printf
   2337          
   2338              MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &X, &Y, &A, &N ) );
   \                     ??mbedtls_mpi_self_test_3: (+1)
   \   000000A4   0xAB0D             ADD      R3,SP,#+52
   \   000000A6   0xAA0A             ADD      R2,SP,#+40
   \   000000A8   0xA907             ADD      R1,SP,#+28
   \   000000AA   0xA804             ADD      R0,SP,#+16
   \   000000AC   0x.... 0x....      BL       mbedtls_mpi_div_mpi
   \   000000B0   0x0005             MOVS     R5,R0
   \   000000B2   0xD000             BEQ      .+4
   \   000000B4   0xE09E             B        ??mbedtls_mpi_self_test_0
   2339          
   2340              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &U, 16,
   2341                  "256567336059E52CAE22925474705F39A94" ) );
   \   000000B6   0x....             LDR      R2,??DataTable23_4
   \   000000B8   0x2110             MOVS     R1,#+16
   \   000000BA   0xA801             ADD      R0,SP,#+4
   \   000000BC   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   000000C0   0x0005             MOVS     R5,R0
   \   000000C2   0xD000             BEQ      .+4
   \   000000C4   0xE096             B        ??mbedtls_mpi_self_test_0
   2342          
   2343              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &V, 16,
   2344                  "6613F26162223DF488E9CD48CC132C7A" \
   2345                  "0AC93C701B001B092E4E5B9F73BCD27B" \
   2346                  "9EE50D0657C77F374E903CDFA4C642" ) );
   \   000000C6   0x....             LDR      R2,??DataTable23_5
   \   000000C8   0x2110             MOVS     R1,#+16
   \   000000CA   0xA810             ADD      R0,SP,#+64
   \   000000CC   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   000000D0   0x0005             MOVS     R5,R0
   \   000000D2   0xD000             BEQ      .+4
   \   000000D4   0xE08E             B        ??mbedtls_mpi_self_test_0
   2347          
   2348              if( verbose != 0 )
   \   000000D6   0x2F00             CMP      R7,#+0
   \   000000D8   0xD002             BEQ      ??mbedtls_mpi_self_test_4
   2349                  mbedtls_printf( "  MPI test #2 (div_mpi): " );
   \   000000DA   0x....             LDR      R0,??DataTable23_6
   \   000000DC   0x.... 0x....      BL       printf
   2350          
   2351              if( mbedtls_mpi_cmp_mpi( &X, &U ) != 0 ||
   2352                  mbedtls_mpi_cmp_mpi( &Y, &V ) != 0 )
   \                     ??mbedtls_mpi_self_test_4: (+1)
   \   000000E0   0xA901             ADD      R1,SP,#+4
   \   000000E2   0xA804             ADD      R0,SP,#+16
   \   000000E4   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   000000E8   0x2800             CMP      R0,#+0
   \   000000EA   0xD143             BNE      ??mbedtls_mpi_self_test_2
   \   000000EC   0xA910             ADD      R1,SP,#+64
   \   000000EE   0xA807             ADD      R0,SP,#+28
   \   000000F0   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   000000F4   0x2800             CMP      R0,#+0
   \   000000F6   0xD13D             BNE      ??mbedtls_mpi_self_test_2
   2353              {
   2354                  if( verbose != 0 )
   2355                      mbedtls_printf( "failed\n" );
   2356          
   2357                  ret = 1;
   2358                  goto cleanup;
   2359              }
   2360          
   2361              if( verbose != 0 )
   \   000000F8   0x2F00             CMP      R7,#+0
   \   000000FA   0xD002             BEQ      ??mbedtls_mpi_self_test_5
   2362                  mbedtls_printf( "passed\n" );
   \   000000FC   0x....             LDR      R0,??DataTable23_3
   \   000000FE   0x.... 0x....      BL       printf
   2363          
   2364              MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &X, &A, &E, &N, NULL ) );
   \                     ??mbedtls_mpi_self_test_5: (+1)
   \   00000102   0x9400             STR      R4,[SP, #+0]
   \   00000104   0xAB0D             ADD      R3,SP,#+52
   \   00000106   0xAA13             ADD      R2,SP,#+76
   \   00000108   0xA90A             ADD      R1,SP,#+40
   \   0000010A   0xA804             ADD      R0,SP,#+16
   \   0000010C   0x.... 0x....      BL       mbedtls_mpi_exp_mod
   \   00000110   0x0005             MOVS     R5,R0
   \   00000112   0xD16F             BNE      ??mbedtls_mpi_self_test_0
   2365          
   2366              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &U, 16,
   2367                  "36E139AEA55215609D2816998ED020BB" \
   2368                  "BD96C37890F65171D948E9BC7CBAA4D9" \
   2369                  "325D24D6A3C12710F10A09FA08AB87" ) );
   \   00000114   0x....             LDR      R2,??DataTable23_7
   \   00000116   0x2110             MOVS     R1,#+16
   \   00000118   0xA801             ADD      R0,SP,#+4
   \   0000011A   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   0000011E   0x0005             MOVS     R5,R0
   \   00000120   0xD168             BNE      ??mbedtls_mpi_self_test_0
   2370          
   2371              if( verbose != 0 )
   \   00000122   0x2F00             CMP      R7,#+0
   \   00000124   0xD002             BEQ      ??mbedtls_mpi_self_test_6
   2372                  mbedtls_printf( "  MPI test #3 (exp_mod): " );
   \   00000126   0x....             LDR      R0,??DataTable23_8
   \   00000128   0x.... 0x....      BL       printf
   2373          
   2374              if( mbedtls_mpi_cmp_mpi( &X, &U ) != 0 )
   \                     ??mbedtls_mpi_self_test_6: (+1)
   \   0000012C   0xA901             ADD      R1,SP,#+4
   \   0000012E   0xA804             ADD      R0,SP,#+16
   \   00000130   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000134   0x2800             CMP      R0,#+0
   \   00000136   0xD11D             BNE      ??mbedtls_mpi_self_test_2
   2375              {
   2376                  if( verbose != 0 )
   2377                      mbedtls_printf( "failed\n" );
   2378          
   2379                  ret = 1;
   2380                  goto cleanup;
   2381              }
   2382          
   2383              if( verbose != 0 )
   \   00000138   0x2F00             CMP      R7,#+0
   \   0000013A   0xD002             BEQ      ??mbedtls_mpi_self_test_7
   2384                  mbedtls_printf( "passed\n" );
   \   0000013C   0x....             LDR      R0,??DataTable23_3
   \   0000013E   0x.... 0x....      BL       printf
   2385          
   2386              MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &X, &A, &N ) );
   \                     ??mbedtls_mpi_self_test_7: (+1)
   \   00000142   0xAA0D             ADD      R2,SP,#+52
   \   00000144   0xA90A             ADD      R1,SP,#+40
   \   00000146   0xA804             ADD      R0,SP,#+16
   \   00000148   0x.... 0x....      BL       mbedtls_mpi_inv_mod
   \   0000014C   0x0005             MOVS     R5,R0
   \   0000014E   0xD151             BNE      ??mbedtls_mpi_self_test_0
   2387          
   2388              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &U, 16,
   2389                  "003A0AAEDD7E784FC07D8F9EC6E3BFD5" \
   2390                  "C3DBA76456363A10869622EAC2DD84EC" \
   2391                  "C5B8A74DAC4D09E03B5E0BE779F2DF61" ) );
   \   00000150   0x....             LDR      R2,??DataTable23_9
   \   00000152   0x2110             MOVS     R1,#+16
   \   00000154   0xA801             ADD      R0,SP,#+4
   \   00000156   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   0000015A   0x0005             MOVS     R5,R0
   \   0000015C   0xD14A             BNE      ??mbedtls_mpi_self_test_0
   2392          
   2393              if( verbose != 0 )
   \   0000015E   0x2F00             CMP      R7,#+0
   \   00000160   0xD002             BEQ      ??mbedtls_mpi_self_test_8
   2394                  mbedtls_printf( "  MPI test #4 (inv_mod): " );
   \   00000162   0x....             LDR      R0,??DataTable23_10
   \   00000164   0x.... 0x....      BL       printf
   2395          
   2396              if( mbedtls_mpi_cmp_mpi( &X, &U ) != 0 )
   \                     ??mbedtls_mpi_self_test_8: (+1)
   \   00000168   0xA901             ADD      R1,SP,#+4
   \   0000016A   0xA804             ADD      R0,SP,#+16
   \   0000016C   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000170   0x2800             CMP      R0,#+0
   \   00000172   0xD007             BEQ      ??mbedtls_mpi_self_test_9
   2397              {
   2398                  if( verbose != 0 )
   \                     ??mbedtls_mpi_self_test_2: (+1)
   \   00000174   0x2F00             CMP      R7,#+0
   \   00000176   0xD101             BNE      ??mbedtls_mpi_self_test_10
   \                     ??mbedtls_mpi_self_test_11: (+1)
   \   00000178   0x2501             MOVS     R5,#+1
   \   0000017A   0xE043             B        ??mbedtls_mpi_self_test_12
   2399                      mbedtls_printf( "failed\n" );
   \                     ??mbedtls_mpi_self_test_10: (+1)
   \   0000017C   0x....             ADR.N    R0,?_6
   \   0000017E   0x.... 0x....      BL       printf
   \   00000182   0xE028             B.N      ??mbedtls_mpi_self_test_13
   2400          
   2401                  ret = 1;
   2402                  goto cleanup;
   2403              }
   2404          
   2405              if( verbose != 0 )
   \                     ??mbedtls_mpi_self_test_9: (+1)
   \   00000184   0x2F00             CMP      R7,#+0
   \   00000186   0xD005             BEQ      ??mbedtls_mpi_self_test_14
   2406                  mbedtls_printf( "passed\n" );
   \   00000188   0x....             ADR.N    R0,?_7
   \   0000018A   0x.... 0x....      BL       printf
   2407          
   2408              if( verbose != 0 )
   2409                  mbedtls_printf( "  MPI test #5 (simple gcd): " );
   \   0000018E   0x....             LDR      R0,??DataTable23_11
   \   00000190   0x.... 0x....      BL       printf
   2410          
   2411              for( i = 0; i < GCD_PAIR_COUNT; i++ )
   \                     ??mbedtls_mpi_self_test_14: (+1)
   \   00000194   0x9400             STR      R4,[SP, #+0]
   \   00000196   0x....             LDR      R4,??DataTable23_12
   2412              {
   2413                  MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &X, gcd_pairs[i][0] ) );
   \                     ??mbedtls_mpi_self_test_15: (+1)
   \   00000198   0x6821             LDR      R1,[R4, #+0]
   \   0000019A   0xA804             ADD      R0,SP,#+16
   \   0000019C   0x.... 0x....      BL       mbedtls_mpi_lset
   \   000001A0   0x0005             MOVS     R5,R0
   \   000001A2   0xD127             BNE      ??mbedtls_mpi_self_test_0
   2414                  MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Y, gcd_pairs[i][1] ) );
   \   000001A4   0x6861             LDR      R1,[R4, #+4]
   \   000001A6   0xA807             ADD      R0,SP,#+28
   \   000001A8   0x.... 0x....      BL       mbedtls_mpi_lset
   \   000001AC   0x0005             MOVS     R5,R0
   \   000001AE   0xD121             BNE      ??mbedtls_mpi_self_test_0
   2415          
   2416                  MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &A, &X, &Y ) );
   \   000001B0   0xAA07             ADD      R2,SP,#+28
   \   000001B2   0xA904             ADD      R1,SP,#+16
   \   000001B4   0xA80A             ADD      R0,SP,#+40
   \   000001B6   0x.... 0x....      BL       mbedtls_mpi_gcd
   \   000001BA   0x0005             MOVS     R5,R0
   \   000001BC   0xD11A             BNE      ??mbedtls_mpi_self_test_0
   2417          
   2418                  if( mbedtls_mpi_cmp_int( &A, gcd_pairs[i][2] ) != 0 )
   \   000001BE   0x68A1             LDR      R1,[R4, #+8]
   \   000001C0   0xA80A             ADD      R0,SP,#+40
   \   000001C2   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   000001C6   0x2800             CMP      R0,#+0
   \   000001C8   0xD007             BEQ      ??mbedtls_mpi_self_test_16
   2419                  {
   2420                      if( verbose != 0 )
   \   000001CA   0x2F00             CMP      R7,#+0
   \   000001CC   0xD0D4             BEQ      ??mbedtls_mpi_self_test_11
   2421                          mbedtls_printf( "failed at %d\n", i );
   \   000001CE   0x9900             LDR      R1,[SP, #+0]
   \   000001D0   0x....             LDR      R0,??DataTable23_13
   \   000001D2   0x.... 0x....      BL       printf
   \                     ??mbedtls_mpi_self_test_13: (+1)
   \   000001D6   0x2501             MOVS     R5,#+1
   \   000001D8   0xE010             B        ??mbedtls_mpi_self_test_17
   2422          
   2423                      ret = 1;
   2424                      goto cleanup;
   2425                  }
   2426              }
   \                     ??mbedtls_mpi_self_test_16: (+1)
   \   000001DA   0x9800             LDR      R0,[SP, #+0]
   \   000001DC   0x1C40             ADDS     R0,R0,#+1
   \   000001DE   0x9000             STR      R0,[SP, #+0]
   \   000001E0   0x340C             ADDS     R4,R4,#+12
   \   000001E2   0x2803             CMP      R0,#+3
   \   000001E4   0xDBD8             BLT      ??mbedtls_mpi_self_test_15
   2427          
   2428              if( verbose != 0 )
   \   000001E6   0x2F00             CMP      R7,#+0
   \   000001E8   0xD00C             BEQ      ??mbedtls_mpi_self_test_12
   2429                  mbedtls_printf( "passed\n" );
   \   000001EA   0xBF00             Nop      
   \   000001EC   0x....             ADR.N    R0,?_7
   \   000001EE   0x.... 0x....      BL       printf
   \   000001F2   0xE007             B        ??mbedtls_mpi_self_test_12
   2430          
   2431          cleanup:
   2432          
   2433              if( ret != 0 && verbose != 0 )
   \                     ??mbedtls_mpi_self_test_0: (+1)
   \   000001F4   0x2D00             CMP      R5,#+0
   \   000001F6   0xD005             BEQ      ??mbedtls_mpi_self_test_12
   \   000001F8   0x2F00             CMP      R7,#+0
   \   000001FA   0xD003             BEQ      ??mbedtls_mpi_self_test_12
   2434                  mbedtls_printf( "Unexpected error, return code = %08X\n", ret );
   \                     ??mbedtls_mpi_self_test_17: (+1)
   \   000001FC   0x0029             MOVS     R1,R5
   \   000001FE   0x....             LDR      R0,??DataTable23_14
   \   00000200   0x.... 0x....      BL       printf
   2435          
   2436              mbedtls_mpi_free( &A ); mbedtls_mpi_free( &E ); mbedtls_mpi_free( &N ); mbedtls_mpi_free( &X );
   \                     ??mbedtls_mpi_self_test_12: (+1)
   \   00000204   0xA80A             ADD      R0,SP,#+40
   \   00000206   0x.... 0x....      BL       mbedtls_mpi_free
   \   0000020A   0xA813             ADD      R0,SP,#+76
   \   0000020C   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000210   0xA80D             ADD      R0,SP,#+52
   \   00000212   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000216   0xA804             ADD      R0,SP,#+16
   \   00000218   0x.... 0x....      BL       mbedtls_mpi_free
   2437              mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &U ); mbedtls_mpi_free( &V );
   \   0000021C   0xA807             ADD      R0,SP,#+28
   \   0000021E   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000222   0xA801             ADD      R0,SP,#+4
   \   00000224   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000228   0xA810             ADD      R0,SP,#+64
   \   0000022A   0x.... 0x....      BL       mbedtls_mpi_free
   2438          
   2439              if( verbose != 0 )
   \   0000022E   0x2F00             CMP      R7,#+0
   \   00000230   0xD002             BEQ      ??mbedtls_mpi_self_test_18
   2440                  mbedtls_printf( "\n" );
   \   00000232   0x....             ADR      R0,??DataTable23_15  ;; "\n"
   \   00000234   0x.... 0x....      BL       printf
   2441          
   2442              return( ret );
   \                     ??mbedtls_mpi_self_test_18: (+1)
   \   00000238   0x0028             MOVS     R0,R5
   \   0000023A   0xB017             ADD      SP,SP,#+92
   \   0000023C   0xBDF0             POP      {R4-R7,PC}       ;; return
   2443          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x00002711         DC32     0x2711

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x30 0x30          DC8 30H, 30H, 36H, 36H, 41H, 31H, 39H, 38H
   \              0x36 0x36    
   \              0x41 0x31    
   \              0x39 0x38    
   \   00000008   0x31 0x38          DC8 31H, 38H, 36H, 43H, 31H, 38H, 43H, 31H
   \              0x36 0x43    
   \              0x31 0x38    
   \              0x43 0x31    
   \   00000010   0x30 0x42          DC8 30H, 42H, 32H, 46H, 35H, 45H, 44H, 39H
   \              0x32 0x46    
   \              0x35 0x45    
   \              0x44 0x39    
   \   00000018   0x42 0x35          DC8 42H, 35H, 32H, 32H, 37H, 35H, 32H, 41H
   \              0x32 0x32    
   \              0x37 0x35    
   \              0x32 0x41    
   \   00000020   0x39 0x38          DC8 39H, 38H, 33H, 30H, 42H, 36H, 39H, 39H
   \              0x33 0x30    
   \              0x42 0x36    
   \              0x39 0x39    
   \   00000028   0x31 0x36          DC8 31H, 36H, 45H, 35H, 33H, 35H, 43H, 38H
   \              0x45 0x35    
   \              0x33 0x35    
   \              0x43 0x38    
   \   00000030   0x46 0x30          DC8 46H, 30H, 34H, 37H, 35H, 31H, 38H, 41H
   \              0x34 0x37    
   \              0x35 0x31    
   \              0x38 0x41    
   \   00000038   0x38 0x38          DC8 38H, 38H, 39H, 41H, 34H, 33H, 41H, 35H
   \              0x39 0x41    
   \              0x34 0x33    
   \              0x41 0x35    
   \   00000040   0x39 0x34          DC8 39H, 34H, 42H, 36H, 42H, 45H, 44H, 32H
   \              0x42 0x36    
   \              0x42 0x45    
   \              0x44 0x32    
   \   00000048   0x37 0x41          DC8 37H, 41H, 31H, 36H, 38H, 44H, 33H, 31H
   \              0x31 0x36    
   \              0x38 0x44    
   \              0x33 0x31    
   \   00000050   0x44 0x34          DC8 44H, 34H, 41H, 35H, 32H, 46H, 38H, 38H
   \              0x41 0x35    
   \              0x32 0x46    
   \              0x38 0x38    
   \   00000058   0x39 0x32          DC8 39H, 32H, 35H, 41H, 41H, 38H, 46H, 35H
   \              0x35 0x41    
   \              0x41 0x38    
   \              0x46 0x35    
   \   00000060   0x00               DC8 0
   \   00000061   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x30 0x31          DC8 "0123456789ABCDEF"
   \              0x32 0x33    
   \              0x34 0x35    
   \              0x36 0x37    
   \              0x38 0x39    
   \              0x41 0x42    
   \              0x43 0x44    
   \              0x45 0x46    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   0x00000644         DC32     0x644

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_1:
   \   00000000   0x0000064C         DC32     0x64c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_2:
   \   00000000   0xFFFFFC00         DC32     0xfffffc00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_3:
   \   00000000   0x00000401         DC32     0x401

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_1:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_2:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_3:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_4:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_5:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_6:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_7:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_8:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_9:
   \   00000000   0x........         DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_10:
   \   00000000   0x........         DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_11:
   \   00000000   0x........         DC32     ?_15

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_12:
   \   00000000   0x........         DC32     gcd_pairs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_13:
   \   00000000   0x........         DC32     ?_16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_14:
   \   00000000   0x........         DC32     ?_17

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_15:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x36 0x30          DC8 36H, 30H, 32H, 41H, 42H, 37H, 45H, 43H
   \              0x32 0x41    
   \              0x42 0x37    
   \              0x45 0x43    
   \   00000008   0x41 0x35          DC8 41H, 35H, 39H, 37H, 41H, 33H, 44H, 36H
   \              0x39 0x37    
   \              0x41 0x33    
   \              0x44 0x36    
   \   00000010   0x42 0x35          DC8 42H, 35H, 36H, 46H, 46H, 39H, 38H, 32H
   \              0x36 0x46    
   \              0x46 0x39    
   \              0x38 0x32    
   \   00000018   0x39 0x41          DC8 39H, 41H, 35H, 45H, 38H, 42H, 38H, 35H
   \              0x35 0x45    
   \              0x38 0x42    
   \              0x38 0x35    
   \   00000020   0x39 0x45          DC8 39H, 45H, 38H, 35H, 37H, 45H, 41H, 39H
   \              0x38 0x35    
   \              0x37 0x45    
   \              0x41 0x39    
   \   00000028   0x35 0x41          DC8 35H, 41H, 30H, 33H, 35H, 31H, 32H, 45H
   \              0x30 0x33    
   \              0x35 0x31    
   \              0x32 0x45    
   \   00000030   0x32 0x42          DC8 32H, 42H, 41H, 45H, 37H, 33H, 39H, 31H
   \              0x41 0x45    
   \              0x37 0x33    
   \              0x39 0x31    
   \   00000038   0x36 0x38          DC8 36H, 38H, 38H, 44H, 32H, 36H, 34H, 41H
   \              0x38 0x44    
   \              0x32 0x36    
   \              0x34 0x41    
   \   00000040   0x41 0x35          DC8 41H, 35H, 36H, 36H, 33H, 42H, 30H, 33H
   \              0x36 0x36    
   \              0x33 0x42    
   \              0x30 0x33    
   \   00000048   0x34 0x31          DC8 34H, 31H, 44H, 42H, 39H, 43H, 43H, 46H
   \              0x44 0x42    
   \              0x39 0x43    
   \              0x43 0x46    
   \   00000050   0x44 0x32          DC8 44H, 32H, 43H, 34H, 43H, 35H, 46H, 34H
   \              0x43 0x34    
   \              0x43 0x35    
   \              0x46 0x34    
   \   00000058   0x32 0x31          DC8 32H, 31H, 46H, 45H, 43H, 38H, 31H, 34H
   \              0x46 0x45    
   \              0x43 0x38    
   \              0x31 0x34    
   \   00000060   0x38 0x30          DC8 38H, 30H, 30H, 31H, 42H, 37H, 32H, 45H
   \              0x30 0x31    
   \              0x42 0x37    
   \              0x32 0x45    
   \   00000068   0x38 0x34          DC8 38H, 34H, 38H, 41H, 33H, 38H, 43H, 41H
   \              0x38 0x41    
   \              0x33 0x38    
   \              0x43 0x41    
   \   00000070   0x45 0x31          DC8 45H, 31H, 43H, 36H, 35H, 46H, 37H, 38H
   \              0x43 0x36    
   \              0x35 0x46    
   \              0x37 0x38    
   \   00000078   0x45 0x35          DC8 45H, 35H, 36H, 41H, 42H, 44H, 45H, 46H
   \              0x36 0x41    
   \              0x42 0x44    
   \              0x45 0x46    
   \   00000080   0x45 0x31          DC8 45H, 31H, 32H, 44H, 33H, 43H, 30H, 33H
   \              0x32 0x44    
   \              0x33 0x43    
   \              0x30 0x33    
   \   00000088   0x39 0x42          DC8 39H, 42H, 38H, 41H, 30H, 32H, 44H, 36H
   \              0x38 0x41    
   \              0x30 0x32    
   \              0x44 0x36    
   \   00000090   0x42 0x45          DC8 42H, 45H, 35H, 39H, 33H, 46H, 30H, 42H
   \              0x35 0x39    
   \              0x33 0x46    
   \              0x30 0x42    
   \   00000098   0x42 0x42          DC8 42H, 42H, 44H, 41H, 35H, 36H, 46H, 31H
   \              0x44 0x41    
   \              0x35 0x36    
   \              0x46 0x31    
   \   000000A0   0x45 0x43          DC8 45H, 43H, 46H, 36H, 37H, 37H, 31H, 35H
   \              0x46 0x36    
   \              0x37 0x37    
   \              0x31 0x35    
   \   000000A8   0x32 0x45          DC8 32H, 45H, 46H, 38H, 30H, 34H, 33H, 37H
   \              0x46 0x38    
   \              0x30 0x34    
   \              0x33 0x37    
   \   000000B0   0x30 0x43          DC8 30H, 43H, 31H, 41H, 33H, 30H, 35H, 43H
   \              0x31 0x41    
   \              0x33 0x30    
   \              0x35 0x43    
   \   000000B8   0x41 0x46          DC8 41H, 46H, 33H, 42H, 35H, 42H, 46H, 31H
   \              0x33 0x42    
   \              0x35 0x42    
   \              0x46 0x31    
   \   000000C0   0x33 0x30          DC8 33H, 30H, 38H, 37H, 39H, 42H, 35H, 36H
   \              0x38 0x37    
   \              0x39 0x42    
   \              0x35 0x36    
   \   000000C8   0x43 0x36          DC8 43H, 36H, 31H, 44H, 45H, 35H, 38H, 34H
   \              0x31 0x44    
   \              0x45 0x35    
   \              0x38 0x34    
   \   000000D0   0x41 0x30          DC8 41H, 30H, 46H, 35H, 33H, 41H, 32H, 34H
   \              0x46 0x35    
   \              0x33 0x41    
   \              0x32 0x34    
   \   000000D8   0x34 0x37          DC8 34H, 37H, 41H, 35H, 31H, 45H, 0
   \              0x41 0x35    
   \              0x31 0x45    
   \              0x00         
   \   000000DF   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x20 0x20          DC8 "  MPI test #1 (mul_mpi): "
   \              0x4D 0x50    
   \              0x49 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x20 0x23    
   \              0x31 0x20    
   \              0x28 0x6D    
   \              0x75 0x6C    
   \              0x5F 0x6D    
   \              0x70 0x69    
   \              0x29 0x3A    
   \              0x20 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x32 0x35          DC8 "256567336059E52CAE22925474705F39A94"
   \              0x36 0x35    
   \              0x36 0x37    
   \              0x33 0x33    
   \              0x36 0x30    
   \              0x35 0x39    
   \              0x45 0x35    
   \              0x32 0x43    
   \              0x41 0x45    
   \              0x32 0x32    
   \              0x39 0x32    
   \              0x35 0x34    
   \              0x37 0x34    
   \              0x37 0x30    
   \              0x35 0x46    
   \              0x33 0x39    
   \              0x41 0x39    
   \              0x34 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x36 0x36          DC8 36H, 36H, 31H, 33H, 46H, 32H, 36H, 31H
   \              0x31 0x33    
   \              0x46 0x32    
   \              0x36 0x31    
   \   00000008   0x36 0x32          DC8 36H, 32H, 32H, 32H, 33H, 44H, 46H, 34H
   \              0x32 0x32    
   \              0x33 0x44    
   \              0x46 0x34    
   \   00000010   0x38 0x38          DC8 38H, 38H, 45H, 39H, 43H, 44H, 34H, 38H
   \              0x45 0x39    
   \              0x43 0x44    
   \              0x34 0x38    
   \   00000018   0x43 0x43          DC8 43H, 43H, 31H, 33H, 32H, 43H, 37H, 41H
   \              0x31 0x33    
   \              0x32 0x43    
   \              0x37 0x41    
   \   00000020   0x30 0x41          DC8 30H, 41H, 43H, 39H, 33H, 43H, 37H, 30H
   \              0x43 0x39    
   \              0x33 0x43    
   \              0x37 0x30    
   \   00000028   0x31 0x42          DC8 31H, 42H, 30H, 30H, 31H, 42H, 30H, 39H
   \              0x30 0x30    
   \              0x31 0x42    
   \              0x30 0x39    
   \   00000030   0x32 0x45          DC8 32H, 45H, 34H, 45H, 35H, 42H, 39H, 46H
   \              0x34 0x45    
   \              0x35 0x42    
   \              0x39 0x46    
   \   00000038   0x37 0x33          DC8 37H, 33H, 42H, 43H, 44H, 32H, 37H, 42H
   \              0x42 0x43    
   \              0x44 0x32    
   \              0x37 0x42    
   \   00000040   0x39 0x45          DC8 39H, 45H, 45H, 35H, 30H, 44H, 30H, 36H
   \              0x45 0x35    
   \              0x30 0x44    
   \              0x30 0x36    
   \   00000048   0x35 0x37          DC8 35H, 37H, 43H, 37H, 37H, 46H, 33H, 37H
   \              0x43 0x37    
   \              0x37 0x46    
   \              0x33 0x37    
   \   00000050   0x34 0x45          DC8 34H, 45H, 39H, 30H, 33H, 43H, 44H, 46H
   \              0x39 0x30    
   \              0x33 0x43    
   \              0x44 0x46    
   \   00000058   0x41 0x34          DC8 41H, 34H, 43H, 36H, 34H, 32H, 0
   \              0x43 0x36    
   \              0x34 0x32    
   \              0x00         
   \   0000005F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x20 0x20          DC8 "  MPI test #2 (div_mpi): "
   \              0x4D 0x50    
   \              0x49 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x20 0x23    
   \              0x32 0x20    
   \              0x28 0x64    
   \              0x69 0x76    
   \              0x5F 0x6D    
   \              0x70 0x69    
   \              0x29 0x3A    
   \              0x20 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_11:
   \   00000000   0x33 0x36          DC8 33H, 36H, 45H, 31H, 33H, 39H, 41H, 45H
   \              0x45 0x31    
   \              0x33 0x39    
   \              0x41 0x45    
   \   00000008   0x41 0x35          DC8 41H, 35H, 35H, 32H, 31H, 35H, 36H, 30H
   \              0x35 0x32    
   \              0x31 0x35    
   \              0x36 0x30    
   \   00000010   0x39 0x44          DC8 39H, 44H, 32H, 38H, 31H, 36H, 39H, 39H
   \              0x32 0x38    
   \              0x31 0x36    
   \              0x39 0x39    
   \   00000018   0x38 0x45          DC8 38H, 45H, 44H, 30H, 32H, 30H, 42H, 42H
   \              0x44 0x30    
   \              0x32 0x30    
   \              0x42 0x42    
   \   00000020   0x42 0x44          DC8 42H, 44H, 39H, 36H, 43H, 33H, 37H, 38H
   \              0x39 0x36    
   \              0x43 0x33    
   \              0x37 0x38    
   \   00000028   0x39 0x30          DC8 39H, 30H, 46H, 36H, 35H, 31H, 37H, 31H
   \              0x46 0x36    
   \              0x35 0x31    
   \              0x37 0x31    
   \   00000030   0x44 0x39          DC8 44H, 39H, 34H, 38H, 45H, 39H, 42H, 43H
   \              0x34 0x38    
   \              0x45 0x39    
   \              0x42 0x43    
   \   00000038   0x37 0x43          DC8 37H, 43H, 42H, 41H, 41H, 34H, 44H, 39H
   \              0x42 0x41    
   \              0x41 0x34    
   \              0x44 0x39    
   \   00000040   0x33 0x32          DC8 33H, 32H, 35H, 44H, 32H, 34H, 44H, 36H
   \              0x35 0x44    
   \              0x32 0x34    
   \              0x44 0x36    
   \   00000048   0x41 0x33          DC8 41H, 33H, 43H, 31H, 32H, 37H, 31H, 30H
   \              0x43 0x31    
   \              0x32 0x37    
   \              0x31 0x30    
   \   00000050   0x46 0x31          DC8 46H, 31H, 30H, 41H, 30H, 39H, 46H, 41H
   \              0x30 0x41    
   \              0x30 0x39    
   \              0x46 0x41    
   \   00000058   0x30 0x38          DC8 30H, 38H, 41H, 42H, 38H, 37H, 0
   \              0x41 0x42    
   \              0x38 0x37    
   \              0x00         
   \   0000005F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_12:
   \   00000000   0x20 0x20          DC8 "  MPI test #3 (exp_mod): "
   \              0x4D 0x50    
   \              0x49 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x20 0x23    
   \              0x33 0x20    
   \              0x28 0x65    
   \              0x78 0x70    
   \              0x5F 0x6D    
   \              0x6F 0x64    
   \              0x29 0x3A    
   \              0x20 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_13:
   \   00000000   0x30 0x30          DC8 30H, 30H, 33H, 41H, 30H, 41H, 41H, 45H
   \              0x33 0x41    
   \              0x30 0x41    
   \              0x41 0x45    
   \   00000008   0x44 0x44          DC8 44H, 44H, 37H, 45H, 37H, 38H, 34H, 46H
   \              0x37 0x45    
   \              0x37 0x38    
   \              0x34 0x46    
   \   00000010   0x43 0x30          DC8 43H, 30H, 37H, 44H, 38H, 46H, 39H, 45H
   \              0x37 0x44    
   \              0x38 0x46    
   \              0x39 0x45    
   \   00000018   0x43 0x36          DC8 43H, 36H, 45H, 33H, 42H, 46H, 44H, 35H
   \              0x45 0x33    
   \              0x42 0x46    
   \              0x44 0x35    
   \   00000020   0x43 0x33          DC8 43H, 33H, 44H, 42H, 41H, 37H, 36H, 34H
   \              0x44 0x42    
   \              0x41 0x37    
   \              0x36 0x34    
   \   00000028   0x35 0x36          DC8 35H, 36H, 33H, 36H, 33H, 41H, 31H, 30H
   \              0x33 0x36    
   \              0x33 0x41    
   \              0x31 0x30    
   \   00000030   0x38 0x36          DC8 38H, 36H, 39H, 36H, 32H, 32H, 45H, 41H
   \              0x39 0x36    
   \              0x32 0x32    
   \              0x45 0x41    
   \   00000038   0x43 0x32          DC8 43H, 32H, 44H, 44H, 38H, 34H, 45H, 43H
   \              0x44 0x44    
   \              0x38 0x34    
   \              0x45 0x43    
   \   00000040   0x43 0x35          DC8 43H, 35H, 42H, 38H, 41H, 37H, 34H, 44H
   \              0x42 0x38    
   \              0x41 0x37    
   \              0x34 0x44    
   \   00000048   0x41 0x43          DC8 41H, 43H, 34H, 44H, 30H, 39H, 45H, 30H
   \              0x34 0x44    
   \              0x30 0x39    
   \              0x45 0x30    
   \   00000050   0x33 0x42          DC8 33H, 42H, 35H, 45H, 30H, 42H, 45H, 37H
   \              0x35 0x45    
   \              0x30 0x42    
   \              0x45 0x37    
   \   00000058   0x37 0x39          DC8 37H, 39H, 46H, 32H, 44H, 46H, 36H, 31H
   \              0x46 0x32    
   \              0x44 0x46    
   \              0x36 0x31    
   \   00000060   0x00               DC8 0
   \   00000061   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_14:
   \   00000000   0x20 0x20          DC8 "  MPI test #4 (inv_mod): "
   \              0x4D 0x50    
   \              0x49 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x20 0x23    
   \              0x34 0x20    
   \              0x28 0x69    
   \              0x6E 0x76    
   \              0x5F 0x6D    
   \              0x6F 0x64    
   \              0x29 0x3A    
   \              0x20 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_15:
   \   00000000   0x20 0x20          DC8 "  MPI test #5 (simple gcd): "
   \              0x4D 0x50    
   \              0x49 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \              0x20 0x23    
   \              0x35 0x20    
   \              0x28 0x73    
   \              0x69 0x6D    
   \              0x70 0x6C    
   \              0x65 0x20    
   \              0x67 0x63    
   \              0x64 0x29    
   \              0x3A 0x20    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x45 0x46          DC8 45H, 46H, 45H, 30H, 32H, 31H, 43H, 32H
   \              0x45 0x30    
   \              0x32 0x31    
   \              0x43 0x32    
   \   00000008   0x36 0x34          DC8 36H, 34H, 35H, 46H, 44H, 31H, 44H, 43H
   \              0x35 0x46    
   \              0x44 0x31    
   \              0x44 0x43    
   \   00000010   0x35 0x38          DC8 35H, 38H, 36H, 45H, 36H, 39H, 31H, 38H
   \              0x36 0x45    
   \              0x36 0x39    
   \              0x31 0x38    
   \   00000018   0x34 0x41          DC8 34H, 41H, 46H, 34H, 41H, 33H, 31H, 45H
   \              0x46 0x34    
   \              0x41 0x33    
   \              0x31 0x45    
   \   00000020   0x44 0x35          DC8 44H, 35H, 46H, 35H, 33H, 45H, 39H, 33H
   \              0x46 0x35    
   \              0x33 0x45    
   \              0x39 0x33    
   \   00000028   0x42 0x35          DC8 42H, 35H, 46H, 31H, 32H, 33H, 46H, 41H
   \              0x46 0x31    
   \              0x32 0x33    
   \              0x46 0x41    
   \   00000030   0x34 0x31          DC8 34H, 31H, 36H, 38H, 30H, 38H, 36H, 37H
   \              0x36 0x38    
   \              0x30 0x38    
   \              0x36 0x37    
   \   00000038   0x42 0x41          DC8 42H, 41H, 31H, 31H, 30H, 31H, 33H, 31H
   \              0x31 0x31    
   \              0x30 0x31    
   \              0x33 0x31    
   \   00000040   0x39 0x34          DC8 39H, 34H, 34H, 46H, 45H, 37H, 39H, 35H
   \              0x34 0x46    
   \              0x45 0x37    
   \              0x39 0x35    
   \   00000048   0x32 0x45          DC8 32H, 45H, 32H, 35H, 31H, 37H, 33H, 33H
   \              0x32 0x35    
   \              0x31 0x37    
   \              0x33 0x33    
   \   00000050   0x37 0x37          DC8 37H, 37H, 38H, 30H, 43H, 42H, 30H, 44H
   \              0x38 0x30    
   \              0x43 0x42    
   \              0x30 0x44    
   \   00000058   0x42 0x38          DC8 42H, 38H, 30H, 45H, 36H, 31H, 41H, 41H
   \              0x30 0x45    
   \              0x36 0x31    
   \              0x41 0x41    
   \   00000060   0x45 0x37          DC8 45H, 37H, 43H, 38H, 44H, 44H, 43H, 36H
   \              0x43 0x38    
   \              0x44 0x44    
   \              0x43 0x36    
   \   00000068   0x43 0x35          DC8 43H, 35H, 43H, 36H, 41H, 41H, 44H, 45H
   \              0x43 0x36    
   \              0x41 0x41    
   \              0x44 0x45    
   \   00000070   0x42 0x33          DC8 42H, 33H, 34H, 45H, 42H, 33H, 38H, 41H
   \              0x34 0x45    
   \              0x42 0x33    
   \              0x38 0x41    
   \   00000078   0x32 0x46          DC8 32H, 46H, 34H, 30H, 44H, 35H, 45H, 36H
   \              0x34 0x30    
   \              0x44 0x35    
   \              0x45 0x36    
   \   00000080   0x00               DC8 0
   \   00000081   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x42 0x32          DC8 42H, 32H, 45H, 37H, 45H, 46H, 44H, 33H
   \              0x45 0x37    
   \              0x45 0x46    
   \              0x44 0x33    
   \   00000008   0x37 0x30          DC8 37H, 30H, 37H, 35H, 42H, 39H, 46H, 30H
   \              0x37 0x35    
   \              0x42 0x39    
   \              0x46 0x30    
   \   00000010   0x33 0x46          DC8 33H, 46H, 46H, 39H, 38H, 39H, 43H, 37H
   \              0x46 0x39    
   \              0x38 0x39    
   \              0x43 0x37    
   \   00000018   0x43 0x35          DC8 43H, 35H, 30H, 35H, 31H, 43H, 32H, 30H
   \              0x30 0x35    
   \              0x31 0x43    
   \              0x32 0x30    
   \   00000020   0x33 0x34          DC8 33H, 34H, 44H, 32H, 41H, 33H, 32H, 33H
   \              0x44 0x32    
   \              0x41 0x33    
   \              0x32 0x33    
   \   00000028   0x38 0x31          DC8 38H, 31H, 30H, 32H, 35H, 31H, 31H, 32H
   \              0x30 0x32    
   \              0x35 0x31    
   \              0x31 0x32    
   \   00000030   0x37 0x45          DC8 37H, 45H, 37H, 42H, 46H, 38H, 36H, 32H
   \              0x37 0x42    
   \              0x46 0x38    
   \              0x36 0x32    
   \   00000038   0x35 0x41          DC8 35H, 41H, 34H, 46H, 34H, 39H, 41H, 35H
   \              0x34 0x46    
   \              0x34 0x39    
   \              0x41 0x35    
   \   00000040   0x46 0x33          DC8 46H, 33H, 45H, 32H, 37H, 46H, 34H, 44H
   \              0x45 0x32    
   \              0x37 0x46    
   \              0x34 0x44    
   \   00000048   0x41 0x38          DC8 41H, 38H, 42H, 44H, 35H, 39H, 43H, 34H
   \              0x42 0x44    
   \              0x35 0x39    
   \              0x43 0x34    
   \   00000050   0x37 0x44          DC8 37H, 44H, 36H, 44H, 41H, 41H, 42H, 41H
   \              0x36 0x44    
   \              0x41 0x41    
   \              0x42 0x41    
   \   00000058   0x34 0x43          DC8 34H, 43H, 38H, 31H, 32H, 37H, 42H, 44H
   \              0x38 0x31    
   \              0x32 0x37    
   \              0x42 0x44    
   \   00000060   0x35 0x42          DC8 35H, 42H, 35H, 43H, 32H, 35H, 37H, 36H
   \              0x35 0x43    
   \              0x32 0x35    
   \              0x37 0x36    
   \   00000068   0x33 0x32          DC8 33H, 32H, 32H, 32H, 46H, 45H, 46H, 43H
   \              0x32 0x32    
   \              0x46 0x45    
   \              0x46 0x43    
   \   00000070   0x43 0x46          DC8 43H, 46H, 43H, 33H, 38H, 42H, 38H, 33H
   \              0x43 0x33    
   \              0x38 0x42    
   \              0x38 0x33    
   \   00000078   0x32 0x33          DC8 32H, 33H, 36H, 36H, 43H, 32H, 39H, 45H
   \              0x36 0x36    
   \              0x43 0x32    
   \              0x39 0x45    
   \   00000080   0x00               DC8 0
   \   00000081   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_16:
   \   00000000   0x66 0x61          DC8 "failed at %d\012"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x25 0x64    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_17:
   \   00000000   0x55 0x6E          DC8 "Unexpected error, return code = %08X\012"
   \              0x65 0x78    
   \              0x70 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x2C 0x20    
   \              0x72 0x65    
   \              0x74 0x75    
   \              0x72 0x6E    
   \              0x20 0x63    
   \              0x6F 0x64    
   \              0x65 0x20    
   \              0x3D 0x20    
   \              0x25 0x30    
   \              0x38 0x58    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_18:
   \   00000000   0x0A 0x00          DC8 "\012"

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x66 0x61          DC8 "failed\012"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x70 0x61          DC8 "passed\012"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x00    
   2444          
   2445          #endif /* MBEDTLS_SELF_TEST */
   2446          
   2447          #endif /* MBEDTLS_BIGNUM_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   mbedtls_mpi_add_abs
        24   -> mbedtls_mpi_copy
        24   -> mbedtls_mpi_grow
      24   mbedtls_mpi_add_int
        24   -> mbedtls_mpi_add_mpi
      24   mbedtls_mpi_add_mpi
        24   -> mbedtls_mpi_add_abs
        24   -> mbedtls_mpi_cmp_abs
        24   -> mbedtls_mpi_sub_abs
       0   mbedtls_mpi_bitlen
       8   mbedtls_mpi_cmp_abs
      24   mbedtls_mpi_cmp_int
        24   -> mbedtls_mpi_cmp_mpi
      16   mbedtls_mpi_cmp_mpi
      24   mbedtls_mpi_copy
        24   -> __aeabi_memclr4
        24   -> __aeabi_memcpy4
        24   -> mbedtls_mpi_free
        24   -> mbedtls_mpi_grow
      32   mbedtls_mpi_div_int
        32   -> mbedtls_mpi_div_mpi
     136   mbedtls_mpi_div_mpi
       136   -> __aeabi_memclr4
       136   -> mbedtls_mpi_add_mpi
       136   -> mbedtls_mpi_bitlen
       136   -> mbedtls_mpi_cmp_abs
       136   -> mbedtls_mpi_cmp_mpi
       136   -> mbedtls_mpi_copy
       136   -> mbedtls_mpi_free
       136   -> mbedtls_mpi_grow
       136   -> mbedtls_mpi_init
       136   -> mbedtls_mpi_mul_mpi
       136   -> mbedtls_mpi_shift_l
       136   -> mbedtls_mpi_shift_r
       136   -> mbedtls_mpi_sub_mpi
       136 __aeabi_uldivmod
    1632   mbedtls_mpi_exp_mod
      1632   -> __aeabi_memclr4
      1632   -> mbedtls_mpi_add_mpi
      1632   -> mbedtls_mpi_bitlen
      1632   -> mbedtls_mpi_cmp_mpi
      1632   -> mbedtls_mpi_copy
      1632   -> mbedtls_mpi_free
      1632   -> mbedtls_mpi_grow
      1632   -> mbedtls_mpi_init
      1632   -> mbedtls_mpi_mod_mpi
      1632   -> mbedtls_mpi_shift_l
      1632   -> mpi_montmul
      1632   -> mpi_montred
    1040   mbedtls_mpi_fill_random
      1040   -- Indirect call
      1040   -> mbedtls_mpi_read_binary
       8   mbedtls_mpi_free
         8   -> free
         8   -> mbedtls_mpi_zeroize
      72   mbedtls_mpi_gcd
        72   -> mbedtls_mpi_cmp_mpi
        72   -> mbedtls_mpi_copy
        72   -> mbedtls_mpi_free
        72   -> mbedtls_mpi_init
        72   -> mbedtls_mpi_lsb
        72   -> mbedtls_mpi_shift_l
        72   -> mbedtls_mpi_shift_r
        72   -> mbedtls_mpi_sub_abs
       0   mbedtls_mpi_get_bit
      16   mbedtls_mpi_grow
        16   -> __aeabi_memcpy
        16   -> calloc
        16   -> free
        16   -> mbedtls_mpi_zeroize
       0   mbedtls_mpi_init
     152   mbedtls_mpi_inv_mod
       152   -> __aeabi_memclr4
       152   -> mbedtls_mpi_add_mpi
       152   -> mbedtls_mpi_cmp_mpi
       152   -> mbedtls_mpi_copy
       152   -> mbedtls_mpi_free
       152   -> mbedtls_mpi_gcd
       152   -> mbedtls_mpi_grow
       152   -> mbedtls_mpi_init
       152   -> mbedtls_mpi_mod_mpi
       152   -> mbedtls_mpi_shift_r
       152   -> mbedtls_mpi_sub_mpi
      16   mbedtls_mpi_lsb
      16   mbedtls_mpi_lset
        16   -> __aeabi_memclr4
        16   -> mbedtls_mpi_grow
      36   mbedtls_mpi_mod_int
        36 __aeabi_uidiv
      48   mbedtls_mpi_mod_mpi
        48   -> mbedtls_mpi_add_mpi
        48   -> mbedtls_mpi_cmp_mpi
        48   -> mbedtls_mpi_div_mpi
        48   -> mbedtls_mpi_sub_mpi
      24   mbedtls_mpi_mul_int
        24   -> mbedtls_mpi_mul_mpi
      56   mbedtls_mpi_mul_mpi
        56   -> __aeabi_memclr4
        56   -> mbedtls_mpi_copy
        56   -> mbedtls_mpi_free
        56   -> mbedtls_mpi_grow
        56   -> mbedtls_mpi_init
        56   -> mpi_mul_hlp
      32   mbedtls_mpi_read_binary
        32   -> __aeabi_memclr4
        32   -> mbedtls_mpi_grow
      64   mbedtls_mpi_read_string
        64   -> __aeabi_memclr4
        64   -> mbedtls_mpi_add_int
        64   -> mbedtls_mpi_free
        64   -> mbedtls_mpi_grow
        64   -> mbedtls_mpi_init
        64   -> mbedtls_mpi_mul_mpi
        64   -> mbedtls_mpi_sub_int
        64   -> strlen
      32   mbedtls_mpi_safe_cond_assign
        32   -> mbedtls_mpi_grow
      32   mbedtls_mpi_safe_cond_swap
        32   -> mbedtls_mpi_grow
     112   mbedtls_mpi_self_test
       112   -> mbedtls_mpi_cmp_int
       112   -> mbedtls_mpi_cmp_mpi
       112   -> mbedtls_mpi_div_mpi
       112   -> mbedtls_mpi_exp_mod
       112   -> mbedtls_mpi_free
       112   -> mbedtls_mpi_gcd
       112   -> mbedtls_mpi_init
       112   -> mbedtls_mpi_inv_mod
       112   -> mbedtls_mpi_lset
       112   -> mbedtls_mpi_mul_mpi
       112   -> mbedtls_mpi_read_string
       112   -> printf
      24   mbedtls_mpi_set_bit
        24   -> mbedtls_mpi_grow
      32   mbedtls_mpi_shift_l
        32   -> mbedtls_mpi_bitlen
        32   -> mbedtls_mpi_grow
      32   mbedtls_mpi_shift_r
        32   -> __aeabi_memclr4
        32   -> mbedtls_mpi_grow
      16   mbedtls_mpi_shrink
        16   -> __aeabi_memcpy
        16   -> calloc
        16   -> free
        16   -> mbedtls_mpi_grow
        16   -> mbedtls_mpi_zeroize
       8   mbedtls_mpi_size
         8   -> mbedtls_mpi_bitlen
      32   mbedtls_mpi_sub_abs
        32   -> mbedtls_mpi_cmp_abs
        32   -> mbedtls_mpi_copy
        32   -> mbedtls_mpi_free
        32   -> mbedtls_mpi_init
        32   -> mpi_sub_hlp
      24   mbedtls_mpi_sub_int
        24   -> mbedtls_mpi_sub_mpi
      24   mbedtls_mpi_sub_mpi
        24   -> mbedtls_mpi_add_abs
        24   -> mbedtls_mpi_cmp_abs
        24   -> mbedtls_mpi_sub_abs
      20   mbedtls_mpi_swap
      24   mbedtls_mpi_write_binary
        24   -> __aeabi_memclr
        24   -> mbedtls_mpi_bitlen
      56   mbedtls_mpi_write_string
        56   -> mbedtls_mpi_bitlen
        56   -> mbedtls_mpi_copy
        56   -> mbedtls_mpi_free
        56   -> mbedtls_mpi_init
        56   -> mpi_write_hlp
       8   mbedtls_mpi_zeroize
         8   -> __aeabi_memclr
      56   mpi_montmul
        56   -> __aeabi_memclr4
        56   -> __aeabi_memcpy4
        56   -> mbedtls_mpi_cmp_abs
        56   -> mpi_mul_hlp
        56   -> mpi_sub_hlp
      32   mpi_montred
        32   -> mpi_montmul
      24   mpi_mul_hlp
        24 __aeabi_lmul
      12   mpi_sub_hlp
      48   mpi_write_hlp
        48   -> mbedtls_mpi_cmp_mpi
        48   -> mbedtls_mpi_div_mpi
        48   -> mbedtls_mpi_mod_int
        48   -> mpi_write_hlp


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable20
       4  ??DataTable22
       4  ??DataTable22_1
       4  ??DataTable22_2
       4  ??DataTable22_3
       4  ??DataTable23
       4  ??DataTable23_1
       4  ??DataTable23_10
       4  ??DataTable23_11
       4  ??DataTable23_12
       4  ??DataTable23_13
       4  ??DataTable23_14
       4  ??DataTable23_15
       4  ??DataTable23_2
       4  ??DataTable23_3
       4  ??DataTable23_4
       4  ??DataTable23_5
       4  ??DataTable23_6
       4  ??DataTable23_7
       4  ??DataTable23_8
       4  ??DataTable23_9
      20  ?_0
     132  ?_1
      28  ?_10
      96  ?_11
      28  ?_12
     100  ?_13
      28  ?_14
      32  ?_15
      16  ?_16
      40  ?_17
       2  ?_18
     132  ?_2
     100  ?_3
     224  ?_4
      28  ?_5
       8  ?_6
       8  ?_7
      36  ?_8
      96  ?_9
      36  gcd_pairs
     170  mbedtls_mpi_add_abs
      42  mbedtls_mpi_add_int
      78  mbedtls_mpi_add_mpi
      64  mbedtls_mpi_bitlen
     110  mbedtls_mpi_cmp_abs
      42  mbedtls_mpi_cmp_int
     140  mbedtls_mpi_cmp_mpi
      92  mbedtls_mpi_copy
      42  mbedtls_mpi_div_int
     976  mbedtls_mpi_div_mpi
    1312  mbedtls_mpi_exp_mod
      54  mbedtls_mpi_fill_random
      36  mbedtls_mpi_free
     270  mbedtls_mpi_gcd
      32  mbedtls_mpi_get_bit
      74  mbedtls_mpi_grow
      16  mbedtls_mpi_init
     954  mbedtls_mpi_inv_mod
      52  mbedtls_mpi_lsb
      58  mbedtls_mpi_lset
     142  mbedtls_mpi_mod_int
     132  mbedtls_mpi_mod_mpi
      26  mbedtls_mpi_mul_int
     252  mbedtls_mpi_mul_mpi
     158  mbedtls_mpi_read_binary
     454  mbedtls_mpi_read_string
     128  mbedtls_mpi_safe_cond_assign
     140  mbedtls_mpi_safe_cond_swap
     574  mbedtls_mpi_self_test
      80  mbedtls_mpi_set_bit
     176  mbedtls_mpi_shift_l
     172  mbedtls_mpi_shift_r
     100  mbedtls_mpi_shrink
      12  mbedtls_mpi_size
     116  mbedtls_mpi_sub_abs
      42  mbedtls_mpi_sub_int
      80  mbedtls_mpi_sub_mpi
      30  mbedtls_mpi_swap
      74  mbedtls_mpi_write_binary
     286  mbedtls_mpi_write_string
      16  mbedtls_mpi_zeroize
     220  mpi_montmul
      32  mpi_montred
    1026  mpi_mul_hlp
      70  mpi_sub_hlp
     150  mpi_write_hlp

 
   890 bytes in section .rodata
 9 686 bytes in section .text
 
 9 686 bytes of CODE  memory
   890 bytes of CONST memory

Errors: none
Warnings: none
