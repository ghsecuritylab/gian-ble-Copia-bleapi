###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:22
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\mbedtls\src\asn1write.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\asn1write.d
#        -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\asn1write.s.txt
#        -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\asn1write.o
#        .\mbed-os\features\mbedtls\src\asn1write.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\asn1write.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\asn1write.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\mbedtls\src\asn1write.c
      1          /*
      2           * ASN.1 buffer writing functionality
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          #if !defined(MBEDTLS_CONFIG_FILE)
     23          #include "mbedtls/config.h"
     24          #else
     25          #include MBEDTLS_CONFIG_FILE
     26          #endif
     27          
     28          #if defined(MBEDTLS_ASN1_WRITE_C)
     29          
     30          #include "mbedtls/asn1write.h"
     31          
     32          #include <string.h>
     33          
     34          #if defined(MBEDTLS_PLATFORM_C)
     35          #include "mbedtls/platform.h"
     36          #else
     37          #include <stdlib.h>
     38          #define mbedtls_calloc    calloc
     39          #define mbedtls_free       free
     40          #endif
     41          

   \                                 In section .text, align 2, keep-with-next
     42          int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
     43          {
   \                     mbedtls_asn1_write_len: (+1)
   \   00000000   0xB410             PUSH     {R4}
     44              if( len < 0x80 )
   \   00000002   0x6803             LDR      R3,[R0, #+0]
   \   00000004   0x1A59             SUBS     R1,R3,R1
   \   00000006   0x2A80             CMP      R2,#+128
   \   00000008   0xD206             BCS      ??mbedtls_asn1_write_len_0
     45              {
     46                  if( *p - start < 1 )
   \   0000000A   0x2901             CMP      R1,#+1
   \   0000000C   0xDB36             BLT      ??mbedtls_asn1_write_len_1
     47                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
     48          
     49                  *--(*p) = (unsigned char) len;
   \   0000000E   0x1E5B             SUBS     R3,R3,#+1
   \   00000010   0x6003             STR      R3,[R0, #+0]
   \   00000012   0x701A             STRB     R2,[R3, #+0]
     50                  return( 1 );
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0xE044             B        ??mbedtls_asn1_write_len_2
     51              }
     52          
     53              if( len <= 0xFF )
   \                     ??mbedtls_asn1_write_len_0: (+1)
   \   00000018   0x2AFF             CMP      R2,#+255
   \   0000001A   0xD809             BHI      ??mbedtls_asn1_write_len_3
     54              {
     55                  if( *p - start < 2 )
   \   0000001C   0x2902             CMP      R1,#+2
   \   0000001E   0xDB2D             BLT      ??mbedtls_asn1_write_len_1
     56                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
     57          
     58                  *--(*p) = (unsigned char) len;
   \   00000020   0x1E5B             SUBS     R3,R3,#+1
   \   00000022   0x701A             STRB     R2,[R3, #+0]
     59                  *--(*p) = 0x81;
   \   00000024   0x1E5B             SUBS     R3,R3,#+1
   \   00000026   0x6003             STR      R3,[R0, #+0]
   \   00000028   0x2081             MOVS     R0,#+129
   \   0000002A   0x7018             STRB     R0,[R3, #+0]
     60                  return( 2 );
   \   0000002C   0x2002             MOVS     R0,#+2
   \   0000002E   0xE038             B        ??mbedtls_asn1_write_len_2
     61              }
     62          
     63              if( len <= 0xFFFF )
   \                     ??mbedtls_asn1_write_len_3: (+1)
   \   00000030   0x2480             MOVS     R4,#+128
   \   00000032   0x0264             LSLS     R4,R4,#+9        ;; #+65536
   \   00000034   0x42A2             CMP      R2,R4
   \   00000036   0xD20C             BCS      ??mbedtls_asn1_write_len_4
     64              {
     65                  if( *p - start < 3 )
   \   00000038   0x2903             CMP      R1,#+3
   \   0000003A   0xDB1F             BLT      ??mbedtls_asn1_write_len_1
     66                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
     67          
     68                  *--(*p) = ( len       ) & 0xFF;
   \   0000003C   0x1E5B             SUBS     R3,R3,#+1
   \   0000003E   0x701A             STRB     R2,[R3, #+0]
     69                  *--(*p) = ( len >>  8 ) & 0xFF;
   \   00000040   0x0A11             LSRS     R1,R2,#+8
   \   00000042   0x1E5A             SUBS     R2,R3,#+1
   \   00000044   0x7011             STRB     R1,[R2, #+0]
     70                  *--(*p) = 0x82;
   \   00000046   0x1E9B             SUBS     R3,R3,#+2
   \   00000048   0x6003             STR      R3,[R0, #+0]
   \   0000004A   0x2082             MOVS     R0,#+130
   \   0000004C   0x7018             STRB     R0,[R3, #+0]
     71                  return( 3 );
   \   0000004E   0x2003             MOVS     R0,#+3
   \   00000050   0xE027             B        ??mbedtls_asn1_write_len_2
     72              }
     73          
     74              if( len <= 0xFFFFFF )
   \                     ??mbedtls_asn1_write_len_4: (+1)
   \   00000052   0x0224             LSLS     R4,R4,#+8
   \   00000054   0x42A2             CMP      R2,R4
   \   00000056   0xD20F             BCS      ??mbedtls_asn1_write_len_5
     75              {
     76                  if( *p - start < 4 )
   \   00000058   0x2904             CMP      R1,#+4
   \   0000005A   0xDB0F             BLT      ??mbedtls_asn1_write_len_1
     77                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
     78          
     79                  *--(*p) = ( len       ) & 0xFF;
   \   0000005C   0x1E5B             SUBS     R3,R3,#+1
   \   0000005E   0x701A             STRB     R2,[R3, #+0]
     80                  *--(*p) = ( len >>  8 ) & 0xFF;
   \   00000060   0x0A11             LSRS     R1,R2,#+8
   \   00000062   0x1E5C             SUBS     R4,R3,#+1
   \   00000064   0x7021             STRB     R1,[R4, #+0]
     81                  *--(*p) = ( len >> 16 ) & 0xFF;
   \   00000066   0x0C11             LSRS     R1,R2,#+16
   \   00000068   0x1E9A             SUBS     R2,R3,#+2
   \   0000006A   0x7011             STRB     R1,[R2, #+0]
     82                  *--(*p) = 0x83;
   \   0000006C   0x1EDB             SUBS     R3,R3,#+3
   \   0000006E   0x6003             STR      R3,[R0, #+0]
   \   00000070   0x2083             MOVS     R0,#+131
   \   00000072   0x7018             STRB     R0,[R3, #+0]
     83                  return( 4 );
   \   00000074   0x2004             MOVS     R0,#+4
   \   00000076   0xE014             B        ??mbedtls_asn1_write_len_2
     84              }
     85          
     86              if( len <= 0xFFFFFFFF )
     87              {
     88                  if( *p - start < 5 )
   \                     ??mbedtls_asn1_write_len_5: (+1)
   \   00000078   0x2905             CMP      R1,#+5
   \   0000007A   0xDA02             BGE      ??mbedtls_asn1_write_len_6
     89                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   \                     ??mbedtls_asn1_write_len_1: (+1)
   \   0000007C   0x206B             MOVS     R0,#+107
   \   0000007E   0x43C0             MVNS     R0,R0            ;; #-108
   \   00000080   0xE00F             B        ??mbedtls_asn1_write_len_2
     90          
     91                  *--(*p) = ( len       ) & 0xFF;
   \                     ??mbedtls_asn1_write_len_6: (+1)
   \   00000082   0x1E5B             SUBS     R3,R3,#+1
   \   00000084   0x701A             STRB     R2,[R3, #+0]
     92                  *--(*p) = ( len >>  8 ) & 0xFF;
   \   00000086   0x0A11             LSRS     R1,R2,#+8
   \   00000088   0x1E5C             SUBS     R4,R3,#+1
   \   0000008A   0x7021             STRB     R1,[R4, #+0]
     93                  *--(*p) = ( len >> 16 ) & 0xFF;
   \   0000008C   0x0C11             LSRS     R1,R2,#+16
   \   0000008E   0x1E9C             SUBS     R4,R3,#+2
   \   00000090   0x7021             STRB     R1,[R4, #+0]
     94                  *--(*p) = ( len >> 24 ) & 0xFF;
   \   00000092   0x0E11             LSRS     R1,R2,#+24
   \   00000094   0x1EDA             SUBS     R2,R3,#+3
   \   00000096   0x7011             STRB     R1,[R2, #+0]
     95                  *--(*p) = 0x84;
   \   00000098   0x1F1B             SUBS     R3,R3,#+4
   \   0000009A   0x6003             STR      R3,[R0, #+0]
   \   0000009C   0x2084             MOVS     R0,#+132
   \   0000009E   0x7018             STRB     R0,[R3, #+0]
     96                  return( 5 );
   \   000000A0   0x2005             MOVS     R0,#+5
   \                     ??mbedtls_asn1_write_len_2: (+1)
   \   000000A2   0xBC10             POP      {R4}
   \   000000A4   0x4770             BX       LR               ;; return
     97              }
     98          
     99              return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    100          }
    101          

   \                                 In section .text, align 2, keep-with-next
    102          int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
    103          {
    104              if( *p - start < 1 )
   \                     mbedtls_asn1_write_tag: (+1)
   \   00000000   0x6803             LDR      R3,[R0, #+0]
   \   00000002   0x1A59             SUBS     R1,R3,R1
   \   00000004   0x2901             CMP      R1,#+1
   \   00000006   0xDA02             BGE      ??mbedtls_asn1_write_tag_0
    105                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   \   00000008   0x206B             MOVS     R0,#+107
   \   0000000A   0x43C0             MVNS     R0,R0            ;; #-108
   \   0000000C   0x4770             BX       LR
    106          
    107              *--(*p) = tag;
   \                     ??mbedtls_asn1_write_tag_0: (+1)
   \   0000000E   0x1E5B             SUBS     R3,R3,#+1
   \   00000010   0x6003             STR      R3,[R0, #+0]
   \   00000012   0x701A             STRB     R2,[R3, #+0]
    108          
    109              return( 1 );
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x4770             BX       LR               ;; return
    110          }
    111          

   \                                 In section .text, align 2, keep-with-next
    112          int mbedtls_asn1_write_raw_buffer( unsigned char **p, unsigned char *start,
    113                                     const unsigned char *buf, size_t size )
    114          {
   \                     mbedtls_asn1_write_raw_buffer: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x000D             MOVS     R5,R1
   \   00000004   0x0011             MOVS     R1,R2
   \   00000006   0x001C             MOVS     R4,R3
    115              size_t len = 0;
    116          
    117              if( *p < start || (size_t)( *p - start ) < size )
   \   00000008   0x6802             LDR      R2,[R0, #+0]
   \   0000000A   0x42AA             CMP      R2,R5
   \   0000000C   0xD302             BCC      ??mbedtls_asn1_write_raw_buffer_0
   \   0000000E   0x1B53             SUBS     R3,R2,R5
   \   00000010   0x42A3             CMP      R3,R4
   \   00000012   0xD202             BCS      ??mbedtls_asn1_write_raw_buffer_1
    118                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   \                     ??mbedtls_asn1_write_raw_buffer_0: (+1)
   \   00000014   0x206B             MOVS     R0,#+107
   \   00000016   0x43C0             MVNS     R0,R0            ;; #-108
   \   00000018   0xBD32             POP      {R1,R4,R5,PC}
    119          
    120              len = size;
    121              (*p) -= len;
   \                     ??mbedtls_asn1_write_raw_buffer_1: (+1)
   \   0000001A   0x4263             RSBS     R3,R4,#+0
   \   0000001C   0x18D3             ADDS     R3,R2,R3
   \   0000001E   0x6003             STR      R3,[R0, #+0]
    122              memcpy( *p, buf, len );
   \   00000020   0x0022             MOVS     R2,R4
   \   00000022   0x0018             MOVS     R0,R3
   \   00000024   0x.... 0x....      BL       __aeabi_memcpy
    123          
    124              return( (int) len );
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    125          }
    126          
    127          #if defined(MBEDTLS_BIGNUM_C)

   \                                 In section .text, align 2, keep-with-next
    128          int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
    129          {
   \                     mbedtls_asn1_write_mpi: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x0017             MOVS     R7,R2
    130              int ret;
    131              size_t len = 0;
    132          
    133              // Write the MPI
    134              //
    135              len = mbedtls_mpi_size( X );
   \   00000008   0x0038             MOVS     R0,R7
   \   0000000A   0x.... 0x....      BL       mbedtls_mpi_size
   \   0000000E   0x0004             MOVS     R4,R0
    136          
    137              if( *p < start || (size_t)( *p - start ) < len )
   \   00000010   0x6828             LDR      R0,[R5, #+0]
   \   00000012   0x42B0             CMP      R0,R6
   \   00000014   0xD315             BCC      ??mbedtls_asn1_write_mpi_0
   \   00000016   0x1B81             SUBS     R1,R0,R6
   \   00000018   0x42A1             CMP      R1,R4
   \   0000001A   0xD312             BCC      ??mbedtls_asn1_write_mpi_0
    138                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
    139          
    140              (*p) -= len;
   \   0000001C   0x4261             RSBS     R1,R4,#+0
   \   0000001E   0x1841             ADDS     R1,R0,R1
   \   00000020   0x6029             STR      R1,[R5, #+0]
    141              MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
   \   00000022   0x0022             MOVS     R2,R4
   \   00000024   0x0038             MOVS     R0,R7
   \   00000026   0x.... 0x....      BL       mbedtls_mpi_write_binary
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD121             BNE      ??mbedtls_asn1_write_mpi_1
    142          
    143              // DER format assumes 2s complement for numbers, so the leftmost bit
    144              // should be 0 for positive numbers and 1 for negative numbers.
    145              //
    146              if( X->s ==1 && **p & 0x80 )
   \   0000002E   0x6838             LDR      R0,[R7, #+0]
   \   00000030   0x2801             CMP      R0,#+1
   \   00000032   0xD10E             BNE      ??mbedtls_asn1_write_mpi_2
   \   00000034   0x6828             LDR      R0,[R5, #+0]
   \   00000036   0x7801             LDRB     R1,[R0, #+0]
   \   00000038   0x0609             LSLS     R1,R1,#+24
   \   0000003A   0xD50A             BPL      ??mbedtls_asn1_write_mpi_2
    147              {
    148                  if( *p - start < 1 )
   \   0000003C   0x1B81             SUBS     R1,R0,R6
   \   0000003E   0x2901             CMP      R1,#+1
   \   00000040   0xDA02             BGE      ??mbedtls_asn1_write_mpi_3
    149                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   \                     ??mbedtls_asn1_write_mpi_0: (+1)
   \   00000042   0x206B             MOVS     R0,#+107
   \   00000044   0x43C0             MVNS     R0,R0            ;; #-108
   \   00000046   0xBDF2             POP      {R1,R4-R7,PC}
    150          
    151                  *--(*p) = 0x00;
   \                     ??mbedtls_asn1_write_mpi_3: (+1)
   \   00000048   0x1E40             SUBS     R0,R0,#+1
   \   0000004A   0x6028             STR      R0,[R5, #+0]
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x7001             STRB     R1,[R0, #+0]
    152                  len += 1;
   \   00000050   0x1C64             ADDS     R4,R4,#+1
    153              }
    154          
    155              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   \                     ??mbedtls_asn1_write_mpi_2: (+1)
   \   00000052   0x0022             MOVS     R2,R4
   \   00000054   0x0031             MOVS     R1,R6
   \   00000056   0x0028             MOVS     R0,R5
   \   00000058   0x.... 0x....      BL       mbedtls_asn1_write_len
   \   0000005C   0x0007             MOVS     R7,R0
   \   0000005E   0xD408             BMI      ??mbedtls_asn1_write_mpi_1
    156              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
   \   00000060   0x2202             MOVS     R2,#+2
   \   00000062   0x0031             MOVS     R1,R6
   \   00000064   0x0028             MOVS     R0,R5
   \   00000066   0x.... 0x....      BL       mbedtls_asn1_write_tag
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xD401             BMI      ??mbedtls_asn1_write_mpi_1
    157          
    158              ret = (int) len;
   \   0000006E   0x19E1             ADDS     R1,R4,R7
   \   00000070   0x1808             ADDS     R0,R1,R0
    159          
    160          cleanup:
    161              return( ret );
   \                     ??mbedtls_asn1_write_mpi_1: (+1)
   \   00000072   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    162          }
    163          #endif /* MBEDTLS_BIGNUM_C */
    164          

   \                                 In section .text, align 2, keep-with-next
    165          int mbedtls_asn1_write_null( unsigned char **p, unsigned char *start )
    166          {
    167              int ret;
    168              size_t len = 0;
    169          
    170              // Write NULL
    171              //
    172              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, 0) );
   \                     mbedtls_asn1_write_null: (+1)
   \   00000000   0x6802             LDR      R2,[R0, #+0]
   \   00000002   0x1A53             SUBS     R3,R2,R1
   \   00000004   0x2B01             CMP      R3,#+1
   \   00000006   0xDB07             BLT      ??mbedtls_asn1_write_null_0
   \   00000008   0x1E52             SUBS     R2,R2,#+1
   \   0000000A   0x6002             STR      R2,[R0, #+0]
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0x7013             STRB     R3,[R2, #+0]
    173              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_NULL ) );
   \   00000010   0x6802             LDR      R2,[R0, #+0]
   \   00000012   0x1A51             SUBS     R1,R2,R1
   \   00000014   0x2901             CMP      R1,#+1
   \   00000016   0xDA02             BGE      ??mbedtls_asn1_write_null_1
   \                     ??mbedtls_asn1_write_null_0: (+1)
   \   00000018   0x206B             MOVS     R0,#+107
   \   0000001A   0x43C0             MVNS     R0,R0            ;; #-108
   \   0000001C   0x4770             BX       LR
   \                     ??mbedtls_asn1_write_null_1: (+1)
   \   0000001E   0x1E52             SUBS     R2,R2,#+1
   \   00000020   0x6002             STR      R2,[R0, #+0]
   \   00000022   0x2005             MOVS     R0,#+5
   \   00000024   0x7010             STRB     R0,[R2, #+0]
    174          
    175              return( (int) len );
   \   00000026   0x2002             MOVS     R0,#+2
   \   00000028   0x4770             BX       LR               ;; return
    176          }
    177          

   \                                 In section .text, align 2, keep-with-next
    178          int mbedtls_asn1_write_oid( unsigned char **p, unsigned char *start,
    179                              const char *oid, size_t oid_len )
    180          {
   \                     mbedtls_asn1_write_oid: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000F             MOVS     R7,R1
    181              int ret;
    182              size_t len = 0;
    183          
    184              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,
    185                                            (const unsigned char *) oid, oid_len ) );
   \   00000006   0x.... 0x....      BL       mbedtls_asn1_write_raw_buffer
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD410             BMI      ??mbedtls_asn1_write_oid_0
   \   0000000E   0x0006             MOVS     R6,R0
    186              MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_len( p, start, len ) );
   \   00000010   0x0032             MOVS     R2,R6
   \   00000012   0x0039             MOVS     R1,R7
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0x.... 0x....      BL       mbedtls_asn1_write_len
   \   0000001A   0x0004             MOVS     R4,R0
   \   0000001C   0xD408             BMI      ??mbedtls_asn1_write_oid_0
    187              MBEDTLS_ASN1_CHK_ADD( len , mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_OID ) );
   \   0000001E   0x2206             MOVS     R2,#+6
   \   00000020   0x0039             MOVS     R1,R7
   \   00000022   0x0028             MOVS     R0,R5
   \   00000024   0x.... 0x....      BL       mbedtls_asn1_write_tag
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD401             BMI      ??mbedtls_asn1_write_oid_0
    188          
    189              return( (int) len );
   \   0000002C   0x1931             ADDS     R1,R6,R4
   \   0000002E   0x1808             ADDS     R0,R1,R0
   \                     ??mbedtls_asn1_write_oid_0: (+1)
   \   00000030   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    190          }
    191          

   \                                 In section .text, align 2, keep-with-next
    192          int mbedtls_asn1_write_algorithm_identifier( unsigned char **p, unsigned char *start,
    193                                               const char *oid, size_t oid_len,
    194                                               size_t par_len )
    195          {
   \                     mbedtls_asn1_write_algorithm_identifier: (+1)
   \   00000000   0xB5F4             PUSH     {R2,R4-R7,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x001F             MOVS     R7,R3
   \   00000008   0x9C06             LDR      R4,[SP, #+24]
    196              int ret;
    197              size_t len = 0;
    198          
    199              if( par_len == 0 )
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD104             BNE      ??mbedtls_asn1_write_algorithm_identifier_0
    200                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_null( p, start ) );
   \   0000000E   0x.... 0x....      BL       mbedtls_asn1_write_null
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD41D             BMI      ??mbedtls_asn1_write_algorithm_identifier_1
   \   00000016   0x0004             MOVS     R4,R0
    201              else
    202                  len += par_len;
    203          
    204              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_oid( p, start, oid, oid_len ) );
   \                     ??mbedtls_asn1_write_algorithm_identifier_0: (+1)
   \   00000018   0x003B             MOVS     R3,R7
   \   0000001A   0x9A00             LDR      R2,[SP, #+0]
   \   0000001C   0x0031             MOVS     R1,R6
   \   0000001E   0x0028             MOVS     R0,R5
   \   00000020   0x.... 0x....      BL       mbedtls_asn1_write_oid
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD414             BMI      ??mbedtls_asn1_write_algorithm_identifier_1
   \   00000028   0x1824             ADDS     R4,R4,R0
    205          
    206              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   \   0000002A   0x0022             MOVS     R2,R4
   \   0000002C   0x0031             MOVS     R1,R6
   \   0000002E   0x0028             MOVS     R0,R5
   \   00000030   0x.... 0x....      BL       mbedtls_asn1_write_len
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD40C             BMI      ??mbedtls_asn1_write_algorithm_identifier_1
    207              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start,
    208                                                 MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) );
   \   00000038   0x6829             LDR      R1,[R5, #+0]
   \   0000003A   0x1B8A             SUBS     R2,R1,R6
   \   0000003C   0x2A01             CMP      R2,#+1
   \   0000003E   0xDA02             BGE      ??mbedtls_asn1_write_algorithm_identifier_2
   \   00000040   0x206B             MOVS     R0,#+107
   \   00000042   0x43C0             MVNS     R0,R0            ;; #-108
   \   00000044   0xBDF2             POP      {R1,R4-R7,PC}
   \                     ??mbedtls_asn1_write_algorithm_identifier_2: (+1)
   \   00000046   0x1E49             SUBS     R1,R1,#+1
   \   00000048   0x6029             STR      R1,[R5, #+0]
   \   0000004A   0x2230             MOVS     R2,#+48
   \   0000004C   0x700A             STRB     R2,[R1, #+0]
    209          
    210              return( (int) len );
   \   0000004E   0x1820             ADDS     R0,R4,R0
   \   00000050   0x1C40             ADDS     R0,R0,#+1
   \                     ??mbedtls_asn1_write_algorithm_identifier_1: (+1)
   \   00000052   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    211          }
    212          

   \                                 In section .text, align 2, keep-with-next
    213          int mbedtls_asn1_write_bool( unsigned char **p, unsigned char *start, int boolean )
    214          {
   \                     mbedtls_asn1_write_bool: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    215              int ret;
    216              size_t len = 0;
    217          
    218              if( *p - start < 1 )
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x1B43             SUBS     R3,R0,R5
   \   0000000A   0x2B01             CMP      R3,#+1
   \   0000000C   0xDB0F             BLT      ??mbedtls_asn1_write_bool_0
    219                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
    220          
    221              *--(*p) = (boolean) ? 255 : 0;
   \   0000000E   0x1E40             SUBS     R0,R0,#+1
   \   00000010   0x6020             STR      R0,[R4, #+0]
   \   00000012   0x2A00             CMP      R2,#+0
   \   00000014   0xD000             BEQ      ??mbedtls_asn1_write_bool_1
   \   00000016   0x22FF             MOVS     R2,#+255
   \                     ??mbedtls_asn1_write_bool_1: (+1)
   \   00000018   0x7002             STRB     R2,[R0, #+0]
    222              len++;
    223          
    224              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   \   0000001A   0x2201             MOVS     R2,#+1
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      BL       mbedtls_asn1_write_len
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD40B             BMI      ??mbedtls_asn1_write_bool_2
    225              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_BOOLEAN ) );
   \   00000026   0x6821             LDR      R1,[R4, #+0]
   \   00000028   0x1B4A             SUBS     R2,R1,R5
   \   0000002A   0x2A01             CMP      R2,#+1
   \   0000002C   0xDA02             BGE      ??mbedtls_asn1_write_bool_3
   \                     ??mbedtls_asn1_write_bool_0: (+1)
   \   0000002E   0x206B             MOVS     R0,#+107
   \   00000030   0x43C0             MVNS     R0,R0            ;; #-108
   \   00000032   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??mbedtls_asn1_write_bool_3: (+1)
   \   00000034   0x1E49             SUBS     R1,R1,#+1
   \   00000036   0x6021             STR      R1,[R4, #+0]
   \   00000038   0x2201             MOVS     R2,#+1
   \   0000003A   0x700A             STRB     R2,[R1, #+0]
    226          
    227              return( (int) len );
   \   0000003C   0x1C80             ADDS     R0,R0,#+2
   \                     ??mbedtls_asn1_write_bool_2: (+1)
   \   0000003E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    228          }
    229          

   \                                 In section .text, align 2, keep-with-next
    230          int mbedtls_asn1_write_int( unsigned char **p, unsigned char *start, int val )
    231          {
   \                     mbedtls_asn1_write_int: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    232              int ret;
    233              size_t len = 0;
    234          
    235              // TODO negative values and values larger than 128
    236              // DER format assumes 2s complement for numbers, so the leftmost bit
    237              // should be 0 for positive numbers and 1 for negative numbers.
    238              //
    239              if( *p - start < 1 )
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x1B83             SUBS     R3,R0,R6
   \   0000000A   0x2B01             CMP      R3,#+1
   \   0000000C   0xDB1A             BLT      ??mbedtls_asn1_write_int_0
    240                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
    241          
    242              len += 1;
   \   0000000E   0x2501             MOVS     R5,#+1
    243              *--(*p) = val;
   \   00000010   0x1E40             SUBS     R0,R0,#+1
   \   00000012   0x6020             STR      R0,[R4, #+0]
   \   00000014   0x7002             STRB     R2,[R0, #+0]
    244          
    245              if( val > 0 && **p & 0x80 )
   \   00000016   0x2A01             CMP      R2,#+1
   \   00000018   0xDB0A             BLT      ??mbedtls_asn1_write_int_1
   \   0000001A   0x7802             LDRB     R2,[R0, #+0]
   \   0000001C   0x0612             LSLS     R2,R2,#+24
   \   0000001E   0xD507             BPL      ??mbedtls_asn1_write_int_1
    246              {
    247                  if( *p - start < 1 )
   \   00000020   0x1B82             SUBS     R2,R0,R6
   \   00000022   0x2A01             CMP      R2,#+1
   \   00000024   0xDB0E             BLT      ??mbedtls_asn1_write_int_0
    248                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
    249          
    250                  *--(*p) = 0x00;
   \   00000026   0x1E40             SUBS     R0,R0,#+1
   \   00000028   0x6020             STR      R0,[R4, #+0]
   \   0000002A   0x2200             MOVS     R2,#+0
   \   0000002C   0x7002             STRB     R2,[R0, #+0]
    251                  len += 1;
   \   0000002E   0x2502             MOVS     R5,#+2
    252              }
    253          
    254              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   \                     ??mbedtls_asn1_write_int_1: (+1)
   \   00000030   0x002A             MOVS     R2,R5
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0x.... 0x....      BL       mbedtls_asn1_write_len
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD40C             BMI      ??mbedtls_asn1_write_int_2
    255              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
   \   0000003C   0x6821             LDR      R1,[R4, #+0]
   \   0000003E   0x1B8A             SUBS     R2,R1,R6
   \   00000040   0x2A01             CMP      R2,#+1
   \   00000042   0xDA02             BGE      ??mbedtls_asn1_write_int_3
   \                     ??mbedtls_asn1_write_int_0: (+1)
   \   00000044   0x206B             MOVS     R0,#+107
   \   00000046   0x43C0             MVNS     R0,R0            ;; #-108
   \   00000048   0xBD70             POP      {R4-R6,PC}
   \                     ??mbedtls_asn1_write_int_3: (+1)
   \   0000004A   0x1E49             SUBS     R1,R1,#+1
   \   0000004C   0x6021             STR      R1,[R4, #+0]
   \   0000004E   0x2202             MOVS     R2,#+2
   \   00000050   0x700A             STRB     R2,[R1, #+0]
    256          
    257              return( (int) len );
   \   00000052   0x1828             ADDS     R0,R5,R0
   \   00000054   0x1C40             ADDS     R0,R0,#+1
   \                     ??mbedtls_asn1_write_int_2: (+1)
   \   00000056   0xBD70             POP      {R4-R6,PC}       ;; return
    258          }
    259          

   \                                 In section .text, align 2, keep-with-next
    260          int mbedtls_asn1_write_printable_string( unsigned char **p, unsigned char *start,
    261                                           const char *text, size_t text_len )
    262          {
   \                     mbedtls_asn1_write_printable_string: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000E             MOVS     R6,R1
    263              int ret;
    264              size_t len = 0;
    265          
    266              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,
    267                            (const unsigned char *) text, text_len ) );
   \   00000006   0x.... 0x....      BL       mbedtls_asn1_write_raw_buffer
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD414             BMI      ??mbedtls_asn1_write_printable_string_0
   \   0000000E   0x0005             MOVS     R5,R0
    268          
    269              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   \   00000010   0x002A             MOVS     R2,R5
   \   00000012   0x0031             MOVS     R1,R6
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x.... 0x....      BL       mbedtls_asn1_write_len
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD40C             BMI      ??mbedtls_asn1_write_printable_string_0
    270              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_PRINTABLE_STRING ) );
   \   0000001E   0x6821             LDR      R1,[R4, #+0]
   \   00000020   0x1B8A             SUBS     R2,R1,R6
   \   00000022   0x2A01             CMP      R2,#+1
   \   00000024   0xDA02             BGE      ??mbedtls_asn1_write_printable_string_1
   \   00000026   0x206B             MOVS     R0,#+107
   \   00000028   0x43C0             MVNS     R0,R0            ;; #-108
   \   0000002A   0xBD70             POP      {R4-R6,PC}
   \                     ??mbedtls_asn1_write_printable_string_1: (+1)
   \   0000002C   0x1E49             SUBS     R1,R1,#+1
   \   0000002E   0x6021             STR      R1,[R4, #+0]
   \   00000030   0x2213             MOVS     R2,#+19
   \   00000032   0x700A             STRB     R2,[R1, #+0]
    271          
    272              return( (int) len );
   \   00000034   0x1828             ADDS     R0,R5,R0
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \                     ??mbedtls_asn1_write_printable_string_0: (+1)
   \   00000038   0xBD70             POP      {R4-R6,PC}       ;; return
    273          }
    274          

   \                                 In section .text, align 2, keep-with-next
    275          int mbedtls_asn1_write_ia5_string( unsigned char **p, unsigned char *start,
    276                                     const char *text, size_t text_len )
    277          {
   \                     mbedtls_asn1_write_ia5_string: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000E             MOVS     R6,R1
    278              int ret;
    279              size_t len = 0;
    280          
    281              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start,
    282                            (const unsigned char *) text, text_len ) );
   \   00000006   0x.... 0x....      BL       mbedtls_asn1_write_raw_buffer
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD414             BMI      ??mbedtls_asn1_write_ia5_string_0
   \   0000000E   0x0005             MOVS     R5,R0
    283          
    284              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   \   00000010   0x002A             MOVS     R2,R5
   \   00000012   0x0031             MOVS     R1,R6
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x.... 0x....      BL       mbedtls_asn1_write_len
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD40C             BMI      ??mbedtls_asn1_write_ia5_string_0
    285              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_IA5_STRING ) );
   \   0000001E   0x6821             LDR      R1,[R4, #+0]
   \   00000020   0x1B8A             SUBS     R2,R1,R6
   \   00000022   0x2A01             CMP      R2,#+1
   \   00000024   0xDA02             BGE      ??mbedtls_asn1_write_ia5_string_1
   \   00000026   0x206B             MOVS     R0,#+107
   \   00000028   0x43C0             MVNS     R0,R0            ;; #-108
   \   0000002A   0xBD70             POP      {R4-R6,PC}
   \                     ??mbedtls_asn1_write_ia5_string_1: (+1)
   \   0000002C   0x1E49             SUBS     R1,R1,#+1
   \   0000002E   0x6021             STR      R1,[R4, #+0]
   \   00000030   0x2216             MOVS     R2,#+22
   \   00000032   0x700A             STRB     R2,[R1, #+0]
    286          
    287              return( (int) len );
   \   00000034   0x1828             ADDS     R0,R5,R0
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \                     ??mbedtls_asn1_write_ia5_string_0: (+1)
   \   00000038   0xBD70             POP      {R4-R6,PC}       ;; return
    288          }
    289          

   \                                 In section .text, align 2, keep-with-next
    290          int mbedtls_asn1_write_bitstring( unsigned char **p, unsigned char *start,
    291                                    const unsigned char *buf, size_t bits )
    292          {
   \                     mbedtls_asn1_write_bitstring: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x0011             MOVS     R1,R2
   \   00000008   0x001D             MOVS     R5,R3
    293              int ret;
    294              size_t len = 0, size;
    295          
    296              size = ( bits / 8 ) + ( ( bits % 8 ) ? 1 : 0 );
   \   0000000A   0x0768             LSLS     R0,R5,#+29
   \   0000000C   0x0F40             LSRS     R0,R0,#+29
   \   0000000E   0x1E40             SUBS     R0,R0,#+1
   \   00000010   0x4180             SBCS     R0,R0,R0
   \   00000012   0x43C0             MVNS     R0,R0
   \   00000014   0x0FC0             LSRS     R0,R0,#+31
   \   00000016   0x08EA             LSRS     R2,R5,#+3
   \   00000018   0x1816             ADDS     R6,R2,R0
    297          
    298              // Calculate byte length
    299              //
    300              if( *p < start || (size_t)( *p - start ) < size + 1 )
   \   0000001A   0x6820             LDR      R0,[R4, #+0]
   \   0000001C   0x9B02             LDR      R3,[SP, #+8]
   \   0000001E   0x4298             CMP      R0,R3
   \   00000020   0xD31D             BCC      ??mbedtls_asn1_write_bitstring_0
   \   00000022   0x1C73             ADDS     R3,R6,#+1
   \   00000024   0x9F02             LDR      R7,[SP, #+8]
   \   00000026   0x1BC2             SUBS     R2,R0,R7
   \   00000028   0x429A             CMP      R2,R3
   \   0000002A   0xD318             BCC      ??mbedtls_asn1_write_bitstring_0
    301                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
    302          
    303              len = size + 1;
   \   0000002C   0x9300             STR      R3,[SP, #+0]
    304              (*p) -= size;
   \   0000002E   0x4272             RSBS     R2,R6,#+0
   \   00000030   0x1880             ADDS     R0,R0,R2
   \   00000032   0x6020             STR      R0,[R4, #+0]
    305              memcpy( *p, buf, size );
   \   00000034   0x0032             MOVS     R2,R6
   \   00000036   0x.... 0x....      BL       __aeabi_memcpy
    306          
    307              // Write unused bits
    308              //
    309              *--(*p) = (unsigned char) (size * 8 - bits);
   \   0000003A   0x6820             LDR      R0,[R4, #+0]
   \   0000003C   0x1E40             SUBS     R0,R0,#+1
   \   0000003E   0x6020             STR      R0,[R4, #+0]
   \   00000040   0x00F1             LSLS     R1,R6,#+3
   \   00000042   0x1B49             SUBS     R1,R1,R5
   \   00000044   0x7001             STRB     R1,[R0, #+0]
    310          
    311              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   \   00000046   0x9A00             LDR      R2,[SP, #+0]
   \   00000048   0x9902             LDR      R1,[SP, #+8]
   \   0000004A   0x0020             MOVS     R0,R4
   \   0000004C   0x.... 0x....      BL       mbedtls_asn1_write_len
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD40E             BMI      ??mbedtls_asn1_write_bitstring_1
    312              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_BIT_STRING ) );
   \   00000054   0x6821             LDR      R1,[R4, #+0]
   \   00000056   0x9A02             LDR      R2,[SP, #+8]
   \   00000058   0x1A8A             SUBS     R2,R1,R2
   \   0000005A   0x2A01             CMP      R2,#+1
   \   0000005C   0xDA02             BGE      ??mbedtls_asn1_write_bitstring_2
   \                     ??mbedtls_asn1_write_bitstring_0: (+1)
   \   0000005E   0x206B             MOVS     R0,#+107
   \   00000060   0x43C0             MVNS     R0,R0            ;; #-108
   \   00000062   0xE006             B        ??mbedtls_asn1_write_bitstring_1
   \                     ??mbedtls_asn1_write_bitstring_2: (+1)
   \   00000064   0x1E49             SUBS     R1,R1,#+1
   \   00000066   0x6021             STR      R1,[R4, #+0]
   \   00000068   0x2203             MOVS     R2,#+3
   \   0000006A   0x700A             STRB     R2,[R1, #+0]
    313          
    314              return( (int) len );
   \   0000006C   0x9900             LDR      R1,[SP, #+0]
   \   0000006E   0x1808             ADDS     R0,R1,R0
   \   00000070   0x1C40             ADDS     R0,R0,#+1
   \                     ??mbedtls_asn1_write_bitstring_1: (+1)
   \   00000072   0xB003             ADD      SP,SP,#+12
   \   00000074   0xBDF0             POP      {R4-R7,PC}       ;; return
    315          }
    316          

   \                                 In section .text, align 2, keep-with-next
    317          int mbedtls_asn1_write_octet_string( unsigned char **p, unsigned char *start,
    318                                       const unsigned char *buf, size_t size )
    319          {
   \                     mbedtls_asn1_write_octet_string: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000E             MOVS     R6,R1
    320              int ret;
    321              size_t len = 0;
    322          
    323              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_raw_buffer( p, start, buf, size ) );
   \   00000006   0x.... 0x....      BL       mbedtls_asn1_write_raw_buffer
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD414             BMI      ??mbedtls_asn1_write_octet_string_0
   \   0000000E   0x0005             MOVS     R5,R0
    324          
    325              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
   \   00000010   0x002A             MOVS     R2,R5
   \   00000012   0x0031             MOVS     R1,R6
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x.... 0x....      BL       mbedtls_asn1_write_len
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD40C             BMI      ??mbedtls_asn1_write_octet_string_0
    326              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_OCTET_STRING ) );
   \   0000001E   0x6821             LDR      R1,[R4, #+0]
   \   00000020   0x1B8A             SUBS     R2,R1,R6
   \   00000022   0x2A01             CMP      R2,#+1
   \   00000024   0xDA02             BGE      ??mbedtls_asn1_write_octet_string_1
   \   00000026   0x206B             MOVS     R0,#+107
   \   00000028   0x43C0             MVNS     R0,R0            ;; #-108
   \   0000002A   0xBD70             POP      {R4-R6,PC}
   \                     ??mbedtls_asn1_write_octet_string_1: (+1)
   \   0000002C   0x1E49             SUBS     R1,R1,#+1
   \   0000002E   0x6021             STR      R1,[R4, #+0]
   \   00000030   0x2204             MOVS     R2,#+4
   \   00000032   0x700A             STRB     R2,[R1, #+0]
    327          
    328              return( (int) len );
   \   00000034   0x1828             ADDS     R0,R5,R0
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \                     ??mbedtls_asn1_write_octet_string_0: (+1)
   \   00000038   0xBD70             POP      {R4-R6,PC}       ;; return
    329          }
    330          

   \                                 In section .text, align 2, keep-with-next
    331          mbedtls_asn1_named_data *mbedtls_asn1_store_named_data( mbedtls_asn1_named_data **head,
    332                                                  const char *oid, size_t oid_len,
    333                                                  const unsigned char *val,
    334                                                  size_t val_len )
    335          {
   \                     mbedtls_asn1_store_named_data: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0x0007             MOVS     R7,R0
   \   00000004   0x000E             MOVS     R6,R1
    336              mbedtls_asn1_named_data *cur;
    337          
    338              if( ( cur = mbedtls_asn1_find_named_data( *head, oid, oid_len ) ) == NULL )
   \   00000006   0x6838             LDR      R0,[R7, #+0]
   \   00000008   0x.... 0x....      BL       mbedtls_asn1_find_named_data
   \   0000000C   0x0004             MOVS     R4,R0
   \   0000000E   0x9D08             LDR      R5,[SP, #+32]
   \   00000010   0xD129             BNE      ??mbedtls_asn1_store_named_data_0
    339              {
    340                  // Add new entry if not present yet based on OID
    341                  //
    342                  cur = (mbedtls_asn1_named_data*)mbedtls_calloc( 1,
    343                                                      sizeof(mbedtls_asn1_named_data) );
   \   00000012   0x2120             MOVS     R1,#+32
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       calloc
   \   0000001A   0x0004             MOVS     R4,R0
    344                  if( cur == NULL )
   \   0000001C   0xD02C             BEQ      ??mbedtls_asn1_store_named_data_1
    345                      return( NULL );
    346          
    347                  cur->oid.len = oid_len;
   \   0000001E   0x9801             LDR      R0,[SP, #+4]
   \   00000020   0x6060             STR      R0,[R4, #+4]
    348                  cur->oid.p = mbedtls_calloc( 1, oid_len );
   \   00000022   0x9901             LDR      R1,[SP, #+4]
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x.... 0x....      BL       calloc
   \   0000002A   0x60A0             STR      R0,[R4, #+8]
    349                  if( cur->oid.p == NULL )
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD103             BNE      ??mbedtls_asn1_store_named_data_2
    350                  {
    351                      mbedtls_free( cur );
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0x.... 0x....      BL       free
    352                      return( NULL );
   \   00000036   0xE01F             B.N      ??mbedtls_asn1_store_named_data_1
    353                  }
    354          
    355                  memcpy( cur->oid.p, oid, oid_len );
   \                     ??mbedtls_asn1_store_named_data_2: (+1)
   \   00000038   0x9A01             LDR      R2,[SP, #+4]
   \   0000003A   0x0031             MOVS     R1,R6
   \   0000003C   0x.... 0x....      BL       __aeabi_memcpy
    356          
    357                  cur->val.len = val_len;
   \   00000040   0x6125             STR      R5,[R4, #+16]
    358                  cur->val.p = mbedtls_calloc( 1, val_len );
   \   00000042   0x0029             MOVS     R1,R5
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x.... 0x....      BL       calloc
   \   0000004A   0x6160             STR      R0,[R4, #+20]
    359                  if( cur->val.p == NULL )
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD106             BNE      ??mbedtls_asn1_store_named_data_3
    360                  {
    361                      mbedtls_free( cur->oid.p );
   \   00000050   0x68A0             LDR      R0,[R4, #+8]
   \   00000052   0x.... 0x....      BL       free
    362                      mbedtls_free( cur );
   \   00000056   0x0020             MOVS     R0,R4
   \   00000058   0x.... 0x....      BL       free
    363                      return( NULL );
   \   0000005C   0xE00C             B.N      ??mbedtls_asn1_store_named_data_1
    364                  }
    365          
    366                  cur->next = *head;
   \                     ??mbedtls_asn1_store_named_data_3: (+1)
   \   0000005E   0x6838             LDR      R0,[R7, #+0]
   \   00000060   0x61A0             STR      R0,[R4, #+24]
    367                  *head = cur;
   \   00000062   0x603C             STR      R4,[R7, #+0]
   \   00000064   0xE00F             B        ??mbedtls_asn1_store_named_data_4
    368              }
    369              else if( cur->val.len < val_len )
   \                     ??mbedtls_asn1_store_named_data_0: (+1)
   \   00000066   0x6920             LDR      R0,[R4, #+16]
   \   00000068   0x42A8             CMP      R0,R5
   \   0000006A   0xD20C             BCS      ??mbedtls_asn1_store_named_data_4
    370              {
    371                  /*
    372                   * Enlarge existing value buffer if needed
    373                   * Preserve old data until the allocation succeeded, to leave list in
    374                   * a consistent state in case allocation fails.
    375                   */
    376                  void *p = mbedtls_calloc( 1, val_len );
   \   0000006C   0x0029             MOVS     R1,R5
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0x.... 0x....      BL       calloc
   \   00000074   0x0006             MOVS     R6,R0
    377                  if( p == NULL )
   \   00000076   0xD101             BNE      ??mbedtls_asn1_store_named_data_5
    378                      return( NULL );
   \                     ??mbedtls_asn1_store_named_data_1: (+1)
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0xE00D             B        ??mbedtls_asn1_store_named_data_6
    379          
    380                  mbedtls_free( cur->val.p );
   \                     ??mbedtls_asn1_store_named_data_5: (+1)
   \   0000007C   0x6960             LDR      R0,[R4, #+20]
   \   0000007E   0x.... 0x....      BL       free
    381                  cur->val.p = p;
   \   00000082   0x6166             STR      R6,[R4, #+20]
    382                  cur->val.len = val_len;
   \   00000084   0x6125             STR      R5,[R4, #+16]
    383              }
    384          
    385              if( val != NULL )
   \                     ??mbedtls_asn1_store_named_data_4: (+1)
   \   00000086   0x9802             LDR      R0,[SP, #+8]
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD004             BEQ      ??mbedtls_asn1_store_named_data_7
    386                  memcpy( cur->val.p, val, val_len );
   \   0000008C   0x002A             MOVS     R2,R5
   \   0000008E   0x4601             MOV      R1,R0
   \   00000090   0x6960             LDR      R0,[R4, #+20]
   \   00000092   0x.... 0x....      BL       __aeabi_memcpy
    387          
    388              return( cur );
   \                     ??mbedtls_asn1_store_named_data_7: (+1)
   \   00000096   0x0020             MOVS     R0,R4
   \                     ??mbedtls_asn1_store_named_data_6: (+1)
   \   00000098   0xB003             ADD      SP,SP,#+12
   \   0000009A   0xBDF0             POP      {R4-R7,PC}       ;; return
    389          }
    390          #endif /* MBEDTLS_ASN1_WRITE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   mbedtls_asn1_store_named_data
        32   -> __aeabi_memcpy
        32   -> calloc
        32   -> free
        32   -> mbedtls_asn1_find_named_data
      24   mbedtls_asn1_write_algorithm_identifier
        24   -> mbedtls_asn1_write_len
        24   -> mbedtls_asn1_write_null
        24   -> mbedtls_asn1_write_oid
      32   mbedtls_asn1_write_bitstring
        32   -> __aeabi_memcpy
        32   -> mbedtls_asn1_write_len
      16   mbedtls_asn1_write_bool
        16   -> mbedtls_asn1_write_len
      16   mbedtls_asn1_write_ia5_string
        16   -> mbedtls_asn1_write_len
        16   -> mbedtls_asn1_write_raw_buffer
      16   mbedtls_asn1_write_int
        16   -> mbedtls_asn1_write_len
       4   mbedtls_asn1_write_len
      24   mbedtls_asn1_write_mpi
        24   -> mbedtls_asn1_write_len
        24   -> mbedtls_asn1_write_tag
        24   -> mbedtls_mpi_size
        24   -> mbedtls_mpi_write_binary
       0   mbedtls_asn1_write_null
      16   mbedtls_asn1_write_octet_string
        16   -> mbedtls_asn1_write_len
        16   -> mbedtls_asn1_write_raw_buffer
      24   mbedtls_asn1_write_oid
        24   -> mbedtls_asn1_write_len
        24   -> mbedtls_asn1_write_raw_buffer
        24   -> mbedtls_asn1_write_tag
      16   mbedtls_asn1_write_printable_string
        16   -> mbedtls_asn1_write_len
        16   -> mbedtls_asn1_write_raw_buffer
      16   mbedtls_asn1_write_raw_buffer
        16   -> __aeabi_memcpy
       0   mbedtls_asn1_write_tag


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     156  mbedtls_asn1_store_named_data
      84  mbedtls_asn1_write_algorithm_identifier
     118  mbedtls_asn1_write_bitstring
      64  mbedtls_asn1_write_bool
      58  mbedtls_asn1_write_ia5_string
      88  mbedtls_asn1_write_int
     166  mbedtls_asn1_write_len
     116  mbedtls_asn1_write_mpi
      42  mbedtls_asn1_write_null
      58  mbedtls_asn1_write_octet_string
      50  mbedtls_asn1_write_oid
      58  mbedtls_asn1_write_printable_string
      44  mbedtls_asn1_write_raw_buffer
      24  mbedtls_asn1_write_tag

 
 1 126 bytes in section .text
 
 1 126 bytes of CODE memory

Errors: none
Warnings: none
