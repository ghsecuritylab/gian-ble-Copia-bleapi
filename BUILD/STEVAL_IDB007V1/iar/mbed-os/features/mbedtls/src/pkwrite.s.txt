###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:32
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\mbedtls\src\pkwrite.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\pkwrite.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\pkwrite.s.txt
#        -o .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\pkwrite.o
#        .\mbed-os\features\mbedtls\src\pkwrite.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\pkwrite.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\pkwrite.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\mbedtls\src\pkwrite.c
      1          /*
      2           *  Public Key layer for writing key files and structures
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          
     22          #if !defined(MBEDTLS_CONFIG_FILE)
     23          #include "mbedtls/config.h"
     24          #else
     25          #include MBEDTLS_CONFIG_FILE
     26          #endif
     27          
     28          #if defined(MBEDTLS_PK_WRITE_C)
     29          
     30          #include "mbedtls/pk.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp struct <unnamed> *mbedtls_pk_rsa(struct <unnamed> const)
   \                     mbedtls_pk_rsa: (+1)
   \   00000000   0x0008             MOVS     R0,R1
   \   00000002   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp struct <unnamed> *mbedtls_pk_ec(struct <unnamed> const)
   \                     mbedtls_pk_ec: (+1)
   \   00000000   0x0008             MOVS     R0,R1
   \   00000002   0x4770             BX       LR               ;; return
     31          #include "mbedtls/asn1write.h"
     32          #include "mbedtls/oid.h"
     33          
     34          #include <string.h>
     35          
     36          #if defined(MBEDTLS_RSA_C)
     37          #include "mbedtls/rsa.h"
     38          #endif
     39          #if defined(MBEDTLS_ECP_C)
     40          #include "mbedtls/ecp.h"
     41          #endif
     42          #if defined(MBEDTLS_ECDSA_C)
     43          #include "mbedtls/ecdsa.h"
     44          #endif
     45          #if defined(MBEDTLS_PEM_WRITE_C)
     46          #include "mbedtls/pem.h"
     47          #endif
     48          
     49          #if defined(MBEDTLS_PLATFORM_C)
     50          #include "mbedtls/platform.h"
     51          #else
     52          #include <stdlib.h>
     53          #define mbedtls_calloc    calloc
     54          #define mbedtls_free       free
     55          #endif
     56          
     57          #if defined(MBEDTLS_RSA_C)
     58          /*
     59           *  RSAPublicKey ::= SEQUENCE {
     60           *      modulus           INTEGER,  -- n
     61           *      publicExponent    INTEGER   -- e
     62           *  }
     63           */
     64          static int pk_write_rsa_pubkey( unsigned char **p, unsigned char *start,
     65                                            mbedtls_rsa_context *rsa )
     66          {
     67              int ret;
     68              size_t len = 0;
     69          
     70              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( p, start, &rsa->E ) );
     71              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( p, start, &rsa->N ) );
     72          
     73              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
     74              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_CONSTRUCTED |
     75                                                           MBEDTLS_ASN1_SEQUENCE ) );
     76          
     77              return( (int) len );
     78          }
     79          #endif /* MBEDTLS_RSA_C */
     80          
     81          #if defined(MBEDTLS_ECP_C)
     82          /*
     83           * EC public key is an EC point
     84           */

   \                                 In section .text, align 2, keep-with-next
     85          static int pk_write_ec_pubkey( unsigned char **p, unsigned char *start,
     86                                           mbedtls_ecp_keypair *ec )
     87          {
   \                     pk_write_ec_pubkey: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB0A5             SUB      SP,SP,#+148
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0010             MOVS     R0,R2
     88              int ret;
     89              size_t len = 0;
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x9102             STR      R1,[SP, #+8]
     90              unsigned char buf[MBEDTLS_ECP_MAX_PT_LEN];
     91          
     92              if( ( ret = mbedtls_ecp_point_write_binary( &ec->grp, &ec->Q,
     93                                                  MBEDTLS_ECP_PF_UNCOMPRESSED,
     94                                                  &len, buf, sizeof( buf ) ) ) != 0 )
   \   0000000E   0x2185             MOVS     R1,#+133
   \   00000010   0x9101             STR      R1,[SP, #+4]
   \   00000012   0xA903             ADD      R1,SP,#+12
   \   00000014   0x9100             STR      R1,[SP, #+0]
   \   00000016   0xAB02             ADD      R3,SP,#+8
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x0001             MOVS     R1,R0
   \   0000001C   0x3188             ADDS     R1,R1,#+136
   \   0000001E   0x.... 0x....      BL       mbedtls_ecp_point_write_binary
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD112             BNE      ??pk_write_ec_pubkey_0
     95              {
     96                  return( ret );
     97              }
     98          
     99              if( *p < start || (size_t)( *p - start ) < len )
   \   00000026   0x6828             LDR      R0,[R5, #+0]
   \   00000028   0x42A0             CMP      R0,R4
   \   0000002A   0xD303             BCC      ??pk_write_ec_pubkey_1
   \   0000002C   0x1B01             SUBS     R1,R0,R4
   \   0000002E   0x9A02             LDR      R2,[SP, #+8]
   \   00000030   0x4291             CMP      R1,R2
   \   00000032   0xD202             BCS      ??pk_write_ec_pubkey_2
    100                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   \                     ??pk_write_ec_pubkey_1: (+1)
   \   00000034   0x206B             MOVS     R0,#+107
   \   00000036   0x43C0             MVNS     R0,R0            ;; #-108
   \   00000038   0xE008             B        ??pk_write_ec_pubkey_0
    101          
    102              *p -= len;
   \                     ??pk_write_ec_pubkey_2: (+1)
   \   0000003A   0x4611             MOV      R1,R2
   \   0000003C   0x424A             RSBS     R2,R1,#+0
   \   0000003E   0x1880             ADDS     R0,R0,R2
   \   00000040   0x6028             STR      R0,[R5, #+0]
    103              memcpy( *p, buf, len );
   \   00000042   0x9A02             LDR      R2,[SP, #+8]
   \   00000044   0xA903             ADD      R1,SP,#+12
   \   00000046   0x.... 0x....      BL       __aeabi_memcpy
    104          
    105              return( (int) len );
   \   0000004A   0x9802             LDR      R0,[SP, #+8]
   \                     ??pk_write_ec_pubkey_0: (+1)
   \   0000004C   0xB025             ADD      SP,SP,#+148
   \   0000004E   0xBD30             POP      {R4,R5,PC}       ;; return
    106          }
    107          
    108          /*
    109           * ECParameters ::= CHOICE {
    110           *   namedCurve         OBJECT IDENTIFIER
    111           * }
    112           */
    113          static int pk_write_ec_param( unsigned char **p, unsigned char *start,
    114                                          mbedtls_ecp_keypair *ec )
    115          {
    116              int ret;
    117              size_t len = 0;
    118              const char *oid;
    119              size_t oid_len;
    120          
    121              if( ( ret = mbedtls_oid_get_oid_by_ec_grp( ec->grp.id, &oid, &oid_len ) ) != 0 )
    122                  return( ret );
    123          
    124              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_oid( p, start, oid, oid_len ) );
    125          
    126              return( (int) len );
    127          }
    128          #endif /* MBEDTLS_ECP_C */
    129          

   \                                 In section .text, align 2, keep-with-next
    130          int mbedtls_pk_write_pubkey( unsigned char **p, unsigned char *start,
    131                               const mbedtls_pk_context *key )
    132          {
   \                     mbedtls_pk_write_pubkey: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0006             MOVS     R6,R0
   \   00000004   0x000F             MOVS     R7,R1
   \   00000006   0x0014             MOVS     R4,R2
    133              int ret;
    134              size_t len = 0;
    135          
    136          #if defined(MBEDTLS_RSA_C)
    137              if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_RSA )
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       mbedtls_pk_get_type
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD125             BNE      ??mbedtls_pk_write_pubkey_0
    138                  MBEDTLS_ASN1_CHK_ADD( len, pk_write_rsa_pubkey( p, start, mbedtls_pk_rsa( *key ) ) );
   \   00000012   0xCC03             LDM      R4!,{R0,R1}
   \   00000014   0x.... 0x....      BL       mbedtls_pk_rsa
   \   00000018   0x0005             MOVS     R5,R0
   \   0000001A   0x002A             MOVS     R2,R5
   \   0000001C   0x3214             ADDS     R2,R2,#+20
   \   0000001E   0x0039             MOVS     R1,R7
   \   00000020   0x0030             MOVS     R0,R6
   \   00000022   0x.... 0x....      BL       mbedtls_asn1_write_mpi
   \   00000026   0x0004             MOVS     R4,R0
   \   00000028   0xD418             BMI      ??mbedtls_pk_write_pubkey_1
   \   0000002A   0x002A             MOVS     R2,R5
   \   0000002C   0x3208             ADDS     R2,R2,#+8
   \   0000002E   0x0039             MOVS     R1,R7
   \   00000030   0x0030             MOVS     R0,R6
   \   00000032   0x.... 0x....      BL       mbedtls_asn1_write_mpi
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD410             BMI      ??mbedtls_pk_write_pubkey_1
   \   0000003A   0x1825             ADDS     R5,R4,R0
   \   0000003C   0x002A             MOVS     R2,R5
   \   0000003E   0x0039             MOVS     R1,R7
   \   00000040   0x0030             MOVS     R0,R6
   \   00000042   0x.... 0x....      BL       mbedtls_asn1_write_len
   \   00000046   0x0004             MOVS     R4,R0
   \   00000048   0xD408             BMI      ??mbedtls_pk_write_pubkey_1
   \   0000004A   0x2230             MOVS     R2,#+48
   \   0000004C   0x0039             MOVS     R1,R7
   \   0000004E   0x0030             MOVS     R0,R6
   \   00000050   0x.... 0x....      BL       mbedtls_asn1_write_tag
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD401             BMI      ??mbedtls_pk_write_pubkey_1
   \   00000058   0x1929             ADDS     R1,R5,R4
   \   0000005A   0x1808             ADDS     R0,R1,R0
    139              else
    140          #endif
    141          #if defined(MBEDTLS_ECP_C)
    142              if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_ECKEY )
    143                  MBEDTLS_ASN1_CHK_ADD( len, pk_write_ec_pubkey( p, start, mbedtls_pk_ec( *key ) ) );
    144              else
    145          #endif
    146                  return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
    147          
    148              return( (int) len );
   \                     ??mbedtls_pk_write_pubkey_1: (+1)
   \   0000005C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   \                     ??mbedtls_pk_write_pubkey_0: (+1)
   \   0000005E   0x0020             MOVS     R0,R4
   \   00000060   0x.... 0x....      BL       mbedtls_pk_get_type
   \   00000064   0x2802             CMP      R0,#+2
   \   00000066   0xD108             BNE      ??mbedtls_pk_write_pubkey_2
   \   00000068   0xCC03             LDM      R4!,{R0,R1}
   \   0000006A   0x.... 0x....      BL       mbedtls_pk_ec
   \   0000006E   0x0002             MOVS     R2,R0
   \   00000070   0x0039             MOVS     R1,R7
   \   00000072   0x0030             MOVS     R0,R6
   \   00000074   0x.... 0x....      BL       pk_write_ec_pubkey
   \   00000078   0xBDF2             POP      {R1,R4-R7,PC}
   \                     ??mbedtls_pk_write_pubkey_2: (+1)
   \   0000007A   0x....             LDR      R0,??DataTable1  ;; 0xffffc680
   \   0000007C   0xBDF2             POP      {R1,R4-R7,PC}
    149          }
    150          

   \                                 In section .text, align 2, keep-with-next
    151          int mbedtls_pk_write_pubkey_der( mbedtls_pk_context *key, unsigned char *buf, size_t size )
    152          {
   \                     mbedtls_pk_write_pubkey_der: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0007             MOVS     R7,R0
   \   00000006   0x000E             MOVS     R6,R1
    153              int ret;
    154              unsigned char *c;
    155              size_t len = 0, par_len = 0, oid_len;
   \   00000008   0x2400             MOVS     R4,#+0
   \   0000000A   0x9402             STR      R4,[SP, #+8]
    156              const char *oid;
    157          
    158              c = buf + size;
   \   0000000C   0x18B0             ADDS     R0,R6,R2
   \   0000000E   0x9001             STR      R0,[SP, #+4]
    159          
    160              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_pk_write_pubkey( &c, buf, key ) );
   \   00000010   0x003A             MOVS     R2,R7
   \   00000012   0xA801             ADD      R0,SP,#+4
   \   00000014   0x.... 0x....      BL       mbedtls_pk_write_pubkey
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD459             BMI      ??mbedtls_pk_write_pubkey_der_0
    161          
    162              if( c - buf < 1 )
   \   0000001C   0x9901             LDR      R1,[SP, #+4]
   \   0000001E   0x1B89             SUBS     R1,R1,R6
   \   00000020   0x2901             CMP      R1,#+1
   \   00000022   0xDA02             BGE      ??mbedtls_pk_write_pubkey_der_1
    163                  return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
   \   00000024   0x206B             MOVS     R0,#+107
   \   00000026   0x43C0             MVNS     R0,R0            ;; #-108
   \   00000028   0xE052             B        ??mbedtls_pk_write_pubkey_der_0
    164          
    165              /*
    166               *  SubjectPublicKeyInfo  ::=  SEQUENCE  {
    167               *       algorithm            AlgorithmIdentifier,
    168               *       subjectPublicKey     BIT STRING }
    169               */
    170              *--c = 0;
   \                     ??mbedtls_pk_write_pubkey_der_1: (+1)
   \   0000002A   0x9901             LDR      R1,[SP, #+4]
   \   0000002C   0x1E49             SUBS     R1,R1,#+1
   \   0000002E   0x9101             STR      R1,[SP, #+4]
   \   00000030   0x700C             STRB     R4,[R1, #+0]
    171              len += 1;
   \   00000032   0x1C44             ADDS     R4,R0,#+1
    172          
    173              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
   \   00000034   0x0022             MOVS     R2,R4
   \   00000036   0x0031             MOVS     R1,R6
   \   00000038   0xA801             ADD      R0,SP,#+4
   \   0000003A   0x.... 0x....      BL       mbedtls_asn1_write_len
   \   0000003E   0x0005             MOVS     R5,R0
   \   00000040   0xD446             BMI      ??mbedtls_pk_write_pubkey_der_0
    174              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_BIT_STRING ) );
   \   00000042   0x2203             MOVS     R2,#+3
   \   00000044   0x0031             MOVS     R1,R6
   \   00000046   0xA801             ADD      R0,SP,#+4
   \   00000048   0x.... 0x....      BL       mbedtls_asn1_write_tag
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD43F             BMI      ??mbedtls_pk_write_pubkey_der_0
   \   00000050   0x1828             ADDS     R0,R5,R0
   \   00000052   0x1824             ADDS     R4,R4,R0
    175          
    176              if( ( ret = mbedtls_oid_get_oid_by_pk_alg( mbedtls_pk_get_type( key ),
    177                                                 &oid, &oid_len ) ) != 0 )
   \   00000054   0x0038             MOVS     R0,R7
   \   00000056   0x.... 0x....      BL       mbedtls_pk_get_type
   \   0000005A   0xAA04             ADD      R2,SP,#+16
   \   0000005C   0xA903             ADD      R1,SP,#+12
   \   0000005E   0x.... 0x....      BL       mbedtls_oid_get_oid_by_pk_alg
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD134             BNE      ??mbedtls_pk_write_pubkey_der_0
    178              {
    179                  return( ret );
    180              }
    181          
    182          #if defined(MBEDTLS_ECP_C)
    183              if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_ECKEY )
   \   00000066   0x0038             MOVS     R0,R7
   \   00000068   0x.... 0x....      BL       mbedtls_pk_get_type
   \   0000006C   0x2802             CMP      R0,#+2
   \   0000006E   0xD114             BNE      ??mbedtls_pk_write_pubkey_der_2
    184              {
    185                  MBEDTLS_ASN1_CHK_ADD( par_len, pk_write_ec_param( &c, buf, mbedtls_pk_ec( *key ) ) );
   \   00000070   0xCF03             LDM      R7!,{R0,R1}
   \   00000072   0x.... 0x....      BL       mbedtls_pk_ec
   \   00000076   0x466A             MOV      R2,SP
   \   00000078   0xA902             ADD      R1,SP,#+8
   \   0000007A   0x7800             LDRB     R0,[R0, #+0]
   \   0000007C   0x.... 0x....      BL       mbedtls_oid_get_oid_by_ec_grp
   \   00000080   0x2800             CMP      R0,#+0
   \   00000082   0xD001             BEQ      ??mbedtls_pk_write_pubkey_der_3
   \   00000084   0xD508             BPL      ??mbedtls_pk_write_pubkey_der_4
   \   00000086   0xE023             B        ??mbedtls_pk_write_pubkey_der_0
   \                     ??mbedtls_pk_write_pubkey_der_3: (+1)
   \   00000088   0x9B00             LDR      R3,[SP, #+0]
   \   0000008A   0x9A02             LDR      R2,[SP, #+8]
   \   0000008C   0x0031             MOVS     R1,R6
   \   0000008E   0xA801             ADD      R0,SP,#+4
   \   00000090   0x.... 0x....      BL       mbedtls_asn1_write_oid
   \   00000094   0x2800             CMP      R0,#+0
   \   00000096   0xD41B             BMI      ??mbedtls_pk_write_pubkey_der_0
   \                     ??mbedtls_pk_write_pubkey_der_4: (+1)
   \   00000098   0x9002             STR      R0,[SP, #+8]
    186              }
    187          #endif
    188          
    189              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_algorithm_identifier( &c, buf, oid, oid_len,
    190                                                                  par_len ) );
   \                     ??mbedtls_pk_write_pubkey_der_2: (+1)
   \   0000009A   0x9802             LDR      R0,[SP, #+8]
   \   0000009C   0x9000             STR      R0,[SP, #+0]
   \   0000009E   0x9B04             LDR      R3,[SP, #+16]
   \   000000A0   0x9A03             LDR      R2,[SP, #+12]
   \   000000A2   0x0031             MOVS     R1,R6
   \   000000A4   0xA801             ADD      R0,SP,#+4
   \   000000A6   0x.... 0x....      BL       mbedtls_asn1_write_algorithm_identifier
   \   000000AA   0x2800             CMP      R0,#+0
   \   000000AC   0xD410             BMI      ??mbedtls_pk_write_pubkey_der_0
   \   000000AE   0x1824             ADDS     R4,R4,R0
    191          
    192              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
   \   000000B0   0x0022             MOVS     R2,R4
   \   000000B2   0x0031             MOVS     R1,R6
   \   000000B4   0xA801             ADD      R0,SP,#+4
   \   000000B6   0x.... 0x....      BL       mbedtls_asn1_write_len
   \   000000BA   0x0005             MOVS     R5,R0
   \   000000BC   0xD408             BMI      ??mbedtls_pk_write_pubkey_der_0
    193              MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_CONSTRUCTED |
    194                                                          MBEDTLS_ASN1_SEQUENCE ) );
   \   000000BE   0x2230             MOVS     R2,#+48
   \   000000C0   0x0031             MOVS     R1,R6
   \   000000C2   0xA801             ADD      R0,SP,#+4
   \   000000C4   0x.... 0x....      BL       mbedtls_asn1_write_tag
   \   000000C8   0x2800             CMP      R0,#+0
   \   000000CA   0xD401             BMI      ??mbedtls_pk_write_pubkey_der_0
    195          
    196              return( (int) len );
   \   000000CC   0x1961             ADDS     R1,R4,R5
   \   000000CE   0x1808             ADDS     R0,R1,R0
   \                     ??mbedtls_pk_write_pubkey_der_0: (+1)
   \   000000D0   0xB005             ADD      SP,SP,#+20
   \   000000D2   0xBDF0             POP      {R4-R7,PC}       ;; return
    197          }
    198          

   \                                 In section .text, align 2, keep-with-next
    199          int mbedtls_pk_write_key_der( mbedtls_pk_context *key, unsigned char *buf, size_t size )
    200          {
   \                     mbedtls_pk_write_key_der: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000F             MOVS     R7,R1
    201              int ret;
    202              unsigned char *c = buf + size;
   \   00000008   0x18B8             ADDS     R0,R7,R2
   \   0000000A   0x9000             STR      R0,[SP, #+0]
    203              size_t len = 0;
    204          
    205          #if defined(MBEDTLS_RSA_C)
    206              if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_RSA )
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       mbedtls_pk_get_type
   \   00000012   0x2801             CMP      R0,#+1
   \   00000014   0xD164             BNE      ??mbedtls_pk_write_key_der_0
    207              {
    208                  mbedtls_rsa_context *rsa = mbedtls_pk_rsa( *key );
   \   00000016   0xCC03             LDM      R4!,{R0,R1}
   \   00000018   0x.... 0x....      BL       mbedtls_pk_rsa
   \   0000001C   0x0006             MOVS     R6,R0
    209          
    210                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &c, buf, &rsa->QP ) );
   \   0000001E   0x0032             MOVS     R2,R6
   \   00000020   0x325C             ADDS     R2,R2,#+92
   \   00000022   0x0039             MOVS     R1,R7
   \   00000024   0x4668             MOV      R0,SP
   \   00000026   0x.... 0x....      BL       mbedtls_asn1_write_mpi
   \   0000002A   0x0004             MOVS     R4,R0
   \   0000002C   0xD456             BMI      ??mbedtls_pk_write_key_der_1
    211                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &c, buf, &rsa->DQ ) );
   \   0000002E   0x0032             MOVS     R2,R6
   \   00000030   0x3250             ADDS     R2,R2,#+80
   \   00000032   0x0039             MOVS     R1,R7
   \   00000034   0x4668             MOV      R0,SP
   \   00000036   0x.... 0x....      BL       mbedtls_asn1_write_mpi
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD44E             BMI      ??mbedtls_pk_write_key_der_1
   \   0000003E   0x1824             ADDS     R4,R4,R0
    212                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &c, buf, &rsa->DP ) );
   \   00000040   0x0032             MOVS     R2,R6
   \   00000042   0x3244             ADDS     R2,R2,#+68
   \   00000044   0x0039             MOVS     R1,R7
   \   00000046   0x4668             MOV      R0,SP
   \   00000048   0x.... 0x....      BL       mbedtls_asn1_write_mpi
   \   0000004C   0x0005             MOVS     R5,R0
   \   0000004E   0xD445             BMI      ??mbedtls_pk_write_key_der_1
    213                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &c, buf, &rsa->Q ) );
   \   00000050   0x0032             MOVS     R2,R6
   \   00000052   0x3238             ADDS     R2,R2,#+56
   \   00000054   0x0039             MOVS     R1,R7
   \   00000056   0x4668             MOV      R0,SP
   \   00000058   0x.... 0x....      BL       mbedtls_asn1_write_mpi
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD43D             BMI      ??mbedtls_pk_write_key_der_1
   \   00000060   0x1828             ADDS     R0,R5,R0
   \   00000062   0x1824             ADDS     R4,R4,R0
    214                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &c, buf, &rsa->P ) );
   \   00000064   0x0032             MOVS     R2,R6
   \   00000066   0x322C             ADDS     R2,R2,#+44
   \   00000068   0x0039             MOVS     R1,R7
   \   0000006A   0x4668             MOV      R0,SP
   \   0000006C   0x.... 0x....      BL       mbedtls_asn1_write_mpi
   \   00000070   0x0005             MOVS     R5,R0
   \   00000072   0xD433             BMI      ??mbedtls_pk_write_key_der_1
    215                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &c, buf, &rsa->D ) );
   \   00000074   0x0032             MOVS     R2,R6
   \   00000076   0x3220             ADDS     R2,R2,#+32
   \   00000078   0x0039             MOVS     R1,R7
   \   0000007A   0x4668             MOV      R0,SP
   \   0000007C   0x.... 0x....      BL       mbedtls_asn1_write_mpi
   \   00000080   0x2800             CMP      R0,#+0
   \   00000082   0xD42B             BMI      ??mbedtls_pk_write_key_der_1
   \   00000084   0x1828             ADDS     R0,R5,R0
   \   00000086   0x1824             ADDS     R4,R4,R0
    216                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &c, buf, &rsa->E ) );
   \   00000088   0x0032             MOVS     R2,R6
   \   0000008A   0x3214             ADDS     R2,R2,#+20
   \   0000008C   0x0039             MOVS     R1,R7
   \   0000008E   0x4668             MOV      R0,SP
   \   00000090   0x.... 0x....      BL       mbedtls_asn1_write_mpi
   \   00000094   0x0005             MOVS     R5,R0
   \   00000096   0xD421             BMI      ??mbedtls_pk_write_key_der_1
    217                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &c, buf, &rsa->N ) );
   \   00000098   0x0032             MOVS     R2,R6
   \   0000009A   0x3208             ADDS     R2,R2,#+8
   \   0000009C   0x0039             MOVS     R1,R7
   \   0000009E   0x4668             MOV      R0,SP
   \   000000A0   0x.... 0x....      BL       mbedtls_asn1_write_mpi
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xD419             BMI      ??mbedtls_pk_write_key_der_1
   \   000000A8   0x1828             ADDS     R0,R5,R0
   \   000000AA   0x1824             ADDS     R4,R4,R0
    218                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_int( &c, buf, 0 ) );
   \   000000AC   0x2200             MOVS     R2,#+0
   \   000000AE   0x0039             MOVS     R1,R7
   \   000000B0   0x4668             MOV      R0,SP
   \   000000B2   0x.... 0x....      BL       mbedtls_asn1_write_int
   \   000000B6   0x2800             CMP      R0,#+0
   \   000000B8   0xD410             BMI      ??mbedtls_pk_write_key_der_1
   \                     ??mbedtls_pk_write_key_der_2: (+1)
   \   000000BA   0x1824             ADDS     R4,R4,R0
    219          
    220                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
   \   000000BC   0x0022             MOVS     R2,R4
   \   000000BE   0x0039             MOVS     R1,R7
   \   000000C0   0x4668             MOV      R0,SP
   \   000000C2   0x.... 0x....      BL       mbedtls_asn1_write_len
   \   000000C6   0x0005             MOVS     R5,R0
   \   000000C8   0xD408             BMI      ??mbedtls_pk_write_key_der_1
    221                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_CONSTRUCTED |
    222                                                              MBEDTLS_ASN1_SEQUENCE ) );
   \   000000CA   0x2230             MOVS     R2,#+48
   \   000000CC   0x0039             MOVS     R1,R7
   \   000000CE   0x4668             MOV      R0,SP
   \   000000D0   0x.... 0x....      BL       mbedtls_asn1_write_tag
   \   000000D4   0x2800             CMP      R0,#+0
   \   000000D6   0xD401             BMI      ??mbedtls_pk_write_key_der_1
   \   000000D8   0x1828             ADDS     R0,R5,R0
   \   000000DA   0x1820             ADDS     R0,R4,R0
    223              }
    224              else
    225          #endif /* MBEDTLS_RSA_C */
    226          #if defined(MBEDTLS_ECP_C)
    227              if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_ECKEY )
    228              {
    229                  mbedtls_ecp_keypair *ec = mbedtls_pk_ec( *key );
    230                  size_t pub_len = 0, par_len = 0;
    231          
    232                  /*
    233                   * RFC 5915, or SEC1 Appendix C.4
    234                   *
    235                   * ECPrivateKey ::= SEQUENCE {
    236                   *      version        INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),
    237                   *      privateKey     OCTET STRING,
    238                   *      parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
    239                   *      publicKey  [1] BIT STRING OPTIONAL
    240                   *    }
    241                   */
    242          
    243                  /* publicKey */
    244                  MBEDTLS_ASN1_CHK_ADD( pub_len, pk_write_ec_pubkey( &c, buf, ec ) );
    245          
    246                  if( c - buf < 1 )
    247                      return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
    248                  *--c = 0;
    249                  pub_len += 1;
    250          
    251                  MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_len( &c, buf, pub_len ) );
    252                  MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_BIT_STRING ) );
    253          
    254                  MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_len( &c, buf, pub_len ) );
    255                  MBEDTLS_ASN1_CHK_ADD( pub_len, mbedtls_asn1_write_tag( &c, buf,
    256                                      MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) );
    257                  len += pub_len;
    258          
    259                  /* parameters */
    260                  MBEDTLS_ASN1_CHK_ADD( par_len, pk_write_ec_param( &c, buf, ec ) );
    261          
    262                  MBEDTLS_ASN1_CHK_ADD( par_len, mbedtls_asn1_write_len( &c, buf, par_len ) );
    263                  MBEDTLS_ASN1_CHK_ADD( par_len, mbedtls_asn1_write_tag( &c, buf,
    264                                      MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) );
    265                  len += par_len;
    266          
    267                  /* privateKey: write as MPI then fix tag */
    268                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &c, buf, &ec->d ) );
    269                  *c = MBEDTLS_ASN1_OCTET_STRING;
    270          
    271                  /* version */
    272                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_int( &c, buf, 1 ) );
    273          
    274                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &c, buf, len ) );
    275                  MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &c, buf, MBEDTLS_ASN1_CONSTRUCTED |
    276                                                              MBEDTLS_ASN1_SEQUENCE ) );
    277              }
    278              else
    279          #endif /* MBEDTLS_ECP_C */
    280                  return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
    281          
    282              return( (int) len );
   \                     ??mbedtls_pk_write_key_der_1: (+1)
   \   000000DC   0xB003             ADD      SP,SP,#+12
   \   000000DE   0xBDF0             POP      {R4-R7,PC}       ;; return
   \                     ??mbedtls_pk_write_key_der_0: (+1)
   \   000000E0   0x0020             MOVS     R0,R4
   \   000000E2   0x.... 0x....      BL       mbedtls_pk_get_type
   \   000000E6   0x2802             CMP      R0,#+2
   \   000000E8   0xD170             BNE      ??mbedtls_pk_write_key_der_3
   \   000000EA   0xCC03             LDM      R4!,{R0,R1}
   \   000000EC   0x.... 0x....      BL       mbedtls_pk_ec
   \   000000F0   0x0006             MOVS     R6,R0
   \   000000F2   0x0032             MOVS     R2,R6
   \   000000F4   0x0039             MOVS     R1,R7
   \   000000F6   0x4668             MOV      R0,SP
   \   000000F8   0x.... 0x....      BL       pk_write_ec_pubkey
   \   000000FC   0x2800             CMP      R0,#+0
   \   000000FE   0xD4ED             BMI      ??mbedtls_pk_write_key_der_1
   \   00000100   0x9900             LDR      R1,[SP, #+0]
   \   00000102   0x1BC9             SUBS     R1,R1,R7
   \   00000104   0x2901             CMP      R1,#+1
   \   00000106   0xDA02             BGE      ??mbedtls_pk_write_key_der_4
   \   00000108   0x206B             MOVS     R0,#+107
   \   0000010A   0x43C0             MVNS     R0,R0            ;; #-108
   \   0000010C   0xE7E6             B        ??mbedtls_pk_write_key_der_1
   \                     ??mbedtls_pk_write_key_der_4: (+1)
   \   0000010E   0x9900             LDR      R1,[SP, #+0]
   \   00000110   0x1E49             SUBS     R1,R1,#+1
   \   00000112   0x9100             STR      R1,[SP, #+0]
   \   00000114   0x2100             MOVS     R1,#+0
   \   00000116   0x9A00             LDR      R2,[SP, #+0]
   \   00000118   0x7011             STRB     R1,[R2, #+0]
   \   0000011A   0x1C44             ADDS     R4,R0,#+1
   \   0000011C   0x0022             MOVS     R2,R4
   \   0000011E   0x0039             MOVS     R1,R7
   \   00000120   0x4668             MOV      R0,SP
   \   00000122   0x.... 0x....      BL       mbedtls_asn1_write_len
   \   00000126   0x0005             MOVS     R5,R0
   \   00000128   0xD4D8             BMI      ??mbedtls_pk_write_key_der_1
   \   0000012A   0x2203             MOVS     R2,#+3
   \   0000012C   0x0039             MOVS     R1,R7
   \   0000012E   0x4668             MOV      R0,SP
   \   00000130   0x.... 0x....      BL       mbedtls_asn1_write_tag
   \   00000134   0x2800             CMP      R0,#+0
   \   00000136   0xD4D1             BMI      ??mbedtls_pk_write_key_der_1
   \   00000138   0x1828             ADDS     R0,R5,R0
   \   0000013A   0x1824             ADDS     R4,R4,R0
   \   0000013C   0x0022             MOVS     R2,R4
   \   0000013E   0x0039             MOVS     R1,R7
   \   00000140   0x4668             MOV      R0,SP
   \   00000142   0x.... 0x....      BL       mbedtls_asn1_write_len
   \   00000146   0x0005             MOVS     R5,R0
   \   00000148   0xD4C8             BMI      ??mbedtls_pk_write_key_der_1
   \   0000014A   0x22A1             MOVS     R2,#+161
   \   0000014C   0x0039             MOVS     R1,R7
   \   0000014E   0x4668             MOV      R0,SP
   \   00000150   0x.... 0x....      BL       mbedtls_asn1_write_tag
   \   00000154   0x2800             CMP      R0,#+0
   \   00000156   0xD4C1             BMI      ??mbedtls_pk_write_key_der_1
   \   00000158   0x1961             ADDS     R1,R4,R5
   \   0000015A   0x180C             ADDS     R4,R1,R0
   \   0000015C   0xAA01             ADD      R2,SP,#+4
   \   0000015E   0xA902             ADD      R1,SP,#+8
   \   00000160   0x7830             LDRB     R0,[R6, #+0]
   \   00000162   0x.... 0x....      BL       mbedtls_oid_get_oid_by_ec_grp
   \   00000166   0x2800             CMP      R0,#+0
   \   00000168   0xD001             BEQ      ??mbedtls_pk_write_key_der_5
   \   0000016A   0xD508             BPL      ??mbedtls_pk_write_key_der_6
   \   0000016C   0xE7B6             B        ??mbedtls_pk_write_key_der_1
   \                     ??mbedtls_pk_write_key_der_5: (+1)
   \   0000016E   0x9B01             LDR      R3,[SP, #+4]
   \   00000170   0x9A02             LDR      R2,[SP, #+8]
   \   00000172   0x0039             MOVS     R1,R7
   \   00000174   0x4668             MOV      R0,SP
   \   00000176   0x.... 0x....      BL       mbedtls_asn1_write_oid
   \   0000017A   0x2800             CMP      R0,#+0
   \   0000017C   0xD4AE             BMI      ??mbedtls_pk_write_key_der_1
   \                     ??mbedtls_pk_write_key_der_6: (+1)
   \   0000017E   0x9001             STR      R0,[SP, #+4]
   \   00000180   0x4602             MOV      R2,R0
   \   00000182   0x0039             MOVS     R1,R7
   \   00000184   0x4668             MOV      R0,SP
   \   00000186   0x.... 0x....      BL       mbedtls_asn1_write_len
   \   0000018A   0x0005             MOVS     R5,R0
   \   0000018C   0xD4A6             BMI      ??mbedtls_pk_write_key_der_1
   \   0000018E   0x22A0             MOVS     R2,#+160
   \   00000190   0x0039             MOVS     R1,R7
   \   00000192   0x4668             MOV      R0,SP
   \   00000194   0x.... 0x....      BL       mbedtls_asn1_write_tag
   \   00000198   0x2800             CMP      R0,#+0
   \   0000019A   0xD49F             BMI      ??mbedtls_pk_write_key_der_1
   \   0000019C   0x9901             LDR      R1,[SP, #+4]
   \   0000019E   0x1949             ADDS     R1,R1,R5
   \   000001A0   0x1808             ADDS     R0,R1,R0
   \   000001A2   0x1824             ADDS     R4,R4,R0
   \   000001A4   0x0032             MOVS     R2,R6
   \   000001A6   0x327C             ADDS     R2,R2,#+124
   \   000001A8   0x0039             MOVS     R1,R7
   \   000001AA   0x4668             MOV      R0,SP
   \   000001AC   0x.... 0x....      BL       mbedtls_asn1_write_mpi
   \   000001B0   0x0005             MOVS     R5,R0
   \   000001B2   0xD493             BMI      ??mbedtls_pk_write_key_der_1
   \   000001B4   0x2004             MOVS     R0,#+4
   \   000001B6   0x9900             LDR      R1,[SP, #+0]
   \   000001B8   0x7008             STRB     R0,[R1, #+0]
   \   000001BA   0x2201             MOVS     R2,#+1
   \   000001BC   0x0039             MOVS     R1,R7
   \   000001BE   0x4668             MOV      R0,SP
   \   000001C0   0x.... 0x....      BL       mbedtls_asn1_write_int
   \   000001C4   0x2800             CMP      R0,#+0
   \   000001C6   0xD489             BMI      ??mbedtls_pk_write_key_der_1
   \   000001C8   0x1828             ADDS     R0,R5,R0
   \   000001CA   0xE776             B        ??mbedtls_pk_write_key_der_2
   \                     ??mbedtls_pk_write_key_der_3: (+1)
   \   000001CC   0x....             LDR      R0,??DataTable1  ;; 0xffffc680
   \   000001CE   0xE785             B        ??mbedtls_pk_write_key_der_1
    283          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0xFFFFC680         DC32     0xffffc680
    284          
    285          #if defined(MBEDTLS_PEM_WRITE_C)
    286          
    287          #define PEM_BEGIN_PUBLIC_KEY    "-----BEGIN PUBLIC KEY-----\n"
    288          #define PEM_END_PUBLIC_KEY      "-----END PUBLIC KEY-----\n"
    289          
    290          #define PEM_BEGIN_PRIVATE_KEY_RSA   "-----BEGIN RSA PRIVATE KEY-----\n"
    291          #define PEM_END_PRIVATE_KEY_RSA     "-----END RSA PRIVATE KEY-----\n"
    292          #define PEM_BEGIN_PRIVATE_KEY_EC    "-----BEGIN EC PRIVATE KEY-----\n"
    293          #define PEM_END_PRIVATE_KEY_EC      "-----END EC PRIVATE KEY-----\n"
    294          
    295          /*
    296           * Max sizes of key per types. Shown as tag + len (+ content).
    297           */
    298          
    299          #if defined(MBEDTLS_RSA_C)
    300          /*
    301           * RSA public keys:
    302           *  SubjectPublicKeyInfo  ::=  SEQUENCE  {          1 + 3
    303           *       algorithm            AlgorithmIdentifier,  1 + 1 (sequence)
    304           *                                                + 1 + 1 + 9 (rsa oid)
    305           *                                                + 1 + 1 (params null)
    306           *       subjectPublicKey     BIT STRING }          1 + 3 + (1 + below)
    307           *  RSAPublicKey ::= SEQUENCE {                     1 + 3
    308           *      modulus           INTEGER,  -- n            1 + 3 + MPI_MAX + 1
    309           *      publicExponent    INTEGER   -- e            1 + 3 + MPI_MAX + 1
    310           *  }
    311           */
    312          #define RSA_PUB_DER_MAX_BYTES   38 + 2 * MBEDTLS_MPI_MAX_SIZE
    313          
    314          /*
    315           * RSA private keys:
    316           *  RSAPrivateKey ::= SEQUENCE {                    1 + 3
    317           *      version           Version,                  1 + 1 + 1
    318           *      modulus           INTEGER,                  1 + 3 + MPI_MAX + 1
    319           *      publicExponent    INTEGER,                  1 + 3 + MPI_MAX + 1
    320           *      privateExponent   INTEGER,                  1 + 3 + MPI_MAX + 1
    321           *      prime1            INTEGER,                  1 + 3 + MPI_MAX / 2 + 1
    322           *      prime2            INTEGER,                  1 + 3 + MPI_MAX / 2 + 1
    323           *      exponent1         INTEGER,                  1 + 3 + MPI_MAX / 2 + 1
    324           *      exponent2         INTEGER,                  1 + 3 + MPI_MAX / 2 + 1
    325           *      coefficient       INTEGER,                  1 + 3 + MPI_MAX / 2 + 1
    326           *      otherPrimeInfos   OtherPrimeInfos OPTIONAL  0 (not supported)
    327           *  }
    328           */
    329          #define MPI_MAX_SIZE_2          MBEDTLS_MPI_MAX_SIZE / 2 + \
    330                                          MBEDTLS_MPI_MAX_SIZE % 2
    331          #define RSA_PRV_DER_MAX_BYTES   47 + 3 * MBEDTLS_MPI_MAX_SIZE \
    332                                             + 5 * MPI_MAX_SIZE_2
    333          
    334          #else /* MBEDTLS_RSA_C */
    335          
    336          #define RSA_PUB_DER_MAX_BYTES   0
    337          #define RSA_PRV_DER_MAX_BYTES   0
    338          
    339          #endif /* MBEDTLS_RSA_C */
    340          
    341          #if defined(MBEDTLS_ECP_C)
    342          /*
    343           * EC public keys:
    344           *  SubjectPublicKeyInfo  ::=  SEQUENCE  {      1 + 2
    345           *    algorithm         AlgorithmIdentifier,    1 + 1 (sequence)
    346           *                                            + 1 + 1 + 7 (ec oid)
    347           *                                            + 1 + 1 + 9 (namedCurve oid)
    348           *    subjectPublicKey  BIT STRING              1 + 2 + 1               [1]
    349           *                                            + 1 (point format)        [1]
    350           *                                            + 2 * ECP_MAX (coords)    [1]
    351           *  }
    352           */
    353          #define ECP_PUB_DER_MAX_BYTES   30 + 2 * MBEDTLS_ECP_MAX_BYTES
    354          
    355          /*
    356           * EC private keys:
    357           * ECPrivateKey ::= SEQUENCE {                  1 + 2
    358           *      version        INTEGER ,                1 + 1 + 1
    359           *      privateKey     OCTET STRING,            1 + 1 + ECP_MAX
    360           *      parameters [0] ECParameters OPTIONAL,   1 + 1 + (1 + 1 + 9)
    361           *      publicKey  [1] BIT STRING OPTIONAL      1 + 2 + [1] above
    362           *    }
    363           */
    364          #define ECP_PRV_DER_MAX_BYTES   29 + 3 * MBEDTLS_ECP_MAX_BYTES
    365          
    366          #else /* MBEDTLS_ECP_C */
    367          
    368          #define ECP_PUB_DER_MAX_BYTES   0
    369          #define ECP_PRV_DER_MAX_BYTES   0
    370          
    371          #endif /* MBEDTLS_ECP_C */
    372          
    373          #define PUB_DER_MAX_BYTES   RSA_PUB_DER_MAX_BYTES > ECP_PUB_DER_MAX_BYTES ? \
    374                                      RSA_PUB_DER_MAX_BYTES : ECP_PUB_DER_MAX_BYTES
    375          #define PRV_DER_MAX_BYTES   RSA_PRV_DER_MAX_BYTES > ECP_PRV_DER_MAX_BYTES ? \
    376                                      RSA_PRV_DER_MAX_BYTES : ECP_PRV_DER_MAX_BYTES
    377          
    378          int mbedtls_pk_write_pubkey_pem( mbedtls_pk_context *key, unsigned char *buf, size_t size )
    379          {
    380              int ret;
    381              unsigned char output_buf[PUB_DER_MAX_BYTES];
    382              size_t olen = 0;
    383          
    384              if( ( ret = mbedtls_pk_write_pubkey_der( key, output_buf,
    385                                               sizeof(output_buf) ) ) < 0 )
    386              {
    387                  return( ret );
    388              }
    389          
    390              if( ( ret = mbedtls_pem_write_buffer( PEM_BEGIN_PUBLIC_KEY, PEM_END_PUBLIC_KEY,
    391                                            output_buf + sizeof(output_buf) - ret,
    392                                            ret, buf, size, &olen ) ) != 0 )
    393              {
    394                  return( ret );
    395              }
    396          
    397              return( 0 );
    398          }
    399          
    400          int mbedtls_pk_write_key_pem( mbedtls_pk_context *key, unsigned char *buf, size_t size )
    401          {
    402              int ret;
    403              unsigned char output_buf[PRV_DER_MAX_BYTES];
    404              const char *begin, *end;
    405              size_t olen = 0;
    406          
    407              if( ( ret = mbedtls_pk_write_key_der( key, output_buf, sizeof(output_buf) ) ) < 0 )
    408                  return( ret );
    409          
    410          #if defined(MBEDTLS_RSA_C)
    411              if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_RSA )
    412              {
    413                  begin = PEM_BEGIN_PRIVATE_KEY_RSA;
    414                  end = PEM_END_PRIVATE_KEY_RSA;
    415              }
    416              else
    417          #endif
    418          #if defined(MBEDTLS_ECP_C)
    419              if( mbedtls_pk_get_type( key ) == MBEDTLS_PK_ECKEY )
    420              {
    421                  begin = PEM_BEGIN_PRIVATE_KEY_EC;
    422                  end = PEM_END_PRIVATE_KEY_EC;
    423              }
    424              else
    425          #endif
    426                  return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
    427          
    428              if( ( ret = mbedtls_pem_write_buffer( begin, end,
    429                                            output_buf + sizeof(output_buf) - ret,
    430                                            ret, buf, size, &olen ) ) != 0 )
    431              {
    432                  return( ret );
    433              }
    434          
    435              return( 0 );
    436          }
    437          #endif /* MBEDTLS_PEM_WRITE_C */
    438          
    439          #endif /* MBEDTLS_PK_WRITE_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   mbedtls_pk_ec
       0   mbedtls_pk_rsa
      32   mbedtls_pk_write_key_der
        32   -> mbedtls_asn1_write_int
        32   -> mbedtls_asn1_write_len
        32   -> mbedtls_asn1_write_mpi
        32   -> mbedtls_asn1_write_oid
        32   -> mbedtls_asn1_write_tag
        32   -> mbedtls_oid_get_oid_by_ec_grp
        32   -> mbedtls_pk_ec
        32   -> mbedtls_pk_get_type
        32   -> mbedtls_pk_rsa
        32   -> pk_write_ec_pubkey
      24   mbedtls_pk_write_pubkey
        24   -> mbedtls_asn1_write_len
        24   -> mbedtls_asn1_write_mpi
        24   -> mbedtls_asn1_write_tag
        24   -> mbedtls_pk_ec
        24   -> mbedtls_pk_get_type
        24   -> mbedtls_pk_rsa
        24   -> pk_write_ec_pubkey
      40   mbedtls_pk_write_pubkey_der
        40   -> mbedtls_asn1_write_algorithm_identifier
        40   -> mbedtls_asn1_write_len
        40   -> mbedtls_asn1_write_oid
        40   -> mbedtls_asn1_write_tag
        40   -> mbedtls_oid_get_oid_by_ec_grp
        40   -> mbedtls_oid_get_oid_by_pk_alg
        40   -> mbedtls_pk_ec
        40   -> mbedtls_pk_get_type
        40   -> mbedtls_pk_write_pubkey
     160   pk_write_ec_pubkey
       160   -> __aeabi_memcpy
       160   -> mbedtls_ecp_point_write_binary


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  mbedtls_pk_ec
       4  mbedtls_pk_rsa
     464  mbedtls_pk_write_key_der
     126  mbedtls_pk_write_pubkey
     212  mbedtls_pk_write_pubkey_der
      80  pk_write_ec_pubkey

 
 894 bytes in section .text
 
 894 bytes of CODE memory

Errors: none
Warnings: none
