###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:21
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\mbedtls\src\aes.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\aes.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\aes.s.txt -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\aes.o
#        .\mbed-os\features\mbedtls\src\aes.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\aes.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\aes.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\mbedtls\src\aes.c
      1          /*
      2           *  FIPS-197 compliant AES implementation
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          /*
     22           *  The AES block cipher was designed by Vincent Rijmen and Joan Daemen.
     23           *
     24           *  http://csrc.nist.gov/encryption/aes/rijndael/Rijndael.pdf
     25           *  http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf
     26           */
     27          
     28          #if !defined(MBEDTLS_CONFIG_FILE)
     29          #include "mbedtls/config.h"
     30          #else
     31          #include MBEDTLS_CONFIG_FILE
     32          #endif
     33          
     34          #if defined(MBEDTLS_AES_C)
     35          
     36          #include <string.h>
     37          
     38          #include "mbedtls/aes.h"
     39          #if defined(MBEDTLS_PADLOCK_C)
     40          #include "mbedtls/padlock.h"
     41          #endif
     42          #if defined(MBEDTLS_AESNI_C)
     43          #include "mbedtls/aesni.h"
     44          #endif
     45          
     46          #if defined(MBEDTLS_SELF_TEST)
     47          #if defined(MBEDTLS_PLATFORM_C)
     48          #include "mbedtls/platform.h"
     49          #else
     50          #include <stdio.h>
     51          #define mbedtls_printf printf
     52          #endif /* MBEDTLS_PLATFORM_C */
     53          #endif /* MBEDTLS_SELF_TEST */
     54          
     55          #if !defined(MBEDTLS_AES_ALT)
     56          
     57          /* Implementation that should never be optimized out by the compiler */
     58          static void mbedtls_zeroize( void *v, size_t n ) {
     59              volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
     60          }
     61          
     62          /*
     63           * 32-bit integer manipulation macros (little endian)
     64           */
     65          #ifndef GET_UINT32_LE
     66          #define GET_UINT32_LE(n,b,i)                            \
     67          {                                                       \
     68              (n) = ( (uint32_t) (b)[(i)    ]       )             \
     69                  | ( (uint32_t) (b)[(i) + 1] <<  8 )             \
     70                  | ( (uint32_t) (b)[(i) + 2] << 16 )             \
     71                  | ( (uint32_t) (b)[(i) + 3] << 24 );            \
     72          }
     73          #endif
     74          
     75          #ifndef PUT_UINT32_LE
     76          #define PUT_UINT32_LE(n,b,i)                                    \
     77          {                                                               \
     78              (b)[(i)    ] = (unsigned char) ( ( (n)       ) & 0xFF );    \
     79              (b)[(i) + 1] = (unsigned char) ( ( (n) >>  8 ) & 0xFF );    \
     80              (b)[(i) + 2] = (unsigned char) ( ( (n) >> 16 ) & 0xFF );    \
     81              (b)[(i) + 3] = (unsigned char) ( ( (n) >> 24 ) & 0xFF );    \
     82          }
     83          #endif
     84          
     85          #if defined(MBEDTLS_PADLOCK_C) &&                      \
     86              ( defined(MBEDTLS_HAVE_X86) || defined(MBEDTLS_PADLOCK_ALIGN16) )
     87          static int aes_padlock_ace = -1;
     88          #endif
     89          
     90          #if defined(MBEDTLS_AES_ROM_TABLES)
     91          /*
     92           * Forward S-box
     93           */

   \                                 In section .rodata, align 4, keep-with-next
     94          static const unsigned char FSb[256] =
   \                     FSb:
   \   00000000   0x63 0x7C          DC8 99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215
   \              0x77 0x7B    
   \              0xF2 0x6B    
   \              0x6F 0xC5    
   \              0x30 0x01    
   \              0x67 0x2B    
   \              0xFE 0xD7    
   \   0000000E   0xAB 0x76          DC8 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175
   \              0xCA 0x82    
   \              0xC9 0x7D    
   \              0xFA 0x59    
   \              0x47 0xF0    
   \              0xAD 0xD4    
   \              0xA2 0xAF    
   \   0000001C   0x9C 0xA4          DC8 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165
   \              0x72 0xC0    
   \              0xB7 0xFD    
   \              0x93 0x26    
   \              0x36 0x3F    
   \              0xF7 0xCC    
   \              0x34 0xA5    
   \   0000002A   0xE5 0xF1          DC8 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18
   \              0x71 0xD8    
   \              0x31 0x15    
   \              0x04 0xC7    
   \              0x23 0xC3    
   \              0x18 0x96    
   \              0x05 0x9A    
   \              0x07 0x12    
   \   0000003A   0x80 0xE2          DC8 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82
   \              0xEB 0x27    
   \              0xB2 0x75    
   \              0x09 0x83    
   \              0x2C 0x1A    
   \              0x1B 0x6E    
   \              0x5A 0xA0    
   \              0x52         
   \   00000049   0x3B 0xD6          DC8 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91
   \              0xB3 0x29    
   \              0xE3 0x2F    
   \              0x84 0x53    
   \              0xD1 0x00    
   \              0xED 0x20    
   \              0xFC 0xB1    
   \              0x5B         
   \   00000058   0x6A 0xCB          DC8 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51
   \              0xBE 0x39    
   \              0x4A 0x4C    
   \              0x58 0xCF    
   \              0xD0 0xEF    
   \              0xAA 0xFB    
   \              0x43 0x4D    
   \              0x33         
   \   00000067   0x85 0x45          DC8 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157
   \              0xF9 0x02    
   \              0x7F 0x50    
   \              0x3C 0x9F    
   \              0xA8 0x51    
   \              0xA3 0x40    
   \              0x8F 0x92    
   \              0x9D         
   \   00000076   0x38 0xF5          DC8 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95
   \              0xBC 0xB6    
   \              0xDA 0x21    
   \              0x10 0xFF    
   \              0xF3 0xD2    
   \              0xCD 0x0C    
   \              0x13 0xEC    
   \              0x5F         
   \   00000085   0x97 0x44          DC8 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220
   \              0x17 0xC4    
   \              0xA7 0x7E    
   \              0x3D 0x64    
   \              0x5D 0x19    
   \              0x73 0x60    
   \              0x81 0x4F    
   \              0xDC         
   \   00000094   0x22 0x2A          DC8 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58
   \              0x90 0x88    
   \              0x46 0xEE    
   \              0xB8 0x14    
   \              0xDE 0x5E    
   \              0x0B 0xDB    
   \              0xE0 0x32    
   \              0x3A         
   \   000000A3   0x0A 0x49          DC8 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200
   \              0x06 0x24    
   \              0x5C 0xC2    
   \              0xD3 0xAC    
   \              0x62 0x91    
   \              0x95 0xE4    
   \              0x79 0xE7    
   \              0xC8         
   \   000000B2   0x37 0x6D          DC8 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8
   \              0x8D 0xD5    
   \              0x4E 0xA9    
   \              0x6C 0x56    
   \              0xF4 0xEA    
   \              0x65 0x7A    
   \              0xAE 0x08    
   \   000000C0   0xBA 0x78          DC8 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189
   \              0x25 0x2E    
   \              0x1C 0xA6    
   \              0xB4 0xC6    
   \              0xE8 0xDD    
   \              0x74 0x1F    
   \              0x4B 0xBD    
   \   000000CE   0x8B 0x8A          DC8 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134
   \              0x70 0x3E    
   \              0xB5 0x66    
   \              0x48 0x03    
   \              0xF6 0x0E    
   \              0x61 0x35    
   \              0x57 0xB9    
   \              0x86         
   \   000000DD   0xC1 0x1D          DC8 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135
   \              0x9E 0xE1    
   \              0xF8 0x98    
   \              0x11 0x69    
   \              0xD9 0x8E    
   \              0x94 0x9B    
   \              0x1E 0x87    
   \   000000EB   0xE9 0xCE          DC8 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65
   \              0x55 0x28    
   \              0xDF 0x8C    
   \              0xA1 0x89    
   \              0x0D 0xBF    
   \              0xE6 0x42    
   \              0x68 0x41    
   \   000000F9   0x99 0x2D          DC8 153, 45, 15, 176, 84, 187, 22
   \              0x0F 0xB0    
   \              0x54 0xBB    
   \              0x16         
     95          {
     96              0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5,
     97              0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
     98              0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0,
     99              0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    100              0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC,
    101              0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    102              0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A,
    103              0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    104              0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0,
    105              0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    106              0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B,
    107              0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    108              0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85,
    109              0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    110              0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5,
    111              0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    112              0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17,
    113              0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    114              0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88,
    115              0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    116              0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C,
    117              0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    118              0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9,
    119              0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    120              0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6,
    121              0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    122              0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E,
    123              0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    124              0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94,
    125              0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    126              0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68,
    127              0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
    128          };
    129          
    130          /*
    131           * Forward tables
    132           */
    133          #define FT \
    134          \
    135              V(A5,63,63,C6), V(84,7C,7C,F8), V(99,77,77,EE), V(8D,7B,7B,F6), \
    136              V(0D,F2,F2,FF), V(BD,6B,6B,D6), V(B1,6F,6F,DE), V(54,C5,C5,91), \
    137              V(50,30,30,60), V(03,01,01,02), V(A9,67,67,CE), V(7D,2B,2B,56), \
    138              V(19,FE,FE,E7), V(62,D7,D7,B5), V(E6,AB,AB,4D), V(9A,76,76,EC), \
    139              V(45,CA,CA,8F), V(9D,82,82,1F), V(40,C9,C9,89), V(87,7D,7D,FA), \
    140              V(15,FA,FA,EF), V(EB,59,59,B2), V(C9,47,47,8E), V(0B,F0,F0,FB), \
    141              V(EC,AD,AD,41), V(67,D4,D4,B3), V(FD,A2,A2,5F), V(EA,AF,AF,45), \
    142              V(BF,9C,9C,23), V(F7,A4,A4,53), V(96,72,72,E4), V(5B,C0,C0,9B), \
    143              V(C2,B7,B7,75), V(1C,FD,FD,E1), V(AE,93,93,3D), V(6A,26,26,4C), \
    144              V(5A,36,36,6C), V(41,3F,3F,7E), V(02,F7,F7,F5), V(4F,CC,CC,83), \
    145              V(5C,34,34,68), V(F4,A5,A5,51), V(34,E5,E5,D1), V(08,F1,F1,F9), \
    146              V(93,71,71,E2), V(73,D8,D8,AB), V(53,31,31,62), V(3F,15,15,2A), \
    147              V(0C,04,04,08), V(52,C7,C7,95), V(65,23,23,46), V(5E,C3,C3,9D), \
    148              V(28,18,18,30), V(A1,96,96,37), V(0F,05,05,0A), V(B5,9A,9A,2F), \
    149              V(09,07,07,0E), V(36,12,12,24), V(9B,80,80,1B), V(3D,E2,E2,DF), \
    150              V(26,EB,EB,CD), V(69,27,27,4E), V(CD,B2,B2,7F), V(9F,75,75,EA), \
    151              V(1B,09,09,12), V(9E,83,83,1D), V(74,2C,2C,58), V(2E,1A,1A,34), \
    152              V(2D,1B,1B,36), V(B2,6E,6E,DC), V(EE,5A,5A,B4), V(FB,A0,A0,5B), \
    153              V(F6,52,52,A4), V(4D,3B,3B,76), V(61,D6,D6,B7), V(CE,B3,B3,7D), \
    154              V(7B,29,29,52), V(3E,E3,E3,DD), V(71,2F,2F,5E), V(97,84,84,13), \
    155              V(F5,53,53,A6), V(68,D1,D1,B9), V(00,00,00,00), V(2C,ED,ED,C1), \
    156              V(60,20,20,40), V(1F,FC,FC,E3), V(C8,B1,B1,79), V(ED,5B,5B,B6), \
    157              V(BE,6A,6A,D4), V(46,CB,CB,8D), V(D9,BE,BE,67), V(4B,39,39,72), \
    158              V(DE,4A,4A,94), V(D4,4C,4C,98), V(E8,58,58,B0), V(4A,CF,CF,85), \
    159              V(6B,D0,D0,BB), V(2A,EF,EF,C5), V(E5,AA,AA,4F), V(16,FB,FB,ED), \
    160              V(C5,43,43,86), V(D7,4D,4D,9A), V(55,33,33,66), V(94,85,85,11), \
    161              V(CF,45,45,8A), V(10,F9,F9,E9), V(06,02,02,04), V(81,7F,7F,FE), \
    162              V(F0,50,50,A0), V(44,3C,3C,78), V(BA,9F,9F,25), V(E3,A8,A8,4B), \
    163              V(F3,51,51,A2), V(FE,A3,A3,5D), V(C0,40,40,80), V(8A,8F,8F,05), \
    164              V(AD,92,92,3F), V(BC,9D,9D,21), V(48,38,38,70), V(04,F5,F5,F1), \
    165              V(DF,BC,BC,63), V(C1,B6,B6,77), V(75,DA,DA,AF), V(63,21,21,42), \
    166              V(30,10,10,20), V(1A,FF,FF,E5), V(0E,F3,F3,FD), V(6D,D2,D2,BF), \
    167              V(4C,CD,CD,81), V(14,0C,0C,18), V(35,13,13,26), V(2F,EC,EC,C3), \
    168              V(E1,5F,5F,BE), V(A2,97,97,35), V(CC,44,44,88), V(39,17,17,2E), \
    169              V(57,C4,C4,93), V(F2,A7,A7,55), V(82,7E,7E,FC), V(47,3D,3D,7A), \
    170              V(AC,64,64,C8), V(E7,5D,5D,BA), V(2B,19,19,32), V(95,73,73,E6), \
    171              V(A0,60,60,C0), V(98,81,81,19), V(D1,4F,4F,9E), V(7F,DC,DC,A3), \
    172              V(66,22,22,44), V(7E,2A,2A,54), V(AB,90,90,3B), V(83,88,88,0B), \
    173              V(CA,46,46,8C), V(29,EE,EE,C7), V(D3,B8,B8,6B), V(3C,14,14,28), \
    174              V(79,DE,DE,A7), V(E2,5E,5E,BC), V(1D,0B,0B,16), V(76,DB,DB,AD), \
    175              V(3B,E0,E0,DB), V(56,32,32,64), V(4E,3A,3A,74), V(1E,0A,0A,14), \
    176              V(DB,49,49,92), V(0A,06,06,0C), V(6C,24,24,48), V(E4,5C,5C,B8), \
    177              V(5D,C2,C2,9F), V(6E,D3,D3,BD), V(EF,AC,AC,43), V(A6,62,62,C4), \
    178              V(A8,91,91,39), V(A4,95,95,31), V(37,E4,E4,D3), V(8B,79,79,F2), \
    179              V(32,E7,E7,D5), V(43,C8,C8,8B), V(59,37,37,6E), V(B7,6D,6D,DA), \
    180              V(8C,8D,8D,01), V(64,D5,D5,B1), V(D2,4E,4E,9C), V(E0,A9,A9,49), \
    181              V(B4,6C,6C,D8), V(FA,56,56,AC), V(07,F4,F4,F3), V(25,EA,EA,CF), \
    182              V(AF,65,65,CA), V(8E,7A,7A,F4), V(E9,AE,AE,47), V(18,08,08,10), \
    183              V(D5,BA,BA,6F), V(88,78,78,F0), V(6F,25,25,4A), V(72,2E,2E,5C), \
    184              V(24,1C,1C,38), V(F1,A6,A6,57), V(C7,B4,B4,73), V(51,C6,C6,97), \
    185              V(23,E8,E8,CB), V(7C,DD,DD,A1), V(9C,74,74,E8), V(21,1F,1F,3E), \
    186              V(DD,4B,4B,96), V(DC,BD,BD,61), V(86,8B,8B,0D), V(85,8A,8A,0F), \
    187              V(90,70,70,E0), V(42,3E,3E,7C), V(C4,B5,B5,71), V(AA,66,66,CC), \
    188              V(D8,48,48,90), V(05,03,03,06), V(01,F6,F6,F7), V(12,0E,0E,1C), \
    189              V(A3,61,61,C2), V(5F,35,35,6A), V(F9,57,57,AE), V(D0,B9,B9,69), \
    190              V(91,86,86,17), V(58,C1,C1,99), V(27,1D,1D,3A), V(B9,9E,9E,27), \
    191              V(38,E1,E1,D9), V(13,F8,F8,EB), V(B3,98,98,2B), V(33,11,11,22), \
    192              V(BB,69,69,D2), V(70,D9,D9,A9), V(89,8E,8E,07), V(A7,94,94,33), \
    193              V(B6,9B,9B,2D), V(22,1E,1E,3C), V(92,87,87,15), V(20,E9,E9,C9), \
    194              V(49,CE,CE,87), V(FF,55,55,AA), V(78,28,28,50), V(7A,DF,DF,A5), \
    195              V(8F,8C,8C,03), V(F8,A1,A1,59), V(80,89,89,09), V(17,0D,0D,1A), \
    196              V(DA,BF,BF,65), V(31,E6,E6,D7), V(C6,42,42,84), V(B8,68,68,D0), \
    197              V(C3,41,41,82), V(B0,99,99,29), V(77,2D,2D,5A), V(11,0F,0F,1E), \
    198              V(CB,B0,B0,7B), V(FC,54,54,A8), V(D6,BB,BB,6D), V(3A,16,16,2C)
    199          
    200          #define V(a,b,c,d) 0x##a##b##c##d

   \                                 In section .text, align 4, keep-with-next
    201          static const uint32_t FT0[256] = { FT };
   \                     FT0:
   \   00000000   0xA56363C6         DC32 2774754246, 2222750968, 2574743534, 2373680118, 234025727
   \              0x847C7CF8   
   \              0x997777EE   
   \              0x8D7B7BF6   
   \              0x0DF2F2FF   
   \   00000014   0xBD6B6BD6         DC32 3177933782, 2976870366, 1422247313, 1345335392, 50397442
   \              0xB16F6FDE   
   \              0x54C5C591   
   \              0x50303060   
   \              0x03010102   
   \   00000028   0xA96767CE         DC32 2842126286, 2099981142, 436141799, 1658312629, 3870010189
   \              0x7D2B2B56   
   \              0x19FEFEE7   
   \              0x62D7D7B5   
   \              0xE6ABAB4D   
   \   0000003C   0x9A7676EC         DC32 2591454956, 1170918031, 2642575903, 1086966153, 2273148410
   \              0x45CACA8F   
   \              0x9D82821F   
   \              0x40C9C989   
   \              0x877D7DFA   
   \   00000050   0x15FAFAEF         DC32 368769775, 3948501426, 3376891790, 200339707, 3970805057
   \              0xEB5959B2   
   \              0xC947478E   
   \              0x0BF0F0FB   
   \              0xECADAD41   
   \   00000064   0x67D4D4B3         DC32 1742001331, 4255294047, 3937382213, 3214711843, 4154762323
   \              0xFDA2A25F   
   \              0xEAAFAF45   
   \              0xBF9C9C23   
   \              0xF7A4A453   
   \   00000078   0x967272E4         DC32 2524082916, 1539358875, 3266819957, 486407649, 2928907069
   \              0x5BC0C09B   
   \              0xC2B7B775   
   \              0x1CFDFDE1   
   \              0xAE93933D   
   \   0000008C   0x6A26264C         DC32 1780885068, 1513502316, 1094664062, 49805301, 1338821763
   \              0x5A36366C   
   \              0x413F3F7E   
   \              0x02F7F7F5   
   \              0x4FCCCC83   
   \   000000A0   0x5C343468         DC32 1546925160, 4104496465, 887481809, 150073849, 2473685474
   \              0xF4A5A551   
   \              0x34E5E5D1   
   \              0x08F1F1F9   
   \              0x937171E2   
   \   000000B4   0x73D8D8AB         DC32 1943591083, 1395732834, 1058346282, 201589768, 1388824469
   \              0x53313162   
   \              0x3F15152A   
   \              0x0C040408   
   \              0x52C7C795   
   \   000000C8   0x65232346         DC32 1696801606, 1589887901, 672667696, 2711000631, 251987210
   \              0x5EC3C39D   
   \              0x28181830   
   \              0xA1969637   
   \              0x0F05050A   
   \   000000DC   0xB59A9A2F         DC32 3046808111, 151455502, 907153956, 2608889883, 1038279391
   \              0x0907070E   
   \              0x36121224   
   \              0x9B80801B   
   \              0x3DE2E2DF   
   \   000000F0   0x26EBEBCD         DC32 652995533, 1764173646, 3451040383, 2675275242, 453576978
   \              0x6927274E   
   \              0xCDB2B27F   
   \              0x9F7575EA   
   \              0x1B090912   
   \   00000104   0x9E83831D         DC32 2659418909, 1949051992, 773462580, 756751158, 2993581788
   \              0x742C2C58   
   \              0x2E1A1A34   
   \              0x2D1B1B36   
   \              0xB26E6EDC   
   \   00000118   0xEE5A5AB4         DC32 3998898868, 4221608027, 4132590244, 1295727478, 1641469623
   \              0xFBA0A05B   
   \              0xF65252A4   
   \              0x4D3B3B76   
   \              0x61D6D6B7   
   \   0000012C   0xCEB3B37D         DC32 3467883389, 2066295122, 1055122397, 1898917726, 2542044179
   \              0x7B292952   
   \              0x3EE3E3DD   
   \              0x712F2F5E   
   \              0x97848413   
   \   00000140   0xF55353A6         DC32 4115878822, 1758581177, 0, 753790401, 1612718144, 536673507
   \              0x68D1D1B9   
   \              0x00000000   
   \              0x2CEDEDC1   
   \              0x60202040   
   \              0x1FFCFCE3   
   \   00000158   0xC8B1B179         DC32 3367088505, 3982187446, 3194645204, 1187761037, 3653156455
   \              0xED5B5BB6   
   \              0xBE6A6AD4   
   \              0x46CBCB8D   
   \              0xD9BEBE67   
   \   0000016C   0x4B393972         DC32 1262041458, 3729410708, 3561770136, 3898103984, 1255133061
   \              0xDE4A4A94   
   \              0xD44C4C98   
   \              0xE85858B0   
   \              0x4ACFCF85   
   \   00000180   0x6BD0D0BB         DC32 1808847035, 720367557, 3853167183, 385612781, 3309519750
   \              0x2AEFEFC5   
   \              0xE5AAAA4F   
   \              0x16FBFBED   
   \              0xC5434386   
   \   00000194   0xD74D4D9A         DC32 3612167578, 1429418854, 2491778321, 3477423498, 284817897
   \              0x55333366   
   \              0x94858511   
   \              0xCF45458A   
   \              0x10F9F9E9   
   \   000001A8   0x06020204         DC32 100794884, 2172616702, 4031795360, 1144798328, 3131023141
   \              0x817F7FFE   
   \              0xF05050A0   
   \              0x443C3C78   
   \              0xBA9F9F25   
   \   000001BC   0xE3A8A84B         DC32 3819481163, 4082192802, 4272137053, 3225436288, 2324664069
   \              0xF35151A2   
   \              0xFEA3A35D   
   \              0xC0404080   
   \              0x8A8F8F05   
   \   000001D0   0xAD92923F         DC32 2912064063, 3164445985, 1211644016, 83228145, 3753688163
   \              0xBC9D9D21   
   \              0x48383870   
   \              0x04F5F5F1   
   \              0xDFBCBC63   
   \   000001E4   0xC1B6B677         DC32 3249976951, 1977277103, 1663115586, 806359072, 452984805
   \              0x75DADAAF   
   \              0x63212142   
   \              0x30101020   
   \              0x1AFFFFE5   
   \   000001F8   0x0EF3F3FD         DC32 250868733, 1842533055, 1288555905, 336333848, 890442534, 804056259
   \              0x6DD2D2BF   
   \              0x4CCDCD81   
   \              0x140C0C18   
   \              0x35131326   
   \              0x2FECECC3   
   \   00000210   0xE15F5FBE         DC32 3781124030, 2727843637, 3427026056, 957814574, 1472513171
   \              0xA2979735   
   \              0xCC444488   
   \              0x3917172E   
   \              0x57C4C493   
   \   00000224   0xF2A7A755         DC32 4071073621, 2189328124, 1195195770, 2892260552, 3881655738
   \              0x827E7EFC   
   \              0x473D3D7A   
   \              0xAC6464C8   
   \              0xE75D5DBA   
   \   00000238   0x2B191932         DC32 723065138, 2507371494, 2690670784, 2558624025, 3511635870
   \              0x957373E6   
   \              0xA06060C0   
   \              0x98818119   
   \              0xD14F4F9E   
   \   0000024C   0x7FDCDCA3         DC32 2145180835, 1713513028, 2116692564, 2878378043, 2206763019
   \              0x66222244   
   \              0x7E2A2A54   
   \              0xAB90903B   
   \              0x8388880B   
   \   00000260   0xCA46468C         DC32 3393603212, 703524551, 3552098411, 1007948840, 2044649127
   \              0x29EEEEC7   
   \              0xD3B8B86B   
   \              0x3C141428   
   \              0x79DEDEA7   
   \   00000274   0xE25E5EBC         DC32 3797835452, 487262998, 1994120109, 1004593371, 1446130276
   \              0x1D0B0B16   
   \              0x76DBDBAD   
   \              0x3BE0E0DB   
   \              0x56323264   
   \   00000288   0x4E3A3A74         DC32 1312438900, 503974420, 3679013266, 168166924, 1814307912
   \              0x1E0A0A14   
   \              0xDB494992   
   \              0x0A06060C   
   \              0x6C242448   
   \   0000029C   0xE45C5CB8         DC32 3831258296, 1573044895, 1859376061, 4021070915, 2791465668
   \              0x5DC2C29F   
   \              0x6ED3D3BD   
   \              0xEFACAC43   
   \              0xA66262C4   
   \   000002B0   0xA8919139         DC32 2828112185, 2761266481, 937747667, 2339994098, 854058965
   \              0xA4959531   
   \              0x37E4E4D3   
   \              0x8B7979F2   
   \              0x32E7E7D5   
   \   000002C4   0x43C8C88B         DC32 1137232011, 1496790894, 3077402074, 2358086913, 1691735473
   \              0x5937376E   
   \              0xB76D6DDA   
   \              0x8C8D8D01   
   \              0x64D5D5B1   
   \   000002D8   0xD24E4E9C         DC32 3528347292, 3769215305, 3027004632, 4199962284, 133494003
   \              0xE0A9A949   
   \              0xB46C6CD8   
   \              0xFA5656AC   
   \              0x07F4F4F3   
   \   000002EC   0x25EAEACF         DC32 636152527, 2942657994, 2390391540, 3920539207, 403179536
   \              0xAF6565CA   
   \              0x8E7A7AF4   
   \              0xE9AEAE47   
   \              0x18080810   
   \   00000300   0xD5BABA6F         DC32 3585784431, 2289596656, 1864705354, 1915629148, 605822008
   \              0x887878F0   
   \              0x6F25254A   
   \              0x722E2E5C   
   \              0x241C1C38   
   \   00000314   0xF1A6A657         DC32 4054230615, 3350508659, 1371981463, 602466507, 2094914977
   \              0xC7B4B473   
   \              0x51C6C697   
   \              0x23E8E8CB   
   \              0x7CDDDDA1   
   \   00000328   0x9C7474E8         DC32 2624877800, 555687742, 3712699286, 3703422305, 2257292045
   \              0x211F1F3E   
   \              0xDD4B4B96   
   \              0xDCBDBD61   
   \              0x868B8B0D   
   \   0000033C   0x858A8A0F         DC32 2240449039, 2423288032, 1111375484, 3300242801, 2858837708
   \              0x907070E0   
   \              0x423E3E7C   
   \              0xC4B5B571   
   \              0xAA6666CC   
   \   00000350   0xD8484890         DC32 3628615824, 84083462, 32962295, 302911004, 2741068226, 1597322602
   \              0x05030306   
   \              0x01F6F6F7   
   \              0x120E0E1C   
   \              0xA36161C2   
   \              0x5F35356A   
   \   00000368   0xF95757AE         DC32 4183250862, 3501832553, 2441512471, 1489093017, 656219450
   \              0xD0B9B969   
   \              0x91868617   
   \              0x58C1C199   
   \              0x271D1D3A   
   \   0000037C   0xB99E9E27         DC32 3114180135, 954327513, 335083755, 3013122091, 856756514
   \              0x38E1E1D9   
   \              0x13F8F8EB   
   \              0xB398982B   
   \              0x33111122   
   \   00000390   0xBB6969D2         DC32 3144247762, 1893325225, 2307821063, 2811532339, 3063651117
   \              0x70D9D9A9   
   \              0x898E8E07   
   \              0xA7949433   
   \              0xB69B9B2D   
   \   000003A4   0x221E1E3C         DC32 572399164, 2458355477, 552200649, 1238290055, 4283782570
   \              0x92878715   
   \              0x20E9E9C9   
   \              0x49CECE87   
   \              0xFF5555AA   
   \   000003B8   0x78282850         DC32 2015897680, 2061492133, 2408352771, 4171342169, 2156497161
   \              0x7ADFDFA5   
   \              0x8F8C8C03   
   \              0xF8A1A159   
   \              0x80898909   
   \   000003CC   0x170D0D1A         DC32 386731290, 3669999461, 837215959, 3326231172, 3093850320
   \              0xDABFBF65   
   \              0x31E6E6D7   
   \              0xC6424284   
   \              0xB86868D0   
   \   000003E0   0xC3414182         DC32 3275833730, 2962856233, 1999449434, 286199582, 3417354363
   \              0xB0999929   
   \              0x772D2D5A   
   \              0x110F0F1E   
   \              0xCBB0B07B   
   \   000003F4   0xFC5454A8         DC32 4233385128, 3602627437, 974525996
   \              0xD6BBBB6D   
   \              0x3A16162C   
    202          #undef V
    203          
    204          #define V(a,b,c,d) 0x##b##c##d##a

   \                                 In section .rodata, align 4, keep-with-next
    205          static const uint32_t FT1[256] = { FT };
   \                     FT1:
   \   00000000   0x6363C6A5         DC32 1667483301, 2088564868, 2004348569, 2071721613, 4076011277
   \              0x7C7CF884   
   \              0x7777EE99   
   \              0x7B7BF68D   
   \              0xF2F2FF0D   
   \   00000014   0x6B6BD6BD         DC32 1802229437, 1869602481, 3318059348, 808476752, 16843267
   \              0x6F6FDEB1   
   \              0xC5C59154   
   \              0x30306050   
   \              0x01010203   
   \   00000028   0x6767CEA9         DC32 1734856361, 724260477, 4278118169, 3621238114, 2880130534
   \              0x2B2B567D   
   \              0xFEFEE719   
   \              0xD7D7B562   
   \              0xABAB4DE6   
   \   0000003C   0x7676EC9A         DC32 1987505306, 3402272581, 2189565853, 3385428288, 2105408135
   \              0xCACA8F45   
   \              0x82821F9D   
   \              0xC9C98940   
   \              0x7D7DFA87   
   \   00000050   0xFAFAEF15         DC32 4210749205, 1499050731, 1195871945, 4042324747, 2913812972
   \              0x5959B2EB   
   \              0x47478EC9   
   \              0xF0F0FB0B   
   \              0xADAD41EC   
   \   00000064   0xD4D4B367         DC32 3570709351, 2728550397, 2947499498, 2627478463, 2762232823
   \              0xA2A25FFD   
   \              0xAFAF45EA   
   \              0x9C9C23BF   
   \              0xA4A453F7   
   \   00000078   0x7272E496         DC32 1920132246, 3233848155, 3082253762, 4261273884, 2475900334
   \              0xC0C09B5B   
   \              0xB7B775C2   
   \              0xFDFDE11C   
   \              0x93933DAE   
   \   0000008C   0x26264C6A         DC32 640044138, 909536346, 1061125697, 4160222466, 3435955023
   \              0x36366C5A   
   \              0x3F3F7E41   
   \              0xF7F7F502   
   \              0xCCCC834F   
   \   000000A0   0x3434685C         DC32 875849820, 2779075060, 3857043764, 4059166984, 1903288979
   \              0xA5A551F4   
   \              0xE5E5D134   
   \              0xF1F1F908   
   \              0x7171E293   
   \   000000B4   0xD8D8AB73         DC32 3638078323, 825320019, 353708607, 67373068, 3351745874, 589514341
   \              0x31316253   
   \              0x15152A3F   
   \              0x0404080C   
   \              0xC7C79552   
   \              0x23234665   
   \   000000CC   0xC3C39D5E         DC32 3284376926, 404238376, 2526427041, 84216335, 2593796021, 117902857
   \              0x18183028   
   \              0x969637A1   
   \              0x05050A0F   
   \              0x9A9A2FB5   
   \              0x07070E09   
   \   000000E4   0x12122436         DC32 303178806, 2155879323, 3806519101, 3958099238, 656887401
   \              0x80801B9B   
   \              0xE2E2DF3D   
   \              0xEBEBCD26   
   \              0x27274E69   
   \   000000F8   0xB2B27FCD         DC32 2998042573, 1970662047, 151589403, 2206408094, 741103732
   \              0x7575EA9F   
   \              0x0909121B   
   \              0x83831D9E   
   \              0x2C2C5874   
   \   0000010C   0x1A1A342E         DC32 437924910, 454768173, 1852759218, 1515893998, 2694863867
   \              0x1B1B362D   
   \              0x6E6EDCB2   
   \              0x5A5AB4EE   
   \              0xA0A05BFB   
   \   00000120   0x5252A4F6         DC32 1381147894, 993752653, 3604395873, 3014884814, 690573947
   \              0x3B3B764D   
   \              0xD6D6B761   
   \              0xB3B37DCE   
   \              0x2929527B   
   \   00000134   0xE3E3DD3E         DC32 3823361342, 791633521, 2223248279, 1397991157, 3520182632, 0
   \              0x2F2F5E71   
   \              0x84841397   
   \              0x5353A6F5   
   \              0xD1D1B968   
   \              0x00000000   
   \   0000014C   0xEDEDC12C         DC32 3991781676, 538984544, 4244431647, 2981198280, 1532737261
   \              0x20204060   
   \              0xFCFCE31F   
   \              0xB1B179C8   
   \              0x5B5BB6ED   
   \   00000160   0x6A6AD4BE         DC32 1785386174, 3419114822, 3200149465, 960066123, 1246401758
   \              0xCBCB8D46   
   \              0xBEBE67D9   
   \              0x3939724B   
   \              0x4A4A94DE   
   \   00000174   0x4C4C98D4         DC32 1280088276, 1482207464, 3486483786, 3503340395, 4025468202
   \              0x5858B0E8   
   \              0xCFCF854A   
   \              0xD0D0BB6B   
   \              0xEFEFC52A   
   \   00000188   0xAAAA4FE5         DC32 2863288293, 4227591446, 1128498885, 1296931543, 859006549
   \              0xFBFBED16   
   \              0x434386C5   
   \              0x4D4D9AD7   
   \              0x33336655   
   \   0000019C   0x85851194         DC32 2240090516, 1162185423, 4193904912, 33686534, 2139094657
   \              0x45458ACF   
   \              0xF9F9E910   
   \              0x02020406   
   \              0x7F7FFE81   
   \   000001B0   0x5050A0F0         DC32 1347461360, 1010595908, 2678007226, 2829601763, 1364304627
   \              0x3C3C7844   
   \              0x9F9F25BA   
   \              0xA8A84BE3   
   \              0x5151A2F3   
   \   000001C4   0xA3A35DFE         DC32 2745392638, 1077969088, 2408514954, 2459058093, 2644320700
   \              0x404080C0   
   \              0x8F8F058A   
   \              0x92923FAD   
   \              0x9D9D21BC   
   \   000001D8   0x38387048         DC32 943222856, 4126535940, 3166462943, 3065411521, 3671764853
   \              0xF5F5F104   
   \              0xBCBC63DF   
   \              0xB6B677C1   
   \              0xDADAAF75   
   \   000001EC   0x21214263         DC32 555827811, 269492272, 4294960410, 4092853518, 3537026925
   \              0x10102030   
   \              0xFFFFE51A   
   \              0xF3F3FD0E   
   \              0xD2D2BF6D   
   \   00000200   0xCDCD814C         DC32 3452797260, 202119188, 320022069, 3974939439, 1600110305
   \              0x0C0C1814   
   \              0x13132635   
   \              0xECECC32F   
   \              0x5F5FBEE1   
   \   00000214   0x979735A2         DC32 2543269282, 1145342156, 387395129, 3301217111, 2812761586
   \              0x444488CC   
   \              0x17172E39   
   \              0xC4C49357   
   \              0xA7A755F2   
   \   00000228   0x7E7EFC82         DC32 2122251394, 1027439175, 1684326572, 1566423783, 421081643
   \              0x3D3D7A47   
   \              0x6464C8AC   
   \              0x5D5DBAE7   
   \              0x1919322B   
   \   0000023C   0x7373E695         DC32 1936975509, 1616953504, 2172721560, 1330618065, 3705447295
   \              0x6060C0A0   
   \              0x81811998   
   \              0x4F4F9ED1   
   \              0xDCDCA37F   
   \   00000250   0x22224466         DC32 572671078, 707417214, 2425371563, 2290617219, 1179028682
   \              0x2A2A547E   
   \              0x90903BAB   
   \              0x88880B83   
   \              0x46468CCA   
   \   00000264   0xEEEEC729         DC32 4008625961, 3099093971, 336865340, 3739133817, 1583267042
   \              0xB8B86BD3   
   \              0x1414283C   
   \              0xDEDEA779   
   \              0x5E5EBCE2   
   \   00000278   0x0B0B161D         DC32 185275933, 3688607094, 3772832571, 842163286, 976909390, 168432670
   \              0xDBDBAD76   
   \              0xE0E0DB3B   
   \              0x32326456   
   \              0x3A3A744E   
   \              0x0A0A141E   
   \   00000290   0x494992DB         DC32 1229558491, 101059594, 606357612, 1549580516, 3267534685
   \              0x06060C0A   
   \              0x2424486C   
   \              0x5C5CB8E4   
   \              0xC2C29F5D   
   \   000002A4   0xD3D3BD6E         DC32 3553869166, 2896970735, 1650640038, 2442213800, 2509582756
   \              0xACAC43EF   
   \              0x6262C4A6   
   \              0x919139A8   
   \              0x959531A4   
   \   000002B8   0xE4E4D337         DC32 3840201527, 2038035083, 3890730290, 3368586051, 926379609
   \              0x7979F28B   
   \              0xE7E7D532   
   \              0xC8C88B43   
   \              0x37376E59   
   \   000002CC   0x6D6DDAB7         DC32 1835915959, 2374828428, 3587551588, 1313774802, 2846444000
   \              0x8D8D018C   
   \              0xD5D5B164   
   \              0x4E4E9CD2   
   \              0xA9A949E0   
   \   000002E0   0x6C6CD8B4         DC32 1819072692, 1448520954, 4109693703, 3941256997, 1701169839
   \              0x5656ACFA   
   \              0xF4F4F307   
   \              0xEAEACF25   
   \              0x6565CAAF   
   \   000002F4   0x7A7AF48E         DC32 2054878350, 2930657257, 134746136, 3132780501, 2021191816
   \              0xAEAE47E9   
   \              0x08081018   
   \              0xBABA6FD5   
   \              0x7878F088   
   \   00000308   0x25254A6F         DC32 623200879, 774790258, 471611428, 2795919345, 3031724999
   \              0x2E2E5C72   
   \              0x1C1C3824   
   \              0xA6A657F1   
   \              0xB4B473C7   
   \   0000031C   0xC6C69751         DC32 3334903633, 3907570467, 3722289532, 1953818780, 522141217
   \              0xE8E8CB23   
   \              0xDDDDA17C   
   \              0x7474E89C   
   \              0x1F1F3E21   
   \   00000330   0x4B4B96DD         DC32 1263245021, 3183305180, 2341145990, 2324303749, 1886445712
   \              0xBDBD61DC   
   \              0x8B8B0D86   
   \              0x8A8A0F85   
   \              0x7070E090   
   \   00000344   0x3E3E7C42         DC32 1044282434, 3048567236, 1718013098, 1212715224, 50529797
   \              0xB5B571C4   
   \              0x6666CCAA   
   \              0x484890D8   
   \              0x03030605   
   \   00000358   0xF6F6F701         DC32 4143380225, 235805714, 1633796771, 892693087, 1465364217
   \              0x0E0E1C12   
   \              0x6161C2A3   
   \              0x35356A5F   
   \              0x5757AEF9   
   \   0000036C   0xB9B969D0         DC32 3115936208, 2256934801, 3250690392, 488454695, 2661164985
   \              0x86861791   
   \              0xC1C19958   
   \              0x1D1D3A27   
   \              0x9E9E27B9   
   \   00000380   0xE1E1D938         DC32 3789674808, 4177062675, 2560109491, 286335539, 1768542907
   \              0xF8F8EB13   
   \              0x98982BB3   
   \              0x11112233   
   \              0x6969D2BB   
   \   00000394   0xD9D9A970         DC32 3654920560, 2391672713, 2492740519, 2610638262, 505297954
   \              0x8E8E0789   
   \              0x949433A7   
   \              0x9B9B2DB6   
   \              0x1E1E3C22   
   \   000003A8   0x87871592         DC32 2273777042, 3924412704, 3469641545, 1431677695, 673730680
   \              0xE9E9C920   
   \              0xCECE8749   
   \              0x5555AAFF   
   \              0x28285078   
   \   000003BC   0xDFDFA57A         DC32 3755976058, 2357986191, 2711706104, 2307459456, 218962455
   \              0x8C8C038F   
   \              0xA1A159F8   
   \              0x89890980   
   \              0x0D0D1A17   
   \   000003D0   0xBFBF65DA         DC32 3216991706, 3873888049, 1111655622, 1751699640, 1094812355
   \              0xE6E6D731   
   \              0x424284C6   
   \              0x6868D0B8   
   \              0x414182C3   
   \   000003E4   0x999929B0         DC32 2576951728, 757946999, 252648977, 2964356043, 1414834428
   \              0x2D2D5A77   
   \              0x0F0F1E11   
   \              0xB0B07BCB   
   \              0x5454A8FC   
   \   000003F8   0xBBBB6DD6         DC32 3149622742, 370551866
   \              0x16162C3A   
    206          #undef V
    207          
    208          #define V(a,b,c,d) 0x##c##d##a##b

   \                                 In section .rodata, align 4, keep-with-next
    209          static const uint32_t FT2[256] = { FT };
   \                     FT2:
   \   00000000   0x63C6A563         DC32 1673962851, 2096661628, 2012125559, 2079755643, 4076801522
   \              0x7CF8847C   
   \              0x77EE9977   
   \              0x7BF68D7B   
   \              0xF2FF0DF2   
   \   00000014   0x6BD6BD6B         DC32 1809235307, 1876865391, 3314635973, 811618352, 16909057
   \              0x6FDEB16F   
   \              0xC59154C5   
   \              0x30605030   
   \              0x01020301   
   \   00000028   0x67CEA967         DC32 1741597031, 727088427, 4276558334, 3618988759, 2874009259
   \              0x2B567D2B   
   \              0xFEE719FE   
   \              0xD7B562D7   
   \              0xAB4DE6AB   
   \   0000003C   0x76EC9A76         DC32 1995217526, 3398387146, 2183110018, 3381215433, 2113570685
   \              0xCA8F45CA   
   \              0x821F9D82   
   \              0xC98940C9   
   \              0x7DFA877D   
   \   00000050   0xFAEF15FA         DC32 4209972730, 1504897881, 1200539975, 4042984432, 2906778797
   \              0x59B2EB59   
   \              0x478EC947   
   \              0xF0FB0BF0   
   \              0xAD41ECAD   
   \   00000064   0xD4B367D4         DC32 3568527316, 2724199842, 2940594863, 2619588508, 2756966308
   \              0xA25FFDA2   
   \              0xAF45EAAF   
   \              0x9C23BF9C   
   \              0xA453F7A4   
   \   00000078   0x72E49672         DC32 1927583346, 3231407040, 3077948087, 4259388669, 2470293139
   \              0xC09B5BC0   
   \              0xB775C2B7   
   \              0xFDE11CFD   
   \              0x933DAE93   
   \   0000008C   0x264C6A26         DC32 642542118, 913070646, 1065238847, 4160029431, 3431157708
   \              0x366C5A36   
   \              0x3F7E413F   
   \              0xF7F502F7   
   \              0xCC834FCC   
   \   000000A0   0x34685C34         DC32 879254580, 2773611685, 3855693029, 4059629809, 1910674289
   \              0xA551F4A5   
   \              0xE5D134E5   
   \              0xF1F908F1   
   \              0x71E29371   
   \   000000B4   0xD8AB73D8         DC32 3635114968, 828527409, 355090197, 67636228, 3348452039, 591815971
   \              0x31625331   
   \              0x152A3F15   
   \              0x04080C04   
   \              0xC79552C7   
   \              0x23466523   
   \   000000CC   0xC39D5EC3         DC32 3281870531, 405809176, 2520228246, 84545285, 2586817946, 118360327
   \              0x18302818   
   \              0x9637A196   
   \              0x050A0F05   
   \              0x9A2FB59A   
   \              0x070E0907   
   \   000000E4   0x12243612         DC32 304363026, 2149292928, 3806281186, 3956090603, 659450151
   \              0x801B9B80   
   \              0xE2DF3DE2   
   \              0xEBCD26EB   
   \              0x274E6927   
   \   000000F8   0xB27FCDB2         DC32 2994720178, 1978310517, 152181513, 2199756419, 743994412
   \              0x75EA9F75   
   \              0x09121B09   
   \              0x831D9E83   
   \              0x2C58742C   
   \   0000010C   0x1A342E1A         DC32 439627290, 456535323, 1859957358, 1521806938, 2690382752
   \              0x1B362D1B   
   \              0x6EDCB26E   
   \              0x5AB4EE5A   
   \              0xA05BFBA0   
   \   00000120   0x52A4F652         DC32 1386542674, 997608763, 3602342358, 3011366579, 693271337
   \              0x3B764D3B   
   \              0xD6B761D6   
   \              0xB37DCEB3   
   \              0x29527B29   
   \   00000134   0xE3DD3EE3         DC32 3822927587, 794718511, 2215876484, 1403450707, 3518589137, 0
   \              0x2F5E712F   
   \              0x84139784   
   \              0x53A6F553   
   \              0xD1B968D1   
   \              0x00000000   
   \   0000014C   0xEDC12CED         DC32 3988860141, 541089824, 4242743292, 2977548465, 1538714971
   \              0x20406020   
   \              0xFCE31FFC   
   \              0xB179C8B1   
   \              0x5BB6ED5B   
   \   00000160   0x6AD4BE6A         DC32 1792327274, 3415033547, 3194476990, 963791673, 1251270218
   \              0xCB8D46CB   
   \              0xBE67D9BE   
   \              0x39724B39   
   \              0x4A94DE4A   
   \   00000174   0x4C98D44C         DC32 1285084236, 1487988824, 3481619151, 3501943760, 4022676207
   \              0x58B0E858   
   \              0xCF854ACF   
   \              0xD0BB6BD0   
   \              0xEFC52AEF   
   \   00000188   0xAA4FE5AA         DC32 2857362858, 4226619131, 1132905795, 1301993293, 862344499
   \              0xFBED16FB   
   \              0x4386C543   
   \              0x4D9AD74D   
   \              0x33665533   
   \   0000019C   0x85119485         DC32 2232521861, 1166724933, 4192801017, 33818114, 2147385727
   \              0x458ACF45   
   \              0xF9E910F9   
   \              0x02040602   
   \              0x7FFE817F   
   \   000001B0   0x50A0F050         DC32 1352724560, 1014514748, 2670049951, 2823545768, 1369633617
   \              0x3C78443C   
   \              0x9F25BA9F   
   \              0xA84BE3A8   
   \              0x51A2F351   
   \   000001C4   0xA35DFEA3         DC32 2740846243, 1082179648, 2399505039, 2453646738, 2636233885
   \              0x4080C040   
   \              0x8F058A8F   
   \              0x923FAD92   
   \              0x9D21BC9D   
   \   000001D8   0x38704838         DC32 946882616, 4126213365, 3160661948, 3061301686, 3668932058
   \              0xF5F104F5   
   \              0xBC63DFBC   
   \              0xB677C1B6   
   \              0xDAAF75DA   
   \   000001EC   0x21426321         DC32 557998881, 270544912, 4293204735, 4093447923, 3535760850
   \              0x10203010   
   \              0xFFE51AFF   
   \              0xF3FD0EF3   
   \              0xD2BF6DD2   
   \   00000200   0xCD814CCD         DC32 3447803085, 202904588, 321271059, 3972214764, 1606345055
   \              0x0C18140C   
   \              0x13263513   
   \              0xECC32FEC   
   \              0x5FBEE15F   
   \   00000214   0x9735A297         DC32 2536874647, 1149815876, 388905239, 3297990596, 2807427751
   \              0x4488CC44   
   \              0x172E3917   
   \              0xC49357C4   
   \              0xA755F2A7   
   \   00000228   0x7EFC827E         DC32 2130477694, 1031423805, 1690872932, 1572530013, 422718233
   \              0x3D7A473D   
   \              0x64C8AC64   
   \              0x5DBAE75D   
   \              0x19322B19   
   \   0000023C   0x73E69573         DC32 1944491379, 1623236704, 2165938305, 1335808335, 3701702620
   \              0x60C0A060   
   \              0x81199881   
   \              0x4F9ED14F   
   \              0xDCA37FDC   
   \   00000250   0x22446622         DC32 574907938, 710180394, 2419829648, 2282455944, 1183631942
   \              0x2A547E2A   
   \              0x903BAB90   
   \              0x880B8388   
   \              0x468CCA46   
   \   00000264   0xEEC729EE         DC32 4006029806, 3094074296, 338181140, 3735517662, 1589437022
   \              0xB86BD3B8   
   \              0x14283C14   
   \              0xDEA779DE   
   \              0x5EBCE25E   
   \   00000278   0x0B161D0B         DC32 185998603, 3685578459, 3772464096, 845436466, 980700730, 169090570
   \              0xDBAD76DB   
   \              0xE0DB3BE0   
   \              0x32645632   
   \              0x3A744E3A   
   \              0x0A141E0A   
   \   00000290   0x4992DB49         DC32 1234361161, 101452294, 608726052, 1555620956, 3265224130
   \              0x060C0A06   
   \              0x24486C24   
   \              0x5CB8E45C   
   \              0xC29F5DC2   
   \   000002A4   0xD3BD6ED3         DC32 3552407251, 2890133420, 1657054818, 2436475025, 2503058581
   \              0xAC43EFAC   
   \              0x62C4A662   
   \              0x9139A891   
   \              0x9531A495   
   \   000002B8   0xE4D337E4         DC32 3839047652, 2045938553, 3889509095, 3364570056, 929978679
   \              0x79F28B79   
   \              0xE7D532E7   
   \              0xC88B43C8   
   \              0x376E5937   
   \   000002CC   0x6DDAB76D         DC32 1843050349, 2365688973, 3585172693, 1318900302, 2840191145
   \              0x8D018C8D   
   \              0xD5B164D5   
   \              0x4E9CD24E   
   \              0xA949E0A9   
   \   000002E0   0x6CD8B46C         DC32 1826141292, 1454176854, 4109567988, 3939444202, 1707781989
   \              0x56ACFA56   
   \              0xF4F307F4   
   \              0xEACF25EA   
   \              0x65CAAF65   
   \   000002F4   0x7AF48E7A         DC32 2062847610, 2923948462, 135272456, 3127891386, 2029029496
   \              0xAE47E9AE   
   \              0x08101808   
   \              0xBA6FD5BA   
   \              0x78F08878   
   \   00000308   0x254A6F25         DC32 625635109, 777810478, 473441308, 2790781350, 3027486644
   \              0x2E5C722E   
   \              0x1C38241C   
   \              0xA657F1A6   
   \              0xB473C7B4   
   \   0000031C   0xC69751C6         DC32 3331805638, 3905627112, 3718347997, 1961401460, 524165407
   \              0xE8CB23E8   
   \              0xDDA17CDD   
   \              0x74E89C74   
   \              0x1F3E211F   
   \   00000330   0x4B96DD4B         DC32 1268178251, 3177307325, 2332919435, 2316273034, 1893765232
   \              0xBD61DCBD   
   \              0x8B0D868B   
   \              0x8A0F858A   
   \              0x70E09070   
   \   00000344   0x3E7C423E         DC32 1048330814, 3044132021, 1724688998, 1217452104, 50726147
   \              0xB571C4B5   
   \              0x66CCAA66   
   \              0x4890D848   
   \              0x03060503   
   \   00000358   0xF6F701F6         DC32 4143383030, 236720654, 1640145761, 896163637, 1471084887
   \              0x0E1C120E   
   \              0x61C2A361   
   \              0x356A5F35   
   \              0x57AEF957   
   \   0000036C   0xB969D0B9         DC32 3110719673, 2249691526, 3248052417, 490350365, 2653403550
   \              0x86179186   
   \              0xC19958C1   
   \              0x1D3A271D   
   \              0x9E27B99E   
   \   00000380   0xE1D938E1         DC32 3789109473, 4176155640, 2553000856, 287453969, 1775418217
   \              0xF8EB13F8   
   \              0x982BB398   
   \              0x11223311   
   \              0x69D2BB69   
   \   00000394   0xD9A970D9         DC32 3651760345, 2382858638, 2486413204, 2603464347, 507257374
   \              0x8E07898E   
   \              0x9433A794   
   \              0x9B2DB69B   
   \              0x1E3C221E   
   \   000003A8   0x87159287         DC32 2266337927, 3922272489, 3464972750, 1437269845, 676362280
   \              0xE9C920E9   
   \              0xCE8749CE   
   \              0x55AAFF55   
   \              0x28507828   
   \   000003BC   0xDFA57ADF         DC32 3752164063, 2349043596, 2707028129, 2299101321, 219813645
   \              0x8C038F8C   
   \              0xA159F8A1   
   \              0x89098089   
   \              0x0D1A170D   
   \   000003D0   0xBF65DABF         DC32 3211123391, 3872862694, 1115997762, 1758509160, 1099088705
   \              0xE6D731E6   
   \              0x4284C642   
   \              0x68D0B868   
   \              0x4182C341   
   \   000003E4   0x9929B099         DC32 2569646233, 760903469, 253628687, 2960903088, 1420360788
   \              0x2D5A772D   
   \              0x0F1E110F   
   \              0xB07BCBB0   
   \              0x54A8FC54   
   \   000003F8   0xBB6DD6BB         DC32 3144537787, 371997206
   \              0x162C3A16   
    210          #undef V
    211          
    212          #define V(a,b,c,d) 0x##d##a##b##c

   \                                 In section .rodata, align 4, keep-with-next
    213          static const uint32_t FT3[256] = { FT };
   \                     FT3:
   \   00000000   0xC6A56363         DC32 3332727651, 4169432188, 4003034999, 4136467323, 4279104242
   \              0xF8847C7C   
   \              0xEE997777   
   \              0xF68D7B7B   
   \              0xFF0DF2F2   
   \   00000014   0xD6BD6B6B         DC32 3602738027, 3736170351, 2438251973, 1615867952, 33751297
   \              0xDEB16F6F   
   \              0x9154C5C5   
   \              0x60503030   
   \              0x02030101   
   \   00000028   0xCEA96767         DC32 3467208551, 1451043627, 3877240574, 3043153879, 1306962859
   \              0x567D2B2B   
   \              0xE719FEFE   
   \              0xB562D7D7   
   \              0x4DE6ABAB   
   \   0000003C   0xEC9A7676         DC32 3969545846, 2403715786, 530416258, 2302724553, 4203183485
   \              0x8F45CACA   
   \              0x1F9D8282   
   \              0x8940C9C9   
   \              0xFA877D7D   
   \   00000050   0xEF15FAFA         DC32 4011195130, 3001768281, 2395555655, 4211863792, 1106029997
   \              0xB2EB5959   
   \              0x8EC94747   
   \              0xFB0BF0F0   
   \              0x41ECADAD   
   \   00000064   0xB367D4D4         DC32 3009926356, 1610457762, 1173008303, 599760028, 1408738468
   \              0x5FFDA2A2   
   \              0x45EAAFAF   
   \              0x23BF9C9C   
   \              0x53F7A4A4   
   \   00000078   0xE4967272         DC32 3835064946, 2606481600, 1975695287, 3776773629, 1034851219
   \              0x9B5BC0C0   
   \              0x75C2B7B7   
   \              0xE11CFDFD   
   \              0x3DAE9393   
   \   0000008C   0x4C6A2626         DC32 1282024998, 1817851446, 2118205247, 4110612471, 2203045068
   \              0x6C5A3636   
   \              0x7E413F3F   
   \              0xF502F7F7   
   \              0x834FCCCC   
   \   000000A0   0x685C3434         DC32 1750873140, 1374987685, 3509904869, 4178113009, 3801313649
   \              0x51F4A5A5   
   \              0xD134E5E5   
   \              0xF908F1F1   
   \              0xE2937171   
   \   000000B4   0xAB73D8D8         DC32 2876496088, 1649619249, 708777237, 135005188, 2505230279
   \              0x62533131   
   \              0x2A3F1515   
   \              0x080C0404   
   \              0x9552C7C7   
   \   000000C8   0x46652323         DC32 1181033251, 2640233411, 807933976, 933336726, 168756485, 800430746
   \              0x9D5EC3C3   
   \              0x30281818   
   \              0x37A19696   
   \              0x0A0F0505   
   \              0x2FB59A9A   
   \   000000E0   0x0E090707         DC32 235472647, 607523346, 463175808, 3745374946, 3441880043
   \              0x24361212   
   \              0x1B9B8080   
   \              0xDF3DE2E2   
   \              0xCD26EBEB   
   \   000000F4   0x4E692727         DC32 1315514151, 2144187058, 3936318837, 303761673, 496927619
   \              0x7FCDB2B2   
   \              0xEA9F7575   
   \              0x121B0909   
   \              0x1D9E8383   
   \   00000108   0x58742C2C         DC32 1484008492, 875436570, 908925723, 3702681198, 3035519578
   \              0x342E1A1A   
   \              0x362D1B1B   
   \              0xDCB26E6E   
   \              0xB4EE5A5A   
   \   0000011C   0x5BFBA0A0         DC32 1543217312, 2767606354, 1984772923, 3076642518, 2110698419
   \              0xA4F65252   
   \              0x764D3B3B   
   \              0xB761D6D6   
   \              0x7DCEB3B3   
   \   00000130   0x527B2929         DC32 1383803177, 3711886307, 1584475951, 328696964, 2801095507
   \              0xDD3EE3E3   
   \              0x5E712F2F   
   \              0x13978484   
   \              0xA6F55353   
   \   00000144   0xB968D1D1         DC32 3110654417, 0, 3240947181, 1080041504, 3810524412, 2043195825
   \              0x00000000   
   \              0xC12CEDED   
   \              0x40602020   
   \              0xE31FFCFC   
   \              0x79C8B1B1   
   \   0000015C   0xB6ED5B5B         DC32 3069008731, 3569248874, 2370227147, 1742323390, 1917532473
   \              0xD4BE6A6A   
   \              0x8D46CBCB   
   \              0x67D9BEBE   
   \              0x724B3939   
   \   00000170   0x94DE4A4A         DC32 2497595978, 2564049996, 2968016984, 2236272591, 3144405200
   \              0x98D44C4C   
   \              0xB0E85858   
   \              0x854ACFCF   
   \              0xBB6BD0D0   
   \   00000184   0xC52AEFEF         DC32 3307925487, 1340451498, 3977706491, 2261074755, 2597801293
   \              0x4FE5AAAA   
   \              0xED16FBFB   
   \              0x86C54343   
   \              0x9AD74D4D   
   \   00000198   0x66553333         DC32 1716859699, 294946181, 2328839493, 3910203897, 67502594
   \              0x11948585   
   \              0x8ACF4545   
   \              0xE910F9F9   
   \              0x04060202   
   \   000001AC   0xFE817F7F         DC32 4269899647, 2700103760, 2017737788, 632987551, 1273211048
   \              0xA0F05050   
   \              0x78443C3C   
   \              0x25BA9F9F   
   \              0x4BE3A8A8   
   \   000001C0   0xA2F35151         DC32 2733855057, 1576969123, 2160083008, 92966799, 1068339858
   \              0x5DFEA3A3   
   \              0x80C04040   
   \              0x058A8F8F   
   \              0x3FAD9292   
   \   000001D4   0x21BC9D9D         DC32 566009245, 1883781176, 4043634165, 1675607228, 2009183926
   \              0x70483838   
   \              0xF104F5F5   
   \              0x63DFBCBC   
   \              0x77C1B6B6   
   \   000001E8   0xAF75DADA         DC32 2943736538, 1113792801, 540020752, 3843751935, 4245615603
   \              0x42632121   
   \              0x20301010   
   \              0xE51AFFFF   
   \              0xFD0EF3F3   
   \   000001FC   0xBF6DD2D2         DC32 3211645650, 2169294285, 403966988, 641012499, 3274697964
   \              0x814CCDCD   
   \              0x18140C0C   
   \              0x26351313   
   \              0xC32FECEC   
   \   00000210   0xBEE15F5F         DC32 3202441055, 899848087, 2295088196, 775493399, 2472002756
   \              0x35A29797   
   \              0x88CC4444   
   \              0x2E391717   
   \              0x9357C4C4   
   \   00000224   0x55F2A7A7         DC32 1441965991, 4236410494, 2051489085, 3366741092, 3135724893
   \              0xFC827E7E   
   \              0x7A473D3D   
   \              0xC8AC6464   
   \              0xBAE75D5D   
   \   00000238   0x322B1919         DC32 841685273, 3868554099, 3231735904, 429425025, 2664517455
   \              0xE6957373   
   \              0xC0A06060   
   \              0x19988181   
   \              0x9ED14F4F   
   \   0000024C   0xA37FDCDC         DC32 2743065820, 1147544098, 1417554474, 1001099408, 193169544
   \              0x44662222   
   \              0x547E2A2A   
   \              0x3BAB9090   
   \              0x0B838888   
   \   00000260   0x8CCA4646         DC32 2362066502, 3341414126, 1809037496, 675025940, 2809781982
   \              0xC729EEEE   
   \              0x6BD3B8B8   
   \              0x283C1414   
   \              0xA779DEDE   
   \   00000274   0xBCE25E5E         DC32 3168951902, 371002123, 2910247899, 3678134496, 1683370546
   \              0x161D0B0B   
   \              0xAD76DBDB   
   \              0xDB3BE0E0   
   \              0x64563232   
   \   00000288   0x744E3A3A         DC32 1951283770, 337512970, 2463844681, 201983494, 1215046692
   \              0x141E0A0A   
   \              0x92DB4949   
   \              0x0C0A0606   
   \              0x486C2424   
   \   0000029C   0xB8E45C5C         DC32 3101973596, 2673722050, 3178157011, 1139780780, 3299238498
   \              0x9F5DC2C2   
   \              0xBD6ED3D3   
   \              0x43EFACAC   
   \              0xC4A66262   
   \   000002B0   0x39A89191         DC32 967348625, 832869781, 3543655652, 4069226873, 3576883175
   \              0x31A49595   
   \              0xD337E4E4   
   \              0xF28B7979   
   \              0xD532E7E7   
   \   000002C4   0x8B43C8C8         DC32 2336475336, 1851340599, 3669454189, 25988493, 2976175573
   \              0x6E593737   
   \              0xDAB76D6D   
   \              0x018C8D8D   
   \              0xB164D5D5   
   \   000002D8   0x9CD24E4E         DC32 2631028302, 1239460265, 3635702892, 2902087254, 4077384948
   \              0x49E0A9A9   
   \              0xD8B46C6C   
   \              0xACFA5656   
   \              0xF307F4F4   
   \   000002EC   0xCF25EAEA         DC32 3475368682, 3400492389, 4102978170, 1206496942, 270010376
   \              0xCAAF6565   
   \              0xF48E7A7A   
   \              0x47E9AEAE   
   \              0x10180808   
   \   00000300   0x6FD5BABA         DC32 1876277946, 4035475576, 1248797989, 1550986798, 941890588
   \              0xF0887878   
   \              0x4A6F2525   
   \              0x5C722E2E   
   \              0x38241C1C   
   \   00000314   0x57F1A6A6         DC32 1475454630, 1942467764, 2538718918, 3408128232, 2709315037
   \              0x73C7B4B4   
   \              0x9751C6C6   
   \              0xCB23E8E8   
   \              0xA17CDDDD   
   \   00000328   0xE89C7474         DC32 3902567540, 1042358047, 2531085131, 1641856445, 226921355
   \              0x3E211F1F   
   \              0x96DD4B4B   
   \              0x61DCBDBD   
   \              0x0D868B8B   
   \   0000033C   0x0F858A8A         DC32 260409994, 3767562352, 2084716094, 1908716981, 3433719398
   \              0xE0907070   
   \              0x7C423E3E   
   \              0x71C4B5B5   
   \              0xCCAA6666   
   \   00000350   0x90D84848         DC32 2430093384, 100991747, 4144101110, 470945294, 3265487201
   \              0x06050303   
   \              0xF701F6F6   
   \              0x1C120E0E   
   \              0xC2A36161   
   \   00000364   0x6A5F3535         DC32 1784624437, 2935576407, 1775286713, 395413126, 2572730817
   \              0xAEF95757   
   \              0x69D0B9B9   
   \              0x17918686   
   \              0x9958C1C1   
   \   00000378   0x3A271D1D         DC32 975641885, 666476190, 3644383713, 3943954680, 733190296, 573772049
   \              0x27B99E9E   
   \              0xD938E1E1   
   \              0xEB13F8F8   
   \              0x2BB39898   
   \              0x22331111   
   \   00000390   0xD2BB6969         DC32 3535497577, 2842745305, 126455438, 866620564, 766942107
   \              0xA970D9D9   
   \              0x07898E8E   
   \              0x33A79494   
   \              0x2DB69B9B   
   \   000003A4   0x3C221E1E         DC32 1008868894, 361924487, 3374377449, 2269761230, 2868860245
   \              0x15928787   
   \              0xC920E9E9   
   \              0x8749CECE   
   \              0xAAFF5555   
   \   000003B8   0x50782828         DC32 1350051880, 2776293343, 59739276, 1509466529, 159418761, 437718285
   \              0xA57ADFDF   
   \              0x038F8C8C   
   \              0x59F8A1A1   
   \              0x09808989   
   \              0x1A170D0D   
   \   000003D0   0x65DABFBF         DC32 1708834751, 3610371814, 2227585602, 3501746280, 2193834305
   \              0xD731E6E6   
   \              0x84C64242   
   \              0xD0B86868   
   \              0x82C34141   
   \   000003E4   0x29B09999         DC32 699439513, 1517759789, 504434447, 2076946608, 2835108948
   \              0x5A772D2D   
   \              0x1E110F0F   
   \              0x7BCBB0B0   
   \              0xA8FC5454   
   \   000003F8   0x6DD6BBBB         DC32 1842789307, 742004246
   \              0x2C3A1616   
    214          #undef V
    215          
    216          #undef FT
    217          
    218          /*
    219           * Reverse S-box
    220           */

   \                                 In section .rodata, align 4, keep-with-next
    221          static const unsigned char RSb[256] =
   \                     `RSb`:
   \   00000000   0x52 0x09          DC8 82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215
   \              0x6A 0xD5    
   \              0x30 0x36    
   \              0xA5 0x38    
   \              0xBF 0x40    
   \              0xA3 0x9E    
   \              0x81 0xF3    
   \              0xD7         
   \   0000000F   0xFB 0x7C          DC8 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196
   \              0xE3 0x39    
   \              0x82 0x9B    
   \              0x2F 0xFF    
   \              0x87 0x34    
   \              0x8E 0x43    
   \              0x44 0xC4    
   \   0000001D   0xDE 0xE9          DC8 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11
   \              0xCB 0x54    
   \              0x7B 0x94    
   \              0x32 0xA6    
   \              0xC2 0x23    
   \              0x3D 0xEE    
   \              0x4C 0x95    
   \              0x0B         
   \   0000002C   0x42 0xFA          DC8 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162
   \              0xC3 0x4E    
   \              0x08 0x2E    
   \              0xA1 0x66    
   \              0x28 0xD9    
   \              0x24 0xB2    
   \              0x76 0x5B    
   \              0xA2         
   \   0000003B   0x49 0x6D          DC8 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212
   \              0x8B 0xD1    
   \              0x25 0x72    
   \              0xF8 0xF6    
   \              0x64 0x86    
   \              0x68 0x98    
   \              0x16 0xD4    
   \   00000049   0xA4 0x5C          DC8 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185
   \              0xCC 0x5D    
   \              0x65 0xB6    
   \              0x92 0x6C    
   \              0x70 0x48    
   \              0x50 0xFD    
   \              0xED 0xB9    
   \   00000057   0xDA 0x5E          DC8 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188
   \              0x15 0x46    
   \              0x57 0xA7    
   \              0x8D 0x9D    
   \              0x84 0x90    
   \              0xD8 0xAB    
   \              0x00 0x8C    
   \              0xBC         
   \   00000066   0xD3 0x0A          DC8 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202
   \              0xF7 0xE4    
   \              0x58 0x05    
   \              0xB8 0xB3    
   \              0x45 0x06    
   \              0xD0 0x2C    
   \              0x1E 0x8F    
   \              0xCA         
   \   00000075   0x3F 0x0F          DC8 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79
   \              0x02 0xC1    
   \              0xAF 0xBD    
   \              0x03 0x01    
   \              0x13 0x8A    
   \              0x6B 0x3A    
   \              0x91 0x11    
   \              0x41 0x4F    
   \   00000085   0x67 0xDC          DC8 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172
   \              0xEA 0x97    
   \              0xF2 0xCF    
   \              0xCE 0xF0    
   \              0xB4 0xE6    
   \              0x73 0x96    
   \              0xAC         
   \   00000092   0x74 0x22          DC8 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110
   \              0xE7 0xAD    
   \              0x35 0x85    
   \              0xE2 0xF9    
   \              0x37 0xE8    
   \              0x1C 0x75    
   \              0xDF 0x6E    
   \   000000A0   0x47 0xF1          DC8 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190
   \              0x1A 0x71    
   \              0x1D 0x29    
   \              0xC5 0x89    
   \              0x6F 0xB7    
   \              0x62 0x0E    
   \              0xAA 0x18    
   \              0xBE         
   \   000000AF   0x1B 0xFC          DC8 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120
   \              0x56 0x3E    
   \              0x4B 0xC6    
   \              0xD2 0x79    
   \              0x20 0x9A    
   \              0xDB 0xC0    
   \              0xFE 0x78    
   \   000000BD   0xCD 0x5A          DC8 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89
   \              0xF4 0x1F    
   \              0xDD 0xA8    
   \              0x33 0x88    
   \              0x07 0xC7    
   \              0x31 0xB1    
   \              0x12 0x10    
   \              0x59         
   \   000000CC   0x27 0x80          DC8 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122
   \              0xEC 0x5F    
   \              0x60 0x51    
   \              0x7F 0xA9    
   \              0x19 0xB5    
   \              0x4A 0x0D    
   \              0x2D 0xE5    
   \              0x7A         
   \   000000DB   0x9F 0x93          DC8 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200
   \              0xC9 0x9C    
   \              0xEF 0xA0    
   \              0xE0 0x3B    
   \              0x4D 0xAE    
   \              0x2A 0xF5    
   \              0xB0 0xC8    
   \   000000E9   0xEB 0xBB          DC8 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38
   \              0x3C 0x83    
   \              0x53 0x99    
   \              0x61 0x17    
   \              0x2B 0x04    
   \              0x7E 0xBA    
   \              0x77 0xD6    
   \              0x26         
   \   000000F8   0xE1 0x69          DC8 225, 105, 20, 99, 85, 33, 12, 125
   \              0x14 0x63    
   \              0x55 0x21    
   \              0x0C 0x7D    
    222          {
    223              0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38,
    224              0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    225              0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87,
    226              0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    227              0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D,
    228              0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    229              0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2,
    230              0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    231              0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16,
    232              0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    233              0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA,
    234              0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    235              0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A,
    236              0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    237              0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02,
    238              0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    239              0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA,
    240              0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    241              0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85,
    242              0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    243              0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89,
    244              0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    245              0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20,
    246              0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    247              0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31,
    248              0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    249              0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D,
    250              0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    251              0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0,
    252              0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    253              0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26,
    254              0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
    255          };
    256          
    257          /*
    258           * Reverse tables
    259           */
    260          #define RT \
    261          \
    262              V(50,A7,F4,51), V(53,65,41,7E), V(C3,A4,17,1A), V(96,5E,27,3A), \
    263              V(CB,6B,AB,3B), V(F1,45,9D,1F), V(AB,58,FA,AC), V(93,03,E3,4B), \
    264              V(55,FA,30,20), V(F6,6D,76,AD), V(91,76,CC,88), V(25,4C,02,F5), \
    265              V(FC,D7,E5,4F), V(D7,CB,2A,C5), V(80,44,35,26), V(8F,A3,62,B5), \
    266              V(49,5A,B1,DE), V(67,1B,BA,25), V(98,0E,EA,45), V(E1,C0,FE,5D), \
    267              V(02,75,2F,C3), V(12,F0,4C,81), V(A3,97,46,8D), V(C6,F9,D3,6B), \
    268              V(E7,5F,8F,03), V(95,9C,92,15), V(EB,7A,6D,BF), V(DA,59,52,95), \
    269              V(2D,83,BE,D4), V(D3,21,74,58), V(29,69,E0,49), V(44,C8,C9,8E), \
    270              V(6A,89,C2,75), V(78,79,8E,F4), V(6B,3E,58,99), V(DD,71,B9,27), \
    271              V(B6,4F,E1,BE), V(17,AD,88,F0), V(66,AC,20,C9), V(B4,3A,CE,7D), \
    272              V(18,4A,DF,63), V(82,31,1A,E5), V(60,33,51,97), V(45,7F,53,62), \
    273              V(E0,77,64,B1), V(84,AE,6B,BB), V(1C,A0,81,FE), V(94,2B,08,F9), \
    274              V(58,68,48,70), V(19,FD,45,8F), V(87,6C,DE,94), V(B7,F8,7B,52), \
    275              V(23,D3,73,AB), V(E2,02,4B,72), V(57,8F,1F,E3), V(2A,AB,55,66), \
    276              V(07,28,EB,B2), V(03,C2,B5,2F), V(9A,7B,C5,86), V(A5,08,37,D3), \
    277              V(F2,87,28,30), V(B2,A5,BF,23), V(BA,6A,03,02), V(5C,82,16,ED), \
    278              V(2B,1C,CF,8A), V(92,B4,79,A7), V(F0,F2,07,F3), V(A1,E2,69,4E), \
    279              V(CD,F4,DA,65), V(D5,BE,05,06), V(1F,62,34,D1), V(8A,FE,A6,C4), \
    280              V(9D,53,2E,34), V(A0,55,F3,A2), V(32,E1,8A,05), V(75,EB,F6,A4), \
    281              V(39,EC,83,0B), V(AA,EF,60,40), V(06,9F,71,5E), V(51,10,6E,BD), \
    282              V(F9,8A,21,3E), V(3D,06,DD,96), V(AE,05,3E,DD), V(46,BD,E6,4D), \
    283              V(B5,8D,54,91), V(05,5D,C4,71), V(6F,D4,06,04), V(FF,15,50,60), \
    284              V(24,FB,98,19), V(97,E9,BD,D6), V(CC,43,40,89), V(77,9E,D9,67), \
    285              V(BD,42,E8,B0), V(88,8B,89,07), V(38,5B,19,E7), V(DB,EE,C8,79), \
    286              V(47,0A,7C,A1), V(E9,0F,42,7C), V(C9,1E,84,F8), V(00,00,00,00), \
    287              V(83,86,80,09), V(48,ED,2B,32), V(AC,70,11,1E), V(4E,72,5A,6C), \
    288              V(FB,FF,0E,FD), V(56,38,85,0F), V(1E,D5,AE,3D), V(27,39,2D,36), \
    289              V(64,D9,0F,0A), V(21,A6,5C,68), V(D1,54,5B,9B), V(3A,2E,36,24), \
    290              V(B1,67,0A,0C), V(0F,E7,57,93), V(D2,96,EE,B4), V(9E,91,9B,1B), \
    291              V(4F,C5,C0,80), V(A2,20,DC,61), V(69,4B,77,5A), V(16,1A,12,1C), \
    292              V(0A,BA,93,E2), V(E5,2A,A0,C0), V(43,E0,22,3C), V(1D,17,1B,12), \
    293              V(0B,0D,09,0E), V(AD,C7,8B,F2), V(B9,A8,B6,2D), V(C8,A9,1E,14), \
    294              V(85,19,F1,57), V(4C,07,75,AF), V(BB,DD,99,EE), V(FD,60,7F,A3), \
    295              V(9F,26,01,F7), V(BC,F5,72,5C), V(C5,3B,66,44), V(34,7E,FB,5B), \
    296              V(76,29,43,8B), V(DC,C6,23,CB), V(68,FC,ED,B6), V(63,F1,E4,B8), \
    297              V(CA,DC,31,D7), V(10,85,63,42), V(40,22,97,13), V(20,11,C6,84), \
    298              V(7D,24,4A,85), V(F8,3D,BB,D2), V(11,32,F9,AE), V(6D,A1,29,C7), \
    299              V(4B,2F,9E,1D), V(F3,30,B2,DC), V(EC,52,86,0D), V(D0,E3,C1,77), \
    300              V(6C,16,B3,2B), V(99,B9,70,A9), V(FA,48,94,11), V(22,64,E9,47), \
    301              V(C4,8C,FC,A8), V(1A,3F,F0,A0), V(D8,2C,7D,56), V(EF,90,33,22), \
    302              V(C7,4E,49,87), V(C1,D1,38,D9), V(FE,A2,CA,8C), V(36,0B,D4,98), \
    303              V(CF,81,F5,A6), V(28,DE,7A,A5), V(26,8E,B7,DA), V(A4,BF,AD,3F), \
    304              V(E4,9D,3A,2C), V(0D,92,78,50), V(9B,CC,5F,6A), V(62,46,7E,54), \
    305              V(C2,13,8D,F6), V(E8,B8,D8,90), V(5E,F7,39,2E), V(F5,AF,C3,82), \
    306              V(BE,80,5D,9F), V(7C,93,D0,69), V(A9,2D,D5,6F), V(B3,12,25,CF), \
    307              V(3B,99,AC,C8), V(A7,7D,18,10), V(6E,63,9C,E8), V(7B,BB,3B,DB), \
    308              V(09,78,26,CD), V(F4,18,59,6E), V(01,B7,9A,EC), V(A8,9A,4F,83), \
    309              V(65,6E,95,E6), V(7E,E6,FF,AA), V(08,CF,BC,21), V(E6,E8,15,EF), \
    310              V(D9,9B,E7,BA), V(CE,36,6F,4A), V(D4,09,9F,EA), V(D6,7C,B0,29), \
    311              V(AF,B2,A4,31), V(31,23,3F,2A), V(30,94,A5,C6), V(C0,66,A2,35), \
    312              V(37,BC,4E,74), V(A6,CA,82,FC), V(B0,D0,90,E0), V(15,D8,A7,33), \
    313              V(4A,98,04,F1), V(F7,DA,EC,41), V(0E,50,CD,7F), V(2F,F6,91,17), \
    314              V(8D,D6,4D,76), V(4D,B0,EF,43), V(54,4D,AA,CC), V(DF,04,96,E4), \
    315              V(E3,B5,D1,9E), V(1B,88,6A,4C), V(B8,1F,2C,C1), V(7F,51,65,46), \
    316              V(04,EA,5E,9D), V(5D,35,8C,01), V(73,74,87,FA), V(2E,41,0B,FB), \
    317              V(5A,1D,67,B3), V(52,D2,DB,92), V(33,56,10,E9), V(13,47,D6,6D), \
    318              V(8C,61,D7,9A), V(7A,0C,A1,37), V(8E,14,F8,59), V(89,3C,13,EB), \
    319              V(EE,27,A9,CE), V(35,C9,61,B7), V(ED,E5,1C,E1), V(3C,B1,47,7A), \
    320              V(59,DF,D2,9C), V(3F,73,F2,55), V(79,CE,14,18), V(BF,37,C7,73), \
    321              V(EA,CD,F7,53), V(5B,AA,FD,5F), V(14,6F,3D,DF), V(86,DB,44,78), \
    322              V(81,F3,AF,CA), V(3E,C4,68,B9), V(2C,34,24,38), V(5F,40,A3,C2), \
    323              V(72,C3,1D,16), V(0C,25,E2,BC), V(8B,49,3C,28), V(41,95,0D,FF), \
    324              V(71,01,A8,39), V(DE,B3,0C,08), V(9C,E4,B4,D8), V(90,C1,56,64), \
    325              V(61,84,CB,7B), V(70,B6,32,D5), V(74,5C,6C,48), V(42,57,B8,D0)
    326          
    327          #define V(a,b,c,d) 0x##a##b##c##d

   \                                 In section .text, align 4, keep-with-next
    328          static const uint32_t RT0[256] = { RT };
   \                     RT0:
   \   00000000   0x50A7F451         DC32 1353184337, 1399144830, 3282310938, 2522752826, 3412831035
   \              0x5365417E   
   \              0xC3A4171A   
   \              0x965E273A   
   \              0xCB6BAB3B   
   \   00000014   0xF1459D1F         DC32 4047871263, 2874735276, 2466505547, 1442459680, 4134368941
   \              0xAB58FAAC   
   \              0x9303E34B   
   \              0x55FA3020   
   \              0xF66D76AD   
   \   00000028   0x9176CC88         DC32 2440481928, 625738485, 4242007375, 3620416197, 2151953702
   \              0x254C02F5   
   \              0xFCD7E54F   
   \              0xD7CB2AC5   
   \              0x80443526   
   \   0000003C   0x8FA362B5         DC32 2409849525, 1230680542, 1729870373, 2551114309, 3787521629
   \              0x495AB1DE   
   \              0x671BBA25   
   \              0x980EEA45   
   \              0xE1C0FE5D   
   \   00000050   0x02752FC3         DC32 41234371, 317738113, 2744600205, 3338261355, 3881799427
   \              0x12F04C81   
   \              0xA397468D   
   \              0xC6F9D36B   
   \              0xE75F8F03   
   \   00000064   0x959C9215         DC32 2510066197, 3950669247, 3663286933, 763608788, 3542185048
   \              0xEB7A6DBF   
   \              0xDA595295   
   \              0x2D83BED4   
   \              0xD3217458   
   \   00000078   0x2969E049         DC32 694804553, 1154009486, 1787413109, 2021232372, 1799248025
   \              0x44C8C98E   
   \              0x6A89C275   
   \              0x78798EF4   
   \              0x6B3E5899   
   \   0000008C   0xDD71B927         DC32 3715217703, 3058688446, 397248752, 1722556617, 3023752829
   \              0xB64FE1BE   
   \              0x17AD88F0   
   \              0x66AC20C9   
   \              0xB43ACE7D   
   \   000000A0   0x184ADF63         DC32 407560035, 2184256229, 1613975959, 1165972322, 3765920945
   \              0x82311AE5   
   \              0x60335197   
   \              0x457F5362   
   \              0xE07764B1   
   \   000000B4   0x84AE6BBB         DC32 2226023355, 480281086, 2485848313, 1483229296, 436028815
   \              0x1CA081FE   
   \              0x942B08F9   
   \              0x58684870   
   \              0x19FD458F   
   \   000000C8   0x876CDE94         DC32 2272059028, 3086515026, 601060267, 3791801202, 1468997603
   \              0xB7F87B52   
   \              0x23D373AB   
   \              0xE2024B72   
   \              0x578F1FE3   
   \   000000DC   0x2AAB5566         DC32 715871590, 120122290, 63092015, 2591802758, 2768779219, 4068943920
   \              0x0728EBB2   
   \              0x03C2B52F   
   \              0x9A7BC586   
   \              0xA50837D3   
   \              0xF2872830   
   \   000000F4   0xB2A5BF23         DC32 2997206819, 3127509762, 1552029421, 723308426, 2461301159
   \              0xBA6A0302   
   \              0x5C8216ED   
   \              0x2B1CCF8A   
   \              0x92B479A7   
   \   00000108   0xF0F207F3         DC32 4042393587, 2715969870, 3455375973, 3586000134, 526529745
   \              0xA1E2694E   
   \              0xCDF4DA65   
   \              0xD5BE0506   
   \              0x1F6234D1   
   \   0000011C   0x8AFEA6C4         DC32 2331944644, 2639474228, 2689987490, 853641733, 1978398372
   \              0x9D532E34   
   \              0xA055F3A2   
   \              0x32E18A05   
   \              0x75EBF6A4   
   \   00000130   0x39EC830B         DC32 971801355, 2867814464, 111112542, 1360031421, 4186579262
   \              0xAAEF6040   
   \              0x069F715E   
   \              0x51106EBD   
   \              0xF98A213E   
   \   00000144   0x3D06DD96         DC32 1023860118, 2919579357, 1186850381, 3045938321, 90031217
   \              0xAE053EDD   
   \              0x46BDE64D   
   \              0xB58D5491   
   \              0x055DC471   
   \   00000158   0x6FD40604         DC32 1876166148, 4279586912, 620468249, 2548678102, 3426959497
   \              0xFF155060   
   \              0x24FB9819   
   \              0x97E9BDD6   
   \              0xCC434089   
   \   0000016C   0x779ED967         DC32 2006899047, 3175278768, 2290845959, 945494503, 3689859193
   \              0xBD42E8B0   
   \              0x888B8907   
   \              0x385B19E7   
   \              0xDBEEC879   
   \   00000180   0x470A7CA1         DC32 1191869601, 3910091388, 3374220536, 0, 2206629897, 1223502642
   \              0xE90F427C   
   \              0xC91E84F8   
   \              0x00000000   
   \              0x83868009   
   \              0x48ED2B32   
   \   00000198   0xAC70111E         DC32 2893025566, 1316117100, 4227796733, 1446544655, 517320253
   \              0x4E725A6C   
   \              0xFBFF0EFD   
   \              0x5638850F   
   \              0x1ED5AE3D   
   \   000001AC   0x27392D36         DC32 658058550, 1691946762, 564550760, 3511966619, 976107044
   \              0x64D90F0A   
   \              0x21A65C68   
   \              0xD1545B9B   
   \              0x3A2E3624   
   \   000001C0   0xB1670A0C         DC32 2976320012, 266819475, 3533106868, 2660342555, 1338359936
   \              0x0FE75793   
   \              0xD296EEB4   
   \              0x9E919B1B   
   \              0x4FC5C080   
   \   000001D4   0xA220DC61         DC32 2720062561, 1766553434, 370807324, 179999714, 3844776128
   \              0x694B775A   
   \              0x161A121C   
   \              0x0ABA93E2   
   \              0xE52AA0C0   
   \   000001E8   0x43E0223C         DC32 1138762300, 488053522, 185403662, 2915535858, 3114841645
   \              0x1D171B12   
   \              0x0B0D090E   
   \              0xADC78BF2   
   \              0xB9A8B62D   
   \   000001FC   0xC8A91E14         DC32 3366526484, 2233069911, 1275557295, 3151862254, 4250959779
   \              0x8519F157   
   \              0x4C0775AF   
   \              0xBBDD99EE   
   \              0xFD607FA3   
   \   00000210   0x9F2601F7         DC32 2670068215, 3170202204, 3309004356, 880737115, 1982415755
   \              0xBCF5725C   
   \              0xC53B6644   
   \              0x347EFB5B   
   \              0x7629438B   
   \   00000224   0xDCC623CB         DC32 3703972811, 1761406390, 1676797112, 3403428311, 277177154
   \              0x68FCEDB6   
   \              0x63F1E4B8   
   \              0xCADC31D7   
   \              0x10856342   
   \   00000238   0x40229713         DC32 1076008723, 538035844, 2099530373, 4164795346, 288553390
   \              0x2011C684   
   \              0x7D244A85   
   \              0xF83DBBD2   
   \              0x1132F9AE   
   \   0000024C   0x6DA129C7         DC32 1839278535, 1261411869, 4080055004, 3964831245, 3504587127
   \              0x4B2F9E1D   
   \              0xF330B2DC   
   \              0xEC52860D   
   \              0xD0E3C177   
   \   00000260   0x6C16B32B         DC32 1813426987, 2579067049, 4199060497, 577038663, 3297574056
   \              0x99B970A9   
   \              0xFA489411   
   \              0x2264E947   
   \              0xC48CFCA8   
   \   00000274   0x1A3FF0A0         DC32 440397984, 3626794326, 4019204898, 3343796615, 3251714265
   \              0xD82C7D56   
   \              0xEF903322   
   \              0xC74E4987   
   \              0xC1D138D9   
   \   00000288   0xFEA2CA8C         DC32 4272081548, 906744984, 3481400742, 685669029, 646887386
   \              0x360BD498   
   \              0xCF81F5A6   
   \              0x28DE7AA5   
   \              0x268EB7DA   
   \   0000029C   0xA4BFAD3F         DC32 2764025151, 3835509292, 227702864, 2613862250, 1648787028
   \              0xE49D3A2C   
   \              0x0D927850   
   \              0x9BCC5F6A   
   \              0x62467E54   
   \   000002B0   0xC2138DF6         DC32 3256061430, 3904428176, 1593260334, 4121936770, 3196083615
   \              0xE8B8D890   
   \              0x5EF7392E   
   \              0xF5AFC382   
   \              0xBE805D9F   
   \   000002C4   0x7C93D069         DC32 2090061929, 2838353263, 3004310991, 999926984, 2809993232
   \              0xA92DD56F   
   \              0xB31225CF   
   \              0x3B99ACC8   
   \              0xA77D1810   
   \   000002D8   0x6E639CE8         DC32 1852021992, 2075868123, 158869197, 4095236462, 28809964
   \              0x7BBB3BDB   
   \              0x097826CD   
   \              0xF418596E   
   \              0x01B79AEC   
   \   000002EC   0xA89A4F83         DC32 2828685187, 1701746150, 2129067946, 147831841, 3873969647
   \              0x656E95E6   
   \              0x7EE6FFAA   
   \              0x08CFBC21   
   \              0xE6E815EF   
   \   00000300   0xD99BE7BA         DC32 3650873274, 3459673930, 3557400554, 3598495785, 2947720241
   \              0xCE366F4A   
   \              0xD4099FEA   
   \              0xD67CB029   
   \              0xAFB2A431   
   \   00000314   0x31233F2A         DC32 824393514, 815048134, 3227951669, 935087732, 2798289660
   \              0x3094A5C6   
   \              0xC066A235   
   \              0x37BC4E74   
   \              0xA6CA82FC   
   \   00000328   0xB0D090E0         DC32 2966458592, 366520115, 1251476721, 4158319681, 240176511
   \              0x15D8A733   
   \              0x4A9804F1   
   \              0xF7DAEC41   
   \              0x0E50CD7F   
   \   0000033C   0x2FF69117         DC32 804688151, 2379631990, 1303441219, 1414376140, 3741619940
   \              0x8DD64D76   
   \              0x4DB0EF43   
   \              0x544DAACC   
   \              0xDF0496E4   
   \   00000350   0xE3B5D19E         DC32 3820343710, 461924940, 3089050817, 2136040774, 82468509
   \              0x1B886A4C   
   \              0xB81F2CC1   
   \              0x7F516546   
   \              0x04EA5E9D   
   \   00000364   0x5D358C01         DC32 1563790337, 1937016826, 776014843, 1511876531, 1389550482
   \              0x737487FA   
   \              0x2E410BFB   
   \              0x5A1D67B3   
   \              0x52D2DB92   
   \   00000378   0x335610E9         DC32 861278441, 323475053, 2355222426, 2047648055, 2383738969
   \              0x1347D66D   
   \              0x8C61D79A   
   \              0x7A0CA137   
   \              0x8E14F859   
   \   0000038C   0x893C13EB         DC32 2302415851, 3995576782, 902390199, 3991215329, 1018251130
   \              0xEE27A9CE   
   \              0x35C961B7   
   \              0xEDE51CE1   
   \              0x3CB1477A   
   \   000003A0   0x59DFD29C         DC32 1507840668, 1064563285, 2043548696, 3208103795, 3939366739
   \              0x3F73F255   
   \              0x79CE1418   
   \              0xBF37C773   
   \              0xEACDF753   
   \   000003B4   0x5BAAFD5F         DC32 1537932639, 342834655, 2262516856, 2180231114, 1053059257
   \              0x146F3DDF   
   \              0x86DB4478   
   \              0x81F3AFCA   
   \              0x3EC468B9   
   \   000003C8   0x2C342438         DC32 741614648, 1598071746, 1925389590, 203809468, 2336832552
   \              0x5F40A3C2   
   \              0x72C31D16   
   \              0x0C25E2BC   
   \              0x8B493C28   
   \   000003DC   0x41950DFF         DC32 1100287487, 1895934009, 3736275976, 2632234200, 2428589668
   \              0x7101A839   
   \              0xDEB30C08   
   \              0x9CE4B4D8   
   \              0x90C15664   
   \   000003F0   0x6184CB7B         DC32 1636092795, 1890988757, 1952214088, 1113045200
   \              0x70B632D5   
   \              0x745C6C48   
   \              0x4257B8D0   
    329          #undef V
    330          
    331          #define V(a,b,c,d) 0x##b##c##d##a

   \                                 In section .rodata, align 4, keep-with-next
    332          static const uint32_t RT1[256] = { RT };
   \                     RT1:
   \   00000000   0xA7F45150         DC32 2817806672, 1698790995, 2752977603, 1579629206, 1806384075
   \              0x65417E53   
   \              0xA4171AC3   
   \              0x5E273A96   
   \              0x6BAB3BCB   
   \   00000014   0x459D1FF1         DC32 1167925233, 1492823211, 65227667, 4197458005, 1836494326
   \              0x58FAACAB   
   \              0x03E34B93   
   \              0xFA302055   
   \              0x6D76ADF6   
   \   00000028   0x76CC8891         DC32 1993115793, 1275262245, 3622129660, 3408578007, 1144333952
   \              0x4C02F525   
   \              0xD7E54FFC   
   \              0xCB2AC5D7   
   \              0x44352680   
   \   0000003C   0xA362B58F         DC32 2741155215, 1521606217, 465184103, 250234264, 3237895649
   \              0x5AB1DE49   
   \              0x1BBA2567   
   \              0x0EEA4598   
   \              0xC0FE5DE1   
   \   00000050   0x752FC302         DC32 1966064386, 4031545618, 2537983395, 4191382470, 1603208167
   \              0xF04C8112   
   \              0x97468DA3   
   \              0xF9D36BC6   
   \              0x5F8F03E7   
   \   00000064   0x9C921595         DC32 2626819477, 2054012907, 1498584538, 2210321453, 561273043
   \              0x7A6DBFEB   
   \              0x595295DA   
   \              0x83BED42D   
   \              0x217458D3   
   \   00000078   0x69E04929         DC32 1776306473, 3368652356, 2311222634, 2039411832, 1045993835
   \              0xC8C98E44   
   \              0x89C2756A   
   \              0x798EF478   
   \              0x3E58996B   
   \   0000008C   0x71B927DD         DC32 1907959773, 1340194486, 2911432727, 2887829862, 986611124
   \              0x4FE1BEB6   
   \              0xAD88F017   
   \              0xAC20C966   
   \              0x3ACE7DB4   
   \   000000A0   0x4ADF6318         DC32 1256153880, 823846274, 860985184, 2136171077, 2003087840
   \              0x311AE582   
   \              0x33519760   
   \              0x7F536245   
   \              0x7764B1E0   
   \   000000B4   0xAE6BBB84         DC32 2926295940, 2692873756, 722008468, 1749577816, 4249194265
   \              0xA081FE1C   
   \              0x2B08F994   
   \              0x68487058   
   \              0xFD458F19   
   \   000000C8   0x6CDE9487         DC32 1826526343, 4168831671, 3547573027, 38499042, 2401231703
   \              0xF87B52B7   
   \              0xD373AB23   
   \              0x024B72E2   
   \              0x8F1FE357   
   \   000000DC   0xAB55662A         DC32 2874500650, 686535175, 3266653955, 2076542618, 137876389
   \              0x28EBB207   
   \              0xC2B52F03   
   \              0x7BC5869A   
   \              0x0837D3A5   
   \   000000F0   0x872830F2         DC32 2267558130, 2780767154, 1778582202, 2182540636, 483363371
   \              0xA5BF23B2   
   \              0x6A0302BA   
   \              0x8216ED5C   
   \              0x1CCF8A2B   
   \   00000104   0xB479A792         DC32 3027871634, 4060607472, 3798552225, 4107953613, 3188000469
   \              0xF207F3F0   
   \              0xE2694EA1   
   \              0xF4DA65CD   
   \              0xBE0506D5   
   \   00000118   0x6234D11F         DC32 1647628575, 4272342154, 1395537053, 1442030240, 3783918898
   \              0xFEA6C48A   
   \              0x532E349D   
   \              0x55F3A2A0   
   \              0xE18A0532   
   \   0000012C   0xEBF6A475         DC32 3958809717, 3968011065, 4016062634, 2675006982, 275692881
   \              0xEC830B39   
   \              0xEF6040AA   
   \              0x9F715E06   
   \              0x106EBD51   
   \   00000140   0x8A213EF9         DC32 2317434617, 115185213, 88006062, 3185986886, 2371129781
   \              0x06DD963D   
   \              0x053EDDAE   
   \              0xBDE64D46   
   \              0x8D5491B5   
   \   00000154   0x5DC47105         DC32 1573155077, 3557164143, 357589247, 4221049124, 3921532567
   \              0xD406046F   
   \              0x155060FF   
   \              0xFB981924   
   \              0xE9BDD697   
   \   00000168   0x434089CC         DC32 1128303052, 2665047927, 1122545853, 2341013384, 1528424248
   \              0x9ED96777   
   \              0x42E8B0BD   
   \              0x8B890788   
   \              0x5B19E738   
   \   0000017C   0xEEC879DB         DC32 4006115803, 175939911, 256015593, 512030921, 0, 2256537987
   \              0x0A7CA147   
   \              0x0F427CE9   
   \              0x1E84F8C9   
   \              0x00000000   
   \              0x86800983   
   \   00000194   0xED2B3248         DC32 3979031112, 1880170156, 1918528590, 4279172603, 948244310
   \              0x70111EAC   
   \              0x725A6C4E   
   \              0xFF0EFDFB   
   \              0x38850F56   
   \   000001A8   0xD5AE3D1E         DC32 3584965918, 959264295, 3641641572, 2791073825, 1415289809
   \              0x392D3627   
   \              0xD90F0A64   
   \              0xA65C6821   
   \              0x545B9BD1   
   \   000001BC   0x2E36243A         DC32 775300154, 1728711857, 3881276175, 2532226258, 2442861470
   \              0x670A0CB1   
   \              0xE757930F   
   \              0x96EEB4D2   
   \              0x919B1B9E   
   \   000001D0   0xC5C0804F         DC32 3317727311, 551313826, 1266113129, 437394454, 3130253834
   \              0x20DC61A2   
   \              0x4B775A69   
   \              0x1A121C16   
   \              0xBA93E20A   
   \   000001E4   0x2AA0C0E5         DC32 715178213, 3760340035, 387650077, 218697227, 3347837613
   \              0xE0223C43   
   \              0x171B121D   
   \              0x0D090E0B   
   \              0xC78BF2AD   
   \   000001F8   0xA8B62DB9         DC32 2830511545, 2837320904, 435246981, 125153100, 3717852859
   \              0xA91E14C8   
   \              0x19F15785   
   \              0x0775AF4C   
   \              0xDD99EEBB   
   \   0000020C   0x607FA3FD         DC32 1618977789, 637663135, 4117912764, 996558021, 2130402100
   \              0x2601F79F   
   \              0xF5725CBC   
   \              0x3B6644C5   
   \              0x7EFB5B34   
   \   00000220   0x29438B76         DC32 692292470, 3324234716, 4243437160, 4058298467, 3694254026
   \              0xC623CBDC   
   \              0xFCEDB668   
   \              0xF1E4B863   
   \              0xDC31D7CA   
   \   00000234   0x85634210         DC32 2237874704, 580326208, 298222624, 608863613, 1035719416, 855223825
   \              0x22971340   
   \              0x11C68420   
   \              0x244A857D   
   \              0x3DBBD2F8   
   \              0x32F9AE11   
   \   0000024C   0xA129C76D         DC32 2703869805, 798891339, 817028339, 1384517100, 3821107152
   \              0x2F9E1D4B   
   \              0x30B2DCF3   
   \              0x52860DEC   
   \              0xE3C177D0   
   \   00000260   0x16B32B6C         DC32 380840812, 3111168409, 1217663482, 1693009698, 2365368516
   \              0xB970A999   
   \              0x489411FA   
   \              0x64E94722   
   \              0x8CFCA8C4   
   \   00000274   0x3FF0A01A         DC32 1072734234, 746411736, 2419270383, 1313441735, 3510163905
   \              0x2C7D56D8   
   \              0x903322EF   
   \              0x4E4987C7   
   \              0xD138D9C1   
   \   00000288   0xA2CA8CFE         DC32 2731183358, 198481974, 2180359887, 3732579624, 2394413606
   \              0x0BD49836   
   \              0x81F5A6CF   
   \              0xDE7AA528   
   \              0x8EB7DA26   
   \   0000029C   0xBFAD3FA4         DC32 3215802276, 2637835492, 2457358349, 3428805275, 1182684258
   \              0x9D3A2CE4   
   \              0x9278500D   
   \              0xCC5F6A9B   
   \              0x467E5462   
   \   000002B0   0x138DF6C2         DC32 328070850, 3101200616, 4147719774, 2948825845, 2153619390
   \              0xB8D890E8   
   \              0xF7392E5E   
   \              0xAFC382F5   
   \              0x805D9FBE   
   \   000002C4   0x93D0697C         DC32 2479909244, 768962473, 304467891, 2578237499, 2098729127
   \              0x2DD56FA9   
   \              0x1225CFB3   
   \              0x99ACC83B   
   \              0x7D1810A7   
   \   000002D8   0x639CE86E         DC32 1671227502, 3141262203, 2015808777, 408514292, 3080383489
   \              0xBB3BDB7B   
   \              0x7826CD09   
   \              0x18596EF4   
   \              0xB79AEC01   
   \   000002EC   0x9A4F83A8         DC32 2588902312, 1855317605, 3875515006, 3485212936, 3893751782
   \              0x6E95E665   
   \              0xE6FFAA7E   
   \              0xCFBC2108   
   \              0xE815EFE6   
   \   00000300   0x9BE7BAD9         DC32 2615655129, 913263310, 161475284, 2091919830, 2997105071
   \              0x366F4ACE   
   \              0x099FEAD4   
   \              0x7CB029D6   
   \              0xB2A431AF   
   \   00000314   0x233F2A31         DC32 591342129, 2493892144, 1721906624, 3159258167, 3397581990
   \              0x94A5C630   
   \              0x66A235C0   
   \              0xBC4E7437   
   \              0xCA82FCA6   
   \   00000328   0xD090E0B0         DC32 3499155632, 3634836245, 2550460746, 3672916471, 1355644686
   \              0xD8A73315   
   \              0x9804F14A   
   \              0xDAEC41F7   
   \              0x50CD7F0E   
   \   0000033C   0xF691172F         DC32 4136703791, 3595400845, 2968470349, 1303039060, 76997855
   \              0xD64D768D   
   \              0xB0EF434D   
   \              0x4DAACC54   
   \              0x0496E4DF   
   \   00000350   0xB5D19EE3         DC32 3050413795, 2288667675, 523026872, 1365591679, 3932069124
   \              0x886A4C1B   
   \              0x1F2CC1B8   
   \              0x5165467F   
   \              0xEA5E9D04   
   \   00000364   0x358C015D         DC32 898367837, 1955068531, 1091304238, 493335386, 3537605202
   \              0x7487FA73   
   \              0x410BFB2E   
   \              0x1D67B35A   
   \              0xD2DB9252   
   \   00000378   0x5610E933         DC32 1443948851, 1205234963, 1641519756, 211892090, 351820174
   \              0x47D66D13   
   \              0x61D79A8C   
   \              0x0CA1377A   
   \              0x14F8598E   
   \   0000038C   0x3C13EB89         DC32 1007938441, 665439982, 3378624309, 3843875309, 2974251580
   \              0x27A9CEEE   
   \              0xC961B735   
   \              0xE51CE1ED   
   \              0xB1477A3C   
   \   000003A0   0xDFD29C59         DC32 3755121753, 1945261375, 3457423481, 935818175, 3455538154
   \              0x73F2553F   
   \              0xCE141879   
   \              0x37C773BF   
   \              0xCDF753EA   
   \   000003B4   0xAAFD5F5B         DC32 2868731739, 1866325780, 3678697606, 4088384129, 3295197502
   \              0x6F3DDF14   
   \              0xDB447886   
   \              0xF3AFCA81   
   \              0xC468B93E   
   \   000003C8   0x3424382C         DC32 874788908, 1084473951, 3273463410, 635616268, 1228679307
   \              0x40A3C25F   
   \              0xC31D1672   
   \              0x25E2BC0C   
   \              0x493C288B   
   \   000003DC   0x950DFF41         DC32 2500722497, 27801969, 3003910366, 3837057180, 3243664528
   \              0x01A83971   
   \              0xB30C08DE   
   \              0xE4B4D89C   
   \              0xC1566490   
   \   000003F0   0x84CB7B61         DC32 2227927905, 3056784752, 1550600308, 1471729730
   \              0xB632D570   
   \              0x5C6C4874   
   \              0x57B8D042   
    333          #undef V
    334          
    335          #define V(a,b,c,d) 0x##c##d##a##b

   \                                 In section .rodata, align 4, keep-with-next
    336          static const uint32_t RT2[256] = { RT };
   \                     RT2:
   \   00000000   0xF45150A7         DC32 4098969767, 1098797925, 387629988, 658151006, 2872822635
   \              0x417E5365   
   \              0x171AC3A4   
   \              0x273A965E   
   \              0xAB3BCB6B   
   \   00000014   0x9D1FF145         DC32 2636116293, 4205620056, 3813380867, 807425530, 1991112301
   \              0xFAACAB58   
   \              0xE34B9303   
   \              0x302055FA   
   \              0x76ADF66D   
   \   00000028   0xCC889176         DC32 3431502198, 49620300, 3847224535, 717608907, 891715652, 1656065955
   \              0x02F5254C   
   \              0xE54FFCD7   
   \              0x2AC5D7CB   
   \              0x35268044   
   \              0x62B58FA3   
   \   00000040   0xB1DE495A         DC32 2984135002, 3123013403, 3930429454, 4267565504, 801309301
   \              0xBA25671B   
   \              0xEA45980E   
   \              0xFE5DE1C0   
   \              0x2FC30275   
   \   00000054   0x4C8112F0         DC32 1283527408, 1183687575, 3547055865, 2399397727, 2450888092
   \              0x468DA397   
   \              0xD36BC6F9   
   \              0x8F03E75F   
   \              0x9215959C   
   \   00000068   0x6DBFEB7A         DC32 1841294202, 1385552473, 3201576323, 1951978273, 3762891113
   \              0x5295DA59   
   \              0xBED42D83   
   \              0x7458D321   
   \              0xE0492969   
   \   0000007C   0xC98E44C8         DC32 3381544136, 3262474889, 2398386297, 1486449470, 3106397553
   \              0xC2756A89   
   \              0x8EF47879   
   \              0x58996B3E   
   \              0xB927DD71   
   \   00000090   0xE1BEB64F         DC32 3787372111, 2297436077, 550069932, 3464344634, 3747813450
   \              0x88F017AD   
   \              0x20C966AC   
   \              0xCE7DB43A   
   \              0xDF63184A   
   \   000000A4   0x1AE58231         DC32 451248689, 1368875059, 1398949247, 1689378935, 1807451310
   \              0x51976033   
   \              0x5362457F   
   \              0x64B1E077   
   \              0x6BBB84AE   
   \   000000B8   0x81FE1CA0         DC32 2180914336, 150574123, 1215322216, 1167006205, 3734275948
   \              0x08F9942B   
   \              0x48705868   
   \              0x458F19FD   
   \              0xDE94876C   
   \   000000CC   0x7B52B7F8         DC32 2069018616, 1940595667, 1265820162, 534992783, 1432758955
   \              0x73AB23D3   
   \              0x4B72E202   
   \              0x1FE3578F   
   \              0x55662AAB   
   \   000000E0   0xEBB20728         DC32 3954313000, 3039757250, 3313932923, 936617224, 674296455
   \              0xB52F03C2   
   \              0xC5869A7B   
   \              0x37D3A508   
   \              0x2830F287   
   \   000000F4   0xBF23B2A5         DC32 3206787749, 50510442, 384654466, 3481938716, 2041025204, 133427442
   \              0x0302BA6A   
   \              0x16ED5C82   
   \              0xCF8A2B1C   
   \              0x79A792B4   
   \              0x07F3F0F2   
   \   0000010C   0x694EA1E2         DC32 1766760930, 3664104948, 84334014, 886120290, 2797898494, 775200083
   \              0xDA65CDF4   
   \              0x0506D5BE   
   \              0x34D11F62   
   \              0xA6C48AFE   
   \              0x2E349D53   
   \   00000124   0xF3A2A055         DC32 4087521365, 2315596513, 4137973227, 2198551020, 1614850799
   \              0x8A0532E1   
   \              0xF6A475EB   
   \              0x830B39EC   
   \              0x6040AAEF   
   \   00000138   0x715E069F         DC32 1901987487, 1857900816, 557775242, 3717610758, 1054715397
   \              0x6EBD5110   
   \              0x213EF98A   
   \              0xDD963D06   
   \              0x3EDDAE05   
   \   0000014C   0xE64D46BD         DC32 3863824061, 1418835341, 3295741277, 100954068, 1348534037
   \              0x5491B58D   
   \              0xC471055D   
   \              0x06046FD4   
   \              0x5060FF15   
   \   00000160   0x981924FB         DC32 2551784699, 3184957417, 1082772547, 3647436702, 3903896898
   \              0xBDD697E9   
   \              0x4089CC43   
   \              0xD967779E   
   \              0xE8B0BD42   
   \   00000174   0x8907888B         DC32 2298972299, 434583643, 3363429358, 2090944266, 1115482383
   \              0x19E7385B   
   \              0xC879DBEE   
   \              0x7CA1470A   
   \              0x427CE90F   
   \   00000188   0x84F8C91E         DC32 2230896926, 0, 2148107142, 724715757, 287222896, 1517047410
   \              0x00000000   
   \              0x80098386   
   \              0x2B3248ED   
   \              0x111EAC70   
   \              0x5A6C4E72   
   \   000001A0   0x0EFDFBFF         DC32 251526143, 2232374840, 2923241173, 758523705, 252339417
   \              0x850F5638   
   \              0xAE3D1ED5   
   \              0x2D362739   
   \              0x0F0A64D9   
   \   000001B4   0x5C6821A6         DC32 1550328230, 1536938324, 908343854, 168604007, 1469255655
   \              0x5B9BD154   
   \              0x36243A2E   
   \              0x0A0CB167   
   \              0x57930FE7   
   \   000001C8   0xEEB4D296         DC32 4004827798, 2602278545, 3229634501, 3697386016, 2002413899
   \              0x9B1B9E91   
   \              0xC0804FC5   
   \              0xDC61A220   
   \              0x775A694B   
   \   000001DC   0x121C161A         DC32 303830554, 2481064634, 2696996138, 574374880, 454171927, 151915277
   \              0x93E20ABA   
   \              0xA0C0E52A   
   \              0x223C43E0   
   \              0x1B121D17   
   \              0x090E0B0D   
   \   000001F4   0x8BF2ADC7         DC32 2347937223, 3056449960, 504678569, 4049044761, 1974422535
   \              0xB62DB9A8   
   \              0x1E14C8A9   
   \              0xF1578519   
   \              0x75AF4C07   
   \   00000208   0x99EEBBDD         DC32 2582559709, 2141453664, 33005350, 1918680309, 1715782971
   \              0x7FA3FD60   
   \              0x01F79F26   
   \              0x725CBCF5   
   \              0x6644C53B   
   \   0000021C   0xFB5B347E         DC32 4217058430, 1133213225, 600562886, 3988154620, 3837289457
   \              0x438B7629   
   \              0x23CBDCC6   
   \              0xEDB668FC   
   \              0xE4B863F1   
   \   00000230   0x31D7CADC         DC32 836225756, 1665273989, 2534621218, 3330547729, 1250262308
   \              0x63421085   
   \              0x97134022   
   \              0xC6842011   
   \              0x4A857D24   
   \   00000244   0xBBD2F83D         DC32 3151165501, 4188934450, 700935585, 2652719919, 3000824624
   \              0xF9AE1132   
   \              0x29C76DA1   
   \              0x9E1D4B2F   
   \              0xB2DCF330   
   \   00000258   0x860DEC52         DC32 2249059410, 3245854947, 3005967382, 1890163129, 2484206152
   \              0xC177D0E3   
   \              0xB32B6C16   
   \              0x70A999B9   
   \              0x9411FA48   
   \   0000026C   0xE9472264         DC32 3913753188, 4238918796, 4037024319, 2102843436, 857927568
   \              0xFCA8C48C   
   \              0xF0A01A3F   
   \              0x7D56D82C   
   \              0x3322EF90   
   \   00000280   0x4987C74E         DC32 1233635150, 953795025, 3398237858, 3566745099, 4121350017
   \              0x38D9C1D1   
   \              0xCA8CFEA2   
   \              0xD498360B   
   \              0xF5A6CF81   
   \   00000294   0x7AA528DE         DC32 2057644254, 3084527246, 2906629311, 976020637, 2018512274
   \              0xB7DA268E   
   \              0xAD3FA4BF   
   \              0x3A2CE49D   
   \              0x78500D92   
   \   000002A8   0x5F6A9BCC         DC32 1600822220, 2119459398, 2381758995, 3633375416, 959340279
   \              0x7E546246   
   \              0x8DF6C213   
   \              0xD890E8B8   
   \              0x392E5EF7   
   \   000002BC   0xC382F5AF         DC32 3280139695, 1570750080, 3496574099, 3580864813, 634368786
   \              0x5D9FBE80   
   \              0xD0697C93   
   \              0xD56FA92D   
   \              0x25CFB312   
   \   000002D0   0xACC83B99         DC32 2898803609, 403744637, 2632478307, 1004239803, 650971512
   \              0x1810A77D   
   \              0x9CE86E63   
   \              0x3BDB7BBB   
   \              0x26CD0978   
   \   000002E4   0x596EF418         DC32 1500443672, 2599158199, 1334028442, 2514904430, 4289363686
   \              0x9AEC01B7   
   \              0x4F83A89A   
   \              0x95E6656E   
   \              0xFFAA7EE6   
   \   000002F8   0xBC2108CF         DC32 3156281551, 368043752, 3887782299, 1867173430, 2682967049
   \              0x15EFE6E8   
   \              0xE7BAD99B   
   \              0x6F4ACE36   
   \              0x9FEAD409   
   \   0000030C   0xB029D67C         DC32 2955531900, 2754719666, 1059729699, 2781229204, 2721431654
   \              0xA431AFB2   
   \              0x3F2A3123   
   \              0xA5C63094   
   \              0xA235C066   
   \   00000320   0x4E7437BC         DC32 1316239292, 2197595850, 2430644432, 2805143000, 82922136
   \              0x82FCA6CA   
   \              0x90E0B0D0   
   \              0xA73315D8   
   \              0x04F14A98   
   \   00000334   0xEC41F7DA         DC32 3963746266, 3447656016, 2434215926, 1299615190, 4014165424
   \              0xCD7F0E50   
   \              0x91172FF6   
   \              0x4D768DD6   
   \              0xEF434DB0   
   \   00000348   0xAACC544D         DC32 2865517645, 2531581700, 3516851125, 1783372680, 750893087
   \              0x96E4DF04   
   \              0xD19EE3B5   
   \              0x6A4C1B88   
   \              0x2CC1B81F   
   \   0000035C   0x65467F51         DC32 1699118929, 1587348714, 2348899637, 2281337716, 201010753
   \              0x5E9D04EA   
   \              0x8C015D35   
   \              0x87FA7374   
   \              0x0BFB2E41   
   \   00000370   0x67B35A1D         DC32 1739807261, 3683799762, 283718486, 3597472583, 3617229921
   \              0xDB9252D2   
   \              0x10E93356   
   \              0xD66D1347   
   \              0xD79A8C61   
   \   00000384   0xA1377A0C         DC32 2704767500, 4166618644, 334203196, 2848910887, 1639396809
   \              0xF8598E14   
   \              0x13EB893C   
   \              0xA9CEEE27   
   \              0x61B735C9   
   \   00000398   0x1CE1EDE5         DC32 484568549, 1199193265, 3533461983, 4065673075, 337148366
   \              0x477A3CB1   
   \              0xD29C59DF   
   \              0xF2553F73   
   \              0x141879CE   
   \   000003AC   0xC773BF37         DC32 3346251575, 4149471949, 4250885034, 1038029935, 1148749531
   \              0xF753EACD   
   \              0xFD5F5BAA   
   \              0x3DDF146F   
   \              0x447886DB   
   \   000003C0   0xAFCA81F3         DC32 2949284339, 1756970692, 607661108, 2747424576, 488010435
   \              0x68B93EC4   
   \              0x24382C34   
   \              0xA3C25F40   
   \              0x1D1672C3   
   \   000003D4   0xE2BC0C25         DC32 3803974693, 1009290057, 234832277, 2822336769, 201907891
   \              0x3C288B49   
   \              0x0DFF4195   
   \              0xA8397101   
   \              0x0C08DEB3   
   \   000003E8   0xB4D89CE4         DC32 3034094820, 1449431233, 3413860740, 852848822, 1816687708
   \              0x566490C1   
   \              0xCB7B6184   
   \              0x32D570B6   
   \              0x6C48745C   
   \   000003FC   0xB8D04257         DC32 3100656215
    337          #undef V
    338          
    339          #define V(a,b,c,d) 0x##d##a##b##c

   \                                 In section .rodata, align 4, keep-with-next
    340          static const uint32_t RT3[256] = { RT };
   \                     RT3:
   \   00000000   0x5150A7F4         DC32 1364240372, 2119394625, 449029143, 982933031, 1003187115
   \              0x7E536541   
   \              0x1AC3A417   
   \              0x3A965E27   
   \              0x3BCB6BAB   
   \   00000014   0x1FF1459D         DC32 535905693, 2896910586, 1267925987, 542505520, 2918608246
   \              0xACAB58FA   
   \              0x4B9303E3   
   \              0x2055FA30   
   \              0xADF66D76   
   \   00000028   0x889176CC         DC32 2291234508, 4112862210, 1341970405, 3319253802, 645940277
   \              0xF5254C02   
   \              0x4FFCD7E5   
   \              0xC5D7CB2A   
   \              0x26804435   
   \   0000003C   0xB58FA362         DC32 3046089570, 3729349297, 627514298, 1167593194, 1575076094
   \              0xDE495AB1   
   \              0x25671BBA   
   \              0x45980EEA   
   \              0x5DE1C0FE   
   \   00000050   0xC302752F         DC32 3271718191, 2165502028, 2376308550, 1808202195, 65494927
   \              0x8112F04C   
   \              0x8DA39746   
   \              0x6BC6F9D3   
   \              0x03E75F8F   
   \   00000064   0x15959C92         DC32 362126482, 3219880557, 2514114898, 3559752638, 1490231668
   \              0xBFEB7A6D   
   \              0x95DA5952   
   \              0xD42D83BE   
   \              0x58D32174   
   \   00000078   0x492969E0         DC32 1227450848, 2386872521, 1969916354, 4101536142, 2573942360
   \              0x8E44C8C9   
   \              0x756A89C2   
   \              0xF478798E   
   \              0x996B3E58   
   \   0000008C   0x27DD71B9         DC32 668823993, 3199619041, 4028083592, 3378949152, 2108963534
   \              0xBEB64FE1   
   \              0xF017AD88   
   \              0xC966AC20   
   \              0x7DB43ACE   
   \   000000A0   0x63184ADF         DC32 1662536415, 3850514714, 2539664209, 1648721747, 2984277860
   \              0xE582311A   
   \              0x97603351   
   \              0x62457F53   
   \              0xB1E07764   
   \   000000B4   0xBB84AE6B         DC32 3146034795, 4263288961, 4187237128, 1884842056, 2400845125
   \              0xFE1CA081   
   \              0xF9942B08   
   \              0x70586848   
   \              0x8F19FD45   
   \   000000C8   0x94876CDE         DC32 2491903198, 1387788411, 2871251827, 1927414347, 3814166303
   \              0x52B7F87B   
   \              0xAB23D373   
   \              0x72E2024B   
   \              0xE3578F1F   
   \   000000DC   0x662AAB55         DC32 1714072405, 2986813675, 788775605, 2258271173, 3550808119
   \              0xB20728EB   
   \              0x2F03C2B5   
   \              0x869A7BC5   
   \              0xD3A50837   
   \   000000F0   0x30F28728         DC32 821200680, 598910399, 45771267, 3982262806, 2318081231, 2811409529
   \              0x23B2A5BF   
   \              0x02BA6A03   
   \              0xED5C8216   
   \              0x8A2B1CCF   
   \              0xA792B479   
   \   00000108   0xF3F0F207         DC32 4092654087, 1319232105, 1707996378, 114671109, 3508494900
   \              0x4EA1E269   
   \              0x65CDF4DA   
   \              0x06D5BE05   
   \              0xD11F6234   
   \   0000011C   0xC48AFEA6         DC32 3297443494, 882725678, 2728416755, 87220618, 2759191542, 188345475
   \              0x349D532E   
   \              0xA2A055F3   
   \              0x0532E18A   
   \              0xA475EBF6   
   \              0x0B39EC83   
   \   00000134   0x40AAEF60         DC32 1084944224, 1577492337, 3176206446, 1056541217, 2520581853
   \              0x5E069F71   
   \              0xBD51106E   
   \              0x3EF98A21   
   \              0x963D06DD   
   \   00000148   0xDDAE053E         DC32 3719169342, 1296481766, 2444594516, 1896177092, 74437638
   \              0x4D46BDE6   
   \              0x91B58D54   
   \              0x71055DC4   
   \              0x046FD406   
   \   0000015C   0x60FF1550         DC32 1627329872, 421854104, 3600279997, 2311865152, 1735892697
   \              0x1924FB98   
   \              0xD697E9BD   
   \              0x89CC4340   
   \              0x67779ED9   
   \   00000170   0xB0BD42E8         DC32 2965193448, 126389129, 3879230233, 2044456648, 2705787516
   \              0x07888B89   
   \              0xE7385B19   
   \              0x79DBEEC8   
   \              0xA1470A7C   
   \   00000184   0x7CE90F42         DC32 2095648578, 4173930116, 0, 159614592, 843640107, 514617361
   \              0xF8C91E84   
   \              0x00000000   
   \              0x09838680   
   \              0x3248ED2B   
   \              0x1EAC7011   
   \   0000019C   0x6C4E725A         DC32 1817080410, 4261150478, 257308805, 1025430958, 908540205
   \              0xFDFBFF0E   
   \              0x0F563885   
   \              0x3D1ED5AE   
   \              0x3627392D   
   \   000001B0   0x0A64D90F         DC32 174381327, 1747035740, 2614187099, 607792694, 212952842
   \              0x6821A65C   
   \              0x9BD1545B   
   \              0x243A2E36   
   \              0x0CB1670A   
   \   000001C4   0x930FE757         DC32 2467293015, 3033700078, 463376795, 2152711616, 1638015196
   \              0xB4D296EE   
   \              0x1B9E919B   
   \              0x804FC5C0   
   \              0x61A220DC   
   \   000001D8   0x5A694B77         DC32 1516850039, 471210514, 3792353939, 3236244128, 1011081250
   \              0x1C161A12   
   \              0xE20ABA93   
   \              0xC0E52AA0   
   \              0x3C43E022   
   \   000001EC   0x121D171B         DC32 303896347, 235605257, 4071475083, 767142070, 348694814, 1468340721
   \              0x0E0B0D09   
   \              0xF2ADC78B   
   \              0x2DB9A8B6   
   \              0x14C8A91E   
   \              0x578519F1   
   \   00000204   0xAF4C0775         DC32 2940995445, 4005289369, 2751291519, 4154402305, 1555887474
   \              0xEEBBDD99   
   \              0xA3FD607F   
   \              0xF79F2601   
   \              0x5CBCF572   
   \   00000218   0x44C53B66         DC32 1153776486, 1530167035, 2339776835, 3420243491, 3060333805
   \              0x5B347EFB   
   \              0x8B762943   
   \              0xCBDCC623   
   \              0xB668FCED   
   \   0000022C   0xB863F1E4         DC32 3093557732, 3620396081, 1108378979, 322970263, 2216694214
   \              0xD7CADC31   
   \              0x42108563   
   \              0x13402297   
   \              0x842011C6   
   \   00000240   0x857D244A         DC32 2239571018, 3539484091, 2920362745, 3345850665, 491466654
   \              0xD2F83DBB   
   \              0xAE1132F9   
   \              0xC76DA129   
   \              0x1D4B2F9E   
   \   00000254   0xDCF330B2         DC32 3706925234, 233591430, 2010178497, 728503987, 2845423984
   \              0x0DEC5286   
   \              0x77D0E3C1   
   \              0x2B6C16B3   
   \              0xA999B970   
   \   00000268   0x11FA4894         DC32 301615252, 1193436393, 2831453436, 2686074864, 1457007741
   \              0x472264E9   
   \              0xA8C48CFC   
   \              0xA01A3FF0   
   \              0x56D82C7D   
   \   0000027C   0x22EF9033         DC32 586125363, 2277985865, 3653357880, 2365498058, 2553678804
   \              0x87C74E49   
   \              0xD9C1D138   
   \              0x8CFEA2CA   
   \              0x98360BD4   
   \   00000290   0xA6CF81F5         DC32 2798617077, 2770919034, 3659959991, 1067761581, 753179962
   \              0xA528DE7A   
   \              0xDA268EB7   
   \              0x3FA4BFAD   
   \              0x2CE49D3A   
   \   000002A4   0x500D9278         DC32 1343066744, 1788595295, 1415726718, 4139914125, 2431170776
   \              0x6A9BCC5F   
   \              0x5462467E   
   \              0xF6C2138D   
   \              0x90E8B8D8   
   \   000002B8   0x2E5EF739         DC32 777975609, 2197139395, 2680062045, 1769771984, 1873358293
   \              0x82F5AFC3   
   \              0x9FBE805D   
   \              0x697C93D0   
   \              0x6FA92DD5   
   \   000002CC   0xCFB31225         DC32 3484619301, 3359349164, 279411992, 3899548572, 3682319163
   \              0xC83B99AC   
   \              0x10A77D18   
   \              0xE86E639C   
   \              0xDB7BBB3B   
   \   000002E0   0xCD097826         DC32 3439949862, 1861490777, 3959535514, 2208864847, 3865407125
   \              0x6EF41859   
   \              0xEC01B79A   
   \              0x83A89A4F   
   \              0xE6656E95   
   \   000002F4   0xAA7EE6FF         DC32 2860443391, 554225596, 4024887317, 3134823399, 1255028335
   \              0x2108CFBC   
   \              0xEFE6E815   
   \              0xBAD99BE7   
   \              0x4ACE366F   
   \   00000308   0xEAD4099F         DC32 3939764639, 701922480, 833598116, 707863359, 3325072549, 901801634
   \              0x29D67CB0   
   \              0x31AFB2A4   
   \              0x2A31233F   
   \              0xC63094A5   
   \              0x35C066A2   
   \   00000320   0x7437BC4E         DC32 1949809742, 4238789250, 3769684112, 857069735, 4048197636
   \              0xFCA6CA82   
   \              0xE0B0D090   
   \              0x3315D8A7   
   \              0xF14A9804   
   \   00000334   0x41F7DAEC         DC32 1106762476, 2131644621, 389019281, 1989006925, 1129165039
   \              0x7F0E50CD   
   \              0x172FF691   
   \              0x768DD64D   
   \              0x434DB0EF   
   \   00000348   0xCC544DAA         DC32 3428076970, 3839820950, 2665723345, 1276872810, 3250069292
   \              0xE4DF0496   
   \              0x9EE3B5D1   
   \              0x4C1B886A   
   \              0xC1B81F2C   
   \   0000035C   0x467F5165         DC32 1182749029, 2634345054, 22885772, 4201870471, 4214112523
   \              0x9D04EA5E   
   \              0x015D358C   
   \              0xFA737487   
   \              0xFB2E410B   
   \   00000370   0xB35A1D67         DC32 3009027431, 2454901467, 3912455696, 1829980118, 2592891351
   \              0x9252D2DB   
   \              0xE9335610   
   \              0x6D1347D6   
   \              0x9A8C61D7   
   \   00000384   0x377A0CA1         DC32 930745505, 1502483704, 3951639571, 3471714217, 3073755489
   \              0x598E14F8   
   \              0xEB893C13   
   \              0xCEEE27A9   
   \              0xB735C961   
   \   00000398   0xE1EDE51C         DC32 3790464284, 2050797895, 2623135698, 1430221810, 410635796
   \              0x7A3CB147   
   \              0x9C59DFD2   
   \              0x553F73F2   
   \              0x1879CE14   
   \   000003AC   0x73BF37C7         DC32 1941911495, 1407897079, 1599843069, 3742658365, 2022103876
   \              0x53EACDF7   
   \              0x5F5BAAFD   
   \              0xDF146F3D   
   \              0x7886DB44   
   \   000003C0   0xCA81F3AF         DC32 3397514159, 3107898472, 942421028, 3261022371, 376619805
   \              0xB93EC468   
   \              0x382C3424   
   \              0xC25F40A3   
   \              0x1672C31D   
   \   000003D4   0xBC0C25E2         DC32 3154912738, 680216892, 4282488077, 963707304, 148812556
   \              0x288B493C   
   \              0xFF41950D   
   \              0x397101A8   
   \              0x08DEB30C   
   \   000003E8   0xD89CE4B4         DC32 3634160820, 1687208278, 2069988555, 3580933682, 1215585388
   \              0x6490C156   
   \              0x7B6184CB   
   \              0xD570B632   
   \              0x48745C6C   
   \   000003FC   0xD04257B8         DC32 3494008760
    341          #undef V
    342          
    343          #undef RT
    344          
    345          /*
    346           * Round constants
    347           */

   \                                 In section .text, align 4, keep-with-next
    348          static const uint32_t RCON[10] =
   \                     RCON:
   \   00000000   0x00000001         DC32 1, 2, 4, 8, 16, 32, 64, 128, 27, 54
   \              0x00000002   
   \              0x00000004   
   \              0x00000008   
   \              0x00000010   
   \              0x00000020   
   \              0x00000040   
   \              0x00000080   
   \              0x0000001B   
   \              0x00000036   
    349          {
    350              0x00000001, 0x00000002, 0x00000004, 0x00000008,
    351              0x00000010, 0x00000020, 0x00000040, 0x00000080,
    352              0x0000001B, 0x00000036
    353          };
    354          
    355          #else /* MBEDTLS_AES_ROM_TABLES */
    356          
    357          /*
    358           * Forward S-box & tables
    359           */
    360          static unsigned char FSb[256];
    361          static uint32_t FT0[256];
    362          static uint32_t FT1[256];
    363          static uint32_t FT2[256];
    364          static uint32_t FT3[256];
    365          
    366          /*
    367           * Reverse S-box & tables
    368           */
    369          static unsigned char RSb[256];
    370          static uint32_t RT0[256];
    371          static uint32_t RT1[256];
    372          static uint32_t RT2[256];
    373          static uint32_t RT3[256];
    374          
    375          /*
    376           * Round constants
    377           */
    378          static uint32_t RCON[10];
    379          
    380          /*
    381           * Tables generation code
    382           */
    383          #define ROTL8(x) ( ( x << 8 ) & 0xFFFFFFFF ) | ( x >> 24 )
    384          #define XTIME(x) ( ( x << 1 ) ^ ( ( x & 0x80 ) ? 0x1B : 0x00 ) )
    385          #define MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )
    386          
    387          static int aes_init_done = 0;
    388          
    389          static void aes_gen_tables( void )
    390          {
    391              int i, x, y, z;
    392              int pow[256];
    393              int log[256];
    394          
    395              /*
    396               * compute pow and log tables over GF(2^8)
    397               */
    398              for( i = 0, x = 1; i < 256; i++ )
    399              {
    400                  pow[i] = x;
    401                  log[x] = i;
    402                  x = ( x ^ XTIME( x ) ) & 0xFF;
    403              }
    404          
    405              /*
    406               * calculate the round constants
    407               */
    408              for( i = 0, x = 1; i < 10; i++ )
    409              {
    410                  RCON[i] = (uint32_t) x;
    411                  x = XTIME( x ) & 0xFF;
    412              }
    413          
    414              /*
    415               * generate the forward and reverse S-boxes
    416               */
    417              FSb[0x00] = 0x63;
    418              RSb[0x63] = 0x00;
    419          
    420              for( i = 1; i < 256; i++ )
    421              {
    422                  x = pow[255 - log[i]];
    423          
    424                  y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
    425                  x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
    426                  x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
    427                  x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
    428                  x ^= y ^ 0x63;
    429          
    430                  FSb[i] = (unsigned char) x;
    431                  RSb[x] = (unsigned char) i;
    432              }
    433          
    434              /*
    435               * generate the forward and reverse tables
    436               */
    437              for( i = 0; i < 256; i++ )
    438              {
    439                  x = FSb[i];
    440                  y = XTIME( x ) & 0xFF;
    441                  z =  ( y ^ x ) & 0xFF;
    442          
    443                  FT0[i] = ( (uint32_t) y       ) ^
    444                           ( (uint32_t) x <<  8 ) ^
    445                           ( (uint32_t) x << 16 ) ^
    446                           ( (uint32_t) z << 24 );
    447          
    448                  FT1[i] = ROTL8( FT0[i] );
    449                  FT2[i] = ROTL8( FT1[i] );
    450                  FT3[i] = ROTL8( FT2[i] );
    451          
    452                  x = RSb[i];
    453          
    454                  RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
    455                           ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
    456                           ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
    457                           ( (uint32_t) MUL( 0x0B, x ) << 24 );
    458          
    459                  RT1[i] = ROTL8( RT0[i] );
    460                  RT2[i] = ROTL8( RT1[i] );
    461                  RT3[i] = ROTL8( RT2[i] );
    462              }
    463          }
    464          
    465          #endif /* MBEDTLS_AES_ROM_TABLES */
    466          

   \                                 In section .text, align 2, keep-with-next
    467          void mbedtls_aes_init( mbedtls_aes_context *ctx )
    468          {
   \                     mbedtls_aes_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    469              memset( ctx, 0, sizeof( mbedtls_aes_context ) );
   \   00000002   0x218C             MOVS     R1,#+140
   \   00000004   0x0049             LSLS     R1,R1,#+1        ;; #+280
   \   00000006   0x.... 0x....      BL       __aeabi_memclr4
    470          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    471          

   \                                 In section .text, align 2, keep-with-next
    472          void mbedtls_aes_free( mbedtls_aes_context *ctx )
    473          {
    474              if( ctx == NULL )
   \                     mbedtls_aes_free: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD100             BNE      ??mbedtls_aes_free_0
   \   00000004   0x4770             BX       LR
    475                  return;
    476          
    477              mbedtls_zeroize( ctx, sizeof( mbedtls_aes_context ) );
   \                     ??mbedtls_aes_free_0: (+1)
   \   00000006   0xB580             PUSH     {R7,LR}
   \   00000008   0x218C             MOVS     R1,#+140
   \   0000000A   0x0049             LSLS     R1,R1,#+1        ;; #+280
   \   0000000C   0x.... 0x....      BL       __aeabi_memclr
    478          }
   \   00000010   0xBD01             POP      {R0,PC}          ;; return
    479          
    480          /*
    481           * AES key schedule (encryption)
    482           */
    483          #if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)

   \                                 In section .text, align 4, keep-with-next
    484          int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
    485                              unsigned int keybits )
    486          {
   \                     mbedtls_aes_setkey_enc: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
   \   00000002   0x000B             MOVS     R3,R1
    487              unsigned int i;
    488              uint32_t *RK;
    489          
    490          #if !defined(MBEDTLS_AES_ROM_TABLES)
    491              if( aes_init_done == 0 )
    492              {
    493                  aes_gen_tables();
    494                  aes_init_done = 1;
    495          
    496              }
    497          #endif
    498          
    499              switch( keybits )
   \   00000004   0x0011             MOVS     R1,R2
   \   00000006   0x3980             SUBS     R1,R1,#+128
   \   00000008   0xD004             BEQ      ??mbedtls_aes_setkey_enc_0
   \   0000000A   0x3940             SUBS     R1,R1,#+64
   \   0000000C   0xD048             BEQ      ??mbedtls_aes_setkey_enc_1
   \   0000000E   0x3940             SUBS     R1,R1,#+64
   \   00000010   0xD048             BEQ      ??mbedtls_aes_setkey_enc_2
   \   00000012   0xE049             B        ??mbedtls_aes_setkey_enc_3
    500              {
    501                  case 128: ctx->nr = 10; break;
   \                     ??mbedtls_aes_setkey_enc_0: (+1)
   \   00000014   0x210A             MOVS     R1,#+10
   \                     ??mbedtls_aes_setkey_enc_4: (+1)
   \   00000016   0x6001             STR      R1,[R0, #+0]
    502                  case 192: ctx->nr = 12; break;
    503                  case 256: ctx->nr = 14; break;
    504                  default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    505              }
    506          
    507          #if defined(MBEDTLS_PADLOCK_C) && defined(MBEDTLS_PADLOCK_ALIGN16)
    508              if( aes_padlock_ace == -1 )
    509                  aes_padlock_ace = mbedtls_padlock_has_support( MBEDTLS_PADLOCK_ACE );
    510          
    511              if( aes_padlock_ace )
    512                  ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    513              else
    514          #endif
    515              ctx->rk = RK = ctx->buf;
   \   00000018   0x0001             MOVS     R1,R0
   \   0000001A   0x3108             ADDS     R1,R1,#+8
   \   0000001C   0x6041             STR      R1,[R0, #+4]
    516          
    517          #if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    518              if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
    519                  return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
    520          #endif
    521          
    522              for( i = 0; i < ( keybits >> 5 ); i++ )
   \   0000001E   0x0954             LSRS     R4,R2,#+5
   \   00000020   0xD00F             BEQ      ??mbedtls_aes_setkey_enc_5
   \   00000022   0x000A             MOVS     R2,R1
    523              {
    524                  GET_UINT32_LE( RK[i], key, i << 2 );
   \                     ??mbedtls_aes_setkey_enc_6: (+1)
   \   00000024   0x781E             LDRB     R6,[R3, #+0]
   \   00000026   0x785D             LDRB     R5,[R3, #+1]
   \   00000028   0x022D             LSLS     R5,R5,#+8
   \   0000002A   0x4335             ORRS     R5,R5,R6
   \   0000002C   0x789E             LDRB     R6,[R3, #+2]
   \   0000002E   0x0436             LSLS     R6,R6,#+16
   \   00000030   0x432E             ORRS     R6,R6,R5
   \   00000032   0x78DD             LDRB     R5,[R3, #+3]
   \   00000034   0x062D             LSLS     R5,R5,#+24
   \   00000036   0x4335             ORRS     R5,R5,R6
   \   00000038   0x6015             STR      R5,[R2, #+0]
    525              }
   \   0000003A   0x1D1B             ADDS     R3,R3,#+4
   \   0000003C   0x1D12             ADDS     R2,R2,#+4
   \   0000003E   0x1E64             SUBS     R4,R4,#+1
   \   00000040   0xD1F0             BNE      ??mbedtls_aes_setkey_enc_6
    526          
    527              switch( ctx->nr )
   \                     ??mbedtls_aes_setkey_enc_5: (+1)
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0x280A             CMP      R0,#+10
   \   00000046   0xD004             BEQ      ??mbedtls_aes_setkey_enc_7
   \   00000048   0x280C             CMP      R0,#+12
   \   0000004A   0xD030             BEQ      ??mbedtls_aes_setkey_enc_8
   \   0000004C   0x280E             CMP      R0,#+14
   \   0000004E   0xD05B             BEQ      ??mbedtls_aes_setkey_enc_9
   \   00000050   0xE09B             B        ??mbedtls_aes_setkey_enc_10
    528              {
    529                  case 10:
    530          
    531                      for( i = 0; i < 10; i++, RK += 4 )
   \                     ??mbedtls_aes_setkey_enc_7: (+1)
   \   00000052   0xBF00             Nop      
   \   00000054   0x....             ADR.N    R0,RCON
   \   00000056   0x220A             MOVS     R2,#+10
   \   00000058   0x....             LDR      R4,??DataTable23
    532                      {
    533                          RK[4]  = RK[0] ^ RCON[i] ^
    534                          ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
    535                          ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
    536                          ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
    537                          ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
   \                     ??mbedtls_aes_setkey_enc_11: (+1)
   \   0000005A   0x68CB             LDR      R3,[R1, #+12]
   \   0000005C   0x680E             LDR      R6,[R1, #+0]
   \   0000005E   0x6805             LDR      R5,[R0, #+0]
   \   00000060   0x4075             EORS     R5,R5,R6
   \   00000062   0x041E             LSLS     R6,R3,#+16
   \   00000064   0x0E36             LSRS     R6,R6,#+24
   \   00000066   0x5DA6             LDRB     R6,[R4, R6]
   \   00000068   0x406E             EORS     R6,R6,R5
   \   0000006A   0x021D             LSLS     R5,R3,#+8
   \   0000006C   0x0E2D             LSRS     R5,R5,#+24
   \   0000006E   0x5D65             LDRB     R5,[R4, R5]
   \   00000070   0x022D             LSLS     R5,R5,#+8
   \   00000072   0x4075             EORS     R5,R5,R6
   \   00000074   0x0E1E             LSRS     R6,R3,#+24
   \   00000076   0x5DA6             LDRB     R6,[R4, R6]
   \   00000078   0x0436             LSLS     R6,R6,#+16
   \   0000007A   0x406E             EORS     R6,R6,R5
   \   0000007C   0xB2DD             UXTB     R5,R3
   \   0000007E   0x5D65             LDRB     R5,[R4, R5]
   \   00000080   0x062D             LSLS     R5,R5,#+24
   \   00000082   0x4075             EORS     R5,R5,R6
   \   00000084   0x610D             STR      R5,[R1, #+16]
    538          
    539                          RK[5]  = RK[1] ^ RK[4];
   \   00000086   0x684E             LDR      R6,[R1, #+4]
   \   00000088   0x4075             EORS     R5,R5,R6
   \   0000008A   0x614D             STR      R5,[R1, #+20]
    540                          RK[6]  = RK[2] ^ RK[5];
   \   0000008C   0x688E             LDR      R6,[R1, #+8]
   \   0000008E   0x4075             EORS     R5,R5,R6
   \   00000090   0x618D             STR      R5,[R1, #+24]
    541                          RK[7]  = RK[3] ^ RK[6];
   \   00000092   0x405D             EORS     R5,R5,R3
   \   00000094   0x61CD             STR      R5,[R1, #+28]
    542                      }
   \   00000096   0x3110             ADDS     R1,R1,#+16
   \   00000098   0x1D00             ADDS     R0,R0,#+4
   \   0000009A   0x1E52             SUBS     R2,R2,#+1
   \   0000009C   0xD075             BEQ      ??mbedtls_aes_setkey_enc_10
   \   0000009E   0xE7DC             B        ??mbedtls_aes_setkey_enc_11
   \                     ??mbedtls_aes_setkey_enc_1: (+1)
   \   000000A0   0x210C             MOVS     R1,#+12
   \   000000A2   0xE7B8             B        ??mbedtls_aes_setkey_enc_4
   \                     ??mbedtls_aes_setkey_enc_2: (+1)
   \   000000A4   0x210E             MOVS     R1,#+14
   \   000000A6   0xE7B6             B        ??mbedtls_aes_setkey_enc_4
   \                     ??mbedtls_aes_setkey_enc_3: (+1)
   \   000000A8   0x201F             MOVS     R0,#+31
   \   000000AA   0x43C0             MVNS     R0,R0            ;; #-32
   \   000000AC   0xE06E             B        ??mbedtls_aes_setkey_enc_12
    543                      break;
    544          
    545                  case 12:
    546          
    547                      for( i = 0; i < 8; i++, RK += 6 )
   \                     ??mbedtls_aes_setkey_enc_8: (+1)
   \   000000AE   0xBF00             Nop      
   \   000000B0   0x....             ADR.N    R0,RCON
   \   000000B2   0x2208             MOVS     R2,#+8
   \   000000B4   0x....             LDR      R4,??DataTable23
    548                      {
    549                          RK[6]  = RK[0] ^ RCON[i] ^
    550                          ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
    551                          ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
    552                          ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
    553                          ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
   \                     ??mbedtls_aes_setkey_enc_13: (+1)
   \   000000B6   0x694B             LDR      R3,[R1, #+20]
   \   000000B8   0x680E             LDR      R6,[R1, #+0]
   \   000000BA   0x6805             LDR      R5,[R0, #+0]
   \   000000BC   0x4075             EORS     R5,R5,R6
   \   000000BE   0x041E             LSLS     R6,R3,#+16
   \   000000C0   0x0E36             LSRS     R6,R6,#+24
   \   000000C2   0x5DA6             LDRB     R6,[R4, R6]
   \   000000C4   0x406E             EORS     R6,R6,R5
   \   000000C6   0x021D             LSLS     R5,R3,#+8
   \   000000C8   0x0E2D             LSRS     R5,R5,#+24
   \   000000CA   0x5D65             LDRB     R5,[R4, R5]
   \   000000CC   0x022D             LSLS     R5,R5,#+8
   \   000000CE   0x4075             EORS     R5,R5,R6
   \   000000D0   0x0E1E             LSRS     R6,R3,#+24
   \   000000D2   0x5DA6             LDRB     R6,[R4, R6]
   \   000000D4   0x0436             LSLS     R6,R6,#+16
   \   000000D6   0x406E             EORS     R6,R6,R5
   \   000000D8   0xB2DD             UXTB     R5,R3
   \   000000DA   0x5D65             LDRB     R5,[R4, R5]
   \   000000DC   0x062D             LSLS     R5,R5,#+24
   \   000000DE   0x4075             EORS     R5,R5,R6
   \   000000E0   0x618D             STR      R5,[R1, #+24]
    554          
    555                          RK[7]  = RK[1] ^ RK[6];
   \   000000E2   0x684E             LDR      R6,[R1, #+4]
   \   000000E4   0x4075             EORS     R5,R5,R6
   \   000000E6   0x61CD             STR      R5,[R1, #+28]
    556                          RK[8]  = RK[2] ^ RK[7];
   \   000000E8   0x688E             LDR      R6,[R1, #+8]
   \   000000EA   0x4075             EORS     R5,R5,R6
   \   000000EC   0x620D             STR      R5,[R1, #+32]
    557                          RK[9]  = RK[3] ^ RK[8];
   \   000000EE   0x68CE             LDR      R6,[R1, #+12]
   \   000000F0   0x4075             EORS     R5,R5,R6
   \   000000F2   0x624D             STR      R5,[R1, #+36]
    558                          RK[10] = RK[4] ^ RK[9];
   \   000000F4   0x690E             LDR      R6,[R1, #+16]
   \   000000F6   0x4075             EORS     R5,R5,R6
   \   000000F8   0x628D             STR      R5,[R1, #+40]
    559                          RK[11] = RK[5] ^ RK[10];
   \   000000FA   0x405D             EORS     R5,R5,R3
   \   000000FC   0x62CD             STR      R5,[R1, #+44]
    560                      }
   \   000000FE   0x3118             ADDS     R1,R1,#+24
   \   00000100   0x1D00             ADDS     R0,R0,#+4
   \   00000102   0x1E52             SUBS     R2,R2,#+1
   \   00000104   0xD041             BEQ      ??mbedtls_aes_setkey_enc_10
   \   00000106   0xE7D6             B        ??mbedtls_aes_setkey_enc_13
    561                      break;
    562          
    563                  case 14:
    564          
    565                      for( i = 0; i < 7; i++, RK += 8 )
   \                     ??mbedtls_aes_setkey_enc_9: (+1)
   \   00000108   0x....             ADR.N    R2,RCON
   \   0000010A   0x2307             MOVS     R3,#+7
   \   0000010C   0x....             LDR      R4,??DataTable23
    566                      {
    567                          RK[8]  = RK[0] ^ RCON[i] ^
    568                          ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
    569                          ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
    570                          ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
    571                          ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
   \                     ??mbedtls_aes_setkey_enc_14: (+1)
   \   0000010E   0x69CD             LDR      R5,[R1, #+28]
   \   00000110   0x680E             LDR      R6,[R1, #+0]
   \   00000112   0x6810             LDR      R0,[R2, #+0]
   \   00000114   0x4070             EORS     R0,R0,R6
   \   00000116   0x042E             LSLS     R6,R5,#+16
   \   00000118   0x0E36             LSRS     R6,R6,#+24
   \   0000011A   0x5DA6             LDRB     R6,[R4, R6]
   \   0000011C   0x4046             EORS     R6,R6,R0
   \   0000011E   0x0228             LSLS     R0,R5,#+8
   \   00000120   0x0E00             LSRS     R0,R0,#+24
   \   00000122   0x5C20             LDRB     R0,[R4, R0]
   \   00000124   0x0200             LSLS     R0,R0,#+8
   \   00000126   0x4070             EORS     R0,R0,R6
   \   00000128   0x0E2E             LSRS     R6,R5,#+24
   \   0000012A   0x5DA6             LDRB     R6,[R4, R6]
   \   0000012C   0x0437             LSLS     R7,R6,#+16
   \   0000012E   0x4047             EORS     R7,R7,R0
   \   00000130   0xB2E8             UXTB     R0,R5
   \   00000132   0x5C20             LDRB     R0,[R4, R0]
   \   00000134   0x0606             LSLS     R6,R0,#+24
   \   00000136   0x407E             EORS     R6,R6,R7
   \   00000138   0x620E             STR      R6,[R1, #+32]
    572          
    573                          RK[9]  = RK[1] ^ RK[8];
   \   0000013A   0x6848             LDR      R0,[R1, #+4]
   \   0000013C   0x4046             EORS     R6,R6,R0
   \   0000013E   0x624E             STR      R6,[R1, #+36]
    574                          RK[10] = RK[2] ^ RK[9];
   \   00000140   0x6888             LDR      R0,[R1, #+8]
   \   00000142   0x4046             EORS     R6,R6,R0
   \   00000144   0x628E             STR      R6,[R1, #+40]
    575                          RK[11] = RK[3] ^ RK[10];
   \   00000146   0x68C8             LDR      R0,[R1, #+12]
   \   00000148   0x4046             EORS     R6,R6,R0
   \   0000014A   0x62CE             STR      R6,[R1, #+44]
    576          
    577                          RK[12] = RK[4] ^
    578                          ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
    579                          ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
    580                          ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
    581                          ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
   \   0000014C   0x690F             LDR      R7,[R1, #+16]
   \   0000014E   0xB2F0             UXTB     R0,R6
   \   00000150   0x5C20             LDRB     R0,[R4, R0]
   \   00000152   0x4078             EORS     R0,R0,R7
   \   00000154   0x0437             LSLS     R7,R6,#+16
   \   00000156   0x0E3F             LSRS     R7,R7,#+24
   \   00000158   0x5DE7             LDRB     R7,[R4, R7]
   \   0000015A   0x023F             LSLS     R7,R7,#+8
   \   0000015C   0x4047             EORS     R7,R7,R0
   \   0000015E   0x0230             LSLS     R0,R6,#+8
   \   00000160   0x0E00             LSRS     R0,R0,#+24
   \   00000162   0x5C20             LDRB     R0,[R4, R0]
   \   00000164   0x0400             LSLS     R0,R0,#+16
   \   00000166   0x4078             EORS     R0,R0,R7
   \   00000168   0x0E36             LSRS     R6,R6,#+24
   \   0000016A   0x5DA6             LDRB     R6,[R4, R6]
   \   0000016C   0x0636             LSLS     R6,R6,#+24
   \   0000016E   0x4046             EORS     R6,R6,R0
   \   00000170   0x630E             STR      R6,[R1, #+48]
    582          
    583                          RK[13] = RK[5] ^ RK[12];
   \   00000172   0x6948             LDR      R0,[R1, #+20]
   \   00000174   0x4046             EORS     R6,R6,R0
   \   00000176   0x634E             STR      R6,[R1, #+52]
    584                          RK[14] = RK[6] ^ RK[13];
   \   00000178   0x6988             LDR      R0,[R1, #+24]
   \   0000017A   0x4046             EORS     R6,R6,R0
   \   0000017C   0x638E             STR      R6,[R1, #+56]
    585                          RK[15] = RK[7] ^ RK[14];
   \   0000017E   0x406E             EORS     R6,R6,R5
   \   00000180   0x63CE             STR      R6,[R1, #+60]
    586                      }
   \   00000182   0x3120             ADDS     R1,R1,#+32
   \   00000184   0x1D12             ADDS     R2,R2,#+4
   \   00000186   0x1E5B             SUBS     R3,R3,#+1
   \   00000188   0xD1C1             BNE      ??mbedtls_aes_setkey_enc_14
    587                      break;
    588              }
    589          
    590              return( 0 );
   \                     ??mbedtls_aes_setkey_enc_10: (+1)
   \   0000018A   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_aes_setkey_enc_12: (+1)
   \   0000018C   0xBCF0             POP      {R4-R7}
   \   0000018E   0x4770             BX       LR               ;; return
    591          }
    592          #endif /* !MBEDTLS_AES_SETKEY_ENC_ALT */
    593          
    594          /*
    595           * AES key schedule (decryption)
    596           */
    597          #if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)

   \                                 In section .text, align 2, keep-with-next
    598          int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
    599                              unsigned int keybits )
    600          {
   \                     mbedtls_aes_setkey_dec: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB0C7             SUB      SP,SP,#+284
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    601              int i, j, ret;
    602              mbedtls_aes_context cty;
    603              uint32_t *RK;
    604              uint32_t *SK;
    605          
    606              mbedtls_aes_init( &cty );
   \   0000000A   0x218C             MOVS     R1,#+140
   \   0000000C   0x0049             LSLS     R1,R1,#+1        ;; #+280
   \   0000000E   0xA801             ADD      R0,SP,#+4
   \   00000010   0x.... 0x....      BL       __aeabi_memclr4
    607          
    608          #if defined(MBEDTLS_PADLOCK_C) && defined(MBEDTLS_PADLOCK_ALIGN16)
    609              if( aes_padlock_ace == -1 )
    610                  aes_padlock_ace = mbedtls_padlock_has_support( MBEDTLS_PADLOCK_ACE );
    611          
    612              if( aes_padlock_ace )
    613                  ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    614              else
    615          #endif
    616              ctx->rk = RK = ctx->buf;
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x3008             ADDS     R0,R0,#+8
   \   00000018   0x6060             STR      R0,[R4, #+4]
    617          
    618              /* Also checks keybits */
    619              if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
   \   0000001A   0x0032             MOVS     R2,R6
   \   0000001C   0x0029             MOVS     R1,R5
   \   0000001E   0xA801             ADD      R0,SP,#+4
   \   00000020   0x.... 0x....      BL       mbedtls_aes_setkey_enc
   \   00000024   0x9000             STR      R0,[SP, #+0]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD144             BNE      ??mbedtls_aes_setkey_dec_0
    620                  goto exit;
    621          
    622              ctx->nr = cty.nr;
   \   0000002A   0x9801             LDR      R0,[SP, #+4]
   \   0000002C   0x6020             STR      R0,[R4, #+0]
    623          
    624          #if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    625              if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
    626              {
    627                  mbedtls_aesni_inverse_key( (unsigned char *) ctx->rk,
    628                                     (const unsigned char *) cty.rk, ctx->nr );
    629                  goto exit;
    630              }
    631          #endif
    632          
    633              SK = cty.rk + cty.nr * 4;
   \   0000002E   0x9802             LDR      R0,[SP, #+8]
   \   00000030   0x9901             LDR      R1,[SP, #+4]
   \   00000032   0x0109             LSLS     R1,R1,#+4
   \   00000034   0x1841             ADDS     R1,R0,R1
    634          
    635              *RK++ = *SK++;
   \   00000036   0x6808             LDR      R0,[R1, #+0]
   \   00000038   0x60A0             STR      R0,[R4, #+8]
    636              *RK++ = *SK++;
   \   0000003A   0x6848             LDR      R0,[R1, #+4]
   \   0000003C   0x60E0             STR      R0,[R4, #+12]
    637              *RK++ = *SK++;
   \   0000003E   0x6888             LDR      R0,[R1, #+8]
   \   00000040   0x6120             STR      R0,[R4, #+16]
    638              *RK++ = *SK++;
   \   00000042   0x68C8             LDR      R0,[R1, #+12]
   \   00000044   0x6160             STR      R0,[R4, #+20]
   \   00000046   0x0020             MOVS     R0,R4
   \   00000048   0x3018             ADDS     R0,R0,#+24
    639          
    640              for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
   \   0000004A   0x3910             SUBS     R1,R1,#+16
   \   0000004C   0x6822             LDR      R2,[R4, #+0]
   \   0000004E   0x1E52             SUBS     R2,R2,#+1
   \   00000050   0x2A01             CMP      R2,#+1
   \   00000052   0xDB27             BLT      ??mbedtls_aes_setkey_dec_1
   \   00000054   0x....             LDR      R3,??DataTable23
    641              {
    642                  for( j = 0; j < 4; j++, SK++ )
   \                     ??mbedtls_aes_setkey_dec_2: (+1)
   \   00000056   0x2404             MOVS     R4,#+4
    643                  {
    644                      *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
    645                              RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
    646                              RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
    647                              RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
   \                     ??mbedtls_aes_setkey_dec_3: (+1)
   \   00000058   0x680D             LDR      R5,[R1, #+0]
   \   0000005A   0x....             LDR      R6,??DataTable23_1
   \   0000005C   0xB2EF             UXTB     R7,R5
   \   0000005E   0x5DDF             LDRB     R7,[R3, R7]
   \   00000060   0x00BF             LSLS     R7,R7,#+2
   \   00000062   0x59F7             LDR      R7,[R6, R7]
   \   00000064   0x46BC             MOV      R12,R7
   \   00000066   0x....             LDR      R7,??DataTable23_2
   \   00000068   0x042E             LSLS     R6,R5,#+16
   \   0000006A   0x0E36             LSRS     R6,R6,#+24
   \   0000006C   0x5D9E             LDRB     R6,[R3, R6]
   \   0000006E   0x00B6             LSLS     R6,R6,#+2
   \   00000070   0x59BE             LDR      R6,[R7, R6]
   \   00000072   0x4667             MOV      R7,R12
   \   00000074   0x407E             EORS     R6,R6,R7
   \   00000076   0x46B4             MOV      R12,R6
   \   00000078   0x....             LDR      R7,??DataTable23_3
   \   0000007A   0x022E             LSLS     R6,R5,#+8
   \   0000007C   0x0E36             LSRS     R6,R6,#+24
   \   0000007E   0x5D9E             LDRB     R6,[R3, R6]
   \   00000080   0x00B6             LSLS     R6,R6,#+2
   \   00000082   0x59BE             LDR      R6,[R7, R6]
   \   00000084   0x4667             MOV      R7,R12
   \   00000086   0x407E             EORS     R6,R6,R7
   \   00000088   0x....             LDR      R7,??DataTable23_4
   \   0000008A   0x0E2D             LSRS     R5,R5,#+24
   \   0000008C   0x5D5D             LDRB     R5,[R3, R5]
   \   0000008E   0x00AD             LSLS     R5,R5,#+2
   \   00000090   0x597D             LDR      R5,[R7, R5]
   \   00000092   0x4075             EORS     R5,R5,R6
   \   00000094   0x6005             STR      R5,[R0, #+0]
   \   00000096   0x1D00             ADDS     R0,R0,#+4
    648                  }
   \   00000098   0x1D09             ADDS     R1,R1,#+4
   \   0000009A   0x1E64             SUBS     R4,R4,#+1
   \   0000009C   0xD1DC             BNE      ??mbedtls_aes_setkey_dec_3
    649              }
   \   0000009E   0x3920             SUBS     R1,R1,#+32
   \   000000A0   0x1E52             SUBS     R2,R2,#+1
   \   000000A2   0xD1D8             BNE      ??mbedtls_aes_setkey_dec_2
    650          
    651              *RK++ = *SK++;
   \                     ??mbedtls_aes_setkey_dec_1: (+1)
   \   000000A4   0x680A             LDR      R2,[R1, #+0]
   \   000000A6   0x6002             STR      R2,[R0, #+0]
    652              *RK++ = *SK++;
   \   000000A8   0x684A             LDR      R2,[R1, #+4]
   \   000000AA   0x6042             STR      R2,[R0, #+4]
    653              *RK++ = *SK++;
   \   000000AC   0x688A             LDR      R2,[R1, #+8]
   \   000000AE   0x6082             STR      R2,[R0, #+8]
    654              *RK++ = *SK++;
   \   000000B0   0x68CA             LDR      R2,[R1, #+12]
   \   000000B2   0x60C2             STR      R2,[R0, #+12]
    655          
    656          exit:
    657              mbedtls_aes_free( &cty );
    658          
    659              return( ret );
   \                     ??mbedtls_aes_setkey_dec_0: (+1)
   \   000000B4   0x9800             LDR      R0,[SP, #+0]
   \   000000B6   0xB047             ADD      SP,SP,#+284
   \   000000B8   0xBDF0             POP      {R4-R7,PC}       ;; return
    660          }
    661          #endif /* !MBEDTLS_AES_SETKEY_DEC_ALT */
    662          
    663          #define AES_FROUND(X0,X1,X2,X3,Y0,Y1,Y2,Y3)     \
    664          {                                               \
    665              X0 = *RK++ ^ FT0[ ( Y0       ) & 0xFF ] ^   \
    666                           FT1[ ( Y1 >>  8 ) & 0xFF ] ^   \
    667                           FT2[ ( Y2 >> 16 ) & 0xFF ] ^   \
    668                           FT3[ ( Y3 >> 24 ) & 0xFF ];    \
    669                                                          \
    670              X1 = *RK++ ^ FT0[ ( Y1       ) & 0xFF ] ^   \
    671                           FT1[ ( Y2 >>  8 ) & 0xFF ] ^   \
    672                           FT2[ ( Y3 >> 16 ) & 0xFF ] ^   \
    673                           FT3[ ( Y0 >> 24 ) & 0xFF ];    \
    674                                                          \
    675              X2 = *RK++ ^ FT0[ ( Y2       ) & 0xFF ] ^   \
    676                           FT1[ ( Y3 >>  8 ) & 0xFF ] ^   \
    677                           FT2[ ( Y0 >> 16 ) & 0xFF ] ^   \
    678                           FT3[ ( Y1 >> 24 ) & 0xFF ];    \
    679                                                          \
    680              X3 = *RK++ ^ FT0[ ( Y3       ) & 0xFF ] ^   \
    681                           FT1[ ( Y0 >>  8 ) & 0xFF ] ^   \
    682                           FT2[ ( Y1 >> 16 ) & 0xFF ] ^   \
    683                           FT3[ ( Y2 >> 24 ) & 0xFF ];    \
    684          }
    685          
    686          #define AES_RROUND(X0,X1,X2,X3,Y0,Y1,Y2,Y3)     \
    687          {                                               \
    688              X0 = *RK++ ^ RT0[ ( Y0       ) & 0xFF ] ^   \
    689                           RT1[ ( Y3 >>  8 ) & 0xFF ] ^   \
    690                           RT2[ ( Y2 >> 16 ) & 0xFF ] ^   \
    691                           RT3[ ( Y1 >> 24 ) & 0xFF ];    \
    692                                                          \
    693              X1 = *RK++ ^ RT0[ ( Y1       ) & 0xFF ] ^   \
    694                           RT1[ ( Y0 >>  8 ) & 0xFF ] ^   \
    695                           RT2[ ( Y3 >> 16 ) & 0xFF ] ^   \
    696                           RT3[ ( Y2 >> 24 ) & 0xFF ];    \
    697                                                          \
    698              X2 = *RK++ ^ RT0[ ( Y2       ) & 0xFF ] ^   \
    699                           RT1[ ( Y1 >>  8 ) & 0xFF ] ^   \
    700                           RT2[ ( Y0 >> 16 ) & 0xFF ] ^   \
    701                           RT3[ ( Y3 >> 24 ) & 0xFF ];    \
    702                                                          \
    703              X3 = *RK++ ^ RT0[ ( Y3       ) & 0xFF ] ^   \
    704                           RT1[ ( Y2 >>  8 ) & 0xFF ] ^   \
    705                           RT2[ ( Y1 >> 16 ) & 0xFF ] ^   \
    706                           RT3[ ( Y0 >> 24 ) & 0xFF ];    \
    707          }
    708          
    709          /*
    710           * AES-ECB block encryption
    711           */
    712          #if !defined(MBEDTLS_AES_ENCRYPT_ALT)

   \                                 In section .text, align 4, keep-with-next
    713          int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
    714                                            const unsigned char input[16],
    715                                            unsigned char output[16] )
    716          {
   \                     mbedtls_internal_aes_encrypt: (+1)
   \   00000000   0xB5F7             PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0x0002             MOVS     R2,R0
    717              int i;
    718              uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;
    719          
    720              RK = ctx->rk;
   \   00000004   0x6850             LDR      R0,[R2, #+4]
    721          
    722              GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   \   00000006   0x780B             LDRB     R3,[R1, #+0]
   \   00000008   0x784C             LDRB     R4,[R1, #+1]
   \   0000000A   0x0224             LSLS     R4,R4,#+8
   \   0000000C   0x431C             ORRS     R4,R4,R3
   \   0000000E   0x788B             LDRB     R3,[R1, #+2]
   \   00000010   0x041B             LSLS     R3,R3,#+16
   \   00000012   0x4323             ORRS     R3,R3,R4
   \   00000014   0x78CC             LDRB     R4,[R1, #+3]
   \   00000016   0x0625             LSLS     R5,R4,#+24
   \   00000018   0x431D             ORRS     R5,R5,R3
   \   0000001A   0x6804             LDR      R4,[R0, #+0]
   \   0000001C   0x406C             EORS     R4,R4,R5
    723              GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
   \   0000001E   0x790B             LDRB     R3,[R1, #+4]
   \   00000020   0x794D             LDRB     R5,[R1, #+5]
   \   00000022   0x022D             LSLS     R5,R5,#+8
   \   00000024   0x431D             ORRS     R5,R5,R3
   \   00000026   0x798B             LDRB     R3,[R1, #+6]
   \   00000028   0x041B             LSLS     R3,R3,#+16
   \   0000002A   0x432B             ORRS     R3,R3,R5
   \   0000002C   0x79CD             LDRB     R5,[R1, #+7]
   \   0000002E   0x062E             LSLS     R6,R5,#+24
   \   00000030   0x431E             ORRS     R6,R6,R3
   \   00000032   0x6845             LDR      R5,[R0, #+4]
   \   00000034   0x4075             EORS     R5,R5,R6
    724              GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   \   00000036   0x7A0E             LDRB     R6,[R1, #+8]
   \   00000038   0x7A4B             LDRB     R3,[R1, #+9]
   \   0000003A   0x021B             LSLS     R3,R3,#+8
   \   0000003C   0x4333             ORRS     R3,R3,R6
   \   0000003E   0x7A8E             LDRB     R6,[R1, #+10]
   \   00000040   0x0436             LSLS     R6,R6,#+16
   \   00000042   0x431E             ORRS     R6,R6,R3
   \   00000044   0x7ACB             LDRB     R3,[R1, #+11]
   \   00000046   0x061B             LSLS     R3,R3,#+24
   \   00000048   0x4333             ORRS     R3,R3,R6
   \   0000004A   0x6886             LDR      R6,[R0, #+8]
   \   0000004C   0x405E             EORS     R6,R6,R3
    725              GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   \   0000004E   0x7B0F             LDRB     R7,[R1, #+12]
   \   00000050   0x7B4B             LDRB     R3,[R1, #+13]
   \   00000052   0x021B             LSLS     R3,R3,#+8
   \   00000054   0x433B             ORRS     R3,R3,R7
   \   00000056   0x7B8F             LDRB     R7,[R1, #+14]
   \   00000058   0x043F             LSLS     R7,R7,#+16
   \   0000005A   0x431F             ORRS     R7,R7,R3
   \   0000005C   0x7BC9             LDRB     R1,[R1, #+15]
   \   0000005E   0x0609             LSLS     R1,R1,#+24
   \   00000060   0x4339             ORRS     R1,R1,R7
   \   00000062   0x68C3             LDR      R3,[R0, #+12]
   \   00000064   0x404B             EORS     R3,R3,R1
   \   00000066   0x3010             ADDS     R0,R0,#+16
    726          
    727              for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   \   00000068   0x6811             LDR      R1,[R2, #+0]
   \   0000006A   0x1049             ASRS     R1,R1,#+1
   \   0000006C   0x1E49             SUBS     R1,R1,#+1
   \   0000006E   0x2901             CMP      R1,#+1
   \   00000070   0xDA00             BGE      .+4
   \   00000072   0xE0D9             B        ??mbedtls_internal_aes_encrypt_0
   \   00000074   0x9101             STR      R1,[SP, #+4]
    728              {
    729                  AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   \                     ??mbedtls_internal_aes_encrypt_1: (+1)
   \   00000076   0x6801             LDR      R1,[R0, #+0]
   \   00000078   0x....             LDR      R2,??DataTable24
   \   0000007A   0x0627             LSLS     R7,R4,#+24
   \   0000007C   0x0DBF             LSRS     R7,R7,#+22
   \   0000007E   0x59D2             LDR      R2,[R2, R7]
   \   00000080   0x404A             EORS     R2,R2,R1
   \   00000082   0x....             LDR      R1,??DataTable24_1
   \   00000084   0x042F             LSLS     R7,R5,#+16
   \   00000086   0x0E3F             LSRS     R7,R7,#+24
   \   00000088   0x00BF             LSLS     R7,R7,#+2
   \   0000008A   0x59C9             LDR      R1,[R1, R7]
   \   0000008C   0x4051             EORS     R1,R1,R2
   \   0000008E   0x....             LDR      R2,??DataTable24_2
   \   00000090   0x0237             LSLS     R7,R6,#+8
   \   00000092   0x0E3F             LSRS     R7,R7,#+24
   \   00000094   0x00BF             LSLS     R7,R7,#+2
   \   00000096   0x59D2             LDR      R2,[R2, R7]
   \   00000098   0x404A             EORS     R2,R2,R1
   \   0000009A   0x....             LDR      R1,??DataTable24_3
   \   0000009C   0x0E1F             LSRS     R7,R3,#+24
   \   0000009E   0x00BF             LSLS     R7,R7,#+2
   \   000000A0   0x59C9             LDR      R1,[R1, R7]
   \   000000A2   0x4051             EORS     R1,R1,R2
   \   000000A4   0x9100             STR      R1,[SP, #+0]
   \   000000A6   0x6841             LDR      R1,[R0, #+4]
   \   000000A8   0x....             LDR      R2,??DataTable24
   \   000000AA   0x062F             LSLS     R7,R5,#+24
   \   000000AC   0x0DBF             LSRS     R7,R7,#+22
   \   000000AE   0x59D2             LDR      R2,[R2, R7]
   \   000000B0   0x404A             EORS     R2,R2,R1
   \   000000B2   0x....             LDR      R1,??DataTable24_1
   \   000000B4   0x0437             LSLS     R7,R6,#+16
   \   000000B6   0x0E3F             LSRS     R7,R7,#+24
   \   000000B8   0x00BF             LSLS     R7,R7,#+2
   \   000000BA   0x59C9             LDR      R1,[R1, R7]
   \   000000BC   0x4051             EORS     R1,R1,R2
   \   000000BE   0x....             LDR      R2,??DataTable24_2
   \   000000C0   0x021F             LSLS     R7,R3,#+8
   \   000000C2   0x0E3F             LSRS     R7,R7,#+24
   \   000000C4   0x00BF             LSLS     R7,R7,#+2
   \   000000C6   0x59D2             LDR      R2,[R2, R7]
   \   000000C8   0x404A             EORS     R2,R2,R1
   \   000000CA   0x....             LDR      R1,??DataTable24_3
   \   000000CC   0x0E27             LSRS     R7,R4,#+24
   \   000000CE   0x00BF             LSLS     R7,R7,#+2
   \   000000D0   0x59C9             LDR      R1,[R1, R7]
   \   000000D2   0x4051             EORS     R1,R1,R2
   \   000000D4   0x6887             LDR      R7,[R0, #+8]
   \   000000D6   0x46BC             MOV      R12,R7
   \   000000D8   0x....             LDR      R7,??DataTable24
   \   000000DA   0x0632             LSLS     R2,R6,#+24
   \   000000DC   0x0D92             LSRS     R2,R2,#+22
   \   000000DE   0x58BA             LDR      R2,[R7, R2]
   \   000000E0   0x4667             MOV      R7,R12
   \   000000E2   0x407A             EORS     R2,R2,R7
   \   000000E4   0x4694             MOV      R12,R2
   \   000000E6   0x....             LDR      R7,??DataTable24_1
   \   000000E8   0x041A             LSLS     R2,R3,#+16
   \   000000EA   0x0E12             LSRS     R2,R2,#+24
   \   000000EC   0x0092             LSLS     R2,R2,#+2
   \   000000EE   0x58BA             LDR      R2,[R7, R2]
   \   000000F0   0x4667             MOV      R7,R12
   \   000000F2   0x407A             EORS     R2,R2,R7
   \   000000F4   0x4694             MOV      R12,R2
   \   000000F6   0x....             LDR      R7,??DataTable24_2
   \   000000F8   0x0222             LSLS     R2,R4,#+8
   \   000000FA   0x0E12             LSRS     R2,R2,#+24
   \   000000FC   0x0092             LSLS     R2,R2,#+2
   \   000000FE   0x58BA             LDR      R2,[R7, R2]
   \   00000100   0x4667             MOV      R7,R12
   \   00000102   0x407A             EORS     R2,R2,R7
   \   00000104   0x4694             MOV      R12,R2
   \   00000106   0x....             LDR      R7,??DataTable24_3
   \   00000108   0x0E2A             LSRS     R2,R5,#+24
   \   0000010A   0x0092             LSLS     R2,R2,#+2
   \   0000010C   0x58BA             LDR      R2,[R7, R2]
   \   0000010E   0x4667             MOV      R7,R12
   \   00000110   0x407A             EORS     R2,R2,R7
   \   00000112   0x68C7             LDR      R7,[R0, #+12]
   \   00000114   0x46BC             MOV      R12,R7
   \   00000116   0x....             LDR      R7,??DataTable24
   \   00000118   0x061B             LSLS     R3,R3,#+24
   \   0000011A   0x0D9B             LSRS     R3,R3,#+22
   \   0000011C   0x58FB             LDR      R3,[R7, R3]
   \   0000011E   0x4667             MOV      R7,R12
   \   00000120   0x407B             EORS     R3,R3,R7
   \   00000122   0x....             LDR      R7,??DataTable24_1
   \   00000124   0x0424             LSLS     R4,R4,#+16
   \   00000126   0x0E24             LSRS     R4,R4,#+24
   \   00000128   0x00A4             LSLS     R4,R4,#+2
   \   0000012A   0x593C             LDR      R4,[R7, R4]
   \   0000012C   0x405C             EORS     R4,R4,R3
   \   0000012E   0x....             LDR      R3,??DataTable24_2
   \   00000130   0x022D             LSLS     R5,R5,#+8
   \   00000132   0x0E2D             LSRS     R5,R5,#+24
   \   00000134   0x00AD             LSLS     R5,R5,#+2
   \   00000136   0x595D             LDR      R5,[R3, R5]
   \   00000138   0x4065             EORS     R5,R5,R4
   \   0000013A   0x....             LDR      R3,??DataTable24_3
   \   0000013C   0x0E34             LSRS     R4,R6,#+24
   \   0000013E   0x00A4             LSLS     R4,R4,#+2
   \   00000140   0x591B             LDR      R3,[R3, R4]
   \   00000142   0x406B             EORS     R3,R3,R5
    730                  AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   \   00000144   0x6904             LDR      R4,[R0, #+16]
   \   00000146   0x....             LDR      R5,??DataTable24
   \   00000148   0x9E00             LDR      R6,[SP, #+0]
   \   0000014A   0x0636             LSLS     R6,R6,#+24
   \   0000014C   0x0DB6             LSRS     R6,R6,#+22
   \   0000014E   0x59AD             LDR      R5,[R5, R6]
   \   00000150   0x4065             EORS     R5,R5,R4
   \   00000152   0x040E             LSLS     R6,R1,#+16
   \   00000154   0x0E36             LSRS     R6,R6,#+24
   \   00000156   0x00B6             LSLS     R6,R6,#+2
   \   00000158   0x59BC             LDR      R4,[R7, R6]
   \   0000015A   0x406C             EORS     R4,R4,R5
   \   0000015C   0x....             LDR      R5,??DataTable24_2
   \   0000015E   0x0216             LSLS     R6,R2,#+8
   \   00000160   0x0E36             LSRS     R6,R6,#+24
   \   00000162   0x00B6             LSLS     R6,R6,#+2
   \   00000164   0x59AD             LDR      R5,[R5, R6]
   \   00000166   0x4065             EORS     R5,R5,R4
   \   00000168   0x....             LDR      R4,??DataTable24_3
   \   0000016A   0x0E1E             LSRS     R6,R3,#+24
   \   0000016C   0x00B6             LSLS     R6,R6,#+2
   \   0000016E   0x59A4             LDR      R4,[R4, R6]
   \   00000170   0x406C             EORS     R4,R4,R5
   \   00000172   0x6945             LDR      R5,[R0, #+20]
   \   00000174   0x....             LDR      R6,??DataTable24
   \   00000176   0x060F             LSLS     R7,R1,#+24
   \   00000178   0x0DBF             LSRS     R7,R7,#+22
   \   0000017A   0x59F6             LDR      R6,[R6, R7]
   \   0000017C   0x406E             EORS     R6,R6,R5
   \   0000017E   0x....             LDR      R5,??DataTable24_1
   \   00000180   0x0417             LSLS     R7,R2,#+16
   \   00000182   0x0E3F             LSRS     R7,R7,#+24
   \   00000184   0x00BF             LSLS     R7,R7,#+2
   \   00000186   0x59ED             LDR      R5,[R5, R7]
   \   00000188   0x4075             EORS     R5,R5,R6
   \   0000018A   0x....             LDR      R6,??DataTable24_2
   \   0000018C   0x021F             LSLS     R7,R3,#+8
   \   0000018E   0x0E3F             LSRS     R7,R7,#+24
   \   00000190   0x00BF             LSLS     R7,R7,#+2
   \   00000192   0x59F6             LDR      R6,[R6, R7]
   \   00000194   0x406E             EORS     R6,R6,R5
   \   00000196   0x....             LDR      R5,??DataTable24_3
   \   00000198   0x9F00             LDR      R7,[SP, #+0]
   \   0000019A   0x0E3F             LSRS     R7,R7,#+24
   \   0000019C   0x00BF             LSLS     R7,R7,#+2
   \   0000019E   0x59ED             LDR      R5,[R5, R7]
   \   000001A0   0x4075             EORS     R5,R5,R6
   \   000001A2   0x6987             LDR      R7,[R0, #+24]
   \   000001A4   0x46BC             MOV      R12,R7
   \   000001A6   0xBF00             Nop      
   \   000001A8   0x....             ADR.N    R7,FT0
   \   000001AA   0x0616             LSLS     R6,R2,#+24
   \   000001AC   0x0DB6             LSRS     R6,R6,#+22
   \   000001AE   0x59BE             LDR      R6,[R7, R6]
   \   000001B0   0x4667             MOV      R7,R12
   \   000001B2   0x407E             EORS     R6,R6,R7
   \   000001B4   0x46B4             MOV      R12,R6
   \   000001B6   0x....             LDR      R7,??DataTable24_1
   \   000001B8   0x041E             LSLS     R6,R3,#+16
   \   000001BA   0x0E36             LSRS     R6,R6,#+24
   \   000001BC   0x00B6             LSLS     R6,R6,#+2
   \   000001BE   0x59BE             LDR      R6,[R7, R6]
   \   000001C0   0x4667             MOV      R7,R12
   \   000001C2   0x407E             EORS     R6,R6,R7
   \   000001C4   0x46B4             MOV      R12,R6
   \   000001C6   0x....             LDR      R7,??DataTable24_2
   \   000001C8   0x9E00             LDR      R6,[SP, #+0]
   \   000001CA   0x0236             LSLS     R6,R6,#+8
   \   000001CC   0x0E36             LSRS     R6,R6,#+24
   \   000001CE   0x00B6             LSLS     R6,R6,#+2
   \   000001D0   0x59BE             LDR      R6,[R7, R6]
   \   000001D2   0x4667             MOV      R7,R12
   \   000001D4   0x407E             EORS     R6,R6,R7
   \   000001D6   0x46B4             MOV      R12,R6
   \   000001D8   0x....             LDR      R7,??DataTable24_3
   \   000001DA   0x0E0E             LSRS     R6,R1,#+24
   \   000001DC   0x00B6             LSLS     R6,R6,#+2
   \   000001DE   0x59BE             LDR      R6,[R7, R6]
   \   000001E0   0x4667             MOV      R7,R12
   \   000001E2   0x407E             EORS     R6,R6,R7
   \   000001E4   0x69C7             LDR      R7,[R0, #+28]
   \   000001E6   0x46BC             MOV      R12,R7
   \   000001E8   0x....             ADR.N    R7,FT0
   \   000001EA   0x061B             LSLS     R3,R3,#+24
   \   000001EC   0x0D9B             LSRS     R3,R3,#+22
   \   000001EE   0x58FB             LDR      R3,[R7, R3]
   \   000001F0   0x4667             MOV      R7,R12
   \   000001F2   0x407B             EORS     R3,R3,R7
   \   000001F4   0x469C             MOV      R12,R3
   \   000001F6   0x....             LDR      R7,??DataTable24_1
   \   000001F8   0x9B00             LDR      R3,[SP, #+0]
   \   000001FA   0x041B             LSLS     R3,R3,#+16
   \   000001FC   0x0E1B             LSRS     R3,R3,#+24
   \   000001FE   0x009B             LSLS     R3,R3,#+2
   \   00000200   0x58FB             LDR      R3,[R7, R3]
   \   00000202   0x4667             MOV      R7,R12
   \   00000204   0x407B             EORS     R3,R3,R7
   \   00000206   0x....             LDR      R7,??DataTable24_2
   \   00000208   0x0209             LSLS     R1,R1,#+8
   \   0000020A   0x0E09             LSRS     R1,R1,#+24
   \   0000020C   0x0089             LSLS     R1,R1,#+2
   \   0000020E   0x5879             LDR      R1,[R7, R1]
   \   00000210   0x4059             EORS     R1,R1,R3
   \   00000212   0x....             LDR      R3,??DataTable24_3
   \   00000214   0x0E12             LSRS     R2,R2,#+24
   \   00000216   0x0092             LSLS     R2,R2,#+2
   \   00000218   0x589B             LDR      R3,[R3, R2]
   \   0000021A   0x404B             EORS     R3,R3,R1
   \   0000021C   0x3020             ADDS     R0,R0,#+32
    731              }
   \   0000021E   0x9901             LDR      R1,[SP, #+4]
   \   00000220   0x1E49             SUBS     R1,R1,#+1
   \   00000222   0x9101             STR      R1,[SP, #+4]
   \   00000224   0xD000             BEQ      .+4
   \   00000226   0xE726             B        ??mbedtls_internal_aes_encrypt_1
    732          
    733              AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   \                     ??mbedtls_internal_aes_encrypt_0: (+1)
   \   00000228   0x6801             LDR      R1,[R0, #+0]
   \   0000022A   0xBF00             Nop      
   \   0000022C   0x....             ADR.N    R2,FT0
   \   0000022E   0x0627             LSLS     R7,R4,#+24
   \   00000230   0x0DBF             LSRS     R7,R7,#+22
   \   00000232   0x59D2             LDR      R2,[R2, R7]
   \   00000234   0x404A             EORS     R2,R2,R1
   \   00000236   0x....             LDR      R1,??DataTable24_1
   \   00000238   0x042F             LSLS     R7,R5,#+16
   \   0000023A   0x0E3F             LSRS     R7,R7,#+24
   \   0000023C   0x00BF             LSLS     R7,R7,#+2
   \   0000023E   0x59C9             LDR      R1,[R1, R7]
   \   00000240   0x4051             EORS     R1,R1,R2
   \   00000242   0x....             LDR      R2,??DataTable24_2
   \   00000244   0x0237             LSLS     R7,R6,#+8
   \   00000246   0x0E3F             LSRS     R7,R7,#+24
   \   00000248   0x00BF             LSLS     R7,R7,#+2
   \   0000024A   0x59D2             LDR      R2,[R2, R7]
   \   0000024C   0x404A             EORS     R2,R2,R1
   \   0000024E   0x....             LDR      R1,??DataTable24_3
   \   00000250   0x0E1F             LSRS     R7,R3,#+24
   \   00000252   0x00BF             LSLS     R7,R7,#+2
   \   00000254   0x59C9             LDR      R1,[R1, R7]
   \   00000256   0x4051             EORS     R1,R1,R2
   \   00000258   0x9100             STR      R1,[SP, #+0]
   \   0000025A   0x6841             LDR      R1,[R0, #+4]
   \   0000025C   0x....             ADR.N    R2,FT0
   \   0000025E   0x062F             LSLS     R7,R5,#+24
   \   00000260   0x0DBF             LSRS     R7,R7,#+22
   \   00000262   0x59D2             LDR      R2,[R2, R7]
   \   00000264   0x404A             EORS     R2,R2,R1
   \   00000266   0x....             LDR      R1,??DataTable24_1
   \   00000268   0x0437             LSLS     R7,R6,#+16
   \   0000026A   0x0E3F             LSRS     R7,R7,#+24
   \   0000026C   0x00BF             LSLS     R7,R7,#+2
   \   0000026E   0x59C9             LDR      R1,[R1, R7]
   \   00000270   0x4051             EORS     R1,R1,R2
   \   00000272   0x....             LDR      R2,??DataTable24_2
   \   00000274   0x021F             LSLS     R7,R3,#+8
   \   00000276   0x0E3F             LSRS     R7,R7,#+24
   \   00000278   0x00BF             LSLS     R7,R7,#+2
   \   0000027A   0x59D2             LDR      R2,[R2, R7]
   \   0000027C   0x404A             EORS     R2,R2,R1
   \   0000027E   0x....             LDR      R1,??DataTable24_3
   \   00000280   0x0E27             LSRS     R7,R4,#+24
   \   00000282   0x00BF             LSLS     R7,R7,#+2
   \   00000284   0x59C9             LDR      R1,[R1, R7]
   \   00000286   0x4051             EORS     R1,R1,R2
   \   00000288   0x9101             STR      R1,[SP, #+4]
   \   0000028A   0x6881             LDR      R1,[R0, #+8]
   \   0000028C   0x....             ADR.N    R2,FT0
   \   0000028E   0x0637             LSLS     R7,R6,#+24
   \   00000290   0x0DBF             LSRS     R7,R7,#+22
   \   00000292   0x59D2             LDR      R2,[R2, R7]
   \   00000294   0x404A             EORS     R2,R2,R1
   \   00000296   0x....             LDR      R1,??DataTable24_1
   \   00000298   0x041F             LSLS     R7,R3,#+16
   \   0000029A   0x0E3F             LSRS     R7,R7,#+24
   \   0000029C   0x00BF             LSLS     R7,R7,#+2
   \   0000029E   0x59C9             LDR      R1,[R1, R7]
   \   000002A0   0x4051             EORS     R1,R1,R2
   \   000002A2   0x....             LDR      R2,??DataTable24_2
   \   000002A4   0x0227             LSLS     R7,R4,#+8
   \   000002A6   0x0E3F             LSRS     R7,R7,#+24
   \   000002A8   0x00BF             LSLS     R7,R7,#+2
   \   000002AA   0x59D2             LDR      R2,[R2, R7]
   \   000002AC   0x404A             EORS     R2,R2,R1
   \   000002AE   0x....             LDR      R1,??DataTable24_3
   \   000002B0   0x0E2F             LSRS     R7,R5,#+24
   \   000002B2   0x00BF             LSLS     R7,R7,#+2
   \   000002B4   0x59C9             LDR      R1,[R1, R7]
   \   000002B6   0x4051             EORS     R1,R1,R2
   \   000002B8   0x68C2             LDR      R2,[R0, #+12]
   \   000002BA   0xBF00             Nop      
   \   000002BC   0x....             ADR.N    R7,FT0
   \   000002BE   0x061B             LSLS     R3,R3,#+24
   \   000002C0   0x0D9B             LSRS     R3,R3,#+22
   \   000002C2   0x58FB             LDR      R3,[R7, R3]
   \   000002C4   0x4053             EORS     R3,R3,R2
   \   000002C6   0x....             LDR      R2,??DataTable24_1
   \   000002C8   0x0424             LSLS     R4,R4,#+16
   \   000002CA   0x0E24             LSRS     R4,R4,#+24
   \   000002CC   0x00A4             LSLS     R4,R4,#+2
   \   000002CE   0x5912             LDR      R2,[R2, R4]
   \   000002D0   0x405A             EORS     R2,R2,R3
   \   000002D2   0x....             LDR      R3,??DataTable24_2
   \   000002D4   0x022C             LSLS     R4,R5,#+8
   \   000002D6   0x0E24             LSRS     R4,R4,#+24
   \   000002D8   0x00A4             LSLS     R4,R4,#+2
   \   000002DA   0x591C             LDR      R4,[R3, R4]
   \   000002DC   0x4054             EORS     R4,R4,R2
   \   000002DE   0x....             LDR      R2,??DataTable24_3
   \   000002E0   0x0E33             LSRS     R3,R6,#+24
   \   000002E2   0x009B             LSLS     R3,R3,#+2
   \   000002E4   0x58D3             LDR      R3,[R2, R3]
   \   000002E6   0x4063             EORS     R3,R3,R4
    734          
    735              X0 = *RK++ ^ \
    736                      ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
    737                      ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    738                      ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    739                      ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
   \   000002E8   0x....             LDR      R4,??DataTable24_4
   \   000002EA   0x6905             LDR      R5,[R0, #+16]
   \   000002EC   0x9A00             LDR      R2,[SP, #+0]
   \   000002EE   0xB2D2             UXTB     R2,R2
   \   000002F0   0x5CA2             LDRB     R2,[R4, R2]
   \   000002F2   0x406A             EORS     R2,R2,R5
   \   000002F4   0x9D01             LDR      R5,[SP, #+4]
   \   000002F6   0x042D             LSLS     R5,R5,#+16
   \   000002F8   0x0E2D             LSRS     R5,R5,#+24
   \   000002FA   0x5D65             LDRB     R5,[R4, R5]
   \   000002FC   0x022D             LSLS     R5,R5,#+8
   \   000002FE   0x4055             EORS     R5,R5,R2
   \   00000300   0x020A             LSLS     R2,R1,#+8
   \   00000302   0x0E12             LSRS     R2,R2,#+24
   \   00000304   0x5CA2             LDRB     R2,[R4, R2]
   \   00000306   0x0412             LSLS     R2,R2,#+16
   \   00000308   0x406A             EORS     R2,R2,R5
   \   0000030A   0x0E1D             LSRS     R5,R3,#+24
   \   0000030C   0x5D65             LDRB     R5,[R4, R5]
   \   0000030E   0x062D             LSLS     R5,R5,#+24
   \   00000310   0x4055             EORS     R5,R5,R2
    740          
    741              X1 = *RK++ ^ \
    742                      ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
    743                      ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    744                      ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    745                      ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
   \   00000312   0x6942             LDR      R2,[R0, #+20]
   \   00000314   0x9E01             LDR      R6,[SP, #+4]
   \   00000316   0xB2F6             UXTB     R6,R6
   \   00000318   0x5DA6             LDRB     R6,[R4, R6]
   \   0000031A   0x4056             EORS     R6,R6,R2
   \   0000031C   0x040A             LSLS     R2,R1,#+16
   \   0000031E   0x0E12             LSRS     R2,R2,#+24
   \   00000320   0x5CA2             LDRB     R2,[R4, R2]
   \   00000322   0x0212             LSLS     R2,R2,#+8
   \   00000324   0x4072             EORS     R2,R2,R6
   \   00000326   0x021E             LSLS     R6,R3,#+8
   \   00000328   0x0E36             LSRS     R6,R6,#+24
   \   0000032A   0x5DA6             LDRB     R6,[R4, R6]
   \   0000032C   0x0437             LSLS     R7,R6,#+16
   \   0000032E   0x4057             EORS     R7,R7,R2
   \   00000330   0x9A00             LDR      R2,[SP, #+0]
   \   00000332   0x0E12             LSRS     R2,R2,#+24
   \   00000334   0x5CA2             LDRB     R2,[R4, R2]
   \   00000336   0x0616             LSLS     R6,R2,#+24
   \   00000338   0x407E             EORS     R6,R6,R7
    746          
    747              X2 = *RK++ ^ \
    748                      ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
    749                      ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    750                      ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    751                      ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
   \   0000033A   0x6982             LDR      R2,[R0, #+24]
   \   0000033C   0xB2CF             UXTB     R7,R1
   \   0000033E   0x5DE7             LDRB     R7,[R4, R7]
   \   00000340   0x4057             EORS     R7,R7,R2
   \   00000342   0x041A             LSLS     R2,R3,#+16
   \   00000344   0x0E12             LSRS     R2,R2,#+24
   \   00000346   0x5CA2             LDRB     R2,[R4, R2]
   \   00000348   0x0212             LSLS     R2,R2,#+8
   \   0000034A   0x407A             EORS     R2,R2,R7
   \   0000034C   0x9F00             LDR      R7,[SP, #+0]
   \   0000034E   0x023F             LSLS     R7,R7,#+8
   \   00000350   0x0E3F             LSRS     R7,R7,#+24
   \   00000352   0x5DE7             LDRB     R7,[R4, R7]
   \   00000354   0x043F             LSLS     R7,R7,#+16
   \   00000356   0x4057             EORS     R7,R7,R2
   \   00000358   0x9A01             LDR      R2,[SP, #+4]
   \   0000035A   0x0E12             LSRS     R2,R2,#+24
   \   0000035C   0x5CA2             LDRB     R2,[R4, R2]
   \   0000035E   0x0612             LSLS     R2,R2,#+24
   \   00000360   0x407A             EORS     R2,R2,R7
    752          
    753              X3 = *RK++ ^ \
    754                      ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
    755                      ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    756                      ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    757                      ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
   \   00000362   0x69C0             LDR      R0,[R0, #+28]
   \   00000364   0xB2DB             UXTB     R3,R3
   \   00000366   0x5CE3             LDRB     R3,[R4, R3]
   \   00000368   0x4043             EORS     R3,R3,R0
   \   0000036A   0x9800             LDR      R0,[SP, #+0]
   \   0000036C   0x0400             LSLS     R0,R0,#+16
   \   0000036E   0x0E00             LSRS     R0,R0,#+24
   \   00000370   0x5C20             LDRB     R0,[R4, R0]
   \   00000372   0x0200             LSLS     R0,R0,#+8
   \   00000374   0x4058             EORS     R0,R0,R3
   \   00000376   0x9B01             LDR      R3,[SP, #+4]
   \   00000378   0x021B             LSLS     R3,R3,#+8
   \   0000037A   0x0E1B             LSRS     R3,R3,#+24
   \   0000037C   0x5CE3             LDRB     R3,[R4, R3]
   \   0000037E   0x041B             LSLS     R3,R3,#+16
   \   00000380   0x4043             EORS     R3,R3,R0
   \   00000382   0x0E08             LSRS     R0,R1,#+24
   \   00000384   0x5C20             LDRB     R0,[R4, R0]
   \   00000386   0x0600             LSLS     R0,R0,#+24
   \   00000388   0x4058             EORS     R0,R0,R3
    758          
    759              PUT_UINT32_LE( X0, output,  0 );
   \   0000038A   0x....             B.N      ?Subroutine0
    760              PUT_UINT32_LE( X1, output,  4 );
    761              PUT_UINT32_LE( X2, output,  8 );
    762              PUT_UINT32_LE( X3, output, 12 );
    763          
    764              return( 0 );
    765          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x9B02             LDR      R3,[SP, #+8]
   \   00000002   0x701D             STRB     R5,[R3, #+0]
   \   00000004   0x0A29             LSRS     R1,R5,#+8
   \   00000006   0x9B02             LDR      R3,[SP, #+8]
   \   00000008   0x7059             STRB     R1,[R3, #+1]
   \   0000000A   0x0C29             LSRS     R1,R5,#+16
   \   0000000C   0x9B02             LDR      R3,[SP, #+8]
   \   0000000E   0x7099             STRB     R1,[R3, #+2]
   \   00000010   0x0E29             LSRS     R1,R5,#+24
   \   00000012   0x9B02             LDR      R3,[SP, #+8]
   \   00000014   0x70D9             STRB     R1,[R3, #+3]
   \   00000016   0x9B02             LDR      R3,[SP, #+8]
   \   00000018   0x711E             STRB     R6,[R3, #+4]
   \   0000001A   0x0A31             LSRS     R1,R6,#+8
   \   0000001C   0x9B02             LDR      R3,[SP, #+8]
   \   0000001E   0x7159             STRB     R1,[R3, #+5]
   \   00000020   0x0C31             LSRS     R1,R6,#+16
   \   00000022   0x9B02             LDR      R3,[SP, #+8]
   \   00000024   0x7199             STRB     R1,[R3, #+6]
   \   00000026   0x0E31             LSRS     R1,R6,#+24
   \   00000028   0x9B02             LDR      R3,[SP, #+8]
   \   0000002A   0x71D9             STRB     R1,[R3, #+7]
   \   0000002C   0x9B02             LDR      R3,[SP, #+8]
   \   0000002E   0x721A             STRB     R2,[R3, #+8]
   \   00000030   0x0A11             LSRS     R1,R2,#+8
   \   00000032   0x9B02             LDR      R3,[SP, #+8]
   \   00000034   0x7259             STRB     R1,[R3, #+9]
   \   00000036   0x0C11             LSRS     R1,R2,#+16
   \   00000038   0x9B02             LDR      R3,[SP, #+8]
   \   0000003A   0x7299             STRB     R1,[R3, #+10]
   \   0000003C   0x0E11             LSRS     R1,R2,#+24
   \   0000003E   0x9A02             LDR      R2,[SP, #+8]
   \   00000040   0x72D1             STRB     R1,[R2, #+11]
   \   00000042   0x9A02             LDR      R2,[SP, #+8]
   \   00000044   0x7310             STRB     R0,[R2, #+12]
   \   00000046   0x0A01             LSRS     R1,R0,#+8
   \   00000048   0x9A02             LDR      R2,[SP, #+8]
   \   0000004A   0x7351             STRB     R1,[R2, #+13]
   \   0000004C   0x0C01             LSRS     R1,R0,#+16
   \   0000004E   0x9A02             LDR      R2,[SP, #+8]
   \   00000050   0x7391             STRB     R1,[R2, #+14]
   \   00000052   0x0E00             LSRS     R0,R0,#+24
   \   00000054   0x9902             LDR      R1,[SP, #+8]
   \   00000056   0x73C8             STRB     R0,[R1, #+15]
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0xB003             ADD      SP,SP,#+12
   \   0000005C   0xBDF0             POP      {R4-R7,PC}       ;; return
    766          #endif /* !MBEDTLS_AES_ENCRYPT_ALT */
    767          

   \                                 In section .text, align 2, keep-with-next
    768          void mbedtls_aes_encrypt( mbedtls_aes_context *ctx,
    769                                    const unsigned char input[16],
    770                                    unsigned char output[16] )
    771          {
   \                     mbedtls_aes_encrypt: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    772              mbedtls_internal_aes_encrypt( ctx, input, output );
   \   00000002   0x.... 0x....      BL       mbedtls_internal_aes_encrypt
    773          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    774          
    775          /*
    776           * AES-ECB block decryption
    777           */
    778          #if !defined(MBEDTLS_AES_DECRYPT_ALT)

   \                                 In section .text, align 4, keep-with-next
    779          int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
    780                                            const unsigned char input[16],
    781                                            unsigned char output[16] )
    782          {
   \                     mbedtls_internal_aes_decrypt: (+1)
   \   00000000   0xB5F7             PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0x0002             MOVS     R2,R0
    783              int i;
    784              uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;
    785          
    786              RK = ctx->rk;
   \   00000004   0x6850             LDR      R0,[R2, #+4]
    787          
    788              GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
   \   00000006   0x780B             LDRB     R3,[R1, #+0]
   \   00000008   0x784C             LDRB     R4,[R1, #+1]
   \   0000000A   0x0224             LSLS     R4,R4,#+8
   \   0000000C   0x431C             ORRS     R4,R4,R3
   \   0000000E   0x788B             LDRB     R3,[R1, #+2]
   \   00000010   0x041B             LSLS     R3,R3,#+16
   \   00000012   0x4323             ORRS     R3,R3,R4
   \   00000014   0x78CC             LDRB     R4,[R1, #+3]
   \   00000016   0x0625             LSLS     R5,R4,#+24
   \   00000018   0x431D             ORRS     R5,R5,R3
   \   0000001A   0x6804             LDR      R4,[R0, #+0]
   \   0000001C   0x406C             EORS     R4,R4,R5
    789              GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
   \   0000001E   0x790B             LDRB     R3,[R1, #+4]
   \   00000020   0x794D             LDRB     R5,[R1, #+5]
   \   00000022   0x022D             LSLS     R5,R5,#+8
   \   00000024   0x431D             ORRS     R5,R5,R3
   \   00000026   0x798B             LDRB     R3,[R1, #+6]
   \   00000028   0x041B             LSLS     R3,R3,#+16
   \   0000002A   0x432B             ORRS     R3,R3,R5
   \   0000002C   0x79CD             LDRB     R5,[R1, #+7]
   \   0000002E   0x062E             LSLS     R6,R5,#+24
   \   00000030   0x431E             ORRS     R6,R6,R3
   \   00000032   0x6845             LDR      R5,[R0, #+4]
   \   00000034   0x4075             EORS     R5,R5,R6
    790              GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
   \   00000036   0x7A0E             LDRB     R6,[R1, #+8]
   \   00000038   0x7A4B             LDRB     R3,[R1, #+9]
   \   0000003A   0x021B             LSLS     R3,R3,#+8
   \   0000003C   0x4333             ORRS     R3,R3,R6
   \   0000003E   0x7A8E             LDRB     R6,[R1, #+10]
   \   00000040   0x0436             LSLS     R6,R6,#+16
   \   00000042   0x431E             ORRS     R6,R6,R3
   \   00000044   0x7ACB             LDRB     R3,[R1, #+11]
   \   00000046   0x061B             LSLS     R3,R3,#+24
   \   00000048   0x4333             ORRS     R3,R3,R6
   \   0000004A   0x6886             LDR      R6,[R0, #+8]
   \   0000004C   0x405E             EORS     R6,R6,R3
    791              GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
   \   0000004E   0x7B0F             LDRB     R7,[R1, #+12]
   \   00000050   0x7B4B             LDRB     R3,[R1, #+13]
   \   00000052   0x021B             LSLS     R3,R3,#+8
   \   00000054   0x433B             ORRS     R3,R3,R7
   \   00000056   0x7B8F             LDRB     R7,[R1, #+14]
   \   00000058   0x043F             LSLS     R7,R7,#+16
   \   0000005A   0x431F             ORRS     R7,R7,R3
   \   0000005C   0x7BC9             LDRB     R1,[R1, #+15]
   \   0000005E   0x0609             LSLS     R1,R1,#+24
   \   00000060   0x4339             ORRS     R1,R1,R7
   \   00000062   0x68C3             LDR      R3,[R0, #+12]
   \   00000064   0x404B             EORS     R3,R3,R1
   \   00000066   0x3010             ADDS     R0,R0,#+16
    792          
    793              for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
   \   00000068   0x6811             LDR      R1,[R2, #+0]
   \   0000006A   0x1049             ASRS     R1,R1,#+1
   \   0000006C   0x1E49             SUBS     R1,R1,#+1
   \   0000006E   0x2901             CMP      R1,#+1
   \   00000070   0xDA00             BGE      .+4
   \   00000072   0xE0D7             B        ??mbedtls_internal_aes_decrypt_0
   \   00000074   0x9101             STR      R1,[SP, #+4]
    794              {
    795                  AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   \                     ??mbedtls_internal_aes_decrypt_1: (+1)
   \   00000076   0x6801             LDR      R1,[R0, #+0]
   \   00000078   0x4A9B             LDR      R2,??mbedtls_internal_aes_decrypt_2
   \   0000007A   0x0627             LSLS     R7,R4,#+24
   \   0000007C   0x0DBF             LSRS     R7,R7,#+22
   \   0000007E   0x59D2             LDR      R2,[R2, R7]
   \   00000080   0x404A             EORS     R2,R2,R1
   \   00000082   0x499A             LDR      R1,??mbedtls_internal_aes_decrypt_2+0x4
   \   00000084   0x041F             LSLS     R7,R3,#+16
   \   00000086   0x0E3F             LSRS     R7,R7,#+24
   \   00000088   0x00BF             LSLS     R7,R7,#+2
   \   0000008A   0x59C9             LDR      R1,[R1, R7]
   \   0000008C   0x4051             EORS     R1,R1,R2
   \   0000008E   0x4A98             LDR      R2,??mbedtls_internal_aes_decrypt_2+0x8
   \   00000090   0x0237             LSLS     R7,R6,#+8
   \   00000092   0x0E3F             LSRS     R7,R7,#+24
   \   00000094   0x00BF             LSLS     R7,R7,#+2
   \   00000096   0x59D2             LDR      R2,[R2, R7]
   \   00000098   0x404A             EORS     R2,R2,R1
   \   0000009A   0x4996             LDR      R1,??mbedtls_internal_aes_decrypt_2+0xC
   \   0000009C   0x0E2F             LSRS     R7,R5,#+24
   \   0000009E   0x00BF             LSLS     R7,R7,#+2
   \   000000A0   0x59C9             LDR      R1,[R1, R7]
   \   000000A2   0x4051             EORS     R1,R1,R2
   \   000000A4   0x9100             STR      R1,[SP, #+0]
   \   000000A6   0x6841             LDR      R1,[R0, #+4]
   \   000000A8   0x4A8F             LDR      R2,??mbedtls_internal_aes_decrypt_2
   \   000000AA   0x062F             LSLS     R7,R5,#+24
   \   000000AC   0x0DBF             LSRS     R7,R7,#+22
   \   000000AE   0x59D2             LDR      R2,[R2, R7]
   \   000000B0   0x404A             EORS     R2,R2,R1
   \   000000B2   0x498E             LDR      R1,??mbedtls_internal_aes_decrypt_2+0x4
   \   000000B4   0x0427             LSLS     R7,R4,#+16
   \   000000B6   0x0E3F             LSRS     R7,R7,#+24
   \   000000B8   0x00BF             LSLS     R7,R7,#+2
   \   000000BA   0x59C9             LDR      R1,[R1, R7]
   \   000000BC   0x4051             EORS     R1,R1,R2
   \   000000BE   0x4A8C             LDR      R2,??mbedtls_internal_aes_decrypt_2+0x8
   \   000000C0   0x021F             LSLS     R7,R3,#+8
   \   000000C2   0x0E3F             LSRS     R7,R7,#+24
   \   000000C4   0x00BF             LSLS     R7,R7,#+2
   \   000000C6   0x59D2             LDR      R2,[R2, R7]
   \   000000C8   0x404A             EORS     R2,R2,R1
   \   000000CA   0x498A             LDR      R1,??mbedtls_internal_aes_decrypt_2+0xC
   \   000000CC   0x0E37             LSRS     R7,R6,#+24
   \   000000CE   0x00BF             LSLS     R7,R7,#+2
   \   000000D0   0x59C9             LDR      R1,[R1, R7]
   \   000000D2   0x4051             EORS     R1,R1,R2
   \   000000D4   0x6887             LDR      R7,[R0, #+8]
   \   000000D6   0x46BC             MOV      R12,R7
   \   000000D8   0x4F83             LDR      R7,??mbedtls_internal_aes_decrypt_2
   \   000000DA   0x0632             LSLS     R2,R6,#+24
   \   000000DC   0x0D92             LSRS     R2,R2,#+22
   \   000000DE   0x58BA             LDR      R2,[R7, R2]
   \   000000E0   0x4667             MOV      R7,R12
   \   000000E2   0x407A             EORS     R2,R2,R7
   \   000000E4   0x4694             MOV      R12,R2
   \   000000E6   0x4F81             LDR      R7,??mbedtls_internal_aes_decrypt_2+0x4
   \   000000E8   0x042A             LSLS     R2,R5,#+16
   \   000000EA   0x0E12             LSRS     R2,R2,#+24
   \   000000EC   0x0092             LSLS     R2,R2,#+2
   \   000000EE   0x58BA             LDR      R2,[R7, R2]
   \   000000F0   0x4667             MOV      R7,R12
   \   000000F2   0x407A             EORS     R2,R2,R7
   \   000000F4   0x4694             MOV      R12,R2
   \   000000F6   0x4F7E             LDR      R7,??mbedtls_internal_aes_decrypt_2+0x8
   \   000000F8   0x0222             LSLS     R2,R4,#+8
   \   000000FA   0x0E12             LSRS     R2,R2,#+24
   \   000000FC   0x0092             LSLS     R2,R2,#+2
   \   000000FE   0x58BA             LDR      R2,[R7, R2]
   \   00000100   0x4667             MOV      R7,R12
   \   00000102   0x407A             EORS     R2,R2,R7
   \   00000104   0x4694             MOV      R12,R2
   \   00000106   0x4F7B             LDR      R7,??mbedtls_internal_aes_decrypt_2+0xC
   \   00000108   0x0E1A             LSRS     R2,R3,#+24
   \   0000010A   0x0092             LSLS     R2,R2,#+2
   \   0000010C   0x58BA             LDR      R2,[R7, R2]
   \   0000010E   0x4667             MOV      R7,R12
   \   00000110   0x407A             EORS     R2,R2,R7
   \   00000112   0x68C7             LDR      R7,[R0, #+12]
   \   00000114   0x46BC             MOV      R12,R7
   \   00000116   0x4F74             LDR      R7,??mbedtls_internal_aes_decrypt_2
   \   00000118   0x061B             LSLS     R3,R3,#+24
   \   0000011A   0x0D9B             LSRS     R3,R3,#+22
   \   0000011C   0x58FB             LDR      R3,[R7, R3]
   \   0000011E   0x4667             MOV      R7,R12
   \   00000120   0x407B             EORS     R3,R3,R7
   \   00000122   0x4F72             LDR      R7,??mbedtls_internal_aes_decrypt_2+0x4
   \   00000124   0x0436             LSLS     R6,R6,#+16
   \   00000126   0x0E36             LSRS     R6,R6,#+24
   \   00000128   0x00B6             LSLS     R6,R6,#+2
   \   0000012A   0x59BE             LDR      R6,[R7, R6]
   \   0000012C   0x405E             EORS     R6,R6,R3
   \   0000012E   0x4B70             LDR      R3,??mbedtls_internal_aes_decrypt_2+0x8
   \   00000130   0x022D             LSLS     R5,R5,#+8
   \   00000132   0x0E2D             LSRS     R5,R5,#+24
   \   00000134   0x00AD             LSLS     R5,R5,#+2
   \   00000136   0x595D             LDR      R5,[R3, R5]
   \   00000138   0x4075             EORS     R5,R5,R6
   \   0000013A   0x4B6E             LDR      R3,??mbedtls_internal_aes_decrypt_2+0xC
   \   0000013C   0x0E24             LSRS     R4,R4,#+24
   \   0000013E   0x00A4             LSLS     R4,R4,#+2
   \   00000140   0x591B             LDR      R3,[R3, R4]
   \   00000142   0x406B             EORS     R3,R3,R5
    796                  AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
   \   00000144   0x6904             LDR      R4,[R0, #+16]
   \   00000146   0x4D68             LDR      R5,??mbedtls_internal_aes_decrypt_2
   \   00000148   0x9E00             LDR      R6,[SP, #+0]
   \   0000014A   0x0636             LSLS     R6,R6,#+24
   \   0000014C   0x0DB6             LSRS     R6,R6,#+22
   \   0000014E   0x59AD             LDR      R5,[R5, R6]
   \   00000150   0x4065             EORS     R5,R5,R4
   \   00000152   0x041E             LSLS     R6,R3,#+16
   \   00000154   0x0E36             LSRS     R6,R6,#+24
   \   00000156   0x00B6             LSLS     R6,R6,#+2
   \   00000158   0x59BC             LDR      R4,[R7, R6]
   \   0000015A   0x406C             EORS     R4,R4,R5
   \   0000015C   0x4D64             LDR      R5,??mbedtls_internal_aes_decrypt_2+0x8
   \   0000015E   0x0216             LSLS     R6,R2,#+8
   \   00000160   0x0E36             LSRS     R6,R6,#+24
   \   00000162   0x00B6             LSLS     R6,R6,#+2
   \   00000164   0x59AD             LDR      R5,[R5, R6]
   \   00000166   0x4065             EORS     R5,R5,R4
   \   00000168   0x4C62             LDR      R4,??mbedtls_internal_aes_decrypt_2+0xC
   \   0000016A   0x0E0E             LSRS     R6,R1,#+24
   \   0000016C   0x00B6             LSLS     R6,R6,#+2
   \   0000016E   0x59A4             LDR      R4,[R4, R6]
   \   00000170   0x406C             EORS     R4,R4,R5
   \   00000172   0x6945             LDR      R5,[R0, #+20]
   \   00000174   0x4E5C             LDR      R6,??mbedtls_internal_aes_decrypt_2
   \   00000176   0x060F             LSLS     R7,R1,#+24
   \   00000178   0x0DBF             LSRS     R7,R7,#+22
   \   0000017A   0x59F6             LDR      R6,[R6, R7]
   \   0000017C   0x406E             EORS     R6,R6,R5
   \   0000017E   0x4D5B             LDR      R5,??mbedtls_internal_aes_decrypt_2+0x4
   \   00000180   0x9F00             LDR      R7,[SP, #+0]
   \   00000182   0x043F             LSLS     R7,R7,#+16
   \   00000184   0x0E3F             LSRS     R7,R7,#+24
   \   00000186   0x00BF             LSLS     R7,R7,#+2
   \   00000188   0x59ED             LDR      R5,[R5, R7]
   \   0000018A   0x4075             EORS     R5,R5,R6
   \   0000018C   0x4E58             LDR      R6,??mbedtls_internal_aes_decrypt_2+0x8
   \   0000018E   0x021F             LSLS     R7,R3,#+8
   \   00000190   0x0E3F             LSRS     R7,R7,#+24
   \   00000192   0x00BF             LSLS     R7,R7,#+2
   \   00000194   0x59F6             LDR      R6,[R6, R7]
   \   00000196   0x406E             EORS     R6,R6,R5
   \   00000198   0x4D56             LDR      R5,??mbedtls_internal_aes_decrypt_2+0xC
   \   0000019A   0x0E17             LSRS     R7,R2,#+24
   \   0000019C   0x00BF             LSLS     R7,R7,#+2
   \   0000019E   0x59ED             LDR      R5,[R5, R7]
   \   000001A0   0x4075             EORS     R5,R5,R6
   \   000001A2   0x6987             LDR      R7,[R0, #+24]
   \   000001A4   0x46BC             MOV      R12,R7
   \   000001A6   0x4F50             LDR      R7,??mbedtls_internal_aes_decrypt_2
   \   000001A8   0x0616             LSLS     R6,R2,#+24
   \   000001AA   0x0DB6             LSRS     R6,R6,#+22
   \   000001AC   0x59BE             LDR      R6,[R7, R6]
   \   000001AE   0x4667             MOV      R7,R12
   \   000001B0   0x407E             EORS     R6,R6,R7
   \   000001B2   0x46B4             MOV      R12,R6
   \   000001B4   0x4F4D             LDR      R7,??mbedtls_internal_aes_decrypt_2+0x4
   \   000001B6   0x040E             LSLS     R6,R1,#+16
   \   000001B8   0x0E36             LSRS     R6,R6,#+24
   \   000001BA   0x00B6             LSLS     R6,R6,#+2
   \   000001BC   0x59BE             LDR      R6,[R7, R6]
   \   000001BE   0x4667             MOV      R7,R12
   \   000001C0   0x407E             EORS     R6,R6,R7
   \   000001C2   0x46B4             MOV      R12,R6
   \   000001C4   0x4F4A             LDR      R7,??mbedtls_internal_aes_decrypt_2+0x8
   \   000001C6   0x9E00             LDR      R6,[SP, #+0]
   \   000001C8   0x0236             LSLS     R6,R6,#+8
   \   000001CA   0x0E36             LSRS     R6,R6,#+24
   \   000001CC   0x00B6             LSLS     R6,R6,#+2
   \   000001CE   0x59BE             LDR      R6,[R7, R6]
   \   000001D0   0x4667             MOV      R7,R12
   \   000001D2   0x407E             EORS     R6,R6,R7
   \   000001D4   0x46B4             MOV      R12,R6
   \   000001D6   0x4F47             LDR      R7,??mbedtls_internal_aes_decrypt_2+0xC
   \   000001D8   0x0E1E             LSRS     R6,R3,#+24
   \   000001DA   0x00B6             LSLS     R6,R6,#+2
   \   000001DC   0x59BE             LDR      R6,[R7, R6]
   \   000001DE   0x4667             MOV      R7,R12
   \   000001E0   0x407E             EORS     R6,R6,R7
   \   000001E2   0x69C7             LDR      R7,[R0, #+28]
   \   000001E4   0x46BC             MOV      R12,R7
   \   000001E6   0xBF00             Nop      
   \   000001E8   0x....             ADR.N    R7,RT0
   \   000001EA   0x061B             LSLS     R3,R3,#+24
   \   000001EC   0x0D9B             LSRS     R3,R3,#+22
   \   000001EE   0x58FB             LDR      R3,[R7, R3]
   \   000001F0   0x4667             MOV      R7,R12
   \   000001F2   0x407B             EORS     R3,R3,R7
   \   000001F4   0x4F3D             LDR      R7,??mbedtls_internal_aes_decrypt_2+0x4
   \   000001F6   0x0412             LSLS     R2,R2,#+16
   \   000001F8   0x0E12             LSRS     R2,R2,#+24
   \   000001FA   0x0092             LSLS     R2,R2,#+2
   \   000001FC   0x58BA             LDR      R2,[R7, R2]
   \   000001FE   0x405A             EORS     R2,R2,R3
   \   00000200   0x4B3B             LDR      R3,??mbedtls_internal_aes_decrypt_2+0x8
   \   00000202   0x0209             LSLS     R1,R1,#+8
   \   00000204   0x0E09             LSRS     R1,R1,#+24
   \   00000206   0x0089             LSLS     R1,R1,#+2
   \   00000208   0x5859             LDR      R1,[R3, R1]
   \   0000020A   0x4051             EORS     R1,R1,R2
   \   0000020C   0x4A39             LDR      R2,??mbedtls_internal_aes_decrypt_2+0xC
   \   0000020E   0x9B00             LDR      R3,[SP, #+0]
   \   00000210   0x0E1B             LSRS     R3,R3,#+24
   \   00000212   0x009B             LSLS     R3,R3,#+2
   \   00000214   0x58D3             LDR      R3,[R2, R3]
   \   00000216   0x404B             EORS     R3,R3,R1
   \   00000218   0x3020             ADDS     R0,R0,#+32
    797              }
   \   0000021A   0x9901             LDR      R1,[SP, #+4]
   \   0000021C   0x1E49             SUBS     R1,R1,#+1
   \   0000021E   0x9101             STR      R1,[SP, #+4]
   \   00000220   0xD000             BEQ      .+4
   \   00000222   0xE728             B        ??mbedtls_internal_aes_decrypt_1
    798          
    799              AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
   \                     ??mbedtls_internal_aes_decrypt_0: (+1)
   \   00000224   0x6801             LDR      R1,[R0, #+0]
   \   00000226   0xBF00             Nop      
   \   00000228   0x....             ADR.N    R2,RT0
   \   0000022A   0x0627             LSLS     R7,R4,#+24
   \   0000022C   0x0DBF             LSRS     R7,R7,#+22
   \   0000022E   0x59D2             LDR      R2,[R2, R7]
   \   00000230   0x404A             EORS     R2,R2,R1
   \   00000232   0x492E             LDR      R1,??mbedtls_internal_aes_decrypt_2+0x4
   \   00000234   0x041F             LSLS     R7,R3,#+16
   \   00000236   0x0E3F             LSRS     R7,R7,#+24
   \   00000238   0x00BF             LSLS     R7,R7,#+2
   \   0000023A   0x59C9             LDR      R1,[R1, R7]
   \   0000023C   0x4051             EORS     R1,R1,R2
   \   0000023E   0x4A2C             LDR      R2,??mbedtls_internal_aes_decrypt_2+0x8
   \   00000240   0x0237             LSLS     R7,R6,#+8
   \   00000242   0x0E3F             LSRS     R7,R7,#+24
   \   00000244   0x00BF             LSLS     R7,R7,#+2
   \   00000246   0x59D2             LDR      R2,[R2, R7]
   \   00000248   0x404A             EORS     R2,R2,R1
   \   0000024A   0x492A             LDR      R1,??mbedtls_internal_aes_decrypt_2+0xC
   \   0000024C   0x0E2F             LSRS     R7,R5,#+24
   \   0000024E   0x00BF             LSLS     R7,R7,#+2
   \   00000250   0x59C9             LDR      R1,[R1, R7]
   \   00000252   0x4051             EORS     R1,R1,R2
   \   00000254   0x9100             STR      R1,[SP, #+0]
   \   00000256   0x6841             LDR      R1,[R0, #+4]
   \   00000258   0x....             ADR.N    R2,RT0
   \   0000025A   0x062F             LSLS     R7,R5,#+24
   \   0000025C   0x0DBF             LSRS     R7,R7,#+22
   \   0000025E   0x59D2             LDR      R2,[R2, R7]
   \   00000260   0x404A             EORS     R2,R2,R1
   \   00000262   0x4922             LDR      R1,??mbedtls_internal_aes_decrypt_2+0x4
   \   00000264   0x0427             LSLS     R7,R4,#+16
   \   00000266   0x0E3F             LSRS     R7,R7,#+24
   \   00000268   0x00BF             LSLS     R7,R7,#+2
   \   0000026A   0x59C9             LDR      R1,[R1, R7]
   \   0000026C   0x4051             EORS     R1,R1,R2
   \   0000026E   0x4A20             LDR      R2,??mbedtls_internal_aes_decrypt_2+0x8
   \   00000270   0x021F             LSLS     R7,R3,#+8
   \   00000272   0x0E3F             LSRS     R7,R7,#+24
   \   00000274   0x00BF             LSLS     R7,R7,#+2
   \   00000276   0x59D2             LDR      R2,[R2, R7]
   \   00000278   0x404A             EORS     R2,R2,R1
   \   0000027A   0x491E             LDR      R1,??mbedtls_internal_aes_decrypt_2+0xC
   \   0000027C   0x0E37             LSRS     R7,R6,#+24
   \   0000027E   0x00BF             LSLS     R7,R7,#+2
   \   00000280   0x59C9             LDR      R1,[R1, R7]
   \   00000282   0x4051             EORS     R1,R1,R2
   \   00000284   0x9101             STR      R1,[SP, #+4]
   \   00000286   0x6881             LDR      R1,[R0, #+8]
   \   00000288   0x....             ADR.N    R2,RT0
   \   0000028A   0x0637             LSLS     R7,R6,#+24
   \   0000028C   0x0DBF             LSRS     R7,R7,#+22
   \   0000028E   0x59D2             LDR      R2,[R2, R7]
   \   00000290   0x404A             EORS     R2,R2,R1
   \   00000292   0x4916             LDR      R1,??mbedtls_internal_aes_decrypt_2+0x4
   \   00000294   0x042F             LSLS     R7,R5,#+16
   \   00000296   0x0E3F             LSRS     R7,R7,#+24
   \   00000298   0x00BF             LSLS     R7,R7,#+2
   \   0000029A   0x59C9             LDR      R1,[R1, R7]
   \   0000029C   0x4051             EORS     R1,R1,R2
   \   0000029E   0x4A14             LDR      R2,??mbedtls_internal_aes_decrypt_2+0x8
   \   000002A0   0x0227             LSLS     R7,R4,#+8
   \   000002A2   0x0E3F             LSRS     R7,R7,#+24
   \   000002A4   0x00BF             LSLS     R7,R7,#+2
   \   000002A6   0x59D2             LDR      R2,[R2, R7]
   \   000002A8   0x404A             EORS     R2,R2,R1
   \   000002AA   0x4912             LDR      R1,??mbedtls_internal_aes_decrypt_2+0xC
   \   000002AC   0x0E1F             LSRS     R7,R3,#+24
   \   000002AE   0x00BF             LSLS     R7,R7,#+2
   \   000002B0   0x59C9             LDR      R1,[R1, R7]
   \   000002B2   0x4051             EORS     R1,R1,R2
   \   000002B4   0x68C2             LDR      R2,[R0, #+12]
   \   000002B6   0xBF00             Nop      
   \   000002B8   0x....             ADR.N    R7,RT0
   \   000002BA   0x061B             LSLS     R3,R3,#+24
   \   000002BC   0x0D9B             LSRS     R3,R3,#+22
   \   000002BE   0x58FB             LDR      R3,[R7, R3]
   \   000002C0   0x4053             EORS     R3,R3,R2
   \   000002C2   0x4A0A             LDR      R2,??mbedtls_internal_aes_decrypt_2+0x4
   \   000002C4   0x0436             LSLS     R6,R6,#+16
   \   000002C6   0x0E36             LSRS     R6,R6,#+24
   \   000002C8   0x00B6             LSLS     R6,R6,#+2
   \   000002CA   0x5992             LDR      R2,[R2, R6]
   \   000002CC   0x405A             EORS     R2,R2,R3
   \   000002CE   0x4B08             LDR      R3,??mbedtls_internal_aes_decrypt_2+0x8
   \   000002D0   0x022D             LSLS     R5,R5,#+8
   \   000002D2   0x0E2D             LSRS     R5,R5,#+24
   \   000002D4   0x00AD             LSLS     R5,R5,#+2
   \   000002D6   0x595D             LDR      R5,[R3, R5]
   \   000002D8   0x4055             EORS     R5,R5,R2
   \   000002DA   0x4A06             LDR      R2,??mbedtls_internal_aes_decrypt_2+0xC
   \   000002DC   0x0E23             LSRS     R3,R4,#+24
   \   000002DE   0x009B             LSLS     R3,R3,#+2
   \   000002E0   0x58D3             LDR      R3,[R2, R3]
   \   000002E2   0x406B             EORS     R3,R3,R5
    800          
    801              X0 = *RK++ ^ \
    802                      ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    803                      ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    804                      ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    805                      ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
   \   000002E4   0x4C04             LDR      R4,??mbedtls_internal_aes_decrypt_2+0x10
   \   000002E6   0xE009             B.N      ??mbedtls_internal_aes_decrypt_3
   \                     ??mbedtls_internal_aes_decrypt_2:
   \   000002E8   0x........         DC32     RT0
   \   000002EC   0x........         DC32     RT1
   \   000002F0   0x........         DC32     RT2
   \   000002F4   0x........         DC32     RT3
   \   000002F8   0x........         DC32     `RSb`
   \                     ??mbedtls_internal_aes_decrypt_3: (+1)
   \   000002FC   0x6905             LDR      R5,[R0, #+16]
   \   000002FE   0x9A00             LDR      R2,[SP, #+0]
   \   00000300   0xB2D2             UXTB     R2,R2
   \   00000302   0x5CA2             LDRB     R2,[R4, R2]
   \   00000304   0x406A             EORS     R2,R2,R5
   \   00000306   0x041D             LSLS     R5,R3,#+16
   \   00000308   0x0E2D             LSRS     R5,R5,#+24
   \   0000030A   0x5D65             LDRB     R5,[R4, R5]
   \   0000030C   0x022D             LSLS     R5,R5,#+8
   \   0000030E   0x4055             EORS     R5,R5,R2
   \   00000310   0x020A             LSLS     R2,R1,#+8
   \   00000312   0x0E12             LSRS     R2,R2,#+24
   \   00000314   0x5CA2             LDRB     R2,[R4, R2]
   \   00000316   0x0412             LSLS     R2,R2,#+16
   \   00000318   0x406A             EORS     R2,R2,R5
   \   0000031A   0x9D01             LDR      R5,[SP, #+4]
   \   0000031C   0x0E2D             LSRS     R5,R5,#+24
   \   0000031E   0x5D65             LDRB     R5,[R4, R5]
   \   00000320   0x062D             LSLS     R5,R5,#+24
   \   00000322   0x4055             EORS     R5,R5,R2
    806          
    807              X1 = *RK++ ^ \
    808                      ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
    809                      ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    810                      ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    811                      ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
   \   00000324   0x6942             LDR      R2,[R0, #+20]
   \   00000326   0x9E01             LDR      R6,[SP, #+4]
   \   00000328   0xB2F6             UXTB     R6,R6
   \   0000032A   0x5DA6             LDRB     R6,[R4, R6]
   \   0000032C   0x4056             EORS     R6,R6,R2
   \   0000032E   0x9A00             LDR      R2,[SP, #+0]
   \   00000330   0x0412             LSLS     R2,R2,#+16
   \   00000332   0x0E12             LSRS     R2,R2,#+24
   \   00000334   0x5CA2             LDRB     R2,[R4, R2]
   \   00000336   0x0212             LSLS     R2,R2,#+8
   \   00000338   0x4072             EORS     R2,R2,R6
   \   0000033A   0x021E             LSLS     R6,R3,#+8
   \   0000033C   0x0E36             LSRS     R6,R6,#+24
   \   0000033E   0x5DA6             LDRB     R6,[R4, R6]
   \   00000340   0x0437             LSLS     R7,R6,#+16
   \   00000342   0x4057             EORS     R7,R7,R2
   \   00000344   0x0E0A             LSRS     R2,R1,#+24
   \   00000346   0x5CA2             LDRB     R2,[R4, R2]
   \   00000348   0x0616             LSLS     R6,R2,#+24
   \   0000034A   0x407E             EORS     R6,R6,R7
    812          
    813              X2 = *RK++ ^ \
    814                      ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
    815                      ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    816                      ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    817                      ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
   \   0000034C   0x6982             LDR      R2,[R0, #+24]
   \   0000034E   0xB2CF             UXTB     R7,R1
   \   00000350   0x5DE7             LDRB     R7,[R4, R7]
   \   00000352   0x4057             EORS     R7,R7,R2
   \   00000354   0x9A01             LDR      R2,[SP, #+4]
   \   00000356   0x0412             LSLS     R2,R2,#+16
   \   00000358   0x0E12             LSRS     R2,R2,#+24
   \   0000035A   0x5CA2             LDRB     R2,[R4, R2]
   \   0000035C   0x0212             LSLS     R2,R2,#+8
   \   0000035E   0x407A             EORS     R2,R2,R7
   \   00000360   0x9F00             LDR      R7,[SP, #+0]
   \   00000362   0x023F             LSLS     R7,R7,#+8
   \   00000364   0x0E3F             LSRS     R7,R7,#+24
   \   00000366   0x5DE7             LDRB     R7,[R4, R7]
   \   00000368   0x043F             LSLS     R7,R7,#+16
   \   0000036A   0x4057             EORS     R7,R7,R2
   \   0000036C   0x0E1A             LSRS     R2,R3,#+24
   \   0000036E   0x5CA2             LDRB     R2,[R4, R2]
   \   00000370   0x0612             LSLS     R2,R2,#+24
   \   00000372   0x407A             EORS     R2,R2,R7
    818          
    819              X3 = *RK++ ^ \
    820                      ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
    821                      ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    822                      ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    823                      ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
   \   00000374   0x69C0             LDR      R0,[R0, #+28]
   \   00000376   0xB2DB             UXTB     R3,R3
   \   00000378   0x5CE3             LDRB     R3,[R4, R3]
   \   0000037A   0x4043             EORS     R3,R3,R0
   \   0000037C   0x0408             LSLS     R0,R1,#+16
   \   0000037E   0x0E00             LSRS     R0,R0,#+24
   \   00000380   0x5C20             LDRB     R0,[R4, R0]
   \   00000382   0x0200             LSLS     R0,R0,#+8
   \   00000384   0x4058             EORS     R0,R0,R3
   \   00000386   0x9901             LDR      R1,[SP, #+4]
   \   00000388   0x0209             LSLS     R1,R1,#+8
   \   0000038A   0x0E09             LSRS     R1,R1,#+24
   \   0000038C   0x5C61             LDRB     R1,[R4, R1]
   \   0000038E   0x0409             LSLS     R1,R1,#+16
   \   00000390   0x4041             EORS     R1,R1,R0
   \   00000392   0x9800             LDR      R0,[SP, #+0]
   \   00000394   0x0E00             LSRS     R0,R0,#+24
   \   00000396   0x5C20             LDRB     R0,[R4, R0]
   \   00000398   0x0600             LSLS     R0,R0,#+24
   \   0000039A   0x4048             EORS     R0,R0,R1
    824          
    825              PUT_UINT32_LE( X0, output,  0 );
   \   0000039C                      REQUIRE ?Subroutine0
   \   0000039C                      ;; // Fall through to label ?Subroutine0
    826              PUT_UINT32_LE( X1, output,  4 );
    827              PUT_UINT32_LE( X2, output,  8 );
    828              PUT_UINT32_LE( X3, output, 12 );
    829          
    830              return( 0 );
    831          }
    832          #endif /* !MBEDTLS_AES_DECRYPT_ALT */
    833          

   \                                 In section .text, align 2, keep-with-next
    834          void mbedtls_aes_decrypt( mbedtls_aes_context *ctx,
    835                                    const unsigned char input[16],
    836                                    unsigned char output[16] )
    837          {
   \                     mbedtls_aes_decrypt: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    838              mbedtls_internal_aes_decrypt( ctx, input, output );
   \   00000002   0x.... 0x....      BL       mbedtls_internal_aes_decrypt
    839          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    840          
    841          /*
    842           * AES-ECB block encryption/decryption
    843           */

   \                                 In section .text, align 2, keep-with-next
    844          int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
    845                              int mode,
    846                              const unsigned char input[16],
    847                              unsigned char output[16] )
    848          {
   \                     mbedtls_aes_crypt_ecb: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0011             MOVS     R1,R2
   \   00000006   0x001A             MOVS     R2,R3
    849          #if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    850              if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
    851                  return( mbedtls_aesni_crypt_ecb( ctx, mode, input, output ) );
    852          #endif
    853          
    854          #if defined(MBEDTLS_PADLOCK_C) && defined(MBEDTLS_HAVE_X86)
    855              if( aes_padlock_ace )
    856              {
    857                  if( mbedtls_padlock_xcryptecb( ctx, mode, input, output ) == 0 )
    858                      return( 0 );
    859          
    860                  // If padlock data misaligned, we just fall back to
    861                  // unaccelerated mode
    862                  //
    863              }
    864          #endif
    865          
    866              if( mode == MBEDTLS_AES_ENCRYPT )
   \   00000008   0x2C01             CMP      R4,#+1
   \   0000000A   0xD102             BNE      ??mbedtls_aes_crypt_ecb_0
    867                  return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
   \   0000000C   0x.... 0x....      BL       mbedtls_internal_aes_encrypt
   \   00000010   0xBD10             POP      {R4,PC}
    868              else
    869                  return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
   \                     ??mbedtls_aes_crypt_ecb_0: (+1)
   \   00000012   0x.... 0x....      BL       mbedtls_internal_aes_decrypt
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    870          }
    871          
    872          #if defined(MBEDTLS_CIPHER_MODE_CBC)
    873          /*
    874           * AES-CBC buffer encryption/decryption
    875           */

   \                                 In section .text, align 2, keep-with-next
    876          int mbedtls_aes_crypt_cbc( mbedtls_aes_context *ctx,
    877                              int mode,
    878                              size_t length,
    879                              unsigned char iv[16],
    880                              const unsigned char *input,
    881                              unsigned char *output )
    882          {
   \                     mbedtls_aes_crypt_cbc: (+1)
   \   00000000   0xB5FF             PUSH     {R0-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    883              int i;
    884              unsigned char temp[16];
    885          
    886              if( length % 16 )
   \   00000004   0x0710             LSLS     R0,R2,#+28
   \   00000006   0xD002             BEQ      ??mbedtls_aes_crypt_cbc_0
    887                  return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
   \   00000008   0x2021             MOVS     R0,#+33
   \   0000000A   0x43C0             MVNS     R0,R0            ;; #-34
   \   0000000C   0xE067             B        ??mbedtls_aes_crypt_cbc_1
   \                     ??mbedtls_aes_crypt_cbc_0: (+1)
   \   0000000E   0x9D0E             LDR      R5,[SP, #+56]
   \   00000010   0x9C0F             LDR      R4,[SP, #+60]
    888          
    889          #if defined(MBEDTLS_PADLOCK_C) && defined(MBEDTLS_HAVE_X86)
    890              if( aes_padlock_ace )
    891              {
    892                  if( mbedtls_padlock_xcryptcbc( ctx, mode, length, iv, input, output ) == 0 )
    893                      return( 0 );
    894          
    895                  // If padlock data misaligned, we just fall back to
    896                  // unaccelerated mode
    897                  //
    898              }
    899          #endif
    900          
    901              if( mode == MBEDTLS_AES_DECRYPT )
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xD023             BEQ      ??mbedtls_aes_crypt_cbc_2
   \   00000016   0x2A00             CMP      R2,#+0
   \   00000018   0xD060             BEQ      ??mbedtls_aes_crypt_cbc_3
    902              {
    903                  while( length > 0 )
    904                  {
    905                      memcpy( temp, input, 16 );
    906                      mbedtls_aes_crypt_ecb( ctx, mode, input, output );
    907          
    908                      for( i = 0; i < 16; i++ )
    909                          output[i] = (unsigned char)( output[i] ^ iv[i] );
    910          
    911                      memcpy( iv, temp, 16 );
    912          
    913                      input  += 16;
    914                      output += 16;
    915                      length -= 16;
    916                  }
    917              }
    918              else
    919              {
    920                  while( length > 0 )
    921                  {
    922                      for( i = 0; i < 16; i++ )
   \                     ??mbedtls_aes_crypt_cbc_4: (+1)
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x0029             MOVS     R1,R5
   \   0000001E   0x9A08             LDR      R2,[SP, #+32]
   \   00000020   0x2304             MOVS     R3,#+4
    923                          output[i] = (unsigned char)( input[i] ^ iv[i] );
   \                     ??mbedtls_aes_crypt_cbc_5: (+1)
   \   00000022   0x780E             LDRB     R6,[R1, #+0]
   \   00000024   0x7817             LDRB     R7,[R2, #+0]
   \   00000026   0x4077             EORS     R7,R7,R6
   \   00000028   0x7007             STRB     R7,[R0, #+0]
   \   0000002A   0x784E             LDRB     R6,[R1, #+1]
   \   0000002C   0x7857             LDRB     R7,[R2, #+1]
   \   0000002E   0x4077             EORS     R7,R7,R6
   \   00000030   0x7047             STRB     R7,[R0, #+1]
   \   00000032   0x788E             LDRB     R6,[R1, #+2]
   \   00000034   0x7897             LDRB     R7,[R2, #+2]
   \   00000036   0x4077             EORS     R7,R7,R6
   \   00000038   0x7087             STRB     R7,[R0, #+2]
   \   0000003A   0x78CE             LDRB     R6,[R1, #+3]
   \   0000003C   0x78D7             LDRB     R7,[R2, #+3]
   \   0000003E   0x4077             EORS     R7,R7,R6
   \   00000040   0x70C7             STRB     R7,[R0, #+3]
   \   00000042   0x1D12             ADDS     R2,R2,#+4
   \   00000044   0x1D09             ADDS     R1,R1,#+4
   \   00000046   0x1D00             ADDS     R0,R0,#+4
   \   00000048   0x1E5B             SUBS     R3,R3,#+1
   \   0000004A   0xD1EA             BNE      ??mbedtls_aes_crypt_cbc_5
    924          
    925                      mbedtls_aes_crypt_ecb( ctx, mode, output, output );
   \   0000004C   0x9806             LDR      R0,[SP, #+24]
   \   0000004E   0x2801             CMP      R0,#+1
   \   00000050   0xD134             BNE      ??mbedtls_aes_crypt_cbc_6
   \   00000052   0x0022             MOVS     R2,R4
   \   00000054   0x0021             MOVS     R1,R4
   \   00000056   0x9805             LDR      R0,[SP, #+20]
   \   00000058   0x.... 0x....      BL       mbedtls_internal_aes_encrypt
   \   0000005C   0xE033             B        ??mbedtls_aes_crypt_cbc_7
   \                     ??mbedtls_aes_crypt_cbc_2: (+1)
   \   0000005E   0x2A00             CMP      R2,#+0
   \   00000060   0xD03C             BEQ      ??mbedtls_aes_crypt_cbc_3
   \                     ??mbedtls_aes_crypt_cbc_8: (+1)
   \   00000062   0x2210             MOVS     R2,#+16
   \   00000064   0x0029             MOVS     R1,R5
   \   00000066   0x4668             MOV      R0,SP
   \   00000068   0x.... 0x....      BL       __aeabi_memcpy
   \   0000006C   0x0022             MOVS     R2,R4
   \   0000006E   0x0029             MOVS     R1,R5
   \   00000070   0x9805             LDR      R0,[SP, #+20]
   \   00000072   0x.... 0x....      BL       mbedtls_internal_aes_decrypt
   \   00000076   0x0020             MOVS     R0,R4
   \   00000078   0x9908             LDR      R1,[SP, #+32]
   \   0000007A   0x2204             MOVS     R2,#+4
   \                     ??mbedtls_aes_crypt_cbc_9: (+1)
   \   0000007C   0x7803             LDRB     R3,[R0, #+0]
   \   0000007E   0x780E             LDRB     R6,[R1, #+0]
   \   00000080   0x405E             EORS     R6,R6,R3
   \   00000082   0x7006             STRB     R6,[R0, #+0]
   \   00000084   0x7843             LDRB     R3,[R0, #+1]
   \   00000086   0x784E             LDRB     R6,[R1, #+1]
   \   00000088   0x405E             EORS     R6,R6,R3
   \   0000008A   0x7046             STRB     R6,[R0, #+1]
   \   0000008C   0x7883             LDRB     R3,[R0, #+2]
   \   0000008E   0x788E             LDRB     R6,[R1, #+2]
   \   00000090   0x405E             EORS     R6,R6,R3
   \   00000092   0x7086             STRB     R6,[R0, #+2]
   \   00000094   0x78C3             LDRB     R3,[R0, #+3]
   \   00000096   0x78CE             LDRB     R6,[R1, #+3]
   \   00000098   0x405E             EORS     R6,R6,R3
   \   0000009A   0x70C6             STRB     R6,[R0, #+3]
   \   0000009C   0x1D09             ADDS     R1,R1,#+4
   \   0000009E   0x1D00             ADDS     R0,R0,#+4
   \   000000A0   0x1E52             SUBS     R2,R2,#+1
   \   000000A2   0xD1EB             BNE      ??mbedtls_aes_crypt_cbc_9
   \   000000A4   0x2210             MOVS     R2,#+16
   \   000000A6   0x4669             MOV      R1,SP
   \   000000A8   0x9808             LDR      R0,[SP, #+32]
   \   000000AA   0x.... 0x....      BL       __aeabi_memcpy
   \   000000AE   0x3510             ADDS     R5,R5,#+16
   \   000000B0   0x3410             ADDS     R4,R4,#+16
   \   000000B2   0x9807             LDR      R0,[SP, #+28]
   \   000000B4   0x3810             SUBS     R0,R0,#+16
   \   000000B6   0x9007             STR      R0,[SP, #+28]
   \   000000B8   0xD1D3             BNE      ??mbedtls_aes_crypt_cbc_8
   \   000000BA   0xE00F             B        ??mbedtls_aes_crypt_cbc_3
   \                     ??mbedtls_aes_crypt_cbc_6: (+1)
   \   000000BC   0x0022             MOVS     R2,R4
   \   000000BE   0x0021             MOVS     R1,R4
   \   000000C0   0x9805             LDR      R0,[SP, #+20]
   \   000000C2   0x.... 0x....      BL       mbedtls_internal_aes_decrypt
    926                      memcpy( iv, output, 16 );
   \                     ??mbedtls_aes_crypt_cbc_7: (+1)
   \   000000C6   0x2210             MOVS     R2,#+16
   \   000000C8   0x0021             MOVS     R1,R4
   \   000000CA   0x9808             LDR      R0,[SP, #+32]
   \   000000CC   0x.... 0x....      BL       __aeabi_memcpy
    927          
    928                      input  += 16;
   \   000000D0   0x3510             ADDS     R5,R5,#+16
    929                      output += 16;
   \   000000D2   0x3410             ADDS     R4,R4,#+16
    930                      length -= 16;
   \   000000D4   0x9807             LDR      R0,[SP, #+28]
   \   000000D6   0x3810             SUBS     R0,R0,#+16
   \   000000D8   0x9007             STR      R0,[SP, #+28]
   \   000000DA   0xD19E             BNE      ??mbedtls_aes_crypt_cbc_4
    931                  }
    932              }
    933          
    934              return( 0 );
   \                     ??mbedtls_aes_crypt_cbc_3: (+1)
   \   000000DC   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_aes_crypt_cbc_1: (+1)
   \   000000DE   0xB009             ADD      SP,SP,#+36
   \   000000E0   0xBDF0             POP      {R4-R7,PC}       ;; return
    935          }
    936          #endif /* MBEDTLS_CIPHER_MODE_CBC */
    937          
    938          #if defined(MBEDTLS_CIPHER_MODE_CFB)
    939          /*
    940           * AES-CFB128 buffer encryption/decryption
    941           */
    942          int mbedtls_aes_crypt_cfb128( mbedtls_aes_context *ctx,
    943                                 int mode,
    944                                 size_t length,
    945                                 size_t *iv_off,
    946                                 unsigned char iv[16],
    947                                 const unsigned char *input,
    948                                 unsigned char *output )
    949          {
    950              int c;
    951              size_t n = *iv_off;
    952          
    953              if( mode == MBEDTLS_AES_DECRYPT )
    954              {
    955                  while( length-- )
    956                  {
    957                      if( n == 0 )
    958                          mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );
    959          
    960                      c = *input++;
    961                      *output++ = (unsigned char)( c ^ iv[n] );
    962                      iv[n] = (unsigned char) c;
    963          
    964                      n = ( n + 1 ) & 0x0F;
    965                  }
    966              }
    967              else
    968              {
    969                  while( length-- )
    970                  {
    971                      if( n == 0 )
    972                          mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );
    973          
    974                      iv[n] = *output++ = (unsigned char)( iv[n] ^ *input++ );
    975          
    976                      n = ( n + 1 ) & 0x0F;
    977                  }
    978              }
    979          
    980              *iv_off = n;
    981          
    982              return( 0 );
    983          }
    984          
    985          /*
    986           * AES-CFB8 buffer encryption/decryption
    987           */
    988          int mbedtls_aes_crypt_cfb8( mbedtls_aes_context *ctx,
    989                                 int mode,
    990                                 size_t length,
    991                                 unsigned char iv[16],
    992                                 const unsigned char *input,
    993                                 unsigned char *output )
    994          {
    995              unsigned char c;
    996              unsigned char ov[17];
    997          
    998              while( length-- )
    999              {
   1000                  memcpy( ov, iv, 16 );
   1001                  mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );
   1002          
   1003                  if( mode == MBEDTLS_AES_DECRYPT )
   1004                      ov[16] = *input;
   1005          
   1006                  c = *output++ = (unsigned char)( iv[0] ^ *input++ );
   1007          
   1008                  if( mode == MBEDTLS_AES_ENCRYPT )
   1009                      ov[16] = c;
   1010          
   1011                  memcpy( iv, ov + 1, 16 );
   1012              }
   1013          
   1014              return( 0 );
   1015          }
   1016          #endif /*MBEDTLS_CIPHER_MODE_CFB */
   1017          
   1018          #if defined(MBEDTLS_CIPHER_MODE_CTR)
   1019          /*
   1020           * AES-CTR buffer encryption/decryption
   1021           */
   1022          int mbedtls_aes_crypt_ctr( mbedtls_aes_context *ctx,
   1023                                 size_t length,
   1024                                 size_t *nc_off,
   1025                                 unsigned char nonce_counter[16],
   1026                                 unsigned char stream_block[16],
   1027                                 const unsigned char *input,
   1028                                 unsigned char *output )
   1029          {
   1030              int c, i;
   1031              size_t n = *nc_off;
   1032          
   1033              while( length-- )
   1034              {
   1035                  if( n == 0 ) {
   1036                      mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, nonce_counter, stream_block );
   1037          
   1038                      for( i = 16; i > 0; i-- )
   1039                          if( ++nonce_counter[i - 1] != 0 )
   1040                              break;
   1041                  }
   1042                  c = *input++;
   1043                  *output++ = (unsigned char)( c ^ stream_block[n] );
   1044          
   1045                  n = ( n + 1 ) & 0x0F;
   1046              }
   1047          
   1048              *nc_off = n;
   1049          
   1050              return( 0 );
   1051          }
   1052          #endif /* MBEDTLS_CIPHER_MODE_CTR */
   1053          
   1054          #endif /* !MBEDTLS_AES_ALT */
   1055          
   1056          #if defined(MBEDTLS_SELF_TEST)
   1057          /*
   1058           * AES test vectors from:
   1059           *
   1060           * http://csrc.nist.gov/archive/aes/rijndael/rijndael-vals.zip
   1061           */

   \                                 In section .rodata, align 4, keep-with-next
   1062          static const unsigned char aes_test_ecb_dec[3][16] =
   \                     aes_test_ecb_dec:
   \   00000000   0x44 0x41          DC8 68, 65, 106, 194, 209, 245, 60, 88, 51, 3, 145, 126, 107, 233, 235
   \              0x6A 0xC2    
   \              0xD1 0xF5    
   \              0x3C 0x58    
   \              0x33 0x03    
   \              0x91 0x7E    
   \              0x6B 0xE9    
   \              0xEB         
   \   0000000F   0xE0 0x48          DC8 224, 72, 227, 30, 158, 37, 103, 24, 242, 146, 41, 49, 156, 25, 241
   \              0xE3 0x1E    
   \              0x9E 0x25    
   \              0x67 0x18    
   \              0xF2 0x92    
   \              0x29 0x31    
   \              0x9C 0x19    
   \              0xF1         
   \   0000001E   0x5B 0xA4          DC8 91, 164, 5, 140, 207, 253, 187, 203, 56, 45, 31, 111, 86, 88, 93
   \              0x05 0x8C    
   \              0xCF 0xFD    
   \              0xBB 0xCB    
   \              0x38 0x2D    
   \              0x1F 0x6F    
   \              0x56 0x58    
   \              0x5D         
   \   0000002D   0x8A 0x4A          DC8 138, 74, 222
   \              0xDE         
   1063          {
   1064              { 0x44, 0x41, 0x6A, 0xC2, 0xD1, 0xF5, 0x3C, 0x58,
   1065                0x33, 0x03, 0x91, 0x7E, 0x6B, 0xE9, 0xEB, 0xE0 },
   1066              { 0x48, 0xE3, 0x1E, 0x9E, 0x25, 0x67, 0x18, 0xF2,
   1067                0x92, 0x29, 0x31, 0x9C, 0x19, 0xF1, 0x5B, 0xA4 },
   1068              { 0x05, 0x8C, 0xCF, 0xFD, 0xBB, 0xCB, 0x38, 0x2D,
   1069                0x1F, 0x6F, 0x56, 0x58, 0x5D, 0x8A, 0x4A, 0xDE }
   1070          };
   1071          

   \                                 In section .rodata, align 4, keep-with-next
   1072          static const unsigned char aes_test_ecb_enc[3][16] =
   \                     aes_test_ecb_enc:
   \   00000000   0xC3 0x4C          DC8 195, 76, 5, 44, 192, 218, 141, 115, 69, 26, 254, 95, 3, 190, 41
   \              0x05 0x2C    
   \              0xC0 0xDA    
   \              0x8D 0x73    
   \              0x45 0x1A    
   \              0xFE 0x5F    
   \              0x03 0xBE    
   \              0x29         
   \   0000000F   0x7F 0xF3          DC8 127, 243, 246, 117, 42, 232, 215, 131, 17, 56, 240, 65, 86, 6, 49
   \              0xF6 0x75    
   \              0x2A 0xE8    
   \              0xD7 0x83    
   \              0x11 0x38    
   \              0xF0 0x41    
   \              0x56 0x06    
   \              0x31         
   \   0000001E   0xB1 0x14          DC8 177, 20, 139, 121, 238, 204, 147, 160, 238, 93, 255, 48, 180, 234
   \              0x8B 0x79    
   \              0xEE 0xCC    
   \              0x93 0xA0    
   \              0xEE 0x5D    
   \              0xFF 0x30    
   \              0xB4 0xEA    
   \   0000002C   0x21 0x63          DC8 33, 99, 109, 164
   \              0x6D 0xA4    
   1073          {
   1074              { 0xC3, 0x4C, 0x05, 0x2C, 0xC0, 0xDA, 0x8D, 0x73,
   1075                0x45, 0x1A, 0xFE, 0x5F, 0x03, 0xBE, 0x29, 0x7F },
   1076              { 0xF3, 0xF6, 0x75, 0x2A, 0xE8, 0xD7, 0x83, 0x11,
   1077                0x38, 0xF0, 0x41, 0x56, 0x06, 0x31, 0xB1, 0x14 },
   1078              { 0x8B, 0x79, 0xEE, 0xCC, 0x93, 0xA0, 0xEE, 0x5D,
   1079                0xFF, 0x30, 0xB4, 0xEA, 0x21, 0x63, 0x6D, 0xA4 }
   1080          };
   1081          
   1082          #if defined(MBEDTLS_CIPHER_MODE_CBC)

   \                                 In section .rodata, align 4, keep-with-next
   1083          static const unsigned char aes_test_cbc_dec[3][16] =
   \                     aes_test_cbc_dec:
   \   00000000   0xFA 0xCA          DC8 250, 202, 55, 224, 176, 200, 83, 115, 223, 112, 110, 115, 247, 201
   \              0x37 0xE0    
   \              0xB0 0xC8    
   \              0x53 0x73    
   \              0xDF 0x70    
   \              0x6E 0x73    
   \              0xF7 0xC9    
   \   0000000E   0xAF 0x86          DC8 175, 134, 93, 246, 120, 221, 23, 186, 78, 117, 182, 23, 104, 198
   \              0x5D 0xF6    
   \              0x78 0xDD    
   \              0x17 0xBA    
   \              0x4E 0x75    
   \              0xB6 0x17    
   \              0x68 0xC6    
   \   0000001C   0xAD 0xEF          DC8 173, 239, 124, 123, 72, 4, 225, 129, 143, 230, 41, 117, 25, 163
   \              0x7C 0x7B    
   \              0x48 0x04    
   \              0xE1 0x81    
   \              0x8F 0xE6    
   \              0x29 0x75    
   \              0x19 0xA3    
   \   0000002A   0xE8 0x8C          DC8 232, 140, 87, 49, 4, 19
   \              0x57 0x31    
   \              0x04 0x13    
   1084          {
   1085              { 0xFA, 0xCA, 0x37, 0xE0, 0xB0, 0xC8, 0x53, 0x73,
   1086                0xDF, 0x70, 0x6E, 0x73, 0xF7, 0xC9, 0xAF, 0x86 },
   1087              { 0x5D, 0xF6, 0x78, 0xDD, 0x17, 0xBA, 0x4E, 0x75,
   1088                0xB6, 0x17, 0x68, 0xC6, 0xAD, 0xEF, 0x7C, 0x7B },
   1089              { 0x48, 0x04, 0xE1, 0x81, 0x8F, 0xE6, 0x29, 0x75,
   1090                0x19, 0xA3, 0xE8, 0x8C, 0x57, 0x31, 0x04, 0x13 }
   1091          };
   1092          

   \                                 In section .rodata, align 4, keep-with-next
   1093          static const unsigned char aes_test_cbc_enc[3][16] =
   \                     aes_test_cbc_enc:
   \   00000000   0x8A 0x05          DC8 138, 5, 252, 94, 9, 90, 244, 132, 138, 8, 211, 40, 211, 104, 142
   \              0xFC 0x5E    
   \              0x09 0x5A    
   \              0xF4 0x84    
   \              0x8A 0x08    
   \              0xD3 0x28    
   \              0xD3 0x68    
   \              0x8E         
   \   0000000F   0x3D 0x7B          DC8 61, 123, 217, 102, 213, 58, 216, 193, 187, 133, 210, 173, 250, 232
   \              0xD9 0x66    
   \              0xD5 0x3A    
   \              0xD8 0xC1    
   \              0xBB 0x85    
   \              0xD2 0xAD    
   \              0xFA 0xE8    
   \   0000001D   0x7B 0xB1          DC8 123, 177, 4, 254, 60, 83, 101, 62, 47, 69, 181, 111, 205, 136, 178
   \              0x04 0xFE    
   \              0x3C 0x53    
   \              0x65 0x3E    
   \              0x2F 0x45    
   \              0xB5 0x6F    
   \              0xCD 0x88    
   \              0xB2         
   \   0000002C   0xCC 0x89          DC8 204, 137, 143, 240
   \              0x8F 0xF0    
   1094          {
   1095              { 0x8A, 0x05, 0xFC, 0x5E, 0x09, 0x5A, 0xF4, 0x84,
   1096                0x8A, 0x08, 0xD3, 0x28, 0xD3, 0x68, 0x8E, 0x3D },
   1097              { 0x7B, 0xD9, 0x66, 0xD5, 0x3A, 0xD8, 0xC1, 0xBB,
   1098                0x85, 0xD2, 0xAD, 0xFA, 0xE8, 0x7B, 0xB1, 0x04 },
   1099              { 0xFE, 0x3C, 0x53, 0x65, 0x3E, 0x2F, 0x45, 0xB5,
   1100                0x6F, 0xCD, 0x88, 0xB2, 0xCC, 0x89, 0x8F, 0xF0 }
   1101          };
   1102          #endif /* MBEDTLS_CIPHER_MODE_CBC */
   1103          
   1104          #if defined(MBEDTLS_CIPHER_MODE_CFB)
   1105          /*
   1106           * AES-CFB128 test vectors from:
   1107           *
   1108           * http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf
   1109           */
   1110          static const unsigned char aes_test_cfb128_key[3][32] =
   1111          {
   1112              { 0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6,
   1113                0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C },
   1114              { 0x8E, 0x73, 0xB0, 0xF7, 0xDA, 0x0E, 0x64, 0x52,
   1115                0xC8, 0x10, 0xF3, 0x2B, 0x80, 0x90, 0x79, 0xE5,
   1116                0x62, 0xF8, 0xEA, 0xD2, 0x52, 0x2C, 0x6B, 0x7B },
   1117              { 0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE,
   1118                0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81,
   1119                0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7,
   1120                0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4 }
   1121          };
   1122          
   1123          static const unsigned char aes_test_cfb128_iv[16] =
   1124          {
   1125              0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
   1126              0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
   1127          };
   1128          
   1129          static const unsigned char aes_test_cfb128_pt[64] =
   1130          {
   1131              0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96,
   1132              0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A,
   1133              0xAE, 0x2D, 0x8A, 0x57, 0x1E, 0x03, 0xAC, 0x9C,
   1134              0x9E, 0xB7, 0x6F, 0xAC, 0x45, 0xAF, 0x8E, 0x51,
   1135              0x30, 0xC8, 0x1C, 0x46, 0xA3, 0x5C, 0xE4, 0x11,
   1136              0xE5, 0xFB, 0xC1, 0x19, 0x1A, 0x0A, 0x52, 0xEF,
   1137              0xF6, 0x9F, 0x24, 0x45, 0xDF, 0x4F, 0x9B, 0x17,
   1138              0xAD, 0x2B, 0x41, 0x7B, 0xE6, 0x6C, 0x37, 0x10
   1139          };
   1140          
   1141          static const unsigned char aes_test_cfb128_ct[3][64] =
   1142          {
   1143              { 0x3B, 0x3F, 0xD9, 0x2E, 0xB7, 0x2D, 0xAD, 0x20,
   1144                0x33, 0x34, 0x49, 0xF8, 0xE8, 0x3C, 0xFB, 0x4A,
   1145                0xC8, 0xA6, 0x45, 0x37, 0xA0, 0xB3, 0xA9, 0x3F,
   1146                0xCD, 0xE3, 0xCD, 0xAD, 0x9F, 0x1C, 0xE5, 0x8B,
   1147                0x26, 0x75, 0x1F, 0x67, 0xA3, 0xCB, 0xB1, 0x40,
   1148                0xB1, 0x80, 0x8C, 0xF1, 0x87, 0xA4, 0xF4, 0xDF,
   1149                0xC0, 0x4B, 0x05, 0x35, 0x7C, 0x5D, 0x1C, 0x0E,
   1150                0xEA, 0xC4, 0xC6, 0x6F, 0x9F, 0xF7, 0xF2, 0xE6 },
   1151              { 0xCD, 0xC8, 0x0D, 0x6F, 0xDD, 0xF1, 0x8C, 0xAB,
   1152                0x34, 0xC2, 0x59, 0x09, 0xC9, 0x9A, 0x41, 0x74,
   1153                0x67, 0xCE, 0x7F, 0x7F, 0x81, 0x17, 0x36, 0x21,
   1154                0x96, 0x1A, 0x2B, 0x70, 0x17, 0x1D, 0x3D, 0x7A,
   1155                0x2E, 0x1E, 0x8A, 0x1D, 0xD5, 0x9B, 0x88, 0xB1,
   1156                0xC8, 0xE6, 0x0F, 0xED, 0x1E, 0xFA, 0xC4, 0xC9,
   1157                0xC0, 0x5F, 0x9F, 0x9C, 0xA9, 0x83, 0x4F, 0xA0,
   1158                0x42, 0xAE, 0x8F, 0xBA, 0x58, 0x4B, 0x09, 0xFF },
   1159              { 0xDC, 0x7E, 0x84, 0xBF, 0xDA, 0x79, 0x16, 0x4B,
   1160                0x7E, 0xCD, 0x84, 0x86, 0x98, 0x5D, 0x38, 0x60,
   1161                0x39, 0xFF, 0xED, 0x14, 0x3B, 0x28, 0xB1, 0xC8,
   1162                0x32, 0x11, 0x3C, 0x63, 0x31, 0xE5, 0x40, 0x7B,
   1163                0xDF, 0x10, 0x13, 0x24, 0x15, 0xE5, 0x4B, 0x92,
   1164                0xA1, 0x3E, 0xD0, 0xA8, 0x26, 0x7A, 0xE2, 0xF9,
   1165                0x75, 0xA3, 0x85, 0x74, 0x1A, 0xB9, 0xCE, 0xF8,
   1166                0x20, 0x31, 0x62, 0x3D, 0x55, 0xB1, 0xE4, 0x71 }
   1167          };
   1168          #endif /* MBEDTLS_CIPHER_MODE_CFB */
   1169          
   1170          #if defined(MBEDTLS_CIPHER_MODE_CTR)
   1171          /*
   1172           * AES-CTR test vectors from:
   1173           *
   1174           * http://www.faqs.org/rfcs/rfc3686.html
   1175           */
   1176          
   1177          static const unsigned char aes_test_ctr_key[3][16] =
   1178          {
   1179              { 0xAE, 0x68, 0x52, 0xF8, 0x12, 0x10, 0x67, 0xCC,
   1180                0x4B, 0xF7, 0xA5, 0x76, 0x55, 0x77, 0xF3, 0x9E },
   1181              { 0x7E, 0x24, 0x06, 0x78, 0x17, 0xFA, 0xE0, 0xD7,
   1182                0x43, 0xD6, 0xCE, 0x1F, 0x32, 0x53, 0x91, 0x63 },
   1183              { 0x76, 0x91, 0xBE, 0x03, 0x5E, 0x50, 0x20, 0xA8,
   1184                0xAC, 0x6E, 0x61, 0x85, 0x29, 0xF9, 0xA0, 0xDC }
   1185          };
   1186          
   1187          static const unsigned char aes_test_ctr_nonce_counter[3][16] =
   1188          {
   1189              { 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00,
   1190                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },
   1191              { 0x00, 0x6C, 0xB6, 0xDB, 0xC0, 0x54, 0x3B, 0x59,
   1192                0xDA, 0x48, 0xD9, 0x0B, 0x00, 0x00, 0x00, 0x01 },
   1193              { 0x00, 0xE0, 0x01, 0x7B, 0x27, 0x77, 0x7F, 0x3F,
   1194                0x4A, 0x17, 0x86, 0xF0, 0x00, 0x00, 0x00, 0x01 }
   1195          };
   1196          
   1197          static const unsigned char aes_test_ctr_pt[3][48] =
   1198          {
   1199              { 0x53, 0x69, 0x6E, 0x67, 0x6C, 0x65, 0x20, 0x62,
   1200                0x6C, 0x6F, 0x63, 0x6B, 0x20, 0x6D, 0x73, 0x67 },
   1201          
   1202              { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
   1203                0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
   1204                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
   1205                0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F },
   1206          
   1207              { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
   1208                0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
   1209                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
   1210                0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
   1211                0x20, 0x21, 0x22, 0x23 }
   1212          };
   1213          
   1214          static const unsigned char aes_test_ctr_ct[3][48] =
   1215          {
   1216              { 0xE4, 0x09, 0x5D, 0x4F, 0xB7, 0xA7, 0xB3, 0x79,
   1217                0x2D, 0x61, 0x75, 0xA3, 0x26, 0x13, 0x11, 0xB8 },
   1218              { 0x51, 0x04, 0xA1, 0x06, 0x16, 0x8A, 0x72, 0xD9,
   1219                0x79, 0x0D, 0x41, 0xEE, 0x8E, 0xDA, 0xD3, 0x88,
   1220                0xEB, 0x2E, 0x1E, 0xFC, 0x46, 0xDA, 0x57, 0xC8,
   1221                0xFC, 0xE6, 0x30, 0xDF, 0x91, 0x41, 0xBE, 0x28 },
   1222              { 0xC1, 0xCF, 0x48, 0xA8, 0x9F, 0x2F, 0xFD, 0xD9,
   1223                0xCF, 0x46, 0x52, 0xE9, 0xEF, 0xDB, 0x72, 0xD7,
   1224                0x45, 0x40, 0xA4, 0x2B, 0xDE, 0x6D, 0x78, 0x36,
   1225                0xD5, 0x9A, 0x5C, 0xEA, 0xAE, 0xF3, 0x10, 0x53,
   1226                0x25, 0xB2, 0x07, 0x2F }
   1227          };
   1228          
   1229          static const int aes_test_ctr_len[3] =
   1230              { 16, 32, 36 };
   1231          #endif /* MBEDTLS_CIPHER_MODE_CTR */
   1232          
   1233          /*
   1234           * Checkup routine
   1235           */

   \                                 In section .text, align 4, keep-with-next
   1236          int mbedtls_aes_self_test( int verbose )
   1237          {
   \                     mbedtls_aes_self_test: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB0ED             SUB      SP,SP,#+436
   \   00000004   0x0007             MOVS     R7,R0
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9001             STR      R0,[SP, #+4]
   1238              int ret = 0, i, j, u, v;
   1239              unsigned char key[32];
   1240              unsigned char buf[64];
   1241          #if defined(MBEDTLS_CIPHER_MODE_CBC) || defined(MBEDTLS_CIPHER_MODE_CFB)
   1242              unsigned char iv[16];
   1243          #endif
   1244          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1245              unsigned char prv[16];
   1246          #endif
   1247          #if defined(MBEDTLS_CIPHER_MODE_CTR) || defined(MBEDTLS_CIPHER_MODE_CFB)
   1248              size_t offset;
   1249          #endif
   1250          #if defined(MBEDTLS_CIPHER_MODE_CTR)
   1251              int len;
   1252              unsigned char nonce_counter[16];
   1253              unsigned char stream_block[16];
   1254          #endif
   1255              mbedtls_aes_context ctx;
   1256          
   1257              memset( key, 0, 32 );
   \   0000000A   0x2120             MOVS     R1,#+32
   \   0000000C   0xA81E             ADD      R0,SP,#+120
   \   0000000E   0x.... 0x....      BL       __aeabi_memclr4
   \   00000012   0x218C             MOVS     R1,#+140
   \   00000014   0x0049             LSLS     R1,R1,#+1        ;; #+280
   \   00000016   0xA826             ADD      R0,SP,#+152
   \   00000018   0x.... 0x....      BL       __aeabi_memclr4
   1258              mbedtls_aes_init( &ctx );
   1259          
   1260              /*
   1261               * ECB mode
   1262               */
   1263              for( i = 0; i < 6; i++ )
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   1264              {
   1265                  u = i >> 1;
   \                     ??mbedtls_aes_self_test_0: (+1)
   \   00000020   0x9800             LDR      R0,[SP, #+0]
   \   00000022   0x1046             ASRS     R6,R0,#+1
   1266                  v = i  & 1;
   \   00000024   0x07C5             LSLS     R5,R0,#+31
   \   00000026   0x0FED             LSRS     R5,R5,#+31
   1267          
   1268                  if( verbose != 0 )
   \   00000028   0x2F00             CMP      R7,#+0
   \   0000002A   0xD009             BEQ      ??mbedtls_aes_self_test_1
   1269                      mbedtls_printf( "  AES-ECB-%3d (%s): ", 128 + u * 64,
   1270                                       ( v == MBEDTLS_AES_DECRYPT ) ? "dec" : "enc" );
   \   0000002C   0x2D00             CMP      R5,#+0
   \   0000002E   0xD101             BNE      ??mbedtls_aes_self_test_2
   \   00000030   0x....             ADR      R2,??DataTable25  ;; "dec"
   \   00000032   0xE000             B        ??mbedtls_aes_self_test_3
   \                     ??mbedtls_aes_self_test_2: (+1)
   \   00000034   0x....             ADR      R2,??DataTable25_1  ;; "enc"
   \                     ??mbedtls_aes_self_test_3: (+1)
   \   00000036   0x01B1             LSLS     R1,R6,#+6
   \   00000038   0x3180             ADDS     R1,R1,#+128
   \   0000003A   0x....             LDR      R0,??DataTable25_2
   \   0000003C   0x.... 0x....      BL       printf
   1271          
   1272                  memset( buf, 0, 16 );
   \                     ??mbedtls_aes_self_test_1: (+1)
   \   00000040   0xA80E             ADD      R0,SP,#+56
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x2200             MOVS     R2,#+0
   \   00000046   0x2300             MOVS     R3,#+0
   \   00000048   0x2400             MOVS     R4,#+0
   \   0000004A   0xC01E             STM      R0!,{R1-R4}
   1273          
   1274                  if( v == MBEDTLS_AES_DECRYPT )
   \   0000004C   0x01B2             LSLS     R2,R6,#+6
   \   0000004E   0x3280             ADDS     R2,R2,#+128
   \   00000050   0x2D00             CMP      R5,#+0
   \   00000052   0xA91E             ADD      R1,SP,#+120
   \   00000054   0xA826             ADD      R0,SP,#+152
   \   00000056   0xD113             BNE      ??mbedtls_aes_self_test_4
   1275                  {
   1276                      mbedtls_aes_setkey_dec( &ctx, key, 128 + u * 64 );
   \   00000058   0x.... 0x....      BL       mbedtls_aes_setkey_dec
   1277          
   1278                      for( j = 0; j < 10000; j++ )
   \   0000005C   0x....             LDR      R4,??DataTable25_3  ;; 0x2710
   1279                          mbedtls_aes_crypt_ecb( &ctx, v, buf, buf );
   \                     ??mbedtls_aes_self_test_5: (+1)
   \   0000005E   0xAA0E             ADD      R2,SP,#+56
   \   00000060   0xA90E             ADD      R1,SP,#+56
   \   00000062   0xA826             ADD      R0,SP,#+152
   \   00000064   0x.... 0x....      BL       mbedtls_internal_aes_decrypt
   \   00000068   0x1E64             SUBS     R4,R4,#+1
   \   0000006A   0xD1F8             BNE      ??mbedtls_aes_self_test_5
   1280          
   1281                      if( memcmp( buf, aes_test_ecb_dec[u], 16 ) != 0 )
   \   0000006C   0x2210             MOVS     R2,#+16
   \   0000006E   0x....             LDR      R0,??DataTable25_4
   \   00000070   0x0131             LSLS     R1,R6,#+4
   \   00000072   0x1841             ADDS     R1,R0,R1
   \   00000074   0xA80E             ADD      R0,SP,#+56
   \   00000076   0x.... 0x....      BL       memcmp
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD014             BEQ      ??mbedtls_aes_self_test_6
   1282                      {
   1283                          if( verbose != 0 )
   \   0000007E   0xE10F             B        ??mbedtls_aes_self_test_7
   1284                              mbedtls_printf( "failed\n" );
   1285          
   1286                          ret = 1;
   1287                          goto exit;
   1288                      }
   1289                  }
   1290                  else
   1291                  {
   1292                      mbedtls_aes_setkey_enc( &ctx, key, 128 + u * 64 );
   \                     ??mbedtls_aes_self_test_4: (+1)
   \   00000080   0x.... 0x....      BL       mbedtls_aes_setkey_enc
   1293          
   1294                      for( j = 0; j < 10000; j++ )
   \   00000084   0x....             LDR      R4,??DataTable25_3  ;; 0x2710
   1295                          mbedtls_aes_crypt_ecb( &ctx, v, buf, buf );
   \                     ??mbedtls_aes_self_test_8: (+1)
   \   00000086   0xAA0E             ADD      R2,SP,#+56
   \   00000088   0xA90E             ADD      R1,SP,#+56
   \   0000008A   0xA826             ADD      R0,SP,#+152
   \   0000008C   0x.... 0x....      BL       mbedtls_internal_aes_encrypt
   \   00000090   0x1E64             SUBS     R4,R4,#+1
   \   00000092   0xD1F8             BNE      ??mbedtls_aes_self_test_8
   1296          
   1297                      if( memcmp( buf, aes_test_ecb_enc[u], 16 ) != 0 )
   \   00000094   0x2210             MOVS     R2,#+16
   \   00000096   0x....             LDR      R0,??DataTable25_5
   \   00000098   0x0131             LSLS     R1,R6,#+4
   \   0000009A   0x1841             ADDS     R1,R0,R1
   \   0000009C   0xA80E             ADD      R0,SP,#+56
   \   0000009E   0x.... 0x....      BL       memcmp
   \   000000A2   0x2800             CMP      R0,#+0
   \   000000A4   0xD000             BEQ      .+4
   \   000000A6   0xE0FB             B        ??mbedtls_aes_self_test_7
   1298                      {
   1299                          if( verbose != 0 )
   1300                              mbedtls_printf( "failed\n" );
   1301          
   1302                          ret = 1;
   1303                          goto exit;
   1304                      }
   1305                  }
   1306          
   1307                  if( verbose != 0 )
   \                     ??mbedtls_aes_self_test_6: (+1)
   \   000000A8   0x2F00             CMP      R7,#+0
   \   000000AA   0xD002             BEQ      ??mbedtls_aes_self_test_9
   1308                      mbedtls_printf( "passed\n" );
   \   000000AC   0x....             LDR      R0,??DataTable25_6
   \   000000AE   0x.... 0x....      BL       printf
   1309              }
   \                     ??mbedtls_aes_self_test_9: (+1)
   \   000000B2   0x9800             LDR      R0,[SP, #+0]
   \   000000B4   0x1C40             ADDS     R0,R0,#+1
   \   000000B6   0x9000             STR      R0,[SP, #+0]
   \   000000B8   0x2806             CMP      R0,#+6
   \   000000BA   0xDBB1             BLT      ??mbedtls_aes_self_test_0
   1310          
   1311              if( verbose != 0 )
   \   000000BC   0x2F00             CMP      R7,#+0
   \   000000BE   0xD002             BEQ      ??mbedtls_aes_self_test_10
   1312                  mbedtls_printf( "\n" );
   \   000000C0   0x....             ADR      R0,??DataTable25_7  ;; "\n"
   \   000000C2   0x.... 0x....      BL       printf
   1313          
   1314          #if defined(MBEDTLS_CIPHER_MODE_CBC)
   1315              /*
   1316               * CBC mode
   1317               */
   1318              for( i = 0; i < 6; i++ )
   \                     ??mbedtls_aes_self_test_10: (+1)
   \   000000C6   0x2000             MOVS     R0,#+0
   \   000000C8   0x9000             STR      R0,[SP, #+0]
   \   000000CA   0xAC0A             ADD      R4,SP,#+40
   1319              {
   1320                  u = i >> 1;
   \                     ??mbedtls_aes_self_test_11: (+1)
   \   000000CC   0x9800             LDR      R0,[SP, #+0]
   \   000000CE   0x1046             ASRS     R6,R0,#+1
   1321                  v = i  & 1;
   \   000000D0   0x07C5             LSLS     R5,R0,#+31
   \   000000D2   0x0FED             LSRS     R5,R5,#+31
   1322          
   1323                  if( verbose != 0 )
   \   000000D4   0x2F00             CMP      R7,#+0
   \   000000D6   0xD009             BEQ      ??mbedtls_aes_self_test_12
   1324                      mbedtls_printf( "  AES-CBC-%3d (%s): ", 128 + u * 64,
   1325                                       ( v == MBEDTLS_AES_DECRYPT ) ? "dec" : "enc" );
   \   000000D8   0x2D00             CMP      R5,#+0
   \   000000DA   0xD101             BNE      ??mbedtls_aes_self_test_13
   \   000000DC   0x....             ADR      R2,??DataTable25  ;; "dec"
   \   000000DE   0xE000             B        ??mbedtls_aes_self_test_14
   \                     ??mbedtls_aes_self_test_13: (+1)
   \   000000E0   0x....             ADR      R2,??DataTable25_1  ;; "enc"
   \                     ??mbedtls_aes_self_test_14: (+1)
   \   000000E2   0x01B1             LSLS     R1,R6,#+6
   \   000000E4   0x3180             ADDS     R1,R1,#+128
   \   000000E6   0x....             LDR      R0,??DataTable25_8
   \   000000E8   0x.... 0x....      BL       printf
   1326          
   1327                  memset( iv , 0, 16 );
   \                     ??mbedtls_aes_self_test_12: (+1)
   \   000000EC   0xA80A             ADD      R0,SP,#+40
   \   000000EE   0x2100             MOVS     R1,#+0
   \   000000F0   0x2200             MOVS     R2,#+0
   \   000000F2   0x2300             MOVS     R3,#+0
   \   000000F4   0xC00E             STM      R0!,{R1-R3}
   \   000000F6   0x6001             STR      R1,[R0, #0]
   1328                  memset( prv, 0, 16 );
   \   000000F8   0xA806             ADD      R0,SP,#+24
   \   000000FA   0xC00E             STM      R0!,{R1-R3}
   \   000000FC   0x6001             STR      R1,[R0, #0]
   1329                  memset( buf, 0, 16 );
   \   000000FE   0xA80E             ADD      R0,SP,#+56
   \   00000100   0xC00E             STM      R0!,{R1-R3}
   \   00000102   0x6001             STR      R1,[R0, #0]
   1330          
   1331                  if( v == MBEDTLS_AES_DECRYPT )
   \   00000104   0x01B2             LSLS     R2,R6,#+6
   \   00000106   0x3280             ADDS     R2,R2,#+128
   \   00000108   0x2D00             CMP      R5,#+0
   \   0000010A   0xA91E             ADD      R1,SP,#+120
   \   0000010C   0xA826             ADD      R0,SP,#+152
   \   0000010E   0xD15C             BNE      ??mbedtls_aes_self_test_15
   1332                  {
   1333                      mbedtls_aes_setkey_dec( &ctx, key, 128 + u * 64 );
   \   00000110   0x.... 0x....      BL       mbedtls_aes_setkey_dec
   1334          
   1335                      for( j = 0; j < 10000; j++ )
   \   00000114   0x....             LDR      R5,??DataTable25_3  ;; 0x2710
   1336                          mbedtls_aes_crypt_cbc( &ctx, v, 16, iv, buf, buf );
   \                     ??mbedtls_aes_self_test_16: (+1)
   \   00000116   0xA90E             ADD      R1,SP,#+56
   \   00000118   0xA802             ADD      R0,SP,#+8
   \   0000011A   0xC90C             LDM      R1!,{R2,R3}
   \   0000011C   0xC00C             STM      R0!,{R2,R3}
   \   0000011E   0xC90C             LDM      R1!,{R2,R3}
   \   00000120   0xC00C             STM      R0!,{R2,R3}
   \   00000122   0xAA0E             ADD      R2,SP,#+56
   \   00000124   0xA90E             ADD      R1,SP,#+56
   \   00000126   0xA826             ADD      R0,SP,#+152
   \   00000128   0x.... 0x....      BL       mbedtls_internal_aes_decrypt
   \   0000012C   0xA80E             ADD      R0,SP,#+56
   \   0000012E   0x7801             LDRB     R1,[R0, #+0]
   \   00000130   0x7822             LDRB     R2,[R4, #+0]
   \   00000132   0x404A             EORS     R2,R2,R1
   \   00000134   0x7002             STRB     R2,[R0, #+0]
   \   00000136   0x7841             LDRB     R1,[R0, #+1]
   \   00000138   0x7862             LDRB     R2,[R4, #+1]
   \   0000013A   0x404A             EORS     R2,R2,R1
   \   0000013C   0x7042             STRB     R2,[R0, #+1]
   \   0000013E   0x7881             LDRB     R1,[R0, #+2]
   \   00000140   0x78A2             LDRB     R2,[R4, #+2]
   \   00000142   0x404A             EORS     R2,R2,R1
   \   00000144   0x7082             STRB     R2,[R0, #+2]
   \   00000146   0x78C1             LDRB     R1,[R0, #+3]
   \   00000148   0x78E2             LDRB     R2,[R4, #+3]
   \   0000014A   0x404A             EORS     R2,R2,R1
   \   0000014C   0x70C2             STRB     R2,[R0, #+3]
   \   0000014E   0x7901             LDRB     R1,[R0, #+4]
   \   00000150   0x7922             LDRB     R2,[R4, #+4]
   \   00000152   0x404A             EORS     R2,R2,R1
   \   00000154   0x7102             STRB     R2,[R0, #+4]
   \   00000156   0x7941             LDRB     R1,[R0, #+5]
   \   00000158   0x7962             LDRB     R2,[R4, #+5]
   \   0000015A   0x404A             EORS     R2,R2,R1
   \   0000015C   0x7142             STRB     R2,[R0, #+5]
   \   0000015E   0x7981             LDRB     R1,[R0, #+6]
   \   00000160   0x79A2             LDRB     R2,[R4, #+6]
   \   00000162   0x404A             EORS     R2,R2,R1
   \   00000164   0x7182             STRB     R2,[R0, #+6]
   \   00000166   0x79C1             LDRB     R1,[R0, #+7]
   \   00000168   0x79E2             LDRB     R2,[R4, #+7]
   \   0000016A   0x404A             EORS     R2,R2,R1
   \   0000016C   0x71C2             STRB     R2,[R0, #+7]
   \   0000016E   0x7A01             LDRB     R1,[R0, #+8]
   \   00000170   0x7A22             LDRB     R2,[R4, #+8]
   \   00000172   0x404A             EORS     R2,R2,R1
   \   00000174   0x7202             STRB     R2,[R0, #+8]
   \   00000176   0x7A41             LDRB     R1,[R0, #+9]
   \   00000178   0x7A62             LDRB     R2,[R4, #+9]
   \   0000017A   0x404A             EORS     R2,R2,R1
   \   0000017C   0x7242             STRB     R2,[R0, #+9]
   \   0000017E   0x7A81             LDRB     R1,[R0, #+10]
   \   00000180   0x7AA2             LDRB     R2,[R4, #+10]
   \   00000182   0x404A             EORS     R2,R2,R1
   \   00000184   0x7282             STRB     R2,[R0, #+10]
   \   00000186   0x7AC1             LDRB     R1,[R0, #+11]
   \   00000188   0x7AE2             LDRB     R2,[R4, #+11]
   \   0000018A   0x404A             EORS     R2,R2,R1
   \   0000018C   0x72C2             STRB     R2,[R0, #+11]
   \   0000018E   0x7B01             LDRB     R1,[R0, #+12]
   \   00000190   0x7B22             LDRB     R2,[R4, #+12]
   \   00000192   0x404A             EORS     R2,R2,R1
   \   00000194   0x7302             STRB     R2,[R0, #+12]
   \   00000196   0x7B41             LDRB     R1,[R0, #+13]
   \   00000198   0x7B62             LDRB     R2,[R4, #+13]
   \   0000019A   0x404A             EORS     R2,R2,R1
   \   0000019C   0x7342             STRB     R2,[R0, #+13]
   \   0000019E   0x7B81             LDRB     R1,[R0, #+14]
   \   000001A0   0x7BA2             LDRB     R2,[R4, #+14]
   \   000001A2   0x404A             EORS     R2,R2,R1
   \   000001A4   0x7382             STRB     R2,[R0, #+14]
   \   000001A6   0x7BC1             LDRB     R1,[R0, #+15]
   \   000001A8   0x7BE2             LDRB     R2,[R4, #+15]
   \   000001AA   0x404A             EORS     R2,R2,R1
   \   000001AC   0x73C2             STRB     R2,[R0, #+15]
   \   000001AE   0xA902             ADD      R1,SP,#+8
   \   000001B0   0xA80A             ADD      R0,SP,#+40
   \   000001B2   0xC90C             LDM      R1!,{R2,R3}
   \   000001B4   0xC00C             STM      R0!,{R2,R3}
   \   000001B6   0xC90C             LDM      R1!,{R2,R3}
   \   000001B8   0xC00C             STM      R0!,{R2,R3}
   \   000001BA   0x1E6D             SUBS     R5,R5,#+1
   \   000001BC   0xD1AB             BNE      ??mbedtls_aes_self_test_16
   1337          
   1338                      if( memcmp( buf, aes_test_cbc_dec[u], 16 ) != 0 )
   \   000001BE   0x2210             MOVS     R2,#+16
   \   000001C0   0x....             LDR      R0,??DataTable25_9
   \   000001C2   0x0131             LSLS     R1,R6,#+4
   \   000001C4   0x1841             ADDS     R1,R0,R1
   \   000001C6   0xA80E             ADD      R0,SP,#+56
   \   000001C8   0xE066             B        ??mbedtls_aes_self_test_17
   1339                      {
   1340                          if( verbose != 0 )
   1341                              mbedtls_printf( "failed\n" );
   1342          
   1343                          ret = 1;
   1344                          goto exit;
   1345                      }
   1346                  }
   1347                  else
   1348                  {
   1349                      mbedtls_aes_setkey_enc( &ctx, key, 128 + u * 64 );
   \                     ??mbedtls_aes_self_test_15: (+1)
   \   000001CA   0x.... 0x....      BL       mbedtls_aes_setkey_enc
   1350          
   1351                      for( j = 0; j < 10000; j++ )
   \   000001CE   0x....             LDR      R5,??DataTable25_3  ;; 0x2710
   1352                      {
   1353                          unsigned char tmp[16];
   1354          
   1355                          mbedtls_aes_crypt_cbc( &ctx, v, 16, iv, buf, buf );
   \                     ??mbedtls_aes_self_test_18: (+1)
   \   000001D0   0xA80E             ADD      R0,SP,#+56
   \   000001D2   0x7801             LDRB     R1,[R0, #+0]
   \   000001D4   0x7822             LDRB     R2,[R4, #+0]
   \   000001D6   0x404A             EORS     R2,R2,R1
   \   000001D8   0x7002             STRB     R2,[R0, #+0]
   \   000001DA   0x7841             LDRB     R1,[R0, #+1]
   \   000001DC   0x7862             LDRB     R2,[R4, #+1]
   \   000001DE   0x404A             EORS     R2,R2,R1
   \   000001E0   0x7042             STRB     R2,[R0, #+1]
   \   000001E2   0x7881             LDRB     R1,[R0, #+2]
   \   000001E4   0x78A2             LDRB     R2,[R4, #+2]
   \   000001E6   0x404A             EORS     R2,R2,R1
   \   000001E8   0x7082             STRB     R2,[R0, #+2]
   \   000001EA   0x78C1             LDRB     R1,[R0, #+3]
   \   000001EC   0x78E2             LDRB     R2,[R4, #+3]
   \   000001EE   0x404A             EORS     R2,R2,R1
   \   000001F0   0x70C2             STRB     R2,[R0, #+3]
   \   000001F2   0x7901             LDRB     R1,[R0, #+4]
   \   000001F4   0x7922             LDRB     R2,[R4, #+4]
   \   000001F6   0x404A             EORS     R2,R2,R1
   \   000001F8   0x7102             STRB     R2,[R0, #+4]
   \   000001FA   0x7941             LDRB     R1,[R0, #+5]
   \   000001FC   0x7962             LDRB     R2,[R4, #+5]
   \   000001FE   0x404A             EORS     R2,R2,R1
   \   00000200   0x7142             STRB     R2,[R0, #+5]
   \   00000202   0x7981             LDRB     R1,[R0, #+6]
   \   00000204   0x79A2             LDRB     R2,[R4, #+6]
   \   00000206   0x404A             EORS     R2,R2,R1
   \   00000208   0x7182             STRB     R2,[R0, #+6]
   \   0000020A   0x79C1             LDRB     R1,[R0, #+7]
   \   0000020C   0x79E2             LDRB     R2,[R4, #+7]
   \   0000020E   0x404A             EORS     R2,R2,R1
   \   00000210   0x71C2             STRB     R2,[R0, #+7]
   \   00000212   0x7A01             LDRB     R1,[R0, #+8]
   \   00000214   0x7A22             LDRB     R2,[R4, #+8]
   \   00000216   0x404A             EORS     R2,R2,R1
   \   00000218   0x7202             STRB     R2,[R0, #+8]
   \   0000021A   0x7A41             LDRB     R1,[R0, #+9]
   \   0000021C   0x7A62             LDRB     R2,[R4, #+9]
   \   0000021E   0x404A             EORS     R2,R2,R1
   \   00000220   0x7242             STRB     R2,[R0, #+9]
   \   00000222   0x7A81             LDRB     R1,[R0, #+10]
   \   00000224   0x7AA2             LDRB     R2,[R4, #+10]
   \   00000226   0x404A             EORS     R2,R2,R1
   \   00000228   0x7282             STRB     R2,[R0, #+10]
   \   0000022A   0x7AC1             LDRB     R1,[R0, #+11]
   \   0000022C   0x7AE2             LDRB     R2,[R4, #+11]
   \   0000022E   0x404A             EORS     R2,R2,R1
   \   00000230   0x72C2             STRB     R2,[R0, #+11]
   \   00000232   0x7B01             LDRB     R1,[R0, #+12]
   \   00000234   0x7B22             LDRB     R2,[R4, #+12]
   \   00000236   0x404A             EORS     R2,R2,R1
   \   00000238   0x7302             STRB     R2,[R0, #+12]
   \   0000023A   0x7B41             LDRB     R1,[R0, #+13]
   \   0000023C   0x7B62             LDRB     R2,[R4, #+13]
   \   0000023E   0x404A             EORS     R2,R2,R1
   \   00000240   0x7342             STRB     R2,[R0, #+13]
   \   00000242   0x7B81             LDRB     R1,[R0, #+14]
   \   00000244   0x7BA2             LDRB     R2,[R4, #+14]
   \   00000246   0x404A             EORS     R2,R2,R1
   \   00000248   0x7382             STRB     R2,[R0, #+14]
   \   0000024A   0x7BC1             LDRB     R1,[R0, #+15]
   \   0000024C   0x7BE2             LDRB     R2,[R4, #+15]
   \   0000024E   0x404A             EORS     R2,R2,R1
   \   00000250   0x73C2             STRB     R2,[R0, #+15]
   \   00000252   0xAA0E             ADD      R2,SP,#+56
   \   00000254   0xA90E             ADD      R1,SP,#+56
   \   00000256   0xA826             ADD      R0,SP,#+152
   \   00000258   0x.... 0x....      BL       mbedtls_internal_aes_encrypt
   \   0000025C   0xA90E             ADD      R1,SP,#+56
   \   0000025E   0xA80A             ADD      R0,SP,#+40
   \   00000260   0xC90C             LDM      R1!,{R2,R3}
   \   00000262   0xC00C             STM      R0!,{R2,R3}
   \   00000264   0xC90C             LDM      R1!,{R2,R3}
   \   00000266   0xC00C             STM      R0!,{R2,R3}
   1356          
   1357                          memcpy( tmp, prv, 16 );
   \   00000268   0xA906             ADD      R1,SP,#+24
   \   0000026A   0xA802             ADD      R0,SP,#+8
   \   0000026C   0xC90C             LDM      R1!,{R2,R3}
   \   0000026E   0xC00C             STM      R0!,{R2,R3}
   \   00000270   0xC90C             LDM      R1!,{R2,R3}
   \   00000272   0xC00C             STM      R0!,{R2,R3}
   1358                          memcpy( prv, buf, 16 );
   \   00000274   0xA90E             ADD      R1,SP,#+56
   \   00000276   0xC90C             LDM      R1!,{R2,R3}
   \   00000278   0xC00C             STM      R0!,{R2,R3}
   \   0000027A   0xC90C             LDM      R1!,{R2,R3}
   \   0000027C   0xC00C             STM      R0!,{R2,R3}
   1359                          memcpy( buf, tmp, 16 );
   \   0000027E   0xA902             ADD      R1,SP,#+8
   \   00000280   0xA80E             ADD      R0,SP,#+56
   \   00000282   0xC90C             LDM      R1!,{R2,R3}
   \   00000284   0xC00C             STM      R0!,{R2,R3}
   \   00000286   0xC90C             LDM      R1!,{R2,R3}
   \   00000288   0xC00C             STM      R0!,{R2,R3}
   1360                      }
   \   0000028A   0x1E6D             SUBS     R5,R5,#+1
   \   0000028C   0xD1A0             BNE      ??mbedtls_aes_self_test_18
   1361          
   1362                      if( memcmp( prv, aes_test_cbc_enc[u], 16 ) != 0 )
   \   0000028E   0x2210             MOVS     R2,#+16
   \   00000290   0x....             LDR      R0,??DataTable25_10
   \   00000292   0x0131             LSLS     R1,R6,#+4
   \   00000294   0x1841             ADDS     R1,R0,R1
   \   00000296   0xA806             ADD      R0,SP,#+24
   \                     ??mbedtls_aes_self_test_17: (+1)
   \   00000298   0x.... 0x....      BL       memcmp
   \   0000029C   0x2800             CMP      R0,#+0
   \   0000029E   0xD007             BEQ      ??mbedtls_aes_self_test_19
   1363                      {
   1364                          if( verbose != 0 )
   \                     ??mbedtls_aes_self_test_7: (+1)
   \   000002A0   0x2F00             CMP      R7,#+0
   \   000002A2   0xD002             BEQ      ??mbedtls_aes_self_test_20
   1365                              mbedtls_printf( "failed\n" );
   \   000002A4   0x....             ADR.N    R0,?_3
   \   000002A6   0x.... 0x....      BL       printf
   1366          
   1367                          ret = 1;
   \                     ??mbedtls_aes_self_test_20: (+1)
   \   000002AA   0x2001             MOVS     R0,#+1
   \   000002AC   0x9001             STR      R0,[SP, #+4]
   1368                          goto exit;
   \   000002AE   0xE00F             B        ??mbedtls_aes_self_test_21
   1369                      }
   1370                  }
   1371          
   1372                  if( verbose != 0 )
   \                     ??mbedtls_aes_self_test_19: (+1)
   \   000002B0   0x2F00             CMP      R7,#+0
   \   000002B2   0xD002             BEQ      ??mbedtls_aes_self_test_22
   1373                      mbedtls_printf( "passed\n" );
   \   000002B4   0x....             ADR.N    R0,?_4
   \   000002B6   0x.... 0x....      BL       printf
   1374              }
   \                     ??mbedtls_aes_self_test_22: (+1)
   \   000002BA   0x9800             LDR      R0,[SP, #+0]
   \   000002BC   0x1C40             ADDS     R0,R0,#+1
   \   000002BE   0x9000             STR      R0,[SP, #+0]
   \   000002C0   0x2806             CMP      R0,#+6
   \   000002C2   0xDA00             BGE      .+4
   \   000002C4   0xE702             B        ??mbedtls_aes_self_test_11
   1375          
   1376              if( verbose != 0 )
   \   000002C6   0x2F00             CMP      R7,#+0
   \   000002C8   0xD002             BEQ      ??mbedtls_aes_self_test_21
   1377                  mbedtls_printf( "\n" );
   \   000002CA   0x....             ADR      R0,??DataTable25_7  ;; "\n"
   \   000002CC   0x.... 0x....      BL       printf
   1378          #endif /* MBEDTLS_CIPHER_MODE_CBC */
   1379          
   1380          #if defined(MBEDTLS_CIPHER_MODE_CFB)
   1381              /*
   1382               * CFB128 mode
   1383               */
   1384              for( i = 0; i < 6; i++ )
   1385              {
   1386                  u = i >> 1;
   1387                  v = i  & 1;
   1388          
   1389                  if( verbose != 0 )
   1390                      mbedtls_printf( "  AES-CFB128-%3d (%s): ", 128 + u * 64,
   1391                                       ( v == MBEDTLS_AES_DECRYPT ) ? "dec" : "enc" );
   1392          
   1393                  memcpy( iv,  aes_test_cfb128_iv, 16 );
   1394                  memcpy( key, aes_test_cfb128_key[u], 16 + u * 8 );
   1395          
   1396                  offset = 0;
   1397                  mbedtls_aes_setkey_enc( &ctx, key, 128 + u * 64 );
   1398          
   1399                  if( v == MBEDTLS_AES_DECRYPT )
   1400                  {
   1401                      memcpy( buf, aes_test_cfb128_ct[u], 64 );
   1402                      mbedtls_aes_crypt_cfb128( &ctx, v, 64, &offset, iv, buf, buf );
   1403          
   1404                      if( memcmp( buf, aes_test_cfb128_pt, 64 ) != 0 )
   1405                      {
   1406                          if( verbose != 0 )
   1407                              mbedtls_printf( "failed\n" );
   1408          
   1409                          ret = 1;
   1410                          goto exit;
   1411                      }
   1412                  }
   1413                  else
   1414                  {
   1415                      memcpy( buf, aes_test_cfb128_pt, 64 );
   1416                      mbedtls_aes_crypt_cfb128( &ctx, v, 64, &offset, iv, buf, buf );
   1417          
   1418                      if( memcmp( buf, aes_test_cfb128_ct[u], 64 ) != 0 )
   1419                      {
   1420                          if( verbose != 0 )
   1421                              mbedtls_printf( "failed\n" );
   1422          
   1423                          ret = 1;
   1424                          goto exit;
   1425                      }
   1426                  }
   1427          
   1428                  if( verbose != 0 )
   1429                      mbedtls_printf( "passed\n" );
   1430              }
   1431          
   1432              if( verbose != 0 )
   1433                  mbedtls_printf( "\n" );
   1434          #endif /* MBEDTLS_CIPHER_MODE_CFB */
   1435          
   1436          #if defined(MBEDTLS_CIPHER_MODE_CTR)
   1437              /*
   1438               * CTR mode
   1439               */
   1440              for( i = 0; i < 6; i++ )
   1441              {
   1442                  u = i >> 1;
   1443                  v = i  & 1;
   1444          
   1445                  if( verbose != 0 )
   1446                      mbedtls_printf( "  AES-CTR-128 (%s): ",
   1447                                       ( v == MBEDTLS_AES_DECRYPT ) ? "dec" : "enc" );
   1448          
   1449                  memcpy( nonce_counter, aes_test_ctr_nonce_counter[u], 16 );
   1450                  memcpy( key, aes_test_ctr_key[u], 16 );
   1451          
   1452                  offset = 0;
   1453                  mbedtls_aes_setkey_enc( &ctx, key, 128 );
   1454          
   1455                  if( v == MBEDTLS_AES_DECRYPT )
   1456                  {
   1457                      len = aes_test_ctr_len[u];
   1458                      memcpy( buf, aes_test_ctr_ct[u], len );
   1459          
   1460                      mbedtls_aes_crypt_ctr( &ctx, len, &offset, nonce_counter, stream_block,
   1461                                     buf, buf );
   1462          
   1463                      if( memcmp( buf, aes_test_ctr_pt[u], len ) != 0 )
   1464                      {
   1465                          if( verbose != 0 )
   1466                              mbedtls_printf( "failed\n" );
   1467          
   1468                          ret = 1;
   1469                          goto exit;
   1470                      }
   1471                  }
   1472                  else
   1473                  {
   1474                      len = aes_test_ctr_len[u];
   1475                      memcpy( buf, aes_test_ctr_pt[u], len );
   1476          
   1477                      mbedtls_aes_crypt_ctr( &ctx, len, &offset, nonce_counter, stream_block,
   1478                                     buf, buf );
   1479          
   1480                      if( memcmp( buf, aes_test_ctr_ct[u], len ) != 0 )
   1481                      {
   1482                          if( verbose != 0 )
   1483                              mbedtls_printf( "failed\n" );
   1484          
   1485                          ret = 1;
   1486                          goto exit;
   1487                      }
   1488                  }
   1489          
   1490                  if( verbose != 0 )
   1491                      mbedtls_printf( "passed\n" );
   1492              }
   1493          
   1494              if( verbose != 0 )
   1495                  mbedtls_printf( "\n" );
   1496          #endif /* MBEDTLS_CIPHER_MODE_CTR */
   1497          
   1498              ret = 0;
   1499          
   1500          exit:
   1501              mbedtls_aes_free( &ctx );
   \                     ??mbedtls_aes_self_test_21: (+1)
   \   000002D0   0x218C             MOVS     R1,#+140
   \   000002D2   0x0049             LSLS     R1,R1,#+1        ;; #+280
   \   000002D4   0xA826             ADD      R0,SP,#+152
   \   000002D6   0x.... 0x....      BL       __aeabi_memclr4
   1502          
   1503              return( ret );
   \   000002DA   0x9801             LDR      R0,[SP, #+4]
   \   000002DC   0xB06D             ADD      SP,SP,#+436
   \   000002DE   0xBDF0             POP      {R4-R7,PC}       ;; return
   1504          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   0x........         DC32     FSb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_1:
   \   00000000   0x........         DC32     RT0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_2:
   \   00000000   0x........         DC32     RT1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_3:
   \   00000000   0x........         DC32     RT2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_4:
   \   00000000   0x........         DC32     RT3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   0x........         DC32     FT0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_1:
   \   00000000   0x........         DC32     FT1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_2:
   \   00000000   0x........         DC32     FT2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_3:
   \   00000000   0x........         DC32     FT3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_4:
   \   00000000   0x........         DC32     FSb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   0x64 0x65          DC8      "dec"
   \              0x63 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_1:
   \   00000000   0x65 0x6E          DC8      "enc"
   \              0x63 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_3:
   \   00000000   0x00002710         DC32     0x2710

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_4:
   \   00000000   0x........         DC32     aes_test_ecb_dec

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_5:
   \   00000000   0x........         DC32     aes_test_ecb_enc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_6:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_7:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_8:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_9:
   \   00000000   0x........         DC32     aes_test_cbc_dec

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_10:
   \   00000000   0x........         DC32     aes_test_cbc_enc

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x20 0x20          DC8 "  AES-ECB-%3d (%s): "
   \              0x41 0x45    
   \              0x53 0x2D    
   \              0x45 0x43    
   \              0x42 0x2D    
   \              0x25 0x33    
   \              0x64 0x20    
   \              0x28 0x25    
   \              0x73 0x29    
   \              0x3A 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x64 0x65          DC8 "dec"
   \              0x63 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x65 0x6E          DC8 "enc"
   \              0x63 0x00    

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_5:
   \   00000000   0x0A 0x00          DC8 "\012"

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x20 0x20          DC8 "  AES-CBC-%3d (%s): "
   \              0x41 0x45    
   \              0x53 0x2D    
   \              0x43 0x42    
   \              0x43 0x2D    
   \              0x25 0x33    
   \              0x64 0x20    
   \              0x28 0x25    
   \              0x73 0x29    
   \              0x3A 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x66 0x61          DC8 "failed\012"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x70 0x61          DC8 "passed\012"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x00    
   1505          
   1506          #endif /* MBEDTLS_SELF_TEST */
   1507          
   1508          #endif /* MBEDTLS_AES_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      56   mbedtls_aes_crypt_cbc
        56   -> __aeabi_memcpy
        56   -> mbedtls_internal_aes_decrypt
        56   -> mbedtls_internal_aes_encrypt
       8   mbedtls_aes_crypt_ecb
         8   -> mbedtls_internal_aes_decrypt
         8   -> mbedtls_internal_aes_encrypt
       8   mbedtls_aes_decrypt
         8   -> mbedtls_internal_aes_decrypt
       8   mbedtls_aes_encrypt
         8   -> mbedtls_internal_aes_encrypt
       8   mbedtls_aes_free
         8   -> __aeabi_memclr
       8   mbedtls_aes_init
         8   -> __aeabi_memclr4
     456   mbedtls_aes_self_test
       456   -> __aeabi_memclr4
       456   -> mbedtls_aes_setkey_dec
       456   -> mbedtls_aes_setkey_enc
       456   -> mbedtls_internal_aes_decrypt
       456   -> mbedtls_internal_aes_encrypt
       456   -> memcmp
       456   -> printf
     304   mbedtls_aes_setkey_dec
       304   -> __aeabi_memclr4
       304   -> mbedtls_aes_setkey_enc
      16   mbedtls_aes_setkey_enc
      32   mbedtls_internal_aes_decrypt
      32   mbedtls_internal_aes_encrypt


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable23
       4  ??DataTable23_1
       4  ??DataTable23_2
       4  ??DataTable23_3
       4  ??DataTable23_4
       4  ??DataTable24
       4  ??DataTable24_1
       4  ??DataTable24_2
       4  ??DataTable24_3
       4  ??DataTable24_4
       4  ??DataTable25
       4  ??DataTable25_1
       4  ??DataTable25_10
       4  ??DataTable25_2
       4  ??DataTable25_3
       4  ??DataTable25_4
       4  ??DataTable25_5
       4  ??DataTable25_6
       4  ??DataTable25_7
       4  ??DataTable25_8
       4  ??DataTable25_9
      94  ?Subroutine0
      24  ?_0
       4  ?_1
       4  ?_2
       8  ?_3
       8  ?_4
       2  ?_5
      24  ?_6
     256  FSb
    1024  FT0
    1024  FT1
    1024  FT2
    1024  FT3
      40  RCON
     256  RSb
    1024  RT0
    1024  RT1
    1024  RT2
    1024  RT3
      48  aes_test_cbc_dec
      48  aes_test_cbc_enc
      48  aes_test_ecb_dec
      48  aes_test_ecb_enc
     226  mbedtls_aes_crypt_cbc
      24  mbedtls_aes_crypt_ecb
       8  mbedtls_aes_decrypt
       8  mbedtls_aes_encrypt
      18  mbedtls_aes_free
      12  mbedtls_aes_init
     736  mbedtls_aes_self_test
     186  mbedtls_aes_setkey_dec
     400  mbedtls_aes_setkey_enc
     924  mbedtls_internal_aes_decrypt
     908  mbedtls_internal_aes_encrypt

 
 6 906 bytes in section .rodata
 5 732 bytes in section .text
 
 5 732 bytes of CODE  memory
 6 906 bytes of CONST memory

Errors: none
Warnings: none
