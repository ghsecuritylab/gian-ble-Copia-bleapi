###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:29
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\mbedtls\src\md.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\md.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\md.s.txt -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\md.o
#        .\mbed-os\features\mbedtls\src\md.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\md.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\md.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\mbedtls\src\md.c
      1          /**
      2           * \file mbedtls_md.c
      3           *
      4           * \brief Generic message digest wrapper for mbed TLS
      5           *
      6           * \author Adriaan de Jong <dejong@fox-it.com>
      7           *
      8           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      9           *  SPDX-License-Identifier: Apache-2.0
     10           *
     11           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
     12           *  not use this file except in compliance with the License.
     13           *  You may obtain a copy of the License at
     14           *
     15           *  http://www.apache.org/licenses/LICENSE-2.0
     16           *
     17           *  Unless required by applicable law or agreed to in writing, software
     18           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     19           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     20           *  See the License for the specific language governing permissions and
     21           *  limitations under the License.
     22           *
     23           *  This file is part of mbed TLS (https://tls.mbed.org)
     24           */
     25          
     26          #if !defined(MBEDTLS_CONFIG_FILE)
     27          #include "mbedtls/config.h"
     28          #else
     29          #include MBEDTLS_CONFIG_FILE
     30          #endif
     31          
     32          #if defined(MBEDTLS_MD_C)
     33          
     34          #include "mbedtls/md.h"
     35          #include "mbedtls/md_internal.h"
     36          
     37          #if defined(MBEDTLS_PLATFORM_C)
     38          #include "mbedtls/platform.h"
     39          #else
     40          #include <stdlib.h>
     41          #define mbedtls_calloc    calloc
     42          #define mbedtls_free       free
     43          #endif
     44          
     45          #include <string.h>
     46          
     47          #if defined(MBEDTLS_FS_IO)
     48          #include <stdio.h>
     49          #endif
     50          
     51          /* Implementation that should never be optimized out by the compiler */
     52          static void mbedtls_zeroize( void *v, size_t n ) {
     53              volatile unsigned char *p = v; while( n-- ) *p++ = 0;
     54          }
     55          
     56          /*
     57           * Reminder: update profiles in x509_crt.c when adding a new hash!
     58           */

   \                                 In section .text, align 4, keep-with-next
     59          static const int supported_digests[] = {
   \                     supported_digests:
   \   00000000   0x00000008         DC32 8, 7, 6, 5, 0
   \              0x00000007   
   \              0x00000006   
   \              0x00000005   
   \              0x00000000   
     60          
     61          #if defined(MBEDTLS_SHA512_C)
     62                  MBEDTLS_MD_SHA512,
     63                  MBEDTLS_MD_SHA384,
     64          #endif
     65          
     66          #if defined(MBEDTLS_SHA256_C)
     67                  MBEDTLS_MD_SHA256,
     68                  MBEDTLS_MD_SHA224,
     69          #endif
     70          
     71          #if defined(MBEDTLS_SHA1_C)
     72                  MBEDTLS_MD_SHA1,
     73          #endif
     74          
     75          #if defined(MBEDTLS_RIPEMD160_C)
     76                  MBEDTLS_MD_RIPEMD160,
     77          #endif
     78          
     79          #if defined(MBEDTLS_MD5_C)
     80                  MBEDTLS_MD_MD5,
     81          #endif
     82          
     83          #if defined(MBEDTLS_MD4_C)
     84                  MBEDTLS_MD_MD4,
     85          #endif
     86          
     87          #if defined(MBEDTLS_MD2_C)
     88                  MBEDTLS_MD_MD2,
     89          #endif
     90          
     91                  MBEDTLS_MD_NONE
     92          };
     93          

   \                                 In section .text, align 4, keep-with-next
     94          const int *mbedtls_md_list( void )
     95          {
     96              return( supported_digests );
   \                     mbedtls_md_list: (+1)
   \   00000000   0x....             ADR.N    R0,supported_digests
   \   00000002   0x4770             BX       LR               ;; return
     97          }
     98          

   \                                 In section .text, align 4, keep-with-next
     99          const mbedtls_md_info_t *mbedtls_md_info_from_string( const char *md_name )
    100          {
   \                     mbedtls_md_info_from_string: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    101              if( NULL == md_name )
   \   00000004   0xD01F             BEQ      ??mbedtls_md_info_from_string_0
    102                  return( NULL );
    103          
    104              /* Get the appropriate digest information */
    105          #if defined(MBEDTLS_MD2_C)
    106              if( !strcmp( "MD2", md_name ) )
    107                  return mbedtls_md_info_from_type( MBEDTLS_MD_MD2 );
    108          #endif
    109          #if defined(MBEDTLS_MD4_C)
    110              if( !strcmp( "MD4", md_name ) )
    111                  return mbedtls_md_info_from_type( MBEDTLS_MD_MD4 );
    112          #endif
    113          #if defined(MBEDTLS_MD5_C)
    114              if( !strcmp( "MD5", md_name ) )
    115                  return mbedtls_md_info_from_type( MBEDTLS_MD_MD5 );
    116          #endif
    117          #if defined(MBEDTLS_RIPEMD160_C)
    118              if( !strcmp( "RIPEMD160", md_name ) )
    119                  return mbedtls_md_info_from_type( MBEDTLS_MD_RIPEMD160 );
    120          #endif
    121          #if defined(MBEDTLS_SHA1_C)
    122              if( !strcmp( "SHA1", md_name ) || !strcmp( "SHA", md_name ) )
    123                  return mbedtls_md_info_from_type( MBEDTLS_MD_SHA1 );
    124          #endif
    125          #if defined(MBEDTLS_SHA256_C)
    126              if( !strcmp( "SHA224", md_name ) )
   \   00000006   0x0021             MOVS     R1,R4
   \   00000008   0x....             ADR.N    R0,?_0
   \   0000000A   0x.... 0x....      BL       strcmp
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE      ??mbedtls_md_info_from_string_1
    127                  return mbedtls_md_info_from_type( MBEDTLS_MD_SHA224 );
   \   00000012   0x....             LDR      R0,??DataTable15
   \   00000014   0xBD10             POP      {R4,PC}
    128              if( !strcmp( "SHA256", md_name ) )
   \                     ??mbedtls_md_info_from_string_1: (+1)
   \   00000016   0x0021             MOVS     R1,R4
   \   00000018   0x....             ADR.N    R0,?_1
   \   0000001A   0x.... 0x....      BL       strcmp
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD101             BNE      ??mbedtls_md_info_from_string_2
    129                  return mbedtls_md_info_from_type( MBEDTLS_MD_SHA256 );
   \   00000022   0x....             LDR      R0,??DataTable15_1
   \   00000024   0xBD10             POP      {R4,PC}
    130          #endif
    131          #if defined(MBEDTLS_SHA512_C)
    132              if( !strcmp( "SHA384", md_name ) )
   \                     ??mbedtls_md_info_from_string_2: (+1)
   \   00000026   0x0021             MOVS     R1,R4
   \   00000028   0x....             ADR.N    R0,?_2
   \   0000002A   0x.... 0x....      BL       strcmp
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD101             BNE      ??mbedtls_md_info_from_string_3
    133                  return mbedtls_md_info_from_type( MBEDTLS_MD_SHA384 );
   \   00000032   0x....             LDR      R0,??DataTable15_2
   \   00000034   0xBD10             POP      {R4,PC}
    134              if( !strcmp( "SHA512", md_name ) )
   \                     ??mbedtls_md_info_from_string_3: (+1)
   \   00000036   0x0021             MOVS     R1,R4
   \   00000038   0x....             ADR.N    R0,?_3
   \   0000003A   0x.... 0x....      BL       strcmp
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD101             BNE      ??mbedtls_md_info_from_string_0
    135                  return mbedtls_md_info_from_type( MBEDTLS_MD_SHA512 );
   \   00000042   0x....             LDR      R0,??DataTable16
   \   00000044   0xBD10             POP      {R4,PC}
    136          #endif
    137              return( NULL );
   \                     ??mbedtls_md_info_from_string_0: (+1)
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0xBD10             POP      {R4,PC}          ;; return
    138          }
    139          

   \                                 In section .text, align 2, keep-with-next
    140          const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
    141          {
    142              switch( md_type )
   \                     mbedtls_md_info_from_type: (+1)
   \   00000000   0x2805             CMP      R0,#+5
   \   00000002   0xD006             BEQ      ??mbedtls_md_info_from_type_0
   \   00000004   0xD30D             BCC      ??mbedtls_md_info_from_type_1
   \   00000006   0x2807             CMP      R0,#+7
   \   00000008   0xD007             BEQ      ??mbedtls_md_info_from_type_2
   \   0000000A   0xD304             BCC      ??mbedtls_md_info_from_type_3
   \   0000000C   0x2808             CMP      R0,#+8
   \   0000000E   0xD006             BEQ      ??mbedtls_md_info_from_type_4
   \   00000010   0xE007             B        ??mbedtls_md_info_from_type_1
    143              {
    144          #if defined(MBEDTLS_MD2_C)
    145                  case MBEDTLS_MD_MD2:
    146                      return( &mbedtls_md2_info );
    147          #endif
    148          #if defined(MBEDTLS_MD4_C)
    149                  case MBEDTLS_MD_MD4:
    150                      return( &mbedtls_md4_info );
    151          #endif
    152          #if defined(MBEDTLS_MD5_C)
    153                  case MBEDTLS_MD_MD5:
    154                      return( &mbedtls_md5_info );
    155          #endif
    156          #if defined(MBEDTLS_RIPEMD160_C)
    157                  case MBEDTLS_MD_RIPEMD160:
    158                      return( &mbedtls_ripemd160_info );
    159          #endif
    160          #if defined(MBEDTLS_SHA1_C)
    161                  case MBEDTLS_MD_SHA1:
    162                      return( &mbedtls_sha1_info );
    163          #endif
    164          #if defined(MBEDTLS_SHA256_C)
    165                  case MBEDTLS_MD_SHA224:
    166                      return( &mbedtls_sha224_info );
   \                     ??mbedtls_md_info_from_type_0: (+1)
   \   00000012   0x....             LDR      R0,??DataTable15
   \   00000014   0x4770             BX       LR
    167                  case MBEDTLS_MD_SHA256:
    168                      return( &mbedtls_sha256_info );
   \                     ??mbedtls_md_info_from_type_3: (+1)
   \   00000016   0x....             LDR      R0,??DataTable15_1
   \   00000018   0x4770             BX       LR
    169          #endif
    170          #if defined(MBEDTLS_SHA512_C)
    171                  case MBEDTLS_MD_SHA384:
    172                      return( &mbedtls_sha384_info );
   \                     ??mbedtls_md_info_from_type_2: (+1)
   \   0000001A   0x....             LDR      R0,??DataTable15_2
   \   0000001C   0x4770             BX       LR
    173                  case MBEDTLS_MD_SHA512:
    174                      return( &mbedtls_sha512_info );
   \                     ??mbedtls_md_info_from_type_4: (+1)
   \   0000001E   0x....             LDR      R0,??DataTable16
   \   00000020   0x4770             BX       LR
    175          #endif
    176                  default:
    177                      return( NULL );
   \                     ??mbedtls_md_info_from_type_1: (+1)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x4770             BX       LR               ;; return
    178              }
    179          }
    180          

   \                                 In section .text, align 2, keep-with-next
    181          void mbedtls_md_init( mbedtls_md_context_t *ctx )
    182          {
    183              memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
   \                     mbedtls_md_init: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0xC00E             STM      R0!,{R1-R3}
    184          }
   \   00000008   0x4770             BX       LR               ;; return
    185          

   \                                 In section .text, align 2, keep-with-next
    186          void mbedtls_md_free( mbedtls_md_context_t *ctx )
    187          {
   \                     mbedtls_md_free: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    188              if( ctx == NULL || ctx->md_info == NULL )
   \   00000004   0xD017             BEQ      ??mbedtls_md_free_0
   \   00000006   0x6821             LDR      R1,[R4, #+0]
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD014             BEQ      ??mbedtls_md_free_0
    189                  return;
    190          
    191              if( ctx->md_ctx != NULL )
   \   0000000C   0x6860             LDR      R0,[R4, #+4]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD001             BEQ      ??mbedtls_md_free_1
    192                  ctx->md_info->ctx_free_func( ctx->md_ctx );
   \   00000012   0x6A49             LDR      R1,[R1, #+36]
   \   00000014   0x4788             BLX      R1
    193          
    194              if( ctx->hmac_ctx != NULL )
   \                     ??mbedtls_md_free_1: (+1)
   \   00000016   0x68A0             LDR      R0,[R4, #+8]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD008             BEQ      ??mbedtls_md_free_2
    195              {
    196                  mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
   \   0000001C   0x6821             LDR      R1,[R4, #+0]
   \   0000001E   0x68C9             LDR      R1,[R1, #+12]
   \   00000020   0x0049             LSLS     R1,R1,#+1
   \   00000022   0xD001             BEQ      ??mbedtls_md_free_3
   \   00000024   0x.... 0x....      BL       __aeabi_memclr
    197                  mbedtls_free( ctx->hmac_ctx );
   \                     ??mbedtls_md_free_3: (+1)
   \   00000028   0x68A0             LDR      R0,[R4, #+8]
   \   0000002A   0x.... 0x....      BL       free
    198              }
    199          
    200              mbedtls_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
   \                     ??mbedtls_md_free_2: (+1)
   \   0000002E   0x210C             MOVS     R1,#+12
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0x.... 0x....      BL       __aeabi_memclr
    201          }
   \                     ??mbedtls_md_free_0: (+1)
   \   00000036   0xBD10             POP      {R4,PC}          ;; return
    202          

   \                                 In section .text, align 2, keep-with-next
    203          int mbedtls_md_clone( mbedtls_md_context_t *dst,
    204                                const mbedtls_md_context_t *src )
    205          {
   \                     mbedtls_md_clone: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    206              if( dst == NULL || dst->md_info == NULL ||
    207                  src == NULL || src->md_info == NULL ||
    208                  dst->md_info != src->md_info )
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD009             BEQ      ??mbedtls_md_clone_0
   \   00000006   0x6802             LDR      R2,[R0, #+0]
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xD006             BEQ      ??mbedtls_md_clone_0
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD004             BEQ      ??mbedtls_md_clone_0
   \   00000010   0x680B             LDR      R3,[R1, #+0]
   \   00000012   0x2B00             CMP      R3,#+0
   \   00000014   0xD001             BEQ      ??mbedtls_md_clone_0
   \   00000016   0x429A             CMP      R2,R3
   \   00000018   0xD001             BEQ      ??mbedtls_md_clone_1
    209              {
    210                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \                     ??mbedtls_md_clone_0: (+1)
   \   0000001A   0x....             LDR      R0,??DataTable19  ;; 0xffffaf00
   \   0000001C   0xBD02             POP      {R1,PC}
    211              }
    212          
    213              dst->md_info->clone_func( dst->md_ctx, src->md_ctx );
   \                     ??mbedtls_md_clone_1: (+1)
   \   0000001E   0x6849             LDR      R1,[R1, #+4]
   \   00000020   0x6840             LDR      R0,[R0, #+4]
   \   00000022   0x6A92             LDR      R2,[R2, #+40]
   \   00000024   0x4790             BLX      R2
    214          
    215              return( 0 );
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xBD02             POP      {R1,PC}          ;; return
    216          }
    217          
    218          #if ! defined(MBEDTLS_DEPRECATED_REMOVED)

   \                                 In section .text, align 2, keep-with-next
    219          int mbedtls_md_init_ctx( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info )
    220          {
   \                     mbedtls_md_init_ctx: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    221              return mbedtls_md_setup( ctx, md_info, 1 );
   \   00000006   0xD015             BEQ      ??mbedtls_md_init_ctx_0
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD013             BEQ      ??mbedtls_md_init_ctx_0
   \   0000000C   0x6A28             LDR      R0,[R5, #+32]
   \   0000000E   0x4780             BLX      R0
   \   00000010   0x6060             STR      R0,[R4, #+4]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD009             BEQ      ??mbedtls_md_init_ctx_1
   \   00000016   0x68E9             LDR      R1,[R5, #+12]
   \   00000018   0x2002             MOVS     R0,#+2
   \   0000001A   0x.... 0x....      BL       calloc
   \   0000001E   0x60A0             STR      R0,[R4, #+8]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD104             BNE      ??mbedtls_md_init_ctx_2
   \   00000024   0x6860             LDR      R0,[R4, #+4]
   \   00000026   0x6A69             LDR      R1,[R5, #+36]
   \   00000028   0x4788             BLX      R1
   \                     ??mbedtls_md_init_ctx_1: (+1)
   \   0000002A   0x....             LDR      R0,??DataTable19_1  ;; 0xffffae80
   \   0000002C   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??mbedtls_md_init_ctx_2: (+1)
   \   0000002E   0x6025             STR      R5,[R4, #+0]
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??mbedtls_md_init_ctx_0: (+1)
   \   00000034   0x....             LDR      R0,??DataTable19  ;; 0xffffaf00
   \   00000036   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    222          }
    223          #endif
    224          

   \                                 In section .text, align 2, keep-with-next
    225          int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
    226          {
   \                     mbedtls_md_setup: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0016             MOVS     R6,R2
    227              if( md_info == NULL || ctx == NULL )
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD001             BEQ      ??mbedtls_md_setup_0
   \   0000000C   0x2D00             CMP      R5,#+0
   \   0000000E   0xD101             BNE      ??mbedtls_md_setup_1
    228                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \                     ??mbedtls_md_setup_0: (+1)
   \   00000010   0x....             LDR      R0,??DataTable19  ;; 0xffffaf00
   \   00000012   0xBD70             POP      {R4-R6,PC}
    229          
    230              if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
   \                     ??mbedtls_md_setup_1: (+1)
   \   00000014   0x6A20             LDR      R0,[R4, #+32]
   \   00000016   0x4780             BLX      R0
   \   00000018   0x6068             STR      R0,[R5, #+4]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD00B             BEQ      ??mbedtls_md_setup_2
    231                  return( MBEDTLS_ERR_MD_ALLOC_FAILED );
    232          
    233              if( hmac != 0 )
   \   0000001E   0x2E00             CMP      R6,#+0
   \   00000020   0xD00B             BEQ      ??mbedtls_md_setup_3
    234              {
    235                  ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
   \   00000022   0x68E1             LDR      R1,[R4, #+12]
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0x.... 0x....      BL       calloc
   \   0000002A   0x60A8             STR      R0,[R5, #+8]
    236                  if( ctx->hmac_ctx == NULL )
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD104             BNE      ??mbedtls_md_setup_3
    237                  {
    238                      md_info->ctx_free_func( ctx->md_ctx );
   \   00000030   0x6868             LDR      R0,[R5, #+4]
   \   00000032   0x6A61             LDR      R1,[R4, #+36]
   \   00000034   0x4788             BLX      R1
    239                      return( MBEDTLS_ERR_MD_ALLOC_FAILED );
   \                     ??mbedtls_md_setup_2: (+1)
   \   00000036   0x....             LDR      R0,??DataTable19_1  ;; 0xffffae80
   \   00000038   0xBD70             POP      {R4-R6,PC}
    240                  }
    241              }
    242          
    243              ctx->md_info = md_info;
   \                     ??mbedtls_md_setup_3: (+1)
   \   0000003A   0x602C             STR      R4,[R5, #+0]
    244          
    245              return( 0 );
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xBD70             POP      {R4-R6,PC}       ;; return
    246          }
    247          

   \                                 In section .text, align 2, keep-with-next
    248          int mbedtls_md_starts( mbedtls_md_context_t *ctx )
    249          {
   \                     mbedtls_md_starts: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    250              if( ctx == NULL || ctx->md_info == NULL )
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD002             BEQ      ??mbedtls_md_starts_0
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD101             BNE      ??mbedtls_md_starts_1
    251                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \                     ??mbedtls_md_starts_0: (+1)
   \   0000000C   0x....             LDR      R0,??DataTable19  ;; 0xffffaf00
   \   0000000E   0xBD02             POP      {R1,PC}
    252          
    253              ctx->md_info->starts_func( ctx->md_ctx );
   \                     ??mbedtls_md_starts_1: (+1)
   \   00000010   0x6840             LDR      R0,[R0, #+4]
   \   00000012   0x6909             LDR      R1,[R1, #+16]
   \   00000014   0x4788             BLX      R1
    254          
    255              return( 0 );
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xBD02             POP      {R1,PC}          ;; return
    256          }
    257          

   \                                 In section .text, align 2, keep-with-next
    258          int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
    259          {
   \                     mbedtls_md_update: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    260              if( ctx == NULL || ctx->md_info == NULL )
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD002             BEQ      ??mbedtls_md_update_0
   \   00000006   0x6803             LDR      R3,[R0, #+0]
   \   00000008   0x2B00             CMP      R3,#+0
   \   0000000A   0xD101             BNE      ??mbedtls_md_update_1
    261                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \                     ??mbedtls_md_update_0: (+1)
   \   0000000C   0x....             LDR      R0,??DataTable19  ;; 0xffffaf00
   \   0000000E   0xBD02             POP      {R1,PC}
    262          
    263              ctx->md_info->update_func( ctx->md_ctx, input, ilen );
   \                     ??mbedtls_md_update_1: (+1)
   \   00000010   0x6840             LDR      R0,[R0, #+4]
   \   00000012   0x695B             LDR      R3,[R3, #+20]
   \   00000014   0x4798             BLX      R3
    264          
    265              return( 0 );
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xBD02             POP      {R1,PC}          ;; return
    266          }
    267          

   \                                 In section .text, align 2, keep-with-next
    268          int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
    269          {
   \                     mbedtls_md_finish: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    270              if( ctx == NULL || ctx->md_info == NULL )
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD002             BEQ      ??mbedtls_md_finish_0
   \   00000006   0x6802             LDR      R2,[R0, #+0]
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xD101             BNE      ??mbedtls_md_finish_1
    271                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \                     ??mbedtls_md_finish_0: (+1)
   \   0000000C   0x....             LDR      R0,??DataTable19  ;; 0xffffaf00
   \   0000000E   0xBD02             POP      {R1,PC}
    272          
    273              ctx->md_info->finish_func( ctx->md_ctx, output );
   \                     ??mbedtls_md_finish_1: (+1)
   \   00000010   0x6840             LDR      R0,[R0, #+4]
   \   00000012   0x6992             LDR      R2,[R2, #+24]
   \   00000014   0x4790             BLX      R2
    274          
    275              return( 0 );
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xBD02             POP      {R1,PC}          ;; return
    276          }
    277          

   \                                 In section .text, align 2, keep-with-next
    278          int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
    279                      unsigned char *output )
    280          {
   \                     mbedtls_md: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0008             MOVS     R0,R1
   \   00000006   0x0011             MOVS     R1,R2
   \   00000008   0x001A             MOVS     R2,R3
    281              if( md_info == NULL )
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD101             BNE      ??mbedtls_md_0
    282                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \   0000000E   0x....             LDR      R0,??DataTable19  ;; 0xffffaf00
   \   00000010   0xBD10             POP      {R4,PC}
    283          
    284              md_info->digest_func( input, ilen, output );
   \                     ??mbedtls_md_0: (+1)
   \   00000012   0x69E3             LDR      R3,[R4, #+28]
   \   00000014   0x4798             BLX      R3
    285          
    286              return( 0 );
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    287          }
    288          
    289          #if defined(MBEDTLS_FS_IO)
    290          int mbedtls_md_file( const mbedtls_md_info_t *md_info, const char *path, unsigned char *output )
    291          {
    292              int ret;
    293              FILE *f;
    294              size_t n;
    295              mbedtls_md_context_t ctx;
    296              unsigned char buf[1024];
    297          
    298              if( md_info == NULL )
    299                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
    300          
    301              if( ( f = fopen( path, "rb" ) ) == NULL )
    302                  return( MBEDTLS_ERR_MD_FILE_IO_ERROR );
    303          
    304              mbedtls_md_init( &ctx );
    305          
    306              if( ( ret = mbedtls_md_setup( &ctx, md_info, 0 ) ) != 0 )
    307                  goto cleanup;
    308          
    309              md_info->starts_func( ctx.md_ctx );
    310          
    311              while( ( n = fread( buf, 1, sizeof( buf ), f ) ) > 0 )
    312                  md_info->update_func( ctx.md_ctx, buf, n );
    313          
    314              if( ferror( f ) != 0 )
    315              {
    316                  ret = MBEDTLS_ERR_MD_FILE_IO_ERROR;
    317                  goto cleanup;
    318              }
    319          
    320              md_info->finish_func( ctx.md_ctx, output );
    321          
    322          cleanup:
    323              fclose( f );
    324              mbedtls_md_free( &ctx );
    325          
    326              return( ret );
    327          }
    328          #endif /* MBEDTLS_FS_IO */
    329          

   \                                 In section .text, align 2, keep-with-next
    330          int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
    331          {
   \                     mbedtls_md_hmac_starts: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB091             SUB      SP,SP,#+68
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    332              unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    333              unsigned char *ipad, *opad;
    334              size_t i;
    335          
    336              if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD005             BEQ      ??mbedtls_md_hmac_starts_0
   \   0000000E   0x6821             LDR      R1,[R4, #+0]
   \   00000010   0x2900             CMP      R1,#+0
   \   00000012   0xD002             BEQ      ??mbedtls_md_hmac_starts_0
   \   00000014   0x68A0             LDR      R0,[R4, #+8]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD101             BNE      ??mbedtls_md_hmac_starts_1
    337                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \                     ??mbedtls_md_hmac_starts_0: (+1)
   \   0000001A   0x....             LDR      R0,??DataTable19  ;; 0xffffaf00
   \   0000001C   0xE040             B        ??mbedtls_md_hmac_starts_2
    338          
    339              if( keylen > (size_t) ctx->md_info->block_size )
   \                     ??mbedtls_md_hmac_starts_1: (+1)
   \   0000001E   0x68C8             LDR      R0,[R1, #+12]
   \   00000020   0x42B0             CMP      R0,R6
   \   00000022   0xD210             BCS      ??mbedtls_md_hmac_starts_3
    340              {
    341                  ctx->md_info->starts_func( ctx->md_ctx );
   \   00000024   0x6860             LDR      R0,[R4, #+4]
   \   00000026   0x6909             LDR      R1,[R1, #+16]
   \   00000028   0x4788             BLX      R1
    342                  ctx->md_info->update_func( ctx->md_ctx, key, keylen );
   \   0000002A   0x0032             MOVS     R2,R6
   \   0000002C   0x0029             MOVS     R1,R5
   \   0000002E   0x6860             LDR      R0,[R4, #+4]
   \   00000030   0x6823             LDR      R3,[R4, #+0]
   \   00000032   0x695B             LDR      R3,[R3, #+20]
   \   00000034   0x4798             BLX      R3
    343                  ctx->md_info->finish_func( ctx->md_ctx, sum );
   \   00000036   0xA901             ADD      R1,SP,#+4
   \   00000038   0x6860             LDR      R0,[R4, #+4]
   \   0000003A   0x6822             LDR      R2,[R4, #+0]
   \   0000003C   0x6992             LDR      R2,[R2, #+24]
   \   0000003E   0x4790             BLX      R2
    344          
    345                  keylen = ctx->md_info->size;
   \   00000040   0x6820             LDR      R0,[R4, #+0]
   \   00000042   0x6886             LDR      R6,[R0, #+8]
    346                  key = sum;
   \   00000044   0xAD01             ADD      R5,SP,#+4
    347              }
    348          
    349              ipad = (unsigned char *) ctx->hmac_ctx;
   \                     ??mbedtls_md_hmac_starts_3: (+1)
   \   00000046   0x68A0             LDR      R0,[R4, #+8]
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x6821             LDR      R1,[R4, #+0]
   \   0000004C   0x68C9             LDR      R1,[R1, #+12]
   \   0000004E   0x1847             ADDS     R7,R0,R1
    350              opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
    351          
    352              memset( ipad, 0x36, ctx->md_info->block_size );
   \   00000050   0x2236             MOVS     R2,#+54
   \   00000052   0x.... 0x....      BL       __aeabi_memset
    353              memset( opad, 0x5C, ctx->md_info->block_size );
   \   00000056   0x225C             MOVS     R2,#+92
   \   00000058   0x6820             LDR      R0,[R4, #+0]
   \   0000005A   0x68C1             LDR      R1,[R0, #+12]
   \   0000005C   0x0038             MOVS     R0,R7
   \   0000005E   0x.... 0x....      BL       __aeabi_memset
    354          
    355              for( i = 0; i < keylen; i++ )
   \   00000062   0x2E00             CMP      R6,#+0
   \   00000064   0xD00D             BEQ      ??mbedtls_md_hmac_starts_4
   \   00000066   0x9800             LDR      R0,[SP, #+0]
    356              {
    357                  ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
   \                     ??mbedtls_md_hmac_starts_5: (+1)
   \   00000068   0x7801             LDRB     R1,[R0, #+0]
   \   0000006A   0x782A             LDRB     R2,[R5, #+0]
   \   0000006C   0x404A             EORS     R2,R2,R1
   \   0000006E   0x7002             STRB     R2,[R0, #+0]
    358                  opad[i] = (unsigned char)( opad[i] ^ key[i] );
   \   00000070   0x7839             LDRB     R1,[R7, #+0]
   \   00000072   0x782A             LDRB     R2,[R5, #+0]
   \   00000074   0x404A             EORS     R2,R2,R1
   \   00000076   0x703A             STRB     R2,[R7, #+0]
    359              }
   \   00000078   0x1C7F             ADDS     R7,R7,#+1
   \   0000007A   0x1C6D             ADDS     R5,R5,#+1
   \   0000007C   0x1C40             ADDS     R0,R0,#+1
   \   0000007E   0x1E76             SUBS     R6,R6,#+1
   \   00000080   0xD1F2             BNE      ??mbedtls_md_hmac_starts_5
    360          
    361              mbedtls_zeroize( sum, sizeof( sum ) );
   \                     ??mbedtls_md_hmac_starts_4: (+1)
   \   00000082   0x2140             MOVS     R1,#+64
   \   00000084   0xA801             ADD      R0,SP,#+4
   \   00000086   0x.... 0x....      BL       __aeabi_memclr4
    362          
    363              ctx->md_info->starts_func( ctx->md_ctx );
   \   0000008A   0x6860             LDR      R0,[R4, #+4]
   \   0000008C   0x6821             LDR      R1,[R4, #+0]
   \   0000008E   0x6909             LDR      R1,[R1, #+16]
   \   00000090   0x4788             BLX      R1
    364              ctx->md_info->update_func( ctx->md_ctx, ipad, ctx->md_info->block_size );
   \   00000092   0x6823             LDR      R3,[R4, #+0]
   \   00000094   0x68DA             LDR      R2,[R3, #+12]
   \   00000096   0x9900             LDR      R1,[SP, #+0]
   \   00000098   0x6860             LDR      R0,[R4, #+4]
   \   0000009A   0x695B             LDR      R3,[R3, #+20]
   \   0000009C   0x4798             BLX      R3
    365          
    366              return( 0 );
   \   0000009E   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_md_hmac_starts_2: (+1)
   \   000000A0   0xB011             ADD      SP,SP,#+68
   \   000000A2   0xBDF0             POP      {R4-R7,PC}       ;; return
    367          }
    368          

   \                                 In section .text, align 2, keep-with-next
    369          int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
    370          {
   \                     mbedtls_md_hmac_update: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    371              if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD005             BEQ      ??mbedtls_md_hmac_update_0
   \   00000006   0x6803             LDR      R3,[R0, #+0]
   \   00000008   0x2B00             CMP      R3,#+0
   \   0000000A   0xD002             BEQ      ??mbedtls_md_hmac_update_0
   \   0000000C   0x6884             LDR      R4,[R0, #+8]
   \   0000000E   0x2C00             CMP      R4,#+0
   \   00000010   0xD101             BNE      ??mbedtls_md_hmac_update_1
    372                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \                     ??mbedtls_md_hmac_update_0: (+1)
   \   00000012   0x....             LDR      R0,??DataTable19  ;; 0xffffaf00
   \   00000014   0xBD10             POP      {R4,PC}
    373          
    374              ctx->md_info->update_func( ctx->md_ctx, input, ilen );
   \                     ??mbedtls_md_hmac_update_1: (+1)
   \   00000016   0x6840             LDR      R0,[R0, #+4]
   \   00000018   0x695B             LDR      R3,[R3, #+20]
   \   0000001A   0x4798             BLX      R3
    375          
    376              return( 0 );
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
    377          }
    378          

   \                                 In section .text, align 2, keep-with-next
    379          int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
    380          {
   \                     mbedtls_md_hmac_finish: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB090             SUB      SP,SP,#+64
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    381              unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    382              unsigned char *opad;
    383          
    384              if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD005             BEQ      ??mbedtls_md_hmac_finish_0
   \   0000000C   0x6822             LDR      R2,[R4, #+0]
   \   0000000E   0x2A00             CMP      R2,#+0
   \   00000010   0xD002             BEQ      ??mbedtls_md_hmac_finish_0
   \   00000012   0x68A0             LDR      R0,[R4, #+8]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD101             BNE      ??mbedtls_md_hmac_finish_1
    385                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \                     ??mbedtls_md_hmac_finish_0: (+1)
   \   00000018   0x....             LDR      R0,??DataTable19  ;; 0xffffaf00
   \   0000001A   0xE01B             B        ??mbedtls_md_hmac_finish_2
    386          
    387              opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
   \                     ??mbedtls_md_hmac_finish_1: (+1)
   \   0000001C   0x68D1             LDR      R1,[R2, #+12]
   \   0000001E   0x1846             ADDS     R6,R0,R1
    388          
    389              ctx->md_info->finish_func( ctx->md_ctx, tmp );
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x6860             LDR      R0,[R4, #+4]
   \   00000024   0x6992             LDR      R2,[R2, #+24]
   \   00000026   0x4790             BLX      R2
    390              ctx->md_info->starts_func( ctx->md_ctx );
   \   00000028   0x6860             LDR      R0,[R4, #+4]
   \   0000002A   0x6821             LDR      R1,[R4, #+0]
   \   0000002C   0x6909             LDR      R1,[R1, #+16]
   \   0000002E   0x4788             BLX      R1
    391              ctx->md_info->update_func( ctx->md_ctx, opad, ctx->md_info->block_size );
   \   00000030   0x6823             LDR      R3,[R4, #+0]
   \   00000032   0x68DA             LDR      R2,[R3, #+12]
   \   00000034   0x0031             MOVS     R1,R6
   \   00000036   0x6860             LDR      R0,[R4, #+4]
   \   00000038   0x695B             LDR      R3,[R3, #+20]
   \   0000003A   0x4798             BLX      R3
    392              ctx->md_info->update_func( ctx->md_ctx, tmp, ctx->md_info->size );
   \   0000003C   0x6823             LDR      R3,[R4, #+0]
   \   0000003E   0x689A             LDR      R2,[R3, #+8]
   \   00000040   0x4669             MOV      R1,SP
   \   00000042   0x6860             LDR      R0,[R4, #+4]
   \   00000044   0x695B             LDR      R3,[R3, #+20]
   \   00000046   0x4798             BLX      R3
    393              ctx->md_info->finish_func( ctx->md_ctx, output );
   \   00000048   0x0029             MOVS     R1,R5
   \   0000004A   0x6860             LDR      R0,[R4, #+4]
   \   0000004C   0x6822             LDR      R2,[R4, #+0]
   \   0000004E   0x6992             LDR      R2,[R2, #+24]
   \   00000050   0x4790             BLX      R2
    394          
    395              return( 0 );
   \   00000052   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_md_hmac_finish_2: (+1)
   \   00000054   0xB010             ADD      SP,SP,#+64
   \   00000056   0xBD70             POP      {R4-R6,PC}       ;; return
    396          }
    397          

   \                                 In section .text, align 2, keep-with-next
    398          int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
    399          {
   \                     mbedtls_md_hmac_reset: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    400              unsigned char *ipad;
    401          
    402              if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
   \   00000004   0xD005             BEQ      ??mbedtls_md_hmac_reset_0
   \   00000006   0x6821             LDR      R1,[R4, #+0]
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD002             BEQ      ??mbedtls_md_hmac_reset_0
   \   0000000C   0x68A5             LDR      R5,[R4, #+8]
   \   0000000E   0x2D00             CMP      R5,#+0
   \   00000010   0xD101             BNE      ??mbedtls_md_hmac_reset_1
    403                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \                     ??mbedtls_md_hmac_reset_0: (+1)
   \   00000012   0x....             LDR      R0,??DataTable19  ;; 0xffffaf00
   \   00000014   0xBD32             POP      {R1,R4,R5,PC}
    404          
    405              ipad = (unsigned char *) ctx->hmac_ctx;
    406          
    407              ctx->md_info->starts_func( ctx->md_ctx );
   \                     ??mbedtls_md_hmac_reset_1: (+1)
   \   00000016   0x6860             LDR      R0,[R4, #+4]
   \   00000018   0x6909             LDR      R1,[R1, #+16]
   \   0000001A   0x4788             BLX      R1
    408              ctx->md_info->update_func( ctx->md_ctx, ipad, ctx->md_info->block_size );
   \   0000001C   0x6823             LDR      R3,[R4, #+0]
   \   0000001E   0x68DA             LDR      R2,[R3, #+12]
   \   00000020   0x0029             MOVS     R1,R5
   \   00000022   0x6860             LDR      R0,[R4, #+4]
   \   00000024   0x695B             LDR      R3,[R3, #+20]
   \   00000026   0x4798             BLX      R3
    409          
    410              return( 0 );
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    411          }
    412          

   \                                 In section .text, align 2, keep-with-next
    413          int mbedtls_md_hmac( const mbedtls_md_info_t *md_info, const unsigned char *key, size_t keylen,
    414                          const unsigned char *input, size_t ilen,
    415                          unsigned char *output )
    416          {
   \                     mbedtls_md_hmac: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0017             MOVS     R7,R2
   \   0000000A   0x001E             MOVS     R6,R3
    417              mbedtls_md_context_t ctx;
    418              int ret;
    419          
    420              if( md_info == NULL )
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD101             BNE      ??mbedtls_md_hmac_0
    421                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \   00000010   0x....             LDR      R0,??DataTable19  ;; 0xffffaf00
   \   00000012   0xE014             B        ??mbedtls_md_hmac_1
    422          
    423              mbedtls_md_init( &ctx );
   \                     ??mbedtls_md_hmac_0: (+1)
   \   00000014   0x4668             MOV      R0,SP
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x2300             MOVS     R3,#+0
   \   0000001C   0xC00E             STM      R0!,{R1-R3}
    424          
    425              if( ( ret = mbedtls_md_setup( &ctx, md_info, 1 ) ) != 0 )
   \   0000001E   0x6A20             LDR      R0,[R4, #+32]
   \   00000020   0x4780             BLX      R0
   \   00000022   0x9001             STR      R0,[SP, #+4]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD009             BEQ      ??mbedtls_md_hmac_2
   \   00000028   0x68E1             LDR      R1,[R4, #+12]
   \   0000002A   0x2002             MOVS     R0,#+2
   \   0000002C   0x.... 0x....      BL       calloc
   \   00000030   0x9002             STR      R0,[SP, #+8]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD105             BNE      ??mbedtls_md_hmac_3
   \   00000036   0x9801             LDR      R0,[SP, #+4]
   \   00000038   0x6A61             LDR      R1,[R4, #+36]
   \   0000003A   0x4788             BLX      R1
    426                  return( ret );
   \                     ??mbedtls_md_hmac_2: (+1)
   \   0000003C   0x....             LDR      R0,??DataTable19_1  ;; 0xffffae80
   \                     ??mbedtls_md_hmac_1: (+1)
   \   0000003E   0xB003             ADD      SP,SP,#+12
   \   00000040   0xBDF0             POP      {R4-R7,PC}       ;; return
   \                     ??mbedtls_md_hmac_3: (+1)
   \   00000042   0x9400             STR      R4,[SP, #+0]
    427          
    428              mbedtls_md_hmac_starts( &ctx, key, keylen );
   \   00000044   0x003A             MOVS     R2,R7
   \   00000046   0x0029             MOVS     R1,R5
   \   00000048   0x4668             MOV      R0,SP
   \   0000004A   0x.... 0x....      BL       mbedtls_md_hmac_starts
    429              mbedtls_md_hmac_update( &ctx, input, ilen );
   \   0000004E   0x9A08             LDR      R2,[SP, #+32]
   \   00000050   0x0031             MOVS     R1,R6
   \   00000052   0x4668             MOV      R0,SP
   \   00000054   0x.... 0x....      BL       mbedtls_md_hmac_update
    430              mbedtls_md_hmac_finish( &ctx, output );
   \   00000058   0x9909             LDR      R1,[SP, #+36]
   \   0000005A   0x4668             MOV      R0,SP
   \   0000005C   0x.... 0x....      BL       mbedtls_md_hmac_finish
    431          
    432              mbedtls_md_free( &ctx );
   \   00000060   0x4668             MOV      R0,SP
   \   00000062   0x.... 0x....      BL       mbedtls_md_free
    433          
    434              return( 0 );
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0xE7E9             B        ??mbedtls_md_hmac_1
    435          }
    436          

   \                                 In section .text, align 2, keep-with-next
    437          int mbedtls_md_process( mbedtls_md_context_t *ctx, const unsigned char *data )
    438          {
   \                     mbedtls_md_process: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    439              if( ctx == NULL || ctx->md_info == NULL )
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD002             BEQ      ??mbedtls_md_process_0
   \   00000006   0x6802             LDR      R2,[R0, #+0]
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xD101             BNE      ??mbedtls_md_process_1
    440                  return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
   \                     ??mbedtls_md_process_0: (+1)
   \   0000000C   0x....             LDR      R0,??DataTable19  ;; 0xffffaf00
   \   0000000E   0xBD02             POP      {R1,PC}
    441          
    442              ctx->md_info->process_func( ctx->md_ctx, data );
   \                     ??mbedtls_md_process_1: (+1)
   \   00000010   0x6840             LDR      R0,[R0, #+4]
   \   00000012   0x6AD2             LDR      R2,[R2, #+44]
   \   00000014   0x4790             BLX      R2
    443          
    444              return( 0 );
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xBD02             POP      {R1,PC}          ;; return
    445          }
    446          

   \                                 In section .text, align 2, keep-with-next
    447          unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
    448          {
    449              if( md_info == NULL )
   \                     mbedtls_md_get_size: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??mbedtls_md_get_size_0
    450                  return( 0 );
    451          
    452              return md_info->size;
   \   00000004   0x6880             LDR      R0,[R0, #+8]
   \   00000006   0xB2C0             UXTB     R0,R0
   \                     ??mbedtls_md_get_size_0: (+1)
   \   00000008   0x4770             BX       LR               ;; return
    453          }
    454          

   \                                 In section .text, align 2, keep-with-next
    455          mbedtls_md_type_t mbedtls_md_get_type( const mbedtls_md_info_t *md_info )
    456          {
    457              if( md_info == NULL )
   \                     mbedtls_md_get_type: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD000             BEQ      ??mbedtls_md_get_type_0
    458                  return( MBEDTLS_MD_NONE );
    459          
    460              return md_info->type;
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \                     ??mbedtls_md_get_type_0: (+1)
   \   00000006   0x4770             BX       LR               ;; return
    461          }
    462          

   \                                 In section .text, align 2, keep-with-next
    463          const char *mbedtls_md_get_name( const mbedtls_md_info_t *md_info )
    464          {
    465              if( md_info == NULL )
   \                     mbedtls_md_get_name: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD000             BEQ      ??mbedtls_md_get_name_0
    466                  return( NULL );
    467          
    468              return md_info->name;
   \   00000004   0x6840             LDR      R0,[R0, #+4]
   \                     ??mbedtls_md_get_name_0: (+1)
   \   00000006   0x4770             BX       LR               ;; return
    469          }

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x53 0x48          DC8 "SHA224"
   \              0x41 0x32    
   \              0x32 0x34    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x53 0x48          DC8 "SHA256"
   \              0x41 0x32    
   \              0x35 0x36    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x53 0x48          DC8 "SHA384"
   \              0x41 0x33    
   \              0x38 0x34    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x53 0x48          DC8 "SHA512"
   \              0x41 0x35    
   \              0x31 0x32    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x........         DC32     mbedtls_sha224_info

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   0x........         DC32     mbedtls_sha256_info

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \   00000000   0x........         DC32     mbedtls_sha384_info

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x........         DC32     mbedtls_sha512_info

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0xFFFFAF00         DC32     0xffffaf00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_1:
   \   00000000   0xFFFFAE80         DC32     0xffffae80
    470          
    471          #endif /* MBEDTLS_MD_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   mbedtls_md
         8   -- Indirect call
       8   mbedtls_md_clone
         8   -- Indirect call
       8   mbedtls_md_finish
         8   -- Indirect call
       8   mbedtls_md_free
         8   -- Indirect call
         8   -> __aeabi_memclr
         8   -> free
       0   mbedtls_md_get_name
       0   mbedtls_md_get_size
       0   mbedtls_md_get_type
      32   mbedtls_md_hmac
        32   -- Indirect call
        32   -> calloc
        32   -> mbedtls_md_free
        32   -> mbedtls_md_hmac_finish
        32   -> mbedtls_md_hmac_starts
        32   -> mbedtls_md_hmac_update
      80   mbedtls_md_hmac_finish
        80   -- Indirect call
      16   mbedtls_md_hmac_reset
        16   -- Indirect call
      88   mbedtls_md_hmac_starts
        88   -- Indirect call
        88   -> __aeabi_memclr4
        88   -> __aeabi_memset
       8   mbedtls_md_hmac_update
         8   -- Indirect call
       8   mbedtls_md_info_from_string
         8   -> strcmp
       0   mbedtls_md_info_from_type
       0   mbedtls_md_init
      16   mbedtls_md_init_ctx
        16   -- Indirect call
        16   -> calloc
       0   mbedtls_md_list
       8   mbedtls_md_process
         8   -- Indirect call
      16   mbedtls_md_setup
        16   -- Indirect call
        16   -> calloc
       8   mbedtls_md_starts
         8   -- Indirect call
       8   mbedtls_md_update
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_2
       4  ??DataTable16
       4  ??DataTable19
       4  ??DataTable19_1
       8  ?_0
       8  ?_1
       8  ?_2
       8  ?_3
      26  mbedtls_md
      42  mbedtls_md_clone
      26  mbedtls_md_finish
      56  mbedtls_md_free
       8  mbedtls_md_get_name
      10  mbedtls_md_get_size
       8  mbedtls_md_get_type
     106  mbedtls_md_hmac
      88  mbedtls_md_hmac_finish
      44  mbedtls_md_hmac_reset
     164  mbedtls_md_hmac_starts
      32  mbedtls_md_hmac_update
      74  mbedtls_md_info_from_string
      38  mbedtls_md_info_from_type
      10  mbedtls_md_init
      56  mbedtls_md_init_ctx
       4  mbedtls_md_list
      26  mbedtls_md_process
      64  mbedtls_md_setup
      26  mbedtls_md_starts
      26  mbedtls_md_update
      20  supported_digests

 
 1 010 bytes in section .text
 
 1 010 bytes of CODE memory

Errors: none
Warnings: none
