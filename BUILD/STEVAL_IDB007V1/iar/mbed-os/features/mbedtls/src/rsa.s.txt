###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:34
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\features\mbedtls\src\rsa.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\rsa.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\rsa.s.txt -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\rsa.o
#        .\mbed-os\features\mbedtls\src\rsa.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\rsa.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\features\mbedtls\src\rsa.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\features\mbedtls\src\rsa.c
      1          /*
      2           *  The RSA public-key cryptosystem
      3           *
      4           *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
      5           *  SPDX-License-Identifier: Apache-2.0
      6           *
      7           *  Licensed under the Apache License, Version 2.0 (the "License"); you may
      8           *  not use this file except in compliance with the License.
      9           *  You may obtain a copy of the License at
     10           *
     11           *  http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           *  Unless required by applicable law or agreed to in writing, software
     14           *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     15           *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           *  See the License for the specific language governing permissions and
     17           *  limitations under the License.
     18           *
     19           *  This file is part of mbed TLS (https://tls.mbed.org)
     20           */
     21          /*
     22           *  The following sources were referenced in the design of this implementation
     23           *  of the RSA algorithm:
     24           *
     25           *  [1] A method for obtaining digital signatures and public-key cryptosystems
     26           *      R Rivest, A Shamir, and L Adleman
     27           *      http://people.csail.mit.edu/rivest/pubs.html#RSA78
     28           *
     29           *  [2] Handbook of Applied Cryptography - 1997, Chapter 8
     30           *      Menezes, van Oorschot and Vanstone
     31           *
     32           *  [3] Malware Guard Extension: Using SGX to Conceal Cache Attacks
     33           *      Michael Schwarz, Samuel Weiser, Daniel Gruss, Cl√©mentine Maurice and
     34           *      Stefan Mangard
     35           *      https://arxiv.org/abs/1702.08719v2
     36           *
     37           */
     38          
     39          #if !defined(MBEDTLS_CONFIG_FILE)
     40          #include "mbedtls/config.h"
     41          #else
     42          #include MBEDTLS_CONFIG_FILE
     43          #endif
     44          
     45          #if defined(MBEDTLS_RSA_C)
     46          
     47          #include "mbedtls/rsa.h"
     48          #include "mbedtls/oid.h"
     49          
     50          #include <string.h>
     51          
     52          #if defined(MBEDTLS_PKCS1_V21)
     53          #include "mbedtls/md.h"
     54          #endif
     55          
     56          #if defined(MBEDTLS_PKCS1_V15) && !defined(__OpenBSD__)
     57          #include <stdlib.h>
     58          #endif
     59          
     60          #if defined(MBEDTLS_PLATFORM_C)
     61          #include "mbedtls/platform.h"
     62          #else
     63          #include <stdio.h>
     64          #define mbedtls_printf printf
     65          #define mbedtls_calloc calloc
     66          #define mbedtls_free   free
     67          #endif
     68          
     69          /* Implementation that should never be optimized out by the compiler */
     70          static void mbedtls_zeroize( void *v, size_t n ) {
     71              volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
     72          }
     73          
     74          /*
     75           * Initialize an RSA context
     76           */

   \                                 In section .text, align 2, keep-with-next
     77          void mbedtls_rsa_init( mbedtls_rsa_context *ctx,
     78                         int padding,
     79                         int hash_id )
     80          {
   \                     mbedtls_rsa_init: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     81              memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
   \   00000008   0x21AC             MOVS     R1,#+172
   \   0000000A   0x.... 0x....      BL       __aeabi_memclr4
     82          
     83              mbedtls_rsa_set_padding( ctx, padding, hash_id );
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x30A4             ADDS     R0,R0,#+164
   \   00000012   0x6005             STR      R5,[R0, #+0]
   \   00000014   0x6046             STR      R6,[R0, #+4]
     84          
     85          #if defined(MBEDTLS_THREADING_C)
     86              mbedtls_mutex_init( &ctx->mutex );
     87          #endif
     88          }
   \   00000016   0xBD70             POP      {R4-R6,PC}       ;; return
     89          
     90          /*
     91           * Set padding for an existing RSA context
     92           */

   \                                 In section .text, align 2, keep-with-next
     93          void mbedtls_rsa_set_padding( mbedtls_rsa_context *ctx, int padding, int hash_id )
     94          {
     95              ctx->padding = padding;
   \                     mbedtls_rsa_set_padding: (+1)
   \   00000000   0x30A4             ADDS     R0,R0,#+164
   \   00000002   0x6001             STR      R1,[R0, #+0]
     96              ctx->hash_id = hash_id;
   \   00000004   0x6042             STR      R2,[R0, #+4]
     97          }
   \   00000006   0x4770             BX       LR               ;; return
     98          
     99          #if defined(MBEDTLS_GENPRIME)
    100          
    101          /*
    102           * Generate an RSA keypair
    103           */
    104          int mbedtls_rsa_gen_key( mbedtls_rsa_context *ctx,
    105                           int (*f_rng)(void *, unsigned char *, size_t),
    106                           void *p_rng,
    107                           unsigned int nbits, int exponent )
    108          {
    109              int ret;
    110              mbedtls_mpi P1, Q1, H, G;
    111          
    112              if( f_rng == NULL || nbits < 128 || exponent < 3 )
    113                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    114          
    115              if( nbits % 2 )
    116                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    117          
    118              mbedtls_mpi_init( &P1 ); mbedtls_mpi_init( &Q1 );
    119              mbedtls_mpi_init( &H ); mbedtls_mpi_init( &G );
    120          
    121              /*
    122               * find primes P and Q with Q < P so that:
    123               * GCD( E, (P-1)*(Q-1) ) == 1
    124               */
    125              MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &ctx->E, exponent ) );
    126          
    127              do
    128              {
    129                  MBEDTLS_MPI_CHK( mbedtls_mpi_gen_prime( &ctx->P, nbits >> 1, 0,
    130                                          f_rng, p_rng ) );
    131          
    132                  MBEDTLS_MPI_CHK( mbedtls_mpi_gen_prime( &ctx->Q, nbits >> 1, 0,
    133                                          f_rng, p_rng ) );
    134          
    135                  if( mbedtls_mpi_cmp_mpi( &ctx->P, &ctx->Q ) == 0 )
    136                      continue;
    137          
    138                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P, &ctx->Q ) );
    139                  if( mbedtls_mpi_bitlen( &ctx->N ) != nbits )
    140                      continue;
    141          
    142                  if( mbedtls_mpi_cmp_mpi( &ctx->P, &ctx->Q ) < 0 )
    143                                          mbedtls_mpi_swap( &ctx->P, &ctx->Q );
    144          
    145                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
    146                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
    147                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &H, &P1, &Q1 ) );
    148                  MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, &ctx->E, &H  ) );
    149              }
    150              while( mbedtls_mpi_cmp_int( &G, 1 ) != 0 );
    151          
    152              /*
    153               * D  = E^-1 mod ((P-1)*(Q-1))
    154               * DP = D mod (P - 1)
    155               * DQ = D mod (Q - 1)
    156               * QP = Q^-1 mod P
    157               */
    158              MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->D , &ctx->E, &H  ) );
    159              MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->DP, &ctx->D, &P1 ) );
    160              MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->DQ, &ctx->D, &Q1 ) );
    161              MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->QP, &ctx->Q, &ctx->P ) );
    162          
    163              ctx->len = ( mbedtls_mpi_bitlen( &ctx->N ) + 7 ) >> 3;
    164          
    165          cleanup:
    166          
    167              mbedtls_mpi_free( &P1 ); mbedtls_mpi_free( &Q1 ); mbedtls_mpi_free( &H ); mbedtls_mpi_free( &G );
    168          
    169              if( ret != 0 )
    170              {
    171                  mbedtls_rsa_free( ctx );
    172                  return( MBEDTLS_ERR_RSA_KEY_GEN_FAILED + ret );
    173              }
    174          
    175              return( 0 );
    176          }
    177          
    178          #endif /* MBEDTLS_GENPRIME */
    179          
    180          /*
    181           * Check a public RSA key
    182           */

   \                                 In section .text, align 2, keep-with-next
    183          int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
    184          {
   \                     mbedtls_rsa_check_pubkey: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    185              if( !ctx->N.p || !ctx->E.p )
   \   00000004   0x6920             LDR      R0,[R4, #+16]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD024             BEQ      ??mbedtls_rsa_check_pubkey_0
   \   0000000A   0x69E1             LDR      R1,[R4, #+28]
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD021             BEQ      ??mbedtls_rsa_check_pubkey_0
    186                  return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    187          
    188              if( ( ctx->N.p[0] & 1 ) == 0 ||
    189                  ( ctx->E.p[0] & 1 ) == 0 )
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x4010             ANDS     R0,R0,R2
   \   00000016   0xD01D             BEQ      ??mbedtls_rsa_check_pubkey_0
   \   00000018   0x6808             LDR      R0,[R1, #+0]
   \   0000001A   0x4002             ANDS     R2,R2,R0
   \   0000001C   0xD01A             BEQ      ??mbedtls_rsa_check_pubkey_0
    190                  return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    191          
    192              if( mbedtls_mpi_bitlen( &ctx->N ) < 128 ||
    193                  mbedtls_mpi_bitlen( &ctx->N ) > MBEDTLS_MPI_MAX_BITS )
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x3008             ADDS     R0,R0,#+8
   \   00000022   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   00000026   0x2880             CMP      R0,#+128
   \   00000028   0xD314             BCC      ??mbedtls_rsa_check_pubkey_0
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x3008             ADDS     R0,R0,#+8
   \   0000002E   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   00000032   0x....             LDR      R1,??DataTable17  ;; 0x2001
   \   00000034   0x4288             CMP      R0,R1
   \   00000036   0xD20D             BCS      ??mbedtls_rsa_check_pubkey_0
    194                  return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    195          
    196              if( mbedtls_mpi_bitlen( &ctx->E ) < 2 ||
    197                  mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0x3014             ADDS     R0,R0,#+20
   \   0000003C   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   00000040   0x2802             CMP      R0,#+2
   \   00000042   0xD307             BCC      ??mbedtls_rsa_check_pubkey_0
   \   00000044   0x0021             MOVS     R1,R4
   \   00000046   0x3108             ADDS     R1,R1,#+8
   \   00000048   0x0020             MOVS     R0,R4
   \   0000004A   0x3014             ADDS     R0,R0,#+20
   \   0000004C   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD401             BMI      ??mbedtls_rsa_check_pubkey_1
    198                  return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   \                     ??mbedtls_rsa_check_pubkey_0: (+1)
   \   00000054   0x....             LDR      R0,??DataTable17_1  ;; 0xffffbe00
   \   00000056   0xBD10             POP      {R4,PC}
    199          
    200              return( 0 );
   \                     ??mbedtls_rsa_check_pubkey_1: (+1)
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0xBD10             POP      {R4,PC}          ;; return
    201          }
    202          
    203          /*
    204           * Check a private RSA key
    205           */

   \                                 In section .text, align 2, keep-with-next
    206          int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
    207          {
   \                     mbedtls_rsa_check_privkey: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB0A7             SUB      SP,SP,#+156
   \   00000004   0x0004             MOVS     R4,R0
    208              int ret;
    209              mbedtls_mpi PQ, DE, P1, Q1, H, I, G, G2, L1, L2, DP, DQ, QP;
    210          
    211              if( ( ret = mbedtls_rsa_check_pubkey( ctx ) ) != 0 )
   \   00000006   0x6920             LDR      R0,[R4, #+16]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD027             BEQ      ??mbedtls_rsa_check_privkey_0
   \   0000000C   0x69E1             LDR      R1,[R4, #+28]
   \   0000000E   0x2900             CMP      R1,#+0
   \   00000010   0xD024             BEQ      ??mbedtls_rsa_check_privkey_0
   \   00000012   0x2201             MOVS     R2,#+1
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x4010             ANDS     R0,R0,R2
   \   00000018   0xD020             BEQ      ??mbedtls_rsa_check_privkey_0
   \   0000001A   0x6808             LDR      R0,[R1, #+0]
   \   0000001C   0x4002             ANDS     R2,R2,R0
   \   0000001E   0xD01D             BEQ      ??mbedtls_rsa_check_privkey_0
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x3008             ADDS     R0,R0,#+8
   \   00000024   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   00000028   0x2880             CMP      R0,#+128
   \   0000002A   0xD317             BCC      ??mbedtls_rsa_check_privkey_0
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x3008             ADDS     R0,R0,#+8
   \   00000030   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   00000034   0x....             LDR      R1,??DataTable17  ;; 0x2001
   \   00000036   0x4288             CMP      R0,R1
   \   00000038   0xD210             BCS      ??mbedtls_rsa_check_privkey_0
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x3014             ADDS     R0,R0,#+20
   \   0000003E   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   00000042   0x2802             CMP      R0,#+2
   \   00000044   0xD30A             BCC      ??mbedtls_rsa_check_privkey_0
   \   00000046   0x0021             MOVS     R1,R4
   \   00000048   0x3108             ADDS     R1,R1,#+8
   \   0000004A   0x0020             MOVS     R0,R4
   \   0000004C   0x3014             ADDS     R0,R0,#+20
   \   0000004E   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD502             BPL      ??mbedtls_rsa_check_privkey_0
    212                  return( ret );
    213          
    214              if( !ctx->P.p || !ctx->Q.p || !ctx->D.p )
   \   00000056   0x6B60             LDR      R0,[R4, #+52]
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD101             BNE      ??mbedtls_rsa_check_privkey_1
   \                     ??mbedtls_rsa_check_privkey_0: (+1)
   \   0000005C   0x....             LDR      R0,??DataTable17_1  ;; 0xffffbe00
   \   0000005E   0xE0EC             B        ??mbedtls_rsa_check_privkey_2
   \                     ??mbedtls_rsa_check_privkey_1: (+1)
   \   00000060   0x6C20             LDR      R0,[R4, #+64]
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD0FA             BEQ      ??mbedtls_rsa_check_privkey_0
   \   00000066   0x6AA0             LDR      R0,[R4, #+40]
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD0F7             BEQ      ??mbedtls_rsa_check_privkey_0
    215                  return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    216          
    217              mbedtls_mpi_init( &PQ ); mbedtls_mpi_init( &DE ); mbedtls_mpi_init( &P1 ); mbedtls_mpi_init( &Q1 );
   \   0000006C   0xA824             ADD      R0,SP,#+144
   \   0000006E   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000072   0xA821             ADD      R0,SP,#+132
   \   00000074   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000078   0xA806             ADD      R0,SP,#+24
   \   0000007A   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000007E   0xA803             ADD      R0,SP,#+12
   \   00000080   0x.... 0x....      BL       mbedtls_mpi_init
    218              mbedtls_mpi_init( &H  ); mbedtls_mpi_init( &I  ); mbedtls_mpi_init( &G  ); mbedtls_mpi_init( &G2 );
   \   00000084   0x4668             MOV      R0,SP
   \   00000086   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000008A   0xA81E             ADD      R0,SP,#+120
   \   0000008C   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000090   0xA81B             ADD      R0,SP,#+108
   \   00000092   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000096   0xA818             ADD      R0,SP,#+96
   \   00000098   0x.... 0x....      BL       mbedtls_mpi_init
    219              mbedtls_mpi_init( &L1 ); mbedtls_mpi_init( &L2 ); mbedtls_mpi_init( &DP ); mbedtls_mpi_init( &DQ );
   \   0000009C   0xA815             ADD      R0,SP,#+84
   \   0000009E   0x.... 0x....      BL       mbedtls_mpi_init
   \   000000A2   0xA812             ADD      R0,SP,#+72
   \   000000A4   0x.... 0x....      BL       mbedtls_mpi_init
   \   000000A8   0xA80F             ADD      R0,SP,#+60
   \   000000AA   0x.... 0x....      BL       mbedtls_mpi_init
   \   000000AE   0xA80C             ADD      R0,SP,#+48
   \   000000B0   0x.... 0x....      BL       mbedtls_mpi_init
    220              mbedtls_mpi_init( &QP );
   \   000000B4   0xA809             ADD      R0,SP,#+36
   \   000000B6   0x.... 0x....      BL       mbedtls_mpi_init
    221          
    222              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &PQ, &ctx->P, &ctx->Q ) );
   \   000000BA   0x0022             MOVS     R2,R4
   \   000000BC   0x3238             ADDS     R2,R2,#+56
   \   000000BE   0x0021             MOVS     R1,R4
   \   000000C0   0x312C             ADDS     R1,R1,#+44
   \   000000C2   0xA824             ADD      R0,SP,#+144
   \   000000C4   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000000C8   0x0005             MOVS     R5,R0
   \   000000CA   0xD000             BEQ      .+4
   \   000000CC   0xE085             B        ??mbedtls_rsa_check_privkey_3
    223              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DE, &ctx->D, &ctx->E ) );
   \   000000CE   0x0022             MOVS     R2,R4
   \   000000D0   0x3214             ADDS     R2,R2,#+20
   \   000000D2   0x0021             MOVS     R1,R4
   \   000000D4   0x3120             ADDS     R1,R1,#+32
   \   000000D6   0xA821             ADD      R0,SP,#+132
   \   000000D8   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000000DC   0x0005             MOVS     R5,R0
   \   000000DE   0xD17C             BNE      ??mbedtls_rsa_check_privkey_3
    224              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
   \   000000E0   0x2201             MOVS     R2,#+1
   \   000000E2   0x0021             MOVS     R1,R4
   \   000000E4   0x312C             ADDS     R1,R1,#+44
   \   000000E6   0xA806             ADD      R0,SP,#+24
   \   000000E8   0x.... 0x....      BL       mbedtls_mpi_sub_int
   \   000000EC   0x0005             MOVS     R5,R0
   \   000000EE   0xD174             BNE      ??mbedtls_rsa_check_privkey_3
    225              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
   \   000000F0   0x2201             MOVS     R2,#+1
   \   000000F2   0x0021             MOVS     R1,R4
   \   000000F4   0x3138             ADDS     R1,R1,#+56
   \   000000F6   0xA803             ADD      R0,SP,#+12
   \   000000F8   0x.... 0x....      BL       mbedtls_mpi_sub_int
   \   000000FC   0x0005             MOVS     R5,R0
   \   000000FE   0xD16C             BNE      ??mbedtls_rsa_check_privkey_3
    226              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &H, &P1, &Q1 ) );
   \   00000100   0xAA03             ADD      R2,SP,#+12
   \   00000102   0xA906             ADD      R1,SP,#+24
   \   00000104   0x4668             MOV      R0,SP
   \   00000106   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000010A   0x0005             MOVS     R5,R0
   \   0000010C   0xD165             BNE      ??mbedtls_rsa_check_privkey_3
    227              MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, &ctx->E, &H  ) );
   \   0000010E   0x466A             MOV      R2,SP
   \   00000110   0x0021             MOVS     R1,R4
   \   00000112   0x3114             ADDS     R1,R1,#+20
   \   00000114   0xA81B             ADD      R0,SP,#+108
   \   00000116   0x.... 0x....      BL       mbedtls_mpi_gcd
   \   0000011A   0x0005             MOVS     R5,R0
   \   0000011C   0xD15D             BNE      ??mbedtls_rsa_check_privkey_3
    228          
    229              MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G2, &P1, &Q1 ) );
   \   0000011E   0xAA03             ADD      R2,SP,#+12
   \   00000120   0xA906             ADD      R1,SP,#+24
   \   00000122   0xA818             ADD      R0,SP,#+96
   \   00000124   0x.... 0x....      BL       mbedtls_mpi_gcd
   \   00000128   0x0005             MOVS     R5,R0
   \   0000012A   0xD156             BNE      ??mbedtls_rsa_check_privkey_3
    230              MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &L1, &L2, &H, &G2 ) );
   \   0000012C   0xAB18             ADD      R3,SP,#+96
   \   0000012E   0x466A             MOV      R2,SP
   \   00000130   0xA912             ADD      R1,SP,#+72
   \   00000132   0xA815             ADD      R0,SP,#+84
   \   00000134   0x.... 0x....      BL       mbedtls_mpi_div_mpi
   \   00000138   0x0005             MOVS     R5,R0
   \   0000013A   0xD14E             BNE      ??mbedtls_rsa_check_privkey_3
    231              MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &I, &DE, &L1  ) );
   \   0000013C   0xAA15             ADD      R2,SP,#+84
   \   0000013E   0xA921             ADD      R1,SP,#+132
   \   00000140   0xA81E             ADD      R0,SP,#+120
   \   00000142   0x.... 0x....      BL       mbedtls_mpi_mod_mpi
   \   00000146   0x0005             MOVS     R5,R0
   \   00000148   0xD147             BNE      ??mbedtls_rsa_check_privkey_3
    232          
    233              MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &DP, &ctx->D, &P1 ) );
   \   0000014A   0xAA06             ADD      R2,SP,#+24
   \   0000014C   0x0021             MOVS     R1,R4
   \   0000014E   0x3120             ADDS     R1,R1,#+32
   \   00000150   0xA80F             ADD      R0,SP,#+60
   \   00000152   0x.... 0x....      BL       mbedtls_mpi_mod_mpi
   \   00000156   0x0005             MOVS     R5,R0
   \   00000158   0xD13F             BNE      ??mbedtls_rsa_check_privkey_3
    234              MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &DQ, &ctx->D, &Q1 ) );
   \   0000015A   0xAA03             ADD      R2,SP,#+12
   \   0000015C   0x0021             MOVS     R1,R4
   \   0000015E   0x3120             ADDS     R1,R1,#+32
   \   00000160   0xA80C             ADD      R0,SP,#+48
   \   00000162   0x.... 0x....      BL       mbedtls_mpi_mod_mpi
   \   00000166   0x0005             MOVS     R5,R0
   \   00000168   0xD137             BNE      ??mbedtls_rsa_check_privkey_3
    235              MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &QP, &ctx->Q, &ctx->P ) );
   \   0000016A   0x0022             MOVS     R2,R4
   \   0000016C   0x322C             ADDS     R2,R2,#+44
   \   0000016E   0x0021             MOVS     R1,R4
   \   00000170   0x3138             ADDS     R1,R1,#+56
   \   00000172   0xA809             ADD      R0,SP,#+36
   \   00000174   0x.... 0x....      BL       mbedtls_mpi_inv_mod
   \   00000178   0x0005             MOVS     R5,R0
   \   0000017A   0xD12E             BNE      ??mbedtls_rsa_check_privkey_3
    236              /*
    237               * Check for a valid PKCS1v2 private key
    238               */
    239              if( mbedtls_mpi_cmp_mpi( &PQ, &ctx->N ) != 0 ||
    240                  mbedtls_mpi_cmp_mpi( &DP, &ctx->DP ) != 0 ||
    241                  mbedtls_mpi_cmp_mpi( &DQ, &ctx->DQ ) != 0 ||
    242                  mbedtls_mpi_cmp_mpi( &QP, &ctx->QP ) != 0 ||
    243                  mbedtls_mpi_cmp_int( &L2, 0 ) != 0 ||
    244                  mbedtls_mpi_cmp_int( &I, 1 ) != 0 ||
    245                  mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
   \   0000017C   0x0021             MOVS     R1,R4
   \   0000017E   0x3108             ADDS     R1,R1,#+8
   \   00000180   0xA824             ADD      R0,SP,#+144
   \   00000182   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000186   0x2800             CMP      R0,#+0
   \   00000188   0xD126             BNE      ??mbedtls_rsa_check_privkey_4
   \   0000018A   0x0021             MOVS     R1,R4
   \   0000018C   0x3144             ADDS     R1,R1,#+68
   \   0000018E   0xA80F             ADD      R0,SP,#+60
   \   00000190   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000194   0x2800             CMP      R0,#+0
   \   00000196   0xD11F             BNE      ??mbedtls_rsa_check_privkey_4
   \   00000198   0x0021             MOVS     R1,R4
   \   0000019A   0x3150             ADDS     R1,R1,#+80
   \   0000019C   0xA80C             ADD      R0,SP,#+48
   \   0000019E   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   000001A2   0x2800             CMP      R0,#+0
   \   000001A4   0xD118             BNE      ??mbedtls_rsa_check_privkey_4
   \   000001A6   0x0021             MOVS     R1,R4
   \   000001A8   0x315C             ADDS     R1,R1,#+92
   \   000001AA   0xA809             ADD      R0,SP,#+36
   \   000001AC   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   000001B0   0x2800             CMP      R0,#+0
   \   000001B2   0xD111             BNE      ??mbedtls_rsa_check_privkey_4
   \   000001B4   0x2100             MOVS     R1,#+0
   \   000001B6   0xA812             ADD      R0,SP,#+72
   \   000001B8   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   000001BC   0x2800             CMP      R0,#+0
   \   000001BE   0xD10B             BNE      ??mbedtls_rsa_check_privkey_4
   \   000001C0   0x2101             MOVS     R1,#+1
   \   000001C2   0xA81E             ADD      R0,SP,#+120
   \   000001C4   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   000001C8   0x2800             CMP      R0,#+0
   \   000001CA   0xD105             BNE      ??mbedtls_rsa_check_privkey_4
   \   000001CC   0x2101             MOVS     R1,#+1
   \   000001CE   0xA81B             ADD      R0,SP,#+108
   \   000001D0   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   000001D4   0x2800             CMP      R0,#+0
   \   000001D6   0xD000             BEQ      ??mbedtls_rsa_check_privkey_3
    246              {
    247                  ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
   \                     ??mbedtls_rsa_check_privkey_4: (+1)
   \   000001D8   0x....             LDR      R5,??DataTable17_1  ;; 0xffffbe00
    248              }
    249          
    250          cleanup:
    251              mbedtls_mpi_free( &PQ ); mbedtls_mpi_free( &DE ); mbedtls_mpi_free( &P1 ); mbedtls_mpi_free( &Q1 );
   \                     ??mbedtls_rsa_check_privkey_3: (+1)
   \   000001DA   0xA824             ADD      R0,SP,#+144
   \   000001DC   0x.... 0x....      BL       mbedtls_mpi_free
   \   000001E0   0xA821             ADD      R0,SP,#+132
   \   000001E2   0x.... 0x....      BL       mbedtls_mpi_free
   \   000001E6   0xA806             ADD      R0,SP,#+24
   \   000001E8   0x.... 0x....      BL       mbedtls_mpi_free
   \   000001EC   0xA803             ADD      R0,SP,#+12
   \   000001EE   0x.... 0x....      BL       mbedtls_mpi_free
    252              mbedtls_mpi_free( &H  ); mbedtls_mpi_free( &I  ); mbedtls_mpi_free( &G  ); mbedtls_mpi_free( &G2 );
   \   000001F2   0x4668             MOV      R0,SP
   \   000001F4   0x.... 0x....      BL       mbedtls_mpi_free
   \   000001F8   0xA81E             ADD      R0,SP,#+120
   \   000001FA   0x.... 0x....      BL       mbedtls_mpi_free
   \   000001FE   0xA81B             ADD      R0,SP,#+108
   \   00000200   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000204   0xA818             ADD      R0,SP,#+96
   \   00000206   0x.... 0x....      BL       mbedtls_mpi_free
    253              mbedtls_mpi_free( &L1 ); mbedtls_mpi_free( &L2 ); mbedtls_mpi_free( &DP ); mbedtls_mpi_free( &DQ );
   \   0000020A   0xA815             ADD      R0,SP,#+84
   \   0000020C   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000210   0xA812             ADD      R0,SP,#+72
   \   00000212   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000216   0xA80F             ADD      R0,SP,#+60
   \   00000218   0x.... 0x....      BL       mbedtls_mpi_free
   \   0000021C   0xA80C             ADD      R0,SP,#+48
   \   0000021E   0x.... 0x....      BL       mbedtls_mpi_free
    254              mbedtls_mpi_free( &QP );
   \   00000222   0xA809             ADD      R0,SP,#+36
   \   00000224   0x.... 0x....      BL       mbedtls_mpi_free
    255          
    256              if( ret == MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
   \   00000228   0x....             LDR      R0,??DataTable17_1  ;; 0xffffbe00
   \   0000022A   0x4285             CMP      R5,R0
   \   0000022C   0xD100             BNE      .+4
   \   0000022E   0xE715             B        ??mbedtls_rsa_check_privkey_0
    257                  return( ret );
    258          
    259              if( ret != 0 )
   \   00000230   0x2D00             CMP      R5,#+0
   \   00000232   0xD001             BEQ      ??mbedtls_rsa_check_privkey_5
    260                  return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED + ret );
   \   00000234   0x1828             ADDS     R0,R5,R0
   \   00000236   0xE000             B        ??mbedtls_rsa_check_privkey_2
    261          
    262              return( 0 );
   \                     ??mbedtls_rsa_check_privkey_5: (+1)
   \   00000238   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_rsa_check_privkey_2: (+1)
   \   0000023A   0xB027             ADD      SP,SP,#+156
   \   0000023C   0xBD30             POP      {R4,R5,PC}       ;; return
    263          }
    264          
    265          /*
    266           * Check if contexts holding a public and private key match
    267           */

   \                                 In section .text, align 2, keep-with-next
    268          int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub, const mbedtls_rsa_context *prv )
    269          {
   \                     mbedtls_rsa_check_pub_priv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    270              if( mbedtls_rsa_check_pubkey( pub ) != 0 ||
    271                  mbedtls_rsa_check_privkey( prv ) != 0 )
   \   00000006   0x6920             LDR      R0,[R4, #+16]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD039             BEQ      ??mbedtls_rsa_check_pub_priv_0
   \   0000000C   0x69E1             LDR      R1,[R4, #+28]
   \   0000000E   0x2900             CMP      R1,#+0
   \   00000010   0xD036             BEQ      ??mbedtls_rsa_check_pub_priv_0
   \   00000012   0x2201             MOVS     R2,#+1
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x4010             ANDS     R0,R0,R2
   \   00000018   0xD032             BEQ      ??mbedtls_rsa_check_pub_priv_0
   \   0000001A   0x6808             LDR      R0,[R1, #+0]
   \   0000001C   0x4002             ANDS     R2,R2,R0
   \   0000001E   0xD02F             BEQ      ??mbedtls_rsa_check_pub_priv_0
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x3008             ADDS     R0,R0,#+8
   \   00000024   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   00000028   0x2880             CMP      R0,#+128
   \   0000002A   0xD329             BCC      ??mbedtls_rsa_check_pub_priv_0
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x3008             ADDS     R0,R0,#+8
   \   00000030   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   00000034   0x....             LDR      R1,??DataTable17  ;; 0x2001
   \   00000036   0x4288             CMP      R0,R1
   \   00000038   0xD222             BCS      ??mbedtls_rsa_check_pub_priv_0
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x3014             ADDS     R0,R0,#+20
   \   0000003E   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   00000042   0x2802             CMP      R0,#+2
   \   00000044   0xD31C             BCC      ??mbedtls_rsa_check_pub_priv_0
   \   00000046   0x0021             MOVS     R1,R4
   \   00000048   0x3108             ADDS     R1,R1,#+8
   \   0000004A   0x0020             MOVS     R0,R4
   \   0000004C   0x3014             ADDS     R0,R0,#+20
   \   0000004E   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD514             BPL      ??mbedtls_rsa_check_pub_priv_0
   \   00000056   0x0028             MOVS     R0,R5
   \   00000058   0x.... 0x....      BL       mbedtls_rsa_check_privkey
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD10F             BNE      ??mbedtls_rsa_check_pub_priv_0
    272              {
    273                  return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    274              }
    275          
    276              if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
    277                  mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
   \   00000060   0x0029             MOVS     R1,R5
   \   00000062   0x3108             ADDS     R1,R1,#+8
   \   00000064   0x0020             MOVS     R0,R4
   \   00000066   0x3008             ADDS     R0,R0,#+8
   \   00000068   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD107             BNE      ??mbedtls_rsa_check_pub_priv_0
   \   00000070   0x0029             MOVS     R1,R5
   \   00000072   0x3114             ADDS     R1,R1,#+20
   \   00000074   0x0020             MOVS     R0,R4
   \   00000076   0x3014             ADDS     R0,R0,#+20
   \   00000078   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   0000007C   0x2800             CMP      R0,#+0
   \   0000007E   0xD000             BEQ      ??mbedtls_rsa_check_pub_priv_1
    278              {
    279                  return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
   \                     ??mbedtls_rsa_check_pub_priv_0: (+1)
   \   00000080   0x....             LDR      R0,??DataTable17_1  ;; 0xffffbe00
    280              }
    281          
    282              return( 0 );
   \                     ??mbedtls_rsa_check_pub_priv_1: (+1)
   \   00000082   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    283          }
    284          
    285          /*
    286           * Do an RSA public key operation
    287           */

   \                                 In section .text, align 2, keep-with-next
    288          int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
    289                          const unsigned char *input,
    290                          unsigned char *output )
    291          {
   \                     mbedtls_rsa_public: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000E             MOVS     R6,R1
   \   00000008   0x0015             MOVS     R5,R2
    292              int ret;
    293              size_t olen;
    294              mbedtls_mpi T;
    295          
    296              mbedtls_mpi_init( &T );
   \   0000000A   0xA801             ADD      R0,SP,#+4
   \   0000000C   0x.... 0x....      BL       mbedtls_mpi_init
    297          
    298          #if defined(MBEDTLS_THREADING_C)
    299              if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
    300                  return( ret );
    301          #endif
    302          
    303              MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
   \   00000010   0x6862             LDR      R2,[R4, #+4]
   \   00000012   0x0031             MOVS     R1,R6
   \   00000014   0xA801             ADD      R0,SP,#+4
   \   00000016   0x.... 0x....      BL       mbedtls_mpi_read_binary
   \   0000001A   0x0006             MOVS     R6,R0
   \   0000001C   0xD11D             BNE      ??mbedtls_rsa_public_0
    304          
    305              if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
   \   0000001E   0x0021             MOVS     R1,R4
   \   00000020   0x3108             ADDS     R1,R1,#+8
   \   00000022   0xA801             ADD      R0,SP,#+4
   \   00000024   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD402             BMI      ??mbedtls_rsa_public_1
    306              {
    307                  ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   \   0000002C   0x2603             MOVS     R6,#+3
   \   0000002E   0x43F6             MVNS     R6,R6            ;; #-4
    308                  goto cleanup;
   \   00000030   0xE013             B        ??mbedtls_rsa_public_0
    309              }
    310          
    311              olen = ctx->len;
   \                     ??mbedtls_rsa_public_1: (+1)
   \   00000032   0x6867             LDR      R7,[R4, #+4]
    312              MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x3068             ADDS     R0,R0,#+104
   \   00000038   0x9000             STR      R0,[SP, #+0]
   \   0000003A   0x0023             MOVS     R3,R4
   \   0000003C   0x3308             ADDS     R3,R3,#+8
   \   0000003E   0x0022             MOVS     R2,R4
   \   00000040   0x3214             ADDS     R2,R2,#+20
   \   00000042   0xA901             ADD      R1,SP,#+4
   \   00000044   0xA801             ADD      R0,SP,#+4
   \   00000046   0x.... 0x....      BL       mbedtls_mpi_exp_mod
   \   0000004A   0x0006             MOVS     R6,R0
   \   0000004C   0xD105             BNE      ??mbedtls_rsa_public_0
    313              MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
   \   0000004E   0x003A             MOVS     R2,R7
   \   00000050   0x0029             MOVS     R1,R5
   \   00000052   0xA801             ADD      R0,SP,#+4
   \   00000054   0x.... 0x....      BL       mbedtls_mpi_write_binary
   \   00000058   0x0006             MOVS     R6,R0
    314          
    315          cleanup:
    316          #if defined(MBEDTLS_THREADING_C)
    317              if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
    318                  return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
    319          #endif
    320          
    321              mbedtls_mpi_free( &T );
   \                     ??mbedtls_rsa_public_0: (+1)
   \   0000005A   0xA801             ADD      R0,SP,#+4
   \   0000005C   0x.... 0x....      BL       mbedtls_mpi_free
    322          
    323              if( ret != 0 )
   \   00000060   0x2E00             CMP      R6,#+0
   \   00000062   0xD002             BEQ      ??mbedtls_rsa_public_2
    324                  return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
   \   00000064   0x....             LDR      R0,??DataTable20  ;; 0xffffbd80
   \   00000066   0x1830             ADDS     R0,R6,R0
   \   00000068   0xE000             B        ??mbedtls_rsa_public_3
    325          
    326              return( 0 );
   \                     ??mbedtls_rsa_public_2: (+1)
   \   0000006A   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_rsa_public_3: (+1)
   \   0000006C   0xB005             ADD      SP,SP,#+20
   \   0000006E   0xBDF0             POP      {R4-R7,PC}       ;; return
    327          }
    328          
    329          /*
    330           * Generate or update blinding values, see section 10 of:
    331           *  KOCHER, Paul C. Timing attacks on implementations of Diffie-Hellman, RSA,
    332           *  DSS, and other systems. In : Advances in Cryptology-CRYPTO'96. Springer
    333           *  Berlin Heidelberg, 1996. p. 104-113.
    334           */

   \                                 In section .text, align 2, keep-with-next
    335          static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
    336                           int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
    337          {
   \                     rsa_prepare_blinding: (+1)
   \   00000000   0xB5F7             PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    338              int ret, count = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    339          
    340              if( ctx->Vf.p != NULL )
   \   00000006   0x20A0             MOVS     R0,#+160
   \   00000008   0x5820             LDR      R0,[R4, R0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD020             BEQ      ??rsa_prepare_blinding_0
    341              {
    342                  /* We already have blinding values, just update them by squaring */
    343                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
   \   0000000E   0x0026             MOVS     R6,R4
   \   00000010   0x368C             ADDS     R6,R6,#+140
   \   00000012   0x0032             MOVS     R2,R6
   \   00000014   0x0031             MOVS     R1,R6
   \   00000016   0x0030             MOVS     R0,R6
   \   00000018   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD14B             BNE      ??rsa_prepare_blinding_1
    344                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
   \   00000020   0x0022             MOVS     R2,R4
   \   00000022   0x3208             ADDS     R2,R2,#+8
   \   00000024   0x0031             MOVS     R1,R6
   \   00000026   0x0030             MOVS     R0,R6
   \   00000028   0x.... 0x....      BL       mbedtls_mpi_mod_mpi
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD143             BNE      ??rsa_prepare_blinding_1
    345                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
   \   00000030   0x0027             MOVS     R7,R4
   \   00000032   0x3798             ADDS     R7,R7,#+152
   \   00000034   0x003A             MOVS     R2,R7
   \   00000036   0x0039             MOVS     R1,R7
   \   00000038   0x0038             MOVS     R0,R7
   \   0000003A   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD13A             BNE      ??rsa_prepare_blinding_1
    346                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
   \   00000042   0x0022             MOVS     R2,R4
   \   00000044   0x3208             ADDS     R2,R2,#+8
   \   00000046   0x0039             MOVS     R1,R7
   \   00000048   0x0038             MOVS     R0,R7
   \   0000004A   0x.... 0x....      BL       mbedtls_mpi_mod_mpi
   \   0000004E   0xE033             B        ??rsa_prepare_blinding_1
    347          
    348                  goto cleanup;
    349              }
    350          
    351              /* Unblinding value: Vf = random number, invertible mod N */
    352              do {
    353                  if( count++ > 10 )
   \                     ??rsa_prepare_blinding_0: (+1)
   \   00000050   0x0028             MOVS     R0,R5
   \   00000052   0x1C6D             ADDS     R5,R5,#+1
   \   00000054   0x280B             CMP      R0,#+11
   \   00000056   0xDB01             BLT      ??rsa_prepare_blinding_2
    354                      return( MBEDTLS_ERR_RSA_RNG_FAILED );
   \   00000058   0x....             LDR      R0,??DataTable20_1  ;; 0xffffbb80
   \   0000005A   0xE02D             B        ??rsa_prepare_blinding_1
    355          
    356                  MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
   \                     ??rsa_prepare_blinding_2: (+1)
   \   0000005C   0x0027             MOVS     R7,R4
   \   0000005E   0x3798             ADDS     R7,R7,#+152
   \   00000060   0x9B02             LDR      R3,[SP, #+8]
   \   00000062   0x9A01             LDR      R2,[SP, #+4]
   \   00000064   0x6861             LDR      R1,[R4, #+4]
   \   00000066   0x1E49             SUBS     R1,R1,#+1
   \   00000068   0x0038             MOVS     R0,R7
   \   0000006A   0x.... 0x....      BL       mbedtls_mpi_fill_random
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD122             BNE      ??rsa_prepare_blinding_1
    357                  MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
   \   00000072   0x0026             MOVS     R6,R4
   \   00000074   0x368C             ADDS     R6,R6,#+140
   \   00000076   0x0022             MOVS     R2,R4
   \   00000078   0x3208             ADDS     R2,R2,#+8
   \   0000007A   0x0039             MOVS     R1,R7
   \   0000007C   0x0030             MOVS     R0,R6
   \   0000007E   0x.... 0x....      BL       mbedtls_mpi_gcd
   \   00000082   0x2800             CMP      R0,#+0
   \   00000084   0xD118             BNE      ??rsa_prepare_blinding_1
    358              } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
   \   00000086   0x2101             MOVS     R1,#+1
   \   00000088   0x0030             MOVS     R0,R6
   \   0000008A   0x.... 0x....      BL       mbedtls_mpi_cmp_int
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD1DE             BNE      ??rsa_prepare_blinding_0
    359          
    360              /* Blinding value: Vi =  Vf^(-e) mod N */
    361              MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
   \   00000092   0x0022             MOVS     R2,R4
   \   00000094   0x3208             ADDS     R2,R2,#+8
   \   00000096   0x0039             MOVS     R1,R7
   \   00000098   0x0030             MOVS     R0,R6
   \   0000009A   0x.... 0x....      BL       mbedtls_mpi_inv_mod
   \   0000009E   0x2800             CMP      R0,#+0
   \   000000A0   0xD10A             BNE      ??rsa_prepare_blinding_1
    362              MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
   \   000000A2   0x0020             MOVS     R0,R4
   \   000000A4   0x3068             ADDS     R0,R0,#+104
   \   000000A6   0x9000             STR      R0,[SP, #+0]
   \   000000A8   0x0023             MOVS     R3,R4
   \   000000AA   0x3308             ADDS     R3,R3,#+8
   \   000000AC   0x0022             MOVS     R2,R4
   \   000000AE   0x3214             ADDS     R2,R2,#+20
   \   000000B0   0x0031             MOVS     R1,R6
   \   000000B2   0x0030             MOVS     R0,R6
   \   000000B4   0x.... 0x....      BL       mbedtls_mpi_exp_mod
    363          
    364          
    365          cleanup:
    366              return( ret );
   \                     ??rsa_prepare_blinding_1: (+1)
   \   000000B8   0xB003             ADD      SP,SP,#+12
   \   000000BA   0xBDF0             POP      {R4-R7,PC}       ;; return
    367          }
    368          
    369          /*
    370           * Exponent blinding supposed to prevent side-channel attacks using multiple
    371           * traces of measurements to recover the RSA key. The more collisions are there,
    372           * the more bits of the key can be recovered. See [3].
    373           *
    374           * Collecting n collisions with m bit long blinding value requires 2^(m-m/n)
    375           * observations on avarage.
    376           *
    377           * For example with 28 byte blinding to achieve 2 collisions the adversary has
    378           * to make 2^112 observations on avarage.
    379           *
    380           * (With the currently (as of 2017 April) known best algorithms breaking 2048
    381           * bit RSA requires approximately as much time as trying out 2^112 random keys.
    382           * Thus in this sense with 28 byte blinding the security is not reduced by
    383           * side-channel attacks like the one in [3])
    384           *
    385           * This countermeasure does not help if the key recovery is possible with a
    386           * single trace.
    387           */
    388          #define RSA_EXPONENT_BLINDING 28
    389          
    390          /*
    391           * Do an RSA private key operation
    392           */

   \                                 In section .text, align 2, keep-with-next
    393          int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
    394                           int (*f_rng)(void *, unsigned char *, size_t),
    395                           void *p_rng,
    396                           const unsigned char *input,
    397                           unsigned char *output )
    398          {
   \                     mbedtls_rsa_private: (+1)
   \   00000000   0xB5F4             PUSH     {R2,R4-R7,LR}
   \   00000002   0xB09A             SUB      SP,SP,#+104
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x001E             MOVS     R6,R3
    399              int ret;
    400              size_t olen;
    401              mbedtls_mpi T, T1, T2;
    402              mbedtls_mpi P1, Q1, R;
    403          #if defined(MBEDTLS_RSA_NO_CRT)
    404              mbedtls_mpi D_blind;
    405              mbedtls_mpi *D = &ctx->D;
    406          #else
    407              mbedtls_mpi DP_blind, DQ_blind;
    408              mbedtls_mpi *DP = &ctx->DP;
   \   0000000A   0x3044             ADDS     R0,R0,#+68
   \   0000000C   0x9004             STR      R0,[SP, #+16]
    409              mbedtls_mpi *DQ = &ctx->DQ;
   \   0000000E   0x0027             MOVS     R7,R4
   \   00000010   0x3750             ADDS     R7,R7,#+80
    410          #endif
    411          
    412              /* Make sure we have private key info, prevent possible misuse */
    413              if( ctx->P.p == NULL || ctx->Q.p == NULL || ctx->D.p == NULL )
   \   00000012   0x6B60             LDR      R0,[R4, #+52]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD005             BEQ      ??mbedtls_rsa_private_0
   \   00000018   0x6C20             LDR      R0,[R4, #+64]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD002             BEQ      ??mbedtls_rsa_private_0
   \   0000001E   0x6AA0             LDR      R0,[R4, #+40]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD101             BNE      ??mbedtls_rsa_private_1
    414                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \                     ??mbedtls_rsa_private_0: (+1)
   \   00000024   0x....             LDR      R0,??DataTable20_2  ;; 0xffffbf80
   \   00000026   0xE101             B        ??mbedtls_rsa_private_2
    415          
    416              mbedtls_mpi_init( &T ); mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
   \                     ??mbedtls_rsa_private_1: (+1)
   \   00000028   0xA801             ADD      R0,SP,#+4
   \   0000002A   0x.... 0x....      BL       mbedtls_mpi_init
   \   0000002E   0xA805             ADD      R0,SP,#+20
   \   00000030   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000034   0xA811             ADD      R0,SP,#+68
   \   00000036   0x.... 0x....      BL       mbedtls_mpi_init
    417              mbedtls_mpi_init( &P1 ); mbedtls_mpi_init( &Q1 ); mbedtls_mpi_init( &R );
   \   0000003A   0xA817             ADD      R0,SP,#+92
   \   0000003C   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000040   0xA814             ADD      R0,SP,#+80
   \   00000042   0x.... 0x....      BL       mbedtls_mpi_init
   \   00000046   0xA80E             ADD      R0,SP,#+56
   \   00000048   0x.... 0x....      BL       mbedtls_mpi_init
    418          
    419          
    420              if( f_rng != NULL )
   \   0000004C   0x0028             MOVS     R0,R5
   \   0000004E   0xD005             BEQ      ??mbedtls_rsa_private_3
    421              {
    422          #if defined(MBEDTLS_RSA_NO_CRT)
    423                  mbedtls_mpi_init( &D_blind );
    424          #else
    425                  mbedtls_mpi_init( &DP_blind );
   \   00000050   0xA80B             ADD      R0,SP,#+44
   \   00000052   0x.... 0x....      BL       mbedtls_mpi_init
    426                  mbedtls_mpi_init( &DQ_blind );
   \   00000056   0xA808             ADD      R0,SP,#+32
   \   00000058   0x.... 0x....      BL       mbedtls_mpi_init
    427          #endif
    428              }
    429          
    430          
    431          #if defined(MBEDTLS_THREADING_C)
    432              if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
    433                  return( ret );
    434          #endif
    435          
    436              MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
   \                     ??mbedtls_rsa_private_3: (+1)
   \   0000005C   0x6862             LDR      R2,[R4, #+4]
   \   0000005E   0x0031             MOVS     R1,R6
   \   00000060   0xA801             ADD      R0,SP,#+4
   \   00000062   0x.... 0x....      BL       mbedtls_mpi_read_binary
   \   00000066   0x0006             MOVS     R6,R0
   \   00000068   0xD000             BEQ      .+4
   \   0000006A   0xE0BF             B        ??mbedtls_rsa_private_4
    437              if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
   \   0000006C   0x0021             MOVS     R1,R4
   \   0000006E   0x3108             ADDS     R1,R1,#+8
   \   00000070   0xA801             ADD      R0,SP,#+4
   \   00000072   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000076   0x2800             CMP      R0,#+0
   \   00000078   0xD402             BMI      ??mbedtls_rsa_private_5
    438              {
    439                  ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
   \   0000007A   0x2603             MOVS     R6,#+3
   \   0000007C   0x43F6             MVNS     R6,R6            ;; #-4
    440                  goto cleanup;
   \   0000007E   0xE0B5             B        ??mbedtls_rsa_private_4
    441              }
    442          
    443              if( f_rng != NULL )
   \                     ??mbedtls_rsa_private_5: (+1)
   \   00000080   0x0028             MOVS     R0,R5
   \   00000082   0xD05D             BEQ      ??mbedtls_rsa_private_6
    444              {
    445                  /*
    446                   * Blinding
    447                   * T = T * Vi mod N
    448                   */
    449                  MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
   \   00000084   0x9A1A             LDR      R2,[SP, #+104]
   \   00000086   0x0029             MOVS     R1,R5
   \   00000088   0x0020             MOVS     R0,R4
   \   0000008A   0x.... 0x....      BL       rsa_prepare_blinding
   \   0000008E   0x0006             MOVS     R6,R0
   \   00000090   0xD000             BEQ      .+4
   \   00000092   0xE0AB             B        ??mbedtls_rsa_private_4
    450                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
   \   00000094   0x0022             MOVS     R2,R4
   \   00000096   0x328C             ADDS     R2,R2,#+140
   \   00000098   0xA901             ADD      R1,SP,#+4
   \   0000009A   0xA801             ADD      R0,SP,#+4
   \   0000009C   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000000A0   0x0006             MOVS     R6,R0
   \   000000A2   0xD000             BEQ      .+4
   \   000000A4   0xE0A2             B        ??mbedtls_rsa_private_4
    451                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
   \   000000A6   0x0022             MOVS     R2,R4
   \   000000A8   0x3208             ADDS     R2,R2,#+8
   \   000000AA   0xA901             ADD      R1,SP,#+4
   \   000000AC   0xA801             ADD      R0,SP,#+4
   \   000000AE   0x.... 0x....      BL       mbedtls_mpi_mod_mpi
   \   000000B2   0x0006             MOVS     R6,R0
   \   000000B4   0xD000             BEQ      .+4
   \   000000B6   0xE099             B        ??mbedtls_rsa_private_4
    452          
    453                  /*
    454                   * Exponent blinding
    455                   */
    456                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
   \   000000B8   0x2201             MOVS     R2,#+1
   \   000000BA   0x0021             MOVS     R1,R4
   \   000000BC   0x312C             ADDS     R1,R1,#+44
   \   000000BE   0xA817             ADD      R0,SP,#+92
   \   000000C0   0x.... 0x....      BL       mbedtls_mpi_sub_int
   \   000000C4   0x0006             MOVS     R6,R0
   \   000000C6   0xD000             BEQ      .+4
   \   000000C8   0xE090             B        ??mbedtls_rsa_private_4
    457                  MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
   \   000000CA   0x2201             MOVS     R2,#+1
   \   000000CC   0x0021             MOVS     R1,R4
   \   000000CE   0x3138             ADDS     R1,R1,#+56
   \   000000D0   0xA814             ADD      R0,SP,#+80
   \   000000D2   0x.... 0x....      BL       mbedtls_mpi_sub_int
   \   000000D6   0x0006             MOVS     R6,R0
   \   000000D8   0xD000             BEQ      .+4
   \   000000DA   0xE087             B        ??mbedtls_rsa_private_4
    458          
    459          #if defined(MBEDTLS_RSA_NO_CRT)
    460                  /*
    461                   * D_blind = ( P - 1 ) * ( Q - 1 ) * R + D
    462                   */
    463                  MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
    464                                   f_rng, p_rng ) );
    465                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &D_blind, &P1, &Q1 ) );
    466                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &D_blind, &D_blind, &R ) );
    467                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &D_blind, &D_blind, &ctx->D ) );
    468          
    469                  D = &D_blind;
    470          #else
    471                  /*
    472                   * DP_blind = ( P - 1 ) * R + DP
    473                   */
    474                  MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
    475                                   f_rng, p_rng ) );
   \   000000DC   0x9B1A             LDR      R3,[SP, #+104]
   \   000000DE   0x002A             MOVS     R2,R5
   \   000000E0   0x211C             MOVS     R1,#+28
   \   000000E2   0xA80E             ADD      R0,SP,#+56
   \   000000E4   0x.... 0x....      BL       mbedtls_mpi_fill_random
   \   000000E8   0x0006             MOVS     R6,R0
   \   000000EA   0xD000             BEQ      .+4
   \   000000EC   0xE07E             B        ??mbedtls_rsa_private_4
    476                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
   \   000000EE   0xAA0E             ADD      R2,SP,#+56
   \   000000F0   0xA917             ADD      R1,SP,#+92
   \   000000F2   0xA80B             ADD      R0,SP,#+44
   \   000000F4   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000000F8   0x0006             MOVS     R6,R0
   \   000000FA   0xD177             BNE      ??mbedtls_rsa_private_4
    477                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
    478                              &ctx->DP ) );
   \   000000FC   0x0022             MOVS     R2,R4
   \   000000FE   0x3244             ADDS     R2,R2,#+68
   \   00000100   0xA90B             ADD      R1,SP,#+44
   \   00000102   0xA80B             ADD      R0,SP,#+44
   \   00000104   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   00000108   0x0006             MOVS     R6,R0
   \   0000010A   0xD16F             BNE      ??mbedtls_rsa_private_4
    479          
    480                  DP = &DP_blind;
   \   0000010C   0xA80B             ADD      R0,SP,#+44
   \   0000010E   0x9004             STR      R0,[SP, #+16]
    481          
    482                  /*
    483                   * DQ_blind = ( Q - 1 ) * R + DQ
    484                   */
    485                  MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
    486                                   f_rng, p_rng ) );
   \   00000110   0x9B1A             LDR      R3,[SP, #+104]
   \   00000112   0x002A             MOVS     R2,R5
   \   00000114   0x211C             MOVS     R1,#+28
   \   00000116   0xA80E             ADD      R0,SP,#+56
   \   00000118   0x.... 0x....      BL       mbedtls_mpi_fill_random
   \   0000011C   0x0006             MOVS     R6,R0
   \   0000011E   0xD165             BNE      ??mbedtls_rsa_private_4
    487                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
   \   00000120   0xAA0E             ADD      R2,SP,#+56
   \   00000122   0xA914             ADD      R1,SP,#+80
   \   00000124   0xA808             ADD      R0,SP,#+32
   \   00000126   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000012A   0x0006             MOVS     R6,R0
   \   0000012C   0xD15E             BNE      ??mbedtls_rsa_private_4
    488                  MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
    489                              &ctx->DQ ) );
   \   0000012E   0x0022             MOVS     R2,R4
   \   00000130   0x3250             ADDS     R2,R2,#+80
   \   00000132   0xA908             ADD      R1,SP,#+32
   \   00000134   0xA808             ADD      R0,SP,#+32
   \   00000136   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   0000013A   0x0006             MOVS     R6,R0
   \   0000013C   0xD156             BNE      ??mbedtls_rsa_private_4
    490          
    491                  DQ = &DQ_blind;
   \   0000013E   0xAF08             ADD      R7,SP,#+32
    492          #endif /* MBEDTLS_RSA_NO_CRT */
    493              }
    494          
    495          #if defined(MBEDTLS_RSA_NO_CRT)
    496              MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, D, &ctx->N, &ctx->RN ) );
    497          #else
    498              /*
    499               * Faster decryption using the CRT
    500               *
    501               * T1 = input ^ dP mod P
    502               * T2 = input ^ dQ mod Q
    503               */
    504              MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T1, &T, DP, &ctx->P, &ctx->RP ) );
   \                     ??mbedtls_rsa_private_6: (+1)
   \   00000140   0x0020             MOVS     R0,R4
   \   00000142   0x3074             ADDS     R0,R0,#+116
   \   00000144   0x9000             STR      R0,[SP, #+0]
   \   00000146   0x0023             MOVS     R3,R4
   \   00000148   0x332C             ADDS     R3,R3,#+44
   \   0000014A   0x9A04             LDR      R2,[SP, #+16]
   \   0000014C   0xA901             ADD      R1,SP,#+4
   \   0000014E   0xA805             ADD      R0,SP,#+20
   \   00000150   0x.... 0x....      BL       mbedtls_mpi_exp_mod
   \   00000154   0x0006             MOVS     R6,R0
   \   00000156   0xD149             BNE      ??mbedtls_rsa_private_4
    505              MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T2, &T, DQ, &ctx->Q, &ctx->RQ ) );
   \   00000158   0x0020             MOVS     R0,R4
   \   0000015A   0x3080             ADDS     R0,R0,#+128
   \   0000015C   0x9000             STR      R0,[SP, #+0]
   \   0000015E   0x0023             MOVS     R3,R4
   \   00000160   0x3338             ADDS     R3,R3,#+56
   \   00000162   0x003A             MOVS     R2,R7
   \   00000164   0xA901             ADD      R1,SP,#+4
   \   00000166   0xA811             ADD      R0,SP,#+68
   \   00000168   0x.... 0x....      BL       mbedtls_mpi_exp_mod
   \   0000016C   0x0006             MOVS     R6,R0
   \   0000016E   0xD13D             BNE      ??mbedtls_rsa_private_4
    506          
    507              /*
    508               * T = (T1 - T2) * (Q^-1 mod P) mod P
    509               */
    510              MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &T1, &T2 ) );
   \   00000170   0xAA11             ADD      R2,SP,#+68
   \   00000172   0xA905             ADD      R1,SP,#+20
   \   00000174   0xA801             ADD      R0,SP,#+4
   \   00000176   0x.... 0x....      BL       mbedtls_mpi_sub_mpi
   \   0000017A   0x0006             MOVS     R6,R0
   \   0000017C   0xD136             BNE      ??mbedtls_rsa_private_4
    511              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1, &T, &ctx->QP ) );
   \   0000017E   0x0022             MOVS     R2,R4
   \   00000180   0x325C             ADDS     R2,R2,#+92
   \   00000182   0xA901             ADD      R1,SP,#+4
   \   00000184   0xA805             ADD      R0,SP,#+20
   \   00000186   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   0000018A   0x0006             MOVS     R6,R0
   \   0000018C   0xD12E             BNE      ??mbedtls_rsa_private_4
    512              MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T1, &ctx->P ) );
   \   0000018E   0x0022             MOVS     R2,R4
   \   00000190   0x322C             ADDS     R2,R2,#+44
   \   00000192   0xA905             ADD      R1,SP,#+20
   \   00000194   0xA801             ADD      R0,SP,#+4
   \   00000196   0x.... 0x....      BL       mbedtls_mpi_mod_mpi
   \   0000019A   0x0006             MOVS     R6,R0
   \   0000019C   0xD126             BNE      ??mbedtls_rsa_private_4
    513          
    514              /*
    515               * T = T2 + T * Q
    516               */
    517              MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1, &T, &ctx->Q ) );
   \   0000019E   0x0022             MOVS     R2,R4
   \   000001A0   0x3238             ADDS     R2,R2,#+56
   \   000001A2   0xA901             ADD      R1,SP,#+4
   \   000001A4   0xA805             ADD      R0,SP,#+20
   \   000001A6   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000001AA   0x0006             MOVS     R6,R0
   \   000001AC   0xD11E             BNE      ??mbedtls_rsa_private_4
    518              MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &T2, &T1 ) );
   \   000001AE   0xAA05             ADD      R2,SP,#+20
   \   000001B0   0xA911             ADD      R1,SP,#+68
   \   000001B2   0xA801             ADD      R0,SP,#+4
   \   000001B4   0x.... 0x....      BL       mbedtls_mpi_add_mpi
   \   000001B8   0x0006             MOVS     R6,R0
   \   000001BA   0xD117             BNE      ??mbedtls_rsa_private_4
    519          #endif /* MBEDTLS_RSA_NO_CRT */
    520          
    521              if( f_rng != NULL )
   \   000001BC   0x0028             MOVS     R0,R5
   \   000001BE   0xD00F             BEQ      ??mbedtls_rsa_private_7
    522              {
    523                  /*
    524                   * Unblind
    525                   * T = T * Vf mod N
    526                   */
    527                  MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
   \   000001C0   0x0022             MOVS     R2,R4
   \   000001C2   0x3298             ADDS     R2,R2,#+152
   \   000001C4   0xA901             ADD      R1,SP,#+4
   \   000001C6   0xA801             ADD      R0,SP,#+4
   \   000001C8   0x.... 0x....      BL       mbedtls_mpi_mul_mpi
   \   000001CC   0x0006             MOVS     R6,R0
   \   000001CE   0xD10D             BNE      ??mbedtls_rsa_private_4
    528                  MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
   \   000001D0   0x0022             MOVS     R2,R4
   \   000001D2   0x3208             ADDS     R2,R2,#+8
   \   000001D4   0xA901             ADD      R1,SP,#+4
   \   000001D6   0xA801             ADD      R0,SP,#+4
   \   000001D8   0x.... 0x....      BL       mbedtls_mpi_mod_mpi
   \   000001DC   0x0006             MOVS     R6,R0
   \   000001DE   0xD105             BNE      ??mbedtls_rsa_private_4
    529              }
    530          
    531              olen = ctx->len;
    532              MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
   \                     ??mbedtls_rsa_private_7: (+1)
   \   000001E0   0x6862             LDR      R2,[R4, #+4]
   \   000001E2   0x9920             LDR      R1,[SP, #+128]
   \   000001E4   0xA801             ADD      R0,SP,#+4
   \   000001E6   0x.... 0x....      BL       mbedtls_mpi_write_binary
   \   000001EA   0x0006             MOVS     R6,R0
    533          
    534          cleanup:
    535          #if defined(MBEDTLS_THREADING_C)
    536              if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
    537                  return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
    538          #endif
    539          
    540              mbedtls_mpi_free( &T ); mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
   \                     ??mbedtls_rsa_private_4: (+1)
   \   000001EC   0xA801             ADD      R0,SP,#+4
   \   000001EE   0x.... 0x....      BL       mbedtls_mpi_free
   \   000001F2   0xA805             ADD      R0,SP,#+20
   \   000001F4   0x.... 0x....      BL       mbedtls_mpi_free
   \   000001F8   0xA811             ADD      R0,SP,#+68
   \   000001FA   0x.... 0x....      BL       mbedtls_mpi_free
    541              mbedtls_mpi_free( &P1 ); mbedtls_mpi_free( &Q1 ); mbedtls_mpi_free( &R );
   \   000001FE   0xA817             ADD      R0,SP,#+92
   \   00000200   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000204   0xA814             ADD      R0,SP,#+80
   \   00000206   0x.... 0x....      BL       mbedtls_mpi_free
   \   0000020A   0xA80E             ADD      R0,SP,#+56
   \   0000020C   0x.... 0x....      BL       mbedtls_mpi_free
    542          
    543              if( f_rng != NULL )
   \   00000210   0x2D00             CMP      R5,#+0
   \   00000212   0xD005             BEQ      ??mbedtls_rsa_private_8
    544              {
    545          #if defined(MBEDTLS_RSA_NO_CRT)
    546                  mbedtls_mpi_free( &D_blind );
    547          #else
    548                  mbedtls_mpi_free( &DP_blind );
   \   00000214   0xA80B             ADD      R0,SP,#+44
   \   00000216   0x.... 0x....      BL       mbedtls_mpi_free
    549                  mbedtls_mpi_free( &DQ_blind );
   \   0000021A   0xA808             ADD      R0,SP,#+32
   \   0000021C   0x.... 0x....      BL       mbedtls_mpi_free
    550          #endif
    551              }
    552          
    553              if( ret != 0 )
   \                     ??mbedtls_rsa_private_8: (+1)
   \   00000220   0x2E00             CMP      R6,#+0
   \   00000222   0xD002             BEQ      ??mbedtls_rsa_private_9
    554                  return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
   \   00000224   0x....             LDR      R0,??DataTable23  ;; 0xffffbd00
   \   00000226   0x1830             ADDS     R0,R6,R0
   \   00000228   0xE000             B        ??mbedtls_rsa_private_2
    555          
    556              return( 0 );
   \                     ??mbedtls_rsa_private_9: (+1)
   \   0000022A   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_rsa_private_2: (+1)
   \   0000022C   0xB01B             ADD      SP,SP,#+108
   \   0000022E   0xBDF0             POP      {R4-R7,PC}       ;; return
    557          }
    558          
    559          #if defined(MBEDTLS_PKCS1_V21)
    560          /**
    561           * Generate and apply the MGF1 operation (from PKCS#1 v2.1) to a buffer.
    562           *
    563           * \param dst       buffer to mask
    564           * \param dlen      length of destination buffer
    565           * \param src       source of the mask generation
    566           * \param slen      length of the source buffer
    567           * \param md_ctx    message digest context to use
    568           */

   \                                 In section .text, align 2, keep-with-next
    569          static void mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
    570                                size_t slen, mbedtls_md_context_t *md_ctx )
    571          {
   \                     mgf_mask: (+1)
   \   00000000   0xB5FC             PUSH     {R2-R7,LR}
   \   00000002   0xB093             SUB      SP,SP,#+76
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    572              unsigned char mask[MBEDTLS_MD_MAX_SIZE];
    573              unsigned char counter[4];
    574              unsigned char *p;
    575              unsigned int hlen;
    576              size_t i, use_len;
    577          
    578              memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
   \   00000008   0x2140             MOVS     R1,#+64
   \   0000000A   0xA802             ADD      R0,SP,#+8
   \   0000000C   0x.... 0x....      BL       __aeabi_memclr4
    579              memset( counter, 0, 4 );
   \   00000010   0x4668             MOV      R0,SP
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x6001             STR      R1,[R0, #0]
   \   00000016   0x9F1A             LDR      R7,[SP, #+104]
    580          
    581              hlen = mbedtls_md_get_size( md_ctx->md_info );
   \   00000018   0x6838             LDR      R0,[R7, #+0]
   \   0000001A   0x.... 0x....      BL       mbedtls_md_get_size
   \   0000001E   0x9001             STR      R0,[SP, #+4]
    582          
    583              /* Generate and apply dbMask */
    584              p = dst;
   \   00000020   0x2D00             CMP      R5,#+0
   \   00000022   0xE026             B        ??mgf_mask_0
    585          
    586              while( dlen > 0 )
    587              {
    588                  use_len = hlen;
   \                     ??mgf_mask_1: (+1)
   \   00000024   0x9E01             LDR      R6,[SP, #+4]
    589                  if( dlen < hlen )
   \   00000026   0x42B5             CMP      R5,R6
   \   00000028   0xD200             BCS      ??mgf_mask_2
    590                      use_len = dlen;
   \   0000002A   0x002E             MOVS     R6,R5
    591          
    592                  mbedtls_md_starts( md_ctx );
   \                     ??mgf_mask_2: (+1)
   \   0000002C   0x0038             MOVS     R0,R7
   \   0000002E   0x.... 0x....      BL       mbedtls_md_starts
    593                  mbedtls_md_update( md_ctx, src, slen );
   \   00000032   0x9A14             LDR      R2,[SP, #+80]
   \   00000034   0x9913             LDR      R1,[SP, #+76]
   \   00000036   0x0038             MOVS     R0,R7
   \   00000038   0x.... 0x....      BL       mbedtls_md_update
    594                  mbedtls_md_update( md_ctx, counter, 4 );
   \   0000003C   0x2204             MOVS     R2,#+4
   \   0000003E   0x4669             MOV      R1,SP
   \   00000040   0x0038             MOVS     R0,R7
   \   00000042   0x.... 0x....      BL       mbedtls_md_update
    595                  mbedtls_md_finish( md_ctx, mask );
   \   00000046   0xA902             ADD      R1,SP,#+8
   \   00000048   0x0038             MOVS     R0,R7
   \   0000004A   0x.... 0x....      BL       mbedtls_md_finish
    596          
    597                  for( i = 0; i < use_len; ++i )
   \   0000004E   0x2E00             CMP      R6,#+0
   \   00000050   0xD009             BEQ      ??mgf_mask_3
   \   00000052   0xA802             ADD      R0,SP,#+8
   \   00000054   0x0031             MOVS     R1,R6
    598                      *p++ ^= mask[i];
   \                     ??mgf_mask_4: (+1)
   \   00000056   0x7822             LDRB     R2,[R4, #+0]
   \   00000058   0x7803             LDRB     R3,[R0, #+0]
   \   0000005A   0x4053             EORS     R3,R3,R2
   \   0000005C   0x7023             STRB     R3,[R4, #+0]
   \   0000005E   0x1C64             ADDS     R4,R4,#+1
   \   00000060   0x1C40             ADDS     R0,R0,#+1
   \   00000062   0x1E49             SUBS     R1,R1,#+1
   \   00000064   0xD1F7             BNE      ??mgf_mask_4
    599          
    600                  counter[3]++;
   \                     ??mgf_mask_3: (+1)
   \   00000066   0x4668             MOV      R0,SP
   \   00000068   0x78C0             LDRB     R0,[R0, #+3]
   \   0000006A   0x1C40             ADDS     R0,R0,#+1
   \   0000006C   0x4669             MOV      R1,SP
   \   0000006E   0x70C8             STRB     R0,[R1, #+3]
    601          
    602                  dlen -= use_len;
   \   00000070   0x1BAD             SUBS     R5,R5,R6
    603              }
   \                     ??mgf_mask_0: (+1)
   \   00000072   0xD1D7             BNE      ??mgf_mask_1
    604          
    605              mbedtls_zeroize( mask, sizeof( mask ) );
    606          }
   \   00000074   0xB015             ADD      SP,SP,#+84
   \   00000076   0xBDF0             POP      {R4-R7,PC}       ;; return
    607          #endif /* MBEDTLS_PKCS1_V21 */
    608          
    609          #if defined(MBEDTLS_PKCS1_V21)
    610          /*
    611           * Implementation of the PKCS#1 v2.1 RSAES-OAEP-ENCRYPT function
    612           */

   \                                 In section .text, align 2, keep-with-next
    613          int mbedtls_rsa_rsaes_oaep_encrypt( mbedtls_rsa_context *ctx,
    614                                      int (*f_rng)(void *, unsigned char *, size_t),
    615                                      void *p_rng,
    616                                      int mode,
    617                                      const unsigned char *label, size_t label_len,
    618                                      size_t ilen,
    619                                      const unsigned char *input,
    620                                      unsigned char *output )
    621          {
   \                     mbedtls_rsa_rsaes_oaep_encrypt: (+1)
   \   00000000   0xB5FF             PUSH     {R0-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x9D12             LDR      R5,[SP, #+72]
    622              size_t olen;
    623              int ret;
    624              unsigned char *p = output;
    625              unsigned int hlen;
    626              const mbedtls_md_info_t *md_info;
    627              mbedtls_md_context_t md_ctx;
    628          
    629              if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   \   00000006   0x2B01             CMP      R3,#+1
   \   00000008   0xD103             BNE      ??mbedtls_rsa_rsaes_oaep_encrypt_0
   \   0000000A   0x21A4             MOVS     R1,#+164
   \   0000000C   0x5840             LDR      R0,[R0, R1]
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD11B             BNE      ??mbedtls_rsa_rsaes_oaep_encrypt_1
    630                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    631          
    632              if( f_rng == NULL )
   \                     ??mbedtls_rsa_rsaes_oaep_encrypt_0: (+1)
   \   00000012   0x9806             LDR      R0,[SP, #+24]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD018             BEQ      ??mbedtls_rsa_rsaes_oaep_encrypt_1
    633                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    634          
    635              md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   \   00000018   0x9805             LDR      R0,[SP, #+20]
   \   0000001A   0x30A4             ADDS     R0,R0,#+164
   \   0000001C   0x6840             LDR      R0,[R0, #+4]
   \   0000001E   0xB2C0             UXTB     R0,R0
   \   00000020   0x.... 0x....      BL       mbedtls_md_info_from_type
   \   00000024   0x0007             MOVS     R7,R0
    636              if( md_info == NULL )
   \   00000026   0xD010             BEQ      ??mbedtls_rsa_rsaes_oaep_encrypt_1
    637                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    638          
    639              olen = ctx->len;
   \   00000028   0x9805             LDR      R0,[SP, #+20]
   \   0000002A   0x6840             LDR      R0,[R0, #+4]
   \   0000002C   0x9000             STR      R0,[SP, #+0]
    640              hlen = mbedtls_md_get_size( md_info );
   \   0000002E   0x0038             MOVS     R0,R7
   \   00000030   0x.... 0x....      BL       mbedtls_md_get_size
   \   00000034   0x0006             MOVS     R6,R0
   \   00000036   0x9810             LDR      R0,[SP, #+64]
   \   00000038   0x0071             LSLS     R1,R6,#+1
   \   0000003A   0x1840             ADDS     R0,R0,R1
   \   0000003C   0x1C80             ADDS     R0,R0,#+2
   \   0000003E   0x9910             LDR      R1,[SP, #+64]
   \   00000040   0x4288             CMP      R0,R1
   \   00000042   0xD302             BCC      ??mbedtls_rsa_rsaes_oaep_encrypt_1
   \   00000044   0x9900             LDR      R1,[SP, #+0]
   \   00000046   0x4281             CMP      R1,R0
   \   00000048   0xD201             BCS      ??mbedtls_rsa_rsaes_oaep_encrypt_2
    641          
    642              /* first comparison checks for overflow */
    643              if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
    644                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \                     ??mbedtls_rsa_rsaes_oaep_encrypt_1: (+1)
   \   0000004A   0x....             LDR      R0,??DataTable23_1  ;; 0xffffbf80
   \   0000004C   0xE05B             B        ??mbedtls_rsa_rsaes_oaep_encrypt_3
    645          
    646              memset( output, 0, olen );
   \                     ??mbedtls_rsa_rsaes_oaep_encrypt_2: (+1)
   \   0000004E   0x0028             MOVS     R0,R5
   \   00000050   0x.... 0x....      BL       __aeabi_memclr
    647          
    648              *p++ = 0;
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x7028             STRB     R0,[R5, #+0]
   \   00000058   0x1C6C             ADDS     R4,R5,#+1
    649          
    650              /* Generate a random octet string seed */
    651              if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
   \   0000005A   0x0032             MOVS     R2,R6
   \   0000005C   0x0021             MOVS     R1,R4
   \   0000005E   0x9807             LDR      R0,[SP, #+28]
   \   00000060   0x9B06             LDR      R3,[SP, #+24]
   \   00000062   0x4798             BLX      R3
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD002             BEQ      ??mbedtls_rsa_rsaes_oaep_encrypt_4
    652                  return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   \   00000068   0x....             LDR      R1,??DataTable23_2  ;; 0xffffbb80
   \   0000006A   0x1840             ADDS     R0,R0,R1
   \   0000006C   0xE04B             B        ??mbedtls_rsa_rsaes_oaep_encrypt_3
    653          
    654              p += hlen;
   \                     ??mbedtls_rsa_rsaes_oaep_encrypt_4: (+1)
   \   0000006E   0x19A4             ADDS     R4,R4,R6
    655          
    656              /* Construct DB */
    657              mbedtls_md( md_info, label, label_len, p );
   \   00000070   0x0023             MOVS     R3,R4
   \   00000072   0x9A0F             LDR      R2,[SP, #+60]
   \   00000074   0x990E             LDR      R1,[SP, #+56]
   \   00000076   0x0038             MOVS     R0,R7
   \   00000078   0x.... 0x....      BL       mbedtls_md
    658              p += hlen;
    659              p += olen - 2 * hlen - 2 - ilen;
   \   0000007C   0x19A0             ADDS     R0,R4,R6
   \   0000007E   0x9900             LDR      R1,[SP, #+0]
   \   00000080   0x0072             LSLS     R2,R6,#+1
   \   00000082   0x1A89             SUBS     R1,R1,R2
   \   00000084   0x1E89             SUBS     R1,R1,#+2
   \   00000086   0x9A10             LDR      R2,[SP, #+64]
   \   00000088   0x1A89             SUBS     R1,R1,R2
   \   0000008A   0x1840             ADDS     R0,R0,R1
    660              *p++ = 1;
   \   0000008C   0x2101             MOVS     R1,#+1
   \   0000008E   0x7001             STRB     R1,[R0, #+0]
   \   00000090   0x1C40             ADDS     R0,R0,#+1
    661              memcpy( p, input, ilen );
   \   00000092   0x9A10             LDR      R2,[SP, #+64]
   \   00000094   0x9911             LDR      R1,[SP, #+68]
   \   00000096   0x.... 0x....      BL       __aeabi_memcpy
    662          
    663              mbedtls_md_init( &md_ctx );
   \   0000009A   0xA801             ADD      R0,SP,#+4
   \   0000009C   0x.... 0x....      BL       mbedtls_md_init
    664              if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   \   000000A0   0x2200             MOVS     R2,#+0
   \   000000A2   0x0039             MOVS     R1,R7
   \   000000A4   0xA801             ADD      R0,SP,#+4
   \   000000A6   0x.... 0x....      BL       mbedtls_md_setup
   \   000000AA   0x0004             MOVS     R4,R0
   \   000000AC   0xD004             BEQ      ??mbedtls_rsa_rsaes_oaep_encrypt_5
    665              {
    666                  mbedtls_md_free( &md_ctx );
   \   000000AE   0xA801             ADD      R0,SP,#+4
   \   000000B0   0x.... 0x....      BL       mbedtls_md_free
    667                  return( ret );
   \   000000B4   0x0020             MOVS     R0,R4
   \   000000B6   0xE026             B        ??mbedtls_rsa_rsaes_oaep_encrypt_3
    668              }
    669          
    670              /* maskedDB: Apply dbMask to DB */
    671              mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
    672                         &md_ctx );
   \                     ??mbedtls_rsa_rsaes_oaep_encrypt_5: (+1)
   \   000000B8   0x19AF             ADDS     R7,R5,R6
   \   000000BA   0x9800             LDR      R0,[SP, #+0]
   \   000000BC   0x1B84             SUBS     R4,R0,R6
   \   000000BE   0x1E64             SUBS     R4,R4,#+1
   \   000000C0   0xA801             ADD      R0,SP,#+4
   \   000000C2   0x9000             STR      R0,[SP, #+0]
   \   000000C4   0x0033             MOVS     R3,R6
   \   000000C6   0x1C6A             ADDS     R2,R5,#+1
   \   000000C8   0x0021             MOVS     R1,R4
   \   000000CA   0x1C78             ADDS     R0,R7,#+1
   \   000000CC   0x.... 0x....      BL       mgf_mask
    673          
    674              /* maskedSeed: Apply seedMask to seed */
    675              mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
    676                         &md_ctx );
   \   000000D0   0xA801             ADD      R0,SP,#+4
   \   000000D2   0x9000             STR      R0,[SP, #+0]
   \   000000D4   0x0023             MOVS     R3,R4
   \   000000D6   0x1C7A             ADDS     R2,R7,#+1
   \   000000D8   0x0031             MOVS     R1,R6
   \   000000DA   0x1C68             ADDS     R0,R5,#+1
   \   000000DC   0x.... 0x....      BL       mgf_mask
    677          
    678              mbedtls_md_free( &md_ctx );
   \   000000E0   0xA801             ADD      R0,SP,#+4
   \   000000E2   0x.... 0x....      BL       mbedtls_md_free
    679          
    680              return( ( mode == MBEDTLS_RSA_PUBLIC )
    681                      ? mbedtls_rsa_public(  ctx, output, output )
    682                      : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   \   000000E6   0x9808             LDR      R0,[SP, #+32]
   \   000000E8   0x2800             CMP      R0,#+0
   \   000000EA   0xD105             BNE      ??mbedtls_rsa_rsaes_oaep_encrypt_6
   \   000000EC   0x002A             MOVS     R2,R5
   \   000000EE   0x0029             MOVS     R1,R5
   \   000000F0   0x9805             LDR      R0,[SP, #+20]
   \   000000F2   0x.... 0x....      BL       mbedtls_rsa_public
   \   000000F6   0xE006             B        ??mbedtls_rsa_rsaes_oaep_encrypt_3
   \                     ??mbedtls_rsa_rsaes_oaep_encrypt_6: (+1)
   \   000000F8   0x9500             STR      R5,[SP, #+0]
   \   000000FA   0x002B             MOVS     R3,R5
   \   000000FC   0x9A07             LDR      R2,[SP, #+28]
   \   000000FE   0x9906             LDR      R1,[SP, #+24]
   \   00000100   0x9805             LDR      R0,[SP, #+20]
   \   00000102   0x.... 0x....      BL       mbedtls_rsa_private
   \                     ??mbedtls_rsa_rsaes_oaep_encrypt_3: (+1)
   \   00000106   0xB009             ADD      SP,SP,#+36
   \   00000108   0xBDF0             POP      {R4-R7,PC}       ;; return
    683          }
    684          #endif /* MBEDTLS_PKCS1_V21 */
    685          
    686          #if defined(MBEDTLS_PKCS1_V15)
    687          /*
    688           * Implementation of the PKCS#1 v2.1 RSAES-PKCS1-V1_5-ENCRYPT function
    689           */

   \                                 In section .text, align 2, keep-with-next
    690          int mbedtls_rsa_rsaes_pkcs1_v15_encrypt( mbedtls_rsa_context *ctx,
    691                                           int (*f_rng)(void *, unsigned char *, size_t),
    692                                           void *p_rng,
    693                                           int mode, size_t ilen,
    694                                           const unsigned char *input,
    695                                           unsigned char *output )
    696          {
   \                     mbedtls_rsa_rsaes_pkcs1_v15_encrypt: (+1)
   \   00000000   0xB5FF             PUSH     {R0-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
    697              size_t nb_pad, olen;
    698              int ret;
    699              unsigned char *p = output;
    700          
    701              if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   \   00000004   0x2B01             CMP      R3,#+1
   \   00000006   0xD104             BNE      ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_0
   \   00000008   0x9801             LDR      R0,[SP, #+4]
   \   0000000A   0x21A4             MOVS     R1,#+164
   \   0000000C   0x5840             LDR      R0,[R0, R1]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD111             BNE      ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_1
    702                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    703          
    704              // We don't check p_rng because it won't be dereferenced here
    705              if( f_rng == NULL || input == NULL || output == NULL )
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_0: (+1)
   \   00000012   0x9802             LDR      R0,[SP, #+8]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD00E             BEQ      ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_1
   \   00000018   0x980B             LDR      R0,[SP, #+44]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD00B             BEQ      ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_1
   \   0000001E   0x9F0C             LDR      R7,[SP, #+48]
   \   00000020   0x2F00             CMP      R7,#+0
   \   00000022   0xD008             BEQ      ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_1
    706                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    707          
    708              olen = ctx->len;
   \   00000024   0x9801             LDR      R0,[SP, #+4]
   \   00000026   0x6840             LDR      R0,[R0, #+4]
    709          
    710              /* first comparison checks for overflow */
    711              if( ilen + 11 < ilen || olen < ilen + 11 )
   \   00000028   0x990A             LDR      R1,[SP, #+40]
   \   0000002A   0x310B             ADDS     R1,R1,#+11
   \   0000002C   0x9A0A             LDR      R2,[SP, #+40]
   \   0000002E   0x4291             CMP      R1,R2
   \   00000030   0xD301             BCC      ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_1
   \   00000032   0x4288             CMP      R0,R1
   \   00000034   0xD201             BCS      ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_2
    712                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_1: (+1)
   \   00000036   0x....             LDR      R0,??DataTable23_1  ;; 0xffffbf80
   \   00000038   0xE048             B        ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_3
    713          
    714              nb_pad = olen - 3 - ilen;
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_2: (+1)
   \   0000003A   0x1EC0             SUBS     R0,R0,#+3
   \   0000003C   0x1A80             SUBS     R0,R0,R2
   \   0000003E   0x0006             MOVS     R6,R0
   \   00000040   0x2100             MOVS     R1,#+0
   \   00000042   0x7039             STRB     R1,[R7, #+0]
    715          
    716              *p++ = 0;
    717              if( mode == MBEDTLS_RSA_PUBLIC )
   \   00000044   0x9904             LDR      R1,[SP, #+16]
   \   00000046   0x2900             CMP      R1,#+0
   \   00000048   0xD11E             BNE      ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_4
    718              {
    719                  *p++ = MBEDTLS_RSA_CRYPT;
   \   0000004A   0x2102             MOVS     R1,#+2
   \   0000004C   0x7079             STRB     R1,[R7, #+1]
   \   0000004E   0x1CBD             ADDS     R5,R7,#+2
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD024             BEQ      ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_5
    720          
    721                  while( nb_pad-- > 0 )
    722                  {
    723                      int rng_dl = 100;
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_6: (+1)
   \   00000054   0x2464             MOVS     R4,#+100
   \   00000056   0x1E76             SUBS     R6,R6,#+1
    724          
    725                      do {
    726                          ret = f_rng( p_rng, p, 1 );
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_7: (+1)
   \   00000058   0x2201             MOVS     R2,#+1
   \   0000005A   0x0029             MOVS     R1,R5
   \   0000005C   0x9803             LDR      R0,[SP, #+12]
   \   0000005E   0x9B02             LDR      R3,[SP, #+8]
   \   00000060   0x4798             BLX      R3
    727                      } while( *p == 0 && --rng_dl && ret == 0 );
   \   00000062   0x7829             LDRB     R1,[R5, #+0]
   \   00000064   0x2900             CMP      R1,#+0
   \   00000066   0xD104             BNE      ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_8
   \   00000068   0x1E64             SUBS     R4,R4,#+1
   \   0000006A   0xD006             BEQ      ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_9
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD102             BNE      ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_10
   \   00000070   0xE7F2             B        ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_7
    728          
    729                      /* Check if RNG failed to generate data */
    730                      if( rng_dl == 0 || ret != 0 )
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_8: (+1)
   \   00000072   0x2C00             CMP      R4,#+0
   \   00000074   0xD001             BEQ      ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_9
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_10: (+1)
   \   00000076   0x2800             CMP      R0,#+0
   \   00000078   0xD002             BEQ      ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_11
    731                          return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_9: (+1)
   \   0000007A   0x....             LDR      R1,??DataTable23_2  ;; 0xffffbb80
   \   0000007C   0x1840             ADDS     R0,R0,R1
   \   0000007E   0xE025             B        ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_3
    732          
    733                      p++;
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_11: (+1)
   \   00000080   0x1C6D             ADDS     R5,R5,#+1
    734                  }
   \   00000082   0x2E00             CMP      R6,#+0
   \   00000084   0xD1E6             BNE      ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_6
   \   00000086   0xE00A             B        ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_5
    735              }
    736              else
    737              {
    738                  *p++ = MBEDTLS_RSA_SIGN;
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_4: (+1)
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0x7078             STRB     R0,[R7, #+1]
   \   0000008C   0x1CBD             ADDS     R5,R7,#+2
    739          
    740                  while( nb_pad-- > 0 )
   \   0000008E   0x2E00             CMP      R6,#+0
   \   00000090   0xD005             BEQ      ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_5
    741                      *p++ = 0xFF;
   \   00000092   0x22FF             MOVS     R2,#+255
   \   00000094   0x0031             MOVS     R1,R6
   \   00000096   0x0028             MOVS     R0,R5
   \   00000098   0x.... 0x....      BL       __aeabi_memset
   \   0000009C   0x19AD             ADDS     R5,R5,R6
    742              }
    743          
    744              *p++ = 0;
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_5: (+1)
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0x7028             STRB     R0,[R5, #+0]
   \   000000A2   0x1C68             ADDS     R0,R5,#+1
    745              memcpy( p, input, ilen );
   \   000000A4   0x9A0A             LDR      R2,[SP, #+40]
   \   000000A6   0x990B             LDR      R1,[SP, #+44]
   \   000000A8   0x.... 0x....      BL       __aeabi_memcpy
    746          
    747              return( ( mode == MBEDTLS_RSA_PUBLIC )
    748                      ? mbedtls_rsa_public(  ctx, output, output )
    749                      : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
   \   000000AC   0x9804             LDR      R0,[SP, #+16]
   \   000000AE   0x2800             CMP      R0,#+0
   \   000000B0   0xD105             BNE      ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_12
   \   000000B2   0x003A             MOVS     R2,R7
   \   000000B4   0x0039             MOVS     R1,R7
   \   000000B6   0x9801             LDR      R0,[SP, #+4]
   \   000000B8   0x.... 0x....      BL       mbedtls_rsa_public
   \   000000BC   0xE006             B        ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_3
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_12: (+1)
   \   000000BE   0x9700             STR      R7,[SP, #+0]
   \   000000C0   0x003B             MOVS     R3,R7
   \   000000C2   0x9A03             LDR      R2,[SP, #+12]
   \   000000C4   0x9902             LDR      R1,[SP, #+8]
   \   000000C6   0x9801             LDR      R0,[SP, #+4]
   \   000000C8   0x.... 0x....      BL       mbedtls_rsa_private
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_encrypt_3: (+1)
   \   000000CC   0xB005             ADD      SP,SP,#+20
   \   000000CE   0xBDF0             POP      {R4-R7,PC}       ;; return
    750          }
    751          #endif /* MBEDTLS_PKCS1_V15 */
    752          
    753          /*
    754           * Add the message padding, then do an RSA operation
    755           */

   \                                 In section .text, align 2, keep-with-next
    756          int mbedtls_rsa_pkcs1_encrypt( mbedtls_rsa_context *ctx,
    757                                 int (*f_rng)(void *, unsigned char *, size_t),
    758                                 void *p_rng,
    759                                 int mode, size_t ilen,
    760                                 const unsigned char *input,
    761                                 unsigned char *output )
    762          {
   \                     mbedtls_rsa_pkcs1_encrypt: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x9C0A             LDR      R4,[SP, #+40]
   \   00000006   0x9D0B             LDR      R5,[SP, #+44]
   \   00000008   0x9E0C             LDR      R6,[SP, #+48]
    763              switch( ctx->padding )
   \   0000000A   0x27A4             MOVS     R7,#+164
   \   0000000C   0x59C7             LDR      R7,[R0, R7]
   \   0000000E   0x2F00             CMP      R7,#+0
   \   00000010   0xD002             BEQ      ??mbedtls_rsa_pkcs1_encrypt_0
   \   00000012   0x2F01             CMP      R7,#+1
   \   00000014   0xD006             BEQ      ??mbedtls_rsa_pkcs1_encrypt_1
   \   00000016   0xE00E             B        ??mbedtls_rsa_pkcs1_encrypt_2
    764              {
    765          #if defined(MBEDTLS_PKCS1_V15)
    766                  case MBEDTLS_RSA_PKCS_V15:
    767                      return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
    768                                                          input, output );
   \                     ??mbedtls_rsa_pkcs1_encrypt_0: (+1)
   \   00000018   0x9602             STR      R6,[SP, #+8]
   \   0000001A   0x9501             STR      R5,[SP, #+4]
   \   0000001C   0x9400             STR      R4,[SP, #+0]
   \   0000001E   0x.... 0x....      BL       mbedtls_rsa_rsaes_pkcs1_v15_encrypt
   \   00000022   0xE009             B        ??mbedtls_rsa_pkcs1_encrypt_3
    769          #endif
    770          
    771          #if defined(MBEDTLS_PKCS1_V21)
    772                  case MBEDTLS_RSA_PKCS_V21:
    773                      return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
    774                                                     ilen, input, output );
   \                     ??mbedtls_rsa_pkcs1_encrypt_1: (+1)
   \   00000024   0x9604             STR      R6,[SP, #+16]
   \   00000026   0x9503             STR      R5,[SP, #+12]
   \   00000028   0x9402             STR      R4,[SP, #+8]
   \   0000002A   0x2400             MOVS     R4,#+0
   \   0000002C   0x9401             STR      R4,[SP, #+4]
   \   0000002E   0x9400             STR      R4,[SP, #+0]
   \   00000030   0x.... 0x....      BL       mbedtls_rsa_rsaes_oaep_encrypt
   \   00000034   0xE000             B        ??mbedtls_rsa_pkcs1_encrypt_3
    775          #endif
    776          
    777                  default:
    778                      return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   \                     ??mbedtls_rsa_pkcs1_encrypt_2: (+1)
   \   00000036   0x....             LDR      R0,??DataTable26  ;; 0xffffbf00
   \                     ??mbedtls_rsa_pkcs1_encrypt_3: (+1)
   \   00000038   0xB005             ADD      SP,SP,#+20
   \   0000003A   0xBDF0             POP      {R4-R7,PC}       ;; return
    779              }
    780          }
    781          
    782          #if defined(MBEDTLS_PKCS1_V21)
    783          /*
    784           * Implementation of the PKCS#1 v2.1 RSAES-OAEP-DECRYPT function
    785           */

   \                                 In section .text, align 2, keep-with-next
    786          int mbedtls_rsa_rsaes_oaep_decrypt( mbedtls_rsa_context *ctx,
    787                                      int (*f_rng)(void *, unsigned char *, size_t),
    788                                      void *p_rng,
    789                                      int mode,
    790                                      const unsigned char *label, size_t label_len,
    791                                      size_t *olen,
    792                                      const unsigned char *input,
    793                                      unsigned char *output,
    794                                      size_t output_max_len )
    795          {
   \                     mbedtls_rsa_rsaes_oaep_decrypt: (+1)
   \   00000000   0xB5F6             PUSH     {R1,R2,R4-R7,LR}
   \   00000002   0x....             LDR      R1,??DataTable26_1  ;; 0xfffffbac
   \   00000004   0x448D             ADD      SP,SP,R1
   \   00000006   0x0005             MOVS     R5,R0
   \   00000008   0x001E             MOVS     R6,R3
    796              int ret;
    797              size_t ilen, i, pad_len;
    798              unsigned char *p, bad, pad_done;
    799              unsigned char buf[MBEDTLS_MPI_MAX_SIZE];
    800              unsigned char lhash[MBEDTLS_MD_MAX_SIZE];
    801              unsigned int hlen;
    802              const mbedtls_md_info_t *md_info;
    803              mbedtls_md_context_t md_ctx;
    804          
    805              /*
    806               * Parameters sanity checks
    807               */
    808              if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   \   0000000A   0x2E01             CMP      R6,#+1
   \   0000000C   0xD103             BNE      ??mbedtls_rsa_rsaes_oaep_decrypt_0
   \   0000000E   0x20A4             MOVS     R0,#+164
   \   00000010   0x5828             LDR      R0,[R5, R0]
   \   00000012   0x2801             CMP      R0,#+1
   \   00000014   0xD115             BNE      ??mbedtls_rsa_rsaes_oaep_decrypt_1
    809                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    810          
    811              ilen = ctx->len;
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_0: (+1)
   \   00000016   0x6868             LDR      R0,[R5, #+4]
   \   00000018   0x9001             STR      R0,[SP, #+4]
    812          
    813              if( ilen < 16 || ilen > sizeof( buf ) )
   \   0000001A   0x3810             SUBS     R0,R0,#+16
   \   0000001C   0x....             LDR      R1,??DataTable26_2  ;; 0x3f1
   \   0000001E   0x4288             CMP      R0,R1
   \   00000020   0xD20F             BCS      ??mbedtls_rsa_rsaes_oaep_decrypt_1
    814                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    815          
    816              md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   \   00000022   0x0028             MOVS     R0,R5
   \   00000024   0x30A4             ADDS     R0,R0,#+164
   \   00000026   0x6840             LDR      R0,[R0, #+4]
   \   00000028   0xB2C0             UXTB     R0,R0
   \   0000002A   0x.... 0x....      BL       mbedtls_md_info_from_type
   \   0000002E   0x0007             MOVS     R7,R0
    817              if( md_info == NULL )
   \   00000030   0xD007             BEQ      ??mbedtls_rsa_rsaes_oaep_decrypt_1
    818                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    819          
    820              hlen = mbedtls_md_get_size( md_info );
   \   00000032   0x.... 0x....      BL       mbedtls_md_get_size
   \   00000036   0x0004             MOVS     R4,R0
   \   00000038   0x9801             LDR      R0,[SP, #+4]
   \   0000003A   0x0061             LSLS     R1,R4,#+1
   \   0000003C   0x1C89             ADDS     R1,R1,#+2
   \   0000003E   0x4288             CMP      R0,R1
   \   00000040   0xD201             BCS      ??mbedtls_rsa_rsaes_oaep_decrypt_2
    821          
    822              // checking for integer underflow
    823              if( 2 * hlen + 2 > ilen )
    824                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_1: (+1)
   \   00000042   0x....             LDR      R0,??DataTable26_3  ;; 0xffffbf80
   \   00000044   0xE08B             B        ??mbedtls_rsa_rsaes_oaep_decrypt_3
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_2: (+1)
   \   00000046   0xA9FF             ADD      R1,SP,#+1020
   \   00000048   0x3180             ADDS     R1,R1,#+128
   \   0000004A   0x6809             LDR      R1,[R1, #+0]
    825          
    826              /*
    827               * RSA operation
    828               */
    829              ret = ( mode == MBEDTLS_RSA_PUBLIC )
    830                    ? mbedtls_rsa_public(  ctx, input, buf )
    831                    : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   \   0000004C   0x2E00             CMP      R6,#+0
   \   0000004E   0xD104             BNE      ??mbedtls_rsa_rsaes_oaep_decrypt_4
   \   00000050   0xAA15             ADD      R2,SP,#+84
   \   00000052   0x0028             MOVS     R0,R5
   \   00000054   0x.... 0x....      BL       mbedtls_rsa_public
   \   00000058   0xE009             B        ??mbedtls_rsa_rsaes_oaep_decrypt_5
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_4: (+1)
   \   0000005A   0xA815             ADD      R0,SP,#+84
   \   0000005C   0x9000             STR      R0,[SP, #+0]
   \   0000005E   0x000B             MOVS     R3,R1
   \   00000060   0xAAFF             ADD      R2,SP,#+1020
   \   00000062   0x6DD2             LDR      R2,[R2, #+92]
   \   00000064   0xA9FF             ADD      R1,SP,#+1020
   \   00000066   0x6D89             LDR      R1,[R1, #+88]
   \   00000068   0x0028             MOVS     R0,R5
   \   0000006A   0x.... 0x....      BL       mbedtls_rsa_private
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_5: (+1)
   \   0000006E   0x0005             MOVS     R5,R0
    832          
    833              if( ret != 0 )
   \   00000070   0xD174             BNE      ??mbedtls_rsa_rsaes_oaep_decrypt_6
    834                  goto cleanup;
    835          
    836              /*
    837               * Unmask data and generate lHash
    838               */
    839              mbedtls_md_init( &md_ctx );
   \   00000072   0xA802             ADD      R0,SP,#+8
   \   00000074   0x.... 0x....      BL       mbedtls_md_init
    840              if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   \   00000078   0x2200             MOVS     R2,#+0
   \   0000007A   0x0039             MOVS     R1,R7
   \   0000007C   0xA802             ADD      R0,SP,#+8
   \   0000007E   0x.... 0x....      BL       mbedtls_md_setup
   \   00000082   0x0005             MOVS     R5,R0
   \   00000084   0xD003             BEQ      ??mbedtls_rsa_rsaes_oaep_decrypt_7
    841              {
    842                  mbedtls_md_free( &md_ctx );
   \   00000086   0xA802             ADD      R0,SP,#+8
   \   00000088   0x.... 0x....      BL       mbedtls_md_free
    843                  goto cleanup;
   \   0000008C   0xE066             B        ??mbedtls_rsa_rsaes_oaep_decrypt_6
    844              }
    845          
    846          
    847              /* Generate lHash */
    848              mbedtls_md( md_info, label, label_len, lhash );
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_7: (+1)
   \   0000008E   0xAB05             ADD      R3,SP,#+20
   \   00000090   0xAAFF             ADD      R2,SP,#+1020
   \   00000092   0x6F92             LDR      R2,[R2, #+120]
   \   00000094   0xA9FF             ADD      R1,SP,#+1020
   \   00000096   0x6F49             LDR      R1,[R1, #+116]
   \   00000098   0x0038             MOVS     R0,R7
   \   0000009A   0x.... 0x....      BL       mbedtls_md
    849          
    850              /* seed: Apply seedMask to maskedSeed */
    851              mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
    852                         &md_ctx );
   \   0000009E   0xAD15             ADD      R5,SP,#+84
   \   000000A0   0x192E             ADDS     R6,R5,R4
   \   000000A2   0x9801             LDR      R0,[SP, #+4]
   \   000000A4   0x1B07             SUBS     R7,R0,R4
   \   000000A6   0x1E7F             SUBS     R7,R7,#+1
   \   000000A8   0xA802             ADD      R0,SP,#+8
   \   000000AA   0x9000             STR      R0,[SP, #+0]
   \   000000AC   0x003B             MOVS     R3,R7
   \   000000AE   0x1C72             ADDS     R2,R6,#+1
   \   000000B0   0x0021             MOVS     R1,R4
   \   000000B2   0x1C68             ADDS     R0,R5,#+1
   \   000000B4   0x.... 0x....      BL       mgf_mask
    853          
    854              /* DB: Apply dbMask to maskedDB */
    855              mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
    856                         &md_ctx );
   \   000000B8   0xA802             ADD      R0,SP,#+8
   \   000000BA   0x9000             STR      R0,[SP, #+0]
   \   000000BC   0x0023             MOVS     R3,R4
   \   000000BE   0x1C6A             ADDS     R2,R5,#+1
   \   000000C0   0x0039             MOVS     R1,R7
   \   000000C2   0x1C70             ADDS     R0,R6,#+1
   \   000000C4   0x.... 0x....      BL       mgf_mask
    857          
    858              mbedtls_md_free( &md_ctx );
   \   000000C8   0xA802             ADD      R0,SP,#+8
   \   000000CA   0x.... 0x....      BL       mbedtls_md_free
    859          
    860              /*
    861               * Check contents, in "constant-time"
    862               */
    863              p = buf;
    864              bad = 0;
    865          
    866              bad |= *p++; /* First byte must be 0 */
   \   000000CE   0x7828             LDRB     R0,[R5, #+0]
    867          
    868              p += hlen; /* Skip seed */
   \   000000D0   0x1C71             ADDS     R1,R6,#+1
    869          
    870              /* Check lHash */
    871              for( i = 0; i < hlen; i++ )
   \   000000D2   0x2C00             CMP      R4,#+0
   \   000000D4   0xD00A             BEQ      ??mbedtls_rsa_rsaes_oaep_decrypt_8
   \   000000D6   0xAA05             ADD      R2,SP,#+20
   \   000000D8   0x0023             MOVS     R3,R4
    872                  bad |= lhash[i] ^ *p++;
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_9: (+1)
   \   000000DA   0x0006             MOVS     R6,R0
   \   000000DC   0x7815             LDRB     R5,[R2, #+0]
   \   000000DE   0x7808             LDRB     R0,[R1, #+0]
   \   000000E0   0x4068             EORS     R0,R0,R5
   \   000000E2   0x4330             ORRS     R0,R0,R6
   \   000000E4   0x1C49             ADDS     R1,R1,#+1
   \   000000E6   0x1C52             ADDS     R2,R2,#+1
   \   000000E8   0x1E5B             SUBS     R3,R3,#+1
   \   000000EA   0xD1F6             BNE      ??mbedtls_rsa_rsaes_oaep_decrypt_9
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_8: (+1)
   \   000000EC   0x2600             MOVS     R6,#+0
    873          
    874              /* Get zero-padding len, but always read till end of buffer
    875               * (minus one, for the 01 byte) */
    876              pad_len = 0;
    877              pad_done = 0;
   \   000000EE   0x2200             MOVS     R2,#+0
    878              for( i = 0; i < ilen - 2 * hlen - 2; i++ )
   \   000000F0   0x9B01             LDR      R3,[SP, #+4]
   \   000000F2   0x0064             LSLS     R4,R4,#+1
   \   000000F4   0x1B1D             SUBS     R5,R3,R4
   \   000000F6   0x1EAD             SUBS     R5,R5,#+2
   \   000000F8   0x2301             MOVS     R3,#+1
   \   000000FA   0x2D00             CMP      R5,#+0
   \   000000FC   0xD010             BEQ      ??mbedtls_rsa_rsaes_oaep_decrypt_10
   \   000000FE   0x000C             MOVS     R4,R1
    879              {
    880                  pad_done |= p[i];
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_11: (+1)
   \   00000100   0x0017             MOVS     R7,R2
   \   00000102   0x7822             LDRB     R2,[R4, #+0]
   \   00000104   0x433A             ORRS     R2,R2,R7
    881                  pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   \   00000106   0x9600             STR      R6,[SP, #+0]
   \   00000108   0x0016             MOVS     R6,R2
   \   0000010A   0x4277             RSBS     R7,R6,#+0
   \   0000010C   0x4337             ORRS     R7,R7,R6
   \   0000010E   0x063F             LSLS     R7,R7,#+24
   \   00000110   0x0FFF             LSRS     R7,R7,#+31
   \   00000112   0x2601             MOVS     R6,#+1
   \   00000114   0x407E             EORS     R6,R6,R7
   \   00000116   0x9F00             LDR      R7,[SP, #+0]
   \   00000118   0x19BE             ADDS     R6,R7,R6
    882              }
   \   0000011A   0x1C64             ADDS     R4,R4,#+1
   \   0000011C   0x1E6D             SUBS     R5,R5,#+1
   \   0000011E   0xD1EF             BNE      ??mbedtls_rsa_rsaes_oaep_decrypt_11
    883          
    884              p += pad_len;
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_10: (+1)
   \   00000120   0x1989             ADDS     R1,R1,R6
    885              bad |= *p++ ^ 0x01;
   \   00000122   0x780A             LDRB     R2,[R1, #+0]
   \   00000124   0x4053             EORS     R3,R3,R2
   \   00000126   0x4303             ORRS     R3,R3,R0
   \   00000128   0xB2DB             UXTB     R3,R3
   \   0000012A   0x1C49             ADDS     R1,R1,#+1
    886          
    887              /*
    888               * The only information "leaked" is whether the padding was correct or not
    889               * (eg, no data is copied if it was not correct). This meets the
    890               * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
    891               * the different error conditions.
    892               */
    893              if( bad != 0 )
   \   0000012C   0x2B00             CMP      R3,#+0
   \   0000012E   0xD001             BEQ      ??mbedtls_rsa_rsaes_oaep_decrypt_12
    894              {
    895                  ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
   \   00000130   0x....             LDR      R5,??DataTable26  ;; 0xffffbf00
    896                  goto cleanup;
   \   00000132   0xE013             B        ??mbedtls_rsa_rsaes_oaep_decrypt_6
    897              }
    898          
    899              if( ilen - ( p - buf ) > output_max_len )
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_12: (+1)
   \   00000134   0x9801             LDR      R0,[SP, #+4]
   \   00000136   0x1A40             SUBS     R0,R0,R1
   \   00000138   0xAA15             ADD      R2,SP,#+84
   \   0000013A   0x1882             ADDS     R2,R0,R2
   \   0000013C   0xA8FF             ADD      R0,SP,#+1020
   \   0000013E   0x3088             ADDS     R0,R0,#+136
   \   00000140   0x6800             LDR      R0,[R0, #+0]
   \   00000142   0x4290             CMP      R0,R2
   \   00000144   0xD201             BCS      ??mbedtls_rsa_rsaes_oaep_decrypt_13
    900              {
    901                  ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
   \   00000146   0x....             LDR      R5,??DataTable27  ;; 0xffffbc00
    902                  goto cleanup;
   \   00000148   0xE008             B        ??mbedtls_rsa_rsaes_oaep_decrypt_6
    903              }
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_13: (+1)
   \   0000014A   0xA8FF             ADD      R0,SP,#+1020
   \   0000014C   0x6FC0             LDR      R0,[R0, #+124]
    904          
    905              *olen = ilen - (p - buf);
   \   0000014E   0x6002             STR      R2,[R0, #+0]
    906              memcpy( output, p, *olen );
   \   00000150   0xA8FF             ADD      R0,SP,#+1020
   \   00000152   0x3084             ADDS     R0,R0,#+132
   \   00000154   0x6800             LDR      R0,[R0, #+0]
   \   00000156   0x.... 0x....      BL       __aeabi_memcpy
    907              ret = 0;
   \   0000015A   0x2500             MOVS     R5,#+0
    908          
    909          cleanup:
    910              mbedtls_zeroize( buf, sizeof( buf ) );
    911              mbedtls_zeroize( lhash, sizeof( lhash ) );
    912          
    913              return( ret );
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_6: (+1)
   \   0000015C   0x0028             MOVS     R0,R5
   \                     ??mbedtls_rsa_rsaes_oaep_decrypt_3: (+1)
   \   0000015E   0x....             LDR      R1,??DataTable27_1  ;; 0x45c
   \   00000160   0x448D             ADD      SP,SP,R1
   \   00000162   0xBDF0             POP      {R4-R7,PC}       ;; return
    914          }
    915          #endif /* MBEDTLS_PKCS1_V21 */
    916          
    917          #if defined(MBEDTLS_PKCS1_V15)
    918          /*
    919           * Implementation of the PKCS#1 v2.1 RSAES-PKCS1-V1_5-DECRYPT function
    920           */

   \                                 In section .text, align 2, keep-with-next
    921          int mbedtls_rsa_rsaes_pkcs1_v15_decrypt( mbedtls_rsa_context *ctx,
    922                                           int (*f_rng)(void *, unsigned char *, size_t),
    923                                           void *p_rng,
    924                                           int mode, size_t *olen,
    925                                           const unsigned char *input,
    926                                           unsigned char *output,
    927                                           size_t output_max_len)
    928          {
   \                     mbedtls_rsa_rsaes_pkcs1_v15_decrypt: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x....             LDR      R4,??DataTable27_2  ;; 0xfffffbf4
   \   00000004   0x44A5             ADD      SP,SP,R4
   \   00000006   0x001E             MOVS     R6,R3
   \   00000008   0x2400             MOVS     R4,#+0
    929              int ret;
    930              size_t ilen, pad_count = 0, i;
    931              unsigned char *p, bad, pad_done = 0;
   \   0000000A   0x2500             MOVS     R5,#+0
    932              unsigned char buf[MBEDTLS_MPI_MAX_SIZE];
    933          
    934              if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   \   0000000C   0x2E01             CMP      R6,#+1
   \   0000000E   0xD103             BNE      ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_0
   \   00000010   0x23A4             MOVS     R3,#+164
   \   00000012   0x58C3             LDR      R3,[R0, R3]
   \   00000014   0x2B00             CMP      R3,#+0
   \   00000016   0xD105             BNE      ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_1
    935                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    936          
    937              ilen = ctx->len;
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_0: (+1)
   \   00000018   0x6843             LDR      R3,[R0, #+4]
   \   0000001A   0x9301             STR      R3,[SP, #+4]
    938          
    939              if( ilen < 16 || ilen > sizeof( buf ) )
   \   0000001C   0x3B10             SUBS     R3,R3,#+16
   \   0000001E   0x....             LDR      R7,??DataTable26_2  ;; 0x3f1
   \   00000020   0x42BB             CMP      R3,R7
   \   00000022   0xD301             BCC      ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_2
    940                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_1: (+1)
   \   00000024   0x....             LDR      R0,??DataTable26_3  ;; 0xffffbf80
   \   00000026   0xE06B             B        ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_3
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_2: (+1)
   \   00000028   0xABFF             ADD      R3,SP,#+1020
   \   0000002A   0x6A9B             LDR      R3,[R3, #+40]
    941          
    942              ret = ( mode == MBEDTLS_RSA_PUBLIC )
    943                    ? mbedtls_rsa_public(  ctx, input, buf )
    944                    : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
   \   0000002C   0x2E00             CMP      R6,#+0
   \   0000002E   0xD104             BNE      ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_4
   \   00000030   0xAA02             ADD      R2,SP,#+8
   \   00000032   0x0019             MOVS     R1,R3
   \   00000034   0x.... 0x....      BL       mbedtls_rsa_public
   \   00000038   0xE003             B        ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_5
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_4: (+1)
   \   0000003A   0xAF02             ADD      R7,SP,#+8
   \   0000003C   0x9700             STR      R7,[SP, #+0]
   \   0000003E   0x.... 0x....      BL       mbedtls_rsa_private
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_5: (+1)
   \   00000042   0x0007             MOVS     R7,R0
    945          
    946              if( ret != 0 )
   \   00000044   0xD15B             BNE      ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_6
   \   00000046   0x4668             MOV      R0,SP
   \   00000048   0x7A01             LDRB     R1,[R0, #+8]
    947                  goto cleanup;
    948          
    949              p = buf;
    950              bad = 0;
    951          
    952              /*
    953               * Check and get padding len in "constant-time"
    954               */
    955              bad |= *p++; /* First byte must be 0 */
    956          
    957              /* This test does not depend on secret data */
    958              if( mode == MBEDTLS_RSA_PRIVATE )
   \   0000004A   0x9A01             LDR      R2,[SP, #+4]
   \   0000004C   0x1ED2             SUBS     R2,R2,#+3
   \   0000004E   0x2E01             CMP      R6,#+1
   \   00000050   0xA802             ADD      R0,SP,#+8
   \   00000052   0xD11F             BNE      ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_7
    959              {
    960                  bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
   \   00000054   0x7843             LDRB     R3,[R0, #+1]
   \   00000056   0x2002             MOVS     R0,#+2
   \   00000058   0x4058             EORS     R0,R0,R3
   \   0000005A   0x4308             ORRS     R0,R0,R1
    961          
    962                  /* Get padding len, but always read till end of buffer
    963                   * (minus one, for the 00 byte) */
    964                  for( i = 0; i < ilen - 3; i++ )
   \   0000005C   0x2A00             CMP      R2,#+0
   \   0000005E   0xD031             BEQ      ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_8
   \   00000060   0xA902             ADD      R1,SP,#+8
   \   00000062   0x1C89             ADDS     R1,R1,#+2
    965                  {
    966                      pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_9: (+1)
   \   00000064   0x780E             LDRB     R6,[R1, #+0]
   \   00000066   0x2301             MOVS     R3,#+1
   \   00000068   0x46AC             MOV      R12,R5
   \   0000006A   0x4275             RSBS     R5,R6,#+0
   \   0000006C   0x4335             ORRS     R5,R5,R6
   \   0000006E   0x062E             LSLS     R6,R5,#+24
   \   00000070   0x0FF6             LSRS     R6,R6,#+31
   \   00000072   0x2501             MOVS     R5,#+1
   \   00000074   0x4075             EORS     R5,R5,R6
   \   00000076   0x4666             MOV      R6,R12
   \   00000078   0x4335             ORRS     R5,R5,R6
    967                      pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
   \   0000007A   0x9400             STR      R4,[SP, #+0]
   \   0000007C   0x002C             MOVS     R4,R5
   \   0000007E   0x4266             RSBS     R6,R4,#+0
   \   00000080   0x4326             ORRS     R6,R6,R4
   \   00000082   0x0634             LSLS     R4,R6,#+24
   \   00000084   0x0FE4             LSRS     R4,R4,#+31
   \   00000086   0x4063             EORS     R3,R3,R4
   \   00000088   0x9C00             LDR      R4,[SP, #+0]
   \   0000008A   0x18E4             ADDS     R4,R4,R3
    968                  }
   \   0000008C   0x1C49             ADDS     R1,R1,#+1
   \   0000008E   0x1E52             SUBS     R2,R2,#+1
   \   00000090   0xD018             BEQ      ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_8
   \   00000092   0xE7E7             B        ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_9
    969          
    970                  p += pad_count;
    971                  bad |= *p++; /* Must be zero */
    972              }
    973              else
    974              {
    975                  bad |= *p++ ^ MBEDTLS_RSA_SIGN;
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_7: (+1)
   \   00000094   0x7846             LDRB     R6,[R0, #+1]
   \   00000096   0x2001             MOVS     R0,#+1
   \   00000098   0x4070             EORS     R0,R0,R6
   \   0000009A   0x4308             ORRS     R0,R0,R1
    976          
    977                  /* Get padding len, but always read till end of buffer
    978                   * (minus one, for the 00 byte) */
    979                  for( i = 0; i < ilen - 3; i++ )
   \   0000009C   0x2A00             CMP      R2,#+0
   \   0000009E   0xD011             BEQ      ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_8
   \   000000A0   0xA902             ADD      R1,SP,#+8
   \   000000A2   0x1C8E             ADDS     R6,R1,#+2
    980                  {
    981                      pad_done |= ( p[i] != 0xFF );
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_10: (+1)
   \   000000A4   0x7831             LDRB     R1,[R6, #+0]
   \   000000A6   0x29FF             CMP      R1,#+255
   \   000000A8   0xD001             BEQ      ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_11
   \   000000AA   0x2101             MOVS     R1,#+1
   \   000000AC   0xE000             B        ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_12
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_11: (+1)
   \   000000AE   0x2100             MOVS     R1,#+0
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_12: (+1)
   \   000000B0   0x46AC             MOV      R12,R5
   \   000000B2   0x000D             MOVS     R5,R1
   \   000000B4   0x4661             MOV      R1,R12
   \   000000B6   0x430D             ORRS     R5,R5,R1
    982                      pad_count += ( pad_done == 0 );
   \   000000B8   0x0629             LSLS     R1,R5,#+24
   \   000000BA   0xD100             BNE      ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_13
   \   000000BC   0x1C64             ADDS     R4,R4,#+1
    983                  }
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_13: (+1)
   \   000000BE   0x1C76             ADDS     R6,R6,#+1
   \   000000C0   0x1E52             SUBS     R2,R2,#+1
   \   000000C2   0xD1EF             BNE      ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_10
    984          
    985                  p += pad_count;
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_8: (+1)
   \   000000C4   0xA902             ADD      R1,SP,#+8
   \   000000C6   0x1909             ADDS     R1,R1,R4
    986                  bad |= *p++; /* Must be zero */
   \   000000C8   0x788A             LDRB     R2,[R1, #+2]
   \   000000CA   0x4302             ORRS     R2,R2,R0
   \   000000CC   0x1CC9             ADDS     R1,R1,#+3
    987              }
    988          
    989              bad |= ( pad_count < 8 );
   \   000000CE   0x2C08             CMP      R4,#+8
   \   000000D0   0x4180             SBCS     R0,R0,R0
   \   000000D2   0x0FC0             LSRS     R0,R0,#+31
    990          
    991              if( bad )
   \   000000D4   0x4310             ORRS     R0,R0,R2
   \   000000D6   0xD001             BEQ      ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_14
    992              {
    993                  ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
   \   000000D8   0x....             LDR      R7,??DataTable26  ;; 0xffffbf00
    994                  goto cleanup;
   \   000000DA   0xE010             B        ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_6
    995              }
    996          
    997              if( ilen - ( p - buf ) > output_max_len )
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_14: (+1)
   \   000000DC   0x9801             LDR      R0,[SP, #+4]
   \   000000DE   0x1A40             SUBS     R0,R0,R1
   \   000000E0   0xAA02             ADD      R2,SP,#+8
   \   000000E2   0x1882             ADDS     R2,R0,R2
   \   000000E4   0xA8FF             ADD      R0,SP,#+1020
   \   000000E6   0x6B00             LDR      R0,[R0, #+48]
   \   000000E8   0x4290             CMP      R0,R2
   \   000000EA   0xD201             BCS      ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_15
    998              {
    999                  ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
   \   000000EC   0x....             LDR      R7,??DataTable27  ;; 0xffffbc00
   1000                  goto cleanup;
   \   000000EE   0xE006             B        ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_6
   1001              }
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_15: (+1)
   \   000000F0   0xA8FF             ADD      R0,SP,#+1020
   \   000000F2   0x6A40             LDR      R0,[R0, #+36]
   1002          
   1003              *olen = ilen - (p - buf);
   \   000000F4   0x6002             STR      R2,[R0, #+0]
   1004              memcpy( output, p, *olen );
   \   000000F6   0xA8FF             ADD      R0,SP,#+1020
   \   000000F8   0x6AC0             LDR      R0,[R0, #+44]
   \   000000FA   0x.... 0x....      BL       __aeabi_memcpy
   1005              ret = 0;
   1006          
   1007          cleanup:
   1008              mbedtls_zeroize( buf, sizeof( buf ) );
   1009          
   1010              return( ret );
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_6: (+1)
   \   000000FE   0x0038             MOVS     R0,R7
   \                     ??mbedtls_rsa_rsaes_pkcs1_v15_decrypt_3: (+1)
   \   00000100   0x....             LDR      R1,??DataTable27_3  ;; 0x40c
   \   00000102   0x448D             ADD      SP,SP,R1
   \   00000104   0xBDF0             POP      {R4-R7,PC}       ;; return
   1011          }
   1012          #endif /* MBEDTLS_PKCS1_V15 */
   1013          
   1014          /*
   1015           * Do an RSA operation, then remove the message padding
   1016           */

   \                                 In section .text, align 2, keep-with-next
   1017          int mbedtls_rsa_pkcs1_decrypt( mbedtls_rsa_context *ctx,
   1018                                 int (*f_rng)(void *, unsigned char *, size_t),
   1019                                 void *p_rng,
   1020                                 int mode, size_t *olen,
   1021                                 const unsigned char *input,
   1022                                 unsigned char *output,
   1023                                 size_t output_max_len)
   1024          {
   \                     mbedtls_rsa_pkcs1_decrypt: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x990C             LDR      R1,[SP, #+48]
   \   00000006   0x9C0D             LDR      R4,[SP, #+52]
   \   00000008   0x9D0E             LDR      R5,[SP, #+56]
   \   0000000A   0x9E0F             LDR      R6,[SP, #+60]
   1025              switch( ctx->padding )
   \   0000000C   0x27A4             MOVS     R7,#+164
   \   0000000E   0x59C7             LDR      R7,[R0, R7]
   \   00000010   0x2F00             CMP      R7,#+0
   \   00000012   0xD002             BEQ      ??mbedtls_rsa_pkcs1_decrypt_0
   \   00000014   0x2F01             CMP      R7,#+1
   \   00000016   0xD008             BEQ      ??mbedtls_rsa_pkcs1_decrypt_1
   \   00000018   0xE012             B        ??mbedtls_rsa_pkcs1_decrypt_2
   1026              {
   1027          #if defined(MBEDTLS_PKCS1_V15)
   1028                  case MBEDTLS_RSA_PKCS_V15:
   1029                      return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
   1030                                                          input, output, output_max_len );
   \                     ??mbedtls_rsa_pkcs1_decrypt_0: (+1)
   \   0000001A   0x9603             STR      R6,[SP, #+12]
   \   0000001C   0x9502             STR      R5,[SP, #+8]
   \   0000001E   0x9401             STR      R4,[SP, #+4]
   \   00000020   0x9100             STR      R1,[SP, #+0]
   \   00000022   0x9906             LDR      R1,[SP, #+24]
   \   00000024   0x.... 0x....      BL       mbedtls_rsa_rsaes_pkcs1_v15_decrypt
   \   00000028   0xE00B             B        ??mbedtls_rsa_pkcs1_decrypt_3
   1031          #endif
   1032          
   1033          #if defined(MBEDTLS_PKCS1_V21)
   1034                  case MBEDTLS_RSA_PKCS_V21:
   1035                      return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
   1036                                                     olen, input, output,
   1037                                                     output_max_len );
   \                     ??mbedtls_rsa_pkcs1_decrypt_1: (+1)
   \   0000002A   0x9605             STR      R6,[SP, #+20]
   \   0000002C   0x9504             STR      R5,[SP, #+16]
   \   0000002E   0x9403             STR      R4,[SP, #+12]
   \   00000030   0x9102             STR      R1,[SP, #+8]
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0x9101             STR      R1,[SP, #+4]
   \   00000036   0x9100             STR      R1,[SP, #+0]
   \   00000038   0x9906             LDR      R1,[SP, #+24]
   \   0000003A   0x.... 0x....      BL       mbedtls_rsa_rsaes_oaep_decrypt
   \   0000003E   0xE000             B        ??mbedtls_rsa_pkcs1_decrypt_3
   1038          #endif
   1039          
   1040                  default:
   1041                      return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   \                     ??mbedtls_rsa_pkcs1_decrypt_2: (+1)
   \   00000040   0x....             LDR      R0,??DataTable27_4  ;; 0xffffbf00
   \                     ??mbedtls_rsa_pkcs1_decrypt_3: (+1)
   \   00000042   0xB007             ADD      SP,SP,#+28
   \   00000044   0xBDF0             POP      {R4-R7,PC}       ;; return
   1042              }
   1043          }
   1044          
   1045          #if defined(MBEDTLS_PKCS1_V21)
   1046          /*
   1047           * Implementation of the PKCS#1 v2.1 RSASSA-PSS-SIGN function
   1048           */

   \                                 In section .text, align 2, keep-with-next
   1049          int mbedtls_rsa_rsassa_pss_sign( mbedtls_rsa_context *ctx,
   1050                                   int (*f_rng)(void *, unsigned char *, size_t),
   1051                                   void *p_rng,
   1052                                   int mode,
   1053                                   mbedtls_md_type_t md_alg,
   1054                                   unsigned int hashlen,
   1055                                   const unsigned char *hash,
   1056                                   unsigned char *sig )
   1057          {
   \                     mbedtls_rsa_rsassa_pss_sign: (+1)
   \   00000000   0xB5FF             PUSH     {R0-R7,LR}
   \   00000002   0xB097             SUB      SP,SP,#+92
   1058              size_t olen;
   1059              unsigned char *p = sig;
   1060              unsigned char salt[MBEDTLS_MD_MAX_SIZE];
   1061              unsigned int slen, hlen, offset = 0;
   \   00000004   0x2700             MOVS     R7,#+0
   1062              int ret;
   1063              size_t msb;
   1064              const mbedtls_md_info_t *md_info;
   1065              mbedtls_md_context_t md_ctx;
   1066          
   1067              if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   \   00000006   0x2B01             CMP      R3,#+1
   \   00000008   0xD103             BNE      ??mbedtls_rsa_rsassa_pss_sign_0
   \   0000000A   0x21A4             MOVS     R1,#+164
   \   0000000C   0x5840             LDR      R0,[R0, R1]
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD121             BNE      ??mbedtls_rsa_rsassa_pss_sign_1
   1068                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1069          
   1070              if( f_rng == NULL )
   \                     ??mbedtls_rsa_rsassa_pss_sign_0: (+1)
   \   00000012   0x9818             LDR      R0,[SP, #+96]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD01E             BEQ      ??mbedtls_rsa_rsassa_pss_sign_1
   1071                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1072          
   1073              olen = ctx->len;
   \   00000018   0x9817             LDR      R0,[SP, #+92]
   \   0000001A   0x6840             LDR      R0,[R0, #+4]
   \   0000001C   0x9002             STR      R0,[SP, #+8]
   \   0000001E   0x9820             LDR      R0,[SP, #+128]
   1074          
   1075              if( md_alg != MBEDTLS_MD_NONE )
   \   00000020   0x0001             MOVS     R1,R0
   \   00000022   0xD006             BEQ      ??mbedtls_rsa_rsassa_pss_sign_2
   1076              {
   1077                  /* Gather length of hash to sign */
   1078                  md_info = mbedtls_md_info_from_type( md_alg );
   \   00000024   0x.... 0x....      BL       mbedtls_md_info_from_type
   \   00000028   0x0004             MOVS     R4,R0
   1079                  if( md_info == NULL )
   \   0000002A   0xD014             BEQ      ??mbedtls_rsa_rsassa_pss_sign_1
   1080                      return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1081          
   1082                  hashlen = mbedtls_md_get_size( md_info );
   \   0000002C   0x.... 0x....      BL       mbedtls_md_get_size
   \   00000030   0x9021             STR      R0,[SP, #+132]
   1083              }
   1084          
   1085              md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
   \                     ??mbedtls_rsa_rsassa_pss_sign_2: (+1)
   \   00000032   0x9817             LDR      R0,[SP, #+92]
   \   00000034   0x30A4             ADDS     R0,R0,#+164
   \   00000036   0x6840             LDR      R0,[R0, #+4]
   \   00000038   0xB2C0             UXTB     R0,R0
   \   0000003A   0x.... 0x....      BL       mbedtls_md_info_from_type
   \   0000003E   0x0004             MOVS     R4,R0
   1086              if( md_info == NULL )
   \   00000040   0xD009             BEQ      ??mbedtls_rsa_rsassa_pss_sign_1
   1087                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1088          
   1089              hlen = mbedtls_md_get_size( md_info );
   \   00000042   0x.... 0x....      BL       mbedtls_md_get_size
   \   00000046   0x9001             STR      R0,[SP, #+4]
   1090              slen = hlen;
   1091          
   1092              if( olen < hlen + slen + 2 )
   \   00000048   0x0040             LSLS     R0,R0,#+1
   \   0000004A   0x9000             STR      R0,[SP, #+0]
   \   0000004C   0x9802             LDR      R0,[SP, #+8]
   \   0000004E   0x9900             LDR      R1,[SP, #+0]
   \   00000050   0x1C89             ADDS     R1,R1,#+2
   \   00000052   0x4288             CMP      R0,R1
   \   00000054   0xD201             BCS      ??mbedtls_rsa_rsassa_pss_sign_3
   1093                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \                     ??mbedtls_rsa_rsassa_pss_sign_1: (+1)
   \   00000056   0x....             LDR      R0,??DataTable29  ;; 0xffffbf80
   \   00000058   0xE07F             B        ??mbedtls_rsa_rsassa_pss_sign_4
   \                     ??mbedtls_rsa_rsassa_pss_sign_3: (+1)
   \   0000005A   0x9E23             LDR      R6,[SP, #+140]
   1094          
   1095              memset( sig, 0, olen );
   \   0000005C   0x4601             MOV      R1,R0
   \   0000005E   0x0030             MOVS     R0,R6
   \   00000060   0x.... 0x....      BL       __aeabi_memclr
   1096          
   1097              /* Generate salt of length slen */
   1098              if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
   \   00000064   0x9A01             LDR      R2,[SP, #+4]
   \   00000066   0xA907             ADD      R1,SP,#+28
   \   00000068   0x9819             LDR      R0,[SP, #+100]
   \   0000006A   0x9B18             LDR      R3,[SP, #+96]
   \   0000006C   0x4798             BLX      R3
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD002             BEQ      ??mbedtls_rsa_rsassa_pss_sign_5
   1099                  return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
   \   00000072   0x....             LDR      R1,??DataTable29_1  ;; 0xffffbb80
   \   00000074   0x1840             ADDS     R0,R0,R1
   \   00000076   0xE070             B        ??mbedtls_rsa_rsassa_pss_sign_4
   1100          
   1101              /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
   1102              msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   \                     ??mbedtls_rsa_rsassa_pss_sign_5: (+1)
   \   00000078   0x9817             LDR      R0,[SP, #+92]
   \   0000007A   0x3008             ADDS     R0,R0,#+8
   \   0000007C   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   00000080   0x0005             MOVS     R5,R0
   1103              p += olen - hlen * 2 - 2;
   \   00000082   0x9802             LDR      R0,[SP, #+8]
   \   00000084   0x9900             LDR      R1,[SP, #+0]
   \   00000086   0x1A40             SUBS     R0,R0,R1
   \   00000088   0x1830             ADDS     R0,R6,R0
   \   0000008A   0x1E80             SUBS     R0,R0,#+2
   \   0000008C   0x2101             MOVS     R1,#+1
   \   0000008E   0x7001             STRB     R1,[R0, #+0]
   \   00000090   0x1C40             ADDS     R0,R0,#+1
   \   00000092   0x9000             STR      R0,[SP, #+0]
   1104              *p++ = 0x01;
   1105              memcpy( p, salt, slen );
   \   00000094   0x9A01             LDR      R2,[SP, #+4]
   \   00000096   0xA907             ADD      R1,SP,#+28
   \   00000098   0x.... 0x....      BL       __aeabi_memcpy
   1106              p += slen;
   \   0000009C   0x9800             LDR      R0,[SP, #+0]
   \   0000009E   0x9901             LDR      R1,[SP, #+4]
   \   000000A0   0x1840             ADDS     R0,R0,R1
   \   000000A2   0x9003             STR      R0,[SP, #+12]
   1107          
   1108              mbedtls_md_init( &md_ctx );
   \   000000A4   0xA804             ADD      R0,SP,#+16
   \   000000A6   0x.... 0x....      BL       mbedtls_md_init
   1109              if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   \   000000AA   0x2200             MOVS     R2,#+0
   \   000000AC   0x0021             MOVS     R1,R4
   \   000000AE   0xA804             ADD      R0,SP,#+16
   \   000000B0   0x.... 0x....      BL       mbedtls_md_setup
   \   000000B4   0x0004             MOVS     R4,R0
   \   000000B6   0xA804             ADD      R0,SP,#+16
   \   000000B8   0xD003             BEQ      ??mbedtls_rsa_rsassa_pss_sign_6
   1110              {
   1111                  mbedtls_md_free( &md_ctx );
   \   000000BA   0x.... 0x....      BL       mbedtls_md_free
   1112                  /* No need to zeroize salt: we didn't use it. */
   1113                  return( ret );
   \   000000BE   0x0020             MOVS     R0,R4
   \   000000C0   0xE04B             B        ??mbedtls_rsa_rsassa_pss_sign_4
   1114              }
   1115          
   1116              /* Generate H = Hash( M' ) */
   1117              mbedtls_md_starts( &md_ctx );
   \                     ??mbedtls_rsa_rsassa_pss_sign_6: (+1)
   \   000000C2   0x.... 0x....      BL       mbedtls_md_starts
   1118              mbedtls_md_update( &md_ctx, p, 8 );
   \   000000C6   0x2208             MOVS     R2,#+8
   \   000000C8   0x9903             LDR      R1,[SP, #+12]
   \   000000CA   0xA804             ADD      R0,SP,#+16
   \   000000CC   0x.... 0x....      BL       mbedtls_md_update
   1119              mbedtls_md_update( &md_ctx, hash, hashlen );
   \   000000D0   0x9A21             LDR      R2,[SP, #+132]
   \   000000D2   0x9922             LDR      R1,[SP, #+136]
   \   000000D4   0xA804             ADD      R0,SP,#+16
   \   000000D6   0x.... 0x....      BL       mbedtls_md_update
   1120              mbedtls_md_update( &md_ctx, salt, slen );
   \   000000DA   0x9A01             LDR      R2,[SP, #+4]
   \   000000DC   0xA907             ADD      R1,SP,#+28
   \   000000DE   0xA804             ADD      R0,SP,#+16
   \   000000E0   0x.... 0x....      BL       mbedtls_md_update
   1121              mbedtls_md_finish( &md_ctx, p );
   \   000000E4   0x9903             LDR      R1,[SP, #+12]
   \   000000E6   0xA804             ADD      R0,SP,#+16
   \   000000E8   0x.... 0x....      BL       mbedtls_md_finish
   1122              mbedtls_zeroize( salt, sizeof( salt ) );
   \   000000EC   0x2140             MOVS     R1,#+64
   \   000000EE   0xA807             ADD      R0,SP,#+28
   \   000000F0   0x.... 0x....      BL       __aeabi_memclr4
   1123          
   1124              /* Compensate for boundary condition when applying mask */
   1125              if( msb % 8 == 0 )
   \   000000F4   0x1E6D             SUBS     R5,R5,#+1
   \   000000F6   0x0768             LSLS     R0,R5,#+29
   \   000000F8   0xD100             BNE      ??mbedtls_rsa_rsassa_pss_sign_7
   1126                  offset = 1;
   \   000000FA   0x2701             MOVS     R7,#+1
   1127          
   1128              /* maskedDB: Apply dbMask to DB */
   1129              mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen, &md_ctx );
   \                     ??mbedtls_rsa_rsassa_pss_sign_7: (+1)
   \   000000FC   0xA804             ADD      R0,SP,#+16
   \   000000FE   0x9000             STR      R0,[SP, #+0]
   \   00000100   0x9B01             LDR      R3,[SP, #+4]
   \   00000102   0x9A03             LDR      R2,[SP, #+12]
   \   00000104   0x9802             LDR      R0,[SP, #+8]
   \   00000106   0x1AC0             SUBS     R0,R0,R3
   \   00000108   0x1E40             SUBS     R0,R0,#+1
   \   0000010A   0x1BC1             SUBS     R1,R0,R7
   \   0000010C   0x19F0             ADDS     R0,R6,R7
   \   0000010E   0x.... 0x....      BL       mgf_mask
   1130          
   1131              mbedtls_md_free( &md_ctx );
   \   00000112   0xA804             ADD      R0,SP,#+16
   \   00000114   0x.... 0x....      BL       mbedtls_md_free
   1132          
   1133              msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   \   00000118   0x9817             LDR      R0,[SP, #+92]
   \   0000011A   0x3008             ADDS     R0,R0,#+8
   \   0000011C   0x.... 0x....      BL       mbedtls_mpi_bitlen
   1134              sig[0] &= 0xFF >> ( olen * 8 - msb );
   \   00000120   0x7831             LDRB     R1,[R6, #+0]
   \   00000122   0x22FF             MOVS     R2,#+255
   \   00000124   0x9B02             LDR      R3,[SP, #+8]
   \   00000126   0x00DB             LSLS     R3,R3,#+3
   \   00000128   0x1A18             SUBS     R0,R3,R0
   \   0000012A   0x1C40             ADDS     R0,R0,#+1
   \   0000012C   0x40C2             LSRS     R2,R2,R0
   \   0000012E   0x400A             ANDS     R2,R2,R1
   \   00000130   0x7032             STRB     R2,[R6, #+0]
   1135          
   1136              p += hlen;
   1137              *p++ = 0xBC;
   \   00000132   0x20BC             MOVS     R0,#+188
   \   00000134   0x9903             LDR      R1,[SP, #+12]
   \   00000136   0x9A01             LDR      R2,[SP, #+4]
   \   00000138   0x5488             STRB     R0,[R1, R2]
   1138          
   1139              return( ( mode == MBEDTLS_RSA_PUBLIC )
   1140                      ? mbedtls_rsa_public(  ctx, sig, sig )
   1141                      : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
   \   0000013A   0x981A             LDR      R0,[SP, #+104]
   \   0000013C   0x2800             CMP      R0,#+0
   \   0000013E   0xD105             BNE      ??mbedtls_rsa_rsassa_pss_sign_8
   \   00000140   0x0032             MOVS     R2,R6
   \   00000142   0x0031             MOVS     R1,R6
   \   00000144   0x9817             LDR      R0,[SP, #+92]
   \   00000146   0x.... 0x....      BL       mbedtls_rsa_public
   \   0000014A   0xE006             B        ??mbedtls_rsa_rsassa_pss_sign_4
   \                     ??mbedtls_rsa_rsassa_pss_sign_8: (+1)
   \   0000014C   0x9600             STR      R6,[SP, #+0]
   \   0000014E   0x0033             MOVS     R3,R6
   \   00000150   0x9A19             LDR      R2,[SP, #+100]
   \   00000152   0x9918             LDR      R1,[SP, #+96]
   \   00000154   0x9817             LDR      R0,[SP, #+92]
   \   00000156   0x.... 0x....      BL       mbedtls_rsa_private
   \                     ??mbedtls_rsa_rsassa_pss_sign_4: (+1)
   \   0000015A   0xB01B             ADD      SP,SP,#+108
   \   0000015C   0xBDF0             POP      {R4-R7,PC}       ;; return
   1142          }
   1143          #endif /* MBEDTLS_PKCS1_V21 */
   1144          
   1145          #if defined(MBEDTLS_PKCS1_V15)
   1146          /*
   1147           * Implementation of the PKCS#1 v2.1 RSASSA-PKCS1-V1_5-SIGN function
   1148           */
   1149          /*
   1150           * Do an RSA operation to sign the message digest
   1151           */

   \                                 In section .text, align 2, keep-with-next
   1152          int mbedtls_rsa_rsassa_pkcs1_v15_sign( mbedtls_rsa_context *ctx,
   1153                                         int (*f_rng)(void *, unsigned char *, size_t),
   1154                                         void *p_rng,
   1155                                         int mode,
   1156                                         mbedtls_md_type_t md_alg,
   1157                                         unsigned int hashlen,
   1158                                         const unsigned char *hash,
   1159                                         unsigned char *sig )
   1160          {
   \                     mbedtls_rsa_rsassa_pkcs1_v15_sign: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x0005             MOVS     R5,R0
   1161              size_t nb_pad, olen, oid_size = 0;
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0x9601             STR      R6,[SP, #+4]
   1162              unsigned char *p = sig;
   1163              const char *oid = NULL;
   \   0000000A   0x9603             STR      R6,[SP, #+12]
   1164              unsigned char *sig_try = NULL, *verif = NULL;
   1165              size_t i;
   1166              unsigned char diff;
   1167              volatile unsigned char diff_no_optimize;
   1168              int ret;
   1169          
   1170              if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   \   0000000C   0x9806             LDR      R0,[SP, #+24]
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD103             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_sign_0
   \   00000012   0x20A4             MOVS     R0,#+164
   \   00000014   0x5828             LDR      R0,[R5, R0]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD122             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_sign_1
   1171                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1172          
   1173              olen = ctx->len;
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_sign_0: (+1)
   \   0000001A   0x6868             LDR      R0,[R5, #+4]
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   1174              nb_pad = olen - 3;
   \   0000001E   0x1EC4             SUBS     R4,R0,#+3
   \   00000020   0x9F0D             LDR      R7,[SP, #+52]
   1175          
   1176              if( md_alg != MBEDTLS_MD_NONE )
   \   00000022   0xA80C             ADD      R0,SP,#+48
   \   00000024   0x7800             LDRB     R0,[R0, #+0]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD014             BEQ      ??mbedtls_rsa_rsassa_pkcs1_v15_sign_2
   1177              {
   1178                  const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
   \   0000002A   0xA80C             ADD      R0,SP,#+48
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x.... 0x....      BL       mbedtls_md_info_from_type
   \   00000032   0x0007             MOVS     R7,R0
   1179                  if( md_info == NULL )
   \   00000034   0xD014             BEQ      ??mbedtls_rsa_rsassa_pkcs1_v15_sign_1
   1180                      return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1181          
   1182                  if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
   \   00000036   0xAA01             ADD      R2,SP,#+4
   \   00000038   0xA903             ADD      R1,SP,#+12
   \   0000003A   0xA80C             ADD      R0,SP,#+48
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0x.... 0x....      BL       mbedtls_oid_get_oid_by_md
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD10C             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_sign_1
   1183                      return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1184          
   1185                  nb_pad -= 10 + oid_size;
   \   00000046   0x9801             LDR      R0,[SP, #+4]
   \   00000048   0x1A24             SUBS     R4,R4,R0
   \   0000004A   0x3C0A             SUBS     R4,R4,#+10
   1186          
   1187                  hashlen = mbedtls_md_get_size( md_info );
   \   0000004C   0x0038             MOVS     R0,R7
   \   0000004E   0x.... 0x....      BL       mbedtls_md_get_size
   \   00000052   0x0007             MOVS     R7,R0
   1188              }
   1189          
   1190              nb_pad -= hashlen;
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_sign_2: (+1)
   \   00000054   0x1BE4             SUBS     R4,R4,R7
   1191          
   1192              if( ( nb_pad < 8 ) || ( nb_pad > olen ) )
   \   00000056   0x2C08             CMP      R4,#+8
   \   00000058   0xD302             BCC      ??mbedtls_rsa_rsassa_pkcs1_v15_sign_1
   \   0000005A   0x9800             LDR      R0,[SP, #+0]
   \   0000005C   0x42A0             CMP      R0,R4
   \   0000005E   0xD201             BCS      ??mbedtls_rsa_rsassa_pkcs1_v15_sign_3
   1193                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_sign_1: (+1)
   \   00000060   0x....             LDR      R0,??DataTable29  ;; 0xffffbf80
   \   00000062   0xE088             B        ??mbedtls_rsa_rsassa_pkcs1_v15_sign_4
   1194          
   1195              *p++ = 0;
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_sign_3: (+1)
   \   00000064   0x990F             LDR      R1,[SP, #+60]
   \   00000066   0x700E             STRB     R6,[R1, #+0]
   1196              *p++ = MBEDTLS_RSA_SIGN;
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0x990F             LDR      R1,[SP, #+60]
   \   0000006C   0x7048             STRB     R0,[R1, #+1]
   1197              memset( p, 0xFF, nb_pad );
   \   0000006E   0x22FF             MOVS     R2,#+255
   \   00000070   0x0021             MOVS     R1,R4
   \   00000072   0x980F             LDR      R0,[SP, #+60]
   \   00000074   0x1C80             ADDS     R0,R0,#+2
   \   00000076   0x.... 0x....      BL       __aeabi_memset
   1198              p += nb_pad;
   \   0000007A   0x980F             LDR      R0,[SP, #+60]
   \   0000007C   0x1900             ADDS     R0,R0,R4
   1199              *p++ = 0;
   \   0000007E   0x7086             STRB     R6,[R0, #+2]
   \   00000080   0x1CC0             ADDS     R0,R0,#+3
   \   00000082   0x9C0E             LDR      R4,[SP, #+56]
   1200          
   1201              if( md_alg == MBEDTLS_MD_NONE )
   \   00000084   0xA90C             ADD      R1,SP,#+48
   \   00000086   0x7809             LDRB     R1,[R1, #+0]
   \   00000088   0x2900             CMP      R1,#+0
   \   0000008A   0xD102             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_sign_5
   1202              {
   1203                  memcpy( p, hash, hashlen );
   \   0000008C   0x003A             MOVS     R2,R7
   \   0000008E   0x0021             MOVS     R1,R4
   \   00000090   0xE01F             B        ??mbedtls_rsa_rsassa_pkcs1_v15_sign_6
   1204              }
   1205              else
   1206              {
   1207                  /*
   1208                   * DigestInfo ::= SEQUENCE {
   1209                   *   digestAlgorithm DigestAlgorithmIdentifier,
   1210                   *   digest Digest }
   1211                   *
   1212                   * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
   1213                   *
   1214                   * Digest ::= OCTET STRING
   1215                   */
   1216                  *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_sign_5: (+1)
   \   00000092   0x2130             MOVS     R1,#+48
   \   00000094   0x7001             STRB     R1,[R0, #+0]
   1217                  *p++ = (unsigned char) ( 0x08 + oid_size + hashlen );
   \   00000096   0x9A01             LDR      R2,[SP, #+4]
   \   00000098   0x19D2             ADDS     R2,R2,R7
   \   0000009A   0x3208             ADDS     R2,R2,#+8
   \   0000009C   0x7042             STRB     R2,[R0, #+1]
   1218                  *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
   \   0000009E   0x7081             STRB     R1,[R0, #+2]
   1219                  *p++ = (unsigned char) ( 0x04 + oid_size );
   \   000000A0   0x9901             LDR      R1,[SP, #+4]
   \   000000A2   0x1D09             ADDS     R1,R1,#+4
   \   000000A4   0x70C1             STRB     R1,[R0, #+3]
   1220                  *p++ = MBEDTLS_ASN1_OID;
   \   000000A6   0x2106             MOVS     R1,#+6
   \   000000A8   0x7101             STRB     R1,[R0, #+4]
   1221                  *p++ = oid_size & 0xFF;
   \   000000AA   0x9901             LDR      R1,[SP, #+4]
   \   000000AC   0x7141             STRB     R1,[R0, #+5]
   \   000000AE   0x1D80             ADDS     R0,R0,#+6
   \   000000B0   0x9000             STR      R0,[SP, #+0]
   1222                  memcpy( p, oid, oid_size );
   \   000000B2   0x9A01             LDR      R2,[SP, #+4]
   \   000000B4   0x9903             LDR      R1,[SP, #+12]
   \   000000B6   0x.... 0x....      BL       __aeabi_memcpy
   1223                  p += oid_size;
   \   000000BA   0x9800             LDR      R0,[SP, #+0]
   \   000000BC   0x9901             LDR      R1,[SP, #+4]
   \   000000BE   0x1840             ADDS     R0,R0,R1
   1224                  *p++ = MBEDTLS_ASN1_NULL;
   \   000000C0   0x2105             MOVS     R1,#+5
   \   000000C2   0x7001             STRB     R1,[R0, #+0]
   1225                  *p++ = 0x00;
   \   000000C4   0x7046             STRB     R6,[R0, #+1]
   1226                  *p++ = MBEDTLS_ASN1_OCTET_STRING;
   \   000000C6   0x2104             MOVS     R1,#+4
   \   000000C8   0x7081             STRB     R1,[R0, #+2]
   1227                  *p++ = hashlen;
   \   000000CA   0x70C7             STRB     R7,[R0, #+3]
   1228                  memcpy( p, hash, hashlen );
   \   000000CC   0x003A             MOVS     R2,R7
   \   000000CE   0x0021             MOVS     R1,R4
   \   000000D0   0x1D00             ADDS     R0,R0,#+4
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_sign_6: (+1)
   \   000000D2   0x.... 0x....      BL       __aeabi_memcpy
   1229              }
   1230          
   1231              if( mode == MBEDTLS_RSA_PUBLIC )
   \   000000D6   0x9806             LDR      R0,[SP, #+24]
   \   000000D8   0x2800             CMP      R0,#+0
   \   000000DA   0xD105             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_sign_7
   1232                  return( mbedtls_rsa_public(  ctx, sig, sig ) );
   \   000000DC   0x9A0F             LDR      R2,[SP, #+60]
   \   000000DE   0x4611             MOV      R1,R2
   \   000000E0   0x0028             MOVS     R0,R5
   \   000000E2   0x.... 0x....      BL       mbedtls_rsa_public
   \   000000E6   0xE046             B        ??mbedtls_rsa_rsassa_pkcs1_v15_sign_4
   1233          
   1234              /*
   1235               * In order to prevent Lenstra's attack, make the signature in a
   1236               * temporary buffer and check it before returning it.
   1237               */
   1238              sig_try = mbedtls_calloc( 1, ctx->len );
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_sign_7: (+1)
   \   000000E8   0x6869             LDR      R1,[R5, #+4]
   \   000000EA   0x2001             MOVS     R0,#+1
   \   000000EC   0x.... 0x....      BL       calloc
   \   000000F0   0x0004             MOVS     R4,R0
   1239              if( sig_try == NULL )
   \   000000F2   0xD008             BEQ      ??mbedtls_rsa_rsassa_pkcs1_v15_sign_8
   1240                  return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   1241          
   1242              verif   = mbedtls_calloc( 1, ctx->len );
   \   000000F4   0x6869             LDR      R1,[R5, #+4]
   \   000000F6   0x2001             MOVS     R0,#+1
   \   000000F8   0x.... 0x....      BL       calloc
   \   000000FC   0x0007             MOVS     R7,R0
   1243              if( verif == NULL )
   \   000000FE   0xD105             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_sign_9
   1244              {
   1245                  mbedtls_free( sig_try );
   \   00000100   0x0020             MOVS     R0,R4
   \   00000102   0x.... 0x....      BL       free
   1246                  return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_sign_8: (+1)
   \   00000106   0x200F             MOVS     R0,#+15
   \   00000108   0x43C0             MVNS     R0,R0            ;; #-16
   \   0000010A   0xE034             B        ??mbedtls_rsa_rsassa_pkcs1_v15_sign_4
   1247              }
   1248          
   1249              MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_sign_9: (+1)
   \   0000010C   0x9400             STR      R4,[SP, #+0]
   \   0000010E   0x9B0F             LDR      R3,[SP, #+60]
   \   00000110   0x9A05             LDR      R2,[SP, #+20]
   \   00000112   0x9904             LDR      R1,[SP, #+16]
   \   00000114   0x0028             MOVS     R0,R5
   \   00000116   0x.... 0x....      BL       mbedtls_rsa_private
   \   0000011A   0x9002             STR      R0,[SP, #+8]
   \   0000011C   0x2800             CMP      R0,#+0
   \   0000011E   0xD123             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_sign_10
   1250              MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
   \   00000120   0x003A             MOVS     R2,R7
   \   00000122   0x0021             MOVS     R1,R4
   \   00000124   0x0028             MOVS     R0,R5
   \   00000126   0x.... 0x....      BL       mbedtls_rsa_public
   \   0000012A   0x9002             STR      R0,[SP, #+8]
   \   0000012C   0x2800             CMP      R0,#+0
   \   0000012E   0xD11B             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_sign_10
   1251          
   1252              /* Compare in constant time just in case */
   1253              for( diff = 0, i = 0; i < ctx->len; i++ )
   \   00000130   0x686A             LDR      R2,[R5, #+4]
   \   00000132   0x2A00             CMP      R2,#+0
   \   00000134   0xD00C             BEQ      ??mbedtls_rsa_rsassa_pkcs1_v15_sign_11
   \   00000136   0x0038             MOVS     R0,R7
   \   00000138   0x990F             LDR      R1,[SP, #+60]
   \   0000013A   0x0013             MOVS     R3,R2
   1254                  diff |= verif[i] ^ sig[i];
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_sign_12: (+1)
   \   0000013C   0x46B4             MOV      R12,R6
   \   0000013E   0x7805             LDRB     R5,[R0, #+0]
   \   00000140   0x780E             LDRB     R6,[R1, #+0]
   \   00000142   0x406E             EORS     R6,R6,R5
   \   00000144   0x4665             MOV      R5,R12
   \   00000146   0x432E             ORRS     R6,R6,R5
   \   00000148   0x1C49             ADDS     R1,R1,#+1
   \   0000014A   0x1C40             ADDS     R0,R0,#+1
   \   0000014C   0x1E5B             SUBS     R3,R3,#+1
   \   0000014E   0xD1F5             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_sign_12
   1255              diff_no_optimize = diff;
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_sign_11: (+1)
   \   00000150   0x4668             MOV      R0,SP
   \   00000152   0x7006             STRB     R6,[R0, #+0]
   1256          
   1257              if( diff_no_optimize != 0 )
   \   00000154   0x7800             LDRB     R0,[R0, #+0]
   \   00000156   0x2800             CMP      R0,#+0
   \   00000158   0xD002             BEQ      ??mbedtls_rsa_rsassa_pkcs1_v15_sign_13
   1258              {
   1259                  ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
   \   0000015A   0x....             LDR      R0,??DataTable30  ;; 0xffffbd00
   \   0000015C   0x9002             STR      R0,[SP, #+8]
   1260                  goto cleanup;
   \   0000015E   0xE003             B        ??mbedtls_rsa_rsassa_pkcs1_v15_sign_10
   1261              }
   1262          
   1263              memcpy( sig, sig_try, ctx->len );
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_sign_13: (+1)
   \   00000160   0x0021             MOVS     R1,R4
   \   00000162   0x980F             LDR      R0,[SP, #+60]
   \   00000164   0x.... 0x....      BL       __aeabi_memcpy
   1264          
   1265          cleanup:
   1266              mbedtls_free( sig_try );
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_sign_10: (+1)
   \   00000168   0x0020             MOVS     R0,R4
   \   0000016A   0x.... 0x....      BL       free
   1267              mbedtls_free( verif );
   \   0000016E   0x0038             MOVS     R0,R7
   \   00000170   0x.... 0x....      BL       free
   1268          
   1269              return( ret );
   \   00000174   0x9802             LDR      R0,[SP, #+8]
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_sign_4: (+1)
   \   00000176   0xB007             ADD      SP,SP,#+28
   \   00000178   0xBDF0             POP      {R4-R7,PC}       ;; return
   1270          }
   1271          #endif /* MBEDTLS_PKCS1_V15 */
   1272          
   1273          /*
   1274           * Do an RSA operation to sign the message digest
   1275           */

   \                                 In section .text, align 2, keep-with-next
   1276          int mbedtls_rsa_pkcs1_sign( mbedtls_rsa_context *ctx,
   1277                              int (*f_rng)(void *, unsigned char *, size_t),
   1278                              void *p_rng,
   1279                              int mode,
   1280                              mbedtls_md_type_t md_alg,
   1281                              unsigned int hashlen,
   1282                              const unsigned char *hash,
   1283                              unsigned char *sig )
   1284          {
   \                     mbedtls_rsa_pkcs1_sign: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x990A             LDR      R1,[SP, #+40]
   \   00000006   0x9C0B             LDR      R4,[SP, #+44]
   \   00000008   0x9D0C             LDR      R5,[SP, #+48]
   \   0000000A   0x9E0D             LDR      R6,[SP, #+52]
   1285              switch( ctx->padding )
   \   0000000C   0x27A4             MOVS     R7,#+164
   \   0000000E   0x59C7             LDR      R7,[R0, R7]
   \   00000010   0x2F00             CMP      R7,#+0
   \   00000012   0xD002             BEQ      ??mbedtls_rsa_pkcs1_sign_0
   \   00000014   0x2F01             CMP      R7,#+1
   \   00000016   0xD008             BEQ      ??mbedtls_rsa_pkcs1_sign_1
   \   00000018   0xE00F             B        ??mbedtls_rsa_pkcs1_sign_2
   1286              {
   1287          #if defined(MBEDTLS_PKCS1_V15)
   1288                  case MBEDTLS_RSA_PKCS_V15:
   1289                      return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
   1290                                                        hashlen, hash, sig );
   \                     ??mbedtls_rsa_pkcs1_sign_0: (+1)
   \   0000001A   0x9603             STR      R6,[SP, #+12]
   \   0000001C   0x9502             STR      R5,[SP, #+8]
   \   0000001E   0x9401             STR      R4,[SP, #+4]
   \   00000020   0x9100             STR      R1,[SP, #+0]
   \   00000022   0x9904             LDR      R1,[SP, #+16]
   \   00000024   0x.... 0x....      BL       mbedtls_rsa_rsassa_pkcs1_v15_sign
   \   00000028   0xE008             B        ??mbedtls_rsa_pkcs1_sign_3
   1291          #endif
   1292          
   1293          #if defined(MBEDTLS_PKCS1_V21)
   1294                  case MBEDTLS_RSA_PKCS_V21:
   1295                      return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
   1296                                                  hashlen, hash, sig );
   \                     ??mbedtls_rsa_pkcs1_sign_1: (+1)
   \   0000002A   0x9603             STR      R6,[SP, #+12]
   \   0000002C   0x9502             STR      R5,[SP, #+8]
   \   0000002E   0x9401             STR      R4,[SP, #+4]
   \   00000030   0x9100             STR      R1,[SP, #+0]
   \   00000032   0x9904             LDR      R1,[SP, #+16]
   \   00000034   0x.... 0x....      BL       mbedtls_rsa_rsassa_pss_sign
   \   00000038   0xE000             B        ??mbedtls_rsa_pkcs1_sign_3
   1297          #endif
   1298          
   1299                  default:
   1300                      return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   \                     ??mbedtls_rsa_pkcs1_sign_2: (+1)
   \   0000003A   0x....             LDR      R0,??DataTable30_1  ;; 0xffffbf00
   \                     ??mbedtls_rsa_pkcs1_sign_3: (+1)
   \   0000003C   0xB005             ADD      SP,SP,#+20
   \   0000003E   0xBDF0             POP      {R4-R7,PC}       ;; return
   1301              }
   1302          }
   1303          
   1304          #if defined(MBEDTLS_PKCS1_V21)
   1305          /*
   1306           * Implementation of the PKCS#1 v2.1 RSASSA-PSS-VERIFY function
   1307           */

   \                                 In section .text, align 2, keep-with-next
   1308          int mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_rsa_context *ctx,
   1309                                         int (*f_rng)(void *, unsigned char *, size_t),
   1310                                         void *p_rng,
   1311                                         int mode,
   1312                                         mbedtls_md_type_t md_alg,
   1313                                         unsigned int hashlen,
   1314                                         const unsigned char *hash,
   1315                                         mbedtls_md_type_t mgf1_hash_id,
   1316                                         int expected_salt_len,
   1317                                         const unsigned char *sig )
   1318          {
   \                     mbedtls_rsa_rsassa_pss_verify_ext: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0x....             LDR      R0,??DataTable30_2  ;; 0xfffffba0
   \   00000004   0x4485             ADD      SP,SP,R0
   1319              int ret;
   1320              size_t siglen;
   1321              unsigned char *p;
   1322              unsigned char result[MBEDTLS_MD_MAX_SIZE];
   1323              unsigned char zeros[8];
   1324              unsigned int hlen;
   1325              size_t slen, msb;
   1326              const mbedtls_md_info_t *md_info;
   1327              mbedtls_md_context_t md_ctx;
   1328              unsigned char buf[MBEDTLS_MPI_MAX_SIZE];
   1329          
   1330              if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
   \   00000006   0x2B01             CMP      R3,#+1
   \   00000008   0xD105             BNE      ??mbedtls_rsa_rsassa_pss_verify_ext_0
   \   0000000A   0xA8FF             ADD      R0,SP,#+1020
   \   0000000C   0x6E40             LDR      R0,[R0, #+100]
   \   0000000E   0x24A4             MOVS     R4,#+164
   \   00000010   0x5900             LDR      R0,[R0, R4]
   \   00000012   0x2801             CMP      R0,#+1
   \   00000014   0xD158             BNE      ??mbedtls_rsa_rsassa_pss_verify_ext_1
   1331                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1332          
   1333              siglen = ctx->len;
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_0: (+1)
   \   00000016   0xA8FF             ADD      R0,SP,#+1020
   \   00000018   0x6E40             LDR      R0,[R0, #+100]
   \   0000001A   0x6846             LDR      R6,[R0, #+4]
   1334          
   1335              if( siglen < 16 || siglen > sizeof( buf ) )
   \   0000001C   0x0030             MOVS     R0,R6
   \   0000001E   0x3810             SUBS     R0,R0,#+16
   \   00000020   0x....             LDR      R4,??DataTable30_3  ;; 0x3f1
   \   00000022   0x42A0             CMP      R0,R4
   \   00000024   0xD250             BCS      ??mbedtls_rsa_rsassa_pss_verify_ext_1
   \   00000026   0xA8FF             ADD      R0,SP,#+1020
   \   00000028   0x3090             ADDS     R0,R0,#+144
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   1336                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1337          
   1338              ret = ( mode == MBEDTLS_RSA_PUBLIC )
   1339                    ? mbedtls_rsa_public(  ctx, sig, buf )
   1340                    : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
   \   0000002C   0x2B00             CMP      R3,#+0
   \   0000002E   0xD106             BNE      ??mbedtls_rsa_rsassa_pss_verify_ext_2
   \   00000030   0xAA08             ADD      R2,SP,#+32
   \   00000032   0x0001             MOVS     R1,R0
   \   00000034   0xA8FF             ADD      R0,SP,#+1020
   \   00000036   0x6E40             LDR      R0,[R0, #+100]
   \   00000038   0x.... 0x....      BL       mbedtls_rsa_public
   \   0000003C   0xE006             B        ??mbedtls_rsa_rsassa_pss_verify_ext_3
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_2: (+1)
   \   0000003E   0xAB08             ADD      R3,SP,#+32
   \   00000040   0x9300             STR      R3,[SP, #+0]
   \   00000042   0x0003             MOVS     R3,R0
   \   00000044   0xA8FF             ADD      R0,SP,#+1020
   \   00000046   0x6E40             LDR      R0,[R0, #+100]
   \   00000048   0x.... 0x....      BL       mbedtls_rsa_private
   1341          
   1342              if( ret != 0 )
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_3: (+1)
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD000             BEQ      .+4
   \   00000050   0xE0A8             B        ??mbedtls_rsa_rsassa_pss_verify_ext_4
   1343                  return( ret );
   1344          
   1345              p = buf;
   \   00000052   0xAC08             ADD      R4,SP,#+32
   \   00000054   0xA808             ADD      R0,SP,#+32
   \   00000056   0x1980             ADDS     R0,R0,R6
   \   00000058   0x1E40             SUBS     R0,R0,#+1
   \   0000005A   0x7800             LDRB     R0,[R0, #+0]
   \   0000005C   0x28BC             CMP      R0,#+188
   \   0000005E   0xD178             BNE      ??mbedtls_rsa_rsassa_pss_verify_ext_5
   \   00000060   0xA8FF             ADD      R0,SP,#+1020
   \   00000062   0x6FC0             LDR      R0,[R0, #+124]
   1346          
   1347              if( buf[siglen - 1] != 0xBC )
   1348                  return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   1349          
   1350              if( md_alg != MBEDTLS_MD_NONE )
   \   00000064   0x0001             MOVS     R1,R0
   \   00000066   0xD00A             BEQ      ??mbedtls_rsa_rsassa_pss_verify_ext_6
   1351              {
   1352                  /* Gather length of hash to sign */
   1353                  md_info = mbedtls_md_info_from_type( md_alg );
   \   00000068   0x.... 0x....      BL       mbedtls_md_info_from_type
   \   0000006C   0x0005             MOVS     R5,R0
   1354                  if( md_info == NULL )
   \   0000006E   0xD02B             BEQ      ??mbedtls_rsa_rsassa_pss_verify_ext_1
   1355                      return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1356          
   1357                  hashlen = mbedtls_md_get_size( md_info );
   \   00000070   0x.... 0x....      BL       mbedtls_md_get_size
   \   00000074   0xB402             PUSH     {R1}
   \   00000076   0xA9FF             ADD      R1,SP,#+1020
   \   00000078   0x3184             ADDS     R1,R1,#+132
   \   0000007A   0x6008             STR      R0,[R1, #+0]
   \   0000007C   0xBC02             POP      {R1}
   1358              }
   1359          
   1360              md_info = mbedtls_md_info_from_type( mgf1_hash_id );
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_6: (+1)
   \   0000007E   0xA8FF             ADD      R0,SP,#+1020
   \   00000080   0x3088             ADDS     R0,R0,#+136
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0x.... 0x....      BL       mbedtls_md_info_from_type
   \   00000088   0x0005             MOVS     R5,R0
   1361              if( md_info == NULL )
   \   0000008A   0xD01D             BEQ      ??mbedtls_rsa_rsassa_pss_verify_ext_1
   1362                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1363          
   1364              hlen = mbedtls_md_get_size( md_info );
   \   0000008C   0x.... 0x....      BL       mbedtls_md_get_size
   \   00000090   0x9001             STR      R0,[SP, #+4]
   1365              slen = siglen - hlen - 1; /* Currently length of salt + padding */
   \   00000092   0x1A37             SUBS     R7,R6,R0
   \   00000094   0x1E7F             SUBS     R7,R7,#+1
   1366          
   1367              memset( zeros, 0, 8 );
   \   00000096   0xA806             ADD      R0,SP,#+24
   \   00000098   0x2100             MOVS     R1,#+0
   \   0000009A   0x2200             MOVS     R2,#+0
   \   0000009C   0xC006             STM      R0!,{R1,R2}
   1368          
   1369              /*
   1370               * Note: EMSA-PSS verification is over the length of N - 1 bits
   1371               */
   1372              msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
   \   0000009E   0xA8FF             ADD      R0,SP,#+1020
   \   000000A0   0x6E40             LDR      R0,[R0, #+100]
   \   000000A2   0x3008             ADDS     R0,R0,#+8
   \   000000A4   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   000000A8   0x1E40             SUBS     R0,R0,#+1
   \   000000AA   0x9002             STR      R0,[SP, #+8]
   1373          
   1374              /* Compensate for boundary condition when applying mask */
   1375              if( msb % 8 == 0 )
   \   000000AC   0x0740             LSLS     R0,R0,#+29
   \   000000AE   0xD102             BNE      ??mbedtls_rsa_rsassa_pss_verify_ext_7
   1376              {
   1377                  p++;
   \   000000B0   0xA808             ADD      R0,SP,#+32
   \   000000B2   0x1C44             ADDS     R4,R0,#+1
   1378                  siglen -= 1;
   \   000000B4   0x1E76             SUBS     R6,R6,#+1
   1379              }
   1380              if( buf[0] >> ( 8 - siglen * 8 + msb ) )
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_7: (+1)
   \   000000B6   0xA808             ADD      R0,SP,#+32
   \   000000B8   0x7800             LDRB     R0,[R0, #+0]
   \   000000BA   0x2108             MOVS     R1,#+8
   \   000000BC   0x00F2             LSLS     R2,R6,#+3
   \   000000BE   0x1A89             SUBS     R1,R1,R2
   \   000000C0   0x9A02             LDR      R2,[SP, #+8]
   \   000000C2   0x1889             ADDS     R1,R1,R2
   \   000000C4   0x40C8             LSRS     R0,R0,R1
   \   000000C6   0xD001             BEQ      ??mbedtls_rsa_rsassa_pss_verify_ext_8
   1381                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_1: (+1)
   \   000000C8   0x....             LDR      R0,??DataTable31  ;; 0xffffbf80
   \   000000CA   0xE06B             B        ??mbedtls_rsa_rsassa_pss_verify_ext_4
   1382          
   1383              mbedtls_md_init( &md_ctx );
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_8: (+1)
   \   000000CC   0xA803             ADD      R0,SP,#+12
   \   000000CE   0x.... 0x....      BL       mbedtls_md_init
   1384              if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
   \   000000D2   0x2200             MOVS     R2,#+0
   \   000000D4   0x0029             MOVS     R1,R5
   \   000000D6   0xA803             ADD      R0,SP,#+12
   \   000000D8   0x.... 0x....      BL       mbedtls_md_setup
   \   000000DC   0x0005             MOVS     R5,R0
   \   000000DE   0xA803             ADD      R0,SP,#+12
   \   000000E0   0xD003             BEQ      ??mbedtls_rsa_rsassa_pss_verify_ext_9
   1385              {
   1386                  mbedtls_md_free( &md_ctx );
   \   000000E2   0x.... 0x....      BL       mbedtls_md_free
   1387                  return( ret );
   \   000000E6   0x0028             MOVS     R0,R5
   \   000000E8   0xE05C             B        ??mbedtls_rsa_rsassa_pss_verify_ext_4
   1388              }
   1389          
   1390              mgf_mask( p, siglen - hlen - 1, p + siglen - hlen - 1, hlen, &md_ctx );
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_9: (+1)
   \   000000EA   0x9000             STR      R0,[SP, #+0]
   \   000000EC   0x9B01             LDR      R3,[SP, #+4]
   \   000000EE   0x19A0             ADDS     R0,R4,R6
   \   000000F0   0x4619             MOV      R1,R3
   \   000000F2   0x424A             RSBS     R2,R1,#+0
   \   000000F4   0x1882             ADDS     R2,R0,R2
   \   000000F6   0x1E52             SUBS     R2,R2,#+1
   \   000000F8   0x1A71             SUBS     R1,R6,R1
   \   000000FA   0x1E49             SUBS     R1,R1,#+1
   \   000000FC   0x0020             MOVS     R0,R4
   \   000000FE   0x.... 0x....      BL       mgf_mask
   1391          
   1392              buf[0] &= 0xFF >> ( siglen * 8 - msb );
   \   00000102   0xA808             ADD      R0,SP,#+32
   \   00000104   0x7801             LDRB     R1,[R0, #+0]
   \   00000106   0x20FF             MOVS     R0,#+255
   \   00000108   0x00F2             LSLS     R2,R6,#+3
   \   0000010A   0x9B02             LDR      R3,[SP, #+8]
   \   0000010C   0x1AD2             SUBS     R2,R2,R3
   \   0000010E   0x40D0             LSRS     R0,R0,R2
   \   00000110   0x4008             ANDS     R0,R0,R1
   \   00000112   0xA908             ADD      R1,SP,#+32
   \   00000114   0x7008             STRB     R0,[R1, #+0]
   \   00000116   0xA808             ADD      R0,SP,#+32
   \   00000118   0x1980             ADDS     R0,R0,R6
   \   0000011A   0xE000             B        ??mbedtls_rsa_rsassa_pss_verify_ext_10
   1393          
   1394              while( p < buf + siglen && *p == 0 )
   1395                  p++;
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_11: (+1)
   \   0000011C   0x1C64             ADDS     R4,R4,#+1
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_10: (+1)
   \   0000011E   0x4284             CMP      R4,R0
   \   00000120   0xD202             BCS      ??mbedtls_rsa_rsassa_pss_verify_ext_12
   \   00000122   0x7822             LDRB     R2,[R4, #+0]
   \   00000124   0x2A00             CMP      R2,#+0
   \   00000126   0xD0F9             BEQ      ??mbedtls_rsa_rsassa_pss_verify_ext_11
   1396          
   1397              if( p == buf + siglen ||
   1398                  *p++ != 0x01 )
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_12: (+1)
   \   00000128   0x4284             CMP      R4,R0
   \   0000012A   0xD00F             BEQ      ??mbedtls_rsa_rsassa_pss_verify_ext_13
   \   0000012C   0x0020             MOVS     R0,R4
   \   0000012E   0x1C44             ADDS     R4,R0,#+1
   \   00000130   0x7800             LDRB     R0,[R0, #+0]
   \   00000132   0x2801             CMP      R0,#+1
   \   00000134   0xD10A             BNE      ??mbedtls_rsa_rsassa_pss_verify_ext_13
   1399              {
   1400                  mbedtls_md_free( &md_ctx );
   1401                  return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   1402              }
   1403          
   1404              /* Actual salt len */
   1405              slen -= p - buf;
   \   00000136   0x1B38             SUBS     R0,R7,R4
   \   00000138   0x1847             ADDS     R7,R0,R1
   \   0000013A   0xA8FF             ADD      R0,SP,#+1020
   \   0000013C   0x308C             ADDS     R0,R0,#+140
   \   0000013E   0x6800             LDR      R0,[R0, #+0]
   1406          
   1407              if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
   1408                  slen != (size_t) expected_salt_len )
   \   00000140   0x2100             MOVS     R1,#+0
   \   00000142   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000144   0x4288             CMP      R0,R1
   \   00000146   0xD006             BEQ      ??mbedtls_rsa_rsassa_pss_verify_ext_14
   \   00000148   0x4287             CMP      R7,R0
   \   0000014A   0xD004             BEQ      ??mbedtls_rsa_rsassa_pss_verify_ext_14
   1409              {
   1410                  mbedtls_md_free( &md_ctx );
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_13: (+1)
   \   0000014C   0xA803             ADD      R0,SP,#+12
   \   0000014E   0x.... 0x....      BL       mbedtls_md_free
   1411                  return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_5: (+1)
   \   00000152   0x....             LDR      R0,??DataTable30_1  ;; 0xffffbf00
   \   00000154   0xE026             B        ??mbedtls_rsa_rsassa_pss_verify_ext_4
   1412              }
   1413          
   1414              /*
   1415               * Generate H = Hash( M' )
   1416               */
   1417              mbedtls_md_starts( &md_ctx );
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_14: (+1)
   \   00000156   0xA803             ADD      R0,SP,#+12
   \   00000158   0x.... 0x....      BL       mbedtls_md_starts
   1418              mbedtls_md_update( &md_ctx, zeros, 8 );
   \   0000015C   0x2208             MOVS     R2,#+8
   \   0000015E   0xA906             ADD      R1,SP,#+24
   \   00000160   0xA803             ADD      R0,SP,#+12
   \   00000162   0x.... 0x....      BL       mbedtls_md_update
   1419              mbedtls_md_update( &md_ctx, hash, hashlen );
   \   00000166   0xAAFF             ADD      R2,SP,#+1020
   \   00000168   0x3280             ADDS     R2,R2,#+128
   \   0000016A   0x6812             LDR      R2,[R2, #+0]
   \   0000016C   0xA9FF             ADD      R1,SP,#+1020
   \   0000016E   0x3184             ADDS     R1,R1,#+132
   \   00000170   0x6809             LDR      R1,[R1, #+0]
   \   00000172   0xA803             ADD      R0,SP,#+12
   \   00000174   0x.... 0x....      BL       mbedtls_md_update
   1420              mbedtls_md_update( &md_ctx, p, slen );
   \   00000178   0x003A             MOVS     R2,R7
   \   0000017A   0x0021             MOVS     R1,R4
   \   0000017C   0xA803             ADD      R0,SP,#+12
   \   0000017E   0x.... 0x....      BL       mbedtls_md_update
   1421              mbedtls_md_finish( &md_ctx, result );
   \   00000182   0xA9FF             ADD      R1,SP,#+1020
   \   00000184   0x3124             ADDS     R1,R1,#+36
   \   00000186   0xA803             ADD      R0,SP,#+12
   \   00000188   0x.... 0x....      BL       mbedtls_md_finish
   1422          
   1423              mbedtls_md_free( &md_ctx );
   \   0000018C   0xA803             ADD      R0,SP,#+12
   \   0000018E   0x.... 0x....      BL       mbedtls_md_free
   1424          
   1425              if( memcmp( p + slen, result, hlen ) == 0 )
   \   00000192   0x9A01             LDR      R2,[SP, #+4]
   \   00000194   0xA9FF             ADD      R1,SP,#+1020
   \   00000196   0x3124             ADDS     R1,R1,#+36
   \   00000198   0x19E0             ADDS     R0,R4,R7
   \   0000019A   0x.... 0x....      BL       memcmp
   \   0000019E   0x2800             CMP      R0,#+0
   \   000001A0   0xD000             BEQ      ??mbedtls_rsa_rsassa_pss_verify_ext_4
   1426                  return( 0 );
   1427              else
   1428                  return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   \   000001A2   0x....             LDR      R0,??DataTable32  ;; 0xffffbc80
   \                     ??mbedtls_rsa_rsassa_pss_verify_ext_4: (+1)
   \   000001A4   0x....             LDR      R1,??DataTable32_1  ;; 0x464
   \   000001A6   0x448D             ADD      SP,SP,R1
   \   000001A8   0xBDF0             POP      {R4-R7,PC}       ;; return
   1429          }
   1430          
   1431          /*
   1432           * Simplified PKCS#1 v2.1 RSASSA-PSS-VERIFY function
   1433           */

   \                                 In section .text, align 2, keep-with-next
   1434          int mbedtls_rsa_rsassa_pss_verify( mbedtls_rsa_context *ctx,
   1435                                     int (*f_rng)(void *, unsigned char *, size_t),
   1436                                     void *p_rng,
   1437                                     int mode,
   1438                                     mbedtls_md_type_t md_alg,
   1439                                     unsigned int hashlen,
   1440                                     const unsigned char *hash,
   1441                                     const unsigned char *sig )
   1442          {
   \                     mbedtls_rsa_rsassa_pss_verify: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   1443              mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
   1444                                       ? (mbedtls_md_type_t) ctx->hash_id
   1445                                       : md_alg;
   \   00000004   0x24A8             MOVS     R4,#+168
   \   00000006   0x5905             LDR      R5,[R0, R4]
   \   00000008   0x9C0A             LDR      R4,[SP, #+40]
   \   0000000A   0x2D00             CMP      R5,#+0
   \   0000000C   0xD100             BNE      ??mbedtls_rsa_rsassa_pss_verify_0
   \   0000000E   0x0025             MOVS     R5,R4
   1446          
   1447              return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
   1448                                                 md_alg, hashlen, hash,
   1449                                                 mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
   1450                                                 sig ) );
   \                     ??mbedtls_rsa_rsassa_pss_verify_0: (+1)
   \   00000010   0x9E0D             LDR      R6,[SP, #+52]
   \   00000012   0x9605             STR      R6,[SP, #+20]
   \   00000014   0x2600             MOVS     R6,#+0
   \   00000016   0x43F6             MVNS     R6,R6            ;; #-1
   \   00000018   0x9604             STR      R6,[SP, #+16]
   \   0000001A   0xB2ED             UXTB     R5,R5
   \   0000001C   0x9503             STR      R5,[SP, #+12]
   \   0000001E   0x9D0C             LDR      R5,[SP, #+48]
   \   00000020   0x9502             STR      R5,[SP, #+8]
   \   00000022   0x9D0B             LDR      R5,[SP, #+44]
   \   00000024   0x9501             STR      R5,[SP, #+4]
   \   00000026   0x9400             STR      R4,[SP, #+0]
   \   00000028   0x.... 0x....      BL       mbedtls_rsa_rsassa_pss_verify_ext
   \   0000002C   0xB006             ADD      SP,SP,#+24
   \   0000002E   0xBD70             POP      {R4-R6,PC}       ;; return
   1451          
   1452          }
   1453          #endif /* MBEDTLS_PKCS1_V21 */
   1454          
   1455          #if defined(MBEDTLS_PKCS1_V15)
   1456          /*
   1457           * Implementation of the PKCS#1 v2.1 RSASSA-PKCS1-v1_5-VERIFY function
   1458           */

   \                                 In section .text, align 2, keep-with-next
   1459          int mbedtls_rsa_rsassa_pkcs1_v15_verify( mbedtls_rsa_context *ctx,
   1460                                           int (*f_rng)(void *, unsigned char *, size_t),
   1461                                           void *p_rng,
   1462                                           int mode,
   1463                                           mbedtls_md_type_t md_alg,
   1464                                           unsigned int hashlen,
   1465                                           const unsigned char *hash,
   1466                                           const unsigned char *sig )
   1467          {
   \                     mbedtls_rsa_rsassa_pkcs1_v15_verify: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x....             LDR      R4,??DataTable32_2  ;; 0xfffffbdc
   \   00000004   0x44A5             ADD      SP,SP,R4
   \   00000006   0x001D             MOVS     R5,R3
   1468              int ret;
   1469              size_t len, siglen, asn1_len;
   1470              unsigned char *p, *p0, *end;
   1471              mbedtls_md_type_t msg_md_alg;
   1472              const mbedtls_md_info_t *md_info;
   1473              mbedtls_asn1_buf oid;
   1474              unsigned char buf[MBEDTLS_MPI_MAX_SIZE];
   1475          
   1476              if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
   \   00000008   0x2D01             CMP      R5,#+1
   \   0000000A   0xD103             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_0
   \   0000000C   0x23A4             MOVS     R3,#+164
   \   0000000E   0x58C3             LDR      R3,[R0, R3]
   \   00000010   0x2B00             CMP      R3,#+0
   \   00000012   0xD153             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_1
   1477                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1478          
   1479              siglen = ctx->len;
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_verify_0: (+1)
   \   00000014   0x6844             LDR      R4,[R0, #+4]
   1480          
   1481              if( siglen < 16 || siglen > sizeof( buf ) )
   \   00000016   0x0023             MOVS     R3,R4
   \   00000018   0x3B10             SUBS     R3,R3,#+16
   \   0000001A   0x....             LDR      R6,??DataTable32_3  ;; 0x3f1
   \   0000001C   0x42B3             CMP      R3,R6
   \   0000001E   0xD24D             BCS      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_1
   \   00000020   0xABFF             ADD      R3,SP,#+1020
   \   00000022   0x6C9B             LDR      R3,[R3, #+72]
   1482                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   1483          
   1484              ret = ( mode == MBEDTLS_RSA_PUBLIC )
   1485                    ? mbedtls_rsa_public(  ctx, sig, buf )
   1486                    : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
   \   00000024   0x2D00             CMP      R5,#+0
   \   00000026   0xD104             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_2
   \   00000028   0xAA08             ADD      R2,SP,#+32
   \   0000002A   0x0019             MOVS     R1,R3
   \   0000002C   0x.... 0x....      BL       mbedtls_rsa_public
   \   00000030   0xE003             B        ??mbedtls_rsa_rsassa_pkcs1_v15_verify_3
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_verify_2: (+1)
   \   00000032   0xAD08             ADD      R5,SP,#+32
   \   00000034   0x9500             STR      R5,[SP, #+0]
   \   00000036   0x.... 0x....      BL       mbedtls_rsa_private
   1487          
   1488              if( ret != 0 )
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_verify_3: (+1)
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD000             BEQ      .+4
   \   0000003E   0xE0B4             B        ??mbedtls_rsa_rsassa_pkcs1_v15_verify_4
   1489                  return( ret );
   1490          
   1491              p = buf;
   1492          
   1493              if( *p++ != 0 || *p++ != MBEDTLS_RSA_SIGN )
   \   00000040   0xA808             ADD      R0,SP,#+32
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x9001             STR      R0,[SP, #+4]
   \   00000046   0xA808             ADD      R0,SP,#+32
   \   00000048   0x7801             LDRB     R1,[R0, #+0]
   \   0000004A   0x2900             CMP      R1,#+0
   \   0000004C   0xD11A             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_5
   \   0000004E   0xA908             ADD      R1,SP,#+32
   \   00000050   0x1C89             ADDS     R1,R1,#+2
   \   00000052   0x9101             STR      R1,[SP, #+4]
   \   00000054   0x7841             LDRB     R1,[R0, #+1]
   \   00000056   0x2901             CMP      R1,#+1
   \   00000058   0xD114             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_5
   \   0000005A   0xE008             B        ??mbedtls_rsa_rsassa_pkcs1_v15_verify_6
   1494                  return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   1495          
   1496              while( *p != 0 )
   1497              {
   1498                  if( p >= buf + siglen - 1 || *p != 0xFF )
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_verify_7: (+1)
   \   0000005C   0x9A01             LDR      R2,[SP, #+4]
   \   0000005E   0x1903             ADDS     R3,R0,R4
   \   00000060   0x1E5B             SUBS     R3,R3,#+1
   \   00000062   0x429A             CMP      R2,R3
   \   00000064   0xD20E             BCS      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_5
   \   00000066   0x29FF             CMP      R1,#+255
   \   00000068   0xD10C             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_5
   1499                      return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   1500                  p++;
   \   0000006A   0x1C51             ADDS     R1,R2,#+1
   \   0000006C   0x9101             STR      R1,[SP, #+4]
   1501              }
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_verify_6: (+1)
   \   0000006E   0x9901             LDR      R1,[SP, #+4]
   \   00000070   0x7809             LDRB     R1,[R1, #+0]
   \   00000072   0x000A             MOVS     R2,R1
   \   00000074   0xD1F2             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_7
   1502              p++; /* skip 00 byte */
   \   00000076   0x9801             LDR      R0,[SP, #+4]
   \   00000078   0x1C40             ADDS     R0,R0,#+1
   \   0000007A   0x9001             STR      R0,[SP, #+4]
   1503          
   1504              /* We've read: 00 01 PS 00 where PS must be at least 8 bytes */
   1505              if( p - buf < 11 )
   \   0000007C   0xA908             ADD      R1,SP,#+32
   \   0000007E   0x1A42             SUBS     R2,R0,R1
   \   00000080   0x2A0B             CMP      R2,#+11
   \   00000082   0xDA01             BGE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_8
   1506                  return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_verify_5: (+1)
   \   00000084   0x....             LDR      R0,??DataTable32_4  ;; 0xffffbf00
   \   00000086   0xE090             B        ??mbedtls_rsa_rsassa_pkcs1_v15_verify_4
   1507          
   1508              len = siglen - ( p - buf );
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_verify_8: (+1)
   \   00000088   0x1A20             SUBS     R0,R4,R0
   \   0000008A   0x1840             ADDS     R0,R0,R1
   \   0000008C   0x9004             STR      R0,[SP, #+16]
   \   0000008E   0xAEFF             ADD      R6,SP,#+1020
   \   00000090   0x6BF6             LDR      R6,[R6, #+60]
   \   00000092   0xADFF             ADD      R5,SP,#+1020
   \   00000094   0x6C2D             LDR      R5,[R5, #+64]
   \   00000096   0xAFFF             ADD      R7,SP,#+1020
   \   00000098   0x6C7F             LDR      R7,[R7, #+68]
   1509          
   1510              if( len == hashlen && md_alg == MBEDTLS_MD_NONE )
   \   0000009A   0x42A8             CMP      R0,R5
   \   0000009C   0xD109             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_9
   \   0000009E   0x0030             MOVS     R0,R6
   \   000000A0   0xD107             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_9
   1511              {
   1512                  if( memcmp( p, hash, hashlen ) == 0 )
   \   000000A2   0x002A             MOVS     R2,R5
   \   000000A4   0x0039             MOVS     R1,R7
   \   000000A6   0x9801             LDR      R0,[SP, #+4]
   \   000000A8   0x.... 0x....      BL       memcmp
   \   000000AC   0x2800             CMP      R0,#+0
   \   000000AE   0xD07C             BEQ      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_4
   1513                      return( 0 );
   1514                  else
   1515                      return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   \   000000B0   0xE078             B.N      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_10
   1516              }
   1517          
   1518              md_info = mbedtls_md_info_from_type( md_alg );
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_verify_9: (+1)
   \   000000B2   0x0030             MOVS     R0,R6
   \   000000B4   0x.... 0x....      BL       mbedtls_md_info_from_type
   1519              if( md_info == NULL )
   \   000000B8   0x2800             CMP      R0,#+0
   \   000000BA   0xD101             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_11
   1520                  return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_verify_1: (+1)
   \   000000BC   0x....             LDR      R0,??DataTable31  ;; 0xffffbf80
   \   000000BE   0xE074             B        ??mbedtls_rsa_rsassa_pkcs1_v15_verify_4
   1521              hashlen = mbedtls_md_get_size( md_info );
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_verify_11: (+1)
   \   000000C0   0x.... 0x....      BL       mbedtls_md_get_size
   \   000000C4   0x0005             MOVS     R5,R0
   1522          
   1523              end = p + len;
   \   000000C6   0x9801             LDR      R0,[SP, #+4]
   \   000000C8   0x9904             LDR      R1,[SP, #+16]
   \   000000CA   0x1840             ADDS     R0,R0,R1
   \   000000CC   0x9000             STR      R0,[SP, #+0]
   1524          
   1525              /*
   1526               * Parse the ASN.1 structure inside the PKCS#1 v1.5 structure.
   1527               * Insist on 2-byte length tags, to protect against variants of
   1528               * Bleichenbacher's forgery attack against lax PKCS#1v1.5 verification.
   1529               */
   1530              p0 = p;
   \   000000CE   0x9C01             LDR      R4,[SP, #+4]
   1531              if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len,
   1532                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \   000000D0   0x2330             MOVS     R3,#+48
   \   000000D2   0xAA03             ADD      R2,SP,#+12
   \   000000D4   0x4601             MOV      R1,R0
   \   000000D6   0xA801             ADD      R0,SP,#+4
   \   000000D8   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   000000DC   0x2800             CMP      R0,#+0
   \   000000DE   0xD161             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_10
   1533                  return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   1534              if( p != p0 + 2 || asn1_len + 2 != len )
   \   000000E0   0x9801             LDR      R0,[SP, #+4]
   \   000000E2   0x1CA1             ADDS     R1,R4,#+2
   \   000000E4   0x4288             CMP      R0,R1
   \   000000E6   0xD15D             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_10
   \   000000E8   0x9803             LDR      R0,[SP, #+12]
   \   000000EA   0x1C80             ADDS     R0,R0,#+2
   \   000000EC   0x9904             LDR      R1,[SP, #+16]
   \   000000EE   0x4288             CMP      R0,R1
   \   000000F0   0xD158             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_10
   1535                  return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   1536          
   1537              p0 = p;
   \   000000F2   0x9C01             LDR      R4,[SP, #+4]
   1538              if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len,
   1539                      MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
   \   000000F4   0x2330             MOVS     R3,#+48
   \   000000F6   0xAA03             ADD      R2,SP,#+12
   \   000000F8   0x9900             LDR      R1,[SP, #+0]
   \   000000FA   0xA801             ADD      R0,SP,#+4
   \   000000FC   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   00000100   0x2800             CMP      R0,#+0
   \   00000102   0xD14F             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_10
   1540                  return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   1541              if( p != p0 + 2 || asn1_len + 6 + hashlen != len )
   \   00000104   0x9801             LDR      R0,[SP, #+4]
   \   00000106   0x1CA1             ADDS     R1,R4,#+2
   \   00000108   0x4288             CMP      R0,R1
   \   0000010A   0xD14B             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_10
   \   0000010C   0x9803             LDR      R0,[SP, #+12]
   \   0000010E   0x1940             ADDS     R0,R0,R5
   \   00000110   0x1D80             ADDS     R0,R0,#+6
   \   00000112   0x9904             LDR      R1,[SP, #+16]
   \   00000114   0x4288             CMP      R0,R1
   \   00000116   0xD145             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_10
   1542                  return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   1543          
   1544              p0 = p;
   \   00000118   0x9C01             LDR      R4,[SP, #+4]
   1545              if( ( ret = mbedtls_asn1_get_tag( &p, end, &oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
   \   0000011A   0x2306             MOVS     R3,#+6
   \   0000011C   0xA805             ADD      R0,SP,#+20
   \   0000011E   0x1D02             ADDS     R2,R0,#+4
   \   00000120   0x9900             LDR      R1,[SP, #+0]
   \   00000122   0xA801             ADD      R0,SP,#+4
   \   00000124   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   00000128   0x2800             CMP      R0,#+0
   \   0000012A   0xD13B             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_10
   1546                  return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   1547              if( p != p0 + 2 )
   \   0000012C   0x9801             LDR      R0,[SP, #+4]
   \   0000012E   0x1CA1             ADDS     R1,R4,#+2
   \   00000130   0x4288             CMP      R0,R1
   \   00000132   0xD137             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_10
   1548                  return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   1549          
   1550              oid.p = p;
   \   00000134   0x9007             STR      R0,[SP, #+28]
   1551              p += oid.len;
   \   00000136   0x9801             LDR      R0,[SP, #+4]
   \   00000138   0x9906             LDR      R1,[SP, #+24]
   \   0000013A   0x1840             ADDS     R0,R0,R1
   \   0000013C   0x9001             STR      R0,[SP, #+4]
   1552          
   1553              if( mbedtls_oid_get_md_alg( &oid, &msg_md_alg ) != 0 )
   \   0000013E   0xA902             ADD      R1,SP,#+8
   \   00000140   0xA805             ADD      R0,SP,#+20
   \   00000142   0x.... 0x....      BL       mbedtls_oid_get_md_alg
   \   00000146   0x2800             CMP      R0,#+0
   \   00000148   0xD12C             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_10
   1554                  return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   1555          
   1556              if( md_alg != msg_md_alg )
   \   0000014A   0x4668             MOV      R0,SP
   \   0000014C   0x7A00             LDRB     R0,[R0, #+8]
   \   0000014E   0x4286             CMP      R6,R0
   \   00000150   0xD128             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_10
   1557                  return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   1558          
   1559              /*
   1560               * assume the algorithm parameters must be NULL
   1561               */
   1562              p0 = p;
   \   00000152   0x9C01             LDR      R4,[SP, #+4]
   1563              if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len, MBEDTLS_ASN1_NULL ) ) != 0 )
   \   00000154   0x2305             MOVS     R3,#+5
   \   00000156   0xAA03             ADD      R2,SP,#+12
   \   00000158   0x9900             LDR      R1,[SP, #+0]
   \   0000015A   0xA801             ADD      R0,SP,#+4
   \   0000015C   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   00000160   0x2800             CMP      R0,#+0
   \   00000162   0xD11F             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_10
   1564                  return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   1565              if( p != p0 + 2 )
   \   00000164   0x9801             LDR      R0,[SP, #+4]
   \   00000166   0x1CA1             ADDS     R1,R4,#+2
   \   00000168   0x4288             CMP      R0,R1
   \   0000016A   0xD11B             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_10
   1566                  return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   1567          
   1568              p0 = p;
   \   0000016C   0x4604             MOV      R4,R0
   1569              if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
   \   0000016E   0x2304             MOVS     R3,#+4
   \   00000170   0xAA03             ADD      R2,SP,#+12
   \   00000172   0x9900             LDR      R1,[SP, #+0]
   \   00000174   0xA801             ADD      R0,SP,#+4
   \   00000176   0x.... 0x....      BL       mbedtls_asn1_get_tag
   \   0000017A   0x2800             CMP      R0,#+0
   \   0000017C   0xD112             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_10
   1570                  return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   1571              if( p != p0 + 2 || asn1_len != hashlen )
   \   0000017E   0x9801             LDR      R0,[SP, #+4]
   \   00000180   0x1CA1             ADDS     R1,R4,#+2
   \   00000182   0x4288             CMP      R0,R1
   \   00000184   0xD10E             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_10
   \   00000186   0x9803             LDR      R0,[SP, #+12]
   \   00000188   0x42A8             CMP      R0,R5
   \   0000018A   0xD10B             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_10
   1572                  return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   1573          
   1574              if( memcmp( p, hash, hashlen ) != 0 )
   \   0000018C   0x002A             MOVS     R2,R5
   \   0000018E   0x0039             MOVS     R1,R7
   \   00000190   0x9801             LDR      R0,[SP, #+4]
   \   00000192   0x.... 0x....      BL       memcmp
   \   00000196   0x2800             CMP      R0,#+0
   \   00000198   0xD104             BNE      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_10
   1575                  return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   1576          
   1577              p += hashlen;
   1578          
   1579              if( p != end )
   \   0000019A   0x9801             LDR      R0,[SP, #+4]
   \   0000019C   0x1940             ADDS     R0,R0,R5
   \   0000019E   0x9900             LDR      R1,[SP, #+0]
   \   000001A0   0x4288             CMP      R0,R1
   \   000001A2   0xD001             BEQ      ??mbedtls_rsa_rsassa_pkcs1_v15_verify_12
   1580                  return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_verify_10: (+1)
   \   000001A4   0x....             LDR      R0,??DataTable32  ;; 0xffffbc80
   \   000001A6   0xE000             B        ??mbedtls_rsa_rsassa_pkcs1_v15_verify_4
   1581          
   1582              return( 0 );
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_verify_12: (+1)
   \   000001A8   0x2000             MOVS     R0,#+0
   \                     ??mbedtls_rsa_rsassa_pkcs1_v15_verify_4: (+1)
   \   000001AA   0x....             LDR      R1,??DataTable32_5  ;; 0x424
   \   000001AC   0x448D             ADD      SP,SP,R1
   \   000001AE   0xBDF0             POP      {R4-R7,PC}       ;; return
   1583          }
   1584          #endif /* MBEDTLS_PKCS1_V15 */
   1585          
   1586          /*
   1587           * Do an RSA operation and check the message digest
   1588           */

   \                                 In section .text, align 2, keep-with-next
   1589          int mbedtls_rsa_pkcs1_verify( mbedtls_rsa_context *ctx,
   1590                                int (*f_rng)(void *, unsigned char *, size_t),
   1591                                void *p_rng,
   1592                                int mode,
   1593                                mbedtls_md_type_t md_alg,
   1594                                unsigned int hashlen,
   1595                                const unsigned char *hash,
   1596                                const unsigned char *sig )
   1597          {
   \                     mbedtls_rsa_pkcs1_verify: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x990A             LDR      R1,[SP, #+40]
   \   00000006   0x9C0B             LDR      R4,[SP, #+44]
   \   00000008   0x9D0C             LDR      R5,[SP, #+48]
   \   0000000A   0x9E0D             LDR      R6,[SP, #+52]
   1598              switch( ctx->padding )
   \   0000000C   0x27A4             MOVS     R7,#+164
   \   0000000E   0x59C7             LDR      R7,[R0, R7]
   \   00000010   0x2F00             CMP      R7,#+0
   \   00000012   0xD002             BEQ      ??mbedtls_rsa_pkcs1_verify_0
   \   00000014   0x2F01             CMP      R7,#+1
   \   00000016   0xD008             BEQ      ??mbedtls_rsa_pkcs1_verify_1
   \   00000018   0xE00F             B        ??mbedtls_rsa_pkcs1_verify_2
   1599              {
   1600          #if defined(MBEDTLS_PKCS1_V15)
   1601                  case MBEDTLS_RSA_PKCS_V15:
   1602                      return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
   1603                                                          hashlen, hash, sig );
   \                     ??mbedtls_rsa_pkcs1_verify_0: (+1)
   \   0000001A   0x9603             STR      R6,[SP, #+12]
   \   0000001C   0x9502             STR      R5,[SP, #+8]
   \   0000001E   0x9401             STR      R4,[SP, #+4]
   \   00000020   0x9100             STR      R1,[SP, #+0]
   \   00000022   0x9904             LDR      R1,[SP, #+16]
   \   00000024   0x.... 0x....      BL       mbedtls_rsa_rsassa_pkcs1_v15_verify
   \   00000028   0xE008             B        ??mbedtls_rsa_pkcs1_verify_3
   1604          #endif
   1605          
   1606          #if defined(MBEDTLS_PKCS1_V21)
   1607                  case MBEDTLS_RSA_PKCS_V21:
   1608                      return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
   1609                                                    hashlen, hash, sig );
   \                     ??mbedtls_rsa_pkcs1_verify_1: (+1)
   \   0000002A   0x9603             STR      R6,[SP, #+12]
   \   0000002C   0x9502             STR      R5,[SP, #+8]
   \   0000002E   0x9401             STR      R4,[SP, #+4]
   \   00000030   0x9100             STR      R1,[SP, #+0]
   \   00000032   0x9904             LDR      R1,[SP, #+16]
   \   00000034   0x.... 0x....      BL       mbedtls_rsa_rsassa_pss_verify
   \   00000038   0xE000             B        ??mbedtls_rsa_pkcs1_verify_3
   1610          #endif
   1611          
   1612                  default:
   1613                      return( MBEDTLS_ERR_RSA_INVALID_PADDING );
   \                     ??mbedtls_rsa_pkcs1_verify_2: (+1)
   \   0000003A   0x....             LDR      R0,??DataTable32_4  ;; 0xffffbf00
   \                     ??mbedtls_rsa_pkcs1_verify_3: (+1)
   \   0000003C   0xB005             ADD      SP,SP,#+20
   \   0000003E   0xBDF0             POP      {R4-R7,PC}       ;; return
   1614              }
   1615          }
   1616          
   1617          /*
   1618           * Copy the components of an RSA key
   1619           */

   \                                 In section .text, align 2, keep-with-next
   1620          int mbedtls_rsa_copy( mbedtls_rsa_context *dst, const mbedtls_rsa_context *src )
   1621          {
   \                     mbedtls_rsa_copy: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1622              int ret;
   1623          
   1624              dst->ver = src->ver;
   \   00000006   0x6828             LDR      R0,[R5, #+0]
   \   00000008   0x6020             STR      R0,[R4, #+0]
   1625              dst->len = src->len;
   \   0000000A   0x6868             LDR      R0,[R5, #+4]
   \   0000000C   0x6060             STR      R0,[R4, #+4]
   1626          
   1627              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->N, &src->N ) );
   \   0000000E   0x3108             ADDS     R1,R1,#+8
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x3008             ADDS     R0,R0,#+8
   \   00000014   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000018   0x0006             MOVS     R6,R0
   \   0000001A   0xD168             BNE      ??mbedtls_rsa_copy_0
   1628              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->E, &src->E ) );
   \   0000001C   0x0029             MOVS     R1,R5
   \   0000001E   0x3114             ADDS     R1,R1,#+20
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x3014             ADDS     R0,R0,#+20
   \   00000024   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000028   0x0006             MOVS     R6,R0
   \   0000002A   0xD160             BNE      ??mbedtls_rsa_copy_0
   1629          
   1630              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->D, &src->D ) );
   \   0000002C   0x0029             MOVS     R1,R5
   \   0000002E   0x3120             ADDS     R1,R1,#+32
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0x3020             ADDS     R0,R0,#+32
   \   00000034   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000038   0x0006             MOVS     R6,R0
   \   0000003A   0xD158             BNE      ??mbedtls_rsa_copy_0
   1631              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->P, &src->P ) );
   \   0000003C   0x0029             MOVS     R1,R5
   \   0000003E   0x312C             ADDS     R1,R1,#+44
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0x302C             ADDS     R0,R0,#+44
   \   00000044   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000048   0x0006             MOVS     R6,R0
   \   0000004A   0xD150             BNE      ??mbedtls_rsa_copy_0
   1632              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->Q, &src->Q ) );
   \   0000004C   0x0029             MOVS     R1,R5
   \   0000004E   0x3138             ADDS     R1,R1,#+56
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0x3038             ADDS     R0,R0,#+56
   \   00000054   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000058   0x0006             MOVS     R6,R0
   \   0000005A   0xD148             BNE      ??mbedtls_rsa_copy_0
   1633              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->DP, &src->DP ) );
   \   0000005C   0x0029             MOVS     R1,R5
   \   0000005E   0x3144             ADDS     R1,R1,#+68
   \   00000060   0x0020             MOVS     R0,R4
   \   00000062   0x3044             ADDS     R0,R0,#+68
   \   00000064   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000068   0x0006             MOVS     R6,R0
   \   0000006A   0xD140             BNE      ??mbedtls_rsa_copy_0
   1634              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->DQ, &src->DQ ) );
   \   0000006C   0x0029             MOVS     R1,R5
   \   0000006E   0x3150             ADDS     R1,R1,#+80
   \   00000070   0x0020             MOVS     R0,R4
   \   00000072   0x3050             ADDS     R0,R0,#+80
   \   00000074   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000078   0x0006             MOVS     R6,R0
   \   0000007A   0xD138             BNE      ??mbedtls_rsa_copy_0
   1635              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->QP, &src->QP ) );
   \   0000007C   0x0029             MOVS     R1,R5
   \   0000007E   0x315C             ADDS     R1,R1,#+92
   \   00000080   0x0020             MOVS     R0,R4
   \   00000082   0x305C             ADDS     R0,R0,#+92
   \   00000084   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000088   0x0006             MOVS     R6,R0
   \   0000008A   0xD130             BNE      ??mbedtls_rsa_copy_0
   1636          
   1637              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->RN, &src->RN ) );
   \   0000008C   0x0029             MOVS     R1,R5
   \   0000008E   0x3168             ADDS     R1,R1,#+104
   \   00000090   0x0020             MOVS     R0,R4
   \   00000092   0x3068             ADDS     R0,R0,#+104
   \   00000094   0x.... 0x....      BL       mbedtls_mpi_copy
   \   00000098   0x0006             MOVS     R6,R0
   \   0000009A   0xD128             BNE      ??mbedtls_rsa_copy_0
   1638              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->RP, &src->RP ) );
   \   0000009C   0x0029             MOVS     R1,R5
   \   0000009E   0x3174             ADDS     R1,R1,#+116
   \   000000A0   0x0020             MOVS     R0,R4
   \   000000A2   0x3074             ADDS     R0,R0,#+116
   \   000000A4   0x.... 0x....      BL       mbedtls_mpi_copy
   \   000000A8   0x0006             MOVS     R6,R0
   \   000000AA   0xD120             BNE      ??mbedtls_rsa_copy_0
   1639              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->RQ, &src->RQ ) );
   \   000000AC   0x0029             MOVS     R1,R5
   \   000000AE   0x3180             ADDS     R1,R1,#+128
   \   000000B0   0x0020             MOVS     R0,R4
   \   000000B2   0x3080             ADDS     R0,R0,#+128
   \   000000B4   0x.... 0x....      BL       mbedtls_mpi_copy
   \   000000B8   0x0006             MOVS     R6,R0
   \   000000BA   0xD118             BNE      ??mbedtls_rsa_copy_0
   1640          
   1641              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->Vi, &src->Vi ) );
   \   000000BC   0x0029             MOVS     R1,R5
   \   000000BE   0x318C             ADDS     R1,R1,#+140
   \   000000C0   0x0020             MOVS     R0,R4
   \   000000C2   0x308C             ADDS     R0,R0,#+140
   \   000000C4   0x.... 0x....      BL       mbedtls_mpi_copy
   \   000000C8   0x0006             MOVS     R6,R0
   \   000000CA   0xD110             BNE      ??mbedtls_rsa_copy_0
   1642              MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &dst->Vf, &src->Vf ) );
   \   000000CC   0x0029             MOVS     R1,R5
   \   000000CE   0x3198             ADDS     R1,R1,#+152
   \   000000D0   0x0020             MOVS     R0,R4
   \   000000D2   0x3098             ADDS     R0,R0,#+152
   \   000000D4   0x.... 0x....      BL       mbedtls_mpi_copy
   \   000000D8   0x0006             MOVS     R6,R0
   \   000000DA   0xD108             BNE      ??mbedtls_rsa_copy_0
   1643          
   1644              dst->padding = src->padding;
   \   000000DC   0x0020             MOVS     R0,R4
   \   000000DE   0x30A4             ADDS     R0,R0,#+164
   \   000000E0   0x0029             MOVS     R1,R5
   \   000000E2   0x31A4             ADDS     R1,R1,#+164
   \   000000E4   0x680A             LDR      R2,[R1, #+0]
   \   000000E6   0x6002             STR      R2,[R0, #+0]
   1645              dst->hash_id = src->hash_id;
   \   000000E8   0x6849             LDR      R1,[R1, #+4]
   \   000000EA   0x6041             STR      R1,[R0, #+4]
   \   000000EC   0xE004             B        ??mbedtls_rsa_copy_1
   1646          
   1647          cleanup:
   1648              if( ret != 0 )
   \                     ??mbedtls_rsa_copy_0: (+1)
   \   000000EE   0x2E00             CMP      R6,#+0
   \   000000F0   0xD002             BEQ      ??mbedtls_rsa_copy_1
   1649                  mbedtls_rsa_free( dst );
   \   000000F2   0x0020             MOVS     R0,R4
   \   000000F4   0x.... 0x....      BL       mbedtls_rsa_free
   1650          
   1651              return( ret );
   \                     ??mbedtls_rsa_copy_1: (+1)
   \   000000F8   0x0030             MOVS     R0,R6
   \   000000FA   0xBD70             POP      {R4-R6,PC}       ;; return
   1652          }
   1653          
   1654          /*
   1655           * Free the components of an RSA key
   1656           */

   \                                 In section .text, align 2, keep-with-next
   1657          void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
   1658          {
   \                     mbedtls_rsa_free: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1659              mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->Vf );
   \   00000004   0x308C             ADDS     R0,R0,#+140
   \   00000006   0x.... 0x....      BL       mbedtls_mpi_free
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x3098             ADDS     R0,R0,#+152
   \   0000000E   0x.... 0x....      BL       mbedtls_mpi_free
   1660              mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP ); mbedtls_mpi_free( &ctx->RN );
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x3080             ADDS     R0,R0,#+128
   \   00000016   0x.... 0x....      BL       mbedtls_mpi_free
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x3074             ADDS     R0,R0,#+116
   \   0000001E   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x3068             ADDS     R0,R0,#+104
   \   00000026   0x.... 0x....      BL       mbedtls_mpi_free
   1661              mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ ); mbedtls_mpi_free( &ctx->DP );
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x305C             ADDS     R0,R0,#+92
   \   0000002E   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0x3050             ADDS     R0,R0,#+80
   \   00000036   0x.... 0x....      BL       mbedtls_mpi_free
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x3044             ADDS     R0,R0,#+68
   \   0000003E   0x.... 0x....      BL       mbedtls_mpi_free
   1662              mbedtls_mpi_free( &ctx->Q  ); mbedtls_mpi_free( &ctx->P  ); mbedtls_mpi_free( &ctx->D );
   \   00000042   0x0020             MOVS     R0,R4
   \   00000044   0x3038             ADDS     R0,R0,#+56
   \   00000046   0x.... 0x....      BL       mbedtls_mpi_free
   \   0000004A   0x0020             MOVS     R0,R4
   \   0000004C   0x302C             ADDS     R0,R0,#+44
   \   0000004E   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000052   0x0020             MOVS     R0,R4
   \   00000054   0x3020             ADDS     R0,R0,#+32
   \   00000056   0x.... 0x....      BL       mbedtls_mpi_free
   1663              mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
   \   0000005A   0x0020             MOVS     R0,R4
   \   0000005C   0x3014             ADDS     R0,R0,#+20
   \   0000005E   0x.... 0x....      BL       mbedtls_mpi_free
   \   00000062   0x0020             MOVS     R0,R4
   \   00000064   0x3008             ADDS     R0,R0,#+8
   \   00000066   0x.... 0x....      BL       mbedtls_mpi_free
   1664          
   1665          #if defined(MBEDTLS_THREADING_C)
   1666              mbedtls_mutex_free( &ctx->mutex );
   1667          #endif
   1668          }
   \   0000006A   0xBD10             POP      {R4,PC}          ;; return
   1669          
   1670          #if defined(MBEDTLS_SELF_TEST)
   1671          
   1672          #include "mbedtls/sha1.h"
   1673          
   1674          /*
   1675           * Example RSA-1024 keypair, for test purposes
   1676           */
   1677          #define KEY_LEN 128
   1678          
   1679          #define RSA_N   "9292758453063D803DD603D5E777D788" \
   1680                          "8ED1D5BF35786190FA2F23EBC0848AEA" \
   1681                          "DDA92CA6C3D80B32C4D109BE0F36D6AE" \
   1682                          "7130B9CED7ACDF54CFC7555AC14EEBAB" \
   1683                          "93A89813FBF3C4F8066D2D800F7C38A8" \
   1684                          "1AE31942917403FF4946B0A83D3D3E05" \
   1685                          "EE57C6F5F5606FB5D4BC6CD34EE0801A" \
   1686                          "5E94BB77B07507233A0BC7BAC8F90F79"
   1687          
   1688          #define RSA_E   "10001"
   1689          
   1690          #define RSA_D   "24BF6185468786FDD303083D25E64EFC" \
   1691                          "66CA472BC44D253102F8B4A9D3BFA750" \
   1692                          "91386C0077937FE33FA3252D28855837" \
   1693                          "AE1B484A8A9A45F7EE8C0C634F99E8CD" \
   1694                          "DF79C5CE07EE72C7F123142198164234" \
   1695                          "CABB724CF78B8173B9F880FC86322407" \
   1696                          "AF1FEDFDDE2BEB674CA15F3E81A1521E" \
   1697                          "071513A1E85B5DFA031F21ECAE91A34D"
   1698          
   1699          #define RSA_P   "C36D0EB7FCD285223CFB5AABA5BDA3D8" \
   1700                          "2C01CAD19EA484A87EA4377637E75500" \
   1701                          "FCB2005C5C7DD6EC4AC023CDA285D796" \
   1702                          "C3D9E75E1EFC42488BB4F1D13AC30A57"
   1703          
   1704          #define RSA_Q   "C000DF51A7C77AE8D7C7370C1FF55B69" \
   1705                          "E211C2B9E5DB1ED0BF61D0D9899620F4" \
   1706                          "910E4168387E3C30AA1E00C339A79508" \
   1707                          "8452DD96A9A5EA5D9DCA68DA636032AF"
   1708          
   1709          #define RSA_DP  "C1ACF567564274FB07A0BBAD5D26E298" \
   1710                          "3C94D22288ACD763FD8E5600ED4A702D" \
   1711                          "F84198A5F06C2E72236AE490C93F07F8" \
   1712                          "3CC559CD27BC2D1CA488811730BB5725"
   1713          
   1714          #define RSA_DQ  "4959CBF6F8FEF750AEE6977C155579C7" \
   1715                          "D8AAEA56749EA28623272E4F7D0592AF" \
   1716                          "7C1F1313CAC9471B5C523BFE592F517B" \
   1717                          "407A1BD76C164B93DA2D32A383E58357"
   1718          
   1719          #define RSA_QP  "9AE7FBC99546432DF71896FC239EADAE" \
   1720                          "F38D18D2B2F0E2DD275AA977E2BF4411" \
   1721                          "F5A3B2A5D33605AEBBCCBA7FEB9F2D2F" \
   1722                          "A74206CEC169D74BF5A8C50D6F48EA08"
   1723          
   1724          #define PT_LEN  24
   1725          #define RSA_PT  "\xAA\xBB\xCC\x03\x02\x01\x00\xFF\xFF\xFF\xFF\xFF" \
   1726                          "\x11\x22\x33\x0A\x0B\x0C\xCC\xDD\xDD\xDD\xDD\xDD"
   1727          
   1728          #if defined(MBEDTLS_PKCS1_V15)

   \                                 In section .text, align 2, keep-with-next
   1729          static int myrand( void *rng_state, unsigned char *output, size_t len )
   1730          {
   \                     myrand: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0015             MOVS     R5,R2
   1731          #if !defined(__OpenBSD__)
   1732              size_t i;
   1733          
   1734              if( rng_state != NULL )
   1735                  rng_state  = NULL;
   1736          
   1737              for( i = 0; i < len; ++i )
   \   00000006   0xD005             BEQ      ??myrand_0
   1738                  output[i] = rand();
   \                     ??myrand_1: (+1)
   \   00000008   0x.... 0x....      BL       rand
   \   0000000C   0x7020             STRB     R0,[R4, #+0]
   \   0000000E   0x1C64             ADDS     R4,R4,#+1
   \   00000010   0x1E6D             SUBS     R5,R5,#+1
   \   00000012   0xD1F9             BNE      ??myrand_1
   1739          #else
   1740              if( rng_state != NULL )
   1741                  rng_state = NULL;
   1742          
   1743              arc4random_buf( output, len );
   1744          #endif /* !OpenBSD */
   1745          
   1746              return( 0 );
   \                     ??myrand_0: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1747          }
   1748          #endif /* MBEDTLS_PKCS1_V15 */
   1749          
   1750          /*
   1751           * Checkup routine
   1752           */

   \                                 In section .text, align 4, keep-with-next
   1753          int mbedtls_rsa_self_test( int verbose )
   1754          {
   \                     mbedtls_rsa_self_test: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0DC             SUB      SP,SP,#+368
   \   00000004   0x0004             MOVS     R4,R0
   1755              int ret = 0;
   1756          #if defined(MBEDTLS_PKCS1_V15)
   1757              size_t len;
   1758              mbedtls_rsa_context rsa;
   1759              unsigned char rsa_plaintext[PT_LEN];
   1760              unsigned char rsa_decrypted[PT_LEN];
   1761              unsigned char rsa_ciphertext[KEY_LEN];
   1762          #if defined(MBEDTLS_SHA1_C)
   1763              unsigned char sha1sum[20];
   1764          #endif
   1765          
   1766              mbedtls_rsa_init( &rsa, MBEDTLS_RSA_PKCS_V15, 0 );
   \   00000006   0x21AC             MOVS     R1,#+172
   \   00000008   0xA831             ADD      R0,SP,#+196
   \   0000000A   0x.... 0x....      BL       __aeabi_memclr4
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x905A             STR      R0,[SP, #+360]
   \   00000012   0xAD31             ADD      R5,SP,#+196
   \   00000014   0x21A8             MOVS     R1,#+168
   \   00000016   0x5068             STR      R0,[R5, R1]
   1767          
   1768              rsa.len = KEY_LEN;
   \   00000018   0x2080             MOVS     R0,#+128
   \   0000001A   0x9032             STR      R0,[SP, #+200]
   1769              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &rsa.N , 16, RSA_N  ) );
   \   0000001C   0x....             ADR.N    R2,?_0
   \   0000001E   0x2110             MOVS     R1,#+16
   \   00000020   0x0028             MOVS     R0,R5
   \   00000022   0x3008             ADDS     R0,R0,#+8
   \   00000024   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   00000028   0x0006             MOVS     R6,R0
   \   0000002A   0xD000             BEQ      .+4
   \   0000002C   0xE0B4             B        ??mbedtls_rsa_self_test_0
   1770              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &rsa.E , 16, RSA_E  ) );
   \   0000002E   0xBF00             Nop      
   \   00000030   0x....             ADR.N    R2,?_1
   \   00000032   0x2110             MOVS     R1,#+16
   \   00000034   0x0028             MOVS     R0,R5
   \   00000036   0x3014             ADDS     R0,R0,#+20
   \   00000038   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   0000003C   0x0006             MOVS     R6,R0
   \   0000003E   0xD000             BEQ      .+4
   \   00000040   0xE0AA             B        ??mbedtls_rsa_self_test_0
   1771              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &rsa.D , 16, RSA_D  ) );
   \   00000042   0xBF00             Nop      
   \   00000044   0x....             ADR.N    R2,?_2
   \   00000046   0x2110             MOVS     R1,#+16
   \   00000048   0x0028             MOVS     R0,R5
   \   0000004A   0x3020             ADDS     R0,R0,#+32
   \   0000004C   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   00000050   0x0006             MOVS     R6,R0
   \   00000052   0xD000             BEQ      .+4
   \   00000054   0xE0A0             B        ??mbedtls_rsa_self_test_0
   1772              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &rsa.P , 16, RSA_P  ) );
   \   00000056   0x....             LDR      R2,??DataTable33
   \   00000058   0x2110             MOVS     R1,#+16
   \   0000005A   0x0028             MOVS     R0,R5
   \   0000005C   0x302C             ADDS     R0,R0,#+44
   \   0000005E   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   00000062   0x0006             MOVS     R6,R0
   \   00000064   0xD000             BEQ      .+4
   \   00000066   0xE097             B        ??mbedtls_rsa_self_test_0
   1773              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &rsa.Q , 16, RSA_Q  ) );
   \   00000068   0x....             LDR      R2,??DataTable33_1
   \   0000006A   0x2110             MOVS     R1,#+16
   \   0000006C   0x0028             MOVS     R0,R5
   \   0000006E   0x3038             ADDS     R0,R0,#+56
   \   00000070   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   00000074   0x0006             MOVS     R6,R0
   \   00000076   0xD000             BEQ      .+4
   \   00000078   0xE08E             B        ??mbedtls_rsa_self_test_0
   1774              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &rsa.DP, 16, RSA_DP ) );
   \   0000007A   0x....             LDR      R2,??DataTable33_2
   \   0000007C   0x2110             MOVS     R1,#+16
   \   0000007E   0x0028             MOVS     R0,R5
   \   00000080   0x3044             ADDS     R0,R0,#+68
   \   00000082   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   00000086   0x0006             MOVS     R6,R0
   \   00000088   0xD000             BEQ      .+4
   \   0000008A   0xE085             B        ??mbedtls_rsa_self_test_0
   1775              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &rsa.DQ, 16, RSA_DQ ) );
   \   0000008C   0x....             LDR      R2,??DataTable33_3
   \   0000008E   0x2110             MOVS     R1,#+16
   \   00000090   0x0028             MOVS     R0,R5
   \   00000092   0x3050             ADDS     R0,R0,#+80
   \   00000094   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   00000098   0x0006             MOVS     R6,R0
   \   0000009A   0xD17D             BNE      ??mbedtls_rsa_self_test_0
   1776              MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &rsa.QP, 16, RSA_QP ) );
   \   0000009C   0x....             LDR      R2,??DataTable33_4
   \   0000009E   0x2110             MOVS     R1,#+16
   \   000000A0   0x0028             MOVS     R0,R5
   \   000000A2   0x305C             ADDS     R0,R0,#+92
   \   000000A4   0x.... 0x....      BL       mbedtls_mpi_read_string
   \   000000A8   0x0006             MOVS     R6,R0
   \   000000AA   0xD175             BNE      ??mbedtls_rsa_self_test_0
   1777          
   1778              if( verbose != 0 )
   \   000000AC   0x2C00             CMP      R4,#+0
   \   000000AE   0xD002             BEQ      ??mbedtls_rsa_self_test_1
   1779                  mbedtls_printf( "  RSA key validation: " );
   \   000000B0   0x....             LDR      R0,??DataTable33_5
   \   000000B2   0x.... 0x....      BL       printf
   1780          
   1781              if( mbedtls_rsa_check_pubkey(  &rsa ) != 0 ||
   1782                  mbedtls_rsa_check_privkey( &rsa ) != 0 )
   \                     ??mbedtls_rsa_self_test_1: (+1)
   \   000000B6   0x6928             LDR      R0,[R5, #+16]
   \   000000B8   0x2800             CMP      R0,#+0
   \   000000BA   0xD05E             BEQ      ??mbedtls_rsa_self_test_2
   \   000000BC   0x69E9             LDR      R1,[R5, #+28]
   \   000000BE   0x2900             CMP      R1,#+0
   \   000000C0   0xD05B             BEQ      ??mbedtls_rsa_self_test_2
   \   000000C2   0x2201             MOVS     R2,#+1
   \   000000C4   0x6800             LDR      R0,[R0, #+0]
   \   000000C6   0x4010             ANDS     R0,R0,R2
   \   000000C8   0xD057             BEQ      ??mbedtls_rsa_self_test_2
   \   000000CA   0x6808             LDR      R0,[R1, #+0]
   \   000000CC   0x4002             ANDS     R2,R2,R0
   \   000000CE   0xD054             BEQ      ??mbedtls_rsa_self_test_2
   \   000000D0   0x0028             MOVS     R0,R5
   \   000000D2   0x3008             ADDS     R0,R0,#+8
   \   000000D4   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   000000D8   0x2880             CMP      R0,#+128
   \   000000DA   0xD34E             BCC      ??mbedtls_rsa_self_test_2
   \   000000DC   0x0028             MOVS     R0,R5
   \   000000DE   0x3008             ADDS     R0,R0,#+8
   \   000000E0   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   000000E4   0x....             LDR      R1,??DataTable33_6  ;; 0x2001
   \   000000E6   0x4288             CMP      R0,R1
   \   000000E8   0xD247             BCS      ??mbedtls_rsa_self_test_2
   \   000000EA   0x0028             MOVS     R0,R5
   \   000000EC   0x3014             ADDS     R0,R0,#+20
   \   000000EE   0x.... 0x....      BL       mbedtls_mpi_bitlen
   \   000000F2   0x2802             CMP      R0,#+2
   \   000000F4   0xD341             BCC      ??mbedtls_rsa_self_test_2
   \   000000F6   0x0029             MOVS     R1,R5
   \   000000F8   0x3108             ADDS     R1,R1,#+8
   \   000000FA   0x0028             MOVS     R0,R5
   \   000000FC   0x3014             ADDS     R0,R0,#+20
   \   000000FE   0x.... 0x....      BL       mbedtls_mpi_cmp_mpi
   \   00000102   0x2800             CMP      R0,#+0
   \   00000104   0xD539             BPL      ??mbedtls_rsa_self_test_2
   \   00000106   0xA831             ADD      R0,SP,#+196
   \   00000108   0x.... 0x....      BL       mbedtls_rsa_check_privkey
   \   0000010C   0x2800             CMP      R0,#+0
   \   0000010E   0xD134             BNE      ??mbedtls_rsa_self_test_2
   1783              {
   1784                  if( verbose != 0 )
   1785                      mbedtls_printf( "failed\n" );
   1786          
   1787                  return( 1 );
   1788              }
   1789          
   1790              if( verbose != 0 )
   \   00000110   0x2C00             CMP      R4,#+0
   \   00000112   0xD002             BEQ      ??mbedtls_rsa_self_test_3
   1791                  mbedtls_printf( "passed\n  PKCS#1 encryption : " );
   \   00000114   0x....             LDR      R0,??DataTable33_7
   \   00000116   0x.... 0x....      BL       printf
   1792          
   1793              memcpy( rsa_plaintext, RSA_PT, PT_LEN );
   \                     ??mbedtls_rsa_self_test_3: (+1)
   \   0000011A   0x2218             MOVS     R2,#+24
   \   0000011C   0x....             LDR      R1,??DataTable33_8
   \   0000011E   0xA80B             ADD      R0,SP,#+44
   \   00000120   0x.... 0x....      BL       __aeabi_memcpy4
   1794          
   1795              if( mbedtls_rsa_pkcs1_encrypt( &rsa, myrand, NULL, MBEDTLS_RSA_PUBLIC, PT_LEN,
   1796                                     rsa_plaintext, rsa_ciphertext ) != 0 )
   \   00000124   0x....             LDR      R5,??DataTable33_9
   \   00000126   0xA811             ADD      R0,SP,#+68
   \   00000128   0x9002             STR      R0,[SP, #+8]
   \   0000012A   0xA80B             ADD      R0,SP,#+44
   \   0000012C   0x9001             STR      R0,[SP, #+4]
   \   0000012E   0x2018             MOVS     R0,#+24
   \   00000130   0x9000             STR      R0,[SP, #+0]
   \   00000132   0x2300             MOVS     R3,#+0
   \   00000134   0x2200             MOVS     R2,#+0
   \   00000136   0x0029             MOVS     R1,R5
   \   00000138   0xA831             ADD      R0,SP,#+196
   \   0000013A   0x.... 0x....      BL       mbedtls_rsa_pkcs1_encrypt
   \   0000013E   0x2800             CMP      R0,#+0
   \   00000140   0xD11B             BNE      ??mbedtls_rsa_self_test_2
   1797              {
   1798                  if( verbose != 0 )
   1799                      mbedtls_printf( "failed\n" );
   1800          
   1801                  return( 1 );
   1802              }
   1803          
   1804              if( verbose != 0 )
   \   00000142   0x2C00             CMP      R4,#+0
   \   00000144   0xD002             BEQ      ??mbedtls_rsa_self_test_4
   1805                  mbedtls_printf( "passed\n  PKCS#1 decryption : " );
   \   00000146   0x....             LDR      R0,??DataTable33_10
   \   00000148   0x.... 0x....      BL       printf
   1806          
   1807              if( mbedtls_rsa_pkcs1_decrypt( &rsa, myrand, NULL, MBEDTLS_RSA_PRIVATE, &len,
   1808                                     rsa_ciphertext, rsa_decrypted,
   1809                                     sizeof(rsa_decrypted) ) != 0 )
   \                     ??mbedtls_rsa_self_test_4: (+1)
   \   0000014C   0x2018             MOVS     R0,#+24
   \   0000014E   0x9003             STR      R0,[SP, #+12]
   \   00000150   0xA805             ADD      R0,SP,#+20
   \   00000152   0x9002             STR      R0,[SP, #+8]
   \   00000154   0xA811             ADD      R0,SP,#+68
   \   00000156   0x9001             STR      R0,[SP, #+4]
   \   00000158   0xA804             ADD      R0,SP,#+16
   \   0000015A   0x9000             STR      R0,[SP, #+0]
   \   0000015C   0x2301             MOVS     R3,#+1
   \   0000015E   0x2200             MOVS     R2,#+0
   \   00000160   0x0029             MOVS     R1,R5
   \   00000162   0xA831             ADD      R0,SP,#+196
   \   00000164   0x.... 0x....      BL       mbedtls_rsa_pkcs1_decrypt
   \   00000168   0x2800             CMP      R0,#+0
   \   0000016A   0xD106             BNE      ??mbedtls_rsa_self_test_2
   1810              {
   1811                  if( verbose != 0 )
   1812                      mbedtls_printf( "failed\n" );
   1813          
   1814                  return( 1 );
   1815              }
   1816          
   1817              if( memcmp( rsa_decrypted, rsa_plaintext, len ) != 0 )
   \   0000016C   0x9A04             LDR      R2,[SP, #+16]
   \   0000016E   0xA90B             ADD      R1,SP,#+44
   \   00000170   0xA805             ADD      R0,SP,#+20
   \   00000172   0x.... 0x....      BL       memcmp
   \   00000176   0x2800             CMP      R0,#+0
   \   00000178   0xD006             BEQ      ??mbedtls_rsa_self_test_5
   1818              {
   1819                  if( verbose != 0 )
   \                     ??mbedtls_rsa_self_test_2: (+1)
   \   0000017A   0x2C00             CMP      R4,#+0
   \   0000017C   0xD002             BEQ      ??mbedtls_rsa_self_test_6
   1820                      mbedtls_printf( "failed\n" );
   \   0000017E   0x....             LDR      R0,??DataTable33_11
   \   00000180   0x.... 0x....      BL       printf
   1821          
   1822                  return( 1 );
   \                     ??mbedtls_rsa_self_test_6: (+1)
   \   00000184   0x2001             MOVS     R0,#+1
   \   00000186   0xE00B             B        ??mbedtls_rsa_self_test_7
   1823              }
   1824          
   1825              if( verbose != 0 )
   \                     ??mbedtls_rsa_self_test_5: (+1)
   \   00000188   0x2C00             CMP      R4,#+0
   \   0000018A   0xD005             BEQ      ??mbedtls_rsa_self_test_0
   1826                  mbedtls_printf( "passed\n" );
   \   0000018C   0x....             LDR      R0,??DataTable33_12
   \   0000018E   0x.... 0x....      BL       printf
   1827          
   1828          #if defined(MBEDTLS_SHA1_C)
   1829              if( verbose != 0 )
   1830                  mbedtls_printf( "  PKCS#1 data sign  : " );
   1831          
   1832              mbedtls_sha1( rsa_plaintext, PT_LEN, sha1sum );
   1833          
   1834              if( mbedtls_rsa_pkcs1_sign( &rsa, myrand, NULL, MBEDTLS_RSA_PRIVATE, MBEDTLS_MD_SHA1, 0,
   1835                                  sha1sum, rsa_ciphertext ) != 0 )
   1836              {
   1837                  if( verbose != 0 )
   1838                      mbedtls_printf( "failed\n" );
   1839          
   1840                  return( 1 );
   1841              }
   1842          
   1843              if( verbose != 0 )
   1844                  mbedtls_printf( "passed\n  PKCS#1 sig. verify: " );
   1845          
   1846              if( mbedtls_rsa_pkcs1_verify( &rsa, NULL, NULL, MBEDTLS_RSA_PUBLIC, MBEDTLS_MD_SHA1, 0,
   1847                                    sha1sum, rsa_ciphertext ) != 0 )
   1848              {
   1849                  if( verbose != 0 )
   1850                      mbedtls_printf( "failed\n" );
   1851          
   1852                  return( 1 );
   1853              }
   1854          
   1855              if( verbose != 0 )
   1856                  mbedtls_printf( "passed\n" );
   1857          #endif /* MBEDTLS_SHA1_C */
   1858          
   1859              if( verbose != 0 )
   1860                  mbedtls_printf( "\n" );
   \   00000192   0x....             ADR      R0,??DataTable33_13  ;; "\n"
   \   00000194   0x.... 0x....      BL       printf
   1861          
   1862          cleanup:
   1863              mbedtls_rsa_free( &rsa );
   \                     ??mbedtls_rsa_self_test_0: (+1)
   \   00000198   0xA831             ADD      R0,SP,#+196
   \   0000019A   0x.... 0x....      BL       mbedtls_rsa_free
   1864          #else /* MBEDTLS_PKCS1_V15 */
   1865              ((void) verbose);
   1866          #endif /* MBEDTLS_PKCS1_V15 */
   1867              return( ret );
   \   0000019E   0x0030             MOVS     R0,R6
   \                     ??mbedtls_rsa_self_test_7: (+1)
   \   000001A0   0xB05C             ADD      SP,SP,#+368
   \   000001A2   0xBD70             POP      {R4-R6,PC}       ;; return
   1868          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x00002001         DC32     0x2001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0xFFFFBE00         DC32     0xffffbe00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0xFFFFBD80         DC32     0xffffbd80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   0xFFFFBB80         DC32     0xffffbb80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_2:
   \   00000000   0xFFFFBF80         DC32     0xffffbf80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   0xFFFFBD00         DC32     0xffffbd00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_1:
   \   00000000   0xFFFFBF80         DC32     0xffffbf80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_2:
   \   00000000   0xFFFFBB80         DC32     0xffffbb80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   0xFFFFBF00         DC32     0xffffbf00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_1:
   \   00000000   0xFFFFFBAC         DC32     0xfffffbac

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_2:
   \   00000000   0x000003F1         DC32     0x3f1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26_3:
   \   00000000   0xFFFFBF80         DC32     0xffffbf80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   0xFFFFBC00         DC32     0xffffbc00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_1:
   \   00000000   0x0000045C         DC32     0x45c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_2:
   \   00000000   0xFFFFFBF4         DC32     0xfffffbf4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_3:
   \   00000000   0x0000040C         DC32     0x40c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_4:
   \   00000000   0xFFFFBF00         DC32     0xffffbf00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   0xFFFFBF80         DC32     0xffffbf80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_1:
   \   00000000   0xFFFFBB80         DC32     0xffffbb80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   0xFFFFBD00         DC32     0xffffbd00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30_1:
   \   00000000   0xFFFFBF00         DC32     0xffffbf00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30_2:
   \   00000000   0xFFFFFBA0         DC32     0xfffffba0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30_3:
   \   00000000   0x000003F1         DC32     0x3f1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31:
   \   00000000   0xFFFFBF80         DC32     0xffffbf80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32:
   \   00000000   0xFFFFBC80         DC32     0xffffbc80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_1:
   \   00000000   0x00000464         DC32     0x464

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_2:
   \   00000000   0xFFFFFBDC         DC32     0xfffffbdc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_3:
   \   00000000   0x000003F1         DC32     0x3f1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_4:
   \   00000000   0xFFFFBF00         DC32     0xffffbf00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_5:
   \   00000000   0x00000424         DC32     0x424

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_1:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_2:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_3:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_4:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_5:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_6:
   \   00000000   0x00002001         DC32     0x2001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_7:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_8:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_9:
   \   00000000   0x........         DC32     myrand

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_10:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_11:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_12:
   \   00000000   0x........         DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_13:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x39 0x32          DC8 39H, 32H, 39H, 32H, 37H, 35H, 38H, 34H
   \              0x39 0x32    
   \              0x37 0x35    
   \              0x38 0x34    
   \   00000008   0x35 0x33          DC8 35H, 33H, 30H, 36H, 33H, 44H, 38H, 30H
   \              0x30 0x36    
   \              0x33 0x44    
   \              0x38 0x30    
   \   00000010   0x33 0x44          DC8 33H, 44H, 44H, 36H, 30H, 33H, 44H, 35H
   \              0x44 0x36    
   \              0x30 0x33    
   \              0x44 0x35    
   \   00000018   0x45 0x37          DC8 45H, 37H, 37H, 37H, 44H, 37H, 38H, 38H
   \              0x37 0x37    
   \              0x44 0x37    
   \              0x38 0x38    
   \   00000020   0x38 0x45          DC8 38H, 45H, 44H, 31H, 44H, 35H, 42H, 46H
   \              0x44 0x31    
   \              0x44 0x35    
   \              0x42 0x46    
   \   00000028   0x33 0x35          DC8 33H, 35H, 37H, 38H, 36H, 31H, 39H, 30H
   \              0x37 0x38    
   \              0x36 0x31    
   \              0x39 0x30    
   \   00000030   0x46 0x41          DC8 46H, 41H, 32H, 46H, 32H, 33H, 45H, 42H
   \              0x32 0x46    
   \              0x32 0x33    
   \              0x45 0x42    
   \   00000038   0x43 0x30          DC8 43H, 30H, 38H, 34H, 38H, 41H, 45H, 41H
   \              0x38 0x34    
   \              0x38 0x41    
   \              0x45 0x41    
   \   00000040   0x44 0x44          DC8 44H, 44H, 41H, 39H, 32H, 43H, 41H, 36H
   \              0x41 0x39    
   \              0x32 0x43    
   \              0x41 0x36    
   \   00000048   0x43 0x33          DC8 43H, 33H, 44H, 38H, 30H, 42H, 33H, 32H
   \              0x44 0x38    
   \              0x30 0x42    
   \              0x33 0x32    
   \   00000050   0x43 0x34          DC8 43H, 34H, 44H, 31H, 30H, 39H, 42H, 45H
   \              0x44 0x31    
   \              0x30 0x39    
   \              0x42 0x45    
   \   00000058   0x30 0x46          DC8 30H, 46H, 33H, 36H, 44H, 36H, 41H, 45H
   \              0x33 0x36    
   \              0x44 0x36    
   \              0x41 0x45    
   \   00000060   0x37 0x31          DC8 37H, 31H, 33H, 30H, 42H, 39H, 43H, 45H
   \              0x33 0x30    
   \              0x42 0x39    
   \              0x43 0x45    
   \   00000068   0x44 0x37          DC8 44H, 37H, 41H, 43H, 44H, 46H, 35H, 34H
   \              0x41 0x43    
   \              0x44 0x46    
   \              0x35 0x34    
   \   00000070   0x43 0x46          DC8 43H, 46H, 43H, 37H, 35H, 35H, 35H, 41H
   \              0x43 0x37    
   \              0x35 0x35    
   \              0x35 0x41    
   \   00000078   0x43 0x31          DC8 43H, 31H, 34H, 45H, 45H, 42H, 41H, 42H
   \              0x34 0x45    
   \              0x45 0x42    
   \              0x41 0x42    
   \   00000080   0x39 0x33          DC8 39H, 33H, 41H, 38H, 39H, 38H, 31H, 33H
   \              0x41 0x38    
   \              0x39 0x38    
   \              0x31 0x33    
   \   00000088   0x46 0x42          DC8 46H, 42H, 46H, 33H, 43H, 34H, 46H, 38H
   \              0x46 0x33    
   \              0x43 0x34    
   \              0x46 0x38    
   \   00000090   0x30 0x36          DC8 30H, 36H, 36H, 44H, 32H, 44H, 38H, 30H
   \              0x36 0x44    
   \              0x32 0x44    
   \              0x38 0x30    
   \   00000098   0x30 0x46          DC8 30H, 46H, 37H, 43H, 33H, 38H, 41H, 38H
   \              0x37 0x43    
   \              0x33 0x38    
   \              0x41 0x38    
   \   000000A0   0x31 0x41          DC8 31H, 41H, 45H, 33H, 31H, 39H, 34H, 32H
   \              0x45 0x33    
   \              0x31 0x39    
   \              0x34 0x32    
   \   000000A8   0x39 0x31          DC8 39H, 31H, 37H, 34H, 30H, 33H, 46H, 46H
   \              0x37 0x34    
   \              0x30 0x33    
   \              0x46 0x46    
   \   000000B0   0x34 0x39          DC8 34H, 39H, 34H, 36H, 42H, 30H, 41H, 38H
   \              0x34 0x36    
   \              0x42 0x30    
   \              0x41 0x38    
   \   000000B8   0x33 0x44          DC8 33H, 44H, 33H, 44H, 33H, 45H, 30H, 35H
   \              0x33 0x44    
   \              0x33 0x45    
   \              0x30 0x35    
   \   000000C0   0x45 0x45          DC8 45H, 45H, 35H, 37H, 43H, 36H, 46H, 35H
   \              0x35 0x37    
   \              0x43 0x36    
   \              0x46 0x35    
   \   000000C8   0x46 0x35          DC8 46H, 35H, 36H, 30H, 36H, 46H, 42H, 35H
   \              0x36 0x30    
   \              0x36 0x46    
   \              0x42 0x35    
   \   000000D0   0x44 0x34          DC8 44H, 34H, 42H, 43H, 36H, 43H, 44H, 33H
   \              0x42 0x43    
   \              0x36 0x43    
   \              0x44 0x33    
   \   000000D8   0x34 0x45          DC8 34H, 45H, 45H, 30H, 38H, 30H, 31H, 41H
   \              0x45 0x30    
   \              0x38 0x30    
   \              0x31 0x41    
   \   000000E0   0x35 0x45          DC8 35H, 45H, 39H, 34H, 42H, 42H, 37H, 37H
   \              0x39 0x34    
   \              0x42 0x42    
   \              0x37 0x37    
   \   000000E8   0x42 0x30          DC8 42H, 30H, 37H, 35H, 30H, 37H, 32H, 33H
   \              0x37 0x35    
   \              0x30 0x37    
   \              0x32 0x33    
   \   000000F0   0x33 0x41          DC8 33H, 41H, 30H, 42H, 43H, 37H, 42H, 41H
   \              0x30 0x42    
   \              0x43 0x37    
   \              0x42 0x41    
   \   000000F8   0x43 0x38          DC8 43H, 38H, 46H, 39H, 30H, 46H, 37H, 39H
   \              0x46 0x39    
   \              0x30 0x46    
   \              0x37 0x39    
   \   00000100   0x00               DC8 0
   \   00000101   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x31 0x30          DC8 "10001"
   \              0x30 0x30    
   \              0x31 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x32 0x34          DC8 32H, 34H, 42H, 46H, 36H, 31H, 38H, 35H
   \              0x42 0x46    
   \              0x36 0x31    
   \              0x38 0x35    
   \   00000008   0x34 0x36          DC8 34H, 36H, 38H, 37H, 38H, 36H, 46H, 44H
   \              0x38 0x37    
   \              0x38 0x36    
   \              0x46 0x44    
   \   00000010   0x44 0x33          DC8 44H, 33H, 30H, 33H, 30H, 38H, 33H, 44H
   \              0x30 0x33    
   \              0x30 0x38    
   \              0x33 0x44    
   \   00000018   0x32 0x35          DC8 32H, 35H, 45H, 36H, 34H, 45H, 46H, 43H
   \              0x45 0x36    
   \              0x34 0x45    
   \              0x46 0x43    
   \   00000020   0x36 0x36          DC8 36H, 36H, 43H, 41H, 34H, 37H, 32H, 42H
   \              0x43 0x41    
   \              0x34 0x37    
   \              0x32 0x42    
   \   00000028   0x43 0x34          DC8 43H, 34H, 34H, 44H, 32H, 35H, 33H, 31H
   \              0x34 0x44    
   \              0x32 0x35    
   \              0x33 0x31    
   \   00000030   0x30 0x32          DC8 30H, 32H, 46H, 38H, 42H, 34H, 41H, 39H
   \              0x46 0x38    
   \              0x42 0x34    
   \              0x41 0x39    
   \   00000038   0x44 0x33          DC8 44H, 33H, 42H, 46H, 41H, 37H, 35H, 30H
   \              0x42 0x46    
   \              0x41 0x37    
   \              0x35 0x30    
   \   00000040   0x39 0x31          DC8 39H, 31H, 33H, 38H, 36H, 43H, 30H, 30H
   \              0x33 0x38    
   \              0x36 0x43    
   \              0x30 0x30    
   \   00000048   0x37 0x37          DC8 37H, 37H, 39H, 33H, 37H, 46H, 45H, 33H
   \              0x39 0x33    
   \              0x37 0x46    
   \              0x45 0x33    
   \   00000050   0x33 0x46          DC8 33H, 46H, 41H, 33H, 32H, 35H, 32H, 44H
   \              0x41 0x33    
   \              0x32 0x35    
   \              0x32 0x44    
   \   00000058   0x32 0x38          DC8 32H, 38H, 38H, 35H, 35H, 38H, 33H, 37H
   \              0x38 0x35    
   \              0x35 0x38    
   \              0x33 0x37    
   \   00000060   0x41 0x45          DC8 41H, 45H, 31H, 42H, 34H, 38H, 34H, 41H
   \              0x31 0x42    
   \              0x34 0x38    
   \              0x34 0x41    
   \   00000068   0x38 0x41          DC8 38H, 41H, 39H, 41H, 34H, 35H, 46H, 37H
   \              0x39 0x41    
   \              0x34 0x35    
   \              0x46 0x37    
   \   00000070   0x45 0x45          DC8 45H, 45H, 38H, 43H, 30H, 43H, 36H, 33H
   \              0x38 0x43    
   \              0x30 0x43    
   \              0x36 0x33    
   \   00000078   0x34 0x46          DC8 34H, 46H, 39H, 39H, 45H, 38H, 43H, 44H
   \              0x39 0x39    
   \              0x45 0x38    
   \              0x43 0x44    
   \   00000080   0x44 0x46          DC8 44H, 46H, 37H, 39H, 43H, 35H, 43H, 45H
   \              0x37 0x39    
   \              0x43 0x35    
   \              0x43 0x45    
   \   00000088   0x30 0x37          DC8 30H, 37H, 45H, 45H, 37H, 32H, 43H, 37H
   \              0x45 0x45    
   \              0x37 0x32    
   \              0x43 0x37    
   \   00000090   0x46 0x31          DC8 46H, 31H, 32H, 33H, 31H, 34H, 32H, 31H
   \              0x32 0x33    
   \              0x31 0x34    
   \              0x32 0x31    
   \   00000098   0x39 0x38          DC8 39H, 38H, 31H, 36H, 34H, 32H, 33H, 34H
   \              0x31 0x36    
   \              0x34 0x32    
   \              0x33 0x34    
   \   000000A0   0x43 0x41          DC8 43H, 41H, 42H, 42H, 37H, 32H, 34H, 43H
   \              0x42 0x42    
   \              0x37 0x32    
   \              0x34 0x43    
   \   000000A8   0x46 0x37          DC8 46H, 37H, 38H, 42H, 38H, 31H, 37H, 33H
   \              0x38 0x42    
   \              0x38 0x31    
   \              0x37 0x33    
   \   000000B0   0x42 0x39          DC8 42H, 39H, 46H, 38H, 38H, 30H, 46H, 43H
   \              0x46 0x38    
   \              0x38 0x30    
   \              0x46 0x43    
   \   000000B8   0x38 0x36          DC8 38H, 36H, 33H, 32H, 32H, 34H, 30H, 37H
   \              0x33 0x32    
   \              0x32 0x34    
   \              0x30 0x37    
   \   000000C0   0x41 0x46          DC8 41H, 46H, 31H, 46H, 45H, 44H, 46H, 44H
   \              0x31 0x46    
   \              0x45 0x44    
   \              0x46 0x44    
   \   000000C8   0x44 0x45          DC8 44H, 45H, 32H, 42H, 45H, 42H, 36H, 37H
   \              0x32 0x42    
   \              0x45 0x42    
   \              0x36 0x37    
   \   000000D0   0x34 0x43          DC8 34H, 43H, 41H, 31H, 35H, 46H, 33H, 45H
   \              0x41 0x31    
   \              0x35 0x46    
   \              0x33 0x45    
   \   000000D8   0x38 0x31          DC8 38H, 31H, 41H, 31H, 35H, 32H, 31H, 45H
   \              0x41 0x31    
   \              0x35 0x32    
   \              0x31 0x45    
   \   000000E0   0x30 0x37          DC8 30H, 37H, 31H, 35H, 31H, 33H, 41H, 31H
   \              0x31 0x35    
   \              0x31 0x33    
   \              0x41 0x31    
   \   000000E8   0x45 0x38          DC8 45H, 38H, 35H, 42H, 35H, 44H, 46H, 41H
   \              0x35 0x42    
   \              0x35 0x44    
   \              0x46 0x41    
   \   000000F0   0x30 0x33          DC8 30H, 33H, 31H, 46H, 32H, 31H, 45H, 43H
   \              0x31 0x46    
   \              0x32 0x31    
   \              0x45 0x43    
   \   000000F8   0x41 0x45          DC8 41H, 45H, 39H, 31H, 41H, 33H, 34H, 44H
   \              0x39 0x31    
   \              0x41 0x33    
   \              0x34 0x44    
   \   00000100   0x00               DC8 0
   \   00000101   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x43 0x33          DC8 43H, 33H, 36H, 44H, 30H, 45H, 42H, 37H
   \              0x36 0x44    
   \              0x30 0x45    
   \              0x42 0x37    
   \   00000008   0x46 0x43          DC8 46H, 43H, 44H, 32H, 38H, 35H, 32H, 32H
   \              0x44 0x32    
   \              0x38 0x35    
   \              0x32 0x32    
   \   00000010   0x33 0x43          DC8 33H, 43H, 46H, 42H, 35H, 41H, 41H, 42H
   \              0x46 0x42    
   \              0x35 0x41    
   \              0x41 0x42    
   \   00000018   0x41 0x35          DC8 41H, 35H, 42H, 44H, 41H, 33H, 44H, 38H
   \              0x42 0x44    
   \              0x41 0x33    
   \              0x44 0x38    
   \   00000020   0x32 0x43          DC8 32H, 43H, 30H, 31H, 43H, 41H, 44H, 31H
   \              0x30 0x31    
   \              0x43 0x41    
   \              0x44 0x31    
   \   00000028   0x39 0x45          DC8 39H, 45H, 41H, 34H, 38H, 34H, 41H, 38H
   \              0x41 0x34    
   \              0x38 0x34    
   \              0x41 0x38    
   \   00000030   0x37 0x45          DC8 37H, 45H, 41H, 34H, 33H, 37H, 37H, 36H
   \              0x41 0x34    
   \              0x33 0x37    
   \              0x37 0x36    
   \   00000038   0x33 0x37          DC8 33H, 37H, 45H, 37H, 35H, 35H, 30H, 30H
   \              0x45 0x37    
   \              0x35 0x35    
   \              0x30 0x30    
   \   00000040   0x46 0x43          DC8 46H, 43H, 42H, 32H, 30H, 30H, 35H, 43H
   \              0x42 0x32    
   \              0x30 0x30    
   \              0x35 0x43    
   \   00000048   0x35 0x43          DC8 35H, 43H, 37H, 44H, 44H, 36H, 45H, 43H
   \              0x37 0x44    
   \              0x44 0x36    
   \              0x45 0x43    
   \   00000050   0x34 0x41          DC8 34H, 41H, 43H, 30H, 32H, 33H, 43H, 44H
   \              0x43 0x30    
   \              0x32 0x33    
   \              0x43 0x44    
   \   00000058   0x41 0x32          DC8 41H, 32H, 38H, 35H, 44H, 37H, 39H, 36H
   \              0x38 0x35    
   \              0x44 0x37    
   \              0x39 0x36    
   \   00000060   0x43 0x33          DC8 43H, 33H, 44H, 39H, 45H, 37H, 35H, 45H
   \              0x44 0x39    
   \              0x45 0x37    
   \              0x35 0x45    
   \   00000068   0x31 0x45          DC8 31H, 45H, 46H, 43H, 34H, 32H, 34H, 38H
   \              0x46 0x43    
   \              0x34 0x32    
   \              0x34 0x38    
   \   00000070   0x38 0x42          DC8 38H, 42H, 42H, 34H, 46H, 31H, 44H, 31H
   \              0x42 0x34    
   \              0x46 0x31    
   \              0x44 0x31    
   \   00000078   0x33 0x41          DC8 33H, 41H, 43H, 33H, 30H, 41H, 35H, 37H
   \              0x43 0x33    
   \              0x30 0x41    
   \              0x35 0x37    
   \   00000080   0x00               DC8 0
   \   00000081   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x43 0x30          DC8 43H, 30H, 30H, 30H, 44H, 46H, 35H, 31H
   \              0x30 0x30    
   \              0x44 0x46    
   \              0x35 0x31    
   \   00000008   0x41 0x37          DC8 41H, 37H, 43H, 37H, 37H, 41H, 45H, 38H
   \              0x43 0x37    
   \              0x37 0x41    
   \              0x45 0x38    
   \   00000010   0x44 0x37          DC8 44H, 37H, 43H, 37H, 33H, 37H, 30H, 43H
   \              0x43 0x37    
   \              0x33 0x37    
   \              0x30 0x43    
   \   00000018   0x31 0x46          DC8 31H, 46H, 46H, 35H, 35H, 42H, 36H, 39H
   \              0x46 0x35    
   \              0x35 0x42    
   \              0x36 0x39    
   \   00000020   0x45 0x32          DC8 45H, 32H, 31H, 31H, 43H, 32H, 42H, 39H
   \              0x31 0x31    
   \              0x43 0x32    
   \              0x42 0x39    
   \   00000028   0x45 0x35          DC8 45H, 35H, 44H, 42H, 31H, 45H, 44H, 30H
   \              0x44 0x42    
   \              0x31 0x45    
   \              0x44 0x30    
   \   00000030   0x42 0x46          DC8 42H, 46H, 36H, 31H, 44H, 30H, 44H, 39H
   \              0x36 0x31    
   \              0x44 0x30    
   \              0x44 0x39    
   \   00000038   0x38 0x39          DC8 38H, 39H, 39H, 36H, 32H, 30H, 46H, 34H
   \              0x39 0x36    
   \              0x32 0x30    
   \              0x46 0x34    
   \   00000040   0x39 0x31          DC8 39H, 31H, 30H, 45H, 34H, 31H, 36H, 38H
   \              0x30 0x45    
   \              0x34 0x31    
   \              0x36 0x38    
   \   00000048   0x33 0x38          DC8 33H, 38H, 37H, 45H, 33H, 43H, 33H, 30H
   \              0x37 0x45    
   \              0x33 0x43    
   \              0x33 0x30    
   \   00000050   0x41 0x41          DC8 41H, 41H, 31H, 45H, 30H, 30H, 43H, 33H
   \              0x31 0x45    
   \              0x30 0x30    
   \              0x43 0x33    
   \   00000058   0x33 0x39          DC8 33H, 39H, 41H, 37H, 39H, 35H, 30H, 38H
   \              0x41 0x37    
   \              0x39 0x35    
   \              0x30 0x38    
   \   00000060   0x38 0x34          DC8 38H, 34H, 35H, 32H, 44H, 44H, 39H, 36H
   \              0x35 0x32    
   \              0x44 0x44    
   \              0x39 0x36    
   \   00000068   0x41 0x39          DC8 41H, 39H, 41H, 35H, 45H, 41H, 35H, 44H
   \              0x41 0x35    
   \              0x45 0x41    
   \              0x35 0x44    
   \   00000070   0x39 0x44          DC8 39H, 44H, 43H, 41H, 36H, 38H, 44H, 41H
   \              0x43 0x41    
   \              0x36 0x38    
   \              0x44 0x41    
   \   00000078   0x36 0x33          DC8 36H, 33H, 36H, 30H, 33H, 32H, 41H, 46H
   \              0x36 0x30    
   \              0x33 0x32    
   \              0x41 0x46    
   \   00000080   0x00               DC8 0
   \   00000081   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x43 0x31          DC8 43H, 31H, 41H, 43H, 46H, 35H, 36H, 37H
   \              0x41 0x43    
   \              0x46 0x35    
   \              0x36 0x37    
   \   00000008   0x35 0x36          DC8 35H, 36H, 34H, 32H, 37H, 34H, 46H, 42H
   \              0x34 0x32    
   \              0x37 0x34    
   \              0x46 0x42    
   \   00000010   0x30 0x37          DC8 30H, 37H, 41H, 30H, 42H, 42H, 41H, 44H
   \              0x41 0x30    
   \              0x42 0x42    
   \              0x41 0x44    
   \   00000018   0x35 0x44          DC8 35H, 44H, 32H, 36H, 45H, 32H, 39H, 38H
   \              0x32 0x36    
   \              0x45 0x32    
   \              0x39 0x38    
   \   00000020   0x33 0x43          DC8 33H, 43H, 39H, 34H, 44H, 32H, 32H, 32H
   \              0x39 0x34    
   \              0x44 0x32    
   \              0x32 0x32    
   \   00000028   0x38 0x38          DC8 38H, 38H, 41H, 43H, 44H, 37H, 36H, 33H
   \              0x41 0x43    
   \              0x44 0x37    
   \              0x36 0x33    
   \   00000030   0x46 0x44          DC8 46H, 44H, 38H, 45H, 35H, 36H, 30H, 30H
   \              0x38 0x45    
   \              0x35 0x36    
   \              0x30 0x30    
   \   00000038   0x45 0x44          DC8 45H, 44H, 34H, 41H, 37H, 30H, 32H, 44H
   \              0x34 0x41    
   \              0x37 0x30    
   \              0x32 0x44    
   \   00000040   0x46 0x38          DC8 46H, 38H, 34H, 31H, 39H, 38H, 41H, 35H
   \              0x34 0x31    
   \              0x39 0x38    
   \              0x41 0x35    
   \   00000048   0x46 0x30          DC8 46H, 30H, 36H, 43H, 32H, 45H, 37H, 32H
   \              0x36 0x43    
   \              0x32 0x45    
   \              0x37 0x32    
   \   00000050   0x32 0x33          DC8 32H, 33H, 36H, 41H, 45H, 34H, 39H, 30H
   \              0x36 0x41    
   \              0x45 0x34    
   \              0x39 0x30    
   \   00000058   0x43 0x39          DC8 43H, 39H, 33H, 46H, 30H, 37H, 46H, 38H
   \              0x33 0x46    
   \              0x30 0x37    
   \              0x46 0x38    
   \   00000060   0x33 0x43          DC8 33H, 43H, 43H, 35H, 35H, 39H, 43H, 44H
   \              0x43 0x35    
   \              0x35 0x39    
   \              0x43 0x44    
   \   00000068   0x32 0x37          DC8 32H, 37H, 42H, 43H, 32H, 44H, 31H, 43H
   \              0x42 0x43    
   \              0x32 0x44    
   \              0x31 0x43    
   \   00000070   0x41 0x34          DC8 41H, 34H, 38H, 38H, 38H, 31H, 31H, 37H
   \              0x38 0x38    
   \              0x38 0x31    
   \              0x31 0x37    
   \   00000078   0x33 0x30          DC8 33H, 30H, 42H, 42H, 35H, 37H, 32H, 35H
   \              0x42 0x42    
   \              0x35 0x37    
   \              0x32 0x35    
   \   00000080   0x00               DC8 0
   \   00000081   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x34 0x39          DC8 34H, 39H, 35H, 39H, 43H, 42H, 46H, 36H
   \              0x35 0x39    
   \              0x43 0x42    
   \              0x46 0x36    
   \   00000008   0x46 0x38          DC8 46H, 38H, 46H, 45H, 46H, 37H, 35H, 30H
   \              0x46 0x45    
   \              0x46 0x37    
   \              0x35 0x30    
   \   00000010   0x41 0x45          DC8 41H, 45H, 45H, 36H, 39H, 37H, 37H, 43H
   \              0x45 0x36    
   \              0x39 0x37    
   \              0x37 0x43    
   \   00000018   0x31 0x35          DC8 31H, 35H, 35H, 35H, 37H, 39H, 43H, 37H
   \              0x35 0x35    
   \              0x37 0x39    
   \              0x43 0x37    
   \   00000020   0x44 0x38          DC8 44H, 38H, 41H, 41H, 45H, 41H, 35H, 36H
   \              0x41 0x41    
   \              0x45 0x41    
   \              0x35 0x36    
   \   00000028   0x37 0x34          DC8 37H, 34H, 39H, 45H, 41H, 32H, 38H, 36H
   \              0x39 0x45    
   \              0x41 0x32    
   \              0x38 0x36    
   \   00000030   0x32 0x33          DC8 32H, 33H, 32H, 37H, 32H, 45H, 34H, 46H
   \              0x32 0x37    
   \              0x32 0x45    
   \              0x34 0x46    
   \   00000038   0x37 0x44          DC8 37H, 44H, 30H, 35H, 39H, 32H, 41H, 46H
   \              0x30 0x35    
   \              0x39 0x32    
   \              0x41 0x46    
   \   00000040   0x37 0x43          DC8 37H, 43H, 31H, 46H, 31H, 33H, 31H, 33H
   \              0x31 0x46    
   \              0x31 0x33    
   \              0x31 0x33    
   \   00000048   0x43 0x41          DC8 43H, 41H, 43H, 39H, 34H, 37H, 31H, 42H
   \              0x43 0x39    
   \              0x34 0x37    
   \              0x31 0x42    
   \   00000050   0x35 0x43          DC8 35H, 43H, 35H, 32H, 33H, 42H, 46H, 45H
   \              0x35 0x32    
   \              0x33 0x42    
   \              0x46 0x45    
   \   00000058   0x35 0x39          DC8 35H, 39H, 32H, 46H, 35H, 31H, 37H, 42H
   \              0x32 0x46    
   \              0x35 0x31    
   \              0x37 0x42    
   \   00000060   0x34 0x30          DC8 34H, 30H, 37H, 41H, 31H, 42H, 44H, 37H
   \              0x37 0x41    
   \              0x31 0x42    
   \              0x44 0x37    
   \   00000068   0x36 0x43          DC8 36H, 43H, 31H, 36H, 34H, 42H, 39H, 33H
   \              0x31 0x36    
   \              0x34 0x42    
   \              0x39 0x33    
   \   00000070   0x44 0x41          DC8 44H, 41H, 32H, 44H, 33H, 32H, 41H, 33H
   \              0x32 0x44    
   \              0x33 0x32    
   \              0x41 0x33    
   \   00000078   0x38 0x33          DC8 38H, 33H, 45H, 35H, 38H, 33H, 35H, 37H
   \              0x45 0x35    
   \              0x38 0x33    
   \              0x35 0x37    
   \   00000080   0x00               DC8 0
   \   00000081   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x39 0x41          DC8 39H, 41H, 45H, 37H, 46H, 42H, 43H, 39H
   \              0x45 0x37    
   \              0x46 0x42    
   \              0x43 0x39    
   \   00000008   0x39 0x35          DC8 39H, 35H, 34H, 36H, 34H, 33H, 32H, 44H
   \              0x34 0x36    
   \              0x34 0x33    
   \              0x32 0x44    
   \   00000010   0x46 0x37          DC8 46H, 37H, 31H, 38H, 39H, 36H, 46H, 43H
   \              0x31 0x38    
   \              0x39 0x36    
   \              0x46 0x43    
   \   00000018   0x32 0x33          DC8 32H, 33H, 39H, 45H, 41H, 44H, 41H, 45H
   \              0x39 0x45    
   \              0x41 0x44    
   \              0x41 0x45    
   \   00000020   0x46 0x33          DC8 46H, 33H, 38H, 44H, 31H, 38H, 44H, 32H
   \              0x38 0x44    
   \              0x31 0x38    
   \              0x44 0x32    
   \   00000028   0x42 0x32          DC8 42H, 32H, 46H, 30H, 45H, 32H, 44H, 44H
   \              0x46 0x30    
   \              0x45 0x32    
   \              0x44 0x44    
   \   00000030   0x32 0x37          DC8 32H, 37H, 35H, 41H, 41H, 39H, 37H, 37H
   \              0x35 0x41    
   \              0x41 0x39    
   \              0x37 0x37    
   \   00000038   0x45 0x32          DC8 45H, 32H, 42H, 46H, 34H, 34H, 31H, 31H
   \              0x42 0x46    
   \              0x34 0x34    
   \              0x31 0x31    
   \   00000040   0x46 0x35          DC8 46H, 35H, 41H, 33H, 42H, 32H, 41H, 35H
   \              0x41 0x33    
   \              0x42 0x32    
   \              0x41 0x35    
   \   00000048   0x44 0x33          DC8 44H, 33H, 33H, 36H, 30H, 35H, 41H, 45H
   \              0x33 0x36    
   \              0x30 0x35    
   \              0x41 0x45    
   \   00000050   0x42 0x42          DC8 42H, 42H, 43H, 43H, 42H, 41H, 37H, 46H
   \              0x43 0x43    
   \              0x42 0x41    
   \              0x37 0x46    
   \   00000058   0x45 0x42          DC8 45H, 42H, 39H, 46H, 32H, 44H, 32H, 46H
   \              0x39 0x46    
   \              0x32 0x44    
   \              0x32 0x46    
   \   00000060   0x41 0x37          DC8 41H, 37H, 34H, 32H, 30H, 36H, 43H, 45H
   \              0x34 0x32    
   \              0x30 0x36    
   \              0x43 0x45    
   \   00000068   0x43 0x31          DC8 43H, 31H, 36H, 39H, 44H, 37H, 34H, 42H
   \              0x36 0x39    
   \              0x44 0x37    
   \              0x34 0x42    
   \   00000070   0x46 0x35          DC8 46H, 35H, 41H, 38H, 43H, 35H, 30H, 44H
   \              0x41 0x38    
   \              0x43 0x35    
   \              0x30 0x44    
   \   00000078   0x36 0x46          DC8 36H, 46H, 34H, 38H, 45H, 41H, 30H, 38H
   \              0x34 0x38    
   \              0x45 0x41    
   \              0x30 0x38    
   \   00000080   0x00               DC8 0
   \   00000081   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x20 0x20          DC8 "  RSA key validation: "
   \              0x52 0x53    
   \              0x41 0x20    
   \              0x6B 0x65    
   \              0x79 0x20    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x3A 0x20    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x66 0x61          DC8 "failed\012"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x70 0x61          DC8 "passed\012  PKCS#1 encryption : "
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x20    
   \              0x20 0x50    
   \              0x4B 0x43    
   \              0x53 0x23    
   \              0x31 0x20    
   \              0x65 0x6E    
   \              0x63 0x72    
   \              0x79 0x70    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_11:
   \   00000000   0xAA 0xBB          DC8 0AAH, 0BBH, 0CCH, 3, 2, 1, 0, 0FFH
   \              0xCC 0x03    
   \              0x02 0x01    
   \              0x00 0xFF    
   \   00000008   0xFF 0xFF          DC8 0FFH, 0FFH, 0FFH, 0FFH, 11H, 22H, 33H, 0AH
   \              0xFF 0xFF    
   \              0x11 0x22    
   \              0x33 0x0A    
   \   00000010   0x0B 0x0C          DC8 0BH, 0CH, 0CCH, 0DDH, 0DDH, 0DDH, 0DDH, 0DDH, 0, 0, 0, 0
   \              0xCC 0xDD    
   \              0xDD 0xDD    
   \              0xDD 0xDD    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_12:
   \   00000000   0x70 0x61          DC8 "passed\012  PKCS#1 decryption : "
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x20    
   \              0x20 0x50    
   \              0x4B 0x43    
   \              0x53 0x23    
   \              0x31 0x20    
   \              0x64 0x65    
   \              0x63 0x72    
   \              0x79 0x70    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_13:
   \   00000000   0x70 0x61          DC8 "passed\012"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x0A 0x00    

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_14:
   \   00000000   0x0A 0x00          DC8 "\012"
   1869          
   1870          #endif /* MBEDTLS_SELF_TEST */
   1871          
   1872          #endif /* MBEDTLS_RSA_C */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     168   mbedtls_rsa_check_privkey
       168   -> mbedtls_mpi_bitlen
       168   -> mbedtls_mpi_cmp_int
       168   -> mbedtls_mpi_cmp_mpi
       168   -> mbedtls_mpi_div_mpi
       168   -> mbedtls_mpi_free
       168   -> mbedtls_mpi_gcd
       168   -> mbedtls_mpi_init
       168   -> mbedtls_mpi_inv_mod
       168   -> mbedtls_mpi_mod_mpi
       168   -> mbedtls_mpi_mul_mpi
       168   -> mbedtls_mpi_sub_int
      16   mbedtls_rsa_check_pub_priv
        16   -> mbedtls_mpi_bitlen
        16   -> mbedtls_mpi_cmp_mpi
        16   -> mbedtls_rsa_check_privkey
       8   mbedtls_rsa_check_pubkey
         8   -> mbedtls_mpi_bitlen
         8   -> mbedtls_mpi_cmp_mpi
      16   mbedtls_rsa_copy
        16   -> mbedtls_mpi_copy
        16   -> mbedtls_rsa_free
       8   mbedtls_rsa_free
         8   -> mbedtls_mpi_free
      16   mbedtls_rsa_init
        16   -> __aeabi_memclr4
      48   mbedtls_rsa_pkcs1_decrypt
        48   -> mbedtls_rsa_rsaes_oaep_decrypt
        48   -> mbedtls_rsa_rsaes_pkcs1_v15_decrypt
      40   mbedtls_rsa_pkcs1_encrypt
        40   -> mbedtls_rsa_rsaes_oaep_encrypt
        40   -> mbedtls_rsa_rsaes_pkcs1_v15_encrypt
      40   mbedtls_rsa_pkcs1_sign
        40   -> mbedtls_rsa_rsassa_pkcs1_v15_sign
        40   -> mbedtls_rsa_rsassa_pss_sign
      40   mbedtls_rsa_pkcs1_verify
        40   -> mbedtls_rsa_rsassa_pkcs1_v15_verify
        40   -> mbedtls_rsa_rsassa_pss_verify
     128   mbedtls_rsa_private
       128   -> mbedtls_mpi_add_mpi
       128   -> mbedtls_mpi_cmp_mpi
       128   -> mbedtls_mpi_exp_mod
       128   -> mbedtls_mpi_fill_random
       128   -> mbedtls_mpi_free
       128   -> mbedtls_mpi_init
       128   -> mbedtls_mpi_mod_mpi
       128   -> mbedtls_mpi_mul_mpi
       128   -> mbedtls_mpi_read_binary
       128   -> mbedtls_mpi_sub_int
       128   -> mbedtls_mpi_sub_mpi
       128   -> mbedtls_mpi_write_binary
       128   -> rsa_prepare_blinding
      40   mbedtls_rsa_public
        40   -> mbedtls_mpi_cmp_mpi
        40   -> mbedtls_mpi_exp_mod
        40   -> mbedtls_mpi_free
        40   -> mbedtls_mpi_init
        40   -> mbedtls_mpi_read_binary
        40   -> mbedtls_mpi_write_binary
    1136   mbedtls_rsa_rsaes_oaep_decrypt
      1136   -> __aeabi_memcpy
      1136   -> mbedtls_md
      1136   -> mbedtls_md_free
      1136   -> mbedtls_md_get_size
      1136   -> mbedtls_md_info_from_type
      1136   -> mbedtls_md_init
      1136   -> mbedtls_md_setup
      1136   -> mbedtls_rsa_private
      1136   -> mbedtls_rsa_public
      1136   -> mgf_mask
      56   mbedtls_rsa_rsaes_oaep_encrypt
        56   -- Indirect call
        56   -> __aeabi_memclr
        56   -> __aeabi_memcpy
        56   -> mbedtls_md
        56   -> mbedtls_md_free
        56   -> mbedtls_md_get_size
        56   -> mbedtls_md_info_from_type
        56   -> mbedtls_md_init
        56   -> mbedtls_md_setup
        56   -> mbedtls_rsa_private
        56   -> mbedtls_rsa_public
        56   -> mgf_mask
    1056   mbedtls_rsa_rsaes_pkcs1_v15_decrypt
      1056   -> __aeabi_memcpy
      1056   -> mbedtls_rsa_private
      1056   -> mbedtls_rsa_public
      40   mbedtls_rsa_rsaes_pkcs1_v15_encrypt
        40   -- Indirect call
        40   -> __aeabi_memcpy
        40   -> __aeabi_memset
        40   -> mbedtls_rsa_private
        40   -> mbedtls_rsa_public
      48   mbedtls_rsa_rsassa_pkcs1_v15_sign
        48   -> __aeabi_memcpy
        48   -> __aeabi_memset
        48   -> calloc
        48   -> free
        48   -> mbedtls_md_get_size
        48   -> mbedtls_md_info_from_type
        48   -> mbedtls_oid_get_oid_by_md
        48   -> mbedtls_rsa_private
        48   -> mbedtls_rsa_public
    1080   mbedtls_rsa_rsassa_pkcs1_v15_verify
      1080   -> mbedtls_asn1_get_tag
      1080   -> mbedtls_md_get_size
      1080   -> mbedtls_md_info_from_type
      1080   -> mbedtls_oid_get_md_alg
      1080   -> mbedtls_rsa_private
      1080   -> mbedtls_rsa_public
      1080   -> memcmp
     128   mbedtls_rsa_rsassa_pss_sign
       128   -- Indirect call
       128   -> __aeabi_memclr
       128   -> __aeabi_memclr4
       128   -> __aeabi_memcpy
       128   -> mbedtls_md_finish
       128   -> mbedtls_md_free
       128   -> mbedtls_md_get_size
       128   -> mbedtls_md_info_from_type
       128   -> mbedtls_md_init
       128   -> mbedtls_md_setup
       128   -> mbedtls_md_starts
       128   -> mbedtls_md_update
       128   -> mbedtls_mpi_bitlen
       128   -> mbedtls_rsa_private
       128   -> mbedtls_rsa_public
       128   -> mgf_mask
      40   mbedtls_rsa_rsassa_pss_verify
        40   -> mbedtls_rsa_rsassa_pss_verify_ext
    1148   mbedtls_rsa_rsassa_pss_verify_ext
      1144   -> mbedtls_md_finish
      1144   -> mbedtls_md_free
      1144   -> mbedtls_md_get_size
      1144   -> mbedtls_md_info_from_type
      1144   -> mbedtls_md_init
      1144   -> mbedtls_md_setup
      1144   -> mbedtls_md_starts
      1144   -> mbedtls_md_update
      1144   -> mbedtls_mpi_bitlen
      1144   -> mbedtls_rsa_private
      1144   -> mbedtls_rsa_public
      1144   -> memcmp
      1144   -> mgf_mask
     384   mbedtls_rsa_self_test
       384   -> __aeabi_memclr4
       384   -> __aeabi_memcpy4
       384   -> mbedtls_mpi_bitlen
       384   -> mbedtls_mpi_cmp_mpi
       384   -> mbedtls_mpi_read_string
       384   -> mbedtls_rsa_check_privkey
       384   -> mbedtls_rsa_free
       384   -> mbedtls_rsa_pkcs1_decrypt
       384   -> mbedtls_rsa_pkcs1_encrypt
       384   -> memcmp
       384   -> printf
       0   mbedtls_rsa_set_padding
     104   mgf_mask
       104   -> __aeabi_memclr4
       104   -> mbedtls_md_finish
       104   -> mbedtls_md_get_size
       104   -> mbedtls_md_starts
       104   -> mbedtls_md_update
      16   myrand
        16   -> rand
      32   rsa_prepare_blinding
        32   -> mbedtls_mpi_cmp_int
        32   -> mbedtls_mpi_exp_mod
        32   -> mbedtls_mpi_fill_random
        32   -> mbedtls_mpi_gcd
        32   -> mbedtls_mpi_inv_mod
        32   -> mbedtls_mpi_mod_mpi
        32   -> mbedtls_mpi_mul_mpi


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable20_2
       4  ??DataTable23
       4  ??DataTable23_1
       4  ??DataTable23_2
       4  ??DataTable26
       4  ??DataTable26_1
       4  ??DataTable26_2
       4  ??DataTable26_3
       4  ??DataTable27
       4  ??DataTable27_1
       4  ??DataTable27_2
       4  ??DataTable27_3
       4  ??DataTable27_4
       4  ??DataTable29
       4  ??DataTable29_1
       4  ??DataTable30
       4  ??DataTable30_1
       4  ??DataTable30_2
       4  ??DataTable30_3
       4  ??DataTable31
       4  ??DataTable32
       4  ??DataTable32_1
       4  ??DataTable32_2
       4  ??DataTable32_3
       4  ??DataTable32_4
       4  ??DataTable32_5
       4  ??DataTable33
       4  ??DataTable33_1
       4  ??DataTable33_10
       4  ??DataTable33_11
       4  ??DataTable33_12
       4  ??DataTable33_13
       4  ??DataTable33_2
       4  ??DataTable33_3
       4  ??DataTable33_4
       4  ??DataTable33_5
       4  ??DataTable33_6
       4  ??DataTable33_7
       4  ??DataTable33_8
       4  ??DataTable33_9
     260  ?_0
       8  ?_1
      32  ?_10
      28  ?_11
      32  ?_12
       8  ?_13
       2  ?_14
     260  ?_2
     132  ?_3
     132  ?_4
     132  ?_5
     132  ?_6
     132  ?_7
      24  ?_8
       8  ?_9
     574  mbedtls_rsa_check_privkey
     132  mbedtls_rsa_check_pub_priv
      92  mbedtls_rsa_check_pubkey
     252  mbedtls_rsa_copy
     108  mbedtls_rsa_free
      24  mbedtls_rsa_init
      70  mbedtls_rsa_pkcs1_decrypt
      60  mbedtls_rsa_pkcs1_encrypt
      64  mbedtls_rsa_pkcs1_sign
      64  mbedtls_rsa_pkcs1_verify
     560  mbedtls_rsa_private
     112  mbedtls_rsa_public
     356  mbedtls_rsa_rsaes_oaep_decrypt
     266  mbedtls_rsa_rsaes_oaep_encrypt
     262  mbedtls_rsa_rsaes_pkcs1_v15_decrypt
     208  mbedtls_rsa_rsaes_pkcs1_v15_encrypt
     378  mbedtls_rsa_rsassa_pkcs1_v15_sign
     432  mbedtls_rsa_rsassa_pkcs1_v15_verify
     350  mbedtls_rsa_rsassa_pss_sign
      48  mbedtls_rsa_rsassa_pss_verify
     426  mbedtls_rsa_rsassa_pss_verify_ext
     420  mbedtls_rsa_self_test
       8  mbedtls_rsa_set_padding
     120  mgf_mask
      24  myrand
     188  rsa_prepare_blinding

 
   794 bytes in section .rodata
 6 302 bytes in section .text
 
 6 302 bytes of CODE  memory
   794 bytes of CONST memory

Errors: none
Warnings: none
