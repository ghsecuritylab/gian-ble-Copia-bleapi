###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:32:56
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\drivers\BusIn.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\drivers\BusIn.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\drivers\BusIn.s.txt -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\drivers\BusIn.o
#        .\mbed-os\drivers\BusIn.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\drivers\BusIn.s.txt
#    Object file  =  .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\drivers\BusIn.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\drivers\BusIn.cpp
      1          /* mbed Microcontroller Library
      2           * Copyright (c) 2006-2013 ARM Limited
      3           *
      4           * Licensed under the Apache License, Version 2.0 (the "License");
      5           * you may not use this file except in compliance with the License.
      6           * You may obtain a copy of the License at
      7           *
      8           *     http://www.apache.org/licenses/LICENSE-2.0
      9           *
     10           * Unless required by applicable law or agreed to in writing, software
     11           * distributed under the License is distributed on an "AS IS" BASIS,
     12           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     13           * See the License for the specific language governing permissions and
     14           * limitations under the License.
     15           */
     16          #include "drivers/BusIn.h"
     17          #include "platform/mbed_assert.h"
     18          
     19          namespace mbed {
     20          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp mbed::BusIn::subobject BusIn(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
   \                     _ZN4mbed5BusInC2E7PinNameS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
   \   00000004   0x466D             MOV      R5,SP
   \   00000006   0x2470             MOVS     R4,#+112
   \   00000008   0x572C             LDRSB    R4,[R5, R4]
   \   0000000A   0x940C             STR      R4,[SP, #+48]
   \   0000000C   0x246C             MOVS     R4,#+108
   \   0000000E   0x572C             LDRSB    R4,[R5, R4]
   \   00000010   0x940B             STR      R4,[SP, #+44]
   \   00000012   0x2468             MOVS     R4,#+104
   \   00000014   0x572C             LDRSB    R4,[R5, R4]
   \   00000016   0x940A             STR      R4,[SP, #+40]
   \   00000018   0x2464             MOVS     R4,#+100
   \   0000001A   0x572C             LDRSB    R4,[R5, R4]
   \   0000001C   0x9409             STR      R4,[SP, #+36]
   \   0000001E   0x2460             MOVS     R4,#+96
   \   00000020   0x572C             LDRSB    R4,[R5, R4]
   \   00000022   0x9408             STR      R4,[SP, #+32]
   \   00000024   0x245C             MOVS     R4,#+92
   \   00000026   0x572C             LDRSB    R4,[R5, R4]
   \   00000028   0x9407             STR      R4,[SP, #+28]
   \   0000002A   0x2458             MOVS     R4,#+88
   \   0000002C   0x572C             LDRSB    R4,[R5, R4]
   \   0000002E   0x9406             STR      R4,[SP, #+24]
   \   00000030   0x2454             MOVS     R4,#+84
   \   00000032   0x572C             LDRSB    R4,[R5, R4]
   \   00000034   0x9405             STR      R4,[SP, #+20]
   \   00000036   0x2450             MOVS     R4,#+80
   \   00000038   0x572C             LDRSB    R4,[R5, R4]
   \   0000003A   0x9404             STR      R4,[SP, #+16]
   \   0000003C   0x244C             MOVS     R4,#+76
   \   0000003E   0x572C             LDRSB    R4,[R5, R4]
   \   00000040   0x9403             STR      R4,[SP, #+12]
   \   00000042   0x2448             MOVS     R4,#+72
   \   00000044   0x572C             LDRSB    R4,[R5, R4]
   \   00000046   0x9402             STR      R4,[SP, #+8]
   \   00000048   0x2444             MOVS     R4,#+68
   \   0000004A   0x572C             LDRSB    R4,[R5, R4]
   \   0000004C   0x9401             STR      R4,[SP, #+4]
   \   0000004E   0x2440             MOVS     R4,#+64
   \   00000050   0x572C             LDRSB    R4,[R5, R4]
   \   00000052   0x9400             STR      R4,[SP, #+0]
   \   00000054   0x.... 0x....      BL       _ZN4mbed5BusInC1E7PinNameS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_
   \   00000058   0xB00D             ADD      SP,SP,#+52
   \   0000005A   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
     21          BusIn::BusIn(PinName p0, PinName p1, PinName p2, PinName p3, PinName p4, PinName p5, PinName p6, PinName p7, PinName p8, PinName p9, PinName p10, PinName p11, PinName p12, PinName p13, PinName p14, PinName p15) {
   \                     _ZN4mbed5BusInC1E7PinNameS1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_S1_: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0015             MOVS     R5,R2
   \   00000008   0x001E             MOVS     R6,R3
   \   0000000A   0x....             LDR      R0,??DataTable5
   \   0000000C   0x9906             LDR      R1,[SP, #+24]
   \   0000000E   0x6008             STR      R0,[R1, #+0]
   \   00000010   0x9806             LDR      R0,[SP, #+24]
   \   00000012   0x3048             ADDS     R0,R0,#+72
   \   00000014   0x.... 0x....      BL       _ZN4rtos5MutexC1Ev
     22              PinName pins[16] = {p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15};
   \   00000018   0xA802             ADD      R0,SP,#+8
   \   0000001A   0x7004             STRB     R4,[R0, #+0]
   \   0000001C   0x7045             STRB     R5,[R0, #+1]
   \   0000001E   0x7086             STRB     R6,[R0, #+2]
   \   00000020   0x990C             LDR      R1,[SP, #+48]
   \   00000022   0x70C1             STRB     R1,[R0, #+3]
   \   00000024   0x990D             LDR      R1,[SP, #+52]
   \   00000026   0x7101             STRB     R1,[R0, #+4]
   \   00000028   0x990E             LDR      R1,[SP, #+56]
   \   0000002A   0x7141             STRB     R1,[R0, #+5]
   \   0000002C   0x990F             LDR      R1,[SP, #+60]
   \   0000002E   0x7181             STRB     R1,[R0, #+6]
   \   00000030   0x9910             LDR      R1,[SP, #+64]
   \   00000032   0x71C1             STRB     R1,[R0, #+7]
   \   00000034   0x9911             LDR      R1,[SP, #+68]
   \   00000036   0x7201             STRB     R1,[R0, #+8]
   \   00000038   0x9912             LDR      R1,[SP, #+72]
   \   0000003A   0x7241             STRB     R1,[R0, #+9]
   \   0000003C   0x9913             LDR      R1,[SP, #+76]
   \   0000003E   0x7281             STRB     R1,[R0, #+10]
   \   00000040   0x9914             LDR      R1,[SP, #+80]
   \   00000042   0x72C1             STRB     R1,[R0, #+11]
   \   00000044   0x9915             LDR      R1,[SP, #+84]
   \   00000046   0x7301             STRB     R1,[R0, #+12]
   \   00000048   0x9916             LDR      R1,[SP, #+88]
   \   0000004A   0x7341             STRB     R1,[R0, #+13]
   \   0000004C   0x9917             LDR      R1,[SP, #+92]
   \   0000004E   0x7381             STRB     R1,[R0, #+14]
   \   00000050   0x9918             LDR      R1,[SP, #+96]
   \   00000052   0x73C1             STRB     R1,[R0, #+15]
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x9906             LDR      R1,[SP, #+24]
   \   00000058   0x6448             STR      R0,[R1, #+68]
     23          
     24              // No lock needed in the constructor
     25              _nc_mask = 0;
     26              for (int i=0; i<16; i++) {
   \   0000005A   0x2600             MOVS     R6,#+0
   \   0000005C   0xAD02             ADD      R5,SP,#+8
   \   0000005E   0x9806             LDR      R0,[SP, #+24]
   \   00000060   0x1D07             ADDS     R7,R0,#+4
     27                  _pin[i] = (pins[i] != NC) ? new DigitalIn(pins[i]) : 0;
   \                     ??BusIn_0: (+1)
   \   00000062   0x7828             LDRB     R0,[R5, #+0]
   \   00000064   0x4669             MOV      R1,SP
   \   00000066   0x7108             STRB     R0,[R1, #+4]
   \   00000068   0x2004             MOVS     R0,#+4
   \   0000006A   0x5608             LDRSB    R0,[R1, R0]
   \   0000006C   0x9000             STR      R0,[SP, #+0]
   \   0000006E   0x2100             MOVS     R1,#+0
   \   00000070   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000072   0x4288             CMP      R0,R1
   \   00000074   0xD00F             BEQ      ??BusIn_1
   \   00000076   0x2008             MOVS     R0,#+8
   \   00000078   0x.... 0x....      BL       _Znwj
   \   0000007C   0x0004             MOVS     R4,R0
   \   0000007E   0xD00A             BEQ      ??BusIn_1
   \   00000080   0x2208             MOVS     R2,#+8
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x.... 0x....      BL       memset
   \   00000088   0x4669             MOV      R1,SP
   \   0000008A   0x2004             MOVS     R0,#+4
   \   0000008C   0x5609             LDRSB    R1,[R1, R0]
   \   0000008E   0x0020             MOVS     R0,R4
   \   00000090   0x.... 0x....      BL       gpio_init_in
   \   00000094   0xE000             B        ??BusIn_2
   \                     ??BusIn_1: (+1)
   \   00000096   0x2400             MOVS     R4,#+0
   \                     ??BusIn_2: (+1)
   \   00000098   0x603C             STR      R4,[R7, #+0]
     28                  if (pins[i] != NC) {
   \   0000009A   0x9800             LDR      R0,[SP, #+0]
   \   0000009C   0x2100             MOVS     R1,#+0
   \   0000009E   0x43C9             MVNS     R1,R1            ;; #-1
   \   000000A0   0x4288             CMP      R0,R1
   \   000000A2   0xD006             BEQ      ??BusIn_3
     29                      _nc_mask |= (1 << i);
   \   000000A4   0x9806             LDR      R0,[SP, #+24]
   \   000000A6   0x6C40             LDR      R0,[R0, #+68]
   \   000000A8   0x2101             MOVS     R1,#+1
   \   000000AA   0x40B1             LSLS     R1,R1,R6
   \   000000AC   0x4301             ORRS     R1,R1,R0
   \   000000AE   0x9806             LDR      R0,[SP, #+24]
   \   000000B0   0x6441             STR      R1,[R0, #+68]
     30                  }
     31              }
   \                     ??BusIn_3: (+1)
   \   000000B2   0x1C76             ADDS     R6,R6,#+1
   \   000000B4   0x1D3F             ADDS     R7,R7,#+4
   \   000000B6   0x1C6D             ADDS     R5,R5,#+1
   \   000000B8   0x2E10             CMP      R6,#+16
   \   000000BA   0xDBD2             BLT      ??BusIn_0
     32          }
   \   000000BC   0x9806             LDR      R0,[SP, #+24]
   \   000000BE   0xB007             ADD      SP,SP,#+28
   \   000000C0   0xBDF0             POP      {R4-R7,PC}       ;; return
     33          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp mbed::BusIn::subobject BusIn(PinName *)
   \                     _ZN4mbed5BusInC2EP7PinName: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZN4mbed5BusInC1EP7PinName
   \   00000006   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     34          BusIn::BusIn(PinName pins[16]) {
   \                     _ZN4mbed5BusInC1EP7PinName: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x....             LDR      R0,??DataTable5
   \   00000008   0x9902             LDR      R1,[SP, #+8]
   \   0000000A   0x6008             STR      R0,[R1, #+0]
   \   0000000C   0x9802             LDR      R0,[SP, #+8]
   \   0000000E   0x3048             ADDS     R0,R0,#+72
   \   00000010   0x.... 0x....      BL       _ZN4rtos5MutexC1Ev
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x9902             LDR      R1,[SP, #+8]
   \   00000018   0x6448             STR      R0,[R1, #+68]
     35              // No lock needed in the constructor
     36              _nc_mask = 0;
     37              for (int i=0; i<16; i++) {
   \   0000001A   0x2500             MOVS     R5,#+0
   \   0000001C   0x9802             LDR      R0,[SP, #+8]
   \   0000001E   0x1D07             ADDS     R7,R0,#+4
     38                  _pin[i] = (pins[i] != NC) ? new DigitalIn(pins[i]) : 0;
   \                     ??BusIn_4: (+1)
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x5630             LDRSB    R0,[R6, R0]
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000028   0x4288             CMP      R0,R1
   \   0000002A   0xD013             BEQ      ??BusIn_5
   \   0000002C   0x2008             MOVS     R0,#+8
   \   0000002E   0x.... 0x....      BL       _Znwj
   \   00000032   0x0004             MOVS     R4,R0
   \   00000034   0xD00E             BEQ      ??BusIn_5
   \   00000036   0x7830             LDRB     R0,[R6, #+0]
   \   00000038   0x4669             MOV      R1,SP
   \   0000003A   0x7008             STRB     R0,[R1, #+0]
   \   0000003C   0x2208             MOVS     R2,#+8
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0x.... 0x....      BL       memset
   \   00000046   0x4669             MOV      R1,SP
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x5609             LDRSB    R1,[R1, R0]
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0x.... 0x....      BL       gpio_init_in
   \   00000052   0xE000             B        ??BusIn_6
   \                     ??BusIn_5: (+1)
   \   00000054   0x2400             MOVS     R4,#+0
   \                     ??BusIn_6: (+1)
   \   00000056   0x603C             STR      R4,[R7, #+0]
     39                  if (pins[i] != NC) {
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x5630             LDRSB    R0,[R6, R0]
   \   0000005C   0x2100             MOVS     R1,#+0
   \   0000005E   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000060   0x4288             CMP      R0,R1
   \   00000062   0xD006             BEQ      ??BusIn_7
     40                      _nc_mask |= (1 << i);
   \   00000064   0x9802             LDR      R0,[SP, #+8]
   \   00000066   0x6C40             LDR      R0,[R0, #+68]
   \   00000068   0x2101             MOVS     R1,#+1
   \   0000006A   0x40A9             LSLS     R1,R1,R5
   \   0000006C   0x4301             ORRS     R1,R1,R0
   \   0000006E   0x9802             LDR      R0,[SP, #+8]
   \   00000070   0x6441             STR      R1,[R0, #+68]
     41                  }
     42              }
   \                     ??BusIn_7: (+1)
   \   00000072   0x1C6D             ADDS     R5,R5,#+1
   \   00000074   0x1D3F             ADDS     R7,R7,#+4
   \   00000076   0x1C76             ADDS     R6,R6,#+1
   \   00000078   0x2D10             CMP      R5,#+16
   \   0000007A   0xDBD1             BLT      ??BusIn_4
     43          }
   \   0000007C   0x9802             LDR      R0,[SP, #+8]
   \   0000007E   0xB003             ADD      SP,SP,#+12
   \   00000080   0xBDF0             POP      {R4-R7,PC}       ;; return
     44          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp mbed::BusIn::deleter ~BusIn()
   \                     _ZN4mbed5BusInD0Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x.... 0x....      BL       _ZN4mbed5BusInD1Ev
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       _ZdlPv
   \   0000000E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     45          BusIn::~BusIn() {
   \                     _ZN4mbed5BusInD1Ev: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002                      REQUIRE ?Subroutine0
   \   00000002                      ;; // Fall through to label ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x0004             MOVS     R4,R0
   \   00000002   0x....             LDR      R0,??DataTable5
   \   00000004   0x6020             STR      R0,[R4, #+0]
     46              // No lock needed in the destructor
     47              for (int i=0; i<16; i++) {
   \   00000006   0x1D25             ADDS     R5,R4,#+4
   \   00000008   0x2610             MOVS     R6,#+16
     48                  if (_pin[i] != 0) {
   \                     ??Subroutine0_0: (+1)
   \   0000000A   0x6828             LDR      R0,[R5, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD001             BEQ      ??Subroutine0_1
     49                      delete _pin[i];
   \   00000010   0x.... 0x....      BL       _ZdlPv
   \                     ??Subroutine0_1: (+1)
   \   00000014   0x1D2D             ADDS     R5,R5,#+4
   \   00000016   0x1E76             SUBS     R6,R6,#+1
   \   00000018   0xD1F7             BNE      ??Subroutine0_0
     50                  }
     51              }
     52          }
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x3048             ADDS     R0,R0,#+72
   \   0000001E   0x.... 0x....      BL       _ZN4rtos5MutexD1Ev
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0xBD70             POP      {R4-R6,PC}       ;; return
     53          

   \                                 In section .text, align 2, keep-with-next
     54          int BusIn::read() {
   \                     _ZN4mbed5BusIn4readEv: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0007             MOVS     R7,R0
     55              int v = 0;
   \   00000004   0x2400             MOVS     R4,#+0
     56              lock();
   \   00000006   0x6839             LDR      R1,[R7, #+0]
   \   00000008   0x6889             LDR      R1,[R1, #+8]
   \   0000000A   0x4788             BLX      R1
     57              for (int i=0; i<16; i++) {
   \   0000000C   0x2500             MOVS     R5,#+0
   \   0000000E   0x1D3E             ADDS     R6,R7,#+4
     58                  if (_pin[i] != 0) {
   \                     ??read_0: (+1)
   \   00000010   0x6830             LDR      R0,[R6, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD004             BEQ      ??read_1
     59                      v |= _pin[i]->read() << i;
   \   00000016   0x.... 0x....      BL       gpio_read
   \   0000001A   0x40A8             LSLS     R0,R0,R5
   \   0000001C   0x4320             ORRS     R0,R0,R4
   \   0000001E   0x0004             MOVS     R4,R0
     60                  }
     61              }
   \                     ??read_1: (+1)
   \   00000020   0x1C6D             ADDS     R5,R5,#+1
   \   00000022   0x1D36             ADDS     R6,R6,#+4
   \   00000024   0x2D10             CMP      R5,#+16
   \   00000026   0xDBF3             BLT      ??read_0
     62              unlock();
   \   00000028   0x0038             MOVS     R0,R7
   \   0000002A   0x6839             LDR      R1,[R7, #+0]
   \   0000002C   0x68C9             LDR      R1,[R1, #+12]
   \   0000002E   0x4788             BLX      R1
     63              return v;
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     64          }
     65          

   \                                 In section .text, align 2, keep-with-next
     66          void BusIn::mode(PinMode pull) {
   \                     _ZN4mbed5BusIn4modeE7PinMode: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0x0006             MOVS     R6,R0
     67              lock();
   \   00000004   0x6831             LDR      R1,[R6, #+0]
   \   00000006   0x6889             LDR      R1,[R1, #+8]
   \   00000008   0x4788             BLX      R1
     68              for (int i=0; i<16; i++) {
   \   0000000A   0x1D34             ADDS     R4,R6,#+4
   \   0000000C   0x2510             MOVS     R5,#+16
     69                  if (_pin[i] != 0) {
   \                     ??mode_0: (+1)
   \   0000000E   0x6827             LDR      R7,[R4, #+0]
   \   00000010   0x2F00             CMP      R7,#+0
   \   00000012   0xD008             BEQ      ??mode_1
     70                      _pin[i]->mode(pull);
   \   00000014   0x.... 0x....      BL       core_util_critical_section_enter
   \   00000018   0x4668             MOV      R0,SP
   \   0000001A   0x7801             LDRB     R1,[R0, #+0]
   \   0000001C   0x0038             MOVS     R0,R7
   \   0000001E   0x.... 0x....      BL       gpio_mode
   \   00000022   0x.... 0x....      BL       core_util_critical_section_exit
     71                  }
     72              }
   \                     ??mode_1: (+1)
   \   00000026   0x1D24             ADDS     R4,R4,#+4
   \   00000028   0x1E6D             SUBS     R5,R5,#+1
   \   0000002A   0xD1F0             BNE      ??mode_0
     73              unlock();
   \   0000002C   0x0030             MOVS     R0,R6
   \   0000002E   0x6831             LDR      R1,[R6, #+0]
   \   00000030   0x68C9             LDR      R1,[R1, #+12]
   \   00000032   0x4788             BLX      R1
     74          }
   \   00000034   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     75          

   \                                 In section .text, align 2, keep-with-next
     76          void BusIn::lock() {
   \                     _ZN4mbed5BusIn4lockEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     77              _mutex.lock();
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000006   0x3048             ADDS     R0,R0,#+72
   \   00000008   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
     78          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
     79          

   \                                 In section .text, align 2, keep-with-next
     80          void BusIn::unlock() {
   \                     _ZN4mbed5BusIn6unlockEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     81              _mutex.unlock();
   \   00000002   0x3048             ADDS     R0,R0,#+72
   \   00000004   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
     82          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
     83          

   \                                 In section .text, align 2, keep-with-next
     84          BusIn::operator int() {
   \                     _ZN4mbed5BusIncviEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     85              // Underlying read is thread safe
     86              return read();
   \   00000002   0x.... 0x....      BL       _ZN4mbed5BusIn4readEv
   \   00000006   0xBD02             POP      {R1,PC}          ;; return
     87          }
     88          

   \                                 In section .text, align 4, keep-with-next
     89          DigitalIn& BusIn::operator[] (int index) {
   \                     _ZN4mbed5BusInixEi: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
     90              // No lock needed since _pin is not modified outside the constructor
     91              MBED_ASSERT(index >= 0 && index <= 16);
   \   00000006   0x2C11             CMP      R4,#+17
   \   00000008   0xD305             BCC      `??operator[]_0`
   \   0000000A   0x225B             MOVS     R2,#+91
   \   0000000C   0x....             ADR.N    R1,?_1
   \   0000000E   0xBF00             Nop      
   \   00000010   0x....             ADR.N    R0,?_0
   \   00000012   0x.... 0x....      BL       mbed_assert_internal
     92              MBED_ASSERT(_pin[index]);
   \                     `??operator[]_0`: (+1)
   \   00000016   0x00A0             LSLS     R0,R4,#+2
   \   00000018   0x182C             ADDS     R4,R5,R0
   \   0000001A   0x6860             LDR      R0,[R4, #+4]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD106             BNE      `??operator[]_1`
   \   00000020   0x225C             MOVS     R2,#+92
   \   00000022   0xBF00             Nop      
   \   00000024   0x....             ADR.N    R1,?_1
   \   00000026   0xBF00             Nop      
   \   00000028   0x....             ADR.N    R0,?_2
   \   0000002A   0x.... 0x....      BL       mbed_assert_internal
     93              return *_pin[index];
   \                     `??operator[]_1`: (+1)
   \   0000002E   0x6860             LDR      R0,[R4, #+4]
   \   00000030   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     94          }

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp mbed::BusIn::subobject ~BusIn()
   \                     _ZN4mbed5BusInD2Ev: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x....             B.N      ?Subroutine0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     _ZTVN4mbed5BusInE+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x69 0x6E          DC8 "index >= 0 && index <= 16"
   \              0x64 0x65    
   \              0x78 0x20    
   \              0x3E 0x3D    
   \              0x20 0x30    
   \              0x20 0x26    
   \              0x26 0x20    
   \              0x69 0x6E    
   \              0x64 0x65    
   \              0x78 0x20    
   \              0x3C 0x3D    
   \              0x20 0x31    
   \              0x36 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x2E 0x5C          DC8 ".\\mbed-os\\drivers\\BusIn.cpp"
   \              0x6D 0x62    
   \              0x65 0x64    
   \              0x2D 0x6F    
   \              0x73 0x5C    
   \              0x64 0x72    
   \              0x69 0x76    
   \              0x65 0x72    
   \              0x73 0x5C    
   \              0x42 0x75    
   \              0x73 0x49    
   \              0x6E 0x2E    
   \              0x63 0x70    
   \              0x70 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x5F 0x70          DC8 "_pin[index]"
   \              0x69 0x6E    
   \              0x5B 0x69    
   \              0x6E 0x64    
   \              0x65 0x78    
   \              0x5D 0x00    
     95          
     96          } // namespace mbed

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   mbed::BusIn::BusIn(PinName *)
        32   -> gpio_init_in
        32   -> memset
        32   -> operator new(unsigned int)
        32   -> rtos::Mutex::Mutex()
      48   mbed::BusIn::BusIn(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
        48   -> gpio_init_in
        48   -> memset
        48   -> operator new(unsigned int)
        48   -> rtos::Mutex::Mutex()
       8   mbed::BusIn::deleter ~BusIn()
         8   -> mbed::BusIn::~BusIn()
         8   -> operator delete(void *)
       8   mbed::BusIn::lock()
         8   -> rtos::Mutex::lock(unsigned int)
      24   mbed::BusIn::mode(PinMode)
        24   -- Indirect call
        24   -> core_util_critical_section_enter
        24   -> core_util_critical_section_exit
        24   -> gpio_mode
       8   mbed::BusIn::operator int()
         8   -> mbed::BusIn::read()
      16   mbed::BusIn::operator[](int)
        16   -> mbed_assert_internal
      24   mbed::BusIn::read()
        24   -- Indirect call
        24   -> gpio_read
       8   mbed::BusIn::subobject BusIn(PinName *)
         8   -> mbed::BusIn::BusIn(PinName *)
      64   mbed::BusIn::subobject BusIn(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
        64   -> mbed::BusIn::BusIn(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
      16   mbed::BusIn::subobject ~BusIn()
        16   -> operator delete(void *)
        16   -> rtos::Mutex::~Mutex()
       8   mbed::BusIn::unlock()
         8   -> rtos::Mutex::unlock()
       0   mbed::BusIn::~BusIn()
        16   -> operator delete(void *)
        16   -> rtos::Mutex::~Mutex()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
      38  ?Subroutine0
      28  ?_0
      28  ?_1
      12  ?_2
     130  mbed::BusIn::BusIn(PinName *)
     194  mbed::BusIn::BusIn(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
      16  mbed::BusIn::deleter ~BusIn()
      14  mbed::BusIn::lock()
      54  mbed::BusIn::mode(PinMode)
       8  mbed::BusIn::operator int()
      50  mbed::BusIn::operator[](int)
      52  mbed::BusIn::read()
       8  mbed::BusIn::subobject BusIn(PinName *)
      92  mbed::BusIn::subobject BusIn(PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName, PinName)
       4  mbed::BusIn::subobject ~BusIn()
      10  mbed::BusIn::unlock()
       2  mbed::BusIn::~BusIn()
     108  -- Other

 
 108 bytes in section .rodata
 744 bytes in section .text
 
 744 bytes of CODE  memory
   0 bytes of CONST memory (+ 108 bytes shared)

Errors: none
Warnings: none
