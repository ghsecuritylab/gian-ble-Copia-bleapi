###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:01
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\drivers\Timer.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\drivers\Timer.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\drivers\Timer.s.txt -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\drivers\Timer.o
#        .\mbed-os\drivers\Timer.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\drivers\Timer.s.txt
#    Object file  =  .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\drivers\Timer.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\drivers\Timer.cpp
      1          /* mbed Microcontroller Library
      2           * Copyright (c) 2006-2013 ARM Limited
      3           *
      4           * Licensed under the Apache License, Version 2.0 (the "License");
      5           * you may not use this file except in compliance with the License.
      6           * You may obtain a copy of the License at
      7           *
      8           *     http://www.apache.org/licenses/LICENSE-2.0
      9           *
     10           * Unless required by applicable law or agreed to in writing, software
     11           * distributed under the License is distributed on an "AS IS" BASIS,
     12           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     13           * See the License for the specific language governing permissions and
     14           * limitations under the License.
     15           */
     16          #include "drivers/Timer.h"
     17          #include "hal/ticker_api.h"
     18          #include "hal/us_ticker_api.h"
     19          #include "platform/mbed_critical.h"
     20          #include "hal/lp_ticker_api.h"
     21          
     22          namespace mbed {
     23          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp mbed::Timer::subobject Timer()
   \                     _ZN4mbed5TimerC2Ev: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZN4mbed5TimerC1Ev
   \   00000006   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     24          Timer::Timer() : _running(), _start(), _time(), _ticker_data(get_us_ticker_data()), _lock_deepsleep(true) {
   \                     _ZN4mbed5TimerC1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x6020             STR      R0,[R4, #+0]
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x0022             MOVS     R2,R4
   \   0000000C   0x3208             ADDS     R2,R2,#+8
   \   0000000E   0xC203             STM      R2!,{R0,R1}
   \   00000010   0x0022             MOVS     R2,R4
   \   00000012   0x3210             ADDS     R2,R2,#+16
   \   00000014   0xC203             STM      R2!,{R0,R1}
   \   00000016   0x.... 0x....      BL       get_us_ticker_data
   \   0000001A   0x61A0             STR      R0,[R4, #+24]
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x7720             STRB     R0,[R4, #+28]
     25              reset();
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       _ZN4mbed5Timer5resetEv
     26          }
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
     27          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp mbed::Timer::subobject Timer(ticker_data_t const *)
   \                     _ZN4mbed5TimerC2EPK13ticker_data_t: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZN4mbed5TimerC1EPK13ticker_data_t
   \   00000006   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     28          Timer::Timer(const ticker_data_t *data) : _running(), _start(), _time(), _ticker_data(data), _lock_deepsleep(true) {
   \                     _ZN4mbed5TimerC1EPK13ticker_data_t: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0006             MOVS     R6,R0
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x6030             STR      R0,[R6, #+0]
   \   00000008   0x2400             MOVS     R4,#+0
   \   0000000A   0x2500             MOVS     R5,#+0
   \   0000000C   0x0030             MOVS     R0,R6
   \   0000000E   0x3008             ADDS     R0,R0,#+8
   \   00000010   0xC030             STM      R0!,{R4,R5}
   \   00000012   0x0030             MOVS     R0,R6
   \   00000014   0x3010             ADDS     R0,R0,#+16
   \   00000016   0xC030             STM      R0!,{R4,R5}
   \   00000018   0x61B1             STR      R1,[R6, #+24]
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x7730             STRB     R0,[R6, #+28]
     29              reset();
   \   0000001E   0x.... 0x....      BL       core_util_critical_section_enter
   \   00000022   0x69B0             LDR      R0,[R6, #+24]
   \   00000024   0x.... 0x....      BL       ticker_read_us
   \   00000028   0x0032             MOVS     R2,R6
   \   0000002A   0x3208             ADDS     R2,R2,#+8
   \   0000002C   0xC203             STM      R2!,{R0,R1}
   \   0000002E   0x0030             MOVS     R0,R6
   \   00000030   0x3010             ADDS     R0,R0,#+16
   \   00000032   0xC030             STM      R0!,{R4,R5}
   \   00000034   0x.... 0x....      BL       core_util_critical_section_exit
     30          #if DEVICE_LOWPOWERTIMER
     31              _lock_deepsleep = (data != get_lp_ticker_data());
     32          #endif
     33          }
   \   00000038   0x0030             MOVS     R0,R6
   \   0000003A   0xBD70             POP      {R4-R6,PC}       ;; return
     34          

   \                                 In section .text, align 2, keep-with-next
     35          Timer::~Timer() {
   \                     _ZN4mbed5TimerD1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002                      REQUIRE ?Subroutine0
   \   00000002                      ;; // Fall through to label ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x0004             MOVS     R4,R0
     36              core_util_critical_section_enter();
   \   00000002   0x.... 0x....      BL       core_util_critical_section_enter
     37              if (_running) {
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD004             BEQ      ??Subroutine0_0
     38                  if(_lock_deepsleep) {
   \   0000000C   0x7F20             LDRB     R0,[R4, #+28]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD001             BEQ      ??Subroutine0_0
     39                      sleep_manager_unlock_deep_sleep();
   \   00000012   0x.... 0x....      BL       sleep_manager_unlock_deep_sleep
     40                  }
     41              }
     42              _running = 0;
   \                     ??Subroutine0_0: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x6020             STR      R0,[R4, #+0]
     43              core_util_critical_section_exit();
   \   0000001A                      REQUIRE ??Subroutine1_0
   \   0000001A                      ;; // Fall through to label ??Subroutine1_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine1_0: (+1)
   \   00000000   0x.... 0x....      BL       core_util_critical_section_exit
     44          }
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0xBD10             POP      {R4,PC}          ;; return
     45          

   \                                 In section .text, align 2, keep-with-next
     46          void Timer::start() {
   \                     _ZN4mbed5Timer5startEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     47              core_util_critical_section_enter();
   \   00000004   0x.... 0x....      BL       core_util_critical_section_enter
     48              if (!_running) {
   \   00000008   0x6820             LDR      R0,[R4, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD10C             BNE      ??start_0
     49                  if(_lock_deepsleep) {
   \   0000000E   0x7F20             LDRB     R0,[R4, #+28]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD001             BEQ      ??start_1
     50                      sleep_manager_lock_deep_sleep();
   \   00000014   0x.... 0x....      BL       sleep_manager_lock_deep_sleep
     51                  }
     52                  _start = ticker_read_us(_ticker_data);
   \                     ??start_1: (+1)
   \   00000018   0x69A0             LDR      R0,[R4, #+24]
   \   0000001A   0x.... 0x....      BL       ticker_read_us
   \   0000001E   0x0022             MOVS     R2,R4
   \   00000020   0x3208             ADDS     R2,R2,#+8
   \   00000022   0xC203             STM      R2!,{R0,R1}
     53                  _running = 1;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x6020             STR      R0,[R4, #+0]
     54              }
     55              core_util_critical_section_exit();
   \                     ??start_0: (+1)
   \   00000028   0x.... 0x....      BL       core_util_critical_section_exit
     56          }
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
     57          

   \                                 In section .text, align 2, keep-with-next
     58          void Timer::stop() {
   \                     _ZN4mbed5Timer4stopEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     59              core_util_critical_section_enter();
   \   00000004   0x.... 0x....      BL       core_util_critical_section_enter
     60              _time += slicetime();
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       _ZN4mbed5Timer9slicetimeEv
   \   0000000E   0x0022             MOVS     R2,R4
   \   00000010   0x3210             ADDS     R2,R2,#+16
   \   00000012   0xCA0C             LDM      R2,{R2,R3}
   \   00000014   0x1880             ADDS     R0,R0,R2
   \   00000016   0x4159             ADCS     R1,R1,R3
   \   00000018   0x0022             MOVS     R2,R4
   \   0000001A   0x3210             ADDS     R2,R2,#+16
   \   0000001C   0xC203             STM      R2!,{R0,R1}
     61              if (_running) {
   \   0000001E   0x6820             LDR      R0,[R4, #+0]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD004             BEQ      ??stop_0
     62                  if(_lock_deepsleep) {
   \   00000024   0x7F20             LDRB     R0,[R4, #+28]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD001             BEQ      ??stop_0
     63                      sleep_manager_unlock_deep_sleep();
   \   0000002A   0x.... 0x....      BL       sleep_manager_unlock_deep_sleep
     64                  }
     65              }
     66              _running = 0;
   \                     ??stop_0: (+1)
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x6020             STR      R0,[R4, #+0]
     67              core_util_critical_section_exit();
   \   00000032   0x.... 0x....      BL       core_util_critical_section_exit
     68          }
   \   00000036   0xBD10             POP      {R4,PC}          ;; return
     69          

   \                                 In section .text, align 2, keep-with-next
     70          int Timer::read_us() {
   \                     _ZN4mbed5Timer7read_usEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     71              return read_high_resolution_us();
   \   00000004   0x.... 0x....      BL       core_util_critical_section_enter
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       _ZN4mbed5Timer9slicetimeEv
   \   0000000E   0x0022             MOVS     R2,R4
   \   00000010   0x3210             ADDS     R2,R2,#+16
   \   00000012   0xCA0C             LDM      R2,{R2,R3}
   \   00000014   0x1884             ADDS     R4,R0,R2
   \   00000016   0x....             B.N      ??Subroutine1_0
     72          }
     73          

   \                                 In section .text, align 2, keep-with-next
     74          float Timer::read() {
   \                     _ZN4mbed5Timer4readEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     75              return (float)read_us() / 1000000.0f;
   \   00000004   0x.... 0x....      BL       core_util_critical_section_enter
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       _ZN4mbed5Timer9slicetimeEv
   \   0000000E   0x0022             MOVS     R2,R4
   \   00000010   0x3210             ADDS     R2,R2,#+16
   \   00000012   0xCA0C             LDM      R2,{R2,R3}
   \   00000014   0x1884             ADDS     R4,R0,R2
   \   00000016   0x.... 0x....      BL       core_util_critical_section_exit
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       __aeabi_i2f
   \   00000020   0x....             LDR      R1,??DataTable1  ;; 0x49742400
   \   00000022   0x.... 0x....      BL       __aeabi_fdiv
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
     76          }
     77          

   \                                 In section .text, align 2, keep-with-next
     78          int Timer::read_ms() {
   \                     _ZN4mbed5Timer7read_msEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     79              return read_high_resolution_us() / 1000;
   \   00000004   0x.... 0x....      BL       core_util_critical_section_enter
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       _ZN4mbed5Timer9slicetimeEv
   \   0000000E   0x0022             MOVS     R2,R4
   \   00000010   0x3210             ADDS     R2,R2,#+16
   \   00000012   0xCA0C             LDM      R2,{R2,R3}
   \   00000014   0x1880             ADDS     R0,R0,R2
   \   00000016   0x4159             ADCS     R1,R1,R3
   \   00000018   0x0004             MOVS     R4,R0
   \   0000001A   0x000D             MOVS     R5,R1
   \   0000001C   0x.... 0x....      BL       core_util_critical_section_exit
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x0029             MOVS     R1,R5
   \   00000024   0x22FA             MOVS     R2,#+250
   \   00000026   0x0092             LSLS     R2,R2,#+2        ;; #+1000
   \   00000028   0x2300             MOVS     R3,#+0
   \   0000002A   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000002E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     80          }
     81          

   \                                 In section .text, align 2, keep-with-next
     82          us_timestamp_t Timer::read_high_resolution_us() {
   \                     _ZN4mbed5Timer23read_high_resolution_usEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     83              core_util_critical_section_enter();
   \   00000004   0x.... 0x....      BL       core_util_critical_section_enter
     84              us_timestamp_t time = _time + slicetime();
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       _ZN4mbed5Timer9slicetimeEv
   \   0000000E   0x0022             MOVS     R2,R4
   \   00000010   0x3210             ADDS     R2,R2,#+16
   \   00000012   0xCA0C             LDM      R2,{R2,R3}
   \   00000014   0x1880             ADDS     R0,R0,R2
   \   00000016   0x4159             ADCS     R1,R1,R3
   \   00000018   0x0004             MOVS     R4,R0
   \   0000001A   0x000D             MOVS     R5,R1
     85              core_util_critical_section_exit();
   \   0000001C   0x.... 0x....      BL       core_util_critical_section_exit
     86              return time;
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x0029             MOVS     R1,R5
   \   00000024   0xBD34             POP      {R2,R4,R5,PC}    ;; return
     87          }
     88          

   \                                 In section .text, align 2, keep-with-next
     89          us_timestamp_t Timer::slicetime() {
   \                     _ZN4mbed5Timer9slicetimeEv: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0006             MOVS     R6,R0
     90              us_timestamp_t ret = 0;
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x2500             MOVS     R5,#+0
     91              core_util_critical_section_enter();
   \   00000008   0x.... 0x....      BL       core_util_critical_section_enter
     92              if (_running) {
   \   0000000C   0x6830             LDR      R0,[R6, #+0]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD009             BEQ      ??slicetime_0
     93                  ret = ticker_read_us(_ticker_data) - _start;
   \   00000012   0x69B0             LDR      R0,[R6, #+24]
   \   00000014   0x.... 0x....      BL       ticker_read_us
   \   00000018   0x0004             MOVS     R4,R0
   \   0000001A   0x000D             MOVS     R5,R1
   \   0000001C   0x0030             MOVS     R0,R6
   \   0000001E   0x3008             ADDS     R0,R0,#+8
   \   00000020   0xC803             LDM      R0,{R0,R1}
   \   00000022   0x1A24             SUBS     R4,R4,R0
   \   00000024   0x418D             SBCS     R5,R5,R1
     94              }
     95              core_util_critical_section_exit();
   \                     ??slicetime_0: (+1)
   \   00000026   0x.... 0x....      BL       core_util_critical_section_exit
     96              return ret;
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x0029             MOVS     R1,R5
   \   0000002E   0xBD70             POP      {R4-R6,PC}       ;; return
     97          }
     98          

   \                                 In section .text, align 2, keep-with-next
     99          void Timer::reset() {
   \                     _ZN4mbed5Timer5resetEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    100              core_util_critical_section_enter();
   \   00000004   0x.... 0x....      BL       core_util_critical_section_enter
    101              _start = ticker_read_us(_ticker_data);
   \   00000008   0x69A0             LDR      R0,[R4, #+24]
   \   0000000A   0x.... 0x....      BL       ticker_read_us
   \   0000000E   0x0022             MOVS     R2,R4
   \   00000010   0x3208             ADDS     R2,R2,#+8
   \   00000012   0xC203             STM      R2!,{R0,R1}
    102              _time = 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x0022             MOVS     R2,R4
   \   0000001A   0x3210             ADDS     R2,R2,#+16
   \   0000001C   0xC203             STM      R2!,{R0,R1}
    103              core_util_critical_section_exit();
   \   0000001E   0x.... 0x....      BL       core_util_critical_section_exit
    104          }
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    105          

   \                                 In section .text, align 2, keep-with-next
    106          Timer::operator float() {
   \                     _ZN4mbed5TimercvfEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    107              return read();
   \   00000002   0x.... 0x....      BL       _ZN4mbed5Timer23read_high_resolution_usEv
   \   00000006   0x.... 0x....      BL       __aeabi_i2f
   \   0000000A   0x....             LDR      R1,??DataTable1  ;; 0x49742400
   \   0000000C   0x.... 0x....      BL       __aeabi_fdiv
   \   00000010   0xBD02             POP      {R1,PC}          ;; return
    108          }

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp mbed::Timer::subobject ~Timer()
   \                     _ZN4mbed5TimerD2Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             B.N      ?Subroutine0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x49742400         DC32     0x49742400
    109          
    110          } // namespace mbed

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   mbed::Timer::Timer()
         8   -> get_us_ticker_data
         8   -> mbed::Timer::reset()
      16   mbed::Timer::Timer(ticker_data_t const *)
        16   -> core_util_critical_section_enter
        16   -> core_util_critical_section_exit
        16   -> ticker_read_us
       8   mbed::Timer::operator float()
         8   -> __aeabi_fdiv
         8   -> __aeabi_i2f
         8   -> mbed::Timer::read_high_resolution_us()
       8   mbed::Timer::read()
         8   -> __aeabi_fdiv
         8   -> __aeabi_i2f
         8   -> core_util_critical_section_enter
         8   -> core_util_critical_section_exit
         8   -> mbed::Timer::slicetime()
      16   mbed::Timer::read_high_resolution_us()
        16   -> core_util_critical_section_enter
        16   -> core_util_critical_section_exit
        16   -> mbed::Timer::slicetime()
      16   mbed::Timer::read_ms()
        16   -> core_util_critical_section_enter
        16   -> core_util_critical_section_exit
        16   -> mbed::Timer::slicetime()
        16 __aeabi_uldivmod
       8   mbed::Timer::read_us()
         8   -> core_util_critical_section_enter
         8   -> core_util_critical_section_exit
         8   -> mbed::Timer::slicetime()
       8   mbed::Timer::reset()
         8   -> core_util_critical_section_enter
         8   -> core_util_critical_section_exit
         8   -> ticker_read_us
      16   mbed::Timer::slicetime()
        16   -> core_util_critical_section_enter
        16   -> core_util_critical_section_exit
        16   -> ticker_read_us
       8   mbed::Timer::start()
         8   -> core_util_critical_section_enter
         8   -> core_util_critical_section_exit
         8   -> sleep_manager_lock_deep_sleep
         8   -> ticker_read_us
       8   mbed::Timer::stop()
         8   -> core_util_critical_section_enter
         8   -> core_util_critical_section_exit
         8   -> mbed::Timer::slicetime()
         8   -> sleep_manager_unlock_deep_sleep
       8   mbed::Timer::subobject Timer()
         8   -> mbed::Timer::Timer()
       8   mbed::Timer::subobject Timer(ticker_data_t const *)
         8   -> mbed::Timer::Timer(ticker_data_t const *)
       8   mbed::Timer::subobject ~Timer()
         8   -> core_util_critical_section_enter
         8   -> core_util_critical_section_exit
         8   -> sleep_manager_unlock_deep_sleep
       0   mbed::Timer::~Timer()
         8   -> core_util_critical_section_enter
         8   -> core_util_critical_section_exit
         8   -> sleep_manager_unlock_deep_sleep


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       8  ??Subroutine1_0
      26  ?Subroutine0
      42  mbed::Timer::Timer()
      60  mbed::Timer::Timer(ticker_data_t const *)
      18  mbed::Timer::operator float()
      40  mbed::Timer::read()
      38  mbed::Timer::read_high_resolution_us()
      48  mbed::Timer::read_ms()
      24  mbed::Timer::read_us()
      36  mbed::Timer::reset()
      48  mbed::Timer::slicetime()
      46  mbed::Timer::start()
      56  mbed::Timer::stop()
       8  mbed::Timer::subobject Timer()
       8  mbed::Timer::subobject Timer(ticker_data_t const *)
       4  mbed::Timer::subobject ~Timer()
       2  mbed::Timer::~Timer()

 
 516 bytes in section .text
 
 516 bytes of CODE memory

Errors: none
Warnings: none
