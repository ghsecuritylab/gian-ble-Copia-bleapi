###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:32:59
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\drivers\InterruptManager.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\drivers\InterruptManager.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\drivers\InterruptManager.s.txt -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\drivers\InterruptManager.o
#        .\mbed-os\drivers\InterruptManager.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\drivers\InterruptManager.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\drivers\InterruptManager.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\drivers\InterruptManager.cpp
      1          /* mbed Microcontroller Library
      2           * Copyright (c) 2006-2013 ARM Limited
      3           *
      4           * Licensed under the Apache License, Version 2.0 (the "License");
      5           * you may not use this file except in compliance with the License.
      6           * You may obtain a copy of the License at
      7           *
      8           *     http://www.apache.org/licenses/LICENSE-2.0
      9           *
     10           * Unless required by applicable law or agreed to in writing, software
     11           * distributed under the License is distributed on an "AS IS" BASIS,
     12           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     13           * See the License for the specific language governing permissions and
     14           * limitations under the License.
     15           */
     16          #include "cmsis.h"
     17          #if defined(NVIC_NUM_VECTORS)
     18          
     19          // Suppress deprecation warnings since this whole
     20          // class is deprecated already
     21          #include "mbed_toolchain.h"
     22          #undef MBED_DEPRECATED_SINCE
     23          #define MBED_DEPRECATED_SINCE(...)
     24          
     25          #include "drivers/InterruptManager.h"

   \                                 In section .text, align 4
   \   __code __interwork __softfp mbed::Callback<void ()>::Callback(void (*)())
   \                     _ZN4mbed8CallbackIFvvEEC1EPS1_: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0x000A             MOVS     R2,R1
   \   00000004   0xD106             BNE      ??Callback_0
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0x2400             MOVS     R4,#+0
   \   0000000E   0xC01E             STM      R0!,{R1-R4}
   \   00000010   0x3810             SUBS     R0,R0,#+16
   \   00000012   0xE009             B        ??Callback_1
   \                     ??Callback_0: (+1)
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x2300             MOVS     R3,#+0
   \   00000018   0x2400             MOVS     R4,#+0
   \   0000001A   0x2500             MOVS     R5,#+0
   \   0000001C   0xC03C             STM      R0!,{R2-R5}
   \   0000001E   0x3810             SUBS     R0,R0,#+16
   \   00000020   0xD000             BEQ      ??Callback_2
   \   00000022   0x6001             STR      R1,[R0, #+0]
   \                     ??Callback_2: (+1)
   \   00000024   0x4901             LDR      R1,??Callback_3
   \   00000026   0x60C1             STR      R1,[R0, #+12]
   \                     ??Callback_1: (+1)
   \   00000028   0xBC30             POP      {R4,R5}
   \   0000002A   0x4770             BX       LR               ;; return
   \                     ??Callback_3:
   \   0000002C   0x........         DC32     _ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops

   \                                 In section .rodata, align 4
   \   __absolute mbed::Callback<void ()>::ops const mbed::Callback<void ()>::generate<>(void (*const &)())::ops
   \                     _ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops:
   \   00000000   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv
   \   00000004   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv
   \   00000008   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_call<void (*)()>(void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4780             BLX      R0
   \   00000006   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_move<void (*)()>(void *, void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??function_move_0
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x6001             STR      R1,[R0, #+0]
   \                     ??function_move_0: (+1)
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_dtor<void (*)()>(void *)
   \                     _ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     26          #include "platform/mbed_critical.h"
     27          #include <string.h>
     28          
     29          #define CHAIN_INITIAL_SIZE    4
     30          
     31          namespace mbed {
     32          
     33          typedef void (*pvoidf)(void);
     34          

   \                                 In section .bss, align 4
     35          InterruptManager* InterruptManager::_instance = (InterruptManager*)NULL;
   \                     _ZN4mbed16InterruptManager9_instanceE:
   \   00000000                      DS8 4
     36          

   \                                 In section .text, align 2, keep-with-next
     37          InterruptManager* InterruptManager::get() {
   \                     _ZN4mbed16InterruptManager3getEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     38          
     39              if (NULL == _instance) {
   \   00000002   0x....             LDR      R4,??DataTable2
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD11B             BNE      ??get_0
     40                  InterruptManager* temp = new InterruptManager();
   \   0000000A   0x20E4             MOVS     R0,#+228
   \   0000000C   0x.... 0x....      BL       _Znwj
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD003             BEQ      ??get_1
   \   00000014   0x.... 0x....      BL       _ZN4mbed16InterruptManagerC1Ev
   \   00000018   0x0005             MOVS     R5,R0
   \   0000001A   0xE000             B        ??get_2
   \                     ??get_1: (+1)
   \   0000001C   0x2500             MOVS     R5,#+0
     41          
     42                  // Atomically set _instance
     43                  core_util_critical_section_enter();
   \                     ??get_2: (+1)
   \   0000001E   0x.... 0x....      BL       core_util_critical_section_enter
     44                  if (NULL == _instance) {
   \   00000022   0x6820             LDR      R0,[R4, #+0]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD100             BNE      ??get_3
     45                      _instance = temp;
   \   00000028   0x6025             STR      R5,[R4, #+0]
     46                  }
     47                  core_util_critical_section_exit();
   \                     ??get_3: (+1)
   \   0000002A   0x.... 0x....      BL       core_util_critical_section_exit
     48          
     49                  // Another thread got there first so delete ours
     50                  if (temp != _instance) {
   \   0000002E   0x6820             LDR      R0,[R4, #+0]
   \   00000030   0x4285             CMP      R5,R0
   \   00000032   0xD006             BEQ      ??get_0
     51                      delete temp;
   \   00000034   0x2D00             CMP      R5,#+0
   \   00000036   0xD004             BEQ      ??get_0
   \   00000038   0x0028             MOVS     R0,R5
   \   0000003A   0x.... 0x....      BL       _ZN4mbed16InterruptManagerD1Ev
   \   0000003E   0x.... 0x....      BL       _ZdlPv
     52                  }
     53          
     54              }
     55              return _instance;
   \                     ??get_0: (+1)
   \   00000042   0x6820             LDR      R0,[R4, #+0]
   \   00000044   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     56          }
     57          

   \                                 In section .text, align 2, keep-with-next
     58          InterruptManager::InterruptManager() {
   \                     _ZN4mbed16InterruptManagerC1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002                      REQUIRE ?Subroutine0
   \   00000002                      ;; // Fall through to label ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x0004             MOVS     R4,R0
   \   00000002   0x30C0             ADDS     R0,R0,#+192
   \   00000004   0x.... 0x....      BL       _ZN4rtos5MutexC1Ev
     59              // No mutex needed in constructor
     60              memset(_chains, 0, NVIC_NUM_VECTORS * sizeof(CallChain*));
   \   00000008   0x21C0             MOVS     R1,#+192
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_memclr4
     61          }
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
     62          

   \                                 In section .text, align 2, keep-with-next
     63          void InterruptManager::destroy() {
   \                     _ZN4mbed16InterruptManager7destroyEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     64              // Not a good idea to call this unless NO interrupt at all
     65              // is under the control of the handler; otherwise, a system crash
     66              // is very likely to occur
     67              if (NULL != _instance) {
   \   00000002   0x....             LDR      R4,??DataTable2
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD005             BEQ      ??destroy_0
     68                  delete _instance;
   \   0000000A   0x.... 0x....      BL       _ZN4mbed16InterruptManagerD1Ev
   \   0000000E   0x.... 0x....      BL       _ZdlPv
     69                  _instance = (InterruptManager*)NULL;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x6020             STR      R0,[R4, #+0]
     70              }
     71          }
   \                     ??destroy_0: (+1)
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
     72          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp mbed::InterruptManager::subobject ~InterruptManager()
   \                     _ZN4mbed16InterruptManagerD2Ev: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZN4mbed16InterruptManagerD1Ev
   \   00000006   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     73          InterruptManager::~InterruptManager() {
   \                     _ZN4mbed16InterruptManagerD1Ev: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     74              for(int i = 0; i < NVIC_NUM_VECTORS; i++)
   \   00000004   0x0025             MOVS     R5,R4
   \   00000006   0x2630             MOVS     R6,#+48
     75                  if (NULL != _chains[i])
   \                     `?~InterruptManager_0`: (+1)
   \   00000008   0x6828             LDR      R0,[R5, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD002             BEQ      `?~InterruptManager_1`
     76                      delete _chains[i];
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   \   00000010   0x6849             LDR      R1,[R1, #+4]
   \   00000012   0x4788             BLX      R1
   \                     `?~InterruptManager_1`: (+1)
   \   00000014   0x1D2D             ADDS     R5,R5,#+4
   \   00000016   0x1E76             SUBS     R6,R6,#+1
   \   00000018   0xD1F6             BNE      `?~InterruptManager_0`
     77          }
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x30C0             ADDS     R0,R0,#+192
   \   0000001E   0x.... 0x....      BL       _ZN4rtos5MutexD1Ev
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0xBD70             POP      {R4-R6,PC}       ;; return
     78          

   \                                 In section .text, align 2, keep-with-next
     79          bool InterruptManager::must_replace_vector(IRQn_Type irq) {
   \                     _ZN4mbed16InterruptManager19must_replace_vectorE9IRQn_Type: (+1)
   \   00000000   0xB5D0             PUSH     {R4,R6,R7,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000F             MOVS     R7,R1
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x43C9             MVNS     R1,R1            ;; #-1
   \   0000000C   0x30C0             ADDS     R0,R0,#+192
     80              lock();
   \   0000000E   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
     81          
     82              int ret = false;
   \   00000012   0x2600             MOVS     R6,#+0
     83              int irq_pos = get_irq_index(irq);
   \   00000014   0x0038             MOVS     R0,R7
   \   00000016   0x3010             ADDS     R0,R0,#+16
     84              if (NULL == _chains[irq_pos]) {
   \   00000018   0x0080             LSLS     R0,R0,#+2
   \   0000001A   0x1820             ADDS     R0,R4,R0
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD11B             BNE      ??must_replace_vector_0
     85                  _chains[irq_pos] = new CallChain(CHAIN_INITIAL_SIZE);
   \   00000024   0x2008             MOVS     R0,#+8
   \   00000026   0x.... 0x....      BL       _Znwj
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD002             BEQ      ??must_replace_vector_1
   \   0000002E   0x2104             MOVS     R1,#+4
   \   00000030   0x.... 0x....      BL       _ZN4mbed9CallChainC1Ei
   \                     ??must_replace_vector_1: (+1)
   \   00000034   0x9900             LDR      R1,[SP, #+0]
   \   00000036   0x6008             STR      R0,[R1, #+0]
     86                  _chains[irq_pos]->add((pvoidf)NVIC_GetVector(irq));
   \   00000038   0x00B9             LSLS     R1,R7,#+2
   \   0000003A   0x1870             ADDS     R0,R6,R1
   \   0000003C   0x6C01             LDR      R1,[R0, #+64]
   \   0000003E   0xA801             ADD      R0,SP,#+4
   \   00000040   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEEC1EPS1_
   \   00000044   0x0001             MOVS     R1,R0
   \   00000046   0x9800             LDR      R0,[SP, #+0]
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x.... 0x....      BL       _ZN4mbed9CallChain3addENS_8CallbackIFvvEEE
   \   0000004E   0x9904             LDR      R1,[SP, #+16]
   \   00000050   0x2900             CMP      R1,#+0
   \   00000052   0xD002             BEQ      ??must_replace_vector_2
   \   00000054   0xA801             ADD      R0,SP,#+4
   \   00000056   0x6889             LDR      R1,[R1, #+8]
   \   00000058   0x4788             BLX      R1
     87                  ret = true;
   \                     ??must_replace_vector_2: (+1)
   \   0000005A   0x2601             MOVS     R6,#+1
     88              }
     89              unlock();
   \                     ??must_replace_vector_0: (+1)
   \   0000005C   0x0020             MOVS     R0,R4
   \   0000005E   0x30C0             ADDS     R0,R0,#+192
   \   00000060   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
     90              return ret;
   \   00000064   0x0030             MOVS     R0,R6
   \   00000066   0xB006             ADD      SP,SP,#+24
   \   00000068   0xBDD0             POP      {R4,R6,R7,PC}    ;; return
     91          }
     92          

   \                                 In section .text, align 2, keep-with-next
     93          pFunctionPointer_t InterruptManager::add_common(void (*function)(void), IRQn_Type irq, bool front) {
   \                     _ZN4mbed16InterruptManager10add_commonEPFvvE9IRQn_Typeb: (+1)
   \   00000000   0xB5FA             PUSH     {R1,R3-R7,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x0017             MOVS     R7,R2
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x43C9             MVNS     R1,R1            ;; #-1
   \   0000000C   0x30C0             ADDS     R0,R0,#+192
     94              lock();
   \   0000000E   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
     95              int irq_pos = get_irq_index(irq);
   \   00000012   0x003E             MOVS     R6,R7
   \   00000014   0x3610             ADDS     R6,R6,#+16
     96              bool change = must_replace_vector(irq);
   \   00000016   0x0039             MOVS     R1,R7
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x.... 0x....      BL       _ZN4mbed16InterruptManager19must_replace_vectorE9IRQn_Type
   \   0000001E   0x0005             MOVS     R5,R0
     97          
     98              pFunctionPointer_t pf = front ? _chains[irq_pos]->add_front(function) : _chains[irq_pos]->add(function);
   \   00000020   0x00B0             LSLS     R0,R6,#+2
   \   00000022   0x1826             ADDS     R6,R4,R0
   \   00000024   0xA80A             ADD      R0,SP,#+40
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0x9909             LDR      R1,[SP, #+36]
   \   0000002C   0xD11B             BNE      ??add_common_0
   \   0000002E   0xA804             ADD      R0,SP,#+16
   \   00000030   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEEC1EPS1_
   \   00000034   0xA904             ADD      R1,SP,#+16
   \   00000036   0x6830             LDR      R0,[R6, #+0]
   \   00000038   0x.... 0x....      BL       _ZN4mbed9CallChain3addENS_8CallbackIFvvEEE
   \   0000003C   0x0006             MOVS     R6,R0
   \   0000003E   0x9907             LDR      R1,[SP, #+28]
   \   00000040   0x2900             CMP      R1,#+0
   \   00000042   0xD002             BEQ      ??add_common_1
   \   00000044   0xA804             ADD      R0,SP,#+16
   \                     ??add_common_2: (+1)
   \   00000046   0x6889             LDR      R1,[R1, #+8]
   \   00000048   0x4788             BLX      R1
     99              if (change)
   \                     ??add_common_1: (+1)
   \   0000004A   0x2D00             CMP      R5,#+0
   \   0000004C   0xD004             BEQ      ??add_common_3
    100                  NVIC_SetVector(irq, (uint32_t)&InterruptManager::static_irq_helper);
   \   0000004E   0x....             LDR      R0,??DataTable2_1
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0x00BA             LSLS     R2,R7,#+2
   \   00000054   0x1889             ADDS     R1,R1,R2
   \   00000056   0x6408             STR      R0,[R1, #+64]
    101              unlock();
   \                     ??add_common_3: (+1)
   \   00000058   0x0020             MOVS     R0,R4
   \   0000005A   0x30C0             ADDS     R0,R0,#+192
   \   0000005C   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
    102              return pf;
   \   00000060   0x0030             MOVS     R0,R6
   \   00000062   0xB00B             ADD      SP,SP,#+44
   \   00000064   0xBDF0             POP      {R4-R7,PC}       ;; return
   \                     ??add_common_0: (+1)
   \   00000066   0x4668             MOV      R0,SP
   \   00000068   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEEC1EPS1_
   \   0000006C   0x4669             MOV      R1,SP
   \   0000006E   0x6830             LDR      R0,[R6, #+0]
   \   00000070   0x.... 0x....      BL       _ZN4mbed9CallChain9add_frontENS_8CallbackIFvvEEE
   \   00000074   0x0006             MOVS     R6,R0
   \   00000076   0x9903             LDR      R1,[SP, #+12]
   \   00000078   0x2900             CMP      R1,#+0
   \   0000007A   0xD0E6             BEQ      ??add_common_1
   \   0000007C   0x4668             MOV      R0,SP
   \   0000007E   0xE7E2             B        ??add_common_2
    103          }
    104          

   \                                 In section .text, align 2, keep-with-next
    105          bool InterruptManager::remove_handler(pFunctionPointer_t handler, IRQn_Type irq) {
   \                     _ZN4mbed16InterruptManager14remove_handlerEPNS_8CallbackIFvvEEE9IRQn_Type: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000F             MOVS     R7,R1
    106              int irq_pos = get_irq_index(irq);
   \   00000006   0x3210             ADDS     R2,R2,#+16
   \   00000008   0x0016             MOVS     R6,R2
    107              bool ret = false;
   \   0000000A   0x2500             MOVS     R5,#+0
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000010   0x30C0             ADDS     R0,R0,#+192
    108          
    109              lock();
   \   00000012   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
    110              if (_chains[irq_pos] != NULL) {
   \   00000016   0x00B0             LSLS     R0,R6,#+2
   \   00000018   0x5820             LDR      R0,[R4, R0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD005             BEQ      ??remove_handler_0
    111                  if (_chains[irq_pos]->remove(handler)) {
   \   0000001E   0x0039             MOVS     R1,R7
   \   00000020   0x.... 0x....      BL       _ZN4mbed9CallChain6removeEPNS_8CallbackIFvvEEE
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD000             BEQ      ??remove_handler_0
    112                      ret = true;
   \   00000028   0x2501             MOVS     R5,#+1
    113                  }
    114              }
    115              unlock();
   \                     ??remove_handler_0: (+1)
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x30C0             ADDS     R0,R0,#+192
   \   0000002E   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
    116          
    117              return ret;
   \   00000032   0x0028             MOVS     R0,R5
   \   00000034   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    118          }
    119          

   \                                 In section .text, align 2, keep-with-next
    120          void InterruptManager::irq_helper() {
   \                     _ZN4mbed16InterruptManager10irq_helperEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    121              _chains[__get_IPSR()]->call();
   \   00000002   0x....             B.N      ?Subroutine1
    122          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0xF3EF 0x8105      MRS      R1,IPSR
   \   00000004   0x0089             LSLS     R1,R1,#+2
   \   00000006   0x5840             LDR      R0,[R0, R1]
   \   00000008   0x.... 0x....      BL       _ZN4mbed9CallChain4callEv
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    123          

   \                                 In section .text, align 2, keep-with-next
    124          int InterruptManager::get_irq_index(IRQn_Type irq) {
    125              // Pure function - no lock needed
    126              return (int)irq + NVIC_USER_IRQ_OFFSET;
   \                     _ZN4mbed16InterruptManager13get_irq_indexE9IRQn_Type: (+1)
   \   00000000   0x3110             ADDS     R1,R1,#+16
   \   00000002   0x0008             MOVS     R0,R1
   \   00000004   0x4770             BX       LR               ;; return
    127          }
    128          

   \                                 In section .text, align 2, keep-with-next
    129          void InterruptManager::static_irq_helper() {
   \                     _ZN4mbed16InterruptManager17static_irq_helperEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    130              InterruptManager::get()->irq_helper();
   \   00000002   0x.... 0x....      BL       _ZN4mbed16InterruptManager3getEv
   \   00000006                      REQUIRE ?Subroutine1
   \   00000006                      ;; // Fall through to label ?Subroutine1
    131          }
    132          

   \                                 In section .text, align 2, keep-with-next
    133          void InterruptManager::lock() {
   \                     _ZN4mbed16InterruptManager4lockEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    134              _mutex.lock();
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000006   0x30C0             ADDS     R0,R0,#+192
   \   00000008   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
    135          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    136          

   \                                 In section .text, align 2, keep-with-next
    137          void InterruptManager::unlock() {
   \                     _ZN4mbed16InterruptManager6unlockEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    138              _mutex.unlock();
   \   00000002   0x30C0             ADDS     R0,R0,#+192
   \   00000004   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
    139          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp mbed::InterruptManager::subobject InterruptManager()
   \                     _ZN4mbed16InterruptManagerC2Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             B.N      ?Subroutine0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     _ZN4mbed16InterruptManager9_instanceE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     _ZN4mbed16InterruptManager17static_irq_helperEv
    140          
    141          } // namespace mbed
    142          
    143          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   mbed::Callback<void ()>::Callback(void (*)())
       8   mbed::Callback<void ()>::function_call<void (*)()>(void const *)
         8   -- Indirect call
       0   mbed::Callback<void ()>::function_dtor<void (*)()>(void *)
       0   mbed::Callback<void ()>::function_move<void (*)()>(void *, void const *)
       0   mbed::InterruptManager::InterruptManager()
         8   -> __aeabi_memclr4
         8   -> rtos::Mutex::Mutex()
      64   mbed::InterruptManager::add_common(void (*)(), IRQn_Type, bool)
        64   -- Indirect call
        64   -> mbed::CallChain::add(mbed::Callback<void ()>)
        64   -> mbed::CallChain::add_front(mbed::Callback<void ()>)
        64   -> mbed::Callback<void ()>::Callback(void (*)())
        64   -> mbed::InterruptManager::must_replace_vector(IRQn_Type)
        64   -> rtos::Mutex::lock(unsigned int)
        64   -> rtos::Mutex::unlock()
       8   mbed::InterruptManager::destroy()
         8   -> mbed::InterruptManager::~InterruptManager()
         8   -> operator delete(void *)
      16   mbed::InterruptManager::get()
        16   -> core_util_critical_section_enter
        16   -> core_util_critical_section_exit
        16   -> mbed::InterruptManager::InterruptManager()
        16   -> mbed::InterruptManager::~InterruptManager()
        16   -> operator delete(void *)
        16   -> operator new(std::size_t)
       0   mbed::InterruptManager::get_irq_index(IRQn_Type)
       8   mbed::InterruptManager::irq_helper()
         8   -> mbed::CallChain::call()
       8   mbed::InterruptManager::lock()
         8   -> rtos::Mutex::lock(unsigned int)
      40   mbed::InterruptManager::must_replace_vector(IRQn_Type)
        40   -- Indirect call
        40   -> mbed::CallChain::CallChain(int)
        40   -> mbed::CallChain::add(mbed::Callback<void ()>)
        40   -> mbed::Callback<void ()>::Callback(void (*)())
        40   -> operator new(std::size_t)
        40   -> rtos::Mutex::lock(unsigned int)
        40   -> rtos::Mutex::unlock()
      24   mbed::InterruptManager::remove_handler(mbed::pFunctionPointer_t, IRQn_Type)
        24   -> mbed::CallChain::remove(mbed::pFunctionPointer_t)
        24   -> rtos::Mutex::lock(unsigned int)
        24   -> rtos::Mutex::unlock()
       8   mbed::InterruptManager::static_irq_helper()
         8   -> mbed::CallChain::call()
         8   -> mbed::InterruptManager::get()
       8   mbed::InterruptManager::subobject InterruptManager()
         8   -> __aeabi_memclr4
         8   -> rtos::Mutex::Mutex()
       8   mbed::InterruptManager::subobject ~InterruptManager()
         8   -> mbed::InterruptManager::~InterruptManager()
       8   mbed::InterruptManager::unlock()
         8   -> rtos::Mutex::unlock()
      16   mbed::InterruptManager::~InterruptManager()
        16   -- Indirect call
        16   -> rtos::Mutex::~Mutex()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
      20  ?Subroutine0
      14  ?Subroutine1
      48  mbed::Callback<void ()>::Callback(void (*)())
       8  mbed::Callback<void ()>::function_call<void (*)()>(void const *)
       2  mbed::Callback<void ()>::function_dtor<void (*)()>(void *)
      10  mbed::Callback<void ()>::function_move<void (*)()>(void *, void const *)
       2  mbed::InterruptManager::InterruptManager()
       4  mbed::InterruptManager::_instance
     128  mbed::InterruptManager::add_common(void (*)(), IRQn_Type, bool)
      24  mbed::InterruptManager::destroy()
      70  mbed::InterruptManager::get()
       6  mbed::InterruptManager::get_irq_index(IRQn_Type)
       4  mbed::InterruptManager::irq_helper()
      14  mbed::InterruptManager::lock()
     106  mbed::InterruptManager::must_replace_vector(IRQn_Type)
      54  mbed::InterruptManager::remove_handler(mbed::pFunctionPointer_t, IRQn_Type)
       6  mbed::InterruptManager::static_irq_helper()
       4  mbed::InterruptManager::subobject InterruptManager()
       8  mbed::InterruptManager::subobject ~InterruptManager()
      10  mbed::InterruptManager::unlock()
      38  mbed::InterruptManager::~InterruptManager()
      12  ops

 
   4 bytes in section .bss
  12 bytes in section .rodata
 584 bytes in section .text
 
 516 bytes of CODE  memory (+ 68 bytes shared)
   0 bytes of CONST memory (+ 12 bytes shared)
   4 bytes of DATA  memory

Errors: none
Warnings: none
