###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:40
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\hal\mbed_us_ticker_api.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\hal\mbed_us_ticker_api.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\hal\mbed_us_ticker_api.s.txt -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\hal\mbed_us_ticker_api.o
#        .\mbed-os\hal\mbed_us_ticker_api.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\hal\mbed_us_ticker_api.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\hal\mbed_us_ticker_api.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\hal\mbed_us_ticker_api.c
      1          /* mbed Microcontroller Library
      2           * Copyright (c) 2015 ARM Limited
      3           *
      4           * Licensed under the Apache License, Version 2.0 (the "License");
      5           * you may not use this file except in compliance with the License.
      6           * You may obtain a copy of the License at
      7           *
      8           *     http://www.apache.org/licenses/LICENSE-2.0
      9           *
     10           * Unless required by applicable law or agreed to in writing, software
     11           * distributed under the License is distributed on an "AS IS" BASIS,
     12           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     13           * See the License for the specific language governing permissions and
     14           * limitations under the License.
     15           */
     16          #include "hal/us_ticker_api.h"

  typedef uint8_t BOOL;  //already defined in "hal_type.h"
                  ^
"C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\TARGET_STEVAL_IDB007V1\device\system_BlueNRG1.h",240  Warning[Pe301]: typedef name has already been declared (with same type)
     17          

   \                                 In section .bss, align 8
     18          static ticker_event_queue_t events = { 0 };
   \                     events:
   \   00000000                      DS8 64
     19          

   \                                 In section .data, align 4
     20          static ticker_irq_handler_type irq_handler = ticker_irq_handler;
   \                     irq_handler:
   \   00000000   0x........         DC32 ticker_irq_handler
     21          

   \                                 In section .rodata, align 4, keep-with-next
     22          static const ticker_interface_t us_interface = {
   \                     us_interface:
   \   00000000   0x........         DC32 us_ticker_init, us_ticker_read, us_ticker_disable_interrupt
   \              0x........   
   \              0x........   
   \   0000000C   0x........         DC32 us_ticker_clear_interrupt, us_ticker_set_interrupt
   \              0x........   
   \   00000014   0x........         DC32 us_ticker_fire_interrupt, us_ticker_get_info
   \              0x........   
     23              .init = us_ticker_init,
     24              .read = us_ticker_read,
     25              .disable_interrupt = us_ticker_disable_interrupt,
     26              .clear_interrupt = us_ticker_clear_interrupt,
     27              .set_interrupt = us_ticker_set_interrupt,
     28              .fire_interrupt = us_ticker_fire_interrupt,
     29              .get_info = us_ticker_get_info,
     30          };
     31          

   \                                 In section .text, align 4, keep-with-next
     32          static const ticker_data_t us_data = {
   \                     us_data:
   \   00000000   0x........         DC32 us_interface, events
   \              0x........   
     33              .interface = &us_interface,
     34              .queue = &events
     35          };
     36          

   \                                 In section .text, align 4, keep-with-next
     37          const ticker_data_t* get_us_ticker_data(void)
     38          {
     39              return &us_data;
   \                     get_us_ticker_data: (+1)
   \   00000000   0x....             ADR.N    R0,us_data
   \   00000002   0x4770             BX       LR               ;; return
     40          }
     41          

   \                                 In section .text, align 2, keep-with-next
     42          ticker_irq_handler_type set_us_ticker_irq_handler(ticker_irq_handler_type ticker_irq_handler)
     43          {
   \                     set_us_ticker_irq_handler: (+1)
   \   00000000   0x0001             MOVS     R1,R0
     44              ticker_irq_handler_type prev_irq_handler = irq_handler;
   \   00000002   0x....             LDR      R2,??DataTable3
   \   00000004   0x6810             LDR      R0,[R2, #+0]
     45          
     46              irq_handler = ticker_irq_handler;
   \   00000006   0x6011             STR      R1,[R2, #+0]
     47          
     48              return prev_irq_handler;
   \   00000008   0x4770             BX       LR               ;; return
     49          }
     50          

   \                                 In section .text, align 4, keep-with-next
     51          void us_ticker_irq_handler(void)
     52          {
     53              if (irq_handler) {
   \                     us_ticker_irq_handler: (+1)
   \   00000000   0x....             LDR      R0,??DataTable3
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0x0008             MOVS     R0,R1
   \   00000006   0xD100             BNE      ??us_ticker_irq_handler_0
   \   00000008   0x4770             BX       LR
     54                  irq_handler(&us_data);
   \                     ??us_ticker_irq_handler_0: (+1)
   \   0000000A   0xB580             PUSH     {R7,LR}
   \   0000000C   0x....             ADR.N    R0,us_data
   \   0000000E   0x4788             BLX      R1
     55              }
     56          }
   \   00000010   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     irq_handler

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   get_us_ticker_data
       0   set_us_ticker_irq_handler
       8   us_ticker_irq_handler
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
      64  events
       4  get_us_ticker_data
       4  irq_handler
      10  set_us_ticker_irq_handler
       8  us_data
      28  us_interface
      18  us_ticker_irq_handler

 
 64 bytes in section .bss
  4 bytes in section .data
 28 bytes in section .rodata
 44 bytes in section .text
 
 44 bytes of CODE  memory
 28 bytes of CONST memory
 68 bytes of DATA  memory

Errors: none
Warnings: 1
