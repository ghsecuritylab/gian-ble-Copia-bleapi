###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:54
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\rtos\TARGET_CORTEX\rtx5\RTX\Source\rtx_system.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\TARGET_CORTEX\rtx5\RTX\Source\rtx_system.d
#        -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\TARGET_CORTEX\rtx5\RTX\Source\rtx_system.s.txt
#        -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\TARGET_CORTEX\rtx5\RTX\Source\rtx_system.o
#        .\mbed-os\rtos\TARGET_CORTEX\rtx5\RTX\Source\rtx_system.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\TARGET_CORTEX\rtx5\RTX\Source\rtx_system.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\TARGET_CORTEX\rtx5\RTX\Source\rtx_system.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\rtos\TARGET_CORTEX\rtx5\RTX\Source\rtx_system.c
      1          /*
      2           * Copyright (c) 2013-2017 ARM Limited. All rights reserved.
      3           *
      4           * SPDX-License-Identifier: Apache-2.0
      5           *
      6           * Licensed under the Apache License, Version 2.0 (the License); you may
      7           * not use this file except in compliance with the License.
      8           * You may obtain a copy of the License at
      9           *
     10           * www.apache.org/licenses/LICENSE-2.0
     11           *
     12           * Unless required by applicable law or agreed to in writing, software
     13           * distributed under the License is distributed on an AS IS BASIS, WITHOUT
     14           * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     15           * See the License for the specific language governing permissions and
     16           * limitations under the License.
     17           *
     18           * -----------------------------------------------------------------------------
     19           *
     20           * Project:     CMSIS-RTOS RTX
     21           * Title:       System functions
     22           *
     23           * -----------------------------------------------------------------------------
     24           */
     25          
     26          #include "rtx_lib.h"

  typedef uint8_t BOOL;  //already defined in "hal_type.h"
                  ^
"C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\TARGET_STEVAL_IDB007V1\device\system_BlueNRG1.h",240  Warning[Pe301]: typedef name has already been declared (with same type)
     27          
     28          
     29          //  ==== Helper functions ====
     30          
     31          /// Put Object into ISR Queue.
     32          /// \param[in]  object          object.
     33          /// \return 1 - success, 0 - failure.
     34          static uint32_t isr_queue_put (void *object) {
     35          #if (__EXCLUSIVE_ACCESS == 0U)
     36            uint32_t primask = __get_PRIMASK();
     37          #else
     38            uint32_t n;
     39          #endif
     40            uint16_t max;
     41            uint32_t ret;
     42          
     43            max = osRtxInfo.isr_queue.max;
     44          
     45          #if (__EXCLUSIVE_ACCESS == 0U)
     46            __disable_irq();
     47          
     48            if (osRtxInfo.isr_queue.cnt < max) {
     49              osRtxInfo.isr_queue.cnt++;
     50              osRtxInfo.isr_queue.data[osRtxInfo.isr_queue.in] = object;
     51              if (++osRtxInfo.isr_queue.in == max) {
     52                osRtxInfo.isr_queue.in = 0U;
     53              }
     54              ret = 1U;
     55            } else {
     56              ret = 0U;
     57            }
     58            
     59            if (primask == 0U) {
     60              __enable_irq();
     61            }
     62          #else
     63            if (atomic_inc16_lt(&osRtxInfo.isr_queue.cnt, max) < max) {
     64              n = atomic_inc16_lim(&osRtxInfo.isr_queue.in, max);
     65              osRtxInfo.isr_queue.data[n] = object;
     66              ret = 1U;
     67            } else {
     68              ret = 0U;
     69            }
     70          #endif
     71          
     72            return ret;
     73          }
     74          
     75          /// Get Object from ISR Queue.
     76          /// \return object or NULL.
     77          static void *isr_queue_get (void) {
     78          #if (__EXCLUSIVE_ACCESS == 0U)
     79            uint32_t primask = __get_PRIMASK();
     80          #else
     81            uint32_t n;
     82          #endif
     83            uint16_t max;
     84            void    *ret;
     85          
     86            max = osRtxInfo.isr_queue.max;
     87          
     88          #if (__EXCLUSIVE_ACCESS == 0U)
     89            __disable_irq();
     90          
     91            if (osRtxInfo.isr_queue.cnt != 0U) {
     92              osRtxInfo.isr_queue.cnt--;
     93              ret = osRtxInfo.isr_queue.data[osRtxInfo.isr_queue.out];
     94              if (++osRtxInfo.isr_queue.out == max) {
     95                osRtxInfo.isr_queue.out = 0U;
     96              }
     97            } else {
     98              ret = NULL;
     99            }
    100            
    101            if (primask == 0U) {
    102              __enable_irq();
    103            }
    104          #else
    105            if (atomic_dec16_nz(&osRtxInfo.isr_queue.cnt) != 0U) {
    106              n = atomic_inc16_lim(&osRtxInfo.isr_queue.out, max);
    107              ret = osRtxInfo.isr_queue.data[n];
    108            } else {
    109              ret = NULL;
    110            }
    111          #endif
    112          
    113            return ret;
    114          }
    115          
    116          
    117          //  ==== Library Functions ====
    118          
    119          /// Tick Handler.

   \                                 In section .text, align 2, keep-with-next
    120          void osRtxTick_Handler (void) {
   \                     osRtxTick_Handler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    121            os_thread_t *thread;
    122          
    123            OS_Tick_AcknowledgeIRQ();
   \   00000002   0x.... 0x....      BL       OS_Tick_AcknowledgeIRQ
    124            osRtxInfo.kernel.tick++;
   \   00000006   0x....             LDR      R4,??DataTable2
   \   00000008   0x68E0             LDR      R0,[R4, #+12]
   \   0000000A   0x1C40             ADDS     R0,R0,#+1
   \   0000000C   0x60E0             STR      R0,[R4, #+12]
    125          
    126            // Process Timers
    127            if (osRtxInfo.timer.tick != NULL) {
   \   0000000E   0x6D20             LDR      R0,[R4, #+80]
   \   00000010   0x0001             MOVS     R1,R0
   \   00000012   0xD000             BEQ      ??osRtxTick_Handler_0
    128              osRtxInfo.timer.tick();
   \   00000014   0x4780             BLX      R0
    129            }
    130          
    131            // Process Thread Delays
    132            osRtxThreadDelayTick();
   \                     ??osRtxTick_Handler_0: (+1)
   \   00000016   0x.... 0x....      BL       osRtxThreadDelayTick
    133          
    134            osRtxThreadDispatch(NULL);
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      BL       osRtxThreadDispatch
    135          
    136            // Check Round Robin timeout
    137            if (osRtxInfo.thread.robin.timeout != 0U) {
   \   00000020   0x6C21             LDR      R1,[R4, #+64]
   \   00000022   0x2900             CMP      R1,#+0
   \   00000024   0xD024             BEQ      ??osRtxTick_Handler_1
    138              if (osRtxInfo.thread.robin.thread != osRtxInfo.thread.run.next) {
   \   00000026   0x69A2             LDR      R2,[R4, #+24]
   \   00000028   0x6BA0             LDR      R0,[R4, #+56]
   \   0000002A   0x4290             CMP      R0,R2
   \   0000002C   0xD002             BEQ      ??osRtxTick_Handler_2
    139                // Reset Round Robin
    140                osRtxInfo.thread.robin.thread = osRtxInfo.thread.run.next;
   \   0000002E   0x63A2             STR      R2,[R4, #+56]
    141                osRtxInfo.thread.robin.tick   = osRtxInfo.thread.robin.timeout;
   \   00000030   0x63E1             STR      R1,[R4, #+60]
   \   00000032   0xBD31             POP      {R0,R4,R5,PC}
    142              } else {
    143                if (osRtxInfo.thread.robin.tick != 0U) {
   \                     ??osRtxTick_Handler_2: (+1)
   \   00000034   0x6BE1             LDR      R1,[R4, #+60]
   \   00000036   0x2900             CMP      R1,#+0
   \   00000038   0xD002             BEQ      ??osRtxTick_Handler_3
    144                  osRtxInfo.thread.robin.tick--;
   \   0000003A   0x1E49             SUBS     R1,R1,#+1
   \   0000003C   0x63E1             STR      R1,[R4, #+60]
    145                }
    146                if (osRtxInfo.thread.robin.tick == 0U) {
   \   0000003E   0xD117             BNE      ??osRtxTick_Handler_1
    147                  // Round Robin Timeout
    148                  if (osRtxKernelGetState() == osRtxKernelRunning) {
   \                     ??osRtxTick_Handler_3: (+1)
   \   00000040   0x7A21             LDRB     R1,[R4, #+8]
   \   00000042   0x2902             CMP      R1,#+2
   \   00000044   0xD114             BNE      ??osRtxTick_Handler_1
    149                    thread = osRtxInfo.thread.ready.thread_list;
   \   00000046   0x6A65             LDR      R5,[R4, #+36]
    150                    if ((thread != NULL) && (thread->priority == osRtxInfo.thread.robin.thread->priority)) {
   \   00000048   0x2D00             CMP      R5,#+0
   \   0000004A   0xD011             BEQ      ??osRtxTick_Handler_1
   \   0000004C   0x2120             MOVS     R1,#+32
   \   0000004E   0x5669             LDRSB    R1,[R5, R1]
   \   00000050   0x2220             MOVS     R2,#+32
   \   00000052   0x5680             LDRSB    R0,[R0, R2]
   \   00000054   0x4281             CMP      R1,R0
   \   00000056   0xD10B             BNE      ??osRtxTick_Handler_1
    151                      osRtxThreadListRemove(thread);
   \   00000058   0x0028             MOVS     R0,R5
   \   0000005A   0x.... 0x....      BL       osRtxThreadListRemove
    152                      osRtxThreadReadyPut(osRtxInfo.thread.robin.thread);
   \   0000005E   0x6BA0             LDR      R0,[R4, #+56]
   \   00000060   0x.... 0x....      BL       osRtxThreadReadyPut
    153                      osRtxThreadSwitch(thread);
   \   00000064   0x0028             MOVS     R0,R5
   \   00000066   0x.... 0x....      BL       osRtxThreadSwitch
    154                      osRtxInfo.thread.robin.thread = thread;
   \   0000006A   0x63A5             STR      R5,[R4, #+56]
    155                      osRtxInfo.thread.robin.tick   = osRtxInfo.thread.robin.timeout;
   \   0000006C   0x6C20             LDR      R0,[R4, #+64]
   \   0000006E   0x63E0             STR      R0,[R4, #+60]
    156                    }
    157                  }
    158                }
    159              }
    160            }
    161          }
   \                     ??osRtxTick_Handler_1: (+1)
   \   00000070   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    162          
    163          /// Pending Service Call Handler.

   \                                 In section .text, align 2, keep-with-next
    164          void osRtxPendSV_Handler (void) {
   \                     osRtxPendSV_Handler: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x....             LDR      R4,??DataTable2_1
   \   00000004   0x....             LDR      R5,??DataTable2_2  ;; 0xffff
   \   00000006   0xE001             B        ??osRtxPendSV_Handler_0
    165            os_object_t *object;
    166          
    167            for (;;) {
    168              object = isr_queue_get();
    169              if (object == NULL) {
    170                break;
    171              }
    172              switch (object->id) {
    173                case osRtxIdThread:
    174                  osRtxInfo.post_process.thread((os_thread_t *)object);
   \                     ??osRtxPendSV_Handler_1: (+1)
   \   00000008   0x68E1             LDR      R1,[R4, #+12]
   \   0000000A   0x4788             BLX      R1
    175                  break;
   \                     ??osRtxPendSV_Handler_0: (+1)
   \   0000000C   0xF3EF 0x8110      MRS      R1,PRIMASK
   \   00000010   0x8822             LDRH     R2,[R4, #+0]
   \   00000012   0xB672             CPSID    I
   \   00000014   0x88E3             LDRH     R3,[R4, #+6]
   \   00000016   0x8860             LDRH     R0,[R4, #+2]
   \   00000018   0x0006             MOVS     R6,R0
   \   0000001A   0xD00A             BEQ      ??osRtxPendSV_Handler_2
   \   0000001C   0x1940             ADDS     R0,R0,R5
   \   0000001E   0x8060             STRH     R0,[R4, #+2]
   \   00000020   0x68A0             LDR      R0,[R4, #+8]
   \   00000022   0x009E             LSLS     R6,R3,#+2
   \   00000024   0x5980             LDR      R0,[R0, R6]
   \   00000026   0x1C5B             ADDS     R3,R3,#+1
   \   00000028   0xB29E             UXTH     R6,R3
   \   0000002A   0x4296             CMP      R6,R2
   \   0000002C   0xD102             BNE      ??osRtxPendSV_Handler_3
   \   0000002E   0x2300             MOVS     R3,#+0
   \   00000030   0xE000             B        ??osRtxPendSV_Handler_3
   \                     ??osRtxPendSV_Handler_2: (+1)
   \   00000032   0x2000             MOVS     R0,#+0
   \                     ??osRtxPendSV_Handler_3: (+1)
   \   00000034   0x80E3             STRH     R3,[R4, #+6]
   \   00000036   0x2900             CMP      R1,#+0
   \   00000038   0xD100             BNE      ??osRtxPendSV_Handler_4
   \   0000003A   0xB662             CPSIE    I
   \                     ??osRtxPendSV_Handler_4: (+1)
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD102             BNE      ??osRtxPendSV_Handler_5
    176                case osRtxIdEventFlags:
    177                  osRtxInfo.post_process.event_flags((os_event_flags_t *)object);
    178                  break;
    179                case osRtxIdSemaphore:
    180                  osRtxInfo.post_process.semaphore((os_semaphore_t *)object);
    181                  break;
    182                case osRtxIdMemoryPool:
    183                  osRtxInfo.post_process.memory_pool((os_memory_pool_t *)object);
    184                  break;
    185                case osRtxIdMessage:
    186                  osRtxInfo.post_process.message_queue((os_message_t *)object);
    187                  break;
    188                default:
    189                  break;
    190              }
    191            }
    192          
    193            osRtxThreadDispatch(NULL);
   \   00000040   0x.... 0x....      BL       osRtxThreadDispatch
    194          }
   \   00000044   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??osRtxPendSV_Handler_5: (+1)
   \   00000046   0x7801             LDRB     R1,[R0, #+0]
   \   00000048   0x2901             CMP      R1,#+1
   \   0000004A   0xD0DD             BEQ      ??osRtxPendSV_Handler_1
   \   0000004C   0x2903             CMP      R1,#+3
   \   0000004E   0xD006             BEQ      ??osRtxPendSV_Handler_6
   \   00000050   0x2905             CMP      R1,#+5
   \   00000052   0xD007             BEQ      ??osRtxPendSV_Handler_7
   \   00000054   0x2906             CMP      R1,#+6
   \   00000056   0xD008             BEQ      ??osRtxPendSV_Handler_8
   \   00000058   0x2907             CMP      R1,#+7
   \   0000005A   0xD009             BEQ      ??osRtxPendSV_Handler_9
   \   0000005C   0xE7D6             B        ??osRtxPendSV_Handler_0
   \                     ??osRtxPendSV_Handler_6: (+1)
   \   0000005E   0x6921             LDR      R1,[R4, #+16]
   \   00000060   0x4788             BLX      R1
   \   00000062   0xE7D3             B        ??osRtxPendSV_Handler_0
   \                     ??osRtxPendSV_Handler_7: (+1)
   \   00000064   0x6961             LDR      R1,[R4, #+20]
   \   00000066   0x4788             BLX      R1
   \   00000068   0xE7D0             B        ??osRtxPendSV_Handler_0
   \                     ??osRtxPendSV_Handler_8: (+1)
   \   0000006A   0x69A1             LDR      R1,[R4, #+24]
   \   0000006C   0x4788             BLX      R1
   \   0000006E   0xE7CD             B        ??osRtxPendSV_Handler_0
   \                     ??osRtxPendSV_Handler_9: (+1)
   \   00000070   0x69E1             LDR      R1,[R4, #+28]
   \   00000072   0x4788             BLX      R1
   \   00000074   0xE7CA             B        ??osRtxPendSV_Handler_0
    195          
    196          /// Register post ISR processing.
    197          /// \param[in]  object          generic object.

   \                                 In section .text, align 2, keep-with-next
    198          void osRtxPostProcess (os_object_t *object) {
   \                     osRtxPostProcess: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    199          
    200            if (isr_queue_put(object) != 0U) {
   \   00000002   0xF3EF 0x8110      MRS      R1,PRIMASK
   \   00000006   0x....             LDR      R2,??DataTable2
   \   00000008   0x0013             MOVS     R3,R2
   \   0000000A   0x3354             ADDS     R3,R3,#+84
   \   0000000C   0x881C             LDRH     R4,[R3, #+0]
   \   0000000E   0xB672             CPSID    I
   \   00000010   0x885D             LDRH     R5,[R3, #+2]
   \   00000012   0x42A5             CMP      R5,R4
   \   00000014   0xD20F             BCS      ??osRtxPostProcess_0
   \   00000016   0x1C6D             ADDS     R5,R5,#+1
   \   00000018   0x805D             STRH     R5,[R3, #+2]
   \   0000001A   0x689D             LDR      R5,[R3, #+8]
   \   0000001C   0x889E             LDRH     R6,[R3, #+4]
   \   0000001E   0x00B6             LSLS     R6,R6,#+2
   \   00000020   0x51A8             STR      R0,[R5, R6]
   \   00000022   0x889D             LDRH     R5,[R3, #+4]
   \   00000024   0x1C6D             ADDS     R5,R5,#+1
   \   00000026   0x809D             STRH     R5,[R3, #+4]
   \   00000028   0xB2AD             UXTH     R5,R5
   \   0000002A   0x42A5             CMP      R5,R4
   \   0000002C   0xD101             BNE      ??osRtxPostProcess_1
   \   0000002E   0x2400             MOVS     R4,#+0
   \   00000030   0x809C             STRH     R4,[R3, #+4]
   \                     ??osRtxPostProcess_1: (+1)
   \   00000032   0x2301             MOVS     R3,#+1
   \   00000034   0xE000             B        ??osRtxPostProcess_2
   \                     ??osRtxPostProcess_0: (+1)
   \   00000036   0x2300             MOVS     R3,#+0
   \                     ??osRtxPostProcess_2: (+1)
   \   00000038   0x2900             CMP      R1,#+0
   \   0000003A   0xD100             BNE      ??osRtxPostProcess_3
   \   0000003C   0xB662             CPSIE    I
   \                     ??osRtxPostProcess_3: (+1)
   \   0000003E   0x2B00             CMP      R3,#+0
   \   00000040   0xD00C             BEQ      ??osRtxPostProcess_4
    201              if (osRtxInfo.kernel.blocked == 0U) {
   \   00000042   0x0010             MOVS     R0,R2
   \   00000044   0x3009             ADDS     R0,R0,#+9
   \   00000046   0x7801             LDRB     R1,[R0, #+0]
   \   00000048   0x2900             CMP      R1,#+0
   \   0000004A   0xD104             BNE      ??osRtxPostProcess_5
    202                SetPendSV();
   \   0000004C   0x2080             MOVS     R0,#+128
   \   0000004E   0x0540             LSLS     R0,R0,#+21       ;; #+268435456
   \   00000050   0x....             LDR      R1,??DataTable2_3  ;; 0xe000ed04
   \   00000052   0x6008             STR      R0,[R1, #+0]
    203              } else {
   \   00000054   0xBD70             POP      {R4-R6,PC}
    204                osRtxInfo.kernel.pendSV = 1U;
   \                     ??osRtxPostProcess_5: (+1)
   \   00000056   0x2101             MOVS     R1,#+1
   \   00000058   0x7041             STRB     R1,[R0, #+1]
   \   0000005A   0xBD70             POP      {R4-R6,PC}
    205              }
    206            } else {
    207              osRtxErrorNotify(osRtxErrorISRQueueOverflow, object);
   \                     ??osRtxPostProcess_4: (+1)
   \   0000005C   0x0001             MOVS     R1,R0
   \   0000005E   0x2002             MOVS     R0,#+2
   \   00000060   0x.... 0x....      BL       osRtxErrorNotify
    208            }
    209          }
   \   00000064   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     osRtxInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     osRtxInfo+0x54

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x0000FFFF         DC32     0xffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0xE000ED04         DC32     0xe000ed04

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   osRtxPendSV_Handler
        16   -- Indirect call
        16   -> osRtxThreadDispatch
      16   osRtxPostProcess
        16   -> osRtxErrorNotify
      16   osRtxTick_Handler
        16   -- Indirect call
        16   -> OS_Tick_AcknowledgeIRQ
        16   -> osRtxThreadDelayTick
        16   -> osRtxThreadDispatch
        16   -> osRtxThreadListRemove
        16   -> osRtxThreadReadyPut
        16   -> osRtxThreadSwitch


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
     118  osRtxPendSV_Handler
     102  osRtxPostProcess
     114  osRtxTick_Handler

 
 350 bytes in section .text
 
 350 bytes of CODE memory

Errors: none
Warnings: 1
