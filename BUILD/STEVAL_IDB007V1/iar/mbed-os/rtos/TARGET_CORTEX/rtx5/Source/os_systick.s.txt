###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:55
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\rtos\TARGET_CORTEX\rtx5\Source\os_systick.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\TARGET_CORTEX\rtx5\Source\os_systick.d
#        -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\TARGET_CORTEX\rtx5\Source\os_systick.s.txt
#        -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\TARGET_CORTEX\rtx5\Source\os_systick.o
#        .\mbed-os\rtos\TARGET_CORTEX\rtx5\Source\os_systick.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\TARGET_CORTEX\rtx5\Source\os_systick.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\TARGET_CORTEX\rtx5\Source\os_systick.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\rtos\TARGET_CORTEX\rtx5\Source\os_systick.c
      1          /**************************************************************************//**
      2           * @file     os_systick.c
      3           * @brief    CMSIS OS Tick SysTick implementation
      4           * @version  V1.0.0
      5           * @date     05. June 2017
      6           ******************************************************************************/
      7          /*
      8           * Copyright (c) 2017-2017 ARM Limited. All rights reserved.
      9           *
     10           * SPDX-License-Identifier: Apache-2.0
     11           *
     12           * Licensed under the Apache License, Version 2.0 (the License); you may
     13           * not use this file except in compliance with the License.
     14           * You may obtain a copy of the License at
     15           *
     16           * www.apache.org/licenses/LICENSE-2.0
     17           *
     18           * Unless required by applicable law or agreed to in writing, software
     19           * distributed under the License is distributed on an AS IS BASIS, WITHOUT
     20           * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     21           * See the License for the specific language governing permissions and
     22           * limitations under the License.
     23           */
     24          
     25          #include "os_tick.h"
     26          
     27          #include <cmsis.h>

  typedef uint8_t BOOL;  //already defined in "hal_type.h"
                  ^
"C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\TARGET_STEVAL_IDB007V1\device\system_BlueNRG1.h",240  Warning[Pe301]: typedef name has already been declared (with same type)
     28          
     29          #ifdef  SysTick
     30          
     31          #ifndef SYSTICK_IRQ_PRIORITY
     32          #define SYSTICK_IRQ_PRIORITY    0xFFU
     33          #endif
     34          

   \                                 In section .bss, align 1
     35          static uint8_t PendST;
   \                     PendST:
   \   00000000                      DS8 1
     36          
     37          // Setup OS Tick.

   \                                 In section .text, align 4
     38          __WEAK int32_t  OS_Tick_Setup (uint32_t freq, IRQHandler_t handler) {
   \                     OS_Tick_Setup: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0001             MOVS     R1,R0
     39            uint32_t load;
     40            (void)handler;
     41          
     42            if (freq == 0U) {
   \   00000004   0xD007             BEQ      ??OS_Tick_Setup_0
     43              return (-1);
     44            }
     45          
     46            load = (SystemCoreClock / freq) - 1U;
   \   00000006   0x480D             LDR      R0,??OS_Tick_Setup_1  ;; 0x7a120
   \   00000008   0x.... 0x....      BL       __aeabi_uidiv
   \   0000000C   0x1E40             SUBS     R0,R0,#+1
     47            if (load > 0x00FFFFFFU) {
   \   0000000E   0x2180             MOVS     R1,#+128
   \   00000010   0x0449             LSLS     R1,R1,#+17       ;; #+16777216
   \   00000012   0x4288             CMP      R0,R1
   \   00000014   0xD302             BCC      ??OS_Tick_Setup_2
     48              return (-1);
   \                     ??OS_Tick_Setup_0: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x43C0             MVNS     R0,R0            ;; #-1
   \   0000001A   0xBD00             POP      {PC}
     49            }
     50          
     51            // Set SysTick Interrupt Priority
     52          #if   ((defined(__ARM_ARCH_8M_MAIN__) && (__ARM_ARCH_8M_MAIN__ == 1U)) || \
     53                 (defined(__CORTEX_M)           && (__CORTEX_M           == 7U)))
     54            SCB->SHPR[11] =  SYSTICK_IRQ_PRIORITY;
     55          #elif  (defined(__ARM_ARCH_8M_BASE__) && (__ARM_ARCH_8M_BASE__ == 1U))
     56            SCB->SHPR[1] |= (SYSTICK_IRQ_PRIORITY << 24);
     57          #elif ((defined(__ARM_ARCH_7M__)      && (__ARM_ARCH_7M__      == 1U)) || \
     58                 (defined(__ARM_ARCH_7EM__)     && (__ARM_ARCH_7EM__     == 1U)))
     59            SCB->SHP[11]  =  SYSTICK_IRQ_PRIORITY;
     60          #elif  (defined(__ARM_ARCH_6M__)      && (__ARM_ARCH_6M__      == 1U))
     61            SCB->SHP[1]  |= (SYSTICK_IRQ_PRIORITY << 24);
   \                     ??OS_Tick_Setup_2: (+1)
   \   0000001C   0x4908             LDR      R1,??OS_Tick_Setup_1+0x4  ;; 0xe000ed20
   \   0000001E   0x680A             LDR      R2,[R1, #+0]
   \   00000020   0x23FF             MOVS     R3,#+255
   \   00000022   0x061B             LSLS     R3,R3,#+24       ;; #-16777216
   \   00000024   0x4313             ORRS     R3,R3,R2
   \   00000026   0x600B             STR      R3,[R1, #+0]
     62          #else
     63          #error "Unknown ARM Core!"
     64          #endif
     65          
     66            SysTick->CTRL =  SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk;
   \   00000028   0x4906             LDR      R1,??OS_Tick_Setup_1+0x8  ;; 0xe000e010
   \   0000002A   0x2206             MOVS     R2,#+6
   \   0000002C   0x600A             STR      R2,[R1, #+0]
     67            SysTick->LOAD =  load;
   \   0000002E   0x6048             STR      R0,[R1, #+4]
     68            SysTick->VAL  =  0U;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x6088             STR      R0,[R1, #+8]
     69          
     70            PendST = 0U;
   \   00000034   0x4904             LDR      R1,??OS_Tick_Setup_1+0xC
   \   00000036   0x7008             STRB     R0,[R1, #+0]
     71          
     72            return (0);
   \   00000038   0xBD00             POP      {PC}             ;; return
   \   0000003A   0xBF00             Nop      
   \                     ??OS_Tick_Setup_1:
   \   0000003C   0x0007A120         DC32     0x7a120
   \   00000040   0xE000ED20         DC32     0xe000ed20
   \   00000044   0xE000E010         DC32     0xe000e010
   \   00000048   0x........         DC32     PendST
     73          }
     74          
     75          /// Enable OS Tick.

   \                                 In section .text, align 4
     76          __WEAK int32_t  OS_Tick_Enable (void) {
     77          
     78            if (PendST != 0U) {
   \                     OS_Tick_Enable: (+1)
   \   00000000   0x4808             LDR      R0,??OS_Tick_Enable_0
   \   00000002   0x7801             LDRB     R1,[R0, #+0]
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD005             BEQ      ??OS_Tick_Enable_1
     79              PendST = 0U;
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x7001             STRB     R1,[R0, #+0]
     80              SCB->ICSR = SCB_ICSR_PENDSTSET_Msk;
   \   0000000C   0x2080             MOVS     R0,#+128
   \   0000000E   0x04C0             LSLS     R0,R0,#+19       ;; #+67108864
   \   00000010   0x4905             LDR      R1,??OS_Tick_Enable_0+0x4  ;; 0xe000ed04
   \   00000012   0x6008             STR      R0,[R1, #+0]
     81            }
     82          
     83            SysTick->CTRL |=  SysTick_CTRL_ENABLE_Msk;
   \                     ??OS_Tick_Enable_1: (+1)
   \   00000014   0x4805             LDR      R0,??OS_Tick_Enable_0+0x8  ;; 0xe000e010
   \   00000016   0x6801             LDR      R1,[R0, #+0]
   \   00000018   0x2201             MOVS     R2,#+1
   \   0000001A   0x430A             ORRS     R2,R2,R1
   \   0000001C   0x6002             STR      R2,[R0, #+0]
     84          
     85            return (0);
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x4770             BX       LR               ;; return
   \   00000022   0xBF00             Nop      
   \                     ??OS_Tick_Enable_0:
   \   00000024   0x........         DC32     PendST
   \   00000028   0xE000ED04         DC32     0xe000ed04
   \   0000002C   0xE000E010         DC32     0xe000e010
     86          }
     87          
     88          /// Disable OS Tick.

   \                                 In section .text, align 4
     89          __WEAK int32_t  OS_Tick_Disable (void) {
     90          
     91            SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
   \                     OS_Tick_Disable: (+1)
   \   00000000   0x4807             LDR      R0,??OS_Tick_Disable_0  ;; 0xe000e010
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x4391             BICS     R1,R1,R2
   \   00000008   0x6001             STR      R1,[R0, #+0]
     92          
     93            if ((SCB->ICSR & SCB_ICSR_PENDSTSET_Msk) != 0U) {
   \   0000000A   0x4806             LDR      R0,??OS_Tick_Disable_0+0x4  ;; 0xe000ed04
   \   0000000C   0x6801             LDR      R1,[R0, #+0]
   \   0000000E   0x0149             LSLS     R1,R1,#+5
   \   00000010   0xD503             BPL      ??OS_Tick_Disable_1
     94              SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   \   00000012   0x0651             LSLS     R1,R2,#+25
   \   00000014   0x6001             STR      R1,[R0, #+0]
     95              PendST = 1U;
   \   00000016   0x4904             LDR      R1,??OS_Tick_Disable_0+0x8
   \   00000018   0x700A             STRB     R2,[R1, #+0]
     96            }
     97          
     98            return (0);
   \                     ??OS_Tick_Disable_1: (+1)
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x4770             BX       LR               ;; return
   \   0000001E   0xBF00             Nop      
   \                     ??OS_Tick_Disable_0:
   \   00000020   0xE000E010         DC32     0xe000e010
   \   00000024   0xE000ED04         DC32     0xe000ed04
   \   00000028   0x........         DC32     PendST
     99          }
    100          
    101          // Acknowledge OS Tick IRQ.

   \                                 In section .text, align 4
    102          __WEAK int32_t  OS_Tick_AcknowledgeIRQ (void) {
    103            (void)SysTick->CTRL;
   \                     OS_Tick_AcknowledgeIRQ: (+1)
   \   00000000   0x4801             LDR      R0,??OS_Tick_AcknowledgeIRQ_0  ;; 0xe000e010
   \   00000002   0x6800             LDR      R0,[R0, #+0]
    104            return (0);
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x4770             BX       LR               ;; return
   \                     ??OS_Tick_AcknowledgeIRQ_0:
   \   00000008   0xE000E010         DC32     0xe000e010
    105          }
    106          
    107          // Get OS Tick IRQ number.

   \                                 In section .text, align 2
    108          __WEAK int32_t  OS_Tick_GetIRQn (void) {
    109            return (SysTick_IRQn);
   \                     OS_Tick_GetIRQn: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000004   0x4770             BX       LR               ;; return
    110          }
    111          
    112          // Get OS Tick clock.

   \                                 In section .text, align 4
    113          __WEAK uint32_t OS_Tick_GetClock (void) {
    114            return (SystemCoreClock);
   \                     OS_Tick_GetClock: (+1)
   \   00000000   0x4800             LDR      R0,??OS_Tick_GetClock_0  ;; 0x7a120
   \   00000002   0x4770             BX       LR               ;; return
   \                     ??OS_Tick_GetClock_0:
   \   00000004   0x0007A120         DC32     0x7a120
    115          }
    116          
    117          // Get OS Tick interval.

   \                                 In section .text, align 4
    118          __WEAK uint32_t OS_Tick_GetInterval (void) {
    119            return (SysTick->LOAD + 1U);
   \                     OS_Tick_GetInterval: (+1)
   \   00000000   0x4801             LDR      R0,??OS_Tick_GetInterval_0  ;; 0xe000e014
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \   00000006   0x4770             BX       LR               ;; return
   \                     ??OS_Tick_GetInterval_0:
   \   00000008   0xE000E014         DC32     0xe000e014
    120          }
    121          
    122          // Get OS Tick count value.

   \                                 In section .text, align 4
    123          __WEAK uint32_t OS_Tick_GetCount (void) {
    124            uint32_t load = SysTick->LOAD;
   \                     OS_Tick_GetCount: (+1)
   \   00000000   0x4802             LDR      R0,??OS_Tick_GetCount_0  ;; 0xe000e014
   \   00000002   0x6801             LDR      R1,[R0, #+0]
    125            return  (load - SysTick->VAL);
   \   00000004   0x6840             LDR      R0,[R0, #+4]
   \   00000006   0x1A08             SUBS     R0,R1,R0
   \   00000008   0x4770             BX       LR               ;; return
   \   0000000A   0xBF00             Nop      
   \                     ??OS_Tick_GetCount_0:
   \   0000000C   0xE000E014         DC32     0xe000e014
    126          }
    127          
    128          // Get OS Tick overflow status.

   \                                 In section .text, align 4
    129          __WEAK uint32_t OS_Tick_GetOverflow (void) {
    130            return ((SysTick->CTRL >> 16) & 1U);
   \                     OS_Tick_GetOverflow: (+1)
   \   00000000   0x4802             LDR      R0,??OS_Tick_GetOverflow_0  ;; 0xe000e010
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0x03C8             LSLS     R0,R1,#+15
   \   00000006   0x0FC0             LSRS     R0,R0,#+31
   \   00000008   0x4770             BX       LR               ;; return
   \   0000000A   0xBF00             Nop      
   \                     ??OS_Tick_GetOverflow_0:
   \   0000000C   0xE000E010         DC32     0xe000e010
    131          }
    132          
    133          #endif  // SysTick

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   OS_Tick_AcknowledgeIRQ
       0   OS_Tick_Disable
       0   OS_Tick_Enable
       0   OS_Tick_GetClock
       0   OS_Tick_GetCount
       0   OS_Tick_GetIRQn
       0   OS_Tick_GetInterval
       0   OS_Tick_GetOverflow
       4   OS_Tick_Setup
         4 __aeabi_uidiv


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  OS_Tick_AcknowledgeIRQ
      44  OS_Tick_Disable
      48  OS_Tick_Enable
       8  OS_Tick_GetClock
      16  OS_Tick_GetCount
       6  OS_Tick_GetIRQn
      12  OS_Tick_GetInterval
      16  OS_Tick_GetOverflow
      76  OS_Tick_Setup
       1  PendST

 
   1 byte  in section .bss
 238 bytes in section .text
 
 0 bytes of CODE memory (+ 238 bytes shared)
 1 byte  of DATA memory

Errors: none
Warnings: 1
