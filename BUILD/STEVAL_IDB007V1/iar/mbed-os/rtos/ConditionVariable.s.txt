###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:48
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\rtos\ConditionVariable.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\ConditionVariable.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\ConditionVariable.s.txt -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\ConditionVariable.o
#        .\mbed-os\rtos\ConditionVariable.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\ConditionVariable.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\ConditionVariable.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\rtos\ConditionVariable.cpp
      1          /* mbed Microcontroller Library
      2           * Copyright (c) 2017-2017 ARM Limited
      3           *
      4           * Permission is hereby granted, free of charge, to any person obtaining a copy
      5           * of this software and associated documentation files (the "Software"), to deal
      6           * in the Software without restriction, including without limitation the rights
      7           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      8           * copies of the Software, and to permit persons to whom the Software is
      9           * furnished to do so, subject to the following conditions:
     10           *
     11           * The above copyright notice and this permission notice shall be included in
     12           * all copies or substantial portions of the Software.
     13           *
     14           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     15           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     16           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     17           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     18           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     19           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     20           * SOFTWARE.
     21           */
     22          #include "rtos/ConditionVariable.h"
     23          #include "rtos/Thread.h"

   \                                 In section .rodata, align 4
   \   __absolute mbed::Callback<void ()>::ops const mbed::Callback<void ()>::generate<>(mbed::Callback<void ()>::function_context<void (*)(void *), void> const &)::ops
   \                     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops:
   \   00000000   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv
   \   00000004   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv
   \   00000008   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0x6848             LDR      R0,[R1, #+4]
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x4788             BLX      R1
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??function_move_0
   \   00000004   0xC90C             LDM      R1!,{R2,R3}
   \   00000006   0xC00C             STM      R0!,{R2,R3}
   \                     ??function_move_0: (+1)
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
   \                     _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4
   \   __interwork __softfp void mbed::callback<>(void (*)(void *), void *)
   \                     _ZN4mbed8callbackIvvvEENS_8CallbackIFT1_vEEEPFS2_PT_EPT0_: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0xC078             STM      R0!,{R3-R6}
   \   0000000C   0x3810             SUBS     R0,R0,#+16
   \   0000000E   0xD001             BEQ      ??callback_0
   \   00000010   0x6001             STR      R1,[R0, #+0]
   \   00000012   0x6042             STR      R2,[R0, #+4]
   \                     ??callback_0: (+1)
   \   00000014   0x4901             LDR      R1,??callback_1
   \   00000016   0x60C1             STR      R1,[R0, #+12]
   \   00000018   0xBC70             POP      {R4-R6}
   \   0000001A   0x4770             BX       LR               ;; return
   \                     ??callback_1:
   \   0000001C   0x........         DC32     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops
     24          
     25          #include "mbed_error.h"
     26          #include "mbed_assert.h"
     27          
     28          namespace rtos {
     29          
     30          

   \                                 In section .text, align 2, keep-with-next
     31          ConditionVariable::Waiter::Waiter(): sem(0), prev(NULL), next(NULL), in_list(false)
   \                     _ZN4rtos17ConditionVariable6WaiterC1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002                      REQUIRE ?Subroutine1
   \   00000002                      ;; // Fall through to label ?Subroutine1

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x0004             MOVS     R4,R0
     32          {
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x.... 0x....      BL       _ZN4rtos9SemaphoreC1Ei
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x6160             STR      R0,[R4, #+20]
   \   0000000C   0x61A0             STR      R0,[R4, #+24]
   \   0000000E   0x7720             STRB     R0,[R4, #+28]
     33              // No initialization to do
     34          }
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
     35          

   \                                 In section .text, align 2, keep-with-next
     36          ConditionVariable::ConditionVariable(Mutex &mutex): _mutex(mutex), _wait_list(NULL)
   \                     _ZN4rtos17ConditionVariableC1ERNS_5MutexE: (+1)
   \   00000000   0x6001             STR      R1,[R0, #+0]
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x6041             STR      R1,[R0, #+4]
     37          {
     38              // No initialization to do
     39          }
   \   00000006   0x4770             BX       LR               ;; return
     40          

   \                                 In section .text, align 2, keep-with-next
     41          void ConditionVariable::wait()
     42          {
   \                     _ZN4rtos17ConditionVariable4waitEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     43              wait_for(osWaitForever);
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000006   0x.... 0x....      BL       _ZN4rtos17ConditionVariable8wait_forEj
     44          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
     45          

   \                                 In section .text, align 4, keep-with-next
     46          bool ConditionVariable::wait_for(uint32_t millisec)
     47          {
   \                     _ZN4rtos17ConditionVariable8wait_forEj: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     48              Waiter current_thread;
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x.... 0x....      BL       _ZN4rtos17ConditionVariable6WaiterC1Ev
     49              MBED_ASSERT(_mutex.get_owner() == Thread::gettid());
   \   0000000E   0x6820             LDR      R0,[R4, #+0]
   \   00000010   0x.... 0x....      BL       _ZN4rtos5Mutex9get_ownerEv
   \   00000014   0x0006             MOVS     R6,R0
   \   00000016   0x.... 0x....      BL       _ZN4rtos6Thread6gettidEv
   \   0000001A   0x4286             CMP      R6,R0
   \   0000001C   0xD005             BEQ      ??wait_for_0
   \   0000001E   0x2231             MOVS     R2,#+49
   \   00000020   0x....             ADR.N    R1,?_1
   \   00000022   0xBF00             Nop      
   \   00000024   0x....             ADR.N    R0,?_0
   \   00000026   0x.... 0x....      BL       mbed_assert_internal
     50              MBED_ASSERT(_mutex._count == 1);
   \                     ??wait_for_0: (+1)
   \   0000002A   0x6820             LDR      R0,[R4, #+0]
   \   0000002C   0x6A00             LDR      R0,[R0, #+32]
   \   0000002E   0x2801             CMP      R0,#+1
   \   00000030   0xD005             BEQ      ??wait_for_1
   \   00000032   0x2232             MOVS     R2,#+50
   \   00000034   0x....             ADR.N    R1,?_1
   \   00000036   0xBF00             Nop      
   \   00000038   0x....             ADR.N    R0,?_2
   \   0000003A   0x.... 0x....      BL       mbed_assert_internal
     51              _add_wait_list(&_wait_list, &current_thread);
   \                     ??wait_for_1: (+1)
   \   0000003E   0x4669             MOV      R1,SP
   \   00000040   0x1D20             ADDS     R0,R4,#+4
   \   00000042   0x.... 0x....      BL       _ZN4rtos17ConditionVariable14_add_wait_listEPPNS0_6WaiterES2_
     52          
     53              _mutex.unlock();
   \   00000046   0x6820             LDR      R0,[R4, #+0]
   \   00000048   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
     54          
     55              int32_t sem_count = current_thread.sem.wait(millisec);
     56              bool timeout = (sem_count > 0) ? false : true;
   \   0000004C   0x0029             MOVS     R1,R5
   \   0000004E   0x4668             MOV      R0,SP
   \   00000050   0x.... 0x....      BL       _ZN4rtos9Semaphore4waitEj
   \   00000054   0x2801             CMP      R0,#+1
   \   00000056   0xDB01             BLT      ??wait_for_2
   \   00000058   0x2500             MOVS     R5,#+0
   \   0000005A   0xE000             B        ??wait_for_3
   \                     ??wait_for_2: (+1)
   \   0000005C   0x2501             MOVS     R5,#+1
     57          
     58              _mutex.lock();
   \                     ??wait_for_3: (+1)
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000062   0x6820             LDR      R0,[R4, #+0]
   \   00000064   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
     59          
     60              if (current_thread.in_list) {
   \   00000068   0x4668             MOV      R0,SP
   \   0000006A   0x7F00             LDRB     R0,[R0, #+28]
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD003             BEQ      ??wait_for_4
     61                  _remove_wait_list(&_wait_list, &current_thread);
   \   00000070   0x4669             MOV      R1,SP
   \   00000072   0x1D20             ADDS     R0,R4,#+4
   \   00000074   0x.... 0x....      BL       _ZN4rtos17ConditionVariable17_remove_wait_listEPPNS0_6WaiterES2_
     62              }
     63          
     64              return timeout;
   \                     ??wait_for_4: (+1)
   \   00000078   0x4668             MOV      R0,SP
   \   0000007A   0x.... 0x....      BL       _ZN4rtos9SemaphoreD1Ev
   \   0000007E   0x0028             MOVS     R0,R5
   \   00000080   0xB008             ADD      SP,SP,#+32
   \   00000082   0xBD70             POP      {R4-R6,PC}       ;; return
     65          }
     66          

   \                                 In section .text, align 4, keep-with-next
     67          void ConditionVariable::notify_one()
     68          {
   \                     _ZN4rtos17ConditionVariable10notify_oneEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     69              MBED_ASSERT(_mutex.get_owner() == Thread::gettid());
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x.... 0x....      BL       _ZN4rtos5Mutex9get_ownerEv
   \   0000000A   0x0005             MOVS     R5,R0
   \   0000000C   0x.... 0x....      BL       _ZN4rtos6Thread6gettidEv
   \   00000010   0x4285             CMP      R5,R0
   \   00000012   0xD006             BEQ      ??notify_one_0
   \   00000014   0x2245             MOVS     R2,#+69
   \   00000016   0xBF00             Nop      
   \   00000018   0x....             ADR.N    R1,?_1
   \   0000001A   0xBF00             Nop      
   \   0000001C   0x....             ADR.N    R0,?_0
   \   0000001E   0x.... 0x....      BL       mbed_assert_internal
     70              if (_wait_list != NULL) {
   \                     ??notify_one_0: (+1)
   \   00000022   0x6860             LDR      R0,[R4, #+4]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD005             BEQ      ??notify_one_1
     71                  _wait_list->sem.release();
   \   00000028   0x.... 0x....      BL       _ZN4rtos9Semaphore7releaseEv
     72                  _remove_wait_list(&_wait_list, _wait_list);
   \   0000002C   0x6861             LDR      R1,[R4, #+4]
   \   0000002E   0x1D20             ADDS     R0,R4,#+4
   \   00000030   0x.... 0x....      BL       _ZN4rtos17ConditionVariable17_remove_wait_listEPPNS0_6WaiterES2_
     73              }
     74          }
   \                     ??notify_one_1: (+1)
   \   00000034   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     75          

   \                                 In section .text, align 4, keep-with-next
     76          void ConditionVariable::notify_all()
     77          {
   \                     _ZN4rtos17ConditionVariable10notify_allEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     78              MBED_ASSERT(_mutex.get_owner() == Thread::gettid());
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x.... 0x....      BL       _ZN4rtos5Mutex9get_ownerEv
   \   0000000A   0x0005             MOVS     R5,R0
   \   0000000C   0x.... 0x....      BL       _ZN4rtos6Thread6gettidEv
   \   00000010   0x4285             CMP      R5,R0
   \   00000012   0xD018             BEQ      ??notify_all_0
   \   00000014   0x224E             MOVS     R2,#+78
   \   00000016   0xBF00             Nop      
   \   00000018   0x....             ADR.N    R1,?_1
   \   0000001A   0xBF00             Nop      
   \   0000001C   0x....             ADR.N    R0,?_0
   \   0000001E   0x.... 0x....      BL       mbed_assert_internal
   \   00000022   0xE010             B        ??notify_all_0
     79              while (_wait_list != NULL) {
     80                  _wait_list->sem.release();
   \                     ??notify_all_1: (+1)
   \   00000024   0x.... 0x....      BL       _ZN4rtos9Semaphore7releaseEv
     81                  _remove_wait_list(&_wait_list, _wait_list);
   \   00000028   0x6860             LDR      R0,[R4, #+4]
   \   0000002A   0x6981             LDR      R1,[R0, #+24]
   \   0000002C   0x6942             LDR      R2,[R0, #+20]
   \   0000002E   0x6191             STR      R1,[R2, #+24]
   \   00000030   0x6942             LDR      R2,[R0, #+20]
   \   00000032   0x614A             STR      R2,[R1, #+20]
   \   00000034   0x6981             LDR      R1,[R0, #+24]
   \   00000036   0x2200             MOVS     R2,#+0
   \   00000038   0x4281             CMP      R1,R0
   \   0000003A   0xD100             BNE      ??notify_all_2
   \   0000003C   0x2100             MOVS     R1,#+0
   \                     ??notify_all_2: (+1)
   \   0000003E   0x6061             STR      R1,[R4, #+4]
   \   00000040   0x6182             STR      R2,[R0, #+24]
   \   00000042   0x6142             STR      R2,[R0, #+20]
   \   00000044   0x7702             STRB     R2,[R0, #+28]
     82              }
   \                     ??notify_all_0: (+1)
   \   00000046   0x6860             LDR      R0,[R4, #+4]
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD1EB             BNE      ??notify_all_1
     83          }
   \   0000004C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     84          

   \                                 In section .text, align 2, keep-with-next
     85          void ConditionVariable::_add_wait_list(Waiter **wait_list, Waiter *waiter)
     86          {
     87              if (NULL == *wait_list) {
   \                     _ZN4rtos17ConditionVariable14_add_wait_listEPPNS0_6WaiterES2_: (+1)
   \   00000000   0x6802             LDR      R2,[R0, #+0]
   \   00000002   0x2A00             CMP      R2,#+0
   \   00000004   0xD103             BNE      ??_add_wait_list_0
     88                  // Nothing in the list so add it directly.
     89                  // Update prev and next pointer to reference self
     90                  *wait_list = waiter;
   \   00000006   0x6001             STR      R1,[R0, #+0]
     91                  waiter->next = waiter;
   \   00000008   0x6189             STR      R1,[R1, #+24]
     92                  waiter->prev = waiter;
   \   0000000A   0x6149             STR      R1,[R1, #+20]
   \   0000000C   0xE004             B        ??_add_wait_list_1
     93              } else {
     94                  // Add after the last element
     95                  Waiter *first = *wait_list;
     96                  Waiter *last = (*wait_list)->prev;
   \                     ??_add_wait_list_0: (+1)
   \   0000000E   0x6950             LDR      R0,[R2, #+20]
     97          
     98                  // Update new entry
     99                  waiter->next = first;
   \   00000010   0x618A             STR      R2,[R1, #+24]
    100                  waiter->prev = last;
   \   00000012   0x6148             STR      R0,[R1, #+20]
    101          
    102                  // Insert into the list
    103                  first->prev = waiter;
   \   00000014   0x6151             STR      R1,[R2, #+20]
    104                  last->next = waiter;
   \   00000016   0x6181             STR      R1,[R0, #+24]
    105              }
    106              waiter->in_list = true;
   \                     ??_add_wait_list_1: (+1)
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x7708             STRB     R0,[R1, #+28]
    107          }
   \   0000001C   0x4770             BX       LR               ;; return
    108          

   \                                 In section .text, align 2, keep-with-next
    109          void ConditionVariable::_remove_wait_list(Waiter **wait_list, Waiter *waiter)
    110          {
    111              Waiter *prev = waiter->prev;
    112              Waiter *next = waiter->next;
   \                     _ZN4rtos17ConditionVariable17_remove_wait_listEPPNS0_6WaiterES2_: (+1)
   \   00000000   0x698A             LDR      R2,[R1, #+24]
    113          
    114              // Remove from list
    115              prev->next = waiter->next;
   \   00000002   0x694B             LDR      R3,[R1, #+20]
   \   00000004   0x619A             STR      R2,[R3, #+24]
    116              next->prev = waiter->prev;
   \   00000006   0x694B             LDR      R3,[R1, #+20]
   \   00000008   0x6153             STR      R3,[R2, #+20]
    117              *wait_list = waiter->next;
   \   0000000A   0x698A             LDR      R2,[R1, #+24]
    118          
    119              if (*wait_list == waiter) {
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0x428A             CMP      R2,R1
   \   00000010   0xD100             BNE      ??_remove_wait_list_0
    120                  // This was the last element in the list
    121                  *wait_list = NULL;
   \   00000012   0x2200             MOVS     R2,#+0
   \                     ??_remove_wait_list_0: (+1)
   \   00000014   0x6002             STR      R2,[R0, #+0]
    122              }
    123          
    124              // Invalidate pointers
    125              waiter->next = NULL;
   \   00000016   0x618B             STR      R3,[R1, #+24]
    126              waiter->prev = NULL;
   \   00000018   0x614B             STR      R3,[R1, #+20]
    127              waiter->in_list = false;
   \   0000001A   0x770B             STRB     R3,[R1, #+28]
    128          }
   \   0000001C   0x4770             BX       LR               ;; return
    129          

   \                                 In section .text, align 4, keep-with-next
    130          ConditionVariable::~ConditionVariable()
   \                     _ZN4rtos17ConditionVariableD1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xBF00             Nop      
   \   00000004                      REQUIRE ?Subroutine0
   \   00000004                      ;; // Fall through to label ?Subroutine0

   \                                 In section .text, align 4, keep-with-next
    131          {
   \                     ?Subroutine0: (+1)
   \   00000000   0x0004             MOVS     R4,R0
    132              MBED_ASSERT(NULL == _wait_list);
   \   00000002   0x6860             LDR      R0,[R4, #+4]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD006             BEQ      ??Subroutine0_0
   \   00000008   0x2284             MOVS     R2,#+132
   \   0000000A   0xBF00             Nop      
   \   0000000C   0x....             ADR.N    R1,?_1
   \   0000000E   0xBF00             Nop      
   \   00000010   0x....             ADR.N    R0,?_3
   \   00000012   0x.... 0x....      BL       mbed_assert_internal
    133          }
   \                     ??Subroutine0_0: (+1)
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp rtos::ConditionVariable::subobject ConditionVariable(rtos::Mutex &)
   \                     _ZN4rtos17ConditionVariableC2ERNS_5MutexE: (+1)
   \   00000000   0x6001             STR      R1,[R0, #+0]
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x6041             STR      R1,[R0, #+4]
   \   00000006   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp rtos::ConditionVariable::subobject ~ConditionVariable()
   \                     _ZN4rtos17ConditionVariableD2Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             B.N      ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp rtos::ConditionVariable::Waiter::subobject Waiter()
   \                     _ZN4rtos17ConditionVariable6WaiterC2Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             B.N      ?Subroutine1

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x5F 0x6D          DC8 "_mutex.get_owner() == Thread::gettid()"
   \              0x75 0x74    
   \              0x65 0x78    
   \              0x2E 0x67    
   \              0x65 0x74    
   \              0x5F 0x6F    
   \              0x77 0x6E    
   \              0x65 0x72    
   \              0x28 0x29    
   \              0x20 0x3D    
   \              0x3D 0x20    
   \              0x54 0x68    
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x3A 0x3A    
   \              0x67 0x65    
   \              0x74 0x74    
   \              0x69 0x64    
   \              0x28 0x29    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x2E 0x5C          DC8 ".\\mbed-os\\rtos\\ConditionVariable.cpp"
   \              0x6D 0x62    
   \              0x65 0x64    
   \              0x2D 0x6F    
   \              0x73 0x5C    
   \              0x72 0x74    
   \              0x6F 0x73    
   \              0x5C 0x43    
   \              0x6F 0x6E    
   \              0x64 0x69    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x56 0x61    
   \              0x72 0x69    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x2E 0x63    
   \              0x70 0x70    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x5F 0x6D          DC8 "_mutex._count == 1"
   \              0x75 0x74    
   \              0x65 0x78    
   \              0x2E 0x5F    
   \              0x63 0x6F    
   \              0x75 0x6E    
   \              0x74 0x20    
   \              0x3D 0x3D    
   \              0x20 0x31    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x4E 0x55          DC8 "NULL == _wait_list"
   \              0x4C 0x4C    
   \              0x20 0x3D    
   \              0x3D 0x20    
   \              0x5F 0x77    
   \              0x61 0x69    
   \              0x74 0x5F    
   \              0x6C 0x69    
   \              0x73 0x74    
   \              0x00         
   \   00000013   0x00               DC8 0
    134          
    135          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
         8   -- Indirect call
       0   mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
       0   mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
      12   mbed::callback<>(void (*)(void *), void *)
       0   rtos::ConditionVariable::ConditionVariable(rtos::Mutex &)
       0   rtos::ConditionVariable::Waiter::Waiter()
         8   -> rtos::Semaphore::Semaphore(signed int)
       8   rtos::ConditionVariable::Waiter::subobject Waiter()
         8   -> rtos::Semaphore::Semaphore(signed int)
       0   rtos::ConditionVariable::_add_wait_list(rtos::ConditionVariable::Waiter **, rtos::ConditionVariable::Waiter *)
       0   rtos::ConditionVariable::_remove_wait_list(rtos::ConditionVariable::Waiter **, rtos::ConditionVariable::Waiter *)
      16   rtos::ConditionVariable::notify_all()
        16   -> mbed_assert_internal
        16   -> rtos::Mutex::get_owner()
        16   -> rtos::Semaphore::release()
        16   -> rtos::Thread::gettid()
      16   rtos::ConditionVariable::notify_one()
        16   -> mbed_assert_internal
        16   -> rtos::ConditionVariable::_remove_wait_list(rtos::ConditionVariable::Waiter **, rtos::ConditionVariable::Waiter *)
        16   -> rtos::Mutex::get_owner()
        16   -> rtos::Semaphore::release()
        16   -> rtos::Thread::gettid()
       0   rtos::ConditionVariable::subobject ConditionVariable(rtos::Mutex &)
       8   rtos::ConditionVariable::subobject ~ConditionVariable()
         8   -> mbed_assert_internal
       8   rtos::ConditionVariable::wait()
         8   -> rtos::ConditionVariable::wait_for(unsigned int)
      48   rtos::ConditionVariable::wait_for(unsigned int)
        48   -> mbed_assert_internal
        48   -> rtos::ConditionVariable::Waiter::Waiter()
        48   -> rtos::ConditionVariable::_add_wait_list(rtos::ConditionVariable::Waiter **, rtos::ConditionVariable::Waiter *)
        48   -> rtos::ConditionVariable::_remove_wait_list(rtos::ConditionVariable::Waiter **, rtos::ConditionVariable::Waiter *)
        48   -> rtos::Mutex::get_owner()
        48   -> rtos::Mutex::lock(unsigned int)
        48   -> rtos::Mutex::unlock()
        48   -> rtos::Semaphore::wait(unsigned int)
        48   -> rtos::Semaphore::~Semaphore()
        48   -> rtos::Thread::gettid()
       8   rtos::ConditionVariable::~ConditionVariable()
         8   -> mbed_assert_internal


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      26  ?Subroutine0
      20  ?Subroutine1
      40  ?_0
      40  ?_1
      20  ?_2
      20  ?_3
      12  mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
       2  mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
      10  mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
      32  mbed::callback<>(void (*)(void *), void *)
      12  ops
       8  rtos::ConditionVariable::ConditionVariable(rtos::Mutex &)
       2  rtos::ConditionVariable::Waiter::Waiter()
       4  rtos::ConditionVariable::Waiter::subobject Waiter()
      30  rtos::ConditionVariable::_add_wait_list(rtos::ConditionVariable::Waiter **, rtos::ConditionVariable::Waiter *)
      30  rtos::ConditionVariable::_remove_wait_list(rtos::ConditionVariable::Waiter **, rtos::ConditionVariable::Waiter *)
      78  rtos::ConditionVariable::notify_all()
      54  rtos::ConditionVariable::notify_one()
       8  rtos::ConditionVariable::subobject ConditionVariable(rtos::Mutex &)
       4  rtos::ConditionVariable::subobject ~ConditionVariable()
      12  rtos::ConditionVariable::wait()
     132  rtos::ConditionVariable::wait_for(unsigned int)
       4  rtos::ConditionVariable::~ConditionVariable()

 
  12 bytes in section .rodata
 588 bytes in section .text
 
 532 bytes of CODE  memory (+ 56 bytes shared)
   0 bytes of CONST memory (+ 12 bytes shared)

Errors: none
Warnings: none
