###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:49
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\rtos\Semaphore.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\Semaphore.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\Semaphore.s.txt -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\Semaphore.o
#        .\mbed-os\rtos\Semaphore.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\Semaphore.s.txt
#    Object file  =  .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\Semaphore.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\rtos\Semaphore.cpp
      1          /* mbed Microcontroller Library
      2           * Copyright (c) 2006-2012 ARM Limited
      3           *
      4           * Permission is hereby granted, free of charge, to any person obtaining a copy
      5           * of this software and associated documentation files (the "Software"), to deal
      6           * in the Software without restriction, including without limitation the rights
      7           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      8           * copies of the Software, and to permit persons to whom the Software is
      9           * furnished to do so, subject to the following conditions:
     10           *
     11           * The above copyright notice and this permission notice shall be included in
     12           * all copies or substantial portions of the Software.
     13           *
     14           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     15           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     16           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     17           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     18           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     19           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     20           * SOFTWARE.
     21           */
     22          #include "rtos/Semaphore.h"
     23          #include "platform/mbed_assert.h"
     24          
     25          #include <string.h>
     26          
     27          namespace rtos {
     28          

   \                                 In section .text, align 4, keep-with-next
     29          Semaphore::Semaphore(int32_t count) {
   \                     _ZN4rtos9SemaphoreC1Ei: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xBF00             Nop      
   \   00000004                      REQUIRE ?Subroutine0
   \   00000004                      ;; // Fall through to label ?Subroutine0

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0xB084             SUB      SP,SP,#+16
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     30              constructor(count, 0xffff);
   \   00000006   0x1D20             ADDS     R0,R4,#+4
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0x2600             MOVS     R6,#+0
   \   00000010   0xC04E             STM      R0!,{R1-R3,R6}
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x2110             MOVS     R1,#+16
   \   00000016   0x.... 0x....      BL       __aeabi_memclr4
   \   0000001A   0x1D20             ADDS     R0,R4,#+4
   \   0000001C   0x9002             STR      R0,[SP, #+8]
   \   0000001E   0x2010             MOVS     R0,#+16
   \   00000020   0x9003             STR      R0,[SP, #+12]
   \   00000022   0x466A             MOV      R2,SP
   \   00000024   0x0029             MOVS     R1,R5
   \   00000026   0x....             LDR      R0,??DataTable3  ;; 0xffff
   \   00000028   0x.... 0x....      BL       osSemaphoreNew
   \   0000002C   0x6020             STR      R0,[R4, #+0]
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD105             BNE      ??Subroutine0_0
   \   00000032   0x222B             MOVS     R2,#+43
   \   00000034   0x....             ADR.N    R1,?_1
   \   00000036   0xBF00             Nop      
   \   00000038   0x....             ADR.N    R0,?_0
   \   0000003A   0x.... 0x....      BL       mbed_assert_internal
     31          }
   \                     ??Subroutine0_0: (+1)
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0xB004             ADD      SP,SP,#+16
   \   00000042   0xBD70             POP      {R4-R6,PC}       ;; return
     32          

   \                                 In section .text, align 2, keep-with-next
     33          Semaphore::Semaphore(int32_t count, uint16_t max_count) {
   \                     _ZN4rtos9SemaphoreC1Eit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002                      REQUIRE ?Subroutine2
   \   00000002                      ;; // Fall through to label ?Subroutine2

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x0004             MOVS     R4,R0
     34              constructor(count, max_count);
   \   00000002   0x.... 0x....      BL       _ZN4rtos9Semaphore11constructorEit
     35          }
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0xBD10             POP      {R4,PC}          ;; return
     36          

   \                                 In section .text, align 4, keep-with-next
     37          void Semaphore::constructor(int32_t count, uint16_t max_count) {
   \                     _ZN4rtos9Semaphore11constructorEit: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
     38              memset(&_obj_mem, 0, sizeof(_obj_mem));
   \   0000000A   0x1D20             ADDS     R0,R4,#+4
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0x2300             MOVS     R3,#+0
   \   00000012   0x2700             MOVS     R7,#+0
   \   00000014   0xC08E             STM      R0!,{R1-R3,R7}
     39              osSemaphoreAttr_t attr = { 0 };
   \   00000016   0x4668             MOV      R0,SP
   \   00000018   0x2110             MOVS     R1,#+16
   \   0000001A   0x.... 0x....      BL       __aeabi_memclr4
     40              attr.cb_mem = &_obj_mem;
   \   0000001E   0x1D20             ADDS     R0,R4,#+4
   \   00000020   0x9002             STR      R0,[SP, #+8]
     41              attr.cb_size = sizeof(_obj_mem);
   \   00000022   0x2010             MOVS     R0,#+16
   \   00000024   0x9003             STR      R0,[SP, #+12]
     42              _id = osSemaphoreNew(max_count, count, &attr);
   \   00000026   0x466A             MOV      R2,SP
   \   00000028   0x0029             MOVS     R1,R5
   \   0000002A   0x0030             MOVS     R0,R6
   \   0000002C   0x.... 0x....      BL       osSemaphoreNew
   \   00000030   0x6020             STR      R0,[R4, #+0]
     43              MBED_ASSERT(_id != NULL);
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD105             BNE      ??constructor_0
   \   00000036   0x222B             MOVS     R2,#+43
   \   00000038   0x....             ADR.N    R1,?_1
   \   0000003A   0xBF00             Nop      
   \   0000003C   0x....             ADR.N    R0,?_0
   \   0000003E   0x.... 0x....      BL       mbed_assert_internal
     44          }
   \                     ??constructor_0: (+1)
   \   00000042   0xB005             ADD      SP,SP,#+20
   \   00000044   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x00000000         DC32 0H
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     45          

   \                                 In section .text, align 2, keep-with-next
     46          int32_t Semaphore::wait(uint32_t millisec) {
   \                     _ZN4rtos9Semaphore4waitEj: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     47              osStatus_t stat = osSemaphoreAcquire(_id, millisec);
     48              switch (stat) {
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x.... 0x....      BL       osSemaphoreAcquire
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD005             BEQ      ??wait_0
   \   0000000E   0x2102             MOVS     R1,#+2
   \   00000010   0x43C9             MVNS     R1,R1            ;; #-3
   \   00000012   0x1A40             SUBS     R0,R0,R1
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD905             BLS      ??wait_1
   \   00000018   0xE006             B        ??wait_2
     49                  case osOK:
     50                      return osSemaphoreGetCount(_id) + 1;
   \                     ??wait_0: (+1)
   \   0000001A   0x6820             LDR      R0,[R4, #+0]
   \   0000001C   0x.... 0x....      BL       osSemaphoreGetCount
   \   00000020   0x1C40             ADDS     R0,R0,#+1
   \   00000022   0xBD10             POP      {R4,PC}
     51                  case osErrorTimeout:
     52                  case osErrorResource:
     53                      return 0;
   \                     ??wait_1: (+1)
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xBD10             POP      {R4,PC}
     54                  case osErrorParameter:
     55                  default:
     56                      return -1;
   \                     ??wait_2: (+1)
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x43C0             MVNS     R0,R0            ;; #-1
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
     57              }
     58          }
     59          

   \                                 In section .text, align 2, keep-with-next
     60          osStatus Semaphore::release(void) {
   \                     _ZN4rtos9Semaphore7releaseEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     61              return osSemaphoreRelease(_id);
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x.... 0x....      BL       osSemaphoreRelease
   \   00000008   0xBD02             POP      {R1,PC}          ;; return
     62          }
     63          

   \                                 In section .text, align 2, keep-with-next
     64          Semaphore::~Semaphore() {
   \                     _ZN4rtos9SemaphoreD1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002                      REQUIRE ?Subroutine1
   \   00000002                      ;; // Fall through to label ?Subroutine1

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x0004             MOVS     R4,R0
     65              osSemaphoreDelete(_id);
   \   00000002   0x6820             LDR      R0,[R4, #+0]
   \   00000004   0x.... 0x....      BL       osSemaphoreDelete
     66          }
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp rtos::Semaphore::subobject Semaphore(signed int)
   \                     _ZN4rtos9SemaphoreC2Ei: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x....             B.N      ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp rtos::Semaphore::subobject Semaphore(signed int, std::uint16_t)
   \                     _ZN4rtos9SemaphoreC2Eit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             B.N      ?Subroutine2

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp rtos::Semaphore::subobject ~Semaphore()
   \                     _ZN4rtos9SemaphoreD2Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             B.N      ?Subroutine1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x0000FFFF         DC32     0xffff

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x5F 0x69          DC8 "_id != NULL"
   \              0x64 0x20    
   \              0x21 0x3D    
   \              0x20 0x4E    
   \              0x55 0x4C    
   \              0x4C 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x2E 0x5C          DC8 ".\\mbed-os\\rtos\\Semaphore.cpp"
   \              0x6D 0x62    
   \              0x65 0x64    
   \              0x2D 0x6F    
   \              0x73 0x5C    
   \              0x72 0x74    
   \              0x6F 0x73    
   \              0x5C 0x53    
   \              0x65 0x6D    
   \              0x61 0x70    
   \              0x68 0x6F    
   \              0x72 0x65    
   \              0x2E 0x63    
   \              0x70 0x70    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
     67          
     68          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   rtos::Semaphore::Semaphore(signed int)
        32   -> __aeabi_memclr4
        32   -> mbed_assert_internal
        32   -> osSemaphoreNew
       0   rtos::Semaphore::Semaphore(signed int, std::uint16_t)
         8   -> rtos::Semaphore::constructor(signed int, std::uint16_t)
      40   rtos::Semaphore::constructor(signed int, std::uint16_t)
        40   -> __aeabi_memclr4
        40   -> mbed_assert_internal
        40   -> osSemaphoreNew
       8   rtos::Semaphore::release()
         8   -> osSemaphoreRelease
      16   rtos::Semaphore::subobject Semaphore(signed int)
        32   -> __aeabi_memclr4
        32   -> mbed_assert_internal
        32   -> osSemaphoreNew
       8   rtos::Semaphore::subobject Semaphore(signed int, std::uint16_t)
         8   -> rtos::Semaphore::constructor(signed int, std::uint16_t)
       8   rtos::Semaphore::subobject ~Semaphore()
         8   -> osSemaphoreDelete
       8   rtos::Semaphore::wait(unsigned int)
         8   -> osSemaphoreAcquire
         8   -> osSemaphoreGetCount
       0   rtos::Semaphore::~Semaphore()
         8   -> osSemaphoreDelete


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
      68  ?Subroutine0
      12  ?Subroutine1
      10  ?Subroutine2
      12  ?_0
      32  ?_1
      16  ?_2
       4  rtos::Semaphore::Semaphore(signed int)
       2  rtos::Semaphore::Semaphore(signed int, std::uint16_t)
      70  rtos::Semaphore::constructor(signed int, std::uint16_t)
      10  rtos::Semaphore::release()
       4  rtos::Semaphore::subobject Semaphore(signed int)
       4  rtos::Semaphore::subobject Semaphore(signed int, std::uint16_t)
       4  rtos::Semaphore::subobject ~Semaphore()
      46  rtos::Semaphore::wait(unsigned int)
       2  rtos::Semaphore::~Semaphore()

 
  16 bytes in section .rodata
 284 bytes in section .text
 
 284 bytes of CODE  memory
  16 bytes of CONST memory

Errors: none
Warnings: none
