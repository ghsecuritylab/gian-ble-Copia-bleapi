###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:49
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\rtos\Mutex.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\Mutex.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\Mutex.s.txt -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\Mutex.o
#        .\mbed-os\rtos\Mutex.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\Mutex.s.txt
#    Object file  =  .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\rtos\Mutex.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\rtos\Mutex.cpp
      1          /* mbed Microcontroller Library
      2           * Copyright (c) 2006-2012 ARM Limited
      3           *
      4           * Permission is hereby granted, free of charge, to any person obtaining a copy
      5           * of this software and associated documentation files (the "Software"), to deal
      6           * in the Software without restriction, including without limitation the rights
      7           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      8           * copies of the Software, and to permit persons to whom the Software is
      9           * furnished to do so, subject to the following conditions:
     10           *
     11           * The above copyright notice and this permission notice shall be included in
     12           * all copies or substantial portions of the Software.
     13           *
     14           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     15           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     16           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     17           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     18           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     19           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     20           * SOFTWARE.
     21           */
     22          #include "rtos/Mutex.h"
     23          
     24          #include <string.h>
     25          #include "mbed_error.h"
     26          #include "mbed_assert.h"
     27          
     28          namespace rtos {
     29          

   \                                 In section .text, align 4, keep-with-next
     30          Mutex::Mutex(): _count(0)
   \                     _ZN4rtos5MutexC1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x6220             STR      R0,[R4, #+32]
     31          {
     32              constructor();
   \   0000000A   0x211C             MOVS     R1,#+28
   \   0000000C   0x1D20             ADDS     R0,R4,#+4
   \   0000000E   0x.... 0x....      BL       __aeabi_memclr4
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x2110             MOVS     R1,#+16
   \   00000016   0x.... 0x....      BL       __aeabi_memclr4
   \   0000001A   0xBF00             Nop      
   \   0000001C   0x....             ADR.N    R0,?_0
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0x1D20             ADDS     R0,R4,#+4
   \   00000022   0x9002             STR      R0,[SP, #+8]
   \   00000024   0x201C             MOVS     R0,#+28
   \   00000026   0x9003             STR      R0,[SP, #+12]
   \   00000028   0x200B             MOVS     R0,#+11
   \   0000002A   0x9001             STR      R0,[SP, #+4]
   \   0000002C   0x4668             MOV      R0,SP
   \   0000002E   0x.... 0x....      BL       osMutexNew
   \   00000032   0x6020             STR      R0,[R4, #+0]
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD105             BNE      ??Mutex_0
   \   00000038   0x2231             MOVS     R2,#+49
   \   0000003A   0xBF00             Nop      
   \   0000003C   0x....             ADR.N    R1,?_2
   \   0000003E   0x....             ADR      R0,??DataTable5  ;; "_id"
   \   00000040   0x.... 0x....      BL       mbed_assert_internal
     33          }
   \                     ??Mutex_0: (+1)
   \   00000044   0x0020             MOVS     R0,R4
   \   00000046   0xB004             ADD      SP,SP,#+16
   \   00000048   0xBD10             POP      {R4,PC}          ;; return
     34          

   \                                 In section .text, align 2, keep-with-next
     35          Mutex::Mutex(const char *name)
   \                     _ZN4rtos5MutexC1EPKc: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002                      REQUIRE ?Subroutine1
   \   00000002                      ;; // Fall through to label ?Subroutine1

   \                                 In section .text, align 2, keep-with-next
     36          {
   \                     ?Subroutine1: (+1)
   \   00000000   0x0004             MOVS     R4,R0
     37              constructor(name);
   \                     ??Subroutine1_0: (+1)
   \   00000002   0x.... 0x....      BL       _ZN4rtos5Mutex11constructorEPKc
     38          }
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0xBD10             POP      {R4,PC}          ;; return
     39          

   \                                 In section .text, align 4, keep-with-next
     40          void Mutex::constructor(const char *name)
     41          {
   \                     _ZN4rtos5Mutex11constructorEPKc: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     42              memset(&_obj_mem, 0, sizeof(_obj_mem));
   \   00000008   0x211C             MOVS     R1,#+28
   \   0000000A   0x1D20             ADDS     R0,R4,#+4
   \   0000000C   0x.... 0x....      BL       __aeabi_memclr4
     43              osMutexAttr_t attr = { 0 };
   \   00000010   0x4668             MOV      R0,SP
   \   00000012   0x2110             MOVS     R1,#+16
   \   00000014   0x.... 0x....      BL       __aeabi_memclr4
     44              attr.name = name ? name : "aplication_unnamed_mutex";
   \   00000018   0x2D00             CMP      R5,#+0
   \   0000001A   0xD100             BNE      ??constructor_0
   \   0000001C   0x....             ADR.N    R5,?_0
   \                     ??constructor_0: (+1)
   \   0000001E   0x9500             STR      R5,[SP, #+0]
     45              attr.cb_mem = &_obj_mem;
   \   00000020   0x1D20             ADDS     R0,R4,#+4
   \   00000022   0x9002             STR      R0,[SP, #+8]
     46              attr.cb_size = sizeof(_obj_mem);
   \   00000024   0x201C             MOVS     R0,#+28
   \   00000026   0x9003             STR      R0,[SP, #+12]
     47              attr.attr_bits = osMutexRecursive | osMutexPrioInherit | osMutexRobust;
   \   00000028   0x200B             MOVS     R0,#+11
   \   0000002A   0x9001             STR      R0,[SP, #+4]
     48              _id = osMutexNew(&attr);
   \   0000002C   0x4668             MOV      R0,SP
   \   0000002E   0x.... 0x....      BL       osMutexNew
   \   00000032   0x6020             STR      R0,[R4, #+0]
     49              MBED_ASSERT(_id);
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD105             BNE      ??constructor_1
   \   00000038   0x2231             MOVS     R2,#+49
   \   0000003A   0xBF00             Nop      
   \   0000003C   0x....             ADR.N    R1,?_2
   \   0000003E   0x....             ADR      R0,??DataTable5  ;; "_id"
   \   00000040   0x.... 0x....      BL       mbed_assert_internal
     50          }
   \                     ??constructor_1: (+1)
   \   00000044   0xB005             ADD      SP,SP,#+20
   \   00000046   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x00000000         DC32 0H
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     51          

   \                                 In section .text, align 2, keep-with-next
     52          osStatus Mutex::lock(uint32_t millisec) {
   \                     _ZN4rtos5Mutex4lockEj: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     53              osStatus status = osMutexAcquire(_id, millisec);
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x.... 0x....      BL       osMutexAcquire
     54              if (osOK == status) {
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD102             BNE      ??lock_0
     55                  _count++;
   \   0000000E   0x6A21             LDR      R1,[R4, #+32]
   \   00000010   0x1C49             ADDS     R1,R1,#+1
   \   00000012   0x6221             STR      R1,[R4, #+32]
     56              }
     57              return status;
   \                     ??lock_0: (+1)
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
     58          }
     59          

   \                                 In section .text, align 2, keep-with-next
     60          bool Mutex::trylock() {
   \                     _ZN4rtos5Mutex7trylockEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     61              if (osMutexAcquire(_id, 0) == osOK) {
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x.... 0x....      BL       osMutexAcquire
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD104             BNE      ??trylock_0
     62                  _count++;
   \   00000010   0x6A20             LDR      R0,[R4, #+32]
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0x6220             STR      R0,[R4, #+32]
     63                  return true;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0xBD10             POP      {R4,PC}
     64              } else {
     65                  return false;
   \                     ??trylock_0: (+1)
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
     66              }
     67          }
     68          

   \                                 In section .text, align 2, keep-with-next
     69          osStatus Mutex::unlock() {
   \                     _ZN4rtos5Mutex6unlockEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     70              _count--;
   \   00000002   0x6A01             LDR      R1,[R0, #+32]
   \   00000004   0x1E49             SUBS     R1,R1,#+1
   \   00000006   0x6201             STR      R1,[R0, #+32]
     71              return osMutexRelease(_id);
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x.... 0x....      BL       osMutexRelease
   \   0000000E   0xBD02             POP      {R1,PC}          ;; return
     72          }
     73          

   \                                 In section .text, align 2, keep-with-next
     74          osThreadId Mutex::get_owner() {
   \                     _ZN4rtos5Mutex9get_ownerEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     75              return osMutexGetOwner(_id);
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x.... 0x....      BL       osMutexGetOwner
   \   00000008   0xBD02             POP      {R1,PC}          ;; return
     76          }
     77          

   \                                 In section .text, align 2, keep-with-next
     78          Mutex::~Mutex() {
   \                     _ZN4rtos5MutexD1Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002                      REQUIRE ?Subroutine0
   \   00000002                      ;; // Fall through to label ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x0004             MOVS     R4,R0
     79              osMutexDelete(_id);
   \   00000002   0x6820             LDR      R0,[R4, #+0]
   \   00000004   0x.... 0x....      BL       osMutexDelete
     80          }
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x5F 0x69          DC8 "_id"
   \              0x64 0x00    

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp rtos::Mutex::subobject Mutex()
   \                     _ZN4rtos5MutexC2Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x6220             STR      R0,[R4, #+32]
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x....             B.N      ??Subroutine1_0

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp rtos::Mutex::subobject Mutex(char const *)
   \                     _ZN4rtos5MutexC2EPKc: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             B.N      ?Subroutine1

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp rtos::Mutex::subobject ~Mutex()
   \                     _ZN4rtos5MutexD2Ev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x....             B.N      ?Subroutine0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x5F 0x69          DC8      "_id"
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x61 0x70          DC8 "aplication_unnamed_mutex"
   \              0x6C 0x69    
   \              0x63 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x5F 0x75    
   \              0x6E 0x6E    
   \              0x61 0x6D    
   \              0x65 0x64    
   \              0x5F 0x6D    
   \              0x75 0x74    
   \              0x65 0x78    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x2E 0x5C          DC8 ".\\mbed-os\\rtos\\Mutex.cpp"
   \              0x6D 0x62    
   \              0x65 0x64    
   \              0x2D 0x6F    
   \              0x73 0x5C    
   \              0x72 0x74    
   \              0x6F 0x73    
   \              0x5C 0x4D    
   \              0x75 0x74    
   \              0x65 0x78    
   \              0x2E 0x63    
   \              0x70 0x70    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         
     81          
     82          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   rtos::Mutex::Mutex()
        24   -> __aeabi_memclr4
        24   -> mbed_assert_internal
        24   -> osMutexNew
       0   rtos::Mutex::Mutex(char const *)
         8   -> rtos::Mutex::constructor(char const *)
      32   rtos::Mutex::constructor(char const *)
        32   -> __aeabi_memclr4
        32   -> mbed_assert_internal
        32   -> osMutexNew
       8   rtos::Mutex::get_owner()
         8   -> osMutexGetOwner
       8   rtos::Mutex::lock(unsigned int)
         8   -> osMutexAcquire
       8   rtos::Mutex::subobject Mutex()
         8   -> rtos::Mutex::constructor(char const *)
       8   rtos::Mutex::subobject Mutex(char const *)
         8   -> rtos::Mutex::constructor(char const *)
       8   rtos::Mutex::subobject ~Mutex()
         8   -> osMutexDelete
       8   rtos::Mutex::trylock()
         8   -> osMutexAcquire
       8   rtos::Mutex::unlock()
         8   -> osMutexRelease
       0   rtos::Mutex::~Mutex()
         8   -> osMutexDelete


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
      12  ?Subroutine0
      10  ?Subroutine1
      28  ?_0
       4  ?_1
      28  ?_2
      16  ?_3
      74  rtos::Mutex::Mutex()
       2  rtos::Mutex::Mutex(char const *)
      72  rtos::Mutex::constructor(char const *)
      10  rtos::Mutex::get_owner()
      22  rtos::Mutex::lock(unsigned int)
      14  rtos::Mutex::subobject Mutex()
       4  rtos::Mutex::subobject Mutex(char const *)
       4  rtos::Mutex::subobject ~Mutex()
      30  rtos::Mutex::trylock()
      16  rtos::Mutex::unlock()
       2  rtos::Mutex::~Mutex()

 
  20 bytes in section .rodata
 332 bytes in section .text
 
 332 bytes of CODE  memory
  20 bytes of CONST memory

Errors: none
Warnings: none
