###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:03
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\events\equeue\equeue_mbed.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\events\equeue\equeue_mbed.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\events\equeue\equeue_mbed.s.txt -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\events\equeue\equeue_mbed.o
#        .\mbed-os\events\equeue\equeue_mbed.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\events\equeue\equeue_mbed.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\events\equeue\equeue_mbed.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\events\equeue\equeue_mbed.cpp
      1          /*
      2           * Implementation for the mbed library
      3           * https://github.com/mbedmicro/mbed
      4           *
      5           * Copyright (c) 2016 Christopher Haster
      6           *
      7           * Licensed under the Apache License, Version 2.0 (the "License");
      8           * you may not use this file except in compliance with the License.
      9           * You may obtain a copy of the License at
     10           *
     11           *     http://www.apache.org/licenses/LICENSE-2.0
     12           *
     13           * Unless required by applicable law or agreed to in writing, software
     14           * distributed under the License is distributed on an "AS IS" BASIS,
     15           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     16           * See the License for the specific language governing permissions and
     17           * limitations under the License.
     18           */
     19          #include "equeue/equeue_platform.h"
     20          
     21          #if defined(EQUEUE_PLATFORM_MBED)
     22          
     23          #include <stdbool.h>
     24          #include "mbed.h"

   \                                 In section .text, align 4
   \   __code __interwork __softfp mbed::Callback<void ()>::Callback(void (*)())
   \                     _ZN4mbed8CallbackIFvvEEC1EPS1_: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0x000A             MOVS     R2,R1
   \   00000004   0xD106             BNE      ??Callback_0
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0x2400             MOVS     R4,#+0
   \   0000000E   0xC01E             STM      R0!,{R1-R4}
   \   00000010   0x3810             SUBS     R0,R0,#+16
   \   00000012   0xE009             B        ??Callback_1
   \                     ??Callback_0: (+1)
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x2300             MOVS     R3,#+0
   \   00000018   0x2400             MOVS     R4,#+0
   \   0000001A   0x2500             MOVS     R5,#+0
   \   0000001C   0xC03C             STM      R0!,{R2-R5}
   \   0000001E   0x3810             SUBS     R0,R0,#+16
   \   00000020   0xD000             BEQ      ??Callback_2
   \   00000022   0x6001             STR      R1,[R0, #+0]
   \                     ??Callback_2: (+1)
   \   00000024   0x4901             LDR      R1,??Callback_3
   \   00000026   0x60C1             STR      R1,[R0, #+12]
   \                     ??Callback_1: (+1)
   \   00000028   0xBC30             POP      {R4,R5}
   \   0000002A   0x4770             BX       LR               ;; return
   \                     ??Callback_3:
   \   0000002C   0x........         DC32     _ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops

   \                                 In section .text, align 4
   \   __code __interwork __softfp mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
   \                     _ZN4mbed8CallbackIFvvEEC1IvvEEPFvPT_EPT0_: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x2600             MOVS     R6,#+0
   \   0000000A   0xC078             STM      R0!,{R3-R6}
   \   0000000C   0x3810             SUBS     R0,R0,#+16
   \   0000000E   0xD001             BEQ      ??Callback_4
   \   00000010   0x6001             STR      R1,[R0, #+0]
   \   00000012   0x6042             STR      R2,[R0, #+4]
   \                     ??Callback_4: (+1)
   \   00000014   0x4901             LDR      R1,??Callback_5
   \   00000016   0x60C1             STR      R1,[R0, #+12]
   \   00000018   0xBC70             POP      {R4-R6}
   \   0000001A   0x4770             BX       LR               ;; return
   \                     ??Callback_5:
   \   0000001C   0x........         DC32     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops

   \                                 In section .rodata, align 4
   \   __absolute mbed::Callback<void ()>::ops const mbed::Callback<void ()>::generate<>(void (*const &)())::ops
   \                     _ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops:
   \   00000000   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv
   \   00000004   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv
   \   00000008   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv

   \                                 In section .rodata, align 4
   \   __absolute mbed::Callback<void ()>::ops const mbed::Callback<void ()>::generate<>(mbed::Callback<void ()>::function_context<void (*)(void *), void> const &)::ops
   \                     _ZZN4mbed8CallbackIFvvEE8generateINS2_16function_contextIPFvPvEvEEEEvRKT_E3ops:
   \   00000000   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv
   \   00000004   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv
   \   00000008   0x........         DC32 _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_call<void (*)()>(void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4780             BLX      R0
   \   00000006   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0x6848             LDR      R0,[R1, #+4]
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x4788             BLX      R1
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_move<void (*)()>(void *, void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??function_move_0
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x6001             STR      R1,[R0, #+0]
   \                     ??function_move_0: (+1)
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
   \                     _ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??function_move_1
   \   00000004   0xC90C             LDM      R1!,{R2,R3}
   \   00000006   0xC00C             STM      R0!,{R2,R3}
   \                     ??function_move_1: (+1)
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_dtor<void (*)()>(void *)
   \                     _ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
   \                     _ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void mbed::callback<>(void (*)(void *), void *)
   \                     _ZN4mbed8callbackIvvvEENS_8CallbackIFT1_vEEEPFS2_PT_EPT0_: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEEC1IvvEEPFvPT_EPT0_
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     25          
     26          #if MBED_CONF_EVENTS_USE_LOWPOWER_TIMER_TICKER
     27          #define ALIAS_TIMER      LowPowerTimer
     28          #define ALIAS_TICKER     LowPowerTicker
     29          #define ALIAS_TIMEOUT    LowPowerTimeout
     30          #else
     31          #define ALIAS_TIMER      Timer
     32          #define ALIAS_TICKER     Ticker
     33          #define ALIAS_TIMEOUT    Timeout
     34          #endif
     35          
     36          // Ticker operations

   \                                 In section .bss, align 4
     37          static bool equeue_tick_inited = false;
     38          static volatile unsigned equeue_minutes = 0;
     39          static unsigned equeue_timer[
     40                  (sizeof(ALIAS_TIMER)+sizeof(unsigned)-1)/sizeof(unsigned)];
     41          static unsigned equeue_ticker[
   \                     equeue_ticker:
   \   00000000                      DS8 64
   \   00000040                      DS8 1

   \                                 In section .bss, align 4
   \                     equeue_minutes:
   \   00000000                      DS8 4
   \   00000004                      DS8 32
     42                  (sizeof(ALIAS_TICKER)+sizeof(unsigned)-1)/sizeof(unsigned)];
     43          

   \                                 In section .text, align 2, keep-with-next
     44          static void equeue_tick_update() {
   \                     _Z18equeue_tick_updatev: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     45              equeue_minutes += reinterpret_cast<ALIAS_TIMER*>(equeue_timer)->read_ms();
   \   00000002   0x....             LDR      R4,??DataTable1
   \   00000004   0x1D20             ADDS     R0,R4,#+4
   \   00000006   0x.... 0x....      BL       _ZN4mbed5Timer7read_msEv
   \   0000000A   0x6821             LDR      R1,[R4, #+0]
   \   0000000C   0x1808             ADDS     R0,R1,R0
   \   0000000E   0x6020             STR      R0,[R4, #+0]
     46              reinterpret_cast<ALIAS_TIMER*>(equeue_timer)->reset();
   \   00000010   0x1D20             ADDS     R0,R4,#+4
   \   00000012   0x.... 0x....      BL       _ZN4mbed5Timer5resetEv
     47          }
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
     48          
     49          static void equeue_tick_init() {
     50              MBED_STATIC_ASSERT(sizeof(equeue_timer) >= sizeof(ALIAS_TIMER),
     51                      "The equeue_timer buffer must fit the class Timer");
     52              MBED_STATIC_ASSERT(sizeof(equeue_ticker) >= sizeof(ALIAS_TICKER),
     53                      "The equeue_ticker buffer must fit the class Ticker");
     54              ALIAS_TIMER *timer = new (equeue_timer) ALIAS_TIMER;
     55              ALIAS_TICKER *ticker = new (equeue_ticker) ALIAS_TICKER;
     56          
     57              equeue_minutes = 0;
     58              timer->start();
     59              ticker->attach_us(equeue_tick_update, 1000 << 16);
     60          
     61              equeue_tick_inited = true;
     62          }
     63          

   \                                 In section .text, align 2, keep-with-next
     64          unsigned equeue_tick() {
   \                     equeue_tick: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
     65              if (!equeue_tick_inited) {
   \   00000004   0x....             LDR      R4,??DataTable1_1
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x3038             ADDS     R0,R0,#+56
   \   0000000A   0x9000             STR      R0,[SP, #+0]
   \   0000000C   0x....             LDR      R7,??DataTable1
   \   0000000E   0x7A00             LDRB     R0,[R0, #+8]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD14D             BNE      ??equeue_tick_0
     66                  equeue_tick_init();
   \   00000014   0x1D38             ADDS     R0,R7,#+4
   \   00000016   0x.... 0x....      BL       _ZN4mbed5TimerC1Ev
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       _ZN4mbed10TimerEventC2Ev
   \   00000020   0x....             LDR      R0,??DataTable1_2
   \   00000022   0x6020             STR      R0,[R4, #+0]
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x3028             ADDS     R0,R0,#+40
   \   0000002A   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEEC1EPS1_
   \   0000002E   0x2601             MOVS     R6,#+1
   \   00000030   0x9900             LDR      R1,[SP, #+0]
   \   00000032   0x700E             STRB     R6,[R1, #+0]
   \   00000034   0x2500             MOVS     R5,#+0
   \   00000036   0x603D             STR      R5,[R7, #+0]
   \   00000038   0x1D38             ADDS     R0,R7,#+4
   \   0000003A   0x.... 0x....      BL       _ZN4mbed5Timer5startEv
   \   0000003E   0x....             LDR      R1,??DataTable1_3
   \   00000040   0xA801             ADD      R0,SP,#+4
   \   00000042   0x.... 0x....      BL       _ZN4mbed8CallbackIFvvEEC1EPS1_
   \   00000046   0x.... 0x....      BL       core_util_critical_section_enter
   \   0000004A   0x6B60             LDR      R0,[R4, #+52]
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD000             BEQ      ??equeue_tick_1
   \   00000050   0x2501             MOVS     R5,#+1
   \                     ??equeue_tick_1: (+1)
   \   00000052   0x9800             LDR      R0,[SP, #+0]
   \   00000054   0x7800             LDRB     R0,[R0, #+0]
   \   00000056   0x2101             MOVS     R1,#+1
   \   00000058   0x4041             EORS     R1,R1,R0
   \   0000005A   0x4329             ORRS     R1,R1,R5
   \   0000005C   0xD101             BNE      ??equeue_tick_2
   \   0000005E   0x.... 0x....      BL       sleep_manager_lock_deep_sleep
   \                     ??equeue_tick_2: (+1)
   \   00000062   0x0020             MOVS     R0,R4
   \   00000064   0x3028             ADDS     R0,R0,#+40
   \   00000066   0xA901             ADD      R1,SP,#+4
   \   00000068   0x4288             CMP      R0,R1
   \   0000006A   0xD011             BEQ      ??equeue_tick_3
   \   0000006C   0x6B60             LDR      R0,[R4, #+52]
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD004             BEQ      ??equeue_tick_4
   \   00000072   0x0020             MOVS     R0,R4
   \   00000074   0x3028             ADDS     R0,R0,#+40
   \   00000076   0x6B61             LDR      R1,[R4, #+52]
   \   00000078   0x6889             LDR      R1,[R1, #+8]
   \   0000007A   0x4788             BLX      R1
   \                     ??equeue_tick_4: (+1)
   \   0000007C   0x9A04             LDR      R2,[SP, #+16]
   \   0000007E   0x2A00             CMP      R2,#+0
   \   00000080   0xD004             BEQ      ??equeue_tick_5
   \   00000082   0xA901             ADD      R1,SP,#+4
   \   00000084   0x0020             MOVS     R0,R4
   \   00000086   0x3028             ADDS     R0,R0,#+40
   \   00000088   0x6852             LDR      R2,[R2, #+4]
   \   0000008A   0x4790             BLX      R2
   \                     ??equeue_tick_5: (+1)
   \   0000008C   0x9804             LDR      R0,[SP, #+16]
   \   0000008E   0x6360             STR      R0,[R4, #+52]
   \                     ??equeue_tick_3: (+1)
   \   00000090   0x22FA             MOVS     R2,#+250
   \   00000092   0x0492             LSLS     R2,R2,#+18       ;; #+65536000
   \   00000094   0x2300             MOVS     R3,#+0
   \   00000096   0x0020             MOVS     R0,R4
   \   00000098   0x.... 0x....      BL       _ZN4mbed6Ticker5setupEy
   \   0000009C   0x.... 0x....      BL       core_util_critical_section_exit
   \   000000A0   0x9904             LDR      R1,[SP, #+16]
   \   000000A2   0x2900             CMP      R1,#+0
   \   000000A4   0xD002             BEQ      ??equeue_tick_6
   \   000000A6   0xA801             ADD      R0,SP,#+4
   \   000000A8   0x6889             LDR      R1,[R1, #+8]
   \   000000AA   0x4788             BLX      R1
   \                     ??equeue_tick_6: (+1)
   \   000000AC   0x9800             LDR      R0,[SP, #+0]
   \   000000AE   0x7206             STRB     R6,[R0, #+8]
     67              }
     68          
     69              unsigned minutes;
     70              unsigned ms;
     71          
     72              do {
     73                  minutes = equeue_minutes;
   \                     ??equeue_tick_0: (+1)
   \   000000B0   0x683C             LDR      R4,[R7, #+0]
     74                  ms = reinterpret_cast<ALIAS_TIMER*>(equeue_timer)->read_ms();
   \   000000B2   0x1D38             ADDS     R0,R7,#+4
   \   000000B4   0x.... 0x....      BL       _ZN4mbed5Timer7read_msEv
     75              } while (minutes != equeue_minutes);
   \   000000B8   0x6839             LDR      R1,[R7, #+0]
   \   000000BA   0x428C             CMP      R4,R1
   \   000000BC   0xD1F8             BNE      ??equeue_tick_0
     76          
     77              return minutes + ms;
   \   000000BE   0x1820             ADDS     R0,R4,R0
   \   000000C0   0xB005             ADD      SP,SP,#+20
   \   000000C2   0xBDF0             POP      {R4-R7,PC}       ;; return
     78          }
     79          
     80          
     81          // Mutex operations

   \                                 In section .text, align 2, keep-with-next
     82          int equeue_mutex_create(equeue_mutex_t *m) { return 0; }
   \                     equeue_mutex_create: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
     83          void equeue_mutex_destroy(equeue_mutex_t *m) { }
   \                     equeue_mutex_destroy: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     84          

   \                                 In section .text, align 2, keep-with-next
     85          void equeue_mutex_lock(equeue_mutex_t *m) {
   \                     equeue_mutex_lock: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     86              core_util_critical_section_enter();
   \   00000002   0x.... 0x....      BL       core_util_critical_section_enter
     87          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     88          

   \                                 In section .text, align 2, keep-with-next
     89          void equeue_mutex_unlock(equeue_mutex_t *m) {
   \                     equeue_mutex_unlock: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     90              core_util_critical_section_exit();
   \   00000002   0x.... 0x....      BL       core_util_critical_section_exit
     91          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     92          
     93          
     94          // Semaphore operations
     95          #ifdef MBED_CONF_RTOS_PRESENT
     96          

   \                                 In section .text, align 2, keep-with-next
     97          int equeue_sema_create(equeue_sema_t *s) {
   \                     equeue_sema_create: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
     98              osEventFlagsAttr_t attr;
     99              memset(&attr, 0, sizeof(attr));
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0x2500             MOVS     R5,#+0
   \   00000010   0xC02E             STM      R0!,{R1-R3,R5}
    100              attr.cb_mem = &s->mem;
   \   00000012   0x1D20             ADDS     R0,R4,#+4
   \   00000014   0x9002             STR      R0,[SP, #+8]
    101              attr.cb_size = sizeof(s->mem);
   \   00000016   0x2010             MOVS     R0,#+16
   \   00000018   0x9003             STR      R0,[SP, #+12]
    102          
    103              s->id = osEventFlagsNew(&attr);
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x.... 0x....      BL       osEventFlagsNew
   \   00000020   0x6020             STR      R0,[R4, #+0]
    104              return !s->id ? -1 : 0;
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD102             BNE      ??equeue_sema_create_0
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x43C0             MVNS     R0,R0            ;; #-1
   \   0000002A   0xE000             B        ??equeue_sema_create_1
   \                     ??equeue_sema_create_0: (+1)
   \   0000002C   0x2000             MOVS     R0,#+0
   \                     ??equeue_sema_create_1: (+1)
   \   0000002E   0xB005             ADD      SP,SP,#+20
   \   00000030   0xBD30             POP      {R4,R5,PC}       ;; return
    105          }
    106          

   \                                 In section .text, align 2, keep-with-next
    107          void equeue_sema_destroy(equeue_sema_t *s) {
   \                     equeue_sema_destroy: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    108              osEventFlagsDelete(s->id);
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x.... 0x....      BL       osEventFlagsDelete
    109          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    110          

   \                                 In section .text, align 2, keep-with-next
    111          void equeue_sema_signal(equeue_sema_t *s) {
   \                     equeue_sema_signal: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    112              osEventFlagsSet(s->id, 1);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x.... 0x....      BL       osEventFlagsSet
    113          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    114          

   \                                 In section .text, align 2, keep-with-next
    115          bool equeue_sema_wait(equeue_sema_t *s, int ms) {
   \                     equeue_sema_wait: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    116              if (ms < 0) {
   \   00000002   0x2900             CMP      R1,#+0
   \   00000004   0xD501             BPL      ??equeue_sema_wait_0
    117                  ms = osWaitForever;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x43C9             MVNS     R1,R1            ;; #-1
    118              }
    119          
    120              return (osEventFlagsWait(s->id, 1, osFlagsWaitAny, ms) == 1);
   \                     ??equeue_sema_wait_0: (+1)
   \   0000000A   0x000B             MOVS     R3,R1
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       osEventFlagsWait
   \   00000016   0x2801             CMP      R0,#+1
   \   00000018   0xD000             BEQ      ??equeue_sema_wait_1
   \   0000001A   0x2000             MOVS     R0,#+0
   \                     ??equeue_sema_wait_1: (+1)
   \   0000001C   0xBD02             POP      {R1,PC}          ;; return
    121          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     equeue_minutes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     equeue_ticker

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     _ZTVN4mbed6TickerE+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     _Z18equeue_tick_updatev
    122          
    123          #else
    124          
    125          // Semaphore operations
    126          int equeue_sema_create(equeue_sema_t *s) {
    127              *s = false;
    128              return 0;
    129          }
    130          
    131          void equeue_sema_destroy(equeue_sema_t *s) {
    132          }
    133          
    134          void equeue_sema_signal(equeue_sema_t *s) {
    135              *s = 1;
    136          }
    137          
    138          static void equeue_sema_timeout(equeue_sema_t *s) {
    139              *s = -1;
    140          }
    141          
    142          bool equeue_sema_wait(equeue_sema_t *s, int ms) {
    143              int signal = 0;
    144              ALIAS_TIMEOUT timeout;
    145              if (ms == 0) {
    146                  return false;
    147              } else if (ms > 0) {
    148                  timeout.attach_us(callback(equeue_sema_timeout, s), ms*1000);
    149              }
    150          
    151              core_util_critical_section_enter();
    152              while (!*s) {
    153                  sleep();
    154                  core_util_critical_section_exit();
    155                  core_util_critical_section_enter();
    156              }
    157          
    158              signal = *s;
    159              *s = false;
    160              core_util_critical_section_exit();
    161          
    162              return (signal > 0);
    163          }
    164          
    165          #endif
    166          
    167          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   equeue_mutex_create
       0   equeue_mutex_destroy
       8   equeue_mutex_lock
         8   -> core_util_critical_section_enter
       8   equeue_mutex_unlock
         8   -> core_util_critical_section_exit
      32   equeue_sema_create
        32   -> osEventFlagsNew
       8   equeue_sema_destroy
         8   -> osEventFlagsDelete
       8   equeue_sema_signal
         8   -> osEventFlagsSet
       8   equeue_sema_wait
         8   -> osEventFlagsWait
      40   equeue_tick
        40   -- Indirect call
        40   -> core_util_critical_section_enter
        40   -> core_util_critical_section_exit
        40   -> mbed::Callback<void ()>::Callback(void (*)())
        40   -> mbed::Ticker::setup(std::uint64_t)
        40   -> mbed::Timer::Timer()
        40   -> mbed::Timer::read_ms()
        40   -> mbed::Timer::start()
        40   -> mbed::TimerEvent::subobject TimerEvent()
        40   -> sleep_manager_lock_deep_sleep
       8   equeue_tick_update()
         8   -> mbed::Timer::read_ms()
         8   -> mbed::Timer::reset()
       8   mbed::Callback<void ()>::Callback(void (*)())
      12   mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
       8   mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
         8   -- Indirect call
       8   mbed::Callback<void ()>::function_call<void (*)()>(void const *)
         8   -- Indirect call
       0   mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
       0   mbed::Callback<void ()>::function_dtor<void (*)()>(void *)
       0   mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
       0   mbed::Callback<void ()>::function_move<void (*)()>(void *, void const *)
       8   mbed::callback<>(void (*)(void *), void *)
         8   -> mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
      36  equeue_minutes
          equeue_timer
       4  equeue_mutex_create
       2  equeue_mutex_destroy
       8  equeue_mutex_lock
       8  equeue_mutex_unlock
      50  equeue_sema_create
      10  equeue_sema_destroy
      12  equeue_sema_signal
      30  equeue_sema_wait
     196  equeue_tick
      24  equeue_tick_update()
      65  equeue_ticker
          equeue_tick_inited
      48  mbed::Callback<void ()>::Callback(void (*)())
      32  mbed::Callback<void ()>::Callback<>(void (*)(void *), void *)
      12  mbed::Callback<void ()>::function_call<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void const *)
       8  mbed::Callback<void ()>::function_call<void (*)()>(void const *)
       2  mbed::Callback<void ()>::function_dtor<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *)
       2  mbed::Callback<void ()>::function_dtor<void (*)()>(void *)
      10  mbed::Callback<void ()>::function_move<mbed::Callback<void ()>::function_context<void (*)(void *), void>>(void *, void const *)
      10  mbed::Callback<void ()>::function_move<void (*)()>(void *, void const *)
       8  mbed::callback<>(void (*)(void *), void *)
      12  ops
      12  ops
     292  -- Other

 
 101 bytes in section .bss
 316 bytes in section .rodata
 492 bytes in section .text
 
 360 bytes of CODE  memory (+ 132 bytes shared)
   0 bytes of CONST memory (+ 316 bytes shared)
 101 bytes of DATA  memory

Errors: none
Warnings: none
