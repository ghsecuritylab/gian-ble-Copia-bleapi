###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:45
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\platform\mbed_mktime.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\platform\mbed_mktime.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\platform\mbed_mktime.s.txt -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\platform\mbed_mktime.o
#        .\mbed-os\platform\mbed_mktime.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\platform\mbed_mktime.s.txt
#    Object file  =  .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\platform\mbed_mktime.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\platform\mbed_mktime.c
      1          /* mbed Microcontroller Library
      2           * Copyright (c) 2017-2017 ARM Limited
      3           *
      4           * Licensed under the Apache License, Version 2.0 (the "License");
      5           * you may not use this file except in compliance with the License.
      6           * You may obtain a copy of the License at
      7           *
      8           *     http://www.apache.org/licenses/LICENSE-2.0
      9           *
     10           * Unless required by applicable law or agreed to in writing, software
     11           * distributed under the License is distributed on an "AS IS" BASIS,
     12           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     13           * See the License for the specific language governing permissions and
     14           * limitations under the License.
     15           */
     16          
     17          #include "mbed_mktime.h"
     18          
     19          /*
     20           * time constants 
     21           */
     22          #define SECONDS_BY_MINUTES 60
     23          #define MINUTES_BY_HOUR 60
     24          #define SECONDS_BY_HOUR (SECONDS_BY_MINUTES * MINUTES_BY_HOUR)
     25          #define HOURS_BY_DAY 24 
     26          #define SECONDS_BY_DAY (SECONDS_BY_HOUR * HOURS_BY_DAY)
     27          
     28          /*
     29           * 2 dimensional array containing the number of seconds elapsed before a given 
     30           * month.
     31           * The second index map to the month while the first map to the type of year:
     32           *   - 0: non leap year 
     33           *   - 1: leap year
     34           */

   \                                 In section .text, align 4, keep-with-next
     35          static const uint32_t seconds_before_month[2][12] = {
   \                     seconds_before_month:
   \   00000000   0x00000000         DC32 0, 2678400, 5097600, 7776000, 10368000, 13046400, 15638400
   \              0x0028DE80   
   \              0x004DC880   
   \              0x0076A700   
   \              0x009E3400   
   \              0x00C71280   
   \              0x00EE9F80   
   \   0000001C   0x01177E00         DC32 18316800, 20995200, 23587200, 26265600, 28857600, 0, 2678400
   \              0x01405C80   
   \              0x0167E980   
   \              0x0190C800   
   \              0x01B85500   
   \              0x00000000   
   \              0x0028DE80   
   \   00000038   0x004F1A00         DC32 5184000, 7862400, 10454400, 13132800, 15724800, 18403200, 21081600
   \              0x0077F880   
   \              0x009F8580   
   \              0x00C86400   
   \              0x00EFF100   
   \              0x0118CF80   
   \              0x0141AE00   
   \   00000054   0x01693B00         DC32 23673600, 26352000, 28944000
   \              0x01921980   
   \              0x01B9A680   
     36              {
     37                  0,
     38                  31 * SECONDS_BY_DAY,
     39                  (31 + 28) * SECONDS_BY_DAY,
     40                  (31 + 28 + 31) * SECONDS_BY_DAY,
     41                  (31 + 28 + 31 + 30) * SECONDS_BY_DAY,
     42                  (31 + 28 + 31 + 30 + 31) * SECONDS_BY_DAY,
     43                  (31 + 28 + 31 + 30 + 31 + 30) * SECONDS_BY_DAY,
     44                  (31 + 28 + 31 + 30 + 31 + 30 + 31) * SECONDS_BY_DAY,
     45                  (31 + 28 + 31 + 30 + 31 + 30 + 31 + 31) * SECONDS_BY_DAY,
     46                  (31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30) * SECONDS_BY_DAY,
     47                  (31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31) * SECONDS_BY_DAY,
     48                  (31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30) * SECONDS_BY_DAY,
     49              },
     50              {
     51                  0,
     52                  31 * SECONDS_BY_DAY,
     53                  (31 + 29) * SECONDS_BY_DAY,
     54                  (31 + 29 + 31) * SECONDS_BY_DAY,
     55                  (31 + 29 + 31 + 30) * SECONDS_BY_DAY,
     56                  (31 + 29 + 31 + 30 + 31) * SECONDS_BY_DAY,
     57                  (31 + 29 + 31 + 30 + 31 + 30) * SECONDS_BY_DAY,
     58                  (31 + 29 + 31 + 30 + 31 + 30 + 31) * SECONDS_BY_DAY,
     59                  (31 + 29 + 31 + 30 + 31 + 30 + 31 + 31) * SECONDS_BY_DAY,
     60                  (31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30) * SECONDS_BY_DAY,
     61                  (31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31) * SECONDS_BY_DAY,
     62                  (31 + 29 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30) * SECONDS_BY_DAY,
     63              }
     64          };
     65          

   \                                 In section .text, align 2, keep-with-next
     66          bool _rtc_is_leap_year(int year) {
     67              /* 
     68               * since in practice, the value manipulated by this algorithm lie in the 
     69               * range [70 : 138], the algorith can be reduced to: year % 4.
     70               * The algorithm valid over the full range of value is: 
     71          
     72                  year = 1900 + year;
     73                  if (year % 4) {
     74                      return false;
     75                  } else if (year % 100) {
     76                      return true;
     77                  } else if (year % 400) {
     78                      return false;
     79                  }
     80                  return true;
     81          
     82               */ 
     83              return (year) % 4 ? false : true;
   \                     _rtc_is_leap_year: (+1)
   \   00000000   0x1041             ASRS     R1,R0,#+1
   \   00000002   0x0F89             LSRS     R1,R1,#+30
   \   00000004   0x1809             ADDS     R1,R1,R0
   \   00000006   0x1089             ASRS     R1,R1,#+2
   \   00000008   0x0089             LSLS     R1,R1,#+2
   \   0000000A   0x1A40             SUBS     R0,R0,R1
   \   0000000C   0x1E40             SUBS     R0,R0,#+1
   \   0000000E   0x4180             SBCS     R0,R0,R0
   \   00000010   0x0FC0             LSRS     R0,R0,#+31
   \   00000012   0x4770             BX       LR               ;; return
     84          }
     85          

   \                                 In section .text, align 4, keep-with-next
     86          time_t _rtc_mktime(const struct tm* time) {
   \                     _rtc_mktime: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
     87              // partial check for the upper bound of the range
     88              // normalization might happen at the end of the function 
     89              // this solution is faster than checking if the input is after the 19th of 
     90              // january 2038 at 03:14:07.  
     91              if ((time->tm_year < 70) || (time->tm_year > 138)) { 
   \   00000002   0x6941             LDR      R1,[R0, #+20]
   \   00000004   0x000A             MOVS     R2,R1
   \   00000006   0x3A46             SUBS     R2,R2,#+70
   \   00000008   0x2A45             CMP      R2,#+69
   \   0000000A   0xD232             BCS      ??_rtc_mktime_0
     92                  return ((time_t) -1);
     93              }
     94          
     95              uint32_t result = time->tm_sec;
     96              result += time->tm_min * SECONDS_BY_MINUTES;
     97              result += time->tm_hour * SECONDS_BY_HOUR;
     98              result += (time->tm_mday - 1) * SECONDS_BY_DAY;
   \   0000000C   0x....             LDR      R2,??DataTable2  ;; 0x15180
   \   0000000E   0x6803             LDR      R3,[R0, #+0]
   \   00000010   0x6844             LDR      R4,[R0, #+4]
   \   00000012   0x0125             LSLS     R5,R4,#+4
   \   00000014   0x1B2C             SUBS     R4,R5,R4
   \   00000016   0x00A4             LSLS     R4,R4,#+2
   \   00000018   0x191B             ADDS     R3,R3,R4
   \   0000001A   0x6884             LDR      R4,[R0, #+8]
   \   0000001C   0x25E1             MOVS     R5,#+225
   \   0000001E   0x012D             LSLS     R5,R5,#+4        ;; #+3600
   \   00000020   0x436C             MULS     R4,R5,R4
   \   00000022   0x191B             ADDS     R3,R3,R4
   \   00000024   0x68C4             LDR      R4,[R0, #+12]
   \   00000026   0x1E64             SUBS     R4,R4,#+1
   \   00000028   0x4354             MULS     R4,R2,R4
   \   0000002A   0x191B             ADDS     R3,R3,R4
     99              result += seconds_before_month[_rtc_is_leap_year(time->tm_year)][time->tm_mon];
   \   0000002C   0x104C             ASRS     R4,R1,#+1
   \   0000002E   0x0FA4             LSRS     R4,R4,#+30
   \   00000030   0x1864             ADDS     R4,R4,R1
   \   00000032   0x10A4             ASRS     R4,R4,#+2
   \   00000034   0x00A4             LSLS     R4,R4,#+2
   \   00000036   0x1B0C             SUBS     R4,R1,R4
   \   00000038   0xD101             BNE      ??_rtc_mktime_1
   \   0000003A   0x2430             MOVS     R4,#+48
   \   0000003C   0xE000             B        ??_rtc_mktime_2
   \                     ??_rtc_mktime_1: (+1)
   \   0000003E   0x2400             MOVS     R4,#+0
   \                     ??_rtc_mktime_2: (+1)
   \   00000040   0x....             ADR.N    R5,seconds_before_month
   \   00000042   0x192C             ADDS     R4,R5,R4
   \   00000044   0x6900             LDR      R0,[R0, #+16]
   \   00000046   0x0080             LSLS     R0,R0,#+2
   \   00000048   0x5820             LDR      R0,[R4, R0]
   \   0000004A   0x1818             ADDS     R0,R3,R0
    100          
    101              if (time->tm_year > 70) { 
   \   0000004C   0x2947             CMP      R1,#+71
   \   0000004E   0xDB0C             BLT      ??_rtc_mktime_3
    102                  // valid in the range [70:138] 
    103                  uint32_t count_of_leap_days = ((time->tm_year - 1) / 4) - (70 / 4);
    104                  result += (((time->tm_year - 70) * 365) + count_of_leap_days) * SECONDS_BY_DAY;
   \   00000050   0x1E4B             SUBS     R3,R1,#+1
   \   00000052   0x3946             SUBS     R1,R1,#+70
   \   00000054   0x24FF             MOVS     R4,#+255
   \   00000056   0x346E             ADDS     R4,R4,#+110      ;; #+365
   \   00000058   0x4361             MULS     R1,R4,R1
   \   0000005A   0x105C             ASRS     R4,R3,#+1
   \   0000005C   0x0FA4             LSRS     R4,R4,#+30
   \   0000005E   0x18E3             ADDS     R3,R4,R3
   \   00000060   0x109B             ASRS     R3,R3,#+2
   \   00000062   0x3B11             SUBS     R3,R3,#+17
   \   00000064   0x18C9             ADDS     R1,R1,R3
   \   00000066   0x4351             MULS     R1,R2,R1
   \   00000068   0x1840             ADDS     R0,R0,R1
    105              }
    106          
    107              if (result > INT32_MAX) { 
   \                     ??_rtc_mktime_3: (+1)
   \   0000006A   0x2180             MOVS     R1,#+128
   \   0000006C   0x0609             LSLS     R1,R1,#+24       ;; #-2147483648
   \   0000006E   0x4288             CMP      R0,R1
   \   00000070   0xD301             BCC      ??_rtc_mktime_4
    108                  return (time_t) -1;
   \                     ??_rtc_mktime_0: (+1)
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x43C0             MVNS     R0,R0            ;; #-1
    109              }
    110          
    111              return result;
   \                     ??_rtc_mktime_4: (+1)
   \   00000076   0xBC30             POP      {R4,R5}
   \   00000078   0x4770             BX       LR               ;; return
    112          }
    113          

   \                                 In section .text, align 4, keep-with-next
    114          bool _rtc_localtime(time_t timestamp, struct tm* time_info) {
   \                     _rtc_localtime: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    115              if (((int32_t) timestamp) < 0) { 
   \   00000006   0x2D00             CMP      R5,#+0
   \   00000008   0xD501             BPL      ??_rtc_localtime_0
    116                  return false;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xBDF0             POP      {R4-R7,PC}
    117              } 
    118          
    119              time_info->tm_sec = timestamp % 60;
   \                     ??_rtc_localtime_0: (+1)
   \   0000000E   0x213C             MOVS     R1,#+60
   \   00000010   0x.... 0x....      BL       __aeabi_uidivmod
   \   00000014   0x6021             STR      R1,[R4, #+0]
    120              timestamp = timestamp / 60;   // timestamp in minutes
   \   00000016   0x0028             MOVS     R0,R5
   \   00000018   0x213C             MOVS     R1,#+60
   \   0000001A   0x.... 0x....      BL       __aeabi_uidiv
   \   0000001E   0x0005             MOVS     R5,R0
    121              time_info->tm_min = timestamp % 60;
   \   00000020   0x213C             MOVS     R1,#+60
   \   00000022   0x.... 0x....      BL       __aeabi_uidivmod
   \   00000026   0x6061             STR      R1,[R4, #+4]
    122              timestamp = timestamp / 60;  // timestamp in hours
   \   00000028   0x0028             MOVS     R0,R5
   \   0000002A   0x213C             MOVS     R1,#+60
   \   0000002C   0x.... 0x....      BL       __aeabi_uidiv
   \   00000030   0x0005             MOVS     R5,R0
    123              time_info->tm_hour = timestamp % 24;
   \   00000032   0x2118             MOVS     R1,#+24
   \   00000034   0x.... 0x....      BL       __aeabi_uidivmod
   \   00000038   0x60A1             STR      R1,[R4, #+8]
    124              timestamp = timestamp / 24;  // timestamp in days;
   \   0000003A   0x0028             MOVS     R0,R5
   \   0000003C   0x2118             MOVS     R1,#+24
   \   0000003E   0x.... 0x....      BL       __aeabi_uidiv
   \   00000042   0x0005             MOVS     R5,R0
    125          
    126              // compute the weekday
    127              // The 1st of January 1970 was a Thursday which is equal to 4 in the weekday
    128              // representation ranging from [0:6]
    129              time_info->tm_wday = (timestamp + 4) % 7;
   \   00000044   0x1D00             ADDS     R0,R0,#+4
   \   00000046   0x2107             MOVS     R1,#+7
   \   00000048   0x.... 0x....      BL       __aeabi_uidivmod
   \   0000004C   0x61A1             STR      R1,[R4, #+24]
    130          
    131              // years start at 70
    132              time_info->tm_year = 70;
   \   0000004E   0x2046             MOVS     R0,#+70
   \   00000050   0x6160             STR      R0,[R4, #+20]
   \   00000052   0x....             LDR      R7,??DataTable2_1  ;; 0xfffffe93
   \   00000054   0x4279             RSBS     R1,R7,#+0
   \   00000056   0x....             LDR      R2,??DataTable2_2  ;; 0xfffffe92
   \   00000058   0x1C4B             ADDS     R3,R1,#+1
   \   0000005A   0xE002             B        ??_rtc_localtime_1
    133              while (true) { 
    134                  if (_rtc_is_leap_year(time_info->tm_year) && timestamp >= 366) {
    135                      ++time_info->tm_year;
   \                     ??_rtc_localtime_2: (+1)
   \   0000005C   0x1C40             ADDS     R0,R0,#+1
   \   0000005E   0x6160             STR      R0,[R4, #+20]
    136                      timestamp -= 366;
   \   00000060   0x18AD             ADDS     R5,R5,R2
    137                  } else if (!_rtc_is_leap_year(time_info->tm_year) && timestamp >= 365) {
   \                     ??_rtc_localtime_1: (+1)
   \   00000062   0x6960             LDR      R0,[R4, #+20]
   \   00000064   0x1046             ASRS     R6,R0,#+1
   \   00000066   0x0FB6             LSRS     R6,R6,#+30
   \   00000068   0x1836             ADDS     R6,R6,R0
   \   0000006A   0x10B6             ASRS     R6,R6,#+2
   \   0000006C   0x00B6             LSLS     R6,R6,#+2
   \   0000006E   0x1B86             SUBS     R6,R0,R6
   \   00000070   0xD101             BNE      ??_rtc_localtime_3
   \   00000072   0x429D             CMP      R5,R3
   \   00000074   0xD2F2             BCS      ??_rtc_localtime_2
   \                     ??_rtc_localtime_3: (+1)
   \   00000076   0x2E00             CMP      R6,#+0
   \   00000078   0xD005             BEQ      ??_rtc_localtime_4
   \   0000007A   0x428D             CMP      R5,R1
   \   0000007C   0xD303             BCC      ??_rtc_localtime_4
    138                      ++time_info->tm_year;
   \   0000007E   0x1C40             ADDS     R0,R0,#+1
   \   00000080   0x6160             STR      R0,[R4, #+20]
    139                      timestamp -= 365;
   \   00000082   0x19ED             ADDS     R5,R5,R7
   \   00000084   0xE7ED             B        ??_rtc_localtime_1
    140                  } else {
    141                      // the remaining days are less than a years
    142                      break;
    143                  }
    144              }
    145          
    146              time_info->tm_yday = timestamp;
   \                     ??_rtc_localtime_4: (+1)
   \   00000086   0x61E5             STR      R5,[R4, #+28]
    147          
    148              // convert days into seconds and find the current month
    149              timestamp *= SECONDS_BY_DAY;
   \   00000088   0x....             LDR      R1,??DataTable2  ;; 0x15180
   \   0000008A   0x434D             MULS     R5,R1,R5
    150              time_info->tm_mon = 11;
   \   0000008C   0x200B             MOVS     R0,#+11
   \   0000008E   0x6120             STR      R0,[R4, #+16]
    151              bool leap = _rtc_is_leap_year(time_info->tm_year);
   \   00000090   0x6962             LDR      R2,[R4, #+20]
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x1053             ASRS     R3,R2,#+1
   \   00000096   0x0F9B             LSRS     R3,R3,#+30
   \   00000098   0x189B             ADDS     R3,R3,R2
   \   0000009A   0x109B             ASRS     R3,R3,#+2
   \   0000009C   0x009B             LSLS     R3,R3,#+2
   \   0000009E   0x1AD2             SUBS     R2,R2,R3
   \   000000A0   0xD101             BNE      ??_rtc_localtime_5
   \   000000A2   0x2230             MOVS     R2,#+48
   \   000000A4   0xE000             B        ??_rtc_localtime_6
   \                     ??_rtc_localtime_5: (+1)
   \   000000A6   0x2200             MOVS     R2,#+0
    152              for (uint32_t i = 0; i < 12; ++i) {
   \                     ??_rtc_localtime_6: (+1)
   \   000000A8   0x....             ADR.N    R3,seconds_before_month
   \   000000AA   0x189E             ADDS     R6,R3,R2
    153                  if ((uint32_t) timestamp < seconds_before_month[leap][i]) {
   \                     ??_rtc_localtime_7: (+1)
   \   000000AC   0x6837             LDR      R7,[R6, #+0]
   \   000000AE   0x42BD             CMP      R5,R7
   \   000000B0   0xD202             BCS      ??_rtc_localtime_8
    154                      time_info->tm_mon = i - 1;
   \                     ??_rtc_localtime_9: (+1)
   \   000000B2   0x1E40             SUBS     R0,R0,#+1
   \   000000B4   0x6120             STR      R0,[R4, #+16]
    155                      break;
   \   000000B6   0xE00F             B        ??_rtc_localtime_10
    156                  }
   \                     ??_rtc_localtime_8: (+1)
   \   000000B8   0x1C40             ADDS     R0,R0,#+1
   \   000000BA   0x6877             LDR      R7,[R6, #+4]
   \   000000BC   0x42BD             CMP      R5,R7
   \   000000BE   0xD3F8             BCC      ??_rtc_localtime_9
   \   000000C0   0x1C40             ADDS     R0,R0,#+1
   \   000000C2   0x68B7             LDR      R7,[R6, #+8]
   \   000000C4   0x42BD             CMP      R5,R7
   \   000000C6   0xD3F4             BCC      ??_rtc_localtime_9
   \   000000C8   0x1C40             ADDS     R0,R0,#+1
   \   000000CA   0x68F7             LDR      R7,[R6, #+12]
   \   000000CC   0x42BD             CMP      R5,R7
   \   000000CE   0xD3F0             BCC      ??_rtc_localtime_9
    157              }
   \   000000D0   0x1C40             ADDS     R0,R0,#+1
   \   000000D2   0x3610             ADDS     R6,R6,#+16
   \   000000D4   0x280C             CMP      R0,#+12
   \   000000D6   0xD3E9             BCC      ??_rtc_localtime_7
    158          
    159              // remove month from timestamp and compute the number of days.
    160              // note: unlike other fields, days are not 0 indexed.
    161              timestamp -= seconds_before_month[leap][time_info->tm_mon];
    162              time_info->tm_mday = (timestamp / SECONDS_BY_DAY) + 1;
   \                     ??_rtc_localtime_10: (+1)
   \   000000D8   0x1898             ADDS     R0,R3,R2
   \   000000DA   0x6922             LDR      R2,[R4, #+16]
   \   000000DC   0x0092             LSLS     R2,R2,#+2
   \   000000DE   0x5880             LDR      R0,[R0, R2]
   \   000000E0   0x1A28             SUBS     R0,R5,R0
   \   000000E2   0x.... 0x....      BL       __aeabi_uidiv
   \   000000E6   0x1C40             ADDS     R0,R0,#+1
   \   000000E8   0x60E0             STR      R0,[R4, #+12]
    163          
    164              return true;
   \   000000EA   0x2001             MOVS     R0,#+1
   \   000000EC   0xBDF0             POP      {R4-R7,PC}       ;; return
    165          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x00015180         DC32     0x15180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0xFFFFFE93         DC32     0xfffffe93

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0xFFFFFE92         DC32     0xfffffe92

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   _rtc_is_leap_year
      20   _rtc_localtime
        20 __aeabi_uidiv
        20 __aeabi_uidivmod
       8   _rtc_mktime


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
      20  _rtc_is_leap_year
     238  _rtc_localtime
     122  _rtc_mktime
      96  seconds_before_month

 
 488 bytes in section .text
 
 488 bytes of CODE memory

Errors: none
Warnings: none
