###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:44
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\platform\mbed_board.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\platform\mbed_board.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\platform\mbed_board.s.txt -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\platform\mbed_board.o
#        .\mbed-os\platform\mbed_board.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\platform\mbed_board.s.txt
#    Object file  =  .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\platform\mbed_board.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\platform\mbed_board.c
      1          /* mbed Microcontroller Library
      2           * Copyright (c) 2006-2013 ARM Limited
      3           *
      4           * Licensed under the Apache License, Version 2.0 (the "License");
      5           * you may not use this file except in compliance with the License.
      6           * You may obtain a copy of the License at
      7           *
      8           *     http://www.apache.org/licenses/LICENSE-2.0
      9           *
     10           * Unless required by applicable law or agreed to in writing, software
     11           * distributed under the License is distributed on an "AS IS" BASIS,
     12           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     13           * See the License for the specific language governing permissions and
     14           * limitations under the License.
     15           */
     16          #include <stdio.h>
     17          #include "hal/gpio_api.h"

  typedef uint8_t BOOL;  //already defined in "hal_type.h"
                  ^
"C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\TARGET_STEVAL_IDB007V1\device\system_BlueNRG1.h",240  Warning[Pe301]: typedef name has already been declared (with same type)
     18          #include "platform/mbed_wait_api.h"
     19          #include "platform/mbed_toolchain.h"
     20          #include "platform/mbed_interface.h"
     21          #include "platform/mbed_critical.h"
     22          #include "hal/serial_api.h"
     23          
     24          #if DEVICE_SERIAL
     25          extern int stdio_uart_inited;
     26          extern serial_t stdio_uart;
     27          #endif
     28          

   \                                 In section .text, align 2
     29          WEAK void mbed_die(void) {
   \                     mbed_die: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
     30          #if !defined (NRF51_H) && !defined(TARGET_EFM32)
     31              core_util_critical_section_enter();
   \   00000002   0x.... 0x....      BL       core_util_critical_section_enter
     32          #endif
     33              gpio_t led_err; gpio_init_out(&led_err, LED1);
   \   00000006   0x2106             MOVS     R1,#+6
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x.... 0x....      BL       gpio_init_out
   \   0000000E   0x24C8             MOVS     R4,#+200
   \   00000010   0x0064             LSLS     R4,R4,#+1        ;; #+400
     34          
     35              while (1) {
     36                  for (int i = 0; i < 4; ++i) {
     37                      gpio_write(&led_err, 1);
   \                     ??mbed_die_0: (+1)
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x4668             MOV      R0,SP
   \   00000016   0x.... 0x....      BL       gpio_write
     38                      wait_ms(150);
   \   0000001A   0x2096             MOVS     R0,#+150
   \   0000001C   0x.... 0x....      BL       wait_ms
     39                      gpio_write(&led_err, 0);
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x.... 0x....      BL       gpio_write
     40                      wait_ms(150);
   \   00000028   0x2096             MOVS     R0,#+150
   \   0000002A   0x.... 0x....      BL       wait_ms
   \   0000002E   0x2101             MOVS     R1,#+1
   \   00000030   0x4668             MOV      R0,SP
   \   00000032   0x.... 0x....      BL       gpio_write
   \   00000036   0x2096             MOVS     R0,#+150
   \   00000038   0x.... 0x....      BL       wait_ms
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0x4668             MOV      R0,SP
   \   00000040   0x.... 0x....      BL       gpio_write
   \   00000044   0x2096             MOVS     R0,#+150
   \   00000046   0x.... 0x....      BL       wait_ms
   \   0000004A   0x2101             MOVS     R1,#+1
   \   0000004C   0x4668             MOV      R0,SP
   \   0000004E   0x.... 0x....      BL       gpio_write
   \   00000052   0x2096             MOVS     R0,#+150
   \   00000054   0x.... 0x....      BL       wait_ms
   \   00000058   0x2100             MOVS     R1,#+0
   \   0000005A   0x4668             MOV      R0,SP
   \   0000005C   0x.... 0x....      BL       gpio_write
   \   00000060   0x2096             MOVS     R0,#+150
   \   00000062   0x.... 0x....      BL       wait_ms
   \   00000066   0x2101             MOVS     R1,#+1
   \   00000068   0x4668             MOV      R0,SP
   \   0000006A   0x.... 0x....      BL       gpio_write
   \   0000006E   0x2096             MOVS     R0,#+150
   \   00000070   0x.... 0x....      BL       wait_ms
   \   00000074   0x2100             MOVS     R1,#+0
   \   00000076   0x4668             MOV      R0,SP
   \   00000078   0x.... 0x....      BL       gpio_write
   \   0000007C   0x2096             MOVS     R0,#+150
   \   0000007E   0x.... 0x....      BL       wait_ms
     41                  }
     42          
     43                  for (int i = 0; i < 4; ++i) {
     44                      gpio_write(&led_err, 1);
   \   00000082   0x2101             MOVS     R1,#+1
   \   00000084   0x4668             MOV      R0,SP
   \   00000086   0x.... 0x....      BL       gpio_write
     45                      wait_ms(400);
   \   0000008A   0x0020             MOVS     R0,R4
   \   0000008C   0x.... 0x....      BL       wait_ms
     46                      gpio_write(&led_err, 0);
   \   00000090   0x2100             MOVS     R1,#+0
   \   00000092   0x4668             MOV      R0,SP
   \   00000094   0x.... 0x....      BL       gpio_write
     47                      wait_ms(400);
   \   00000098   0x0020             MOVS     R0,R4
   \   0000009A   0x.... 0x....      BL       wait_ms
   \   0000009E   0x2101             MOVS     R1,#+1
   \   000000A0   0x4668             MOV      R0,SP
   \   000000A2   0x.... 0x....      BL       gpio_write
   \   000000A6   0x0020             MOVS     R0,R4
   \   000000A8   0x.... 0x....      BL       wait_ms
   \   000000AC   0x2100             MOVS     R1,#+0
   \   000000AE   0x4668             MOV      R0,SP
   \   000000B0   0x.... 0x....      BL       gpio_write
   \   000000B4   0x0020             MOVS     R0,R4
   \   000000B6   0x.... 0x....      BL       wait_ms
   \   000000BA   0x2101             MOVS     R1,#+1
   \   000000BC   0x4668             MOV      R0,SP
   \   000000BE   0x.... 0x....      BL       gpio_write
   \   000000C2   0x0020             MOVS     R0,R4
   \   000000C4   0x.... 0x....      BL       wait_ms
   \   000000C8   0x2100             MOVS     R1,#+0
   \   000000CA   0x4668             MOV      R0,SP
   \   000000CC   0x.... 0x....      BL       gpio_write
   \   000000D0   0x0020             MOVS     R0,R4
   \   000000D2   0x.... 0x....      BL       wait_ms
   \   000000D6   0x2101             MOVS     R1,#+1
   \   000000D8   0x4668             MOV      R0,SP
   \   000000DA   0x.... 0x....      BL       gpio_write
   \   000000DE   0x0020             MOVS     R0,R4
   \   000000E0   0x.... 0x....      BL       wait_ms
   \   000000E4   0x2100             MOVS     R1,#+0
   \   000000E6   0x4668             MOV      R0,SP
   \   000000E8   0x.... 0x....      BL       gpio_write
   \   000000EC   0x0020             MOVS     R0,R4
   \   000000EE   0x.... 0x....      BL       wait_ms
     48                  }
   \   000000F2   0xE78E             B        ??mbed_die_0
     49              }
     50          }
     51          

   \                                 In section .text, align 2, keep-with-next
     52          void mbed_error_printf(const char* format, ...) {
   \                     mbed_error_printf: (+1)
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB500             PUSH     {LR}
     53              va_list arg;
     54              va_start(arg, format);
   \   00000004   0xA901             ADD      R1,SP,#+4
     55              mbed_error_vfprintf(format, arg);
   \   00000006   0x.... 0x....      BL       mbed_error_vfprintf
     56              va_end(arg);
     57          }
   \   0000000A   0x9800             LDR      R0,[SP, #+0]
   \   0000000C   0xB004             ADD      SP,SP,#+16
   \   0000000E   0x4700             BX       R0               ;; return
     58          

   \                                 In section .text, align 2, keep-with-next
     59          void mbed_error_vfprintf(const char * format, va_list arg) {
   \                     mbed_error_vfprintf: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0A0             SUB      SP,SP,#+128
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     60          #if DEVICE_SERIAL
     61          #define ERROR_BUF_SIZE      (128)
     62              core_util_critical_section_enter();
   \   00000008   0x.... 0x....      BL       core_util_critical_section_enter
     63              char buffer[ERROR_BUF_SIZE];
     64              int size = vsnprintf(buffer, ERROR_BUF_SIZE, format, arg);
   \   0000000C   0x002B             MOVS     R3,R5
   \   0000000E   0x0022             MOVS     R2,R4
   \   00000010   0x2180             MOVS     R1,#+128
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x.... 0x....      BL       vsnprintf
   \   00000018   0x0004             MOVS     R4,R0
     65              if (size > 0) {
   \   0000001A   0x2C01             CMP      R4,#+1
   \   0000001C   0xDB11             BLT      ??mbed_error_vfprintf_0
     66                  if (!stdio_uart_inited) {
   \   0000001E   0x....             LDR      R0,??DataTable0
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD104             BNE      ??mbed_error_vfprintf_1
     67                      serial_init(&stdio_uart, STDIO_UART_TX, STDIO_UART_RX);
   \   00000026   0x220B             MOVS     R2,#+11
   \   00000028   0x2108             MOVS     R1,#+8
   \   0000002A   0x....             LDR      R0,??DataTable0_1
   \   0000002C   0x.... 0x....      BL       serial_init
   \                     ??mbed_error_vfprintf_1: (+1)
   \   00000030   0x466D             MOV      R5,SP
   \   00000032   0x....             LDR      R6,??DataTable0_1
     68                  }
     69          #if MBED_CONF_PLATFORM_STDIO_CONVERT_NEWLINES
     70                  char stdio_out_prev = '\0';
     71                  for (int i = 0; i < size; i++) {
     72                      if (buffer[i] == '\n' && stdio_out_prev != '\r') {
     73                           serial_putc(&stdio_uart, '\r');
     74                      }
     75                      serial_putc(&stdio_uart, buffer[i]);
     76                      stdio_out_prev = buffer[i];
     77                  }
     78          #else
     79                  for (int i = 0; i < size; i++) {
     80                      serial_putc(&stdio_uart, buffer[i]);
   \                     ??mbed_error_vfprintf_2: (+1)
   \   00000034   0x7829             LDRB     R1,[R5, #+0]
   \   00000036   0x0030             MOVS     R0,R6
   \   00000038   0x.... 0x....      BL       serial_putc
     81                  }
   \   0000003C   0x1C6D             ADDS     R5,R5,#+1
   \   0000003E   0x1E64             SUBS     R4,R4,#+1
   \   00000040   0xD1F8             BNE      ??mbed_error_vfprintf_2
     82          #endif
     83              }
     84              core_util_critical_section_exit();
   \                     ??mbed_error_vfprintf_0: (+1)
   \   00000042   0x.... 0x....      BL       core_util_critical_section_exit
     85          #endif
     86          }
   \   00000046   0xB020             ADD      SP,SP,#+128
   \   00000048   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     stdio_uart_inited

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x........         DC32     stdio_uart

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   mbed_die
        16   -> core_util_critical_section_enter
        16   -> gpio_init_out
        16   -> gpio_write
        16   -> wait_ms
      16   mbed_error_printf
        16   -> mbed_error_vfprintf
     144   mbed_error_vfprintf
       144   -> core_util_critical_section_enter
       144   -> core_util_critical_section_exit
       144   -> serial_init
       144   -> serial_putc
       144   -> vsnprintf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
     244  mbed_die
      16  mbed_error_printf
      74  mbed_error_vfprintf

 
 342 bytes in section .text
 
 98 bytes of CODE memory (+ 244 bytes shared)

Errors: none
Warnings: 1
