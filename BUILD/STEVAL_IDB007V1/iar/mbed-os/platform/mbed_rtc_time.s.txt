###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:46
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\platform\mbed_rtc_time.cpp
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --c++ --no_rtti --no_exceptions --guard_calls
#        --no_static_destruction -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\platform\mbed_rtc_time.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\platform\mbed_rtc_time.s.txt -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\platform\mbed_rtc_time.o
#        .\mbed-os\platform\mbed_rtc_time.cpp
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\platform\mbed_rtc_time.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\platform\mbed_rtc_time.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\platform\mbed_rtc_time.cpp
      1          /* mbed Microcontroller Library
      2           * Copyright (c) 2006-2013 ARM Limited
      3           *
      4           * Licensed under the Apache License, Version 2.0 (the "License");
      5           * you may not use this file except in compliance with the License.
      6           * You may obtain a copy of the License at
      7           *
      8           *     http://www.apache.org/licenses/LICENSE-2.0
      9           *
     10           * Unless required by applicable law or agreed to in writing, software
     11           * distributed under the License is distributed on an "AS IS" BASIS,
     12           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     13           * See the License for the specific language governing permissions and
     14           * limitations under the License.
     15           */
     16          #include "hal/rtc_api.h"
     17          
     18          #include "platform/mbed_critical.h"
     19          #include "platform/mbed_rtc_time.h"
     20          #include "platform/SingletonPtr.h"

   \                                 In section .text, align 4
   \   __interwork __softfp rtos::Mutex *SingletonPtr<rtos::Mutex>::operator->()
   \                     _ZN12SingletonPtrIN4rtos5MutexEEptEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD110             BNE      `??operator->_0`
   \   0000000A   0x4D0E             LDR      R5,`??operator->_1`
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000010   0x6828             LDR      R0,[R5, #+0]
   \   00000012   0x.... 0x....      BL       osMutexAcquire
   \   00000016   0x6820             LDR      R0,[R4, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD104             BNE      `??operator->_2`
   \   0000001C   0x1D20             ADDS     R0,R4,#+4
   \   0000001E   0xD001             BEQ      `??operator->_3`
   \   00000020   0x.... 0x....      BL       _ZN4rtos5MutexC1Ev
   \                     `??operator->_3`: (+1)
   \   00000024   0x6020             STR      R0,[R4, #+0]
   \                     `??operator->_2`: (+1)
   \   00000026   0x6828             LDR      R0,[R5, #+0]
   \   00000028   0x.... 0x....      BL       osMutexRelease
   \                     `??operator->_0`: (+1)
   \   0000002C   0x6820             LDR      R0,[R4, #+0]
   \   0000002E   0x1D21             ADDS     R1,R4,#+4
   \   00000030   0x4288             CMP      R0,R1
   \   00000032   0xD004             BEQ      `??operator->_4`
   \   00000034   0x225D             MOVS     R2,#+93
   \   00000036   0x4904             LDR      R1,`??operator->_1`+0x4
   \   00000038   0x4804             LDR      R0,`??operator->_1`+0x8
   \   0000003A   0x.... 0x....      BL       mbed_assert_internal
   \                     `??operator->_4`: (+1)
   \   0000003E   0x6820             LDR      R0,[R4, #+0]
   \   00000040   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \   00000042   0xBF00             Nop      
   \                     `??operator->_1`:
   \   00000044   0x........         DC32     singleton_mutex_id
   \   00000048   0x........         DC32     _ZZN12SingletonPtrIN4rtos5MutexEE3getEvEs_0
   \   0000004C   0x........         DC32     _ZZN12SingletonPtrIN4rtos5MutexEE3getEvEs
     21          #include "platform/PlatformMutex.h"
     22          

   \                                 In section .bss, align 4
     23          static SingletonPtr<PlatformMutex> _mutex;
     24          
     25          #if DEVICE_RTC
     26          static void (*_rtc_init)(void) = rtc_init;
     27          static int (*_rtc_isenabled)(void) = rtc_isenabled;
     28          static time_t (*_rtc_read)(void) = rtc_read;
     29          static void (*_rtc_write)(time_t t) = rtc_write;
     30          #else
     31          static void (*_rtc_init)(void) = NULL;
   \                     _rtc_init:
   \   00000000                      DS8 4
   \   00000004                      DS8 4
   \   00000008                      DS8 4
   \   0000000C                      DS8 4
   \   00000010                      DS8 40
     32          static int (*_rtc_isenabled)(void) = NULL;
     33          static time_t (*_rtc_read)(void) = NULL;
     34          static void (*_rtc_write)(time_t t) = NULL;
     35          #endif
     36          
     37          #ifdef __cplusplus
     38          extern "C" {
     39          #endif
     40          #if defined (__ICCARM__)

   \                                 In section .text, align 2, keep-with-next
     41          time_t __time32(time_t *timer)
     42          #else
     43          time_t time(time_t *timer)
     44          #endif
     45          
     46          {
   \                     __time32: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     47              _mutex->lock();
   \   00000004   0x....             LDR      R5,??DataTable2
   \   00000006   0x0028             MOVS     R0,R5
   \   00000008   0x3010             ADDS     R0,R0,#+16
   \   0000000A   0x.... 0x....      BL       _ZN12SingletonPtrIN4rtos5MutexEEptEv
   \   0000000E   0x2600             MOVS     R6,#+0
   \   00000010   0x43F6             MVNS     R6,R6            ;; #-1
   \   00000012   0x0031             MOVS     R1,R6
   \   00000014   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
     48              if (_rtc_isenabled != NULL) {
   \   00000018   0x6868             LDR      R0,[R5, #+4]
   \   0000001A   0x0001             MOVS     R1,R0
   \   0000001C   0xD004             BEQ      ??__time32_0
     49                  if (!(_rtc_isenabled())) {
   \   0000001E   0x4780             BLX      R0
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD101             BNE      ??__time32_0
     50                      set_time(0);
   \   00000024   0x.... 0x....      BL       set_time
     51                  }
     52              }
     53              
     54              time_t t = (time_t)-1;
     55              if (_rtc_read != NULL) {
   \                     ??__time32_0: (+1)
   \   00000028   0x68A8             LDR      R0,[R5, #+8]
   \   0000002A   0x0001             MOVS     R1,R0
   \   0000002C   0xD001             BEQ      ??__time32_1
     56                  t = _rtc_read();
   \   0000002E   0x4780             BLX      R0
   \   00000030   0x0006             MOVS     R6,R0
     57              }
     58          
     59              if (timer != NULL) {
   \                     ??__time32_1: (+1)
   \   00000032   0x2C00             CMP      R4,#+0
   \   00000034   0xD000             BEQ      ??__time32_2
     60                  *timer = t;
   \   00000036   0x6026             STR      R6,[R4, #+0]
     61              }
     62              _mutex->unlock();
   \                     ??__time32_2: (+1)
   \   00000038   0x0028             MOVS     R0,R5
   \   0000003A   0x3010             ADDS     R0,R0,#+16
   \   0000003C   0x.... 0x....      BL       _ZN12SingletonPtrIN4rtos5MutexEEptEv
   \   00000040   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
     63              return t;
   \   00000044   0x0030             MOVS     R0,R6
   \   00000046   0xBD70             POP      {R4-R6,PC}       ;; return
     64          }
     65          

   \                                 In section .text, align 2, keep-with-next
     66          void set_time(time_t t) {
   \                     set_time: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     67              _mutex->lock();
   \   00000004   0x....             LDR      R5,??DataTable2
   \   00000006   0x0028             MOVS     R0,R5
   \   00000008   0x3010             ADDS     R0,R0,#+16
   \   0000000A   0x.... 0x....      BL       _ZN12SingletonPtrIN4rtos5MutexEEptEv
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000012   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
     68              if (_rtc_init != NULL) {
   \   00000016   0x6828             LDR      R0,[R5, #+0]
   \   00000018   0x0001             MOVS     R1,R0
   \   0000001A   0xD000             BEQ      ??set_time_0
     69                  _rtc_init();
   \   0000001C   0x4780             BLX      R0
     70              }
     71              if (_rtc_write != NULL) {
   \                     ??set_time_0: (+1)
   \   0000001E   0x68E9             LDR      R1,[R5, #+12]
   \   00000020   0x0008             MOVS     R0,R1
   \   00000022   0xD001             BEQ      ??set_time_1
     72                  _rtc_write(t);
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x4788             BLX      R1
     73              }
     74              _mutex->unlock();
   \                     ??set_time_1: (+1)
   \   00000028   0x0028             MOVS     R0,R5
   \   0000002A   0x3010             ADDS     R0,R0,#+16
   \   0000002C   0x.... 0x....      BL       _ZN12SingletonPtrIN4rtos5MutexEEptEv
   \   00000030   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
     75          }
   \   00000034   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     76          

   \                                 In section .text, align 2, keep-with-next
     77          void attach_rtc(time_t (*read_rtc)(void), void (*write_rtc)(time_t), void (*init_rtc)(void), int (*isenabled_rtc)(void)) {
   \                     attach_rtc: (+1)
   \   00000000   0xB5F4             PUSH     {R2,R4-R7,LR}
   \   00000002   0x0006             MOVS     R6,R0
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x001F             MOVS     R7,R3
     78              _mutex->lock();
   \   00000008   0x....             LDR      R5,??DataTable2
   \   0000000A   0x0028             MOVS     R0,R5
   \   0000000C   0x3010             ADDS     R0,R0,#+16
   \   0000000E   0x.... 0x....      BL       _ZN12SingletonPtrIN4rtos5MutexEEptEv
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000016   0x.... 0x....      BL       _ZN4rtos5Mutex4lockEj
     79              _rtc_read = read_rtc;
   \   0000001A   0x60AE             STR      R6,[R5, #+8]
     80              _rtc_write = write_rtc;
   \   0000001C   0x60EC             STR      R4,[R5, #+12]
     81              _rtc_init = init_rtc;
   \   0000001E   0x9800             LDR      R0,[SP, #+0]
   \   00000020   0x6028             STR      R0,[R5, #+0]
     82              _rtc_isenabled = isenabled_rtc;
   \   00000022   0x606F             STR      R7,[R5, #+4]
     83              _mutex->unlock();
   \   00000024   0x0028             MOVS     R0,R5
   \   00000026   0x3010             ADDS     R0,R0,#+16
   \   00000028   0x.... 0x....      BL       _ZN12SingletonPtrIN4rtos5MutexEEptEv
   \   0000002C   0x.... 0x....      BL       _ZN4rtos5Mutex6unlockEv
     84          }
   \   00000030   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     _rtc_init
     85          
     86          
     87          
     88          #ifdef __cplusplus
     89          }
     90          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   SingletonPtr<rtos::Mutex>::operator->()
        16   -> mbed_assert_internal
        16   -> osMutexAcquire
        16   -> osMutexRelease
        16   -> rtos::Mutex::Mutex()
      24   attach_rtc
        24   -> SingletonPtr<rtos::Mutex>::operator->()
        24   -> rtos::Mutex::lock(unsigned int)
        24   -> rtos::Mutex::unlock()
      16   set_time
        16   -- Indirect call
        16   -> SingletonPtr<rtos::Mutex>::operator->()
        16   -> rtos::Mutex::lock(unsigned int)
        16   -> rtos::Mutex::unlock()
      16   std::__time32
        16   -- Indirect call
        16   -> SingletonPtr<rtos::Mutex>::operator->()
        16   -> rtos::Mutex::lock(unsigned int)
        16   -> rtos::Mutex::unlock()
        16   -> set_time


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
      80  SingletonPtr<rtos::Mutex>::operator->()
      56  _rtc_init
          _rtc_isenabled
          _rtc_read
          _rtc_write
          _mutex
      50  attach_rtc
      54  set_time
      72  std::__time32
      56  -- Other

 
  56 bytes in section .bss
  56 bytes in section .rodata
 260 bytes in section .text
 
 180 bytes of CODE  memory (+ 80 bytes shared)
   0 bytes of CONST memory (+ 56 bytes shared)
  56 bytes of DATA  memory

Errors: none
Warnings: none
