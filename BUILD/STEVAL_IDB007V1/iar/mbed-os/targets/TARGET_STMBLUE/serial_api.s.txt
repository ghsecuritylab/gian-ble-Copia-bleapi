###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:34:00
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\mbed-os\targets\TARGET_STMBLUE\serial_api.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\targets\TARGET_STMBLUE\serial_api.d
#        -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\targets\TARGET_STMBLUE\serial_api.s.txt
#        -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\targets\TARGET_STMBLUE\serial_api.o
#        .\mbed-os\targets\TARGET_STMBLUE\serial_api.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\targets\TARGET_STMBLUE\serial_api.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\targets\TARGET_STMBLUE\serial_api.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\targets\TARGET_STMBLUE\serial_api.c
      1          #ifdef DEVICE_SERIAL
      2          
      3          #include "serial_api.h"

  typedef uint8_t BOOL;  //already defined in "hal_type.h"
                  ^
"C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\TARGET_STEVAL_IDB007V1\device\system_BlueNRG1.h",240  Warning[Pe301]: typedef name has already been declared (with same type)
      4          #include "cmsis.h"
      5          #include "serial_device.h"
      6          #include "pin_device.h"
      7          
      8          

   \                                 In section .bss, align 4
      9          int stdio_uart_inited = 0;
   \                     stdio_uart_inited:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     10          serial_t stdio_uart;
   \                     stdio_uart:
   \   00000000                      DS8 16
     11          static uart_irq_handler irq_handler;
     12          
     13          

   \                                 In section .text, align 2, keep-with-next
     14          void serial_init(serial_t *obj, PinName tx, PinName rx){
   \                     serial_init: (+1)
   \   00000000   0xB5F4             PUSH     {R2,R4-R7,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0007             MOVS     R7,R0
   \   00000006   0x000C             MOVS     R4,R1
     15          
     16          	UART_InitType UART_InitStructure;
     17          
     18          
     19          	/* GPIO Periph clock enable */
     20          	SysCtrl_PeripheralClockCmd(CLOCK_PERIPH_UART | CLOCK_PERIPH_GPIO, ENABLE);
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x2009             MOVS     R0,#+9
   \   0000000C   0x.... 0x....      BL       SysCtrl_PeripheralClockCmd
     21          
     22          	GPIO_InitType GPIO_InitStructure;
     23          
     24          	/* Configure GPIO_Pin_8 and GPIO_Pin_11 as UART_TXD and UART_RXD*/
     25          	GPIO_InitStructure.GPIO_Pin = getGpioPin(tx);//getGpioPin(SERIAL_TX);   //SDK_EVAL_UART_TX_PIN;
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       getGpioPin
   \   00000016   0x9000             STR      R0,[SP, #+0]
     26          	GPIO_InitStructure.GPIO_Mode = Serial1_Mode;
   \   00000018   0x2401             MOVS     R4,#+1
   \   0000001A   0x466D             MOV      R5,SP
   \   0000001C   0x712C             STRB     R4,[R5, #+4]
     27          	GPIO_InitStructure.GPIO_Pull = DISABLE;
   \   0000001E   0x2600             MOVS     R6,#+0
   \   00000020   0x71AE             STRB     R6,[R5, #+6]
     28          	GPIO_InitStructure.GPIO_HighPwr = DISABLE;
   \   00000022   0x716E             STRB     R6,[R5, #+5]
     29          	GPIO_Init(&GPIO_InitStructure);
   \   00000024   0x4668             MOV      R0,SP
   \   00000026   0x.... 0x....      BL       GPIO_Init
     30          
     31          	GPIO_InitStructure.GPIO_Pin = getGpioPin(rx);//getGpioPin(SERIAL_RX);   //SDK_EVAL_UART_RX_PIN;
   \   0000002A   0x4669             MOV      R1,SP
   \   0000002C   0x2018             MOVS     R0,#+24
   \   0000002E   0x5608             LDRSB    R0,[R1, R0]
   \   00000030   0x.... 0x....      BL       getGpioPin
   \   00000034   0x9000             STR      R0,[SP, #+0]
     32          	GPIO_InitStructure.GPIO_Mode = Serial1_Mode;  //SDK_EVAL_UART_RX_MODE;
   \   00000036   0x712C             STRB     R4,[R5, #+4]
     33          	GPIO_Init(&GPIO_InitStructure);
   \   00000038   0x4668             MOV      R0,SP
   \   0000003A   0x.... 0x....      BL       GPIO_Init
     34          
     35          	/*
     36          	  ------------ USART configuration -------------------
     37          	  - BaudRate = 115200 baud
     38          	  - Word Length = 8 Bits
     39          	  - One Stop Bit
     40          	  - No parity
     41          	  - Hardware flow control disabled (RTS and CTS signals)
     42          	  - Receive and transmit enabled
     43          	 */
     44          	UART_InitStructure.UART_BaudRate = BAUDRATE;
   \   0000003E   0x20E1             MOVS     R0,#+225
   \   00000040   0x0240             LSLS     R0,R0,#+9        ;; #+115200
   \   00000042   0x9002             STR      R0,[SP, #+8]
     45          	UART_InitStructure.UART_WordLengthTransmit = UART_WordLength_8b;
   \   00000044   0x2003             MOVS     R0,#+3
   \   00000046   0xA902             ADD      R1,SP,#+8
   \   00000048   0x7108             STRB     R0,[R1, #+4]
     46          	UART_InitStructure.UART_WordLengthReceive = UART_WordLength_8b;
   \   0000004A   0x7148             STRB     R0,[R1, #+5]
     47          	UART_InitStructure.UART_StopBits = UART_StopBits_1;
   \   0000004C   0x80CE             STRH     R6,[R1, #+6]
     48          	UART_InitStructure.UART_Parity = UART_Parity_No;
     49          	UART_InitStructure.UART_HardwareFlowControl = UART_HardwareFlowControl_None;
   \   0000004E   0x724E             STRB     R6,[R1, #+9]
     50          	UART_InitStructure.UART_Mode = UART_Mode_Rx | UART_Mode_Tx;
   \   00000050   0x7208             STRB     R0,[R1, #+8]
     51          	UART_InitStructure.UART_FifoEnable = ENABLE;
   \   00000052   0x728C             STRB     R4,[R1, #+10]
     52          	UART_Init(&UART_InitStructure);
   \   00000054   0xA802             ADD      R0,SP,#+8
   \   00000056   0x.... 0x....      BL       UART_Init
     53          
     54          	obj->uart = UART_1;
   \   0000005A   0x....             LDR      R0,??DataTable2  ;; 0x40300000
   \   0000005C   0x6038             STR      R0,[R7, #+0]
     55          
     56          	obj->init = &UART_InitStructure;
   \   0000005E   0xA802             ADD      R0,SP,#+8
   \   00000060   0x60B8             STR      R0,[R7, #+8]
     57          
     58          	/* Interrupt as soon as data is received. */
     59          	UART_RxFifoIrqLevelConfig(FIFO_LEV_1_64);
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x.... 0x....      BL       UART_RxFifoIrqLevelConfig
     60          
     61          	/* Enable UART */
     62          	UART_Cmd(ENABLE);
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0x.... 0x....      BL       UART_Cmd
     63          
     64          	stdio_uart_inited = 1;
   \   0000006E   0x....             LDR      R0,??DataTable2_1
   \   00000070   0x6004             STR      R4,[R0, #+0]
     65          }
   \   00000072   0xB007             ADD      SP,SP,#+28
   \   00000074   0xBDF0             POP      {R4-R7,PC}       ;; return
     66          

   \                                 In section .text, align 2, keep-with-next
     67          void serial_putc(serial_t *obj, int c){
   \                     serial_putc: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
     68          	  /* Wait if TX fifo is full. */
     69          	  while (UART_GetFlagStatus(UART_FLAG_TXFF) == SET);
   \                     ??serial_putc_0: (+1)
   \   00000004   0x2020             MOVS     R0,#+32
   \   00000006   0x.... 0x....      BL       UART_GetFlagStatus
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD0FA             BEQ      ??serial_putc_0
     70          	  /* send the data */
     71          	  UART_SendData((uint16_t)c);
   \   0000000E   0xB2A0             UXTH     R0,R4
   \   00000010   0x.... 0x....      BL       UART_SendData
     72          }
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
     73          

   \                                 In section .text, align 2, keep-with-next
     74          int serial_getc(serial_t *obj){
   \                     serial_getc: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     75          	/* Loop until the UART Receive Data Register is not empty */
     76          	while (UART_GetFlagStatus(UART_FLAG_RXFE) == SET);
   \                     ??serial_getc_0: (+1)
   \   00000002   0x2010             MOVS     R0,#+16
   \   00000004   0x.... 0x....      BL       UART_GetFlagStatus
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD0FA             BEQ      ??serial_getc_0
     77          	/* Store the received byte in RxBuffer */
     78          	return (int) UART_ReceiveData();
   \   0000000C   0x.... 0x....      BL       UART_ReceiveData
   \   00000010   0xBD02             POP      {R1,PC}          ;; return
     79          }
     80          

   \                                 In section .text, align 2, keep-with-next
     81          void serial_baud(serial_t *obj, int baudrate){
     82          	obj->init->UART_BaudRate = baudrate;
   \                     serial_baud: (+1)
   \   00000000   0x6880             LDR      R0,[R0, #+8]
   \   00000002   0x6001             STR      R1,[R0, #+0]
     83          }
   \   00000004   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \                     irq_handler:
   \   00000000                      DS8 4
   \   00000004                      DS8 4
     84          
     85          /*void serial_irq_handler(serial_t *obj, uart_irq_handler handler, uint32_t id){
     86          }*/
     87          
     88          /*void serial_irq_set(serial_t *obj, SerialIrq irq, uint32_t enable){
     89          }*/
     90          static uint32_t serial_irq_ids = 0;
     91          

   \                                 In section .text, align 2, keep-with-next
     92          void serial_irq_handler(serial_t *obj, uart_irq_handler handler, uint32_t id){
     93              irq_handler = handler;
   \                     serial_irq_handler: (+1)
   \   00000000   0x....             LDR      R3,??DataTable2_2
   \   00000002   0x6019             STR      R1,[R3, #+0]
     94              serial_irq_ids = id;
   \   00000004   0x605A             STR      R2,[R3, #+4]
     95              obj->index_irq = id;
   \   00000006   0x6042             STR      R2,[R0, #+4]
     96          }
   \   00000008   0x4770             BX       LR               ;; return
     97          

   \                                 In section .text, align 2, keep-with-next
     98          void serial_irq_set(serial_t *obj, SerialIrq irq, uint32_t enable){
   \                     serial_irq_set: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x000D             MOVS     R5,R1
   \   00000004   0x0014             MOVS     R4,R2
     99          	/* NVIC configuration */
    100          	NVIC_InitType NVIC_InitStructure;
    101          	/* Enable the UART Interrupt */
    102          	NVIC_InitStructure.NVIC_IRQChannel = UART_IRQn;
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x2104             MOVS     R1,#+4
   \   0000000A   0x7001             STRB     R1,[R0, #+0]
    103          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = LOW_PRIORITY;
   \   0000000C   0x2103             MOVS     R1,#+3
   \   0000000E   0x7041             STRB     R1,[R0, #+1]
    104          	NVIC_InitStructure.NVIC_IRQChannelCmd = (FunctionalState)enable;
   \   00000010   0x7084             STRB     R4,[R0, #+2]
    105          	NVIC_Init(&NVIC_InitStructure);
   \   00000012   0x.... 0x....      BL       NVIC_Init
    106          	//UART_ITConfig(UART_IT_RX, enable);
    107          	if (irq == RxIrq)
   \   00000016   0x2D00             CMP      R5,#+0
   \   00000018   0xD102             BNE      ??serial_irq_set_0
    108          		UART_ITConfig(UART_IT_RX, (FunctionalState)enable);
   \   0000001A   0xB2E1             UXTB     R1,R4
   \   0000001C   0x2010             MOVS     R0,#+16
   \   0000001E   0xE002             B        ??serial_irq_set_1
    109          	else// TxIrq
    110          		UART_ITConfig(UART_IT_TXFE, (FunctionalState)enable);
   \                     ??serial_irq_set_0: (+1)
   \   00000020   0xB2E1             UXTB     R1,R4
   \   00000022   0x2080             MOVS     R0,#+128
   \   00000024   0x0140             LSLS     R0,R0,#+5        ;; #+4096
   \                     ??serial_irq_set_1: (+1)
   \   00000026   0x.... 0x....      BL       UART_ITConfig
    111          }
   \   0000002A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    112          

   \                                 In section .text, align 2, keep-with-next
    113          void UART_Handler(void){
   \                     UART_Handler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    114          	if (UART_GetITStatus(UART_IT_RX) != RESET){
   \   00000002   0x2010             MOVS     R0,#+16
   \   00000004   0x.... 0x....      BL       UART_GetITStatus
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD007             BEQ      ??UART_Handler_0
    115          		UART_ClearITPendingBit(UART_IT_RX);
   \   0000000C   0x2010             MOVS     R0,#+16
   \   0000000E   0x.... 0x....      BL       UART_ClearITPendingBit
    116          		irq_handler(serial_irq_ids, RxIrq);
   \   00000012   0x....             LDR      R2,??DataTable2_2
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x6850             LDR      R0,[R2, #+4]
   \   00000018   0x6812             LDR      R2,[R2, #+0]
   \   0000001A   0x4790             BLX      R2
    117          	}
    118              if (UART_GetITStatus(UART_IT_TXFE) != RESET){
   \                     ??UART_Handler_0: (+1)
   \   0000001C   0x2480             MOVS     R4,#+128
   \   0000001E   0x0164             LSLS     R4,R4,#+5        ;; #+4096
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       UART_GetITStatus
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD007             BEQ      ??UART_Handler_1
    119                  UART_ClearITPendingBit(UART_IT_TXFE);
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x.... 0x....      BL       UART_ClearITPendingBit
    120                  irq_handler(serial_irq_ids, TxIrq);
   \   00000030   0x....             LDR      R2,??DataTable2_2
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x6850             LDR      R0,[R2, #+4]
   \   00000036   0x6812             LDR      R2,[R2, #+0]
   \   00000038   0x4790             BLX      R2
    121              }
    122          }
   \                     ??UART_Handler_1: (+1)
   \   0000003A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x40300000         DC32     0x40300000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     stdio_uart_inited

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     irq_handler
    123          
    124          #endif //DEVICE_SERIAL

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   UART_Handler
         8   -- Indirect call
         8   -> UART_ClearITPendingBit
         8   -> UART_GetITStatus
       0   serial_baud
       8   serial_getc
         8   -> UART_GetFlagStatus
         8   -> UART_ReceiveData
      48   serial_init
        48   -> GPIO_Init
        48   -> SysCtrl_PeripheralClockCmd
        48   -> UART_Cmd
        48   -> UART_Init
        48   -> UART_RxFifoIrqLevelConfig
        48   -> getGpioPin
       0   serial_irq_handler
      16   serial_irq_set
        16   -> NVIC_Init
        16   -> UART_ITConfig
       8   serial_putc
         8   -> UART_GetFlagStatus
         8   -> UART_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
      60  UART_Handler
       8  irq_handler
          serial_irq_ids
       6  serial_baud
      18  serial_getc
     118  serial_init
      10  serial_irq_handler
      44  serial_irq_set
      22  serial_putc
      16  stdio_uart
       4  stdio_uart_inited

 
  28 bytes in section .bss
 290 bytes in section .text
 
 290 bytes of CODE memory
  28 bytes of DATA memory

Errors: none
Warnings: 1
