###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:58
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        .\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\device\BlueNRG1_pka.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\device\BlueNRG1_pka.d
#        -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\device\BlueNRG1_pka.s.txt
#        -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\device\BlueNRG1_pka.o
#        .\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\device\BlueNRG1_pka.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\device\BlueNRG1_pka.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\device\BlueNRG1_pka.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\device\BlueNRG1_pka.c
      1          /**
      2          ******************************************************************************
      3          * @file    BlueNRG1_pka.c
      4          * @author  VMA Application Team
      5          * @version V1.0.0
      6          * @date    27-February-2017
      7          * @brief   This file provides all the PKA firmware functions.
      8          ******************************************************************************
      9          * @attention
     10          *
     11          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13          * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14          * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15          * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16          * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17          *
     18          * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
     19          ******************************************************************************
     20          */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "BlueNRG1_pka.h"

  typedef uint8_t BOOL;  //already defined in "hal_type.h"
                  ^
"C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\TARGET_STEVAL_IDB007V1\device\system_BlueNRG1.h",240  Warning[Pe301]: typedef name has already been declared (with same type)
     24          
     25          /** @addtogroup BLUENRG1_Peripheral_Driver BLUENRG1 Peripheral Driver
     26          * @{
     27          */
     28          
     29          /** @defgroup PKA_Peripheral  PKA Peripheral
     30          * @{
     31          */ 
     32          
     33          /** @defgroup PKA_Private_TypesDefinitions Private Types Definitions
     34          * @{
     35          */
     36          
     37          /**
     38          * @}
     39          */ 
     40          
     41          /** @defgroup PKA_Private_Defines Private Defines
     42          * @{
     43          */ 
     44          
     45          /**
     46          * @}
     47          */ 
     48          
     49          /** @defgroup PKA_Private_Macros Private Macros
     50          * @{
     51          */
     52          
     53          
     54          /**
     55          * @}
     56          */ 
     57          
     58          /** @defgroup PKA_Private_Variables Private Variables
     59          * @{
     60          */
     61          
     62          /**
     63          * @}
     64          */ 
     65          
     66          /** @defgroup PKA_Private_Functions Private Functions 
     67          * @{
     68          */
     69          
     70          
     71          /**
     72          * @}
     73          */
     74          
     75          /** @defgroup PKA_Public_Functions Public Functions
     76          * @{
     77          */
     78          
     79          
     80          /**
     81          * @brief  PKA Software Reset.
     82          * @param  None
     83          * @retval None
     84          */

   \                                 In section .text, align 2, keep-with-next
     85          void PKA_Reset(void)
     86          {
     87            /* Set Bit SFT_RST of CSR */
     88            PKA->CSR_b.SFT_RST = SET;
   \                     PKA_Reset: (+1)
   \   00000000   0x20C0             MOVS     R0,#+192
   \   00000002   0x0600             LSLS     R0,R0,#+24       ;; #-1073741824
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x2280             MOVS     R2,#+128
   \   00000008   0x430A             ORRS     R2,R2,R1
   \   0000000A   0x6002             STR      R2,[R0, #+0]
     89            
     90            /* the Bit SFT_RST must be reset after set */
     91            PKA->CSR_b.SFT_RST = RESET;
   \   0000000C   0x6801             LDR      R1,[R0, #+0]
   \   0000000E   0x2280             MOVS     R2,#+128
   \   00000010   0x4391             BICS     R1,R1,R2
   \   00000012   0x6001             STR      R1,[R0, #+0]
     92          }
   \   00000014   0x4770             BX       LR               ;; return
     93          
     94          
     95          /**
     96          * @brief  PKA start processing command.
     97          * @param  None
     98          * @retval ErrorStatus
     99          * @note   Assumes that Input Data have been already loaded into PKA memory!
    100          */

   \                                 In section .text, align 2, keep-with-next
    101          void PKA_StartProcessing(void)
    102          { 
    103            /* Set Bit GO of CSR */
    104            PKA->CSR_b.GO = SET;
   \                     PKA_StartProcessing: (+1)
   \   00000000   0x20C0             MOVS     R0,#+192
   \   00000002   0x0600             LSLS     R0,R0,#+24       ;; #-1073741824
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0x430A             ORRS     R2,R2,R1
   \   0000000A   0x6002             STR      R2,[R0, #+0]
    105            
    106            /* the Bit GO must be reset before the end of calculation */
    107            PKA->CSR_b.GO = RESET;
   \   0000000C   0x6801             LDR      R1,[R0, #+0]
   \   0000000E   0x2201             MOVS     R2,#+1
   \   00000010   0x4391             BICS     R1,R1,R2
   \   00000012   0x6001             STR      R1,[R0, #+0]
    108            
    109          }
   \   00000014   0x4770             BX       LR               ;; return
    110          
    111          
    112          /**
    113          * @brief  Wait loop for READY status
    114          * @param  None
    115          * @retval None
    116          */

   \                                 In section .text, align 2, keep-with-next
    117          void PKA_WaitProcess(void)
    118          {
   \                     PKA_WaitProcess: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x21C0             MOVS     R1,#+192
   \   00000004   0x0609             LSLS     R1,R1,#+24       ;; #-1073741824
    119            /* Wait PKA processing end */
    120            while(PKA->CSR_b.READY != SET);
   \                     ??PKA_WaitProcess_0: (+1)
   \   00000006   0x680A             LDR      R2,[R1, #+0]
   \   00000008   0x0852             LSRS     R2,R2,#+1
   \   0000000A   0x4002             ANDS     R2,R2,R0
   \   0000000C   0xD0FB             BEQ      ??PKA_WaitProcess_0
    121          }
   \   0000000E   0x4770             BX       LR               ;; return
    122          
    123          
    124          /**
    125          * @brief  Return the READY status
    126          * @param  None
    127          * @retval FlagStatus RESET if PKA is busy
    128          */

   \                                 In section .text, align 2, keep-with-next
    129          FlagStatus PKA_GetProcessStatus(void)
    130          {
    131            /* Wait PKA processing end */
    132            return (FlagStatus)(PKA->CSR_b.READY);
   \                     PKA_GetProcessStatus: (+1)
   \   00000000   0x20C0             MOVS     R0,#+192
   \   00000002   0x0600             LSLS     R0,R0,#+24       ;; #-1073741824
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0781             LSLS     R1,R0,#+30
   \   00000008   0x0FC8             LSRS     R0,R1,#+31
   \   0000000A   0x4770             BX       LR               ;; return
    133          }
    134          
    135          
    136          /**
    137          * @brief  PKA verification of process command.
    138          * @param  None
    139          * @retval ErrorStatus
    140          */

   \                                 In section .text, align 2, keep-with-next
    141          ErrorStatus PKA_VerifyProcess(void)
    142          {   
    143            uint32_t errorCode;
    144            
    145            errorCode = *(uint32_t *)(PKA_RAM_ECC_ADDR_KP_ERROR);
    146            
    147            if (errorCode == 0) {
   \                     PKA_VerifyProcess: (+1)
   \   00000000   0x....             LDR      R0,??DataTable4  ;; 0xc0000400
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x....             B.N      ?Subroutine0
    148              return SUCCESS;
    149            }
    150            else {
    151              return ERROR;
    152            }
    153          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x1E40             SUBS     R0,R0,#+1
   \   00000002   0x4180             SBCS     R0,R0,R0
   \   00000004   0x43C0             MVNS     R0,R0
   \   00000006   0x0FC0             LSRS     R0,R0,#+31
   \   00000008   0x4770             BX       LR               ;; return
    154          
    155          
    156          /**
    157          * @brief  Enables or disables the specified PKA interrupts.
    158          * @param  PkaFlag: the PKA flag to clear, this can be
    159          *         @arg PKA_PROCEND PKA process end
    160          *         @arg PKA_RAMERR PKA RAM error
    161          *         @arg PKA_ADDERR PKA address invalid
    162          * @param  NewState: functional state @ref FunctionalState
    163          *   This parameter can be: ENABLE or DISABLE.
    164          * @retval None 
    165          */

   \                                 In section .text, align 2, keep-with-next
    166          void PKA_ITConfig(uint8_t PkaFlag, FunctionalState NewState)
    167          {
    168            /* Check the parameters */
    169            assert_param(IS_PKA_FLAG(PkaFlag)); 
    170            assert_param(IS_FUNCTIONAL_STATE(NewState));
    171            
    172            if (NewState == ENABLE) {
   \                     PKA_ITConfig: (+1)
   \   00000000   0x2901             CMP      R1,#+1
   \   00000002   0xD104             BNE      ??PKA_ITConfig_0
    173              SET_BIT(PKA->IEN, PkaFlag);
   \   00000004   0x....             LDR      R1,??DataTable4_1  ;; 0xc0000008
   \   00000006   0x680A             LDR      R2,[R1, #+0]
   \   00000008   0x4310             ORRS     R0,R0,R2
   \   0000000A   0x6008             STR      R0,[R1, #+0]
   \   0000000C   0x4770             BX       LR
    174            }
    175            else if (NewState == DISABLE) {
   \                     ??PKA_ITConfig_0: (+1)
   \   0000000E   0x2900             CMP      R1,#+0
   \   00000010   0xD103             BNE      ??PKA_ITConfig_1
    176              CLEAR_BIT(PKA->IEN, PkaFlag);
   \   00000012   0x....             LDR      R1,??DataTable4_1  ;; 0xc0000008
   \   00000014   0x680A             LDR      R2,[R1, #+0]
   \   00000016   0x4382             BICS     R2,R2,R0
   \   00000018   0x600A             STR      R2,[R1, #+0]
    177            }
    178          }
   \                     ??PKA_ITConfig_1: (+1)
   \   0000001A   0x4770             BX       LR               ;; return
    179          
    180          
    181          /**
    182          * @brief  Clears the specific PKA pending IT bit.
    183          * @param  PkaFlag: the PKA flag to clear, this can be
    184          *         @arg PKA_PROCEND PKA process end
    185          *         @arg PKA_RAMERR PKA RAM error
    186          *         @arg PKA_ADDERR PKA address invalid
    187          * @retval None
    188          */

   \                                 In section .text, align 2, keep-with-next
    189          void PKA_ClearITPendingBit(uint8_t PkaFlag)
    190          {
    191            assert_param(IS_PKA_FLAG(PkaFlag)) ;
    192            
    193            /* Clear the flags */
    194            PKA->ISR = PkaFlag;
   \                     PKA_ClearITPendingBit: (+1)
   \   00000000   0x....             LDR      R1,??DataTable4_2  ;; 0xc0000004
   \   00000002   0x6008             STR      R0,[R1, #+0]
    195          }
   \   00000004   0x4770             BX       LR               ;; return
    196          
    197          
    198          /**
    199          * @brief  Checks whether the specified PKA flag is set or not.
    200          * @param  PkaFlag: the PKA flag to clear, this can be
    201          *         @arg PKA_PROCEND PKA process end
    202          *         @arg PKA_RAMERR PKA RAM error
    203          *         @arg PKA_ADDERR PKA address invalid
    204          * @retval FlagStatus: functional state @ref FlagStatus
    205          *         This parameter can be: SET or RESET.
    206          */

   \                                 In section .text, align 2, keep-with-next
    207          FlagStatus PKA_GetFlagStatus(uint8_t PkaFlag)
    208          {
    209            /* Check the parameters */
    210            assert_param(IS_PKA_FLAG(PkaFlag));
    211            
    212            if((PKA->ISR & PkaFlag) != (uint16_t)RESET) {
   \                     PKA_GetFlagStatus: (+1)
   \   00000000   0x....             LDR      R1,??DataTable4_2  ;; 0xc0000004
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x4008             ANDS     R0,R0,R1
   \   00000006                      REQUIRE ?Subroutine0
   \   00000006                      ;; // Fall through to label ?Subroutine0
    213              return SET;
    214            }
    215            else {
    216              return RESET;
    217            }
    218          }
    219          
    220          
    221          
    222          /**
    223          * @brief  Write the PKA RAM with the input data.
    224          * @param  dataType: select the region of PKA RAM to write:
    225          *         @arg PKA_DATA_SK is the K value
    226          *         @arg PKA_DATA_PCX is the point X coordinate
    227          *         @arg PKA_DATA_PCY is the point Y coordinate
    228          * @retval ErrorStatus
    229          */

   \                                 In section .text, align 2, keep-with-next
    230          ErrorStatus PKA_SetData(uint8_t dataType, uint32_t* srcData)
    231          {
   \                     PKA_SetData: (+1)
   \   00000000   0x000A             MOVS     R2,R1
    232            uint32_t StartAddress;
    233            uint8_t idx;
    234            
    235            /* Check the parameters */
    236            assert_param(IS_PKA_CMD(dataType));
    237            
    238            if (dataType == PKA_DATA_SK)
   \   00000002   0x2801             CMP      R0,#+1
   \   00000004   0xD121             BNE      ??PKA_SetData_0
    239              StartAddress = PKA_RAM_ECC_ADDR_K;
   \   00000006   0x....             LDR      R1,??DataTable4_3  ;; 0xc000046c
    240            else if (dataType == PKA_DATA_PCX)
    241              StartAddress = PKA_RAM_ECC_ADDR_PX;
    242            else if (dataType == PKA_DATA_PCY)
    243              StartAddress = PKA_RAM_ECC_ADDR_PY;
    244            else return ERROR;
    245            
    246            /* Write the source data to target PKA RAM address. */
    247            for (idx = 0; idx<8; idx++)
    248            {
    249              *(uint32_t *)(StartAddress + 4*idx) = srcData[idx];
   \                     ??PKA_SetData_1: (+1)
   \   00000008   0x6810             LDR      R0,[R2, #+0]
   \   0000000A   0x6008             STR      R0,[R1, #+0]
   \   0000000C   0x6853             LDR      R3,[R2, #+4]
   \   0000000E   0x1D08             ADDS     R0,R1,#+4
   \   00000010   0x6003             STR      R3,[R0, #+0]
   \   00000012   0x6893             LDR      R3,[R2, #+8]
   \   00000014   0x0008             MOVS     R0,R1
   \   00000016   0x3008             ADDS     R0,R0,#+8
   \   00000018   0x6003             STR      R3,[R0, #+0]
   \   0000001A   0x68D3             LDR      R3,[R2, #+12]
   \   0000001C   0x0008             MOVS     R0,R1
   \   0000001E   0x300C             ADDS     R0,R0,#+12
   \   00000020   0x6003             STR      R3,[R0, #+0]
   \   00000022   0x6913             LDR      R3,[R2, #+16]
   \   00000024   0x0008             MOVS     R0,R1
   \   00000026   0x3010             ADDS     R0,R0,#+16
   \   00000028   0x6003             STR      R3,[R0, #+0]
   \   0000002A   0x6953             LDR      R3,[R2, #+20]
   \   0000002C   0x0008             MOVS     R0,R1
   \   0000002E   0x3014             ADDS     R0,R0,#+20
   \   00000030   0x6003             STR      R3,[R0, #+0]
   \   00000032   0x6993             LDR      R3,[R2, #+24]
   \   00000034   0x0008             MOVS     R0,R1
   \   00000036   0x3018             ADDS     R0,R0,#+24
   \   00000038   0x6003             STR      R3,[R0, #+0]
   \   0000003A   0x69D2             LDR      R2,[R2, #+28]
   \   0000003C   0x0008             MOVS     R0,R1
   \   0000003E   0x301C             ADDS     R0,R0,#+28
   \   00000040   0x6002             STR      R2,[R0, #+0]
    250            }
    251            
    252            /* A 9th word of zeros must be added */
    253            *(uint32_t *)(StartAddress + 32UL) = 0x00000000;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x3120             ADDS     R1,R1,#+32
   \   00000046   0x6008             STR      R0,[R1, #+0]
    254            
    255            return SUCCESS;
   \   00000048   0x4770             BX       LR               ;; return
   \                     ??PKA_SetData_0: (+1)
   \   0000004A   0x2802             CMP      R0,#+2
   \   0000004C   0xD101             BNE      ??PKA_SetData_2
   \   0000004E   0x....             LDR      R1,??DataTable4_4  ;; 0xc0000490
   \   00000050   0xE7DA             B        ??PKA_SetData_1
   \                     ??PKA_SetData_2: (+1)
   \   00000052   0x2803             CMP      R0,#+3
   \   00000054   0xD101             BNE      ??PKA_SetData_3
   \   00000056   0x....             LDR      R1,??DataTable4_5  ;; 0xc00004b4
   \   00000058   0xE7D6             B        ??PKA_SetData_1
   \                     ??PKA_SetData_3: (+1)
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x4770             BX       LR
    256          }
    257          
    258          
    259          /**
    260          * @brief  Get from the PKA RAM the output data.
    261          * @param  dataType: select the region of PKA RAM to read:
    262          *         @arg PKA_DATA_SK is the K value
    263          *         @arg PKA_DATA_PCX is the point X coordinate
    264          *         @arg PKA_DATA_PCY is the point Y coordinate
    265          * @retval ErrorStatus
    266          */

   \                                 In section .text, align 2, keep-with-next
    267          ErrorStatus PKA_GetData(uint8_t dataType, uint8_t* dataTarget)
    268          {
    269            uint32_t StartAddress;
    270            
    271            /* Check the parameters */
    272            assert_param(IS_PKA_CMD(dataType));
    273            
    274            if (dataType == PKA_DATA_SK)
   \                     PKA_GetData: (+1)
   \   00000000   0x2801             CMP      R0,#+1
   \   00000002   0xD10F             BNE      ??PKA_GetData_0
    275              StartAddress = PKA_RAM_ECC_ADDR_K;
   \   00000004   0x....             LDR      R0,??DataTable4_3  ;; 0xc000046c
    276            else if (dataType == PKA_DATA_PCX)
    277              StartAddress = PKA_RAM_ECC_ADDR_PX;
    278            else if (dataType == PKA_DATA_PCY)
    279              StartAddress = PKA_RAM_ECC_ADDR_PY;
    280            else return ERROR;
    281            
    282            /* Read the data to target PKA RAM address. */
    283            for(uint8_t i=0;i<32;i++) {
   \                     ??PKA_GetData_1: (+1)
   \   00000006   0x2208             MOVS     R2,#+8
    284              dataTarget[i] = ((uint8_t *)StartAddress)[i];
   \                     ??PKA_GetData_2: (+1)
   \   00000008   0x7803             LDRB     R3,[R0, #+0]
   \   0000000A   0x700B             STRB     R3,[R1, #+0]
   \   0000000C   0x7843             LDRB     R3,[R0, #+1]
   \   0000000E   0x704B             STRB     R3,[R1, #+1]
   \   00000010   0x7883             LDRB     R3,[R0, #+2]
   \   00000012   0x708B             STRB     R3,[R1, #+2]
   \   00000014   0x78C3             LDRB     R3,[R0, #+3]
   \   00000016   0x70CB             STRB     R3,[R1, #+3]
    285            }
   \   00000018   0x1D00             ADDS     R0,R0,#+4
   \   0000001A   0x1D09             ADDS     R1,R1,#+4
   \   0000001C   0x1E52             SUBS     R2,R2,#+1
   \   0000001E   0xD1F3             BNE      ??PKA_GetData_2
    286            
    287            return SUCCESS;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x4770             BX       LR               ;; return
   \                     ??PKA_GetData_0: (+1)
   \   00000024   0x2802             CMP      R0,#+2
   \   00000026   0xD102             BNE      ??PKA_GetData_3
   \   00000028   0x....             LDR      R0,??DataTable4_3  ;; 0xc000046c
   \   0000002A   0x3024             ADDS     R0,R0,#+36
   \   0000002C   0xE7EB             B        ??PKA_GetData_1
   \                     ??PKA_GetData_3: (+1)
   \   0000002E   0x2803             CMP      R0,#+3
   \   00000030   0xD102             BNE      ??PKA_GetData_4
   \   00000032   0x....             LDR      R0,??DataTable4_3  ;; 0xc000046c
   \   00000034   0x3048             ADDS     R0,R0,#+72
   \   00000036   0xE7E6             B        ??PKA_GetData_1
   \                     ??PKA_GetData_4: (+1)
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x4770             BX       LR
    288          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0xC0000400         DC32     0xc0000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0xC0000008         DC32     0xc0000008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0xC0000004         DC32     0xc0000004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0xC000046C         DC32     0xc000046c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0xC0000490         DC32     0xc0000490

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0xC00004B4         DC32     0xc00004b4
    289          
    290          
    291          
    292          
    293          /**
    294          * @}
    295          */
    296          
    297          /**
    298          * @}
    299          */
    300          
    301          /**
    302          * @}
    303          */
    304          
    305          /******************* (C) COPYRIGHT 2016 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   PKA_ClearITPendingBit
       0   PKA_GetData
       0   PKA_GetFlagStatus
       0   PKA_GetProcessStatus
       0   PKA_ITConfig
       0   PKA_Reset
       0   PKA_SetData
       0   PKA_StartProcessing
       0   PKA_VerifyProcess
       0   PKA_WaitProcess


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
      10  ?Subroutine0
       6  PKA_ClearITPendingBit
      60  PKA_GetData
       6  PKA_GetFlagStatus
      12  PKA_GetProcessStatus
      28  PKA_ITConfig
      22  PKA_Reset
      94  PKA_SetData
      22  PKA_StartProcessing
       6  PKA_VerifyProcess
      16  PKA_WaitProcess

 
 306 bytes in section .text
 
 306 bytes of CODE memory

Errors: none
Warnings: 1
