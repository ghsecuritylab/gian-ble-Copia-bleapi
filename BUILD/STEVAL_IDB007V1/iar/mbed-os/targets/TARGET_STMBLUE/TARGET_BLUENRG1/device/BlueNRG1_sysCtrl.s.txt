###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:59
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        .\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\device\BlueNRG1_sysCtrl.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\device\BlueNRG1_sysCtrl.d
#        -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\device\BlueNRG1_sysCtrl.s.txt
#        -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\device\BlueNRG1_sysCtrl.o
#        .\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\device\BlueNRG1_sysCtrl.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\device\BlueNRG1_sysCtrl.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\device\BlueNRG1_sysCtrl.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\device\BlueNRG1_sysCtrl.c
      1          /**
      2            ******************************************************************************
      3            * @file    BlueNRG1_sysCtrl.c
      4            * @author  VMA Application Team
      5            * @version V2.0.0
      6            * @date    21-March-2016
      7            * @brief   This file provides all the System Controller firmware functions.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "BlueNRG1_sysCtrl.h"

  typedef uint8_t BOOL;  //already defined in "hal_type.h"
                  ^
"C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\TARGET_STEVAL_IDB007V1\device\system_BlueNRG1.h",240  Warning[Pe301]: typedef name has already been declared (with same type)
     24          
     25          /** @addtogroup BLUENRG1_Peripheral_Driver BLUENRG1 Peripheral Driver
     26            * @{
     27            */
     28          
     29          /** @defgroup SysCtrl System Controller Driver
     30            * @{
     31            */ 
     32          
     33          /** @defgroup SysCtrl_Private_TypesDefinitions Private Types Definitions
     34            * @{
     35            */
     36          
     37          /**
     38            * @}
     39            */ 
     40          
     41          /** @defgroup SysCtrl_Private_Defines Private Defines
     42            * @{
     43            */ 
     44          
     45          
     46          #define SOC_REASON_SYSREQ        (0x00000002)
     47          #define SOC_REASON_WDG           (0x00000004)
     48          #define SOC_REASON_LOCKUP        (0x00000008)
     49          
     50          #define BLE_REASON_WAKEUP_RST    (0x00000001)
     51          #define BLE_REASON_BOR_RST       (0x00000002 | BLE_REASON_WAKEUP_RST)
     52          #define BLE_REASON_POR_RST       (0x00000004 | BLE_REASON_WAKEUP_RST)
     53          #define BLE_REASON_FROM_IO9      (0x00000008 | BLE_REASON_WAKEUP_RST)
     54          #define BLE_REASON_FROM_IO10     (0x00000010 | BLE_REASON_WAKEUP_RST)
     55          #define BLE_REASON_FROM_IO11     (0x00000020 | BLE_REASON_WAKEUP_RST)
     56          #define BLE_REASON_FROM_IO12     (0x00000040 | BLE_REASON_WAKEUP_RST)
     57          #define BLE_REASON_FROM_IO13     (0x00000080 | BLE_REASON_WAKEUP_RST)
     58          #define BLE_REASON_FROM_TIMER1   (0x00000100 | BLE_REASON_WAKEUP_RST)
     59          #define BLE_REASON_FROM_TIMER2   (0x00000400 | BLE_REASON_WAKEUP_RST)
     60          
     61          
     62          /**
     63            * @}
     64            */ 
     65          
     66          /** @defgroup SysCtrl_Private_Macros Private Macros
     67            * @{
     68            */
     69          
     70          /**
     71            * @}
     72            */ 
     73          
     74          /** @defgroup SysCtrl_Private_Variables Private Variables
     75            * @{
     76            */
     77          
     78          /**
     79            * @}
     80            */ 
     81          
     82          /** @defgroup SysCtrl_Private_FunctionPrototypes Private Function Prototypes
     83            * @{
     84            */
     85            
     86          /**
     87            * @}
     88            */
     89            
     90          /** @defgroup SysCtrl_Public_Functions Public Functions
     91            * @{
     92            */
     93          
     94          
     95          /**
     96            * @brief  De init function
     97            * @param  None
     98            * @retval None
     99            */

   \                                 In section .text, align 2, keep-with-next
    100          void SysCtrl_DeInit(void)
    101          {
    102            SYSTEM_CTRL->WKP_IO_IS  = 0x00;
   \                     SysCtrl_DeInit: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR      R1,??DataTable4  ;; 0x40200000
   \   00000004   0x7008             STRB     R0,[R1, #+0]
    103            SYSTEM_CTRL->WKP_IO_IE  = 0x03;
   \   00000006   0x2203             MOVS     R2,#+3
   \   00000008   0x710A             STRB     R2,[R1, #+4]
    104            CKGEN_SOC->CONTROL      = 0x01FA03F0;
   \   0000000A   0x....             LDR      R1,??DataTable4_1  ;; 0x40900000
   \   0000000C   0x....             LDR      R2,??DataTable4_2  ;; 0x1fa03f0
   \   0000000E   0x600A             STR      R2,[R1, #+0]
    105            CKGEN_SOC->CLOCK_EN     = 0x0003FFFF;
   \   00000010   0x....             LDR      R2,??DataTable4_3  ;; 0x3ffff
   \   00000012   0x620A             STR      R2,[R1, #+32]
    106            CKGEN_BLE->CLK32K_COUNT = 0x0000000F;
   \   00000014   0x....             LDR      R1,??DataTable4_4  ;; 0x4810000c
   \   00000016   0x220F             MOVS     R2,#+15
   \   00000018   0x800A             STRH     R2,[R1, #+0]
    107            CKGEN_BLE->CLK32K_IT    = 0x00000000;
   \   0000001A   0x8188             STRH     R0,[R1, #+12]
    108          }
   \   0000001C   0x4770             BX       LR               ;; return
    109          
    110          
    111          /**
    112            * @brief  Enables the clock for the specified peripheral.
    113            * @param  PeriphClock: Peripheral to be enabled, this value can be
    114            *         @arg CLOCK_PERIPH_GPIO Clock of GPIO peripheral
    115            *         @arg CLOCK_PERIPH_NVM Clock of NVM peripheral
    116            *         @arg CLOCK_PERIPH_SYS_CONTROL Clock of SYSTEM CONTROL peripheral
    117            *         @arg CLOCK_PERIPH_UART Clock of UART peripheral
    118            *         @arg CLOCK_PERIPH_SPI Clock of SPI peripheral
    119            *         @arg CLOCK_PERIPH_WDG Clock of WATCHDOG peripheral
    120            *         @arg CLOCK_PERIPH_ADC Clock of ADC peripheral
    121            *         @arg CLOCK_PERIPH_I2C1 Clock of I2C1 peripheral
    122            *         @arg CLOCK_PERIPH_I2C2 Clock of I2C2 peripheral
    123            *         @arg CLOCK_PERIPH_MTFX1 Clock of MFTX1 peripheral
    124            *         @arg CLOCK_PERIPH_MTFX2 Clock of MFTX2 peripheral
    125            *         @arg CLOCK_PERIPH_RTC Clock of RTC peripheral
    126            *         @arg CLOCK_PERIPH_DMA Clock of DMA peripheral
    127            *         @arg CLOCK_PERIPH_RNG Clock of RNG peripheral
    128            *         @arg CLOCK_PERIPH_PKA Clock of PKA peripheral
    129            * @param NewState: New state of the peripheral clock.
    130            *   This parameter can be: ENABLE or DISABLE.
    131            * @retval None
    132            */

   \                                 In section .text, align 2, keep-with-next
    133          void SysCtrl_PeripheralClockCmd(uint32_t PeriphClock, FunctionalState NewState)
    134          {
    135            /* Check the parameters */
    136            assert_param(IS_CLOCK_PERIPH(PeriphClock));
    137            assert_param(IS_FUNCTIONAL_STATE(NewState));
    138            
    139            if (NewState == ENABLE) {
   \                     SysCtrl_PeripheralClockCmd: (+1)
   \   00000000   0x....             LDR      R2,??DataTable4_5  ;; 0x40900020
   \   00000002   0x2901             CMP      R1,#+1
   \   00000004   0x6811             LDR      R1,[R2, #+0]
   \   00000006   0xD102             BNE      ??SysCtrl_PeripheralClockCmd_0
    140              SET_BIT(CKGEN_SOC->CLOCK_EN, PeriphClock);
   \   00000008   0x4308             ORRS     R0,R0,R1
   \   0000000A   0x6010             STR      R0,[R2, #+0]
   \   0000000C   0x4770             BX       LR
    141            }
    142            else {
    143              CLEAR_BIT(CKGEN_SOC->CLOCK_EN, PeriphClock);
   \                     ??SysCtrl_PeripheralClockCmd_0: (+1)
   \   0000000E   0x4381             BICS     R1,R1,R0
   \   00000010   0x6011             STR      R1,[R2, #+0]
    144            }
    145          }
   \   00000012   0x4770             BX       LR               ;; return
    146          
    147          /**
    148            * @brief  Get the wakeup reason.
    149            * @param  None
    150            * @retval RESET_REASON_Type: wakeup reason @ref RESET_REASON_Type
    151            */

   \                                 In section .text, align 2, keep-with-next
    152          RESET_REASON_Type SysCtrl_GetWakeupResetReason(void)
    153          {
    154            uint32_t tmpSoc, tmpBle;
    155            
    156            tmpSoc = CKGEN_SOC->REASON_RST;
   \                     SysCtrl_GetWakeupResetReason: (+1)
   \   00000000   0x....             LDR      R0,??DataTable4_6  ;; 0x40900008
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
    157            tmpBle = CKGEN_BLE->REASON_RST;
   \   00000004   0x....             LDR      R1,??DataTable4_7  ;; 0x48100008
   \   00000006   0x8809             LDRH     R1,[R1, #+0]
    158          
    159            if ((tmpSoc == 0) &&
    160                (tmpBle >= BLE_REASON_FROM_IO9) && 
    161                (tmpBle <= BLE_REASON_FROM_IO13)) {
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD121             BNE      ??SysCtrl_GetWakeupResetReason_0
   \   0000000C   0x000A             MOVS     R2,R1
   \   0000000E   0x3A09             SUBS     R2,R2,#+9
   \   00000010   0x2A79             CMP      R2,#+121
   \   00000012   0xD221             BCS      ??SysCtrl_GetWakeupResetReason_1
    162              if ((tmpBle & BLE_REASON_FROM_IO9) == BLE_REASON_FROM_IO9) {
   \   00000014   0x2209             MOVS     R2,#+9
   \   00000016   0x400A             ANDS     R2,R2,R1
   \   00000018   0x2A09             CMP      R2,#+9
   \   0000001A   0xD101             BNE      ??SysCtrl_GetWakeupResetReason_2
    163                return RESET_BLE_WAKEUP_FROM_IO9;
   \   0000001C   0x2006             MOVS     R0,#+6
   \   0000001E   0x4770             BX       LR
    164              }
    165              if ((tmpBle & BLE_REASON_FROM_IO10) == BLE_REASON_FROM_IO10) {
   \                     ??SysCtrl_GetWakeupResetReason_2: (+1)
   \   00000020   0x2211             MOVS     R2,#+17
   \   00000022   0x400A             ANDS     R2,R2,R1
   \   00000024   0x2A11             CMP      R2,#+17
   \   00000026   0xD101             BNE      ??SysCtrl_GetWakeupResetReason_3
    166                return RESET_BLE_WAKEUP_FROM_IO10;
   \   00000028   0x2007             MOVS     R0,#+7
   \   0000002A   0x4770             BX       LR
    167              }
    168              if ((tmpBle & BLE_REASON_FROM_IO11) == BLE_REASON_FROM_IO11) {
   \                     ??SysCtrl_GetWakeupResetReason_3: (+1)
   \   0000002C   0x2221             MOVS     R2,#+33
   \   0000002E   0x400A             ANDS     R2,R2,R1
   \   00000030   0x2A21             CMP      R2,#+33
   \   00000032   0xD101             BNE      ??SysCtrl_GetWakeupResetReason_4
    169                return RESET_BLE_WAKEUP_FROM_IO11;
   \   00000034   0x2008             MOVS     R0,#+8
   \   00000036   0x4770             BX       LR
    170              }
    171              if ((tmpBle & BLE_REASON_FROM_IO12) == BLE_REASON_FROM_IO12) {
   \                     ??SysCtrl_GetWakeupResetReason_4: (+1)
   \   00000038   0x2241             MOVS     R2,#+65
   \   0000003A   0x400A             ANDS     R2,R2,R1
   \   0000003C   0x2A41             CMP      R2,#+65
   \   0000003E   0xD101             BNE      ??SysCtrl_GetWakeupResetReason_5
    172                return RESET_BLE_WAKEUP_FROM_IO12;
   \   00000040   0x2009             MOVS     R0,#+9
   \   00000042   0x4770             BX       LR
    173              }
    174              if ((tmpBle & BLE_REASON_FROM_IO13) == BLE_REASON_FROM_IO13) {
   \                     ??SysCtrl_GetWakeupResetReason_5: (+1)
   \   00000044   0x2281             MOVS     R2,#+129
   \   00000046   0x400A             ANDS     R2,R2,R1
   \   00000048   0x2A81             CMP      R2,#+129
   \   0000004A   0xD105             BNE      ??SysCtrl_GetWakeupResetReason_1
    175                return RESET_BLE_WAKEUP_FROM_IO13;
   \   0000004C   0x200A             MOVS     R0,#+10
   \   0000004E   0x4770             BX       LR
    176              }
    177            }
    178          
    179            if ((tmpSoc == 0) &&
    180                ((tmpBle & BLE_REASON_FROM_TIMER1) == BLE_REASON_FROM_TIMER1)) {
    181              return RESET_BLE_WAKEUP_FROM_TIMER1;
    182            }
    183            if ((tmpSoc == 0) &&
    184                ((tmpBle & BLE_REASON_FROM_TIMER2) == BLE_REASON_FROM_TIMER2)) {
    185              return RESET_BLE_WAKEUP_FROM_TIMER2;
    186            }
    187            if ((tmpSoc == 0) &&
    188                ((tmpBle & BLE_REASON_POR_RST) == BLE_REASON_POR_RST)) {
    189              return RESET_BLE_POR;
    190            }
    191            if ((tmpSoc == 0) &&
    192                ((tmpBle & BLE_REASON_BOR_RST) == BLE_REASON_BOR_RST)) {
    193              return RESET_BLE_BOR;
    194            }
    195            if (tmpSoc == SOC_REASON_SYSREQ) {
   \                     ??SysCtrl_GetWakeupResetReason_0: (+1)
   \   00000050   0x2802             CMP      R0,#+2
   \   00000052   0xD11C             BNE      ??SysCtrl_GetWakeupResetReason_6
    196              return RESET_SYSREQ;
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0x4770             BX       LR
    197            }
   \                     ??SysCtrl_GetWakeupResetReason_1: (+1)
   \   00000058   0x22FF             MOVS     R2,#+255
   \   0000005A   0x1C92             ADDS     R2,R2,#+2        ;; #+257
   \   0000005C   0x0013             MOVS     R3,R2
   \   0000005E   0x400B             ANDS     R3,R3,R1
   \   00000060   0x4293             CMP      R3,R2
   \   00000062   0xD101             BNE      ??SysCtrl_GetWakeupResetReason_7
   \   00000064   0x200B             MOVS     R0,#+11
   \   00000066   0x4770             BX       LR
   \                     ??SysCtrl_GetWakeupResetReason_7: (+1)
   \   00000068   0x....             LDR      R2,??DataTable4_8  ;; 0x401
   \   0000006A   0x0013             MOVS     R3,R2
   \   0000006C   0x400B             ANDS     R3,R3,R1
   \   0000006E   0x4293             CMP      R3,R2
   \   00000070   0xD101             BNE      ??SysCtrl_GetWakeupResetReason_8
   \   00000072   0x200C             MOVS     R0,#+12
   \   00000074   0x4770             BX       LR
   \                     ??SysCtrl_GetWakeupResetReason_8: (+1)
   \   00000076   0x2205             MOVS     R2,#+5
   \   00000078   0x400A             ANDS     R2,R2,R1
   \   0000007A   0x2A05             CMP      R2,#+5
   \   0000007C   0xD101             BNE      ??SysCtrl_GetWakeupResetReason_9
   \   0000007E   0x2005             MOVS     R0,#+5
   \   00000080   0x4770             BX       LR
   \                     ??SysCtrl_GetWakeupResetReason_9: (+1)
   \   00000082   0x0789             LSLS     R1,R1,#+30
   \   00000084   0x0F89             LSRS     R1,R1,#+30
   \   00000086   0x2903             CMP      R1,#+3
   \   00000088   0xD101             BNE      ??SysCtrl_GetWakeupResetReason_6
   \   0000008A   0x2004             MOVS     R0,#+4
   \   0000008C   0x4770             BX       LR
    198            if (tmpSoc == SOC_REASON_WDG) {
   \                     ??SysCtrl_GetWakeupResetReason_6: (+1)
   \   0000008E   0x2804             CMP      R0,#+4
   \   00000090   0xD101             BNE      ??SysCtrl_GetWakeupResetReason_10
    199              return RESET_WDG;
   \   00000092   0x2002             MOVS     R0,#+2
   \   00000094   0x4770             BX       LR
    200            }
    201            if((tmpSoc == SOC_REASON_LOCKUP)) {
   \                     ??SysCtrl_GetWakeupResetReason_10: (+1)
   \   00000096   0x2808             CMP      R0,#+8
   \   00000098   0xD101             BNE      ??SysCtrl_GetWakeupResetReason_11
    202              return RESET_LOCKUP;
   \   0000009A   0x2003             MOVS     R0,#+3
   \   0000009C   0x4770             BX       LR
    203            }
    204          
    205            return RESET_NONE;
   \                     ??SysCtrl_GetWakeupResetReason_11: (+1)
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0x4770             BX       LR               ;; return
    206          }
    207          
    208          
    209          /**
    210          * @brief  Configure the wakeup source from IO.
    211          * @param  IO: the IO selected as wakeup source, the value can be 
    212          *         @arg WAKEUP_ON_IO9 Wakeup source is IO9
    213          *         @arg WAKEUP_ON_IO10 Wakeup source is IO10
    214          *         @arg WAKEUP_ON_IO11 Wakeup source is IO11
    215          *         @arg WAKEUP_ON_IO12 Wakeup source is IO12
    216          *         @arg WAKEUP_ON_IO13 Wakeup source is IO13
    217          * @param  LevelState: select the level of the wakeup source, the value can be 
    218          *         @arg WAKEUP_ON_HIGH_STATE Wakeup on high state
    219          *         @arg WAKEUP_ON_LOW_STATE Wakeup on low state
    220          * @param  NewState: functional state @ref FunctionalState
    221          *         This parameter can be: ENABLE or DISABLE.
    222          * @retval  None
    223          */

   \                                 In section .text, align 2, keep-with-next
    224          void SysCtrl_WakeupFromIo(uint8_t IO, uint8_t LevelState, FunctionalState NewState)
    225          {
    226            /* Check the parameters */
    227            assert_param(IS_WAKEUP_ON_IO(IO));
    228            assert_param(IS_WAKEUP_ON_STATE(LevelState));
    229            assert_param(IS_FUNCTIONAL_STATE(NewState));
    230          
    231            if(LevelState == WAKEUP_ON_HIGH_STATE) {
   \                     SysCtrl_WakeupFromIo: (+1)
   \   00000000   0x....             LDR      R3,??DataTable4  ;; 0x40200000
   \   00000002   0x2900             CMP      R1,#+0
   \   00000004   0x7819             LDRB     R1,[R3, #+0]
   \   00000006   0xD101             BNE      ??SysCtrl_WakeupFromIo_0
    232              SET_BIT(SYSTEM_CTRL->WKP_IO_IS, IO);
   \   00000008   0x4301             ORRS     R1,R1,R0
   \   0000000A   0xE000             B        ??SysCtrl_WakeupFromIo_1
    233            }
    234            else {
    235              CLEAR_BIT(SYSTEM_CTRL->WKP_IO_IS, IO);
   \                     ??SysCtrl_WakeupFromIo_0: (+1)
   \   0000000C   0x4381             BICS     R1,R1,R0
   \                     ??SysCtrl_WakeupFromIo_1: (+1)
   \   0000000E   0x7019             STRB     R1,[R3, #+0]
    236            }
    237            
    238            if(NewState == ENABLE) {
   \   00000010   0x2A01             CMP      R2,#+1
   \   00000012   0x7919             LDRB     R1,[R3, #+4]
   \   00000014   0xD102             BNE      ??SysCtrl_WakeupFromIo_2
    239              SET_BIT(SYSTEM_CTRL->WKP_IO_IE, IO);
   \   00000016   0x4308             ORRS     R0,R0,R1
   \   00000018   0x7118             STRB     R0,[R3, #+4]
   \   0000001A   0x4770             BX       LR
    240            }
    241            else {    
    242              CLEAR_BIT(SYSTEM_CTRL->WKP_IO_IE, IO);
   \                     ??SysCtrl_WakeupFromIo_2: (+1)
   \   0000001C   0x4381             BICS     R1,R1,R0
   \   0000001E   0x7119             STRB     R1,[R3, #+4]
    243            }
    244            
    245          }
   \   00000020   0x4770             BX       LR               ;; return
    246          
    247          /**
    248            * @brief  Enable disable the XO clock divider for the system control.
    249            * @param  XOFreq: configure the system for the correct XO external clock used, the value can be
    250          *         @arg XO_32MHz enable the XO divider and expect a 32 MHz external clock.
    251          *         @arg XO_16MHz disable the XO divider and expect a 16 MHz external clock.
    252            * @retval None
    253            */

   \                                 In section .text, align 2, keep-with-next
    254          void SysCtrl_SelectXO(uint8_t XOFreq)
    255          {  
    256            /* Check the parameters */
    257            assert_param(IS_XO_FREQ(XOFreq));
    258          
    259            if(XOFreq == XO_32MHZ) {
   \                     SysCtrl_SelectXO: (+1)
   \   00000000   0x2801             CMP      R0,#+1
   \   00000002   0xD104             BNE      ??SysCtrl_SelectXO_0
    260              SYSTEM_CTRL->CTRL_b.MHZ32_SEL = SET;
   \   00000004   0x....             LDR      R0,??DataTable4_9  ;; 0x40200008
   \   00000006   0x7801             LDRB     R1,[R0, #+0]
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0x430A             ORRS     R2,R2,R1
   \   0000000C   0xE005             B        ??SysCtrl_SelectXO_1
    261            }
    262            else if(XOFreq == XO_16MHZ) {   
   \                     ??SysCtrl_SelectXO_0: (+1)
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD104             BNE      ??SysCtrl_SelectXO_2
    263              SYSTEM_CTRL->CTRL_b.MHZ32_SEL = RESET;
   \   00000012   0x....             LDR      R0,??DataTable4_9  ;; 0x40200008
   \   00000014   0x7801             LDRB     R1,[R0, #+0]
   \   00000016   0x22FE             MOVS     R2,#+254
   \   00000018   0x400A             ANDS     R2,R2,R1
   \                     ??SysCtrl_SelectXO_1: (+1)
   \   0000001A   0x7002             STRB     R2,[R0, #+0]
    264            }
    265          }
   \                     ??SysCtrl_SelectXO_2: (+1)
   \   0000001C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x40200000         DC32     0x40200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x40900000         DC32     0x40900000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x01FA03F0         DC32     0x1fa03f0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x0003FFFF         DC32     0x3ffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x4810000C         DC32     0x4810000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x40900020         DC32     0x40900020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x40900008         DC32     0x40900008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x48100008         DC32     0x48100008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x00000401         DC32     0x401

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x40200008         DC32     0x40200008
    266          
    267          
    268          
    269          /**
    270            * @}
    271            */
    272          
    273          /**
    274            * @}
    275            */
    276          
    277          /**
    278            * @}
    279            */
    280          
    281          /******************* (C) COPYRIGHT 2016 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   SysCtrl_DeInit
       0   SysCtrl_GetWakeupResetReason
       0   SysCtrl_PeripheralClockCmd
       0   SysCtrl_SelectXO
       0   SysCtrl_WakeupFromIo


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      30  SysCtrl_DeInit
     162  SysCtrl_GetWakeupResetReason
      20  SysCtrl_PeripheralClockCmd
      30  SysCtrl_SelectXO
      34  SysCtrl_WakeupFromIo

 
 316 bytes in section .text
 
 316 bytes of CODE memory

Errors: none
Warnings: 1
