###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:33:56
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        .\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\TARGET_STEVAL_IDB007V1\device\system_bluenrg1.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\TARGET_STEVAL_IDB007V1\device\system_bluenrg1.d
#        -l
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\TARGET_STEVAL_IDB007V1\device\system_bluenrg1.s.txt
#        -o
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\TARGET_STEVAL_IDB007V1\device\system_bluenrg1.o
#        .\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\TARGET_STEVAL_IDB007V1\device\system_bluenrg1.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\TARGET_STEVAL_IDB007V1\device\system_bluenrg1.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\TARGET_STEVAL_IDB007V1\device\system_bluenrg1.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\TARGET_STEVAL_IDB007V1\device\system_bluenrg1.c
      1          /******************** (C) COPYRIGHT 2015 STMicroelectronics ********************
      2           * File Name          : system_bluenrg1.h
      3           * Author             : AMS - VMA
      4           * Version            : V1.0.0
      5           * Date               : 19-May-2015
      6           * Description        : BlueNRG Low Level Init function
      7           ********************************************************************************
      8           * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9           * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10           * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11           * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12           * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13           * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14           *******************************************************************************/
     15          
     16          #include "BlueNRG_x_device.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_SetPriority(IRQn_Type, uint32_t)
   \                     __NVIC_SetPriority: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x00C2             LSLS     R2,R0,#+3
   \   00000004   0x2318             MOVS     R3,#+24
   \   00000006   0x4013             ANDS     R3,R3,R2
   \   00000008   0x24FF             MOVS     R4,#+255
   \   0000000A   0x409C             LSLS     R4,R4,R3
   \   0000000C   0x43E2             MVNS     R2,R4
   \   0000000E   0x0789             LSLS     R1,R1,#+30
   \   00000010   0x0E09             LSRS     R1,R1,#+24
   \   00000012   0x4099             LSLS     R1,R1,R3
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD401             BMI      ??__NVIC_SetPriority_0
   \   00000018   0x....             LDR      R3,??DataTable3  ;; 0xe000e400
   \   0000001A   0xE003             B        ??__NVIC_SetPriority_1
   \                     ??__NVIC_SetPriority_0: (+1)
   \   0000001C   0x....             LDR      R3,??DataTable3_1  ;; 0xe000ed1c
   \   0000001E   0x0700             LSLS     R0,R0,#+28
   \   00000020   0x0F00             LSRS     R0,R0,#+28
   \   00000022   0x3808             SUBS     R0,R0,#+8
   \                     ??__NVIC_SetPriority_1: (+1)
   \   00000024   0x0880             LSRS     R0,R0,#+2
   \   00000026   0x0080             LSLS     R0,R0,#+2
   \   00000028   0x1818             ADDS     R0,R3,R0
   \   0000002A   0x6803             LDR      R3,[R0, #+0]
   \   0000002C   0x401A             ANDS     R2,R2,R3
   \   0000002E   0x4311             ORRS     R1,R1,R2
   \   00000030   0x6001             STR      R1,[R0, #+0]
   \   00000032   0xBC10             POP      {R4}
   \   00000034   0x4770             BX       LR               ;; return

  typedef uint8_t BOOL;  //already defined in "hal_type.h"
                  ^
"C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\TARGET_STEVAL_IDB007V1\device\system_BlueNRG1.h",240  Warning[Pe301]: typedef name has already been declared (with same type)
     17          #include "BluenRG1_flash.h"
     18          #include "misc.h"
     19          #include "hal_types.h"
     20          #include "BlueNRG1.h"
     21          #include "compiler.h"
     22          
     23          
     24          
     25          #define RESET_WAKE_DEEPSLEEP_REASONS 0x05
     26          #define CRITICAL_PRIORITY 0
     27          /* OTA tag used to  tag a  valid application on interrupt vector table*/
     28          #if ST_OTA_SERVICE_MANAGER_APPLICATION
     29          #define OTA_VALID_APP_TAG (0xAABBCCDD) /* OTA Service Manager has a special valid tag */
     30          #else
     31          #define OTA_VALID_APP_TAG (0xAA5555AA) 
     32          #endif
     33          
     34          #define BLUE_FLAG_TAG   (0x424C5545)
     35          
     36          #ifdef ccc
     37          WEAK_FUNCTION(void NMI_Handler(void) {});
     38          WEAK_FUNCTION(void HardFault_Handler(void) {});
     39          WEAK_FUNCTION(void SVC_Handler(void) {});
     40          WEAK_FUNCTION(void PendSV_Handler(void) {});
     41          WEAK_FUNCTION(void SysTick_Handler(void) {});
     42          WEAK_FUNCTION(void GPIO_Handler(void) {});
     43          WEAK_FUNCTION(void NVM_Handler(void) {});
     44          WEAK_FUNCTION(void UART_Handler(void) {});
     45          WEAK_FUNCTION(void SPI_Handler(void) {});
     46          WEAK_FUNCTION(void Blue_Handler(void) {});
     47          WEAK_FUNCTION(void BATTERY_LOW_Handler(void) {});
     48          WEAK_FUNCTION(void ADV_Handler(void) {});
     49          WEAK_FUNCTION(void MFT1A_Handler(void) {});
     50          WEAK_FUNCTION(void MFT1B_Handler(void) {});
     51          WEAK_FUNCTION(void MFT2A_Handler(void) {});
     52          WEAK_FUNCTION(void MFT2B_Handler(void) {});
     53          WEAK_FUNCTION(void RTC_Handler(void) {});
     54          WEAK_FUNCTION(void WDG_Handler(void) {});
     55          WEAK_FUNCTION(void ADC_Handler(void) {});
     56          WEAK_FUNCTION(void I2C2_Handler(void) {});
     57          WEAK_FUNCTION(void I2C1_Handler(void) {});
     58          WEAK_FUNCTION(void DMA_Handler(void) {});
     59          WEAK_FUNCTION(void PKA_Handler(void) {});
     60          #endif //ccc
     61          
     62          //------------------------------------------------------------------------------
     63          //   uint32_t ota_sw_activation
     64          //
     65          // OTA SW activation
     66          //
     67          //------------------------------------------------------------------------------
     68          SECTION(".ota_sw_activation")

   \                                 In section .ota_sw_activation, align 4
     69          NO_INIT_ZERO(volatile uint32_t ota_sw_activation, ".ota_sw_activation");
   \                     ota_sw_activation:
   \   00000000                      DS8 4
     70          
     71          //------------------------------------------------------------------------------
     72          //   uint32_t savedMSP
     73          //
     74          // Private storage to hold the saved stack pointer.  This variable is only used
     75          // in this file and should not be extern'ed.  In our current design we
     76          // do not use real context switching, but only context saving and restoring.
     77          // As such, we only need to keep track of the Main Stack Pointer (MSP). This
     78          // variable is used to hold the MSP between a save and a restore.
     79          //------------------------------------------------------------------------------
     80          SECTION(".savedMSP")

   \                                 In section .savedMSP, align 4, root
     81          REQUIRED(uint32_t savedMSP);
   \                     savedMSP:
   \   00000000                      DS8 4
     82          
     83          
     84          //------------------------------------------------------------------------------
     85          //   uint8_t wakeupFromSleepFlag
     86          //
     87          // A simple flag used to indicate if the wakeup occurred from Sleep or Standby 
     88          // condition.
     89          // If this flag is zero, an interrupt has affected the WFI instruction and the
     90          // BlueNRG-1 doesn't enter in deep sleep state. So, no context restore is
     91          // necessary.
     92          // If this flag is non-zero, the WFI instruction puts the BlueNRG-1 in deep sleep.
     93          // So, at wakeup time a context restore is necessary.
     94          // Note: The smallest unit of storage is a single byte.
     95          //
     96          // NOTE: This flag must be cleared before the context restore is called
     97          //------------------------------------------------------------------------------
     98          SECTION(".wakeupFromSleepFlag")

   \                                 In section .wakeupFromSleepFlag, align 1, root
     99          REQUIRED(uint8_t wakeupFromSleepFlag);
   \                     wakeupFromSleepFlag:
   \   00000000                      DS8 1
    100          
    101          
    102          //------------------------------------------------------------------------------
    103          //   uint32_t __blueflag_RAM
    104          //
    105          // __blueflag_RAM
    106          //
    107          //------------------------------------------------------------------------------
    108          SECTION(".__blueflag_RAM")

   \                                 In section .__blueflag_RAM, align 4, root
    109          REQUIRED(uint32_t __blueflag_RAM);
   \                     __blueflag_RAM:
   \   00000000                      DS8 4
    110          
    111          
    112          //------------------------------------------------------------------------------
    113          //   uint32_t savedICSR
    114          //
    115          // Private storage to save the Interrupt Control State register, to check the 
    116          // SysTick and PendSV interrupt status
    117          // This variable is only used during the samrt power management 
    118          // procedure 
    119          //------------------------------------------------------------------------------

   \                                 In section .bss, align 4
    120          uint32_t savedICSR;
   \                     savedICSR:
   \   00000000                      DS8 4
    121          
    122          //------------------------------------------------------------------------------
    123          //   uint32_t savedSHCSR
    124          //
    125          // Private storage to save the System Handler Control and State register, 
    126          // to check the SVCall interrupt status
    127          // This variable is only used during the samrt power management 
    128          // procedure 
    129          //------------------------------------------------------------------------------

   \                                 In section .bss, align 4
    130          uint32_t savedSHCSR;
   \                     savedSHCSR:
   \   00000000                      DS8 4
    131          
    132          //------------------------------------------------------------------------------
    133          //   uint32_t savedNVIC_ISPR
    134          //
    135          // Private storage to save the Interrupt Set Pending register, 
    136          // to check the NVIC interrupt status
    137          // This variable is only used during the smart power management 
    138          // procedure 
    139          //------------------------------------------------------------------------------

   \                                 In section .bss, align 4
    140          uint32_t savedNVIC_ISPR;
   \                     savedNVIC_ISPR:
   \   00000000                      DS8 4
    141          
    142          
    143          
    144          #ifdef ccc
    145          int __low_level_init(void) 
    146          {
    147          	// If the reset reason is a wakeup from sleep restore the context
    148          	if ((CKGEN_SOC->REASON_RST == 0) && (CKGEN_BLE->REASON_RST > RESET_WAKE_DEEPSLEEP_REASONS)) {
    149          #ifndef NO_SMART_POWER_MANAGEMENT
    150          
    151          		void CS_contextRestore(void);
    152          		wakeupFromSleepFlag = 1; //A wakeup from Standby or Sleep occurred
    153          		CS_contextRestore(); // Restore the context
    154          		//if the context restore worked properly, we should never return here
    155          		while(1) { ; }
    156          #else
    157          		return 0;
    158          #endif   
    159          	}
    160          	return 1;
    161          }
    162          
    163          
    164          #ifdef __CC_ARM
    165          
    166          void RESET_HANDLER(void)
    167          {
    168          	if(__low_level_init()==1)
    169          		__main();
    170          	else {
    171          		__set_MSP((uint32_t)_INITIAL_SP);
    172          		main();
    173          	}
    174          }
    175          
    176          
    177          #else /* __CC_ARM */
    178          #ifdef __GNUC__
    179          
    180          extern unsigned long _etext;
    181          extern unsigned long _sidata;		/* start address for the initialization values of the .data section. defined in linker script */
    182          extern unsigned long _sdata;		/* start address for the .data section. defined in linker script */
    183          extern unsigned long _edata;		/* end address for the .data section. defined in linker script */
    184          extern unsigned long _sbss;			/* start address for the .bss section. defined in linker script */
    185          extern unsigned long _ebss;			/* end address for the .bss section. defined in linker script */
    186          extern unsigned long _estack;		/* init value for the stack pointer. defined in linker script */
    187          extern unsigned long _sidata2;		/* start address for the initialization values of the special ram_preamble */
    188          extern unsigned long _sdata2;		/* start address the special ram_preamble defined in linker script */
    189          extern unsigned long _edata2;		/* end address the special ram_preamble defined in linker script */
    190          
    191          extern int main(void);
    192          
    193          void RESET_HANDLER(void)
    194          {
    195          	if(__low_level_init()==1)	{
    196          		unsigned long *pulSrc, *pulDest;
    197          
    198          		// Copy the data segment initializers from flash to SRAM.
    199          		pulSrc = &_sidata;
    200          		for(pulDest = &_sdata; pulDest < &_edata; )
    201          		{
    202          			*(pulDest++) = *(pulSrc++);
    203          		}
    204          
    205          		pulSrc = &_sidata2;
    206          		for(pulDest = &_sdata2; pulDest < &_edata2; )
    207          		{
    208          			if (pulDest < (unsigned long *) 0x20000004) {
    209          				pulDest++;
    210          				pulSrc++;
    211          			} else {
    212          				*(pulDest++) = *(pulSrc++);
    213          			}
    214          		}
    215          
    216          		// Zero fill the bss segment.
    217          		for(pulDest = &_sbss; pulDest < &_ebss; )
    218          		{
    219          			*(pulDest++) = 0;
    220          		}
    221          	}
    222          	// Call the application's entry point.
    223          	__set_MSP((uint32_t)_INITIAL_SP);
    224          	main();
    225          }
    226          
    227          #endif /* __GNUC__ */
    228          #endif /* __CC_ARM */
    229          
    230          
    231          SECTION(".intvec")
    232          REQUIRED(const intvec_elem __vector_table[]) = {
    233          		_INITIAL_SP,                            /* Stack address                      */
    234          		RESET_HANDLER,           		    /* Reset handler is C initialization. */
    235          		NMI_Handler,                            /* The NMI handler                    */
    236          		HardFault_Handler,                      /* The hard fault handler             */
    237          		(intfunc) OTA_VALID_APP_TAG,            /* OTA Application                    */
    238          		(intfunc) BLUE_FLAG_TAG,                /* Reserved for blue flag DTM updater */
    239          		0x00000000,                             /* Reserved                           */
    240          		0x00000000,                             /* Reserved                           */
    241          		0x00000000,                             /* Reserved                           */
    242          		0x00000000,                             /* Reserved                           */
    243          		0x00000000,                             /* Reserved                           */
    244          		SVC_Handler,                            /* SVCall                             */
    245          		0x00000000,                             /* Reserved                           */
    246          		0x00000000,                             /* Reserved                           */
    247          		PendSV_Handler,                         /* PendSV                             */
    248          		SysTick_Handler,                        /* SysTick_Handler                    */
    249          		GPIO_Handler,                           /* IRQ0:  GPIO                        */
    250          		NVM_Handler,                            /* IRQ1:  NVM                         */
    251          		0x00000000,                             /* IRQ2:                              */
    252          		0x00000000,                             /* IRQ3:                              */
    253          		UART_Handler,                           /* IRQ4:  UART                        */
    254          		SPI_Handler,                            /* IRQ5:  SPI                         */
    255          		Blue_Handler,                           /* IRQ6:  Blue                        */
    256          		WDG_Handler,                            /* IRQ7:  Watchdog                    */
    257          		0x00000000,                             /* IRQ8:                              */
    258          		0x00000000,                             /* IRQ9:                              */
    259          		0x00000000,                             /* IRQ10:                             */
    260          		0x00000000,                             /* IRQ11:                             */
    261          		0x00000000,                             /* IRQ12:                             */
    262          		ADC_Handler,                            /* IRQ13  ADC                         */
    263          		I2C2_Handler,                           /* IRQ14  I2C2                        */
    264          		I2C1_Handler,                           /* IRQ15  I2C1                        */
    265          		0x00000000,                             /* IRQ16                              */
    266          		MFT1A_Handler,                          /* IRQ17  MFT1 irq1                   */
    267          		MFT1B_Handler,                          /* IRQ18  MFT1 irq2                   */
    268          		MFT2A_Handler,                          /* IRQ19  MFT2 irq1                   */
    269          		MFT2B_Handler,                          /* IRQ20  MFT2 irq2                   */
    270          		RTC_Handler,                            /* IRQ21  RTC                         */
    271          		PKA_Handler,                            /* IRQ22  PKA                         */
    272          		DMA_Handler,                            /* IRQ23  DMA                         */
    273          		0x00000000,                             /* IRQ24                              */
    274          		0x00000000,                             /* IRQ25                              */
    275          		0x00000000,                             /* IRQ26                              */
    276          		0x00000000,                             /* IRQ27                              */
    277          		0x00000000,                             /* IRQ28                              */
    278          		0x00000000,                             /* IRQ29                              */
    279          		0x00000000,                             /* IRQ30                              */
    280          		0x00000000                              /* IRQ31                              */
    281          };
    282          
    283          
    284          
    285          //------------------------------------------------------------------------------
    286          //   uint32_t *app_base
    287          //
    288          // The application base address. Used by OTA IRQ stub file to determine the
    289          // effective application base address and jump to the proper IRQ handler.
    290          //
    291          //------------------------------------------------------------------------------
    292          SECTION(".app_base")
    293          REQUIRED(uint32_t *app_base) = (uint32_t *) __vector_table;
    294          #endif //ccc
    295          
    296          
    297          
    298          SECTION(".bss.__blue_RAM")

   \                                 In section .bss.__blue_RAM, align 4, root
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000045   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000005C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000073   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000008A   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000CF   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000E6   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000FD   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000114   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000012B   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000142   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000159   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000170   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000187   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000019E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000001B5   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000001CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000001E3   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000001FA   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    299          REQUIRED(static uint8_t __blue_RAM[8*64+12]) = {0,};
    300          
    301          
    302          /**
    303           * @name Device Configuration Registers
    304           *@{
    305           */
    306          
    307          /**
    308           *@brief Analog Test Bus 0 register settings
    309           */
    310          #define ATB0_ANA_ENG_REG    0x3F
    311          /**
    312           *@brief Analog Test Bus 1 register settings
    313           */
    314          #define ATB1_ANA_ENG_REG    0x3E
    315          /**
    316           *@brief Rate Multiplier 1 register settings 
    317           */
    318          #define RM1_DIG_ENG_REG     0x3C
    319          /**
    320           *@brief Low Frequency Clock and SMPS register settings
    321           */
    322          #define CLOCK_LOW_ENG_REG   0x3B
    323          /**
    324           *@brief High Frequency Clock register settings
    325           */
    326          #define CLOCK_HIGH_ENG_REG  0x3A
    327          /**
    328           *@brief Power Management register settings
    329           */
    330          #define PMU_ANA_ENG_REG     0x39
    331          /**
    332           *@brief System Clock register settings
    333           */
    334          #define CLOCK_ANA_USER_REG  0x34
    335          /**
    336           *@brief System Power Management register settings
    337           */
    338          #define PMU_ANA_USER_REG    0x35
    339          //@} \\Device Configuration Registers
    340          
    341          /**
    342           * @name Device Configuration values
    343           *@{
    344           */
    345          
    346          /**
    347           * @brief Enable the low frequency RO
    348           */
    349          #define LOW_FREQ_RO                 0x1B
    350          /**
    351           * @brief Enable the external low frequency XO
    352           */
    353          #define LOW_FREQ_XO                 0x5B
    354          /**
    355           * @brief Enable the high frequency 16 MHz
    356           */
    357          #define HIGH_FREQ_16M               0x40
    358          /**
    359           * @brief Enable the high frequrency 32 MHz
    360           */
    361          #define HIGH_FREQ_32M               0x44
    362          /**
    363           * @brief Enable the SMPS
    364           */
    365          #define SMPS_ON                     0x4C
    366          /**
    367           * @brief Disable the SMPS
    368           */
    369          #define SMPS_OFF                    0x6C
    370          /**
    371           * @brief SMPS clock frequency value for 4.7 uH inductor
    372           */
    373          #define SMPS_4_7uH_RM1              0x40
    374          /**
    375           * @brief Power management configuration for 4.7 uH inductor
    376           */
    377          #define SMPS_4_7uH_PMU              0xBE
    378          /**
    379           * @brief SMPS clock frequency value for 10 uH inductor
    380           */
    381          #define SMPS_10uH_RM1               0x20
    382          /**
    383           * @brief Power management configuration for 10 uH inductor
    384           */
    385          #define SMPS_10uH_PMU               0xB2
    386          /**
    387           * @brief RCO32 trimming default values
    388           */
    389          #define PMU_ANA_USER_RESET_VALUE    0x0B
    390          /**
    391           * @brief Analog test bus 0 settings for 
    392           * normal application mode
    393           */
    394          #define USER_MODE_ATB0              0x00
    395          /**
    396           * @brief Analog test bus 1 settings for 
    397           * normal application mode
    398           */
    399          #define USER_MODE_ATB1              0x30
    400          /**
    401           * @brief Analog test bus 0 settings for 
    402           * low speed crystal measurement
    403           */
    404          #define LS_XTAL_MEAS_ATB0           0x37
    405          /**
    406           * @brief Analog test bus 1 settings for 
    407           * low speed crystal measurement
    408           */
    409          #define LS_XTAL_MEAS_ATB1           0x34
    410          /**
    411           * @brief Analog test bus 0 settings for 
    412           * high speed crystal startup time measurement
    413           */
    414          #define HS_STARTUP_TIME_MEAS_ATB0   0x04
    415          /**
    416           * @brief Analog test bus 1 settings for 
    417           * high speed crystal startup time measurement
    418           */
    419          #define HS_STARTUP_TIME_MEAS_ATB1   0x34
    420          /**
    421           * @brief Analog test bus 0 settings for 
    422           * Tx/Rx start stop signal measurement
    423           */
    424          #define TX_RX_START_STOP_MEAS_ATB0  0x38
    425          /**
    426           * @brief Analog test bus 1 settings for 
    427           * Tx/Rx start stop signal measurement
    428           */
    429          #define TX_RX_START_STOP_MEAS_ATB1  0x34
    430          //@} \\Device Configuration values
    431          
    432          /**
    433           *@brief Number of configuration bytes to send over Blue SPI
    434           */
    435          #define NUMBER_CONFIG_BYTE  0x02
    436          /**
    437           *@brief End Configuration Tag
    438           */
    439          #define END_CONFIG          0x00
    440          
    441          /**
    442           * @brief Cold start configuration register table
    443           */
    444          #define COLD_START_CONFIGURATION                                      \
    445          		{                                                                     \
    446          	NUMBER_CONFIG_BYTE, ATB0_ANA_ENG_REG,   USER_MODE_ATB0,             \
    447          	NUMBER_CONFIG_BYTE, ATB1_ANA_ENG_REG,   USER_MODE_ATB1,             \
    448          	NUMBER_CONFIG_BYTE, RM1_DIG_ENG_REG,    SMPS_10uH_RM1,              \
    449          	NUMBER_CONFIG_BYTE, CLOCK_LOW_ENG_REG,  SMPS_ON,                    \
    450          	NUMBER_CONFIG_BYTE, CLOCK_HIGH_ENG_REG, HIGH_FREQ_16M,              \
    451          	NUMBER_CONFIG_BYTE, PMU_ANA_ENG_REG,    SMPS_10uH_PMU,              \
    452          	NUMBER_CONFIG_BYTE, CLOCK_ANA_USER_REG, LOW_FREQ_XO,                \
    453          	NUMBER_CONFIG_BYTE, PMU_ANA_USER_REG,   PMU_ANA_USER_RESET_VALUE,   \
    454          	END_CONFIG                                                          \
    455          		}
    456          
    457          /**
    458           * @brief RCO32K trimming value flash location
    459           */
    460          #define RCO32K_TRIMMING_FLASH_ADDR 0x100007E8
    461          /**
    462           * @brief LDO1V2 trimming value flash location
    463           */
    464          #define LDO1V2_TRIMMING_FLASH_ADDR 0x100007E4
    465          /**
    466           * @brief Check bytes tag
    467           */
    468          #define CHECK_BYTES                0xAA55
    469          
    470          

   \                                 In section .text, align 4, keep-with-next
    471          void DeviceConfiguration(BOOL coldStart, BOOL waitLS_Ready)
    472          {
   \                     DeviceConfiguration: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000C             MOVS     R4,R1
    473          	uint32_t current_time;
    474          	uint32_t Trimm_config;
    475          	volatile uint8_t cold_start_config[] = COLD_START_CONFIGURATION;
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0xBF00             Nop      
   \   0000000C   0x....             ADR.N    R1,?_0
   \   0000000E   0x221C             MOVS     R2,#+28
   \   00000010   0x.... 0x....      BL       __aeabi_memcpy4
    476          
    477          	if (coldStart) {
   \   00000014   0x2D00             CMP      R5,#+0
   \   00000016   0xD02E             BEQ      ??DeviceConfiguration_0
    478          		/* High Speed Crystal Configuration */
    479          #if (HS_SPEED_XTAL == HS_SPEED_XTAL_32MHZ)
    480          		cold_start_config[14] = HIGH_FREQ_32M;
    481          		/* Set 32MHz_SEL bit in the System controller register */
    482          		SYSTEM_CTRL->CTRL_b.MHZ32_SEL = 1;
    483          #elif (HS_SPEED_XTAL == HS_SPEED_XTAL_16MHZ)
    484          		cold_start_config[14] = HIGH_FREQ_16M;
   \   00000018   0x4668             MOV      R0,SP
   \   0000001A   0x2140             MOVS     R1,#+64
   \   0000001C   0x7381             STRB     R1,[R0, #+14]
    485          #else
    486          #error "No definition for High Speed Crystal"
    487          #endif
    488          
    489          		/* Low Speed Crystal Source */
    490          #if (LS_SOURCE == LS_SOURCE_EXTERNAL_32KHZ)
    491          		cold_start_config[20] = LOW_FREQ_XO;
   \   0000001E   0x215B             MOVS     R1,#+91
   \   00000020   0x7501             STRB     R1,[R0, #+20]
    492          #elif (LS_SOURCE == LS_SOURCE_INTERNAL_RO)
    493          		cold_start_config[20] = LOW_FREQ_RO;
    494          #else
    495          #error "No definition for Low Speed Crystal Source"
    496          #endif
    497          
    498          		/* SMPS configuration */
    499          #if (SMPS_INDUCTOR == SMPS_INDUCTOR_10uH)
    500          		cold_start_config[11] = SMPS_ON;
   \   00000022   0x214C             MOVS     R1,#+76
   \   00000024   0x72C1             STRB     R1,[R0, #+11]
    501          		cold_start_config[8] = SMPS_10uH_RM1;
   \   00000026   0x2120             MOVS     R1,#+32
   \   00000028   0x7201             STRB     R1,[R0, #+8]
    502          		cold_start_config[17] = SMPS_10uH_PMU;
   \   0000002A   0x21B2             MOVS     R1,#+178
   \   0000002C   0x7441             STRB     R1,[R0, #+17]
    503          #elif (SMPS_INDUCTOR == SMPS_INDUCTOR_4_7uH)
    504          		cold_start_config[11] = SMPS_ON;
    505          		cold_start_config[8] = SMPS_4_7uH_RM1;
    506          		cold_start_config[17] = SMPS_4_7uH_PMU;
    507          #elif (SMPS_INDUCTOR == SMPS_INDUCTOR_NONE)
    508          		cold_start_config[11] = SMPS_OFF;
    509          #else
    510          #error "No definition for SMPS Configuration"
    511          #endif
    512          
    513          		/* BOR configuration. Note: this setup shall be executed after the SMPS configuration*/
    514          #if (BOR_CONFIG == BOR_ON)
    515          		/* Clear the 3 bit of the CLOCK_LOW_ENG_REG register */
    516          		cold_start_config[11] &= ~(1<<2);
    517          #elif (BOR_CONFIG == BOR_OFF)
    518          		/* Nothing to do because the BOR is disabled by default */
    519          #else
    520          #error "No definition for BOR Configuration"
    521          #endif
    522          
    523          		/* Setup RCO32K trimming value in PMU_ANA_USER_REG  */
    524          		Trimm_config = *(volatile uint32_t*)RCO32K_TRIMMING_FLASH_ADDR;
   \   0000002E   0x....             LDR      R2,??DataTable3_2  ;; 0x100007e4
   \   00000030   0x6853             LDR      R3,[R2, #+4]
    525          		if ((Trimm_config >> 16) == CHECK_BYTES)
   \   00000032   0x....             LDR      R1,??DataTable3_3  ;; 0xaa55
   \   00000034   0x0C1D             LSRS     R5,R3,#+16
   \   00000036   0x428D             CMP      R5,R1
   \   00000038   0xD105             BNE      ??DeviceConfiguration_1
    526          			cold_start_config[23] = ((Trimm_config&0x7)<<4)|PMU_ANA_USER_RESET_VALUE;
   \   0000003A   0x011B             LSLS     R3,R3,#+4
   \   0000003C   0x2570             MOVS     R5,#+112
   \   0000003E   0x401D             ANDS     R5,R5,R3
   \   00000040   0x230B             MOVS     R3,#+11
   \   00000042   0x432B             ORRS     R3,R3,R5
   \   00000044   0x75C3             STRB     R3,[R0, #+23]
    527          
    528          		/* Setup LDO1V2 trimming value in ATB1_ANA_ENG_REG  */
    529          		Trimm_config = *(volatile uint32_t*)LDO1V2_TRIMMING_FLASH_ADDR;
   \                     ??DeviceConfiguration_1: (+1)
   \   00000046   0x6812             LDR      R2,[R2, #+0]
    530          		if ((Trimm_config >> 16) == CHECK_BYTES) {
   \   00000048   0x0C13             LSRS     R3,R2,#+16
   \   0000004A   0x428B             CMP      R3,R1
   \   0000004C   0xD109             BNE      ??DeviceConfiguration_2
    531          			cold_start_config[5] &= ~0x30;                 // Clear the register content of bit 4 and 5
   \   0000004E   0x7941             LDRB     R1,[R0, #+5]
   \   00000050   0x23CF             MOVS     R3,#+207
   \   00000052   0x400B             ANDS     R3,R3,R1
   \   00000054   0x7143             STRB     R3,[R0, #+5]
    532          			cold_start_config[5] |= (Trimm_config&0x3)<<4; // Store the LDO1V2 trimming value in bit 4 and 5
   \   00000056   0x7941             LDRB     R1,[R0, #+5]
   \   00000058   0x0112             LSLS     R2,R2,#+4
   \   0000005A   0x2330             MOVS     R3,#+48
   \   0000005C   0x4013             ANDS     R3,R3,R2
   \   0000005E   0x430B             ORRS     R3,R3,R1
   \   00000060   0x7143             STRB     R3,[R0, #+5]
    533          		}
    534          
    535          		/* Cold start configuration device */
    536          		BLUE_CTRL->RADIO_CONFIG = 0x10000U | (uint16_t)((uint32_t)cold_start_config & 0x0000FFFFU);
   \                     ??DeviceConfiguration_2: (+1)
   \   00000062   0x....             LDR      R0,??DataTable3_4  ;; 0x4800000c
   \   00000064   0x2180             MOVS     R1,#+128
   \   00000066   0x0249             LSLS     R1,R1,#+9        ;; #+65536
   \   00000068   0x466A             MOV      R2,SP
   \   0000006A   0xB292             UXTH     R2,R2
   \   0000006C   0x430A             ORRS     R2,R2,R1
   \   0000006E   0x6002             STR      R2,[R0, #+0]
    537          		while ((BLUE_CTRL->RADIO_CONFIG & 0x10000) != 0);
   \                     ??DeviceConfiguration_3: (+1)
   \   00000070   0x6802             LDR      R2,[R0, #+0]
   \   00000072   0x400A             ANDS     R2,R2,R1
   \   00000074   0xD1FC             BNE      ??DeviceConfiguration_3
    538          	}
    539          
    540          	/* Wait until HS is ready. The slow clock period
    541          	 * measurement is done automatically each time the
    542          	 * device enters in active2 state and the HS is ready.
    543          	 * The interrupt signals that a measurement is done.
    544          	 */
    545          	while(CKGEN_BLE->CLK32K_IT == 0);
   \                     ??DeviceConfiguration_0: (+1)
   \   00000076   0x....             LDR      R0,??DataTable3_5  ;; 0x4810000c
   \   00000078   0x8981             LDRH     R1,[R0, #+12]
   \   0000007A   0x2900             CMP      R1,#+0
   \   0000007C   0xD0FB             BEQ      ??DeviceConfiguration_0
    546          	CKGEN_BLE->CLK32K_IT = 1;
   \   0000007E   0x2101             MOVS     R1,#+1
   \   00000080   0x8181             STRH     R1,[R0, #+12]
    547          	CKGEN_BLE->CLK32K_COUNT = 23; //Restore the window length for slow clock measurement.
   \   00000082   0x2117             MOVS     R1,#+23
   \   00000084   0x8001             STRH     R1,[R0, #+0]
    548          	CKGEN_BLE->CLK32K_PERIOD = 0;
   \   00000086   0x2100             MOVS     R1,#+0
   \   00000088   0x6041             STR      R1,[R0, #+4]
    549          
    550          
    551          	/* Wait until the RO or 32KHz is ready */
    552          	if (waitLS_Ready) {
   \   0000008A   0x2C00             CMP      R4,#+0
   \   0000008C   0xD008             BEQ      ??DeviceConfiguration_4
    553          		current_time = *(volatile uint32_t *)0x48000010;
   \   0000008E   0x....             LDR      R0,??DataTable3_4  ;; 0x4800000c
   \   00000090   0x6841             LDR      R1,[R0, #+4]
   \   00000092   0x2210             MOVS     R2,#+16
    554          		while(((*(volatile uint32_t *)0x48000010)&0x10) == (current_time&0x10));
   \                     ??DeviceConfiguration_5: (+1)
   \   00000094   0x6843             LDR      R3,[R0, #+4]
   \   00000096   0x4013             ANDS     R3,R3,R2
   \   00000098   0x2410             MOVS     R4,#+16
   \   0000009A   0x400C             ANDS     R4,R4,R1
   \   0000009C   0x42A3             CMP      R3,R4
   \   0000009E   0xD0F9             BEQ      ??DeviceConfiguration_5
    555          	}
    556          
    557          	if (coldStart) {
    558          #if (HS_SPEED_XTAL == HS_SPEED_XTAL_32MHZ)
    559          		/* AHB up converter command register write*/
    560          		AHBUPCONV->COMMAND = 0x15;
    561          #endif
    562          	}
    563          
    564          }
   \                     ??DeviceConfiguration_4: (+1)
   \   000000A0   0xB007             ADD      SP,SP,#+28
   \   000000A2   0xBD30             POP      {R4,R5,PC}       ;; return
    565          

   \                                 In section .text, align 2, keep-with-next
    566          void SystemInit(void)
    567          {
   \                     SystemInit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    568          	/* Remap the vector table */
    569          	FLASH->CONFIG = FLASH_PREMAP_MAIN;
   \   00000002   0x2008             MOVS     R0,#+8
   \   00000004   0x....             LDR      R1,??DataTable3_6  ;; 0x40100004
   \   00000006   0x8008             STRH     R0,[R1, #+0]
    570          
    571          	/* Configure all the interrupts priority.
    572          	 * The application can modify the interrupts priority.
    573          	 * The  PendSV_IRQn and BLUE_CTRL_IRQn SHALL maintain the highest priority */
    574          
    575          	NVIC_SetPriority(PendSV_IRQn,    LOW_PRIORITY);
   \   00000008   0x2103             MOVS     R1,#+3
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x43C0             MVNS     R0,R0            ;; #-2
   \   0000000E   0x.... 0x....      BL       __NVIC_SetPriority
    576          	NVIC_SetPriority(SysTick_IRQn,   LOW_PRIORITY);
   \   00000012   0x2103             MOVS     R1,#+3
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000018   0x.... 0x....      BL       __NVIC_SetPriority
    577          	NVIC_SetPriority(GPIO_IRQn,      LOW_PRIORITY);
   \   0000001C   0x2103             MOVS     R1,#+3
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       __NVIC_SetPriority
    578          	NVIC_SetPriority(NVM_IRQn,       LOW_PRIORITY);
   \   00000024   0x2103             MOVS     R1,#+3
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x.... 0x....      BL       __NVIC_SetPriority
    579          	NVIC_SetPriority(UART_IRQn,      LOW_PRIORITY);
   \   0000002C   0x2103             MOVS     R1,#+3
   \   0000002E   0x2004             MOVS     R0,#+4
   \   00000030   0x.... 0x....      BL       __NVIC_SetPriority
    580          	NVIC_SetPriority(SPI_IRQn,       LOW_PRIORITY);
   \   00000034   0x2103             MOVS     R1,#+3
   \   00000036   0x2005             MOVS     R0,#+5
   \   00000038   0x.... 0x....      BL       __NVIC_SetPriority
    581          	NVIC_SetPriority(BLUE_CTRL_IRQn, CRITICAL_PRIORITY);
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0x2006             MOVS     R0,#+6
   \   00000040   0x.... 0x....      BL       __NVIC_SetPriority
    582          	NVIC_SetPriority(WDG_IRQn,       LOW_PRIORITY);
   \   00000044   0x2103             MOVS     R1,#+3
   \   00000046   0x2007             MOVS     R0,#+7
   \   00000048   0x.... 0x....      BL       __NVIC_SetPriority
    583          	NVIC_SetPriority(ADC_IRQn,       LOW_PRIORITY);
   \   0000004C   0x2103             MOVS     R1,#+3
   \   0000004E   0x200D             MOVS     R0,#+13
   \   00000050   0x.... 0x....      BL       __NVIC_SetPriority
    584          	NVIC_SetPriority(I2C2_IRQn,      LOW_PRIORITY);
   \   00000054   0x2103             MOVS     R1,#+3
   \   00000056   0x200E             MOVS     R0,#+14
   \   00000058   0x.... 0x....      BL       __NVIC_SetPriority
    585          	NVIC_SetPriority(I2C1_IRQn,      LOW_PRIORITY);
   \   0000005C   0x2103             MOVS     R1,#+3
   \   0000005E   0x200F             MOVS     R0,#+15
   \   00000060   0x.... 0x....      BL       __NVIC_SetPriority
    586          	NVIC_SetPriority(MFT1A_IRQn,    LOW_PRIORITY);
   \   00000064   0x2103             MOVS     R1,#+3
   \   00000066   0x2011             MOVS     R0,#+17
   \   00000068   0x.... 0x....      BL       __NVIC_SetPriority
    587          	NVIC_SetPriority(MFT1B_IRQn,    LOW_PRIORITY);
   \   0000006C   0x2103             MOVS     R1,#+3
   \   0000006E   0x2012             MOVS     R0,#+18
   \   00000070   0x.... 0x....      BL       __NVIC_SetPriority
    588          	NVIC_SetPriority(MFT2A_IRQn,    LOW_PRIORITY);
   \   00000074   0x2103             MOVS     R1,#+3
   \   00000076   0x2013             MOVS     R0,#+19
   \   00000078   0x.... 0x....      BL       __NVIC_SetPriority
    589          	NVIC_SetPriority(MFT2B_IRQn,    LOW_PRIORITY);
   \   0000007C   0x2103             MOVS     R1,#+3
   \   0000007E   0x2014             MOVS     R0,#+20
   \   00000080   0x.... 0x....      BL       __NVIC_SetPriority
    590          	NVIC_SetPriority(RTC_IRQn,       LOW_PRIORITY);
   \   00000084   0x2103             MOVS     R1,#+3
   \   00000086   0x2015             MOVS     R0,#+21
   \   00000088   0x.... 0x....      BL       __NVIC_SetPriority
    591          	NVIC_SetPriority(PKA_IRQn,       LOW_PRIORITY);
   \   0000008C   0x2103             MOVS     R1,#+3
   \   0000008E   0x2016             MOVS     R0,#+22
   \   00000090   0x.... 0x....      BL       __NVIC_SetPriority
    592          	NVIC_SetPriority(DMA_IRQn,       LOW_PRIORITY);
   \   00000094   0x....             LDR      R0,??DataTable3_7  ;; 0xe000e414
   \   00000096   0x6801             LDR      R1,[R0, #+0]
   \   00000098   0x0209             LSLS     R1,R1,#+8
   \   0000009A   0x0A09             LSRS     R1,R1,#+8
   \   0000009C   0x22C0             MOVS     R2,#+192
   \   0000009E   0x0612             LSLS     R2,R2,#+24       ;; #-1073741824
   \   000000A0   0x430A             ORRS     R2,R2,R1
   \   000000A2   0x6002             STR      R2,[R0, #+0]
    593          
    594          	/* Device Configuration */
    595          	DeviceConfiguration(TRUE, TRUE);
   \   000000A4   0x2101             MOVS     R1,#+1
   \   000000A6   0x2001             MOVS     R0,#+1
   \   000000A8   0x.... 0x....      BL       DeviceConfiguration
    596          	/* Disable all the peripherals clock except NVM, SYSCTR, PKA and RNG */
    597          	CKGEN_SOC->CLOCK_EN = 0xE0066;
   \   000000AC   0x....             LDR      R0,??DataTable3_8  ;; 0xe0066
   \   000000AE   0x....             LDR      R1,??DataTable3_9  ;; 0x40900020
   \   000000B0   0x6008             STR      R0,[R1, #+0]
    598          	/* Disable all the peripherals clock except NVM, SYSCTR*/
    599          	//CKGEN_SOC->CLOCK_EN = 0x00006;
    600          	__enable_irq();
   \   000000B2   0xB662             CPSIE    I
    601          	//__disable_irq();
    602          }
   \   000000B4   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0xE000ED1C         DC32     0xe000ed1c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x100007E4         DC32     0x100007e4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x0000AA55         DC32     0xaa55

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x4800000C         DC32     0x4800000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x4810000C         DC32     0x4810000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x40100004         DC32     0x40100004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0xE000E414         DC32     0xe000e414

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x000E0066         DC32     0xe0066

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x40900020         DC32     0x40900020

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x02 0x3F          DC8 2, 63, 0, 2, 62, 48, 2, 60, 32, 2, 59, 76, 2, 58, 64, 2, 57, 178, 2
   \              0x00 0x02    
   \              0x3E 0x30    
   \              0x02 0x3C    
   \              0x20 0x02    
   \              0x3B 0x4C    
   \              0x02 0x3A    
   \              0x40 0x02    
   \              0x39 0xB2    
   \              0x02         
   \   00000013   0x34 0x5B          DC8 52, 91, 2, 53, 11, 0, 0, 0, 0
   \              0x02 0x35    
   \              0x0B 0x00    
   \              0x00 0x00    
   \              0x00         
    603          
    604          
    605          /******************* (C) COPYRIGHT 2015 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   DeviceConfiguration
        40   -> __aeabi_memcpy4
       8   SystemInit
         8   -> DeviceConfiguration
         8   -> __NVIC_SetPriority
       4   __NVIC_SetPriority


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      28  ?_0
     164  DeviceConfiguration
     182  SystemInit
      54  __NVIC_SetPriority
     524  __blue_RAM
       4  __blueflag_RAM
       4  ota_sw_activation
       4  savedICSR
       4  savedMSP
       4  savedNVIC_ISPR
       4  savedSHCSR
       1  wakeupFromSleepFlag

 
   4 bytes in section .__blueflag_RAM
  12 bytes in section .bss
 524 bytes in section .bss.__blue_RAM
   4 bytes in section .ota_sw_activation
   4 bytes in section .savedMSP
 468 bytes in section .text
   1 byte  in section .wakeupFromSleepFlag
 
 468 bytes of CODE memory
 549 bytes of DATA memory

Errors: none
Warnings: 1
