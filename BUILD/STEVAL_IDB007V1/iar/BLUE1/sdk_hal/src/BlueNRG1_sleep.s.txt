###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:32:53
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\BLUE1\sdk_hal\src\BlueNRG1_sleep.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\BLUE1\sdk_hal\src\BlueNRG1_sleep.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\BLUE1\sdk_hal\src\BlueNRG1_sleep.s.txt -o
#        .\BUILD\STEVAL_IDB007V1\IAR\BLUE1\sdk_hal\src\BlueNRG1_sleep.o
#        .\BLUE1\sdk_hal\src\BlueNRG1_sleep.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\BLUE1\sdk_hal\src\BlueNRG1_sleep.s.txt
#    Object file  =  
#        .\BUILD\STEVAL_IDB007V1\IAR\BLUE1\sdk_hal\src\BlueNRG1_sleep.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\BLUE1\sdk_hal\src\BlueNRG1_sleep.c
      1          /******************** (C) COPYRIGHT 2015 STMicroelectronics ********************
      2          * File Name          : sleep.c
      3          * Author             : AMS - VMA
      4          * Version            : V1.0.0
      5          * Date               : 19-May-2015
      6          * Description        : BlueNRG Sleep management
      7          ********************************************************************************
      8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14          *******************************************************************************/
     15          #include <stdio.h>
     16          #include <stdint.h>
     17          #include <string.h>
     18          #include "BlueNRG_x_device.h"

  typedef uint8_t BOOL;  //already defined in "hal_type.h"
                  ^
"C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\TARGET_STEVAL_IDB007V1\device\system_BlueNRG1.h",240  Warning[Pe301]: typedef name has already been declared (with same type)
     19          #include "BlueNRG1_conf.h"
     20          #include "BlueNRG1_sleep.h"
     21          #include "misc.h"
     22          #include "bluenrg1_stack.h"
     23          
     24          #undef DEBUG_SLEEP_MODE
     25          #define DEBUG_SLEEP_MODE 1
     26          
     27          //#define MIN(a,b) ((a) < (b) )? (a) : (b)
     28          
     29          #define SHPR3_REG 0xE000ED20
     30          
     31          #define WAKENED_FROM_BOR          0x03
     32          #define WAKENED_FROM_POR          0x05
     33          #define WAKENED_FROM_IO9          0x09
     34          #define WAKENED_FROM_IO10         0x11
     35          #define WAKENED_FROM_IO11         0x21
     36          #define WAKENED_FROM_IO12         0x41
     37          #define WAKENED_FROM_IO13         0x81
     38          #define WAKENED_FROM_BLUE_TIMER1  0x101
     39          #define WAKENED_FROM_BLUE_TIMER2  0x401
     40          
     41          #define LOW_POWER_STANDBY  0x03
     42          
     43          #define BLUE_CURRENT_TIME_REG 0x48000010
     44          
     45          extern void InternalIdleSleep(void);
     46          extern const intvec_elem __vector_table[];

   \                                 In section .bss, align 4
     47          uint32_t cStackPreamble[CSTACK_PREAMBLE_NUMBER];
   \                     cStackPreamble:
   \   00000000                      DS8 40
     48          volatile uint32_t* ptr ;
   \                     ptr:
   \   00000028                      DS8 4
     49          extern uint32_t savedICSR;
     50          extern uint32_t savedSHCSR;
     51          extern uint32_t savedNVIC_ISPR;
     52          
     53          #ifdef DEBUG_SLEEP_MODE

   \                                 In section .bss, align 4
     54          uint32_t sleepMode_selected[4]={0,};
   \                     sleepMode_selected:
   \   00000000                      DS8 16
     55          #endif
     56          

   \                                 In section .text, align 2
     57          WEAK_FUNCTION(SleepModes App_SleepMode_Check(SleepModes sleepMode))
     58          {
     59            return SLEEPMODE_NOTIMER;
   \                     App_SleepMode_Check: (+1)
   \   00000000   0x2003             MOVS     R0,#+3
   \   00000002   0x4770             BX       LR               ;; return
     60          }
     61          

   \                                 In section .text, align 4, keep-with-next
     62          static void BlueNRG_InternalSleep(SleepModes sleepMode, uint8_t gpioWakeBitMask)
     63          {
   \                     BlueNRG_InternalSleep: (+1)
   \   00000000   0xB5F3             PUSH     {R0,R1,R4-R7,LR}
   \   00000002   0xB0FF             SUB      SP,SP,#+508
   \   00000004   0xB090             SUB      SP,SP,#+64
   \   00000006   0x4899             LDR      R0,??BlueNRG_InternalSleep_0  ;; 0x40200008
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x9008             STR      R0,[SP, #+32]
   \   0000000C   0x4898             LDR      R0,??BlueNRG_InternalSleep_0+0x4  ;; 0x40100004
   \   0000000E   0x8800             LDRH     R0,[R0, #+0]
   \   00000010   0x905A             STR      R0,[SP, #+360]
   \   00000012   0x4898             LDR      R0,??BlueNRG_InternalSleep_0+0x8  ;; 0xe000e100
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x9059             STR      R0,[SP, #+356]
   \   00000018   0x48E3             LDR      R0,??BlueNRG_InternalSleep_1  ;; 0xe000e400
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x9058             STR      R0,[SP, #+352]
     64            uint32_t savedCurrentTime, nvicPendingMask;
     65            uint8_t i;
     66            extern volatile  uint8_t wakeupFromSleepFlag;
     67            /* System Control saved */
     68            uint32_t SYS_Ctrl_saved;
     69            /* NVIC Information Saved */
     70            uint32_t NVIC_ISER_saved, NVIC_IPR_saved[8], PENDSV_SYSTICK_IPR_saved;
     71            /* CKGEN SOC Enabled */
     72            uint32_t CLOCK_EN_saved;
     73            /* GPIO Information saved */
     74            uint32_t GPIO_DATA_saved, GPIO_OEN_saved, GPIO_PE_saved, GPIO_DS_saved, GPIO_IS_saved, GPIO_IBE_save;
     75            uint32_t GPIO_IEV_saved, GPIO_IE_saved, GPIO_MODE0_saved, GPIO_MODE1_saved, GPIO_IOSEL_MFTX_saved;
     76            /* UART Information saved */
     77            uint32_t UART_TIMEOUT_saved, UART_LCRH_RX_saved, UART_IBRD_saved, UART_FBRD_saved;
     78            uint32_t UART_LCRH_TX_saved, UART_CR_saved, UART_IFLS_saved, UART_IMSC_saved;
     79            uint32_t UART_DMACR_saved, UART_XFCR_saved, UART_XON1_saved, UART_XON2_saved;
     80            uint32_t UART_XOFF1_saved, UART_XOFF2_saved;
     81            /* SPI Information saved */
     82            uint32_t SPI_CR0_saved, SPI_CR1_saved, SPI_CPSR_saved, SPI_IMSC_saved, SPI_DMACR_saved;
     83            uint32_t SPI_RXFRM_saved, SPI_CHN_saved, SPI_WDTXF_saved;
     84            /* I2C Information saved */
     85            uint32_t I2C_CR_saved[2], I2C_SCR_saved[2], I2C_TFTR_saved[2], I2C_RFTR_saved[2];
     86            uint32_t I2C_DMAR_saved[2], I2C_BRCR_saved[2], I2C_IMSCR_saved[2], I2C_THDDAT_saved[2];
     87            uint32_t I2C_THDSTA_FST_STD_saved[2], I2C_TSUSTA_FST_STD_saved[2];
     88            /* RNG Information saved */
     89            uint32_t RNG_CR_saved;
     90            /* SysTick Information saved */
     91            uint32_t SYST_CSR_saved, SYST_RVR_saved;
     92            /* RTC Information saved */
     93            uint32_t RTC_CWDMR_saved, RTC_CWDLR_saved, RTC_CWYMR_saved, RTC_CWYLR_saved, RTC_CTCR_saved;
     94            uint32_t RTC_IMSC_saved, RTC_TCR_saved, RTC_TLR1_saved, RTC_TLR2_saved, RTC_TPR1_saved;
     95            uint32_t RTC_TPR2_saved, RTC_TPR3_saved, RTC_TPR4_saved;
     96            /* MFTX Information saved */
     97            uint32_t T1CRA_saved, T1CRB_saved, T1PRSC_saved, T1CKC_saved, T1MCTRL_saved, T1ICTRL_saved;
     98            uint32_t T2CRA_saved, T2CRB_saved, T2PRSC_saved, T2CKC_saved, T2MCTRL_saved, T2ICTRL_saved;
     99            /* WDT Information saved */
    100            uint32_t WDG_LR_saved, WDG_CR_saved, WDG_LOCK_saved;
    101            /* DMA channel [0..7] Information saved */
    102            uint32_t DMA_CCR_saved[8], DMA_CNDTR_saved[8], DMA_CPAR_saved[8], DMA_CMAR[8];
    103            /* ADC Information saved */
    104            uint32_t ADC_CTRL_saved, ADC_CONF_saved, ADC_IRQMASK_saved, ADC_OFFSET_saved;
    105            uint32_t ADC_THRESHOLD_HI_saved, ADC_THRESHOLD_LO_saved;
    106            /* FlASH Config saved */
    107            uint32_t FLASH_CONFIG_saved;
    108            /* PKA Information saved */
    109            uint32_t PKA_IEN_saved;
    110          
    111          
    112            /* Save the peripherals configuration */
    113            /* System Control */
    114            SYS_Ctrl_saved = SYSTEM_CTRL->CTRL;
    115            /* FLASH CONFIG */
    116            FLASH_CONFIG_saved = FLASH->CONFIG;
    117            /* NVIC */
    118            NVIC_ISER_saved = NVIC->ISER[0];
    119          
    120            // Issue with Atollic compiler
    121          //  memcpy(NVIC_IPR_saved, (void const *)NVIC->IP, sizeof(NVIC_IPR_saved));
    122            for (i=0; i<8; i++) {
    123            	NVIC_IPR_saved[i] = NVIC->IP[i];
   \   0000001E   0x48E2             LDR      R0,??BlueNRG_InternalSleep_1  ;; 0xe000e400
   \   00000020   0x6840             LDR      R0,[R0, #+4]
   \   00000022   0x9057             STR      R0,[SP, #+348]
   \   00000024   0x48E0             LDR      R0,??BlueNRG_InternalSleep_1  ;; 0xe000e400
   \   00000026   0x6880             LDR      R0,[R0, #+8]
   \   00000028   0x9056             STR      R0,[SP, #+344]
   \   0000002A   0x48DF             LDR      R0,??BlueNRG_InternalSleep_1  ;; 0xe000e400
   \   0000002C   0x68C0             LDR      R0,[R0, #+12]
   \   0000002E   0x9055             STR      R0,[SP, #+340]
   \   00000030   0x48DD             LDR      R0,??BlueNRG_InternalSleep_1  ;; 0xe000e400
   \   00000032   0x6900             LDR      R0,[R0, #+16]
   \   00000034   0x9054             STR      R0,[SP, #+336]
   \   00000036   0x48DC             LDR      R0,??BlueNRG_InternalSleep_1  ;; 0xe000e400
   \   00000038   0x6940             LDR      R0,[R0, #+20]
   \   0000003A   0x9053             STR      R0,[SP, #+332]
   \   0000003C   0x48DA             LDR      R0,??BlueNRG_InternalSleep_1  ;; 0xe000e400
   \   0000003E   0x6980             LDR      R0,[R0, #+24]
   \   00000040   0x9052             STR      R0,[SP, #+328]
   \   00000042   0x48D9             LDR      R0,??BlueNRG_InternalSleep_1  ;; 0xe000e400
   \   00000044   0x69C0             LDR      R0,[R0, #+28]
   \   00000046   0x9051             STR      R0,[SP, #+324]
   \   00000048   0x48D8             LDR      R0,??BlueNRG_InternalSleep_1+0x4  ;; 0xe000ed04
   \   0000004A   0x69C0             LDR      R0,[R0, #+28]
   \   0000004C   0x9050             STR      R0,[SP, #+320]
   \   0000004E   0x48D8             LDR      R0,??BlueNRG_InternalSleep_1+0x8  ;; 0x40900008
   \   00000050   0x6980             LDR      R0,[R0, #+24]
   \   00000052   0x904F             STR      R0,[SP, #+316]
   \   00000054   0x2080             MOVS     R0,#+128
   \   00000056   0x05C0             LSLS     R0,R0,#+23       ;; #+1073741824
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x904E             STR      R0,[SP, #+312]
    124            }
    125          
    126          
    127            PENDSV_SYSTICK_IPR_saved = *(volatile uint32_t *)SHPR3_REG;
    128            /* CKGEN SOC Enabled */
    129            CLOCK_EN_saved = CKGEN_SOC->CLOCK_EN;
    130            /* GPIO */
    131            GPIO_DATA_saved = GPIO->DATA;
    132            GPIO_OEN_saved = GPIO->OEN;
   \   0000005C   0x2080             MOVS     R0,#+128
   \   0000005E   0x05C0             LSLS     R0,R0,#+23       ;; #+1073741824
   \   00000060   0x6840             LDR      R0,[R0, #+4]
   \   00000062   0x904D             STR      R0,[SP, #+308]
    133            GPIO_PE_saved = GPIO->PE;
   \   00000064   0x2080             MOVS     R0,#+128
   \   00000066   0x05C0             LSLS     R0,R0,#+23       ;; #+1073741824
   \   00000068   0x6880             LDR      R0,[R0, #+8]
   \   0000006A   0x904C             STR      R0,[SP, #+304]
    134            GPIO_DS_saved = GPIO->DS;
   \   0000006C   0x2080             MOVS     R0,#+128
   \   0000006E   0x05C0             LSLS     R0,R0,#+23       ;; #+1073741824
   \   00000070   0x68C0             LDR      R0,[R0, #+12]
   \   00000072   0x904B             STR      R0,[SP, #+300]
    135            GPIO_IS_saved = GPIO->IS;
   \   00000074   0x2080             MOVS     R0,#+128
   \   00000076   0x05C0             LSLS     R0,R0,#+23       ;; #+1073741824
   \   00000078   0x6900             LDR      R0,[R0, #+16]
   \   0000007A   0x904A             STR      R0,[SP, #+296]
    136            GPIO_IBE_save = GPIO->IBE;
   \   0000007C   0x2080             MOVS     R0,#+128
   \   0000007E   0x05C0             LSLS     R0,R0,#+23       ;; #+1073741824
   \   00000080   0x6940             LDR      R0,[R0, #+20]
   \   00000082   0x9049             STR      R0,[SP, #+292]
    137            GPIO_IEV_saved = GPIO->IEV;
   \   00000084   0x2080             MOVS     R0,#+128
   \   00000086   0x05C0             LSLS     R0,R0,#+23       ;; #+1073741824
   \   00000088   0x6980             LDR      R0,[R0, #+24]
   \   0000008A   0x9048             STR      R0,[SP, #+288]
    138            GPIO_IE_saved = GPIO->IE;
   \   0000008C   0x2080             MOVS     R0,#+128
   \   0000008E   0x05C0             LSLS     R0,R0,#+23       ;; #+1073741824
   \   00000090   0x69C0             LDR      R0,[R0, #+28]
   \   00000092   0x9047             STR      R0,[SP, #+284]
    139            GPIO_MODE0_saved = GPIO->MODE0;
   \   00000094   0x2080             MOVS     R0,#+128
   \   00000096   0x05C0             LSLS     R0,R0,#+23       ;; #+1073741824
   \   00000098   0x6AC0             LDR      R0,[R0, #+44]
   \   0000009A   0x9046             STR      R0,[SP, #+280]
    140            GPIO_MODE1_saved = GPIO->MODE1;
   \   0000009C   0x2080             MOVS     R0,#+128
   \   0000009E   0x05C0             LSLS     R0,R0,#+23       ;; #+1073741824
   \   000000A0   0x6B00             LDR      R0,[R0, #+48]
   \   000000A2   0x9045             STR      R0,[SP, #+276]
    141            GPIO_IOSEL_MFTX_saved = GPIO->MFTX;
   \   000000A4   0x2080             MOVS     R0,#+128
   \   000000A6   0x05C0             LSLS     R0,R0,#+23       ;; #+1073741824
   \   000000A8   0x6C40             LDR      R0,[R0, #+68]
   \   000000AA   0x9044             STR      R0,[SP, #+272]
   \   000000AC   0x48C9             LDR      R0,??BlueNRG_InternalSleep_2  ;; 0x4030000c
   \   000000AE   0x6800             LDR      R0,[R0, #+0]
   \   000000B0   0x9043             STR      R0,[SP, #+268]
    142            /* UART */
    143            UART_TIMEOUT_saved = UART->TIMEOUT;
    144            UART_LCRH_RX_saved = UART->LCRH_RX;
   \   000000B2   0x48C8             LDR      R0,??BlueNRG_InternalSleep_2  ;; 0x4030000c
   \   000000B4   0x7C00             LDRB     R0,[R0, #+16]
   \   000000B6   0x9042             STR      R0,[SP, #+264]
    145            UART_IBRD_saved = UART->IBRD;
   \   000000B8   0x48C6             LDR      R0,??BlueNRG_InternalSleep_2  ;; 0x4030000c
   \   000000BA   0x8B00             LDRH     R0,[R0, #+24]
   \   000000BC   0x9041             STR      R0,[SP, #+260]
    146            UART_FBRD_saved = UART->FBRD;
   \   000000BE   0x48C5             LDR      R0,??BlueNRG_InternalSleep_2  ;; 0x4030000c
   \   000000C0   0x7F00             LDRB     R0,[R0, #+28]
   \   000000C2   0x9040             STR      R0,[SP, #+256]
   \   000000C4   0x48C4             LDR      R0,??BlueNRG_InternalSleep_2+0x4  ;; 0x4030002c
   \   000000C6   0x7800             LDRB     R0,[R0, #+0]
   \   000000C8   0x903F             STR      R0,[SP, #+252]
    147            UART_LCRH_TX_saved =  UART->LCRH_TX;
    148            UART_CR_saved = UART->CR;
   \   000000CA   0x48C3             LDR      R0,??BlueNRG_InternalSleep_2+0x4  ;; 0x4030002c
   \   000000CC   0x6840             LDR      R0,[R0, #+4]
   \   000000CE   0x903E             STR      R0,[SP, #+248]
    149            UART_IFLS_saved = UART->IFLS;
   \   000000D0   0x48C1             LDR      R0,??BlueNRG_InternalSleep_2+0x4  ;; 0x4030002c
   \   000000D2   0x7A00             LDRB     R0,[R0, #+8]
   \   000000D4   0x903D             STR      R0,[SP, #+244]
    150            UART_IMSC_saved = UART->IMSC;
   \   000000D6   0x48C0             LDR      R0,??BlueNRG_InternalSleep_2+0x4  ;; 0x4030002c
   \   000000D8   0x8980             LDRH     R0,[R0, #+12]
   \   000000DA   0x903C             STR      R0,[SP, #+240]
    151            UART_DMACR_saved = UART->DMACR;
   \   000000DC   0x48BE             LDR      R0,??BlueNRG_InternalSleep_2+0x4  ;; 0x4030002c
   \   000000DE   0x7F00             LDRB     R0,[R0, #+28]
   \   000000E0   0x903B             STR      R0,[SP, #+236]
   \   000000E2   0x48BE             LDR      R0,??BlueNRG_InternalSleep_2+0x8  ;; 0x40300050
   \   000000E4   0x7800             LDRB     R0,[R0, #+0]
   \   000000E6   0x903A             STR      R0,[SP, #+232]
    152            UART_XFCR_saved = UART->XFCR;
    153            UART_XON1_saved = UART->XON1;
   \   000000E8   0x48BC             LDR      R0,??BlueNRG_InternalSleep_2+0x8  ;; 0x40300050
   \   000000EA   0x7900             LDRB     R0,[R0, #+4]
   \   000000EC   0x9039             STR      R0,[SP, #+228]
    154            UART_XON2_saved = UART->XON2;
   \   000000EE   0x48BB             LDR      R0,??BlueNRG_InternalSleep_2+0x8  ;; 0x40300050
   \   000000F0   0x7A00             LDRB     R0,[R0, #+8]
   \   000000F2   0x9038             STR      R0,[SP, #+224]
    155            UART_XOFF1_saved = UART->XOFF1;
   \   000000F4   0x48B9             LDR      R0,??BlueNRG_InternalSleep_2+0x8  ;; 0x40300050
   \   000000F6   0x7B00             LDRB     R0,[R0, #+12]
   \   000000F8   0x9037             STR      R0,[SP, #+220]
    156            UART_XOFF2_saved = UART->XOFF2;
   \   000000FA   0x48B8             LDR      R0,??BlueNRG_InternalSleep_2+0x8  ;; 0x40300050
   \   000000FC   0x7C00             LDRB     R0,[R0, #+16]
   \   000000FE   0x9036             STR      R0,[SP, #+216]
   \   00000100   0x48B7             LDR      R0,??BlueNRG_InternalSleep_2+0xC  ;; 0x40400000
   \   00000102   0x6800             LDR      R0,[R0, #+0]
   \   00000104   0x9035             STR      R0,[SP, #+212]
    157            /* SPI */
    158            SPI_CR0_saved = SPI1->CR0;
    159            SPI_CR1_saved = SPI1->CR1;
   \   00000106   0x48B6             LDR      R0,??BlueNRG_InternalSleep_2+0xC  ;; 0x40400000
   \   00000108   0x6840             LDR      R0,[R0, #+4]
   \   0000010A   0x9034             STR      R0,[SP, #+208]
    160            SPI_CPSR_saved = SPI1->CPSR;
   \   0000010C   0x48B4             LDR      R0,??BlueNRG_InternalSleep_2+0xC  ;; 0x40400000
   \   0000010E   0x7C00             LDRB     R0,[R0, #+16]
   \   00000110   0x9033             STR      R0,[SP, #+204]
    161            SPI_IMSC_saved = SPI1->IMSC;
   \   00000112   0x48B3             LDR      R0,??BlueNRG_InternalSleep_2+0xC  ;; 0x40400000
   \   00000114   0x7D00             LDRB     R0,[R0, #+20]
   \   00000116   0x9032             STR      R0,[SP, #+200]
   \   00000118   0x48B2             LDR      R0,??BlueNRG_InternalSleep_2+0x10  ;; 0x40400024
   \   0000011A   0x7800             LDRB     R0,[R0, #+0]
   \   0000011C   0x9031             STR      R0,[SP, #+196]
    162            SPI_DMACR_saved = SPI1->DMACR;
    163            SPI_RXFRM_saved = SPI1->RXFRM;
   \   0000011E   0x48B1             LDR      R0,??BlueNRG_InternalSleep_2+0x10  ;; 0x40400024
   \   00000120   0x8880             LDRH     R0,[R0, #+4]
   \   00000122   0x9030             STR      R0,[SP, #+192]
    164            SPI_CHN_saved = SPI1->CHN;
   \   00000124   0x48AF             LDR      R0,??BlueNRG_InternalSleep_2+0x10  ;; 0x40400024
   \   00000126   0x6880             LDR      R0,[R0, #+8]
   \   00000128   0x902F             STR      R0,[SP, #+188]
    165            SPI_WDTXF_saved = SPI1->WDTXF;
   \   0000012A   0x48AE             LDR      R0,??BlueNRG_InternalSleep_2+0x10  ;; 0x40400024
   \   0000012C   0x8980             LDRH     R0,[R0, #+12]
   \   0000012E   0x902E             STR      R0,[SP, #+184]
   \   00000130   0x2000             MOVS     R0,#+0
   \   00000132   0x9000             STR      R0,[SP, #+0]
   \   00000134   0xA86D             ADD      R0,SP,#+436
   \   00000136   0x9001             STR      R0,[SP, #+4]
   \   00000138   0xA86B             ADD      R0,SP,#+428
   \   0000013A   0x9002             STR      R0,[SP, #+8]
   \   0000013C   0xA869             ADD      R0,SP,#+420
   \   0000013E   0x9003             STR      R0,[SP, #+12]
   \   00000140   0xA867             ADD      R0,SP,#+412
   \   00000142   0x9004             STR      R0,[SP, #+16]
   \   00000144   0xA865             ADD      R0,SP,#+404
   \   00000146   0x9005             STR      R0,[SP, #+20]
   \   00000148   0xA863             ADD      R0,SP,#+396
   \   0000014A   0xA961             ADD      R1,SP,#+388
   \   0000014C   0xAA5F             ADD      R2,SP,#+380
   \   0000014E   0xAB5D             ADD      R3,SP,#+372
   \   00000150   0xAC5B             ADD      R4,SP,#+364
    166            /* I2C */
    167            for (i=0; i<2; i++) {
    168              I2C_Type *I2Cx = (I2C_Type*)(I2C2_BASE+ 0x100000*i);
   \                     ??BlueNRG_InternalSleep_3: (+1)
   \   00000152   0x9D00             LDR      R5,[SP, #+0]
   \   00000154   0x052D             LSLS     R5,R5,#+20
   \   00000156   0x4EA4             LDR      R6,??BlueNRG_InternalSleep_2+0x14  ;; 0x40a00000
   \   00000158   0x19AD             ADDS     R5,R5,R6
    169              I2C_CR_saved[i] = I2Cx->CR;
   \   0000015A   0x682E             LDR      R6,[R5, #+0]
   \   0000015C   0x9F01             LDR      R7,[SP, #+4]
   \   0000015E   0x603E             STR      R6,[R7, #+0]
    170              I2C_SCR_saved[i] = I2Cx->SCR;
   \   00000160   0x686E             LDR      R6,[R5, #+4]
   \   00000162   0x9F02             LDR      R7,[SP, #+8]
   \   00000164   0x603E             STR      R6,[R7, #+0]
    171              I2C_TFTR_saved[i] = I2Cx->TFTR;
   \   00000166   0x8BAE             LDRH     R6,[R5, #+28]
   \   00000168   0x9F03             LDR      R7,[SP, #+12]
   \   0000016A   0x603E             STR      R6,[R7, #+0]
    172              I2C_RFTR_saved[i] = I2Cx->RFTR;
   \   0000016C   0x8C2E             LDRH     R6,[R5, #+32]
   \   0000016E   0x9F04             LDR      R7,[SP, #+16]
   \   00000170   0x603E             STR      R6,[R7, #+0]
    173              I2C_DMAR_saved[i] = I2Cx->DMAR;
   \   00000172   0x8CAE             LDRH     R6,[R5, #+36]
   \   00000174   0x9F05             LDR      R7,[SP, #+20]
   \   00000176   0x603E             STR      R6,[R7, #+0]
    174              I2C_BRCR_saved[i] = I2Cx->BRCR;
   \   00000178   0x8D2E             LDRH     R6,[R5, #+40]
   \   0000017A   0x6006             STR      R6,[R0, #+0]
    175              I2C_IMSCR_saved[i] = I2Cx->IMSCR;
   \   0000017C   0x6AEE             LDR      R6,[R5, #+44]
   \   0000017E   0x600E             STR      R6,[R1, #+0]
    176              I2C_THDDAT_saved[i] = I2Cx->THDDAT;
   \   00000180   0x354C             ADDS     R5,R5,#+76
   \   00000182   0x882E             LDRH     R6,[R5, #+0]
   \   00000184   0x6016             STR      R6,[R2, #+0]
    177              I2C_THDSTA_FST_STD_saved[i] = I2Cx->THDSTA_FST_STD;
   \   00000186   0x686E             LDR      R6,[R5, #+4]
   \   00000188   0x601E             STR      R6,[R3, #+0]
    178              I2C_TSUSTA_FST_STD_saved[i] = I2Cx->TSUSTA_FST_STD;
   \   0000018A   0x68ED             LDR      R5,[R5, #+12]
   \   0000018C   0x6025             STR      R5,[R4, #+0]
    179            }
   \   0000018E   0x9D00             LDR      R5,[SP, #+0]
   \   00000190   0x1C6D             ADDS     R5,R5,#+1
   \   00000192   0x9500             STR      R5,[SP, #+0]
   \   00000194   0x1D24             ADDS     R4,R4,#+4
   \   00000196   0x1D1B             ADDS     R3,R3,#+4
   \   00000198   0x1D12             ADDS     R2,R2,#+4
   \   0000019A   0x1D09             ADDS     R1,R1,#+4
   \   0000019C   0x1D00             ADDS     R0,R0,#+4
   \   0000019E   0x9D05             LDR      R5,[SP, #+20]
   \   000001A0   0x1D2D             ADDS     R5,R5,#+4
   \   000001A2   0x9505             STR      R5,[SP, #+20]
   \   000001A4   0x9D04             LDR      R5,[SP, #+16]
   \   000001A6   0x1D2D             ADDS     R5,R5,#+4
   \   000001A8   0x9504             STR      R5,[SP, #+16]
   \   000001AA   0x9D03             LDR      R5,[SP, #+12]
   \   000001AC   0x1D2D             ADDS     R5,R5,#+4
   \   000001AE   0x9503             STR      R5,[SP, #+12]
   \   000001B0   0x9D02             LDR      R5,[SP, #+8]
   \   000001B2   0x1D2D             ADDS     R5,R5,#+4
   \   000001B4   0x9502             STR      R5,[SP, #+8]
   \   000001B6   0x9D01             LDR      R5,[SP, #+4]
   \   000001B8   0x1D2D             ADDS     R5,R5,#+4
   \   000001BA   0x9501             STR      R5,[SP, #+4]
   \   000001BC   0x9D00             LDR      R5,[SP, #+0]
   \   000001BE   0x2D02             CMP      R5,#+2
   \   000001C0   0xDBC7             BLT      ??BlueNRG_InternalSleep_3
   \   000001C2   0x20B0             MOVS     R0,#+176
   \   000001C4   0x0600             LSLS     R0,R0,#+24       ;; #-1342177280
   \   000001C6   0x6800             LDR      R0,[R0, #+0]
   \   000001C8   0x902D             STR      R0,[SP, #+180]
    180            /* RNG */
    181            RNG_CR_saved = RNG->CR;
    182            /* RTC */
    183            RTC_CWDMR_saved = RTC->CWDMR;
   \   000001CA   0x4C88             LDR      R4,??BlueNRG_InternalSleep_2+0x18  ;; 0x40f00004
   \   000001CC   0x6820             LDR      R0,[R4, #+0]
   \   000001CE   0x902C             STR      R0,[SP, #+176]
    184            RTC_CWDLR_saved = RTC->CWDLR;
   \   000001D0   0x6860             LDR      R0,[R4, #+4]
   \   000001D2   0x902B             STR      R0,[SP, #+172]
    185            RTC_CWYMR_saved = RTC->CWYMR;
   \   000001D4   0x89A0             LDRH     R0,[R4, #+12]
   \   000001D6   0x902A             STR      R0,[SP, #+168]
    186            RTC_CWYLR_saved = RTC->CWYLR;
   \   000001D8   0x8A20             LDRH     R0,[R4, #+16]
   \   000001DA   0x9029             STR      R0,[SP, #+164]
    187            RTC_CTCR_saved = RTC->CTCR;
   \   000001DC   0x6960             LDR      R0,[R4, #+20]
   \   000001DE   0x9028             STR      R0,[SP, #+160]
    188            RTC_IMSC_saved = RTC->IMSC;
   \   000001E0   0x7E20             LDRB     R0,[R4, #+24]
   \   000001E2   0x9027             STR      R0,[SP, #+156]
    189            RTC_TCR_saved = RTC->TCR;
   \   000001E4   0x8DA0             LDRH     R0,[R4, #+44]
   \   000001E6   0x9026             STR      R0,[SP, #+152]
    190            RTC_TLR1_saved = RTC->TLR1;
   \   000001E8   0x6B20             LDR      R0,[R4, #+48]
   \   000001EA   0x9025             STR      R0,[SP, #+148]
    191            RTC_TLR2_saved = RTC->TLR2;
   \   000001EC   0x6B60             LDR      R0,[R4, #+52]
   \   000001EE   0x9024             STR      R0,[SP, #+144]
    192            RTC_TPR1_saved = RTC->TPR1;
   \   000001F0   0x6BA0             LDR      R0,[R4, #+56]
   \   000001F2   0x9023             STR      R0,[SP, #+140]
    193            RTC_TPR2_saved = RTC->TPR2;
   \   000001F4   0x6BE0             LDR      R0,[R4, #+60]
   \   000001F6   0x9022             STR      R0,[SP, #+136]
    194            RTC_TPR3_saved = RTC->TPR3;
   \   000001F8   0x6C20             LDR      R0,[R4, #+64]
   \   000001FA   0x9021             STR      R0,[SP, #+132]
    195            RTC_TPR4_saved = RTC->TPR4;
   \   000001FC   0x6C60             LDR      R0,[R4, #+68]
   \   000001FE   0x9020             STR      R0,[SP, #+128]
   \   00000200   0x487B             LDR      R0,??BlueNRG_InternalSleep_2+0x1C  ;; 0x40d00004
   \   00000202   0x8800             LDRH     R0,[R0, #+0]
   \   00000204   0x901F             STR      R0,[SP, #+124]
    196            /* MFTX */
    197            T1CRA_saved = MFT1->TNCRA;
    198            T1CRB_saved = MFT1->TNCRB;
   \   00000206   0x487A             LDR      R0,??BlueNRG_InternalSleep_2+0x1C  ;; 0x40d00004
   \   00000208   0x8880             LDRH     R0,[R0, #+4]
   \   0000020A   0x901E             STR      R0,[SP, #+120]
    199            T1PRSC_saved = MFT1->TNPRSC;
   \   0000020C   0x4878             LDR      R0,??BlueNRG_InternalSleep_2+0x1C  ;; 0x40d00004
   \   0000020E   0x7B00             LDRB     R0,[R0, #+12]
   \   00000210   0x901D             STR      R0,[SP, #+116]
    200            T1CKC_saved = MFT1->TNCKC;
   \   00000212   0x4877             LDR      R0,??BlueNRG_InternalSleep_2+0x1C  ;; 0x40d00004
   \   00000214   0x7C00             LDRB     R0,[R0, #+16]
   \   00000216   0x901C             STR      R0,[SP, #+112]
    201            T1MCTRL_saved = MFT1->TNMCTRL;
   \   00000218   0x4875             LDR      R0,??BlueNRG_InternalSleep_2+0x1C  ;; 0x40d00004
   \   0000021A   0x8A80             LDRH     R0,[R0, #+20]
   \   0000021C   0x901B             STR      R0,[SP, #+108]
    202            T1ICTRL_saved = MFT1->TNICTRL;
   \   0000021E   0x4874             LDR      R0,??BlueNRG_InternalSleep_2+0x1C  ;; 0x40d00004
   \   00000220   0x7E00             LDRB     R0,[R0, #+24]
   \   00000222   0x901A             STR      R0,[SP, #+104]
   \   00000224   0x4873             LDR      R0,??BlueNRG_InternalSleep_2+0x20  ;; 0x40e00004
   \   00000226   0x8800             LDRH     R0,[R0, #+0]
   \   00000228   0x9019             STR      R0,[SP, #+100]
    203            T2CRA_saved = MFT2->TNCRA;
    204            T2CRB_saved = MFT2->TNCRB;
   \   0000022A   0x4872             LDR      R0,??BlueNRG_InternalSleep_2+0x20  ;; 0x40e00004
   \   0000022C   0x8880             LDRH     R0,[R0, #+4]
   \   0000022E   0x9018             STR      R0,[SP, #+96]
    205            T2PRSC_saved = MFT2->TNPRSC;
   \   00000230   0x4870             LDR      R0,??BlueNRG_InternalSleep_2+0x20  ;; 0x40e00004
   \   00000232   0x7B00             LDRB     R0,[R0, #+12]
   \   00000234   0x9017             STR      R0,[SP, #+92]
    206            T2CKC_saved = MFT2->TNCKC;
   \   00000236   0x486F             LDR      R0,??BlueNRG_InternalSleep_2+0x20  ;; 0x40e00004
   \   00000238   0x7C00             LDRB     R0,[R0, #+16]
   \   0000023A   0x9016             STR      R0,[SP, #+88]
    207            T2MCTRL_saved = MFT2->TNMCTRL;
   \   0000023C   0x486D             LDR      R0,??BlueNRG_InternalSleep_2+0x20  ;; 0x40e00004
   \   0000023E   0x8A80             LDRH     R0,[R0, #+20]
   \   00000240   0x9015             STR      R0,[SP, #+84]
    208            T2ICTRL_saved = MFT2->TNICTRL;
   \   00000242   0x486C             LDR      R0,??BlueNRG_InternalSleep_2+0x20  ;; 0x40e00004
   \   00000244   0x7E00             LDRB     R0,[R0, #+24]
   \   00000246   0x9014             STR      R0,[SP, #+80]
   \   00000248   0x486B             LDR      R0,??BlueNRG_InternalSleep_2+0x24  ;; 0xe000e010
   \   0000024A   0x6800             LDR      R0,[R0, #+0]
   \   0000024C   0x9013             STR      R0,[SP, #+76]
    209            /* SysTick */
    210            SYST_CSR_saved = SysTick->CTRL;
    211            SYST_RVR_saved = SysTick->LOAD;
   \   0000024E   0x486A             LDR      R0,??BlueNRG_InternalSleep_2+0x24  ;; 0xe000e010
   \   00000250   0x6840             LDR      R0,[R0, #+4]
   \   00000252   0x9012             STR      R0,[SP, #+72]
   \   00000254   0x4869             LDR      R0,??BlueNRG_InternalSleep_2+0x28  ;; 0x40700000
   \   00000256   0x6800             LDR      R0,[R0, #+0]
   \   00000258   0x9011             STR      R0,[SP, #+68]
    212            /* WDT */
    213            WDG_LR_saved = WDG->LR;
    214            WDG_CR_saved = WDG->CR;
   \   0000025A   0x4868             LDR      R0,??BlueNRG_InternalSleep_2+0x28  ;; 0x40700000
   \   0000025C   0x7A00             LDRB     R0,[R0, #+8]
   \   0000025E   0x9010             STR      R0,[SP, #+64]
   \   00000260   0x4867             LDR      R0,??BlueNRG_InternalSleep_2+0x2C  ;; 0x40700c00
   \   00000262   0x6800             LDR      R0,[R0, #+0]
   \   00000264   0x2800             CMP      R0,#+0
   \   00000266   0xD107             BNE      ??BlueNRG_InternalSleep_4
    215            if(WDG->LOCK == 0) {
    216              WDG_LOCK_saved = 0x1ACCE551;
   \   00000268   0x4866             LDR      R0,??BlueNRG_InternalSleep_2+0x30  ;; 0x1acce551
   \   0000026A   0xE006             B        ??BlueNRG_InternalSleep_5
   \                     ??BlueNRG_InternalSleep_0:
   \   0000026C   0x40200008         DC32     0x40200008
   \   00000270   0x40100004         DC32     0x40100004
   \   00000274   0xE000E100         DC32     0xe000e100
    217            } else {
    218              WDG_LOCK_saved = 0;
   \                     ??BlueNRG_InternalSleep_4: (+1)
   \   00000278   0x2000             MOVS     R0,#+0
   \                     ??BlueNRG_InternalSleep_5: (+1)
   \   0000027A   0x9007             STR      R0,[SP, #+28]
    219            }
    220            /* DMA */
    221            for (i=0; i<8; i++) {
   \   0000027C   0x2000             MOVS     R0,#+0
   \   0000027E   0xA987             ADD      R1,SP,#+540
   \   00000280   0xAA7F             ADD      R2,SP,#+508
   \   00000282   0xAB77             ADD      R3,SP,#+476
   \   00000284   0xAD6F             ADD      R5,SP,#+444
    222              DMA_CH_Type *DMAx = (DMA_CH_Type*)(DMA_CH0_BASE+ 0x14*i);
   \                     ??BlueNRG_InternalSleep_6: (+1)
   \   00000286   0x0086             LSLS     R6,R0,#+2
   \   00000288   0x1836             ADDS     R6,R6,R0
   \   0000028A   0x00B6             LSLS     R6,R6,#+2
   \   0000028C   0x4F5E             LDR      R7,??BlueNRG_InternalSleep_2+0x34  ;; 0xa0000008
   \   0000028E   0x19F6             ADDS     R6,R6,R7
    223              DMA_CCR_saved[i] = DMAx->CCR;
   \   00000290   0x6837             LDR      R7,[R6, #+0]
   \   00000292   0x600F             STR      R7,[R1, #+0]
    224              DMA_CNDTR_saved[i] = DMAx->CNDTR;
   \   00000294   0x6877             LDR      R7,[R6, #+4]
   \   00000296   0x6017             STR      R7,[R2, #+0]
    225              DMA_CPAR_saved[i] = DMAx->CPAR;
   \   00000298   0x68B7             LDR      R7,[R6, #+8]
   \   0000029A   0x601F             STR      R7,[R3, #+0]
    226              DMA_CMAR[i] = DMAx->CMAR;
   \   0000029C   0x68F6             LDR      R6,[R6, #+12]
   \   0000029E   0x602E             STR      R6,[R5, #+0]
    227            }
   \   000002A0   0x1C40             ADDS     R0,R0,#+1
   \   000002A2   0x1D2D             ADDS     R5,R5,#+4
   \   000002A4   0x1D1B             ADDS     R3,R3,#+4
   \   000002A6   0x1D12             ADDS     R2,R2,#+4
   \   000002A8   0x1D09             ADDS     R1,R1,#+4
   \   000002AA   0x2808             CMP      R0,#+8
   \   000002AC   0xDBEB             BLT      ??BlueNRG_InternalSleep_6
   \   000002AE   0x2081             MOVS     R0,#+129
   \   000002B0   0x05C0             LSLS     R0,R0,#+23       ;; #+1082130432
   \   000002B2   0x8800             LDRH     R0,[R0, #+0]
   \   000002B4   0x900F             STR      R0,[SP, #+60]
    228            /* ADC */
    229            ADC_CTRL_saved = ADC->CTRL;
    230            ADC_CONF_saved = ADC->CONF;
   \   000002B6   0x2081             MOVS     R0,#+129
   \   000002B8   0x05C0             LSLS     R0,R0,#+23       ;; #+1082130432
   \   000002BA   0x6840             LDR      R0,[R0, #+4]
   \   000002BC   0x900E             STR      R0,[SP, #+56]
    231            ADC_IRQMASK_saved = ADC->IRQMASK;
   \   000002BE   0x2081             MOVS     R0,#+129
   \   000002C0   0x05C0             LSLS     R0,R0,#+23       ;; #+1082130432
   \   000002C2   0x7B00             LDRB     R0,[R0, #+12]
   \   000002C4   0x900D             STR      R0,[SP, #+52]
    232            ADC_OFFSET_saved = ADC->OFFSET;
   \   000002C6   0x2081             MOVS     R0,#+129
   \   000002C8   0x05C0             LSLS     R0,R0,#+23       ;; #+1082130432
   \   000002CA   0x6980             LDR      R0,[R0, #+24]
   \   000002CC   0x900C             STR      R0,[SP, #+48]
    233            ADC_THRESHOLD_HI_saved = ADC->THRESHOLD_HI;
   \   000002CE   0x2081             MOVS     R0,#+129
   \   000002D0   0x05C0             LSLS     R0,R0,#+23       ;; #+1082130432
   \   000002D2   0x6A40             LDR      R0,[R0, #+36]
   \   000002D4   0x900B             STR      R0,[SP, #+44]
    234            ADC_THRESHOLD_LO_saved = ADC->THRESHOLD_LO;
   \   000002D6   0x2081             MOVS     R0,#+129
   \   000002D8   0x05C0             LSLS     R0,R0,#+23       ;; #+1082130432
   \   000002DA   0x6A80             LDR      R0,[R0, #+40]
   \   000002DC   0x900A             STR      R0,[SP, #+40]
   \   000002DE   0x484B             LDR      R0,??BlueNRG_InternalSleep_2+0x38  ;; 0xc0000008
   \   000002E0   0x6800             LDR      R0,[R0, #+0]
   \   000002E2   0x9009             STR      R0,[SP, #+36]
    235            /* PKA */
    236            PKA_IEN_saved = PKA->IEN;
    237          
    238            // Enable the STANDBY mode
    239            if (sleepMode == SLEEPMODE_NOTIMER) {
   \   000002E4   0xA88F             ADD      R0,SP,#+572
   \   000002E6   0x7800             LDRB     R0,[R0, #+0]
   \   000002E8   0x9006             STR      R0,[SP, #+24]
   \   000002EA   0x2803             CMP      R0,#+3
   \   000002EC   0xD105             BNE      ??BlueNRG_InternalSleep_7
    240              BLUE_CTRL->TIMEOUT |= LOW_POWER_STANDBY<<28;
   \   000002EE   0x4948             LDR      R1,??BlueNRG_InternalSleep_2+0x3C  ;; 0x48000004
   \   000002F0   0x6808             LDR      R0,[R1, #+0]
   \   000002F2   0x22C0             MOVS     R2,#+192
   \   000002F4   0x0592             LSLS     R2,R2,#+22       ;; #+805306368
   \   000002F6   0x4302             ORRS     R2,R2,R0
   \   000002F8   0x600A             STR      R2,[R1, #+0]
    241            }
    242          
    243            //Save the CSTACK number of words that will be restored at wakeup reset
    244            i = 0;
   \                     ??BlueNRG_InternalSleep_7: (+1)
   \   000002FA   0x2000             MOVS     R0,#+0
    245            ptr = __vector_table[0].__ptr ;
    246            ptr -= CSTACK_PREAMBLE_NUMBER;
   \   000002FC   0x4945             LDR      R1,??BlueNRG_InternalSleep_2+0x40
   \   000002FE   0x680D             LDR      R5,[R1, #+0]
   \   00000300   0x3D28             SUBS     R5,R5,#+40
   \   00000302   0x4E45             LDR      R6,??BlueNRG_InternalSleep_2+0x44
   \   00000304   0x62B5             STR      R5,[R6, #+40]
    247            do {
    248              cStackPreamble[i] = *ptr;
   \                     ??BlueNRG_InternalSleep_8: (+1)
   \   00000306   0x6AB1             LDR      R1,[R6, #+40]
   \   00000308   0x680A             LDR      R2,[R1, #+0]
   \   0000030A   0x0083             LSLS     R3,R0,#+2
   \   0000030C   0x50F2             STR      R2,[R6, R3]
    249              i++;
   \   0000030E   0x1C40             ADDS     R0,R0,#+1
    250              ptr++;
   \   00000310   0x1D09             ADDS     R1,R1,#+4
   \   00000312   0x62B1             STR      R1,[R6, #+40]
    251            } while (i < CSTACK_PREAMBLE_NUMBER);
   \   00000314   0x280A             CMP      R0,#+10
   \   00000316   0xDBF6             BLT      ??BlueNRG_InternalSleep_8
    252          
    253            //Enable deep sleep
    254            SystemSleepCmd(ENABLE);
   \   00000318   0x2001             MOVS     R0,#+1
   \   0000031A   0x.... 0x....      BL       SystemSleepCmd
    255            wakeupFromSleepFlag = 0; // Flag to signal if a wakeup from standby or sleep occurred
   \   0000031E   0x4F3F             LDR      R7,??BlueNRG_InternalSleep_2+0x48
   \   00000320   0x2000             MOVS     R0,#+0
   \   00000322   0x7038             STRB     R0,[R7, #+0]
    256            //The __disable_irq() used at the beginning of the BlueNRG_Sleep() function
    257            //masks all the interrupts. The interrupts will be enabled at the end of the
    258            //context restore. Now induce a context save.
    259            void CS_contextSave(void);
    260            CS_contextSave();
   \   00000324   0x.... 0x....      BL       CS_contextSave
    261          
    262            //Disable deep sleep, because if no reset occours for an interrrupt pending,
    263            //the register value remain set and if a simple CPU_HALT command is called from the
    264            //application the BlueNRG-1 enters in deep sleep without make a context save.
    265            //So, exiting from the deep sleep the context is restored with wrong random value.
    266            SystemSleepCmd(DISABLE);
   \   00000328   0x2000             MOVS     R0,#+0
   \   0000032A   0x.... 0x....      BL       SystemSleepCmd
    267          
    268            if (!wakeupFromSleepFlag) {
   \   0000032E   0x7838             LDRB     R0,[R7, #+0]
   \   00000330   0x2800             CMP      R0,#+0
   \   00000332   0xD000             BEQ      .+4
   \   00000334   0xE080             B        ??BlueNRG_InternalSleep_9
    269              if((NVIC->ISPR[0]&(1<<BLUE_CTRL_IRQn)) == 0) { //At this stage the Blue Control Interrupt shall not be pending.
   \   00000336   0x483A             LDR      R0,??BlueNRG_InternalSleep_2+0x4C  ;; 0xe000e200
   \   00000338   0x6801             LDR      R1,[R0, #+0]
   \   0000033A   0x0649             LSLS     R1,R1,#+25
   \   0000033C   0xD440             BMI      ??BlueNRG_InternalSleep_10
    270                                                             //So, if this happens means that the application has called the
    271                                                             //BlueNRG_Sleep() API with the wakeup source already acrive.
    272                                                             //In this scenario we don't need to wait the 91 us, otherwise
    273                                                             //the radio activity will be compromised.
    274                nvicPendingMask = savedNVIC_ISPR ^ NVIC->ISPR[0];
   \   0000033E   0x4939             LDR      R1,??BlueNRG_InternalSleep_2+0x50
   \   00000340   0x680A             LDR      R2,[R1, #+0]
   \   00000342   0x6801             LDR      R1,[R0, #+0]
   \   00000344   0x4051             EORS     R1,R1,R2
    275                if ((savedSHCSR != SCB->SHCSR)  ||                                                                //Verified if a SVCall Interrupt is pending
    276                    ((savedNVIC_ISPR != NVIC->ISPR[0]) && (nvicPendingMask & NVIC->ISER[0]))  ||                  //Verified if a NVIC Interrupt is pending
    277                    ((savedICSR & 0x10000000) != (SCB->ICSR & 0x10000000)) ||                                   // Verified if a PendSV interrupt is pending
    278                    (((savedICSR & 0x4000000) != (SCB->ICSR & 0x4000000)) && (SysTick->CTRL & 0x02))) {       // Verified if a SysTick interrupt is pending
   \   00000346   0x4B38             LDR      R3,??BlueNRG_InternalSleep_2+0x54
   \   00000348   0x681B             LDR      R3,[R3, #+0]
   \   0000034A   0x4C18             LDR      R4,??BlueNRG_InternalSleep_1+0x4  ;; 0xe000ed04
   \   0000034C   0x6A24             LDR      R4,[R4, #+32]
   \   0000034E   0x42A3             CMP      R3,R4
   \   00000350   0xD11D             BNE      ??BlueNRG_InternalSleep_11
   \   00000352   0x6800             LDR      R0,[R0, #+0]
   \   00000354   0x4282             CMP      R2,R0
   \   00000356   0xD003             BEQ      ??BlueNRG_InternalSleep_12
   \   00000358   0x48D7             LDR      R0,??BlueNRG_InternalSleep_13  ;; 0xe000e100
   \   0000035A   0x6800             LDR      R0,[R0, #+0]
   \   0000035C   0x4008             ANDS     R0,R0,R1
   \   0000035E   0xD116             BNE      ??BlueNRG_InternalSleep_11
   \                     ??BlueNRG_InternalSleep_12: (+1)
   \   00000360   0x4832             LDR      R0,??BlueNRG_InternalSleep_2+0x58
   \   00000362   0x6800             LDR      R0,[R0, #+0]
   \   00000364   0x2180             MOVS     R1,#+128
   \   00000366   0x0549             LSLS     R1,R1,#+21       ;; #+268435456
   \   00000368   0x000A             MOVS     R2,R1
   \   0000036A   0x4002             ANDS     R2,R2,R0
   \   0000036C   0x4B0F             LDR      R3,??BlueNRG_InternalSleep_1+0x4  ;; 0xe000ed04
   \   0000036E   0x681B             LDR      R3,[R3, #+0]
   \   00000370   0x4019             ANDS     R1,R1,R3
   \   00000372   0x428A             CMP      R2,R1
   \   00000374   0xD10B             BNE      ??BlueNRG_InternalSleep_11
   \   00000376   0x2180             MOVS     R1,#+128
   \   00000378   0x04C9             LSLS     R1,R1,#+19       ;; #+67108864
   \   0000037A   0x4008             ANDS     R0,R0,R1
   \   0000037C   0x4A0B             LDR      R2,??BlueNRG_InternalSleep_1+0x4  ;; 0xe000ed04
   \   0000037E   0x6812             LDR      R2,[R2, #+0]
   \   00000380   0x4011             ANDS     R1,R1,R2
   \   00000382   0x4288             CMP      R0,R1
   \   00000384   0xD01C             BEQ      ??BlueNRG_InternalSleep_10
   \   00000386   0x481C             LDR      R0,??BlueNRG_InternalSleep_2+0x24  ;; 0xe000e010
   \   00000388   0x6800             LDR      R0,[R0, #+0]
   \   0000038A   0x0780             LSLS     R0,R0,#+30
   \   0000038C   0xD518             BPL      ??BlueNRG_InternalSleep_10
    279                  savedCurrentTime = (*(volatile uint32_t *)BLUE_CURRENT_TIME_REG) >> 4;
   \                     ??BlueNRG_InternalSleep_11: (+1)
   \   0000038E   0x4920             LDR      R1,??BlueNRG_InternalSleep_2+0x3C  ;; 0x48000004
   \   00000390   0x68C8             LDR      R0,[R1, #+12]
   \   00000392   0x0902             LSRS     R2,R0,#+4
    280                  if (0xFFFFF >= (savedCurrentTime+3)) { //Check if the counter are wrapping
   \   00000394   0x1CD0             ADDS     R0,R2,#+3
   \   00000396   0x2380             MOVS     R3,#+128
   \   00000398   0x035B             LSLS     R3,R3,#+13       ;; #+1048576
   \   0000039A   0x4298             CMP      R0,R3
   \   0000039C   0xD20A             BCS      ??BlueNRG_InternalSleep_14
    281                    while ((savedCurrentTime+3) > ((*(volatile uint32_t *)BLUE_CURRENT_TIME_REG) >> 4)); //Not Wrap
   \                     ??BlueNRG_InternalSleep_15: (+1)
   \   0000039E   0x68CA             LDR      R2,[R1, #+12]
   \   000003A0   0x0912             LSRS     R2,R2,#+4
   \   000003A2   0x4282             CMP      R2,R0
   \   000003A4   0xD20C             BCS      ??BlueNRG_InternalSleep_10
   \   000003A6   0xE7FA             B        ??BlueNRG_InternalSleep_15
   \                     ??BlueNRG_InternalSleep_1:
   \   000003A8   0xE000E400         DC32     0xe000e400
   \   000003AC   0xE000ED04         DC32     0xe000ed04
   \   000003B0   0x40900008         DC32     0x40900008
    282                  } else {
    283                    while (((*(volatile uint32_t *)BLUE_CURRENT_TIME_REG) >> 4) != (savedCurrentTime + 3 - 0xFFFFF)); //Wrap
   \                     ??BlueNRG_InternalSleep_14: (+1)
   \   000003B4   0x68C8             LDR      R0,[R1, #+12]
   \   000003B6   0x0900             LSRS     R0,R0,#+4
   \   000003B8   0x4B1D             LDR      R3,??BlueNRG_InternalSleep_2+0x5C  ;; 0xfff00004
   \   000003BA   0x18D3             ADDS     R3,R2,R3
   \   000003BC   0x4298             CMP      R0,R3
   \   000003BE   0xD1F9             BNE      ??BlueNRG_InternalSleep_14
    284                  }
    285                }
    286              }
    287              // Disable the STANDBY mode
    288              if (sleepMode == SLEEPMODE_NOTIMER) {
   \                     ??BlueNRG_InternalSleep_10: (+1)
   \   000003C0   0x9806             LDR      R0,[SP, #+24]
   \   000003C2   0x2803             CMP      R0,#+3
   \   000003C4   0xD000             BEQ      .+4
   \   000003C6   0xE1DD             B        ??BlueNRG_InternalSleep_16
    289                BLUE_CTRL->TIMEOUT &= ~(LOW_POWER_STANDBY<<28);
   \   000003C8   0x4911             LDR      R1,??BlueNRG_InternalSleep_2+0x3C  ;; 0x48000004
   \   000003CA   0x6808             LDR      R0,[R1, #+0]
   \   000003CC   0x4A19             LDR      R2,??BlueNRG_InternalSleep_2+0x60  ;; 0xcfffffff
   \   000003CE   0x4002             ANDS     R2,R2,R0
   \   000003D0   0x600A             STR      R2,[R1, #+0]
   \   000003D2   0xE1D7             B        ??BlueNRG_InternalSleep_16
   \                     ??BlueNRG_InternalSleep_2:
   \   000003D4   0x4030000C         DC32     0x4030000c
   \   000003D8   0x4030002C         DC32     0x4030002c
   \   000003DC   0x40300050         DC32     0x40300050
   \   000003E0   0x40400000         DC32     0x40400000
   \   000003E4   0x40400024         DC32     0x40400024
   \   000003E8   0x40A00000         DC32     0x40a00000
   \   000003EC   0x40F00004         DC32     0x40f00004
   \   000003F0   0x40D00004         DC32     0x40d00004
   \   000003F4   0x40E00004         DC32     0x40e00004
   \   000003F8   0xE000E010         DC32     0xe000e010
   \   000003FC   0x40700000         DC32     0x40700000
   \   00000400   0x40700C00         DC32     0x40700c00
   \   00000404   0x1ACCE551         DC32     0x1acce551
   \   00000408   0xA0000008         DC32     0xa0000008
   \   0000040C   0xC0000008         DC32     0xc0000008
   \   00000410   0x48000004         DC32     0x48000004
   \   00000414   0x........         DC32     __vector_table
   \   00000418   0x........         DC32     cStackPreamble
   \   0000041C   0x........         DC32     wakeupFromSleepFlag
   \   00000420   0xE000E200         DC32     0xe000e200
   \   00000424   0x........         DC32     savedNVIC_ISPR
   \   00000428   0x........         DC32     savedSHCSR
   \   0000042C   0x........         DC32     savedICSR
   \   00000430   0xFFF00004         DC32     0xfff00004
   \   00000434   0xCFFFFFFF         DC32     0xcfffffff
    290              }
    291          
    292            } else {
   \                     ??BlueNRG_InternalSleep_9: (+1)
   \   00000438   0x2001             MOVS     R0,#+1
   \   0000043A   0x....             LDR      R1,??DataTable0  ;; 0x48100008
   \   0000043C   0x8208             STRH     R0,[R1, #+16]
    293          
    294              /* Start a new calibration, needed to signal if the HS is ready */
    295              CKGEN_BLE->CLK32K_IT = 1;
    296              CKGEN_BLE->CLK32K_COUNT = 0;
   \   0000043E   0x2000             MOVS     R0,#+0
   \   00000440   0x8088             STRH     R0,[R1, #+4]
    297              CKGEN_BLE->CLK32K_PERIOD = 0;
   \   00000442   0x6088             STR      R0,[R1, #+8]
    298          
    299              /* Restore the CSTACK number of words that will be saved before the sleep */
    300              i = 0;
    301              ptr = __vector_table[0].__ptr ;
    302              ptr -= CSTACK_PREAMBLE_NUMBER;
   \   00000444   0x62B5             STR      R5,[R6, #+40]
    303              do {
    304                *ptr = cStackPreamble[i];
   \                     ??BlueNRG_InternalSleep_17: (+1)
   \   00000446   0x6AB1             LDR      R1,[R6, #+40]
   \   00000448   0x0082             LSLS     R2,R0,#+2
   \   0000044A   0x58B2             LDR      R2,[R6, R2]
   \   0000044C   0x600A             STR      R2,[R1, #+0]
    305                i++;
   \   0000044E   0x1C40             ADDS     R0,R0,#+1
    306                ptr++;
   \   00000450   0x1D09             ADDS     R1,R1,#+4
   \   00000452   0x62B1             STR      R1,[R6, #+40]
    307              } while (i < CSTACK_PREAMBLE_NUMBER);
   \   00000454   0x280A             CMP      R0,#+10
   \   00000456   0xDBF6             BLT      ??BlueNRG_InternalSleep_17
    308          
    309          
    310              /* Restore the peripherals configuration */
    311              /* FLASH CONFIG */
    312              FLASH->CONFIG = FLASH_CONFIG_saved;
   \   00000458   0x985A             LDR      R0,[SP, #+360]
   \   0000045A   0x....             LDR      R1,??DataTable0_1  ;; 0x40100004
   \   0000045C   0x8008             STRH     R0,[R1, #+0]
    313              /* NVIC */
    314              NVIC->ISER[0] = NVIC_ISER_saved;
   \   0000045E   0x9859             LDR      R0,[SP, #+356]
   \   00000460   0x4995             LDR      R1,??BlueNRG_InternalSleep_13  ;; 0xe000e100
   \   00000462   0x6008             STR      R0,[R1, #+0]
    315          
    316              // Issue with Atollic compiler
    317          //    memcpy((void *)NVIC->IP, (void*)NVIC_IPR_saved, sizeof(NVIC_IPR_saved));
    318              for (i=0; i<8; i++) {
    319              	NVIC->IP[i] = NVIC_IPR_saved[i];
   \   00000464   0x9858             LDR      R0,[SP, #+352]
   \   00000466   0x....             LDR      R1,??DataTable0_2  ;; 0xe000e400
   \   00000468   0x6008             STR      R0,[R1, #+0]
   \   0000046A   0x9857             LDR      R0,[SP, #+348]
   \   0000046C   0x6048             STR      R0,[R1, #+4]
   \   0000046E   0x9856             LDR      R0,[SP, #+344]
   \   00000470   0x6088             STR      R0,[R1, #+8]
   \   00000472   0x9855             LDR      R0,[SP, #+340]
   \   00000474   0x60C8             STR      R0,[R1, #+12]
   \   00000476   0x9854             LDR      R0,[SP, #+336]
   \   00000478   0x6108             STR      R0,[R1, #+16]
   \   0000047A   0x9853             LDR      R0,[SP, #+332]
   \   0000047C   0x6148             STR      R0,[R1, #+20]
   \   0000047E   0x9852             LDR      R0,[SP, #+328]
   \   00000480   0x6188             STR      R0,[R1, #+24]
   \   00000482   0x9851             LDR      R0,[SP, #+324]
   \   00000484   0x61C8             STR      R0,[R1, #+28]
    320              }
    321          
    322              *(volatile uint32_t *)SHPR3_REG = PENDSV_SYSTICK_IPR_saved;
   \   00000486   0x9850             LDR      R0,[SP, #+320]
   \   00000488   0x....             LDR      R1,??DataTable0_3  ;; 0xe000ed04
   \   0000048A   0x61C8             STR      R0,[R1, #+28]
    323              /* CKGEN SOC Enabled */
    324              CKGEN_SOC->CLOCK_EN = CLOCK_EN_saved;
   \   0000048C   0x984F             LDR      R0,[SP, #+316]
   \   0000048E   0x....             LDR      R1,??DataTable0_4  ;; 0x40900008
   \   00000490   0x6188             STR      R0,[R1, #+24]
    325              /* GPIO */
    326              GPIO->DATA = GPIO_DATA_saved;
   \   00000492   0x984E             LDR      R0,[SP, #+312]
   \   00000494   0x2180             MOVS     R1,#+128
   \   00000496   0x05C9             LSLS     R1,R1,#+23       ;; #+1073741824
   \   00000498   0x6008             STR      R0,[R1, #+0]
    327              GPIO->OEN = GPIO_OEN_saved;
   \   0000049A   0x984D             LDR      R0,[SP, #+308]
   \   0000049C   0x6048             STR      R0,[R1, #+4]
    328              GPIO->PE = GPIO_PE_saved;
   \   0000049E   0x984C             LDR      R0,[SP, #+304]
   \   000004A0   0x6088             STR      R0,[R1, #+8]
    329              GPIO->DS = GPIO_DS_saved;
   \   000004A2   0x984B             LDR      R0,[SP, #+300]
   \   000004A4   0x60C8             STR      R0,[R1, #+12]
    330              GPIO->IS = GPIO_IS_saved;
   \   000004A6   0x984A             LDR      R0,[SP, #+296]
   \   000004A8   0x6108             STR      R0,[R1, #+16]
    331              GPIO->IBE = GPIO_IBE_save;
   \   000004AA   0x9849             LDR      R0,[SP, #+292]
   \   000004AC   0x6148             STR      R0,[R1, #+20]
    332              GPIO->IEV = GPIO_IEV_saved;
   \   000004AE   0x9848             LDR      R0,[SP, #+288]
   \   000004B0   0x6188             STR      R0,[R1, #+24]
    333              GPIO->IE = GPIO_IE_saved;
   \   000004B2   0x9847             LDR      R0,[SP, #+284]
   \   000004B4   0x61C8             STR      R0,[R1, #+28]
    334              GPIO->MODE0 = GPIO_MODE0_saved;
   \   000004B6   0x9846             LDR      R0,[SP, #+280]
   \   000004B8   0x62C8             STR      R0,[R1, #+44]
    335              GPIO->MODE1 = GPIO_MODE1_saved;
   \   000004BA   0x9845             LDR      R0,[SP, #+276]
   \   000004BC   0x6308             STR      R0,[R1, #+48]
    336              GPIO->MFTX = GPIO_IOSEL_MFTX_saved;
   \   000004BE   0x9844             LDR      R0,[SP, #+272]
   \   000004C0   0x6448             STR      R0,[R1, #+68]
    337              /* UART */
    338              UART->TIMEOUT = UART_TIMEOUT_saved;
   \   000004C2   0x9843             LDR      R0,[SP, #+268]
   \   000004C4   0x....             LDR      R1,??DataTable0_5  ;; 0x4030000c
   \   000004C6   0x6008             STR      R0,[R1, #+0]
    339              UART->LCRH_RX = UART_LCRH_RX_saved;
   \   000004C8   0x9842             LDR      R0,[SP, #+264]
   \   000004CA   0x7408             STRB     R0,[R1, #+16]
    340              UART->IBRD = UART_IBRD_saved;
   \   000004CC   0x9841             LDR      R0,[SP, #+260]
   \   000004CE   0x8308             STRH     R0,[R1, #+24]
    341              UART->FBRD = UART_FBRD_saved;
   \   000004D0   0x9840             LDR      R0,[SP, #+256]
   \   000004D2   0x7708             STRB     R0,[R1, #+28]
    342              UART->LCRH_TX = UART_LCRH_TX_saved;
   \   000004D4   0x983F             LDR      R0,[SP, #+252]
   \   000004D6   0x3120             ADDS     R1,R1,#+32
   \   000004D8   0x7008             STRB     R0,[R1, #+0]
    343              UART->CR = UART_CR_saved;
   \   000004DA   0x983E             LDR      R0,[SP, #+248]
   \   000004DC   0x6048             STR      R0,[R1, #+4]
    344              UART->IFLS = UART_IFLS_saved;
   \   000004DE   0x983D             LDR      R0,[SP, #+244]
   \   000004E0   0x7208             STRB     R0,[R1, #+8]
    345              UART->IMSC = UART_IMSC_saved;
   \   000004E2   0x983C             LDR      R0,[SP, #+240]
   \   000004E4   0x8188             STRH     R0,[R1, #+12]
    346              UART->DMACR = UART_DMACR_saved;
   \   000004E6   0x983B             LDR      R0,[SP, #+236]
   \   000004E8   0x7708             STRB     R0,[R1, #+28]
    347              UART->XFCR = UART_XFCR_saved;
   \   000004EA   0x983A             LDR      R0,[SP, #+232]
   \   000004EC   0x3124             ADDS     R1,R1,#+36
   \   000004EE   0x7008             STRB     R0,[R1, #+0]
    348              UART->XON1 = UART_XON1_saved;
   \   000004F0   0x9839             LDR      R0,[SP, #+228]
   \   000004F2   0x7108             STRB     R0,[R1, #+4]
    349              UART->XON2 = UART_XON2_saved;
   \   000004F4   0x9838             LDR      R0,[SP, #+224]
   \   000004F6   0x7208             STRB     R0,[R1, #+8]
    350              UART->XOFF1 = UART_XOFF1_saved;
   \   000004F8   0x9837             LDR      R0,[SP, #+220]
   \   000004FA   0x7308             STRB     R0,[R1, #+12]
    351              UART->XOFF2 = UART_XOFF2_saved;
   \   000004FC   0x9836             LDR      R0,[SP, #+216]
   \   000004FE   0x7408             STRB     R0,[R1, #+16]
    352              /* SPI */
    353              SPI1->CR0 = SPI_CR0_saved;
   \   00000500   0x9835             LDR      R0,[SP, #+212]
   \   00000502   0x....             LDR      R1,??DataTable0_6  ;; 0x40400000
   \   00000504   0x6008             STR      R0,[R1, #+0]
    354              SPI1->CR1 = SPI_CR1_saved;
   \   00000506   0x9834             LDR      R0,[SP, #+208]
   \   00000508   0x6048             STR      R0,[R1, #+4]
    355              SPI1->CPSR = SPI_CPSR_saved;
   \   0000050A   0x9833             LDR      R0,[SP, #+204]
   \   0000050C   0x7408             STRB     R0,[R1, #+16]
    356              SPI1->IMSC = SPI_IMSC_saved;
   \   0000050E   0x9832             LDR      R0,[SP, #+200]
   \   00000510   0x7508             STRB     R0,[R1, #+20]
    357              SPI1->DMACR = SPI_DMACR_saved;
   \   00000512   0x9831             LDR      R0,[SP, #+196]
   \   00000514   0x3124             ADDS     R1,R1,#+36
   \   00000516   0x7008             STRB     R0,[R1, #+0]
    358              SPI1->RXFRM = SPI_RXFRM_saved;
   \   00000518   0x9830             LDR      R0,[SP, #+192]
   \   0000051A   0x8088             STRH     R0,[R1, #+4]
    359              SPI1->CHN = SPI_CHN_saved;
   \   0000051C   0x982F             LDR      R0,[SP, #+188]
   \   0000051E   0x6088             STR      R0,[R1, #+8]
    360              SPI1->WDTXF = SPI_WDTXF_saved;
   \   00000520   0x982E             LDR      R0,[SP, #+184]
   \   00000522   0x8188             STRH     R0,[R1, #+12]
    361              /* I2C */
    362              for (i=0; i<2; i++) {
   \   00000524   0x2000             MOVS     R0,#+0
   \   00000526   0x9000             STR      R0,[SP, #+0]
   \   00000528   0xA86D             ADD      R0,SP,#+436
   \   0000052A   0x9005             STR      R0,[SP, #+20]
   \   0000052C   0xA86B             ADD      R0,SP,#+428
   \   0000052E   0x9004             STR      R0,[SP, #+16]
   \   00000530   0xA869             ADD      R0,SP,#+420
   \   00000532   0x9003             STR      R0,[SP, #+12]
   \   00000534   0xA867             ADD      R0,SP,#+412
   \   00000536   0x9002             STR      R0,[SP, #+8]
   \   00000538   0xA865             ADD      R0,SP,#+404
   \   0000053A   0x9001             STR      R0,[SP, #+4]
   \   0000053C   0xA863             ADD      R0,SP,#+396
   \   0000053E   0xA961             ADD      R1,SP,#+388
   \   00000540   0xAA5F             ADD      R2,SP,#+380
   \   00000542   0xAB5D             ADD      R3,SP,#+372
   \   00000544   0xAD5B             ADD      R5,SP,#+364
    363                I2C_Type *I2Cx = (I2C_Type*)(I2C2_BASE+ 0x100000*i);
   \                     ??BlueNRG_InternalSleep_18: (+1)
   \   00000546   0x9E00             LDR      R6,[SP, #+0]
   \   00000548   0x0536             LSLS     R6,R6,#+20
   \   0000054A   0x....             LDR      R7,??DataTable1  ;; 0x40a00000
   \   0000054C   0x19F6             ADDS     R6,R6,R7
    364                I2Cx->CR = I2C_CR_saved[i];
   \   0000054E   0x9F05             LDR      R7,[SP, #+20]
   \   00000550   0x683F             LDR      R7,[R7, #+0]
   \   00000552   0x6037             STR      R7,[R6, #+0]
    365                I2Cx->SCR = I2C_SCR_saved[i];
   \   00000554   0x9F04             LDR      R7,[SP, #+16]
   \   00000556   0x683F             LDR      R7,[R7, #+0]
   \   00000558   0x6077             STR      R7,[R6, #+4]
    366                I2Cx->TFTR = I2C_TFTR_saved[i];
   \   0000055A   0x9F03             LDR      R7,[SP, #+12]
   \   0000055C   0x683F             LDR      R7,[R7, #+0]
   \   0000055E   0x83B7             STRH     R7,[R6, #+28]
    367                I2Cx->RFTR = I2C_RFTR_saved[i];
   \   00000560   0x9F02             LDR      R7,[SP, #+8]
   \   00000562   0x683F             LDR      R7,[R7, #+0]
   \   00000564   0x8437             STRH     R7,[R6, #+32]
    368                I2Cx->DMAR = I2C_DMAR_saved[i];
   \   00000566   0x9F01             LDR      R7,[SP, #+4]
   \   00000568   0x683F             LDR      R7,[R7, #+0]
   \   0000056A   0x84B7             STRH     R7,[R6, #+36]
    369                I2Cx->BRCR = I2C_BRCR_saved[i];
   \   0000056C   0x6807             LDR      R7,[R0, #+0]
   \   0000056E   0x8537             STRH     R7,[R6, #+40]
    370                I2Cx->IMSCR = I2C_IMSCR_saved[i];
   \   00000570   0x680F             LDR      R7,[R1, #+0]
   \   00000572   0x62F7             STR      R7,[R6, #+44]
    371                I2Cx->THDDAT = I2C_THDDAT_saved[i];
   \   00000574   0x364C             ADDS     R6,R6,#+76
   \   00000576   0x6817             LDR      R7,[R2, #+0]
   \   00000578   0x8037             STRH     R7,[R6, #+0]
    372                I2Cx->THDSTA_FST_STD = I2C_THDSTA_FST_STD_saved[i];
   \   0000057A   0x681F             LDR      R7,[R3, #+0]
   \   0000057C   0x6077             STR      R7,[R6, #+4]
    373                I2Cx->TSUSTA_FST_STD = I2C_TSUSTA_FST_STD_saved[i];
   \   0000057E   0x682F             LDR      R7,[R5, #+0]
   \   00000580   0x60F7             STR      R7,[R6, #+12]
    374              }
   \   00000582   0x9E00             LDR      R6,[SP, #+0]
   \   00000584   0x1C76             ADDS     R6,R6,#+1
   \   00000586   0x9600             STR      R6,[SP, #+0]
   \   00000588   0x1D2D             ADDS     R5,R5,#+4
   \   0000058A   0x1D1B             ADDS     R3,R3,#+4
   \   0000058C   0x1D12             ADDS     R2,R2,#+4
   \   0000058E   0x1D09             ADDS     R1,R1,#+4
   \   00000590   0x1D00             ADDS     R0,R0,#+4
   \   00000592   0x9E01             LDR      R6,[SP, #+4]
   \   00000594   0x1D36             ADDS     R6,R6,#+4
   \   00000596   0x9601             STR      R6,[SP, #+4]
   \   00000598   0x9E02             LDR      R6,[SP, #+8]
   \   0000059A   0x1D36             ADDS     R6,R6,#+4
   \   0000059C   0x9602             STR      R6,[SP, #+8]
   \   0000059E   0x9E03             LDR      R6,[SP, #+12]
   \   000005A0   0x1D36             ADDS     R6,R6,#+4
   \   000005A2   0x9603             STR      R6,[SP, #+12]
   \   000005A4   0x9E04             LDR      R6,[SP, #+16]
   \   000005A6   0x1D36             ADDS     R6,R6,#+4
   \   000005A8   0x9604             STR      R6,[SP, #+16]
   \   000005AA   0x9E05             LDR      R6,[SP, #+20]
   \   000005AC   0x1D36             ADDS     R6,R6,#+4
   \   000005AE   0x9605             STR      R6,[SP, #+20]
   \   000005B0   0x9E00             LDR      R6,[SP, #+0]
   \   000005B2   0x2E02             CMP      R6,#+2
   \   000005B4   0xDBC7             BLT      ??BlueNRG_InternalSleep_18
    375              /* RNG */
    376              RNG->CR = RNG_CR_saved;
   \   000005B6   0x982D             LDR      R0,[SP, #+180]
   \   000005B8   0x21B0             MOVS     R1,#+176
   \   000005BA   0x0609             LSLS     R1,R1,#+24       ;; #-1342177280
   \   000005BC   0x6008             STR      R0,[R1, #+0]
    377              /* SysTick */
    378              SysTick->LOAD = SYST_RVR_saved;
   \   000005BE   0x9812             LDR      R0,[SP, #+72]
   \   000005C0   0x....             LDR      R1,??DataTable1_1  ;; 0xe000e010
   \   000005C2   0x6048             STR      R0,[R1, #+4]
    379              SysTick->VAL = 0;
   \   000005C4   0x2000             MOVS     R0,#+0
   \   000005C6   0x6088             STR      R0,[R1, #+8]
    380              SysTick->CTRL = SYST_CSR_saved;
   \   000005C8   0x9813             LDR      R0,[SP, #+76]
   \   000005CA   0x6008             STR      R0,[R1, #+0]
    381              /* RTC */
    382              RTC->CWDMR = RTC_CWDMR_saved;
   \   000005CC   0x982C             LDR      R0,[SP, #+176]
   \   000005CE   0x6020             STR      R0,[R4, #+0]
    383              RTC->CWDLR = RTC_CWDLR_saved;
   \   000005D0   0x982B             LDR      R0,[SP, #+172]
   \   000005D2   0x6060             STR      R0,[R4, #+4]
    384              RTC->CWYMR = RTC_CWYMR_saved;
   \   000005D4   0x982A             LDR      R0,[SP, #+168]
   \   000005D6   0x81A0             STRH     R0,[R4, #+12]
    385              RTC->CWYLR = RTC_CWYLR_saved;
   \   000005D8   0x9829             LDR      R0,[SP, #+164]
   \   000005DA   0x8220             STRH     R0,[R4, #+16]
    386              RTC->CTCR = RTC_CTCR_saved;
   \   000005DC   0x9828             LDR      R0,[SP, #+160]
   \   000005DE   0x6160             STR      R0,[R4, #+20]
    387              RTC->IMSC = RTC_IMSC_saved;
   \   000005E0   0x9827             LDR      R0,[SP, #+156]
   \   000005E2   0x7620             STRB     R0,[R4, #+24]
    388              RTC->TLR1 = RTC_TLR1_saved;
   \   000005E4   0x9825             LDR      R0,[SP, #+148]
   \   000005E6   0x6320             STR      R0,[R4, #+48]
    389              RTC->TLR2 = RTC_TLR2_saved;
   \   000005E8   0x9824             LDR      R0,[SP, #+144]
   \   000005EA   0x6360             STR      R0,[R4, #+52]
    390              RTC->TPR1 = RTC_TPR1_saved;
   \   000005EC   0x9823             LDR      R0,[SP, #+140]
   \   000005EE   0x63A0             STR      R0,[R4, #+56]
    391              RTC->TPR2 = RTC_TPR2_saved;
   \   000005F0   0x9822             LDR      R0,[SP, #+136]
   \   000005F2   0x63E0             STR      R0,[R4, #+60]
    392              RTC->TPR3 = RTC_TPR3_saved;
   \   000005F4   0x9821             LDR      R0,[SP, #+132]
   \   000005F6   0x6420             STR      R0,[R4, #+64]
    393              RTC->TPR4 = RTC_TPR4_saved;
   \   000005F8   0x9820             LDR      R0,[SP, #+128]
   \   000005FA   0x6460             STR      R0,[R4, #+68]
    394              RTC->TCR = RTC_TCR_saved; /* Enable moved at the end of RTC configuration */
   \   000005FC   0x9826             LDR      R0,[SP, #+152]
   \   000005FE   0x85A0             STRH     R0,[R4, #+44]
    395              /* MFTX */
    396              MFT1->TNCRA = T1CRA_saved;
   \   00000600   0x981F             LDR      R0,[SP, #+124]
   \   00000602   0x....             LDR      R1,??DataTable1_2  ;; 0x40d00004
   \   00000604   0x8008             STRH     R0,[R1, #+0]
    397              MFT1->TNCRB = T1CRB_saved;
   \   00000606   0x981E             LDR      R0,[SP, #+120]
   \   00000608   0x8088             STRH     R0,[R1, #+4]
    398              MFT1->TNPRSC = T1PRSC_saved;
   \   0000060A   0x981D             LDR      R0,[SP, #+116]
   \   0000060C   0x7308             STRB     R0,[R1, #+12]
    399              MFT1->TNCKC = T1CKC_saved;
   \   0000060E   0x981C             LDR      R0,[SP, #+112]
   \   00000610   0x7408             STRB     R0,[R1, #+16]
    400              MFT1->TNMCTRL = T1MCTRL_saved;
   \   00000612   0x981B             LDR      R0,[SP, #+108]
   \   00000614   0x8288             STRH     R0,[R1, #+20]
    401              MFT1->TNICTRL = T1ICTRL_saved;
   \   00000616   0x981A             LDR      R0,[SP, #+104]
   \   00000618   0x7608             STRB     R0,[R1, #+24]
    402              MFT2->TNCRA = T2CRA_saved;
   \   0000061A   0x9819             LDR      R0,[SP, #+100]
   \   0000061C   0x....             LDR      R1,??DataTable1_3  ;; 0x40e00004
   \   0000061E   0x8008             STRH     R0,[R1, #+0]
    403              MFT2->TNCRB = T2CRB_saved;
   \   00000620   0x9818             LDR      R0,[SP, #+96]
   \   00000622   0x8088             STRH     R0,[R1, #+4]
    404              MFT2->TNPRSC = T2PRSC_saved;
   \   00000624   0x9817             LDR      R0,[SP, #+92]
   \   00000626   0x7308             STRB     R0,[R1, #+12]
    405              MFT2->TNCKC = T2CKC_saved;
   \   00000628   0x9816             LDR      R0,[SP, #+88]
   \   0000062A   0x7408             STRB     R0,[R1, #+16]
    406              MFT2->TNMCTRL = T2MCTRL_saved;
   \   0000062C   0x9815             LDR      R0,[SP, #+84]
   \   0000062E   0x8288             STRH     R0,[R1, #+20]
    407              MFT2->TNICTRL = T2ICTRL_saved;
   \   00000630   0x9814             LDR      R0,[SP, #+80]
   \   00000632   0x7608             STRB     R0,[R1, #+24]
    408              /* WDT */
    409              WDG->LR = WDG_LR_saved;
   \   00000634   0x9811             LDR      R0,[SP, #+68]
   \   00000636   0x....             LDR      R1,??DataTable2  ;; 0x40700000
   \   00000638   0x6008             STR      R0,[R1, #+0]
    410              WDG->CR = WDG_CR_saved;
   \   0000063A   0x9810             LDR      R0,[SP, #+64]
   \   0000063C   0x7208             STRB     R0,[R1, #+8]
    411              WDG->LOCK = WDG_LOCK_saved;
   \   0000063E   0x9807             LDR      R0,[SP, #+28]
   \   00000640   0x....             LDR      R1,??DataTable2_1  ;; 0x40700c00
   \   00000642   0x6008             STR      R0,[R1, #+0]
    412              /* DMA */
    413              for (i=0; i<8; i++) {
   \   00000644   0x2000             MOVS     R0,#+0
   \   00000646   0xA987             ADD      R1,SP,#+540
   \   00000648   0xAA7F             ADD      R2,SP,#+508
   \   0000064A   0xAB77             ADD      R3,SP,#+476
   \   0000064C   0xAC6F             ADD      R4,SP,#+444
    414                DMA_CH_Type *DMAx = (DMA_CH_Type*)(DMA_CH0_BASE+ 0x14*i);
   \                     ??BlueNRG_InternalSleep_19: (+1)
   \   0000064E   0x0085             LSLS     R5,R0,#+2
   \   00000650   0x182D             ADDS     R5,R5,R0
   \   00000652   0x00AD             LSLS     R5,R5,#+2
   \   00000654   0x....             LDR      R6,??DataTable2_2  ;; 0xa0000008
   \   00000656   0x19AD             ADDS     R5,R5,R6
    415                DMAx->CCR = DMA_CCR_saved[i] ;
   \   00000658   0x680E             LDR      R6,[R1, #+0]
   \   0000065A   0x602E             STR      R6,[R5, #+0]
    416                DMAx->CNDTR = DMA_CNDTR_saved[i];
   \   0000065C   0x6816             LDR      R6,[R2, #+0]
   \   0000065E   0x606E             STR      R6,[R5, #+4]
    417                DMAx->CPAR = DMA_CPAR_saved[i];
   \   00000660   0x681E             LDR      R6,[R3, #+0]
   \   00000662   0x60AE             STR      R6,[R5, #+8]
    418                DMAx->CMAR = DMA_CMAR[i];
   \   00000664   0x6826             LDR      R6,[R4, #+0]
   \   00000666   0x60EE             STR      R6,[R5, #+12]
   \   00000668   0x1C40             ADDS     R0,R0,#+1
   \   0000066A   0x0085             LSLS     R5,R0,#+2
   \   0000066C   0x182D             ADDS     R5,R5,R0
   \   0000066E   0x00AD             LSLS     R5,R5,#+2
   \   00000670   0x....             LDR      R6,??DataTable2_2  ;; 0xa0000008
   \   00000672   0x19AD             ADDS     R5,R5,R6
   \   00000674   0x684E             LDR      R6,[R1, #+4]
   \   00000676   0x602E             STR      R6,[R5, #+0]
   \   00000678   0x6856             LDR      R6,[R2, #+4]
   \   0000067A   0x606E             STR      R6,[R5, #+4]
   \   0000067C   0x685E             LDR      R6,[R3, #+4]
   \   0000067E   0x60AE             STR      R6,[R5, #+8]
   \   00000680   0x6866             LDR      R6,[R4, #+4]
   \   00000682   0x60EE             STR      R6,[R5, #+12]
    419              }
   \   00000684   0x1C40             ADDS     R0,R0,#+1
   \   00000686   0x3408             ADDS     R4,R4,#+8
   \   00000688   0x3308             ADDS     R3,R3,#+8
   \   0000068A   0x3208             ADDS     R2,R2,#+8
   \   0000068C   0x3108             ADDS     R1,R1,#+8
   \   0000068E   0x2808             CMP      R0,#+8
   \   00000690   0xDBDD             BLT      ??BlueNRG_InternalSleep_19
    420              /* ADC */
    421              ADC->CTRL = ADC_CTRL_saved;
   \   00000692   0x980F             LDR      R0,[SP, #+60]
   \   00000694   0x2181             MOVS     R1,#+129
   \   00000696   0x05C9             LSLS     R1,R1,#+23       ;; #+1082130432
   \   00000698   0x8008             STRH     R0,[R1, #+0]
    422              ADC->CONF = ADC_CONF_saved;
   \   0000069A   0x980E             LDR      R0,[SP, #+56]
   \   0000069C   0x6048             STR      R0,[R1, #+4]
    423              ADC->IRQMASK = ADC_IRQMASK_saved;
   \   0000069E   0x980D             LDR      R0,[SP, #+52]
   \   000006A0   0x7308             STRB     R0,[R1, #+12]
    424              ADC->OFFSET = ADC_OFFSET_saved;
   \   000006A2   0x980C             LDR      R0,[SP, #+48]
   \   000006A4   0x6188             STR      R0,[R1, #+24]
    425              ADC->THRESHOLD_HI = ADC_THRESHOLD_HI_saved;
   \   000006A6   0x980B             LDR      R0,[SP, #+44]
   \   000006A8   0x6248             STR      R0,[R1, #+36]
    426              ADC->THRESHOLD_LO = ADC_THRESHOLD_LO_saved;
   \   000006AA   0x980A             LDR      R0,[SP, #+40]
   \   000006AC   0x6288             STR      R0,[R1, #+40]
    427              /* PKA */
    428              PKA->IEN = PKA_IEN_saved;
   \   000006AE   0x9809             LDR      R0,[SP, #+36]
   \   000006B0   0x....             LDR      R1,??DataTable2_3  ;; 0xc0000008
   \   000006B2   0x6008             STR      R0,[R1, #+0]
    429              //The five IRQs are linked to a real ISR. If any of the five IRQs
    430              //triggered, then pend their ISR
    431              //Capture the wake source from the BLE_REASON_RESET register
    432              if ((CKGEN_SOC->REASON_RST == 0) &&
    433                  (CKGEN_BLE->REASON_RST >= WAKENED_FROM_IO9) &&
    434                    (CKGEN_BLE->REASON_RST <= WAKENED_FROM_IO13) &&
    435                      gpioWakeBitMask) {
   \   000006B4   0x....             LDR      R0,??DataTable0_4  ;; 0x40900008
   \   000006B6   0xE001             B.N      ??BlueNRG_InternalSleep_20
   \                     ??BlueNRG_InternalSleep_13:
   \   000006B8   0xE000E100         DC32     0xe000e100
   \                     ??BlueNRG_InternalSleep_20: (+1)
   \   000006BC   0x7800             LDRB     R0,[R0, #+0]
   \   000006BE   0x2800             CMP      R0,#+0
   \   000006C0   0xD145             BNE      ??BlueNRG_InternalSleep_21
   \   000006C2   0x....             LDR      R0,??DataTable0  ;; 0x48100008
   \   000006C4   0x8800             LDRH     R0,[R0, #+0]
   \   000006C6   0x2809             CMP      R0,#+9
   \   000006C8   0xDB41             BLT      ??BlueNRG_InternalSleep_21
   \   000006CA   0x....             LDR      R0,??DataTable0  ;; 0x48100008
   \   000006CC   0x8800             LDRH     R0,[R0, #+0]
   \   000006CE   0x2882             CMP      R0,#+130
   \   000006D0   0xDA3D             BGE      ??BlueNRG_InternalSleep_21
   \   000006D2   0xA890             ADD      R0,SP,#+576
   \   000006D4   0x7800             LDRB     R0,[R0, #+0]
   \   000006D6   0x2800             CMP      R0,#+0
   \   000006D8   0xD039             BEQ      ??BlueNRG_InternalSleep_21
    436                        if ((((CKGEN_BLE->REASON_RST & WAKENED_FROM_IO9) == WAKENED_FROM_IO9) && (GPIO->IE & GPIO_Pin_9))   ||
    437                            (((CKGEN_BLE->REASON_RST & WAKENED_FROM_IO10) == WAKENED_FROM_IO10) && (GPIO->IE & GPIO_Pin_10)) ||
    438                              (((CKGEN_BLE->REASON_RST & WAKENED_FROM_IO11) == WAKENED_FROM_IO11) && (GPIO->IE & GPIO_Pin_11)) ||
    439                                (((CKGEN_BLE->REASON_RST & WAKENED_FROM_IO12) == WAKENED_FROM_IO12) && (GPIO->IE & GPIO_Pin_12)) ||
    440                                  (((CKGEN_BLE->REASON_RST & WAKENED_FROM_IO13) == WAKENED_FROM_IO13) && (GPIO->IE & GPIO_Pin_13))) {
   \   000006DA   0x....             LDR      R0,??DataTable0  ;; 0x48100008
   \   000006DC   0x8800             LDRH     R0,[R0, #+0]
   \   000006DE   0x2109             MOVS     R1,#+9
   \   000006E0   0x4001             ANDS     R1,R1,R0
   \   000006E2   0x2909             CMP      R1,#+9
   \   000006E4   0xD104             BNE      ??BlueNRG_InternalSleep_22
   \   000006E6   0x2080             MOVS     R0,#+128
   \   000006E8   0x05C0             LSLS     R0,R0,#+23       ;; #+1073741824
   \   000006EA   0x69C0             LDR      R0,[R0, #+28]
   \   000006EC   0x0580             LSLS     R0,R0,#+22
   \   000006EE   0xD42B             BMI      ??BlueNRG_InternalSleep_23
   \                     ??BlueNRG_InternalSleep_22: (+1)
   \   000006F0   0x....             LDR      R0,??DataTable0  ;; 0x48100008
   \   000006F2   0x8800             LDRH     R0,[R0, #+0]
   \   000006F4   0x2111             MOVS     R1,#+17
   \   000006F6   0x4001             ANDS     R1,R1,R0
   \   000006F8   0x2911             CMP      R1,#+17
   \   000006FA   0xD104             BNE      ??BlueNRG_InternalSleep_24
   \   000006FC   0x2080             MOVS     R0,#+128
   \   000006FE   0x05C0             LSLS     R0,R0,#+23       ;; #+1073741824
   \   00000700   0x69C0             LDR      R0,[R0, #+28]
   \   00000702   0x0540             LSLS     R0,R0,#+21
   \   00000704   0xD420             BMI      ??BlueNRG_InternalSleep_23
   \                     ??BlueNRG_InternalSleep_24: (+1)
   \   00000706   0x....             LDR      R0,??DataTable0  ;; 0x48100008
   \   00000708   0x8800             LDRH     R0,[R0, #+0]
   \   0000070A   0x2121             MOVS     R1,#+33
   \   0000070C   0x4001             ANDS     R1,R1,R0
   \   0000070E   0x2921             CMP      R1,#+33
   \   00000710   0xD104             BNE      ??BlueNRG_InternalSleep_25
   \   00000712   0x2080             MOVS     R0,#+128
   \   00000714   0x05C0             LSLS     R0,R0,#+23       ;; #+1073741824
   \   00000716   0x69C0             LDR      R0,[R0, #+28]
   \   00000718   0x0500             LSLS     R0,R0,#+20
   \   0000071A   0xD415             BMI      ??BlueNRG_InternalSleep_23
   \                     ??BlueNRG_InternalSleep_25: (+1)
   \   0000071C   0x....             LDR      R0,??DataTable0  ;; 0x48100008
   \   0000071E   0x8800             LDRH     R0,[R0, #+0]
   \   00000720   0x2141             MOVS     R1,#+65
   \   00000722   0x4001             ANDS     R1,R1,R0
   \   00000724   0x2941             CMP      R1,#+65
   \   00000726   0xD104             BNE      ??BlueNRG_InternalSleep_26
   \   00000728   0x2080             MOVS     R0,#+128
   \   0000072A   0x05C0             LSLS     R0,R0,#+23       ;; #+1073741824
   \   0000072C   0x69C0             LDR      R0,[R0, #+28]
   \   0000072E   0x04C0             LSLS     R0,R0,#+19
   \   00000730   0xD40A             BMI      ??BlueNRG_InternalSleep_23
   \                     ??BlueNRG_InternalSleep_26: (+1)
   \   00000732   0x....             LDR      R0,??DataTable0  ;; 0x48100008
   \   00000734   0x8800             LDRH     R0,[R0, #+0]
   \   00000736   0x2181             MOVS     R1,#+129
   \   00000738   0x4001             ANDS     R1,R1,R0
   \   0000073A   0x2981             CMP      R1,#+129
   \   0000073C   0xD107             BNE      ??BlueNRG_InternalSleep_21
   \   0000073E   0x2080             MOVS     R0,#+128
   \   00000740   0x05C0             LSLS     R0,R0,#+23       ;; #+1073741824
   \   00000742   0x69C0             LDR      R0,[R0, #+28]
   \   00000744   0x0480             LSLS     R0,R0,#+18
   \   00000746   0xD502             BPL      ??BlueNRG_InternalSleep_21
    441                                    NVIC->ISPR[0] = 1<<GPIO_IRQn;
   \                     ??BlueNRG_InternalSleep_23: (+1)
   \   00000748   0x2001             MOVS     R0,#+1
   \   0000074A   0x....             LDR      R1,??DataTable2_4  ;; 0xe000e200
   \   0000074C   0x6008             STR      R0,[R1, #+0]
    442                                  }
    443                      }
    444          
    445              // Disable the STANDBY mode
    446              if (sleepMode == SLEEPMODE_NOTIMER) {
   \                     ??BlueNRG_InternalSleep_21: (+1)
   \   0000074E   0x9806             LDR      R0,[SP, #+24]
   \   00000750   0x2803             CMP      R0,#+3
   \   00000752   0xD104             BNE      ??BlueNRG_InternalSleep_27
    447                BLUE_CTRL->TIMEOUT &= ~(LOW_POWER_STANDBY<<28);
   \   00000754   0x....             LDR      R1,??DataTable2_5  ;; 0x48000004
   \   00000756   0x6808             LDR      R0,[R1, #+0]
   \   00000758   0x....             LDR      R2,??DataTable2_6  ;; 0xcfffffff
   \   0000075A   0x4002             ANDS     R2,R2,R0
   \   0000075C   0x600A             STR      R2,[R1, #+0]
    448              }
    449          
    450              /* Restore the System Control register to indicate which HS crystal is used */
    451              SYSTEM_CTRL->CTRL = SYS_Ctrl_saved;
   \                     ??BlueNRG_InternalSleep_27: (+1)
   \   0000075E   0x9808             LDR      R0,[SP, #+32]
   \   00000760   0x....             LDR      R1,??DataTable2_7  ;; 0x40200008
   \   00000762   0x7008             STRB     R0,[R1, #+0]
    452          
    453              // Wait until the HS clock is ready.
    454              // If SLEEPMODE_NOTIMER is set, wait the LS clock is ready.
    455              if (sleepMode == SLEEPMODE_NOTIMER) {
   \   00000764   0x9806             LDR      R0,[SP, #+24]
   \   00000766   0x2803             CMP      R0,#+3
   \   00000768   0xD102             BNE      ??BlueNRG_InternalSleep_28
    456                DeviceConfiguration(FALSE, TRUE);
   \   0000076A   0x2101             MOVS     R1,#+1
   \   0000076C   0x2000             MOVS     R0,#+0
   \   0000076E   0xE001             B        ??BlueNRG_InternalSleep_29
    457              } else {
    458                DeviceConfiguration(FALSE, FALSE);
   \                     ??BlueNRG_InternalSleep_28: (+1)
   \   00000770   0x2100             MOVS     R1,#+0
   \   00000772   0x2000             MOVS     R0,#+0
   \                     ??BlueNRG_InternalSleep_29: (+1)
   \   00000774   0x.... 0x....      BL       DeviceConfiguration
    459              }
    460          
    461              /* If the HS is a 32 MHz */
    462              if (SYS_Ctrl_saved & 1) {
   \   00000778   0x9808             LDR      R0,[SP, #+32]
   \   0000077A   0x07C0             LSLS     R0,R0,#+31
   \   0000077C   0xD502             BPL      ??BlueNRG_InternalSleep_16
    463                /* AHB up converter command register write*/
    464                AHBUPCONV->COMMAND = 0x15;
   \   0000077E   0x2015             MOVS     R0,#+21
   \   00000780   0x....             LDR      R1,??DataTable2_8  ;; 0x40c00000
   \   00000782   0x7008             STRB     R0,[R1, #+0]
    465              }
    466            }
    467          
    468            //We can clear PRIMASK to reenable global interrupt operation.
    469            __enable_irq();
   \                     ??BlueNRG_InternalSleep_16: (+1)
   \   00000784   0xB662             CPSIE    I
    470          
    471          }
   \   00000786   0xB07F             ADD      SP,SP,#+508
   \   00000788   0xB012             ADD      SP,SP,#+72
   \   0000078A   0xBDF0             POP      {R4-R7,PC}       ;; return
    472          

   \                                 In section .text, align 2, keep-with-next
    473          uint8_t BlueNRG_Sleep(SleepModes sleepMode,
    474                                uint8_t gpioWakeBitMask,
    475                                uint8_t gpioWakeLevelMask)
    476          {
   \                     BlueNRG_Sleep: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000F             MOVS     R7,R1
   \   00000006   0x0015             MOVS     R5,R2
    477            SleepModes app_sleepMode, ble_sleepMode, sleepMode_allowed;
    478          
    479            /* Mask all the interrupt */
    480            __disable_irq();
   \   00000008   0xB672             CPSID    I
    481          
    482            ble_sleepMode = (SleepModes)BlueNRG_Stack_Perform_Deep_Sleep_Check();
   \   0000000A   0x.... 0x....      BL       BlueNRG_Stack_Perform_Deep_Sleep_Check
   \   0000000E   0x0006             MOVS     R6,R0
    483            app_sleepMode = App_SleepMode_Check(sleepMode);
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       App_SleepMode_Check
    484            sleepMode_allowed = MIN(app_sleepMode, sleepMode);
   \   00000016   0x0001             MOVS     R1,R0
   \   00000018   0x42A1             CMP      R1,R4
   \   0000001A   0xD900             BLS      ??BlueNRG_Sleep_0
   \   0000001C   0x0021             MOVS     R1,R4
    485            sleepMode_allowed = MIN(ble_sleepMode, sleepMode_allowed);
   \                     ??BlueNRG_Sleep_0: (+1)
   \   0000001E   0x0030             MOVS     R0,R6
   \   00000020   0x4288             CMP      R0,R1
   \   00000022   0xD900             BLS      ??BlueNRG_Sleep_1
   \   00000024   0x0008             MOVS     R0,R1
    486          
    487          #ifdef DEBUG_SLEEP_MODE
    488            sleepMode_selected[sleepMode_allowed]++;
   \                     ??BlueNRG_Sleep_1: (+1)
   \   00000026   0x....             LDR      R2,??DataTable2_9
   \   00000028   0x0083             LSLS     R3,R0,#+2
   \   0000002A   0x18D2             ADDS     R2,R2,R3
   \   0000002C   0x6813             LDR      R3,[R2, #+0]
   \   0000002E   0x1C5B             ADDS     R3,R3,#+1
   \   00000030   0x6013             STR      R3,[R2, #+0]
    489          #endif
    490          
    491            if (sleepMode_allowed == SLEEPMODE_RUNNING) {
   \   00000032   0x0002             MOVS     R2,R0
   \   00000034   0xD101             BNE      ??BlueNRG_Sleep_2
    492              /* Unmask all the interrupt */
    493              __enable_irq();
   \   00000036   0xB662             CPSIE    I
    494               return SUCCESS;
   \   00000038   0xE00B             B        ??BlueNRG_Sleep_3
    495            }
    496          
    497            if (sleepMode_allowed == SLEEPMODE_CPU_HALT) {
   \                     ??BlueNRG_Sleep_2: (+1)
   \   0000003A   0x2801             CMP      R0,#+1
   \   0000003C   0xD103             BNE      ??BlueNRG_Sleep_4
    498              BlueNRG_IdleSleep();
   \   0000003E   0x.... 0x....      BL       BlueNRG_IdleSleep
    499              /* Unmask all the interrupt */
    500              __enable_irq();
   \   00000042   0xB662             CPSIE    I
    501              return SUCCESS;
   \   00000044   0xE005             B        ??BlueNRG_Sleep_3
    502            }
    503          
    504            /* Setup the Wakeup Source */
    505            SYSTEM_CTRL->WKP_IO_IS = gpioWakeLevelMask;
   \                     ??BlueNRG_Sleep_4: (+1)
   \   00000046   0x....             LDR      R1,??DataTable2_10  ;; 0x40200000
   \   00000048   0x700D             STRB     R5,[R1, #+0]
    506            SYSTEM_CTRL->WKP_IO_IE = gpioWakeBitMask;
   \   0000004A   0x710F             STRB     R7,[R1, #+4]
    507          
    508            BlueNRG_InternalSleep(sleepMode_allowed, gpioWakeBitMask);
   \   0000004C   0x0039             MOVS     R1,R7
   \   0000004E   0x.... 0x....      BL       BlueNRG_InternalSleep
    509          
    510            return SUCCESS;
   \                     ??BlueNRG_Sleep_3: (+1)
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    511          }
    512          

   \                                 In section .text, align 2, keep-with-next
    513          uint8_t BlueNRG_WakeupSource(void)
    514          {
    515            if ((CKGEN_SOC->REASON_RST == 0) &&
    516                (CKGEN_BLE->REASON_RST >= WAKENED_FROM_IO9) &&
    517                (CKGEN_BLE->REASON_RST <= WAKENED_FROM_IO13)) {
   \                     BlueNRG_WakeupSource: (+1)
   \   00000000   0x....             LDR      R0,??DataTable2_11  ;; 0x40900008
   \   00000002   0x7801             LDRB     R1,[R0, #+0]
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD129             BNE      ??BlueNRG_WakeupSource_0
   \   00000008   0x....             LDR      R1,??DataTable2_12  ;; 0x48100008
   \   0000000A   0x880A             LDRH     R2,[R1, #+0]
   \   0000000C   0x2A09             CMP      R2,#+9
   \   0000000E   0xDB25             BLT      ??BlueNRG_WakeupSource_0
   \   00000010   0x880A             LDRH     R2,[R1, #+0]
   \   00000012   0x2A82             CMP      R2,#+130
   \   00000014   0xDA22             BGE      ??BlueNRG_WakeupSource_0
    518              if ((CKGEN_BLE->REASON_RST & WAKENED_FROM_IO9) == WAKENED_FROM_IO9) {
   \   00000016   0x880A             LDRH     R2,[R1, #+0]
   \   00000018   0x2309             MOVS     R3,#+9
   \   0000001A   0x4013             ANDS     R3,R3,R2
   \   0000001C   0x2B09             CMP      R3,#+9
   \   0000001E   0xD101             BNE      ??BlueNRG_WakeupSource_1
    519                return WAKEUP_IO9;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x4770             BX       LR
    520              }
    521              if ((CKGEN_BLE->REASON_RST & WAKENED_FROM_IO10) == WAKENED_FROM_IO10) {
   \                     ??BlueNRG_WakeupSource_1: (+1)
   \   00000024   0x880A             LDRH     R2,[R1, #+0]
   \   00000026   0x2311             MOVS     R3,#+17
   \   00000028   0x4013             ANDS     R3,R3,R2
   \   0000002A   0x2B11             CMP      R3,#+17
   \   0000002C   0xD101             BNE      ??BlueNRG_WakeupSource_2
    522                return WAKEUP_IO10;
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0x4770             BX       LR
    523              }
    524              if ((CKGEN_BLE->REASON_RST & WAKENED_FROM_IO11) == WAKENED_FROM_IO11) {
   \                     ??BlueNRG_WakeupSource_2: (+1)
   \   00000032   0x880A             LDRH     R2,[R1, #+0]
   \   00000034   0x2321             MOVS     R3,#+33
   \   00000036   0x4013             ANDS     R3,R3,R2
   \   00000038   0x2B21             CMP      R3,#+33
   \   0000003A   0xD101             BNE      ??BlueNRG_WakeupSource_3
    525                return WAKEUP_IO11;
   \   0000003C   0x2004             MOVS     R0,#+4
   \   0000003E   0x4770             BX       LR
    526              }
    527              if ((CKGEN_BLE->REASON_RST & WAKENED_FROM_IO12) == WAKENED_FROM_IO12) {
   \                     ??BlueNRG_WakeupSource_3: (+1)
   \   00000040   0x880A             LDRH     R2,[R1, #+0]
   \   00000042   0x2341             MOVS     R3,#+65
   \   00000044   0x4013             ANDS     R3,R3,R2
   \   00000046   0x2B41             CMP      R3,#+65
   \   00000048   0xD101             BNE      ??BlueNRG_WakeupSource_4
    528                return WAKEUP_IO12;
   \   0000004A   0x2008             MOVS     R0,#+8
   \   0000004C   0x4770             BX       LR
    529              }
    530              if ((CKGEN_BLE->REASON_RST & WAKENED_FROM_IO13) == WAKENED_FROM_IO13) {
   \                     ??BlueNRG_WakeupSource_4: (+1)
   \   0000004E   0x8809             LDRH     R1,[R1, #+0]
   \   00000050   0x2281             MOVS     R2,#+129
   \   00000052   0x400A             ANDS     R2,R2,R1
   \   00000054   0x2A81             CMP      R2,#+129
   \   00000056   0xD101             BNE      ??BlueNRG_WakeupSource_0
    531                return WAKEUP_IO13;
   \   00000058   0x2010             MOVS     R0,#+16
   \   0000005A   0x4770             BX       LR
    532              }
    533            }
    534            if ((CKGEN_SOC->REASON_RST == 0) &&
    535                ((CKGEN_BLE->REASON_RST & WAKENED_FROM_BLUE_TIMER1) == WAKENED_FROM_BLUE_TIMER1)) {
   \                     ??BlueNRG_WakeupSource_0: (+1)
   \   0000005C   0x7801             LDRB     R1,[R0, #+0]
   \   0000005E   0x2900             CMP      R1,#+0
   \   00000060   0xD108             BNE      ??BlueNRG_WakeupSource_5
   \   00000062   0x21FF             MOVS     R1,#+255
   \   00000064   0x1C89             ADDS     R1,R1,#+2        ;; #+257
   \   00000066   0x....             LDR      R2,??DataTable2_12  ;; 0x48100008
   \   00000068   0x8812             LDRH     R2,[R2, #+0]
   \   0000006A   0x400A             ANDS     R2,R2,R1
   \   0000006C   0x428A             CMP      R2,R1
   \   0000006E   0xD101             BNE      ??BlueNRG_WakeupSource_5
    536              return WAKEUP_SLEEP_TIMER1;
   \   00000070   0x2020             MOVS     R0,#+32
   \   00000072   0x4770             BX       LR
    537            }
    538            if ((CKGEN_SOC->REASON_RST == 0) &&
    539                ((CKGEN_BLE->REASON_RST & WAKENED_FROM_BLUE_TIMER2) == WAKENED_FROM_BLUE_TIMER2)) {
   \                     ??BlueNRG_WakeupSource_5: (+1)
   \   00000074   0x7801             LDRB     R1,[R0, #+0]
   \   00000076   0x2900             CMP      R1,#+0
   \   00000078   0xD107             BNE      ??BlueNRG_WakeupSource_6
   \   0000007A   0x....             LDR      R1,??DataTable2_13  ;; 0x401
   \   0000007C   0x....             LDR      R2,??DataTable2_12  ;; 0x48100008
   \   0000007E   0x8812             LDRH     R2,[R2, #+0]
   \   00000080   0x400A             ANDS     R2,R2,R1
   \   00000082   0x428A             CMP      R2,R1
   \   00000084   0xD101             BNE      ??BlueNRG_WakeupSource_6
    540              return WAKEUP_SLEEP_TIMER2;
   \   00000086   0x2040             MOVS     R0,#+64
   \   00000088   0x4770             BX       LR
    541            }
    542            if ((CKGEN_SOC->REASON_RST == 0) &&
    543                ((CKGEN_BLE->REASON_RST & WAKENED_FROM_POR) == WAKENED_FROM_POR)) {
   \                     ??BlueNRG_WakeupSource_6: (+1)
   \   0000008A   0x7801             LDRB     R1,[R0, #+0]
   \   0000008C   0x2900             CMP      R1,#+0
   \   0000008E   0xD107             BNE      ??BlueNRG_WakeupSource_7
   \   00000090   0x....             LDR      R1,??DataTable2_12  ;; 0x48100008
   \   00000092   0x8809             LDRH     R1,[R1, #+0]
   \   00000094   0x2205             MOVS     R2,#+5
   \   00000096   0x400A             ANDS     R2,R2,R1
   \   00000098   0x2A05             CMP      R2,#+5
   \   0000009A   0xD101             BNE      ??BlueNRG_WakeupSource_7
    544              return WAKEUP_POR;
   \   0000009C   0x20F1             MOVS     R0,#+241
   \   0000009E   0x4770             BX       LR
    545            }
    546            if ((CKGEN_SOC->REASON_RST == 0) &&
    547                ((CKGEN_BLE->REASON_RST & WAKENED_FROM_BOR) == WAKENED_FROM_BOR)) {
   \                     ??BlueNRG_WakeupSource_7: (+1)
   \   000000A0   0x7801             LDRB     R1,[R0, #+0]
   \   000000A2   0x2900             CMP      R1,#+0
   \   000000A4   0xD107             BNE      ??BlueNRG_WakeupSource_8
   \   000000A6   0x....             LDR      R1,??DataTable2_12  ;; 0x48100008
   \   000000A8   0x8809             LDRH     R1,[R1, #+0]
   \   000000AA   0x0789             LSLS     R1,R1,#+30
   \   000000AC   0x0F89             LSRS     R1,R1,#+30
   \   000000AE   0x2903             CMP      R1,#+3
   \   000000B0   0xD101             BNE      ??BlueNRG_WakeupSource_8
    548              return WAKEUP_BOR;
   \   000000B2   0x20F0             MOVS     R0,#+240
   \   000000B4   0x4770             BX       LR
    549            }
    550            if (CKGEN_SOC->REASON_RST == 2) {
   \                     ??BlueNRG_WakeupSource_8: (+1)
   \   000000B6   0x7801             LDRB     R1,[R0, #+0]
   \   000000B8   0x2902             CMP      R1,#+2
   \   000000BA   0xD101             BNE      ??BlueNRG_WakeupSource_9
    551              return WAKEUP_SYS_RESET_REQ;
   \   000000BC   0x20F2             MOVS     R0,#+242
   \   000000BE   0x4770             BX       LR
    552            }
    553            if (CKGEN_SOC->REASON_RST == 4) {
   \                     ??BlueNRG_WakeupSource_9: (+1)
   \   000000C0   0x7800             LDRB     R0,[R0, #+0]
   \   000000C2   0x2804             CMP      R0,#+4
   \   000000C4   0xD101             BNE      ??BlueNRG_WakeupSource_10
    554              return WAKEUP_RESET_WDG;
   \   000000C6   0x20F3             MOVS     R0,#+243
   \   000000C8   0x4770             BX       LR
    555            }
    556          
    557            return NO_WAKEUP_RESET;
   \                     ??BlueNRG_WakeupSource_10: (+1)
   \   000000CA   0x20FF             MOVS     R0,#+255
   \   000000CC   0x4770             BX       LR               ;; return
    558          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x48100008         DC32     0x48100008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x40100004         DC32     0x40100004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_3:
   \   00000000   0xE000ED04         DC32     0xe000ed04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_4:
   \   00000000   0x40900008         DC32     0x40900008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_5:
   \   00000000   0x4030000C         DC32     0x4030000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_6:
   \   00000000   0x40400000         DC32     0x40400000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x40A00000         DC32     0x40a00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0xE000E010         DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x40D00004         DC32     0x40d00004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x40E00004         DC32     0x40e00004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x40700000         DC32     0x40700000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x40700C00         DC32     0x40700c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0xA0000008         DC32     0xa0000008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0xC0000008         DC32     0xc0000008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0xE000E200         DC32     0xe000e200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x48000004         DC32     0x48000004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0xCFFFFFFF         DC32     0xcfffffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x40200008         DC32     0x40200008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x40C00000         DC32     0x40c00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x........         DC32     sleepMode_selected

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x40200000         DC32     0x40200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x40900008         DC32     0x40900008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x48100008         DC32     0x48100008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x00000401         DC32     0x401

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   App_SleepMode_Check
     600   BlueNRG_InternalSleep
       600   -> CS_contextSave
       600   -> DeviceConfiguration
       600   -> SystemSleepCmd
      24   BlueNRG_Sleep
        24   -> App_SleepMode_Check
        24   -> BlueNRG_IdleSleep
        24   -> BlueNRG_InternalSleep
        24   -> BlueNRG_Stack_Perform_Deep_Sleep_Check
       0   BlueNRG_WakeupSource


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
       4  ??DataTable0_3
       4  ??DataTable0_4
       4  ??DataTable0_5
       4  ??DataTable0_6
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
       4  App_SleepMode_Check
    1932  BlueNRG_InternalSleep
      86  BlueNRG_Sleep
     206  BlueNRG_WakeupSource
      44  cStackPreamble
          ptr
      16  sleepMode_selected

 
    60 bytes in section .bss
 2 328 bytes in section .text
 
 2 324 bytes of CODE memory (+ 4 bytes shared)
    60 bytes of DATA memory

Errors: none
Warnings: 1
