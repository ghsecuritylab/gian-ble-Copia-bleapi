###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       19/Mar/2018  13:32:54
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  .\BLUE1\sdk_hal\src\gp_timer.c
#    Command line =  
#        --no_wrap_diagnostics -e --diag_suppress=Pa050,Pa084,Pa093,Pa082 -Oh
#        --enable_restrict --cpu Cortex-M0 --thumb --dlib_config
#        DLib_Config_Full.h --vla -DTARGET_CORTEX -DTARGET_UVISOR_UNSUPPORTED
#        -DTARGET_STMBLUE -D__MBED_CMSIS_RTOS_CM -DTARGET_STEVAL_IDB007V1
#        -DMBED_BUILD_TIMESTAMP=1521462769.94 -DTARGET_CORTEX_M -DDEVICE_SPI=1
#        -DTARGET_LIKE_MBED -DARM_MATH_CM0 -DTARGET_RELEASE -D__CORTEX_M0
#        -DTARGET_BLUENRG1 -D__MBED__=1 -DTARGET_M0 -DTOOLCHAIN_object
#        -DDEVICE_SERIAL=1 -D__CMSIS_RTOS -DTOOLCHAIN_IAR
#        -DTARGET_LIKE_CORTEX_M0 -DFEATURE_BLE=1 -f
#        .\BUILD\STEVAL_IDB007V1\IAR\.includes_dcedd7aa577106f9c79229685e6ddb41.txt
#        (-I. -I./BLUE1 -I./BLUE1/Bluetooth_LE -I./BLUE1/Bluetooth_LE/inc
#        -I./BLUE1/Bluetooth_LE/library -I./BLUE1/LSM6DS3 -I./BLUE1/SensorDemo
#        -I./BLUE1/sdk_hal -I./BLUE1/sdk_hal/inc -I./BLUE1/sdk_hal/src
#        -I./Beacon_inc -I./mbed-os -I./mbed-os/cmsis
#        -I./mbed-os/cmsis/TARGET_CORTEX_M
#        -I./mbed-os/cmsis/TARGET_CORTEX_M/TOOLCHAIN_IAR -I./mbed-os/drivers
#        -I./mbed-os/events -I./mbed-os/events/equeue -I./mbed-os/features
#        -I./mbed-os/features/FEATURE_BLE -I./mbed-os/features/FEATURE_BLE/ble
#        -I./mbed-os/features/FEATURE_BLE/ble/generic
#        -I./mbed-os/features/FEATURE_BLE/ble/pal
#        -I./mbed-os/features/FEATURE_BLE/ble/services
#        -I./mbed-os/features/FEATURE_BLE/source
#        -I./mbed-os/features/FEATURE_BLE/source/generic
#        -I./mbed-os/features/FEATURE_BLE/source/services
#        -I./mbed-os/features/FEATURE_BLE/targets
#        -I./mbed-os/features/filesystem -I./mbed-os/features/filesystem/bd
#        -I./mbed-os/features/filesystem/fat
#        -I./mbed-os/features/filesystem/fat/ChaN -I./mbed-os/features/mbedtls
#        -I./mbed-os/features/mbedtls/importer -I./mbed-os/features/mbedtls/inc
#        -I./mbed-os/features/mbedtls/inc/mbedtls
#        -I./mbed-os/features/mbedtls/platform
#        -I./mbed-os/features/mbedtls/platform/inc
#        -I./mbed-os/features/mbedtls/platform/src
#        -I./mbed-os/features/mbedtls/src -I./mbed-os/features/mbedtls/targets
#        -I./mbed-os/features/nanostack -I./mbed-os/hal
#        -I./mbed-os/hal/storage_abstraction -I./mbed-os/platform
#        -I./mbed-os/rtos -I./mbed-os/rtos/TARGET_CORTEX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx4
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Config
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Include
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/RTX/Source/TOOLCHAIN_IAR/TARGET_M0
#        -I./mbed-os/rtos/TARGET_CORTEX/rtx5/Source -I./mbed-os/targets
#        -I./mbed-os/targets/TARGET_STMBLUE
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/TARGET_STEVAL_IDB007V1/device/TOOLCHAIN_IAR
#        -I./mbed-os/targets/TARGET_STMBLUE/TARGET_BLUENRG1/device -I./settings
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/BUILD
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed
#        -IC:/Users/Gianluca/mbedCLIdev/gian-ble-Copia-bleapi/mbed-os/features/unsupported/tests/mbed/env)
#        --preinclude=.\BUILD\STEVAL_IDB007V1\IAR\mbed_config.h --dependencies
#        .\BUILD\STEVAL_IDB007V1\IAR\BLUE1\sdk_hal\src\gp_timer.d -l
#        .\BUILD\STEVAL_IDB007V1\IAR\BLUE1\sdk_hal\src\gp_timer.s.txt -o
#        .\BUILD\STEVAL_IDB007V1\IAR\BLUE1\sdk_hal\src\gp_timer.o
#        .\BLUE1\sdk_hal\src\gp_timer.c
#    Locale       =  Italian_Italy.1252
#    List file    =  
#        .\BUILD\STEVAL_IDB007V1\IAR\BLUE1\sdk_hal\src\gp_timer.s.txt
#    Object file  =  .\BUILD\STEVAL_IDB007V1\IAR\BLUE1\sdk_hal\src\gp_timer.o
#
###############################################################################

C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\BLUE1\sdk_hal\src\gp_timer.c
      1          /**
      2          ******************************************************************************
      3          * @file    gp_timer.c 
      4          * @author  AMS - VMA RF Application Team
      5          * @version V1.0.0
      6          * @date    14-September-2015
      7          * @brief   General purpose timer library.
      8          ******************************************************************************
      9          * @attention
     10          *
     11          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13          * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14          * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15          * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16          * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17          *
     18          * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
     19          ******************************************************************************
     20          */ 
     21          /* Includes ------------------------------------------------------------------*/
     22          
     23          #include "clock.h"

  typedef uint8_t BOOL;  //already defined in "hal_type.h"
                  ^
"C:\Users\Gianluca\mbedCLIdev\gian-ble-Copia-bleapi\mbed-os\targets\TARGET_STMBLUE\TARGET_BLUENRG1\TARGET_STEVAL_IDB007V1\device\system_BlueNRG1.h",240  Warning[Pe301]: typedef name has already been declared (with same type)
     24          #include "gp_timer.h"
     25          
     26          /*---------------------------------------------------------------------------*/
     27          /**
     28           * Set a timer.
     29           *
     30           * This function sets a timer for a time sometime in the
     31           * future. The function timer_expired() will evaluate to true after
     32           * the timer has expired.
     33           *
     34           * @param[in] t         A pointer to the timer
     35           * @param[in] interval  The interval before the timer expires.
     36           *
     37           */

   \                                 In section .text, align 2, keep-with-next
     38          void
     39          Timer_Set(struct timer *t, tClockTime interval)
     40          {
   \                     Timer_Set: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     41            t->interval = interval;
   \   00000004   0x6061             STR      R1,[R4, #+4]
     42            t->start = Clock_Time();
   \   00000006   0x.... 0x....      BL       Clock_Time
   \   0000000A   0x6020             STR      R0,[R4, #+0]
     43          }
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return
     44          /*---------------------------------------------------------------------------*/
     45          /**
     46           * Reset the timer with the same interval.
     47           *
     48           * This function resets the timer with the same interval that was
     49           * given to the timer_set() function. The start point of the interval
     50           * is the exact time that the timer last expired. Therefore, this
     51           * function will cause the timer to be stable over time, unlike the
     52           * timer_restart() function.
     53           *
     54           * \param t A pointer to the timer.
     55           *
     56           * \sa timer_restart()
     57           */

   \                                 In section .text, align 2, keep-with-next
     58          void
     59          Timer_Reset(struct timer *t)
     60          {
     61            t->start += t->interval;
   \                     Timer_Reset: (+1)
   \   00000000   0x6801             LDR      R1,[R0, #+0]
   \   00000002   0x6842             LDR      R2,[R0, #+4]
   \   00000004   0x1889             ADDS     R1,R1,R2
   \   00000006   0x6001             STR      R1,[R0, #+0]
     62          }
   \   00000008   0x4770             BX       LR               ;; return
     63          /*---------------------------------------------------------------------------*/
     64          /**
     65           * Restart the timer from the current point in time
     66           *
     67           * This function restarts a timer with the same interval that was
     68           * given to the timer_set() function. The timer will start at the
     69           * current time.
     70           *
     71           * \note A periodic timer will drift if this function is used to reset
     72           * it. For preioric timers, use the timer_reset() function instead.
     73           *
     74           * \param t A pointer to the timer.
     75           *
     76           * \sa timer_reset()
     77           */

   \                                 In section .text, align 2, keep-with-next
     78          void
     79          Timer_Restart(struct timer *t)
     80          {
   \                     Timer_Restart: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     81            t->start = Clock_Time();
   \   00000004   0x.... 0x....      BL       Clock_Time
   \   00000008   0x6020             STR      R0,[R4, #+0]
     82          }
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
     83          /*---------------------------------------------------------------------------*/
     84          /**
     85           * Check if a timer has expired.
     86           *
     87           * This function tests if a timer has expired and returns true or
     88           * false depending on its status.
     89           *
     90           * \param t A pointer to the timer
     91           *
     92           * \return Non-zero if the timer has expired, zero otherwise.
     93           *
     94           */

   \                                 In section .text, align 2, keep-with-next
     95          int
     96          Timer_Expired(struct timer *t)
     97          {
   \                     Timer_Expired: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     98            /* Note: Can not return diff >= t->interval so we add 1 to diff and return
     99               t->interval < diff - required to avoid an internal error in mspgcc. */
    100            tClockTime diff = (Clock_Time() - t->start) + 1;
   \   00000004   0x.... 0x....      BL       Clock_Time
    101            return t->interval < diff;
   \   00000008   0x6861             LDR      R1,[R4, #+4]
   \   0000000A   0x6822             LDR      R2,[R4, #+0]
   \   0000000C   0x1A80             SUBS     R0,R0,R2
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \   00000010   0x4281             CMP      R1,R0
   \   00000012   0x4180             SBCS     R0,R0,R0
   \   00000014   0x0FC0             LSRS     R0,R0,#+31
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    102          
    103          }
    104          /*---------------------------------------------------------------------------*/
    105          /**
    106           * The time until the timer expires
    107           *
    108           * This function returns the time until the timer expires.
    109           *
    110           * \param t A pointer to the timer
    111           *
    112           * \return The time until the timer expires
    113           *
    114           */

   \                                 In section .text, align 2, keep-with-next
    115          tClockTime
    116          Timer_Remaining(struct timer *t)
    117          {
   \                     Timer_Remaining: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    118            return t->start + t->interval - Clock_Time();
   \   00000004   0x.... 0x....      BL       Clock_Time
   \   00000008   0x6821             LDR      R1,[R4, #+0]
   \   0000000A   0x6862             LDR      R2,[R4, #+4]
   \   0000000C   0x1889             ADDS     R1,R1,R2
   \   0000000E   0x1A08             SUBS     R0,R1,R0
   \   00000010   0xBD10             POP      {R4,PC}          ;; return
    119          }
    120          /*---------------------------------------------------------------------------*/
    121          
    122          /** @} */
    123          
    124          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Timer_Expired
         8   -> Clock_Time
       8   Timer_Remaining
         8   -> Clock_Time
       0   Timer_Reset
       8   Timer_Restart
         8   -> Clock_Time
       8   Timer_Set
         8   -> Clock_Time


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  Timer_Expired
      18  Timer_Remaining
      10  Timer_Reset
      12  Timer_Restart
      14  Timer_Set

 
 78 bytes in section .text
 
 78 bytes of CODE memory

Errors: none
Warnings: 1
